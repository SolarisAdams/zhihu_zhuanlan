{
    "title": "慢入前端坑", 
    "description": "慢即是快", 
    "followers": [
        "https://www.zhihu.com/people/li-jia-xu-53-2", 
        "https://www.zhihu.com/people/miao-da-miao-13", 
        "https://www.zhihu.com/people/yi-wen-7-31", 
        "https://www.zhihu.com/people/cao-shu-zhuang", 
        "https://www.zhihu.com/people/secret-fwj", 
        "https://www.zhihu.com/people/stephen-34-51", 
        "https://www.zhihu.com/people/ken-41-80", 
        "https://www.zhihu.com/people/marco-37-35", 
        "https://www.zhihu.com/people/xin-zhi-10-58", 
        "https://www.zhihu.com/people/liang-cheng-x-40", 
        "https://www.zhihu.com/people/wzs-26-78", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/xia-lin-9-91", 
        "https://www.zhihu.com/people/cwangs", 
        "https://www.zhihu.com/people/xuhaihua", 
        "https://www.zhihu.com/people/richard-71-95-83", 
        "https://www.zhihu.com/people/lzzzzz94", 
        "https://www.zhihu.com/people/wang-jun-shi-44", 
        "https://www.zhihu.com/people/shit-yang", 
        "https://www.zhihu.com/people/lu-xin-yan-45-31", 
        "https://www.zhihu.com/people/fu-yi-67", 
        "https://www.zhihu.com/people/crystal-96-27", 
        "https://www.zhihu.com/people/xia-lan-bai", 
        "https://www.zhihu.com/people/pei-pei-44-46", 
        "https://www.zhihu.com/people/ly1019", 
        "https://www.zhihu.com/people/xu-hao-er-shi-san", 
        "https://www.zhihu.com/people/da-ming-zi-92-23", 
        "https://www.zhihu.com/people/yu-du-90", 
        "https://www.zhihu.com/people/shihkai", 
        "https://www.zhihu.com/people/wang-yu-han-85-82", 
        "https://www.zhihu.com/people/hei-bai-tian-kong-xia", 
        "https://www.zhihu.com/people/wczcw", 
        "https://www.zhihu.com/people/excia-40", 
        "https://www.zhihu.com/people/chen-chen-memeda", 
        "https://www.zhihu.com/people/pmc-qin", 
        "https://www.zhihu.com/people/li-qi-long-23", 
        "https://www.zhihu.com/people/nick-nelson", 
        "https://www.zhihu.com/people/xiao-lu-85-68", 
        "https://www.zhihu.com/people/luo-ji-yin-85", 
        "https://www.zhihu.com/people/shi-qu-15-16", 
        "https://www.zhihu.com/people/shizu17", 
        "https://www.zhihu.com/people/la-la-la-56", 
        "https://www.zhihu.com/people/wei-yu-ji-26", 
        "https://www.zhihu.com/people/wang-ge-45-39", 
        "https://www.zhihu.com/people/wang-xiao-jun-1-89", 
        "https://www.zhihu.com/people/ma-ke-si-82-6", 
        "https://www.zhihu.com/people/mo-xu-45", 
        "https://www.zhihu.com/people/qian-qian-40-19", 
        "https://www.zhihu.com/people/65hao", 
        "https://www.zhihu.com/people/zhihao-zhang-95", 
        "https://www.zhihu.com/people/kevinfu", 
        "https://www.zhihu.com/people/li-xiao-fei-83-94", 
        "https://www.zhihu.com/people/lp1984", 
        "https://www.zhihu.com/people/sailingcai", 
        "https://www.zhihu.com/people/na-pian-sui-yue", 
        "https://www.zhihu.com/people/wu-ming-shi-31-47", 
        "https://www.zhihu.com/people/adorelu", 
        "https://www.zhihu.com/people/xu-jian-guo-31-16", 
        "https://www.zhihu.com/people/wang-xiang-zhong-5", 
        "https://www.zhihu.com/people/mao-mao-58-95-76", 
        "https://www.zhihu.com/people/hao-duo-hao-duo-jiu-73", 
        "https://www.zhihu.com/people/luo-kai-wen", 
        "https://www.zhihu.com/people/a-a-42-91-53", 
        "https://www.zhihu.com/people/liu-zi-mo-85-80", 
        "https://www.zhihu.com/people/yin-wei-zhe-22", 
        "https://www.zhihu.com/people/xu-qing-jia-yi", 
        "https://www.zhihu.com/people/zhang-en-hao"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/60950490", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 2, 
            "title": "接口入门（四）：前端的登录和注册界面", 
            "content": "<p>居然15天没更新了！？</p><p>现在我们来搭建一下登录和注册页面，如果访问的路由不对，我们再展示一个404页面。在这里我们用到的是<a href=\"https://link.zhihu.com/?target=http%3A//element-cn.eleme.io/%23/zh-CN\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">element-cn.eleme.io/#</span><span class=\"invisible\">/zh-CN</span><span class=\"ellipsis\"></span></a> 组件库。安装（注意是装到client里面 npm i element-ui -S），使用（在main.js中引入、使用）。</p><p>准备好相应的图片（背景图、404图、logo等）</p><p>首先：在views中，新建一个register组件，配置register路由。</p><p>也新建一个404组件，同样也配置下404的路由。</p><p>这个没法记录……</p><p>无非就是配置validator。和validator.js的用法基本一致。</p><p>值得一提的是trigger，blur失去焦点就验证，change只要value值变化了就验证。</p><p>当用户点击注册按钮时以后，可以呈现一个加载中的动画效果，直到提示用户注册成功。</p><p>使用axios，和element-ui中的loading。</p><p>在使用axios时，我们又要用到请求拦截和响应拦截。</p><p>可以在src目录下新建一个http.js来做一个专门的请求拦截文件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c0da8e6e862d5360c77127c8fd40f84e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"435\" data-original=\"https://pic3.zhimg.com/v2-c0da8e6e862d5360c77127c8fd40f84e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;435&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"435\" data-original=\"https://pic3.zhimg.com/v2-c0da8e6e862d5360c77127c8fd40f84e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c0da8e6e862d5360c77127c8fd40f84e_b.jpg\"/></figure><p>在main.js中引入这个http.js文件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5a74cdf0d53147db4361ef9a538ffd8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"131\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic2.zhimg.com/v2-5a74cdf0d53147db4361ef9a538ffd8d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;131&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"131\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic2.zhimg.com/v2-5a74cdf0d53147db4361ef9a538ffd8d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5a74cdf0d53147db4361ef9a538ffd8d_b.jpg\"/></figure><p>现在可以好好写http.js了。</p><p>写一个开始加载动画函数，一个结束加载动画函数，在请求拦截中加载，在响应拦截中结束动画。</p><p>这里可以用到message组件, 类似toast</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f2912f267f489469c6fef0524aa3a2c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"893\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic2.zhimg.com/v2-f2912f267f489469c6fef0524aa3a2c1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;584&#39; height=&#39;893&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"893\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"584\" data-original=\"https://pic2.zhimg.com/v2-f2912f267f489469c6fef0524aa3a2c1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f2912f267f489469c6fef0524aa3a2c1_b.jpg\"/></figure><p>现在去配置下跨域请求。可以在后端server.js中进行配置，也可以在前端配置下。</p><p>新建一个vue.config.js配置好相关配置。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-07d09b932e3d1afaaca524f926e6e7cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"626\" data-original=\"https://pic4.zhimg.com/v2-07d09b932e3d1afaaca524f926e6e7cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;626&#39; height=&#39;538&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"626\" data-original=\"https://pic4.zhimg.com/v2-07d09b932e3d1afaaca524f926e6e7cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-07d09b932e3d1afaaca524f926e6e7cf_b.jpg\"/></figure><p>就可以看到效果了</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cf6c6c0742e71dfa8445474a1d906f14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"513\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb\" width=\"513\" data-original=\"https://pic1.zhimg.com/v2-cf6c6c0742e71dfa8445474a1d906f14_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;513&#39; height=&#39;481&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"513\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"513\" data-original=\"https://pic1.zhimg.com/v2-cf6c6c0742e71dfa8445474a1d906f14_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cf6c6c0742e71dfa8445474a1d906f14_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>实现登录页面获取token。</p><p>依旧是新建login组件，配置路由。</p><p>现在注册之后就可正常跳转到login页面。登陆之后也可以跳转到index页面。</p><p>我们还需要对token进行处理。</p><p>先把token存到本地，使用拦截的方式判断token是否过期等。</p><p>在没有登录之前，有些页面是不能访问的，这就是常说的路由守卫。</p><p>先调整下router.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-09c573166893f5c2d991d91ff48e364c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"365\" data-rawheight=\"151\" class=\"content_image\" width=\"365\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;365&#39; height=&#39;151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"365\" data-rawheight=\"151\" class=\"content_image lazy\" width=\"365\" data-actualsrc=\"https://pic1.zhimg.com/v2-09c573166893f5c2d991d91ff48e364c_b.jpg\"/></figure><p>这里只实例化了，并没有导出，将它导出</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-357bca2ac0896c9ffef29de640c104e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"417\" data-rawheight=\"252\" class=\"content_image\" width=\"417\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;417&#39; height=&#39;252&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"417\" data-rawheight=\"252\" class=\"content_image lazy\" width=\"417\" data-actualsrc=\"https://pic4.zhimg.com/v2-357bca2ac0896c9ffef29de640c104e3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后我们就可以实现路由守卫了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-91531ddcefe3f650f27ad9d7a71e7dd1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1038\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"1038\" data-original=\"https://pic2.zhimg.com/v2-91531ddcefe3f650f27ad9d7a71e7dd1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1038&#39; height=&#39;386&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1038\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1038\" data-original=\"https://pic2.zhimg.com/v2-91531ddcefe3f650f27ad9d7a71e7dd1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-91531ddcefe3f650f27ad9d7a71e7dd1_b.jpg\"/></figure><p>实现了路由守卫，还要去配置下请求拦截和响应拦截。因为登录成功以后，我们应该将当前的token设置为请求头，在响应拦截的时候判断当前的token是否过期，如果过期，我们需要移除，如果没有过期，所有需要token的接口就可以正常去使用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c60780f9fa72a7215f4608d2113a3613_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic4.zhimg.com/v2-c60780f9fa72a7215f4608d2113a3613_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic4.zhimg.com/v2-c60780f9fa72a7215f4608d2113a3613_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c60780f9fa72a7215f4608d2113a3613_b.jpg\"/></figure><p>响应拦截那看下返回的状态码是否是401（代表当前token已经失效）.</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-98c12524c13e865f58d97a2833b3f961_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"619\" class=\"origin_image zh-lightbox-thumb\" width=\"626\" data-original=\"https://pic2.zhimg.com/v2-98c12524c13e865f58d97a2833b3f961_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;626&#39; height=&#39;619&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"619\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"626\" data-original=\"https://pic2.zhimg.com/v2-98c12524c13e865f58d97a2833b3f961_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-98c12524c13e865f58d97a2833b3f961_b.jpg\"/></figure><p>可以到server端的user中修改下token过期时间，到后面发送请求时来测试下响应拦截。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4a7e280b514d94c8b2cc1217c634aed4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"950\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb\" width=\"950\" data-original=\"https://pic1.zhimg.com/v2-4a7e280b514d94c8b2cc1217c634aed4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;950&#39; height=&#39;662&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"950\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"950\" data-original=\"https://pic1.zhimg.com/v2-4a7e280b514d94c8b2cc1217c634aed4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4a7e280b514d94c8b2cc1217c634aed4_b.jpg\"/></figure><p>现在做下token解析，并把数据存到vuex中。</p><p>先在前端安装下解析token的模块：npm install --save jwt-decode</p><p>在需要解析的login组件引入jwt-decode，之后直接使用</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8067b072aed014fdbbb5974bf109fe77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb\" width=\"886\" data-original=\"https://pic4.zhimg.com/v2-8067b072aed014fdbbb5974bf109fe77_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;886&#39; height=&#39;303&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"886\" data-original=\"https://pic4.zhimg.com/v2-8067b072aed014fdbbb5974bf109fe77_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8067b072aed014fdbbb5974bf109fe77_b.jpg\"/></figure><p>打印出来的结果就是解析出来的数据</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7556b10e23ea908cec917d2431ae8354_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-7556b10e23ea908cec917d2431ae8354_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-7556b10e23ea908cec917d2431ae8354_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7556b10e23ea908cec917d2431ae8354_b.jpg\"/></figure><p>现在我们将它存储到vuex中。打开store.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5b69e627eb2baa89440bce51dd54e4e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic2.zhimg.com/v2-5b69e627eb2baa89440bce51dd54e4e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;490&#39; height=&#39;498&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"490\" data-original=\"https://pic2.zhimg.com/v2-5b69e627eb2baa89440bce51dd54e4e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5b69e627eb2baa89440bce51dd54e4e5_b.jpg\"/></figure><p>把store中的每一个属性都抽离出来：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0e06b118d84d458f8d03ae05c89b89da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"546\" class=\"content_image\" width=\"390\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;390&#39; height=&#39;546&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"546\" class=\"content_image lazy\" width=\"390\" data-actualsrc=\"https://pic3.zhimg.com/v2-0e06b118d84d458f8d03ae05c89b89da_b.jpg\"/></figure><p>我们在操作vuex的时候，它会给我们一个定义的类型，如下左侧会有一个对应的操作的名字</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-51c11dde349e82c5ae8c278c537bc731_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"682\" data-original=\"https://pic2.zhimg.com/v2-51c11dde349e82c5ae8c278c537bc731_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;682&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"682\" data-original=\"https://pic2.zhimg.com/v2-51c11dde349e82c5ae8c278c537bc731_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-51c11dde349e82c5ae8c278c537bc731_b.jpg\"/></figure><p>这个类型我们可以自己定义，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c54f4268de8c8a3bfb62a5afd88031eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"744\" data-original=\"https://pic4.zhimg.com/v2-c54f4268de8c8a3bfb62a5afd88031eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;744&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"744\" data-original=\"https://pic4.zhimg.com/v2-c54f4268de8c8a3bfb62a5afd88031eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c54f4268de8c8a3bfb62a5afd88031eb_b.jpg\"/></figure><p>在state中我们也来设置对应的状态</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f8b6bb234a20094fda509b9f25159962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-f8b6bb234a20094fda509b9f25159962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;485&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-f8b6bb234a20094fda509b9f25159962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f8b6bb234a20094fda509b9f25159962_b.jpg\"/></figure><p>现在到getters中获取这个状态</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9c437c9a6d7c65a948dc342770709e90_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic1.zhimg.com/v2-9c437c9a6d7c65a948dc342770709e90_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;612&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"612\" data-original=\"https://pic1.zhimg.com/v2-9c437c9a6d7c65a948dc342770709e90_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9c437c9a6d7c65a948dc342770709e90_b.jpg\"/></figure><p>改变这个状态信息</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-59707fb271792c95e720be435621019c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb\" width=\"797\" data-original=\"https://pic1.zhimg.com/v2-59707fb271792c95e720be435621019c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;797&#39; height=&#39;508&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"797\" data-original=\"https://pic1.zhimg.com/v2-59707fb271792c95e720be435621019c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-59707fb271792c95e720be435621019c_b.jpg\"/></figure><p>现在写一下一步操作的actions</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-524436508a65474419e6b66c1d2fb090_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"693\" data-rawheight=\"354\" class=\"origin_image zh-lightbox-thumb\" width=\"693\" data-original=\"https://pic1.zhimg.com/v2-524436508a65474419e6b66c1d2fb090_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;693&#39; height=&#39;354&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"693\" data-rawheight=\"354\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"693\" data-original=\"https://pic1.zhimg.com/v2-524436508a65474419e6b66c1d2fb090_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-524436508a65474419e6b66c1d2fb090_b.jpg\"/></figure><p>现在可以测试了，我们重新登录一下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-564c756a64e0cb2c6d8028ce30a59555_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-564c756a64e0cb2c6d8028ce30a59555_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;639&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-564c756a64e0cb2c6d8028ce30a59555_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-564c756a64e0cb2c6d8028ce30a59555_b.jpg\"/></figure><p>现在已经有状态了。我们可以到login组件中，将拿到的token存储到vuex中了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3c118bc80be4518e9f03178528ec9442_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"862\" data-original=\"https://pic3.zhimg.com/v2-3c118bc80be4518e9f03178528ec9442_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;862&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"862\" data-original=\"https://pic3.zhimg.com/v2-3c118bc80be4518e9f03178528ec9442_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3c118bc80be4518e9f03178528ec9442_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-11e4cd7c9d1277f900303273f05a02df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"828\" data-original=\"https://pic4.zhimg.com/v2-11e4cd7c9d1277f900303273f05a02df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;828&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"828\" data-original=\"https://pic4.zhimg.com/v2-11e4cd7c9d1277f900303273f05a02df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-11e4cd7c9d1277f900303273f05a02df_b.jpg\"/></figure><p>现在重新登录下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6ab8f7cfeedbd7776fc0bfde8cc24321_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-6ab8f7cfeedbd7776fc0bfde8cc24321_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;764&#39; height=&#39;371&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-6ab8f7cfeedbd7776fc0bfde8cc24321_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6ab8f7cfeedbd7776fc0bfde8cc24321_b.jpg\"/></figure><p>但是现在一旦刷新，又回变为空。因为我们根组件没有进行判断。</p><p>在APP.vue中也做一下存储</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bd89acd09e317c1fdcfb1b6184974418_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb\" width=\"891\" data-original=\"https://pic1.zhimg.com/v2-bd89acd09e317c1fdcfb1b6184974418_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;891&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"891\" data-original=\"https://pic1.zhimg.com/v2-bd89acd09e317c1fdcfb1b6184974418_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bd89acd09e317c1fdcfb1b6184974418_b.jpg\"/></figure><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": [
                {
                    "userName": "橘子在路上", 
                    "userLink": "https://www.zhihu.com/people/45d0be6eaba873a723c2bb8497d21107", 
                    "content": "很六了老哥", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59316111", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "接口入门（三）：数据信息（增删改查）及前端准备", 
            "content": "<p>-------------------------------------配置接口信息----------------------------------------</p><p>像user数据模型一样，先建一个数据信息的模型 models -&gt; Profile.js.</p><p>这个数据模型和user一样，都是需要引入mongoose、实例化Schema，以及创建一个Schema。把UserSchema改为ProfileSchema。导出的信息也是Profile。</p><p>现在就是一个资金流水的页面，我们需要的字段是：收支类型、收支描述、收入、支出、账户现金、备注。其中，收入、支出和账户现金是必填项。</p><p>这个Profile数据模型长这样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ac3753b1e4ddb96851ab0de8b3aff2fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb\" width=\"836\" data-original=\"https://pic2.zhimg.com/v2-ac3753b1e4ddb96851ab0de8b3aff2fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;836&#39; height=&#39;887&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"836\" data-original=\"https://pic2.zhimg.com/v2-ac3753b1e4ddb96851ab0de8b3aff2fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ac3753b1e4ddb96851ab0de8b3aff2fd_b.jpg\"/></figure><p>然后我们写个Profile的api，routes -&gt; api -&gt; profiles.js，现在我们到server.js里面引入一下这个api文件。同样的，也use一下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c2f0ba315cb1da263bba25ff648ac753_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"447\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"447\" data-original=\"https://pic4.zhimg.com/v2-c2f0ba315cb1da263bba25ff648ac753_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;447&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"447\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"447\" data-original=\"https://pic4.zhimg.com/v2-c2f0ba315cb1da263bba25ff648ac753_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c2f0ba315cb1da263bba25ff648ac753_b.jpg\"/></figure><p>(记住这个接口，后面要用)</p><p>现在我们写下profiles接口。</p><p>------------------------------------------添加信息----------------------------------------</p><p>和user接口一样，我们需要用到express、router、passport。</p><p>然后引入刚才的Profile数据模型。再写一个测试接口，确保可以走通。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f0b814c9ff5f16c37fe36ef38511b250_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb\" width=\"722\" data-original=\"https://pic1.zhimg.com/v2-f0b814c9ff5f16c37fe36ef38511b250_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;722&#39; height=&#39;507&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"722\" data-original=\"https://pic1.zhimg.com/v2-f0b814c9ff5f16c37fe36ef38511b250_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f0b814c9ff5f16c37fe36ef38511b250_b.jpg\"/></figure><p>我们到postman中测试一下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f7816a927d0c673b006d147039ea96c5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"675\" data-original=\"https://pic2.zhimg.com/v2-f7816a927d0c673b006d147039ea96c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;675&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"675\" data-original=\"https://pic2.zhimg.com/v2-f7816a927d0c673b006d147039ea96c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f7816a927d0c673b006d147039ea96c5_b.jpg\"/></figure><p>说明我们的接口是没问题的。那么我们的配置就完成了。</p><p>我们来添加一下信息：这个应该是一个post方法。私有接口。要用到passport来验证我们当前的token。</p><p>我们来验证下，用户填写的内容是存在的</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cf2e8161263a8407e97c14d308be7666_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"1055\" data-original=\"https://pic3.zhimg.com/v2-cf2e8161263a8407e97c14d308be7666_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1055&#39; height=&#39;335&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1055\" data-original=\"https://pic3.zhimg.com/v2-cf2e8161263a8407e97c14d308be7666_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cf2e8161263a8407e97c14d308be7666_b.jpg\"/></figure><p>其他的数据模型中的字段也同样判断下。然后我们存一下，存完后我们把存下来的这个数据被返回。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0aa9e80bcdbdc0c112cd8df3b92cc2db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1054\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"1054\" data-original=\"https://pic4.zhimg.com/v2-0aa9e80bcdbdc0c112cd8df3b92cc2db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1054&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1054\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1054\" data-original=\"https://pic4.zhimg.com/v2-0aa9e80bcdbdc0c112cd8df3b92cc2db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0aa9e80bcdbdc0c112cd8df3b92cc2db_b.jpg\"/></figure><p>我们到postman中测试下：</p><p>在header处，我们应该有个验证，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4d2b418ef569d7b3305ffc2735bab91b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb\" width=\"716\" data-original=\"https://pic4.zhimg.com/v2-4d2b418ef569d7b3305ffc2735bab91b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;716&#39; height=&#39;204&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"716\" data-original=\"https://pic4.zhimg.com/v2-4d2b418ef569d7b3305ffc2735bab91b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4d2b418ef569d7b3305ffc2735bab91b_b.jpg\"/></figure><p>在body处，我们填写上响应的参数：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2a04ec7029a898aadf074cb8cc486a9d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"686\" data-original=\"https://pic2.zhimg.com/v2-2a04ec7029a898aadf074cb8cc486a9d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;686&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"686\" data-original=\"https://pic2.zhimg.com/v2-2a04ec7029a898aadf074cb8cc486a9d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2a04ec7029a898aadf074cb8cc486a9d_b.jpg\"/></figure><p>send下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9a1adc020e99bf6f6fd0896c86cfc2f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic3.zhimg.com/v2-9a1adc020e99bf6f6fd0896c86cfc2f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;448&#39; height=&#39;332&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"448\" data-original=\"https://pic3.zhimg.com/v2-9a1adc020e99bf6f6fd0896c86cfc2f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9a1adc020e99bf6f6fd0896c86cfc2f6_b.jpg\"/></figure><p>现在我们添加信息的接口就完成了。</p><p>--------------------------------------获取信息--------------------------------------------</p><p>需要验证token，是个get请求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8b097f2ed448b9dabac4ff2b49d34767_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"964\" data-original=\"https://pic4.zhimg.com/v2-8b097f2ed448b9dabac4ff2b49d34767_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;964&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"964\" data-original=\"https://pic4.zhimg.com/v2-8b097f2ed448b9dabac4ff2b49d34767_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8b097f2ed448b9dabac4ff2b49d34767_b.jpg\"/></figure><p>如果没有数据，就返回个状态码，并提示没有数据，如果有，就返回这个Profile。</p><p>现在到postman中测试</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d0d0252c2e21e4d42c764a68767a0a4c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"587\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic1.zhimg.com/v2-d0d0252c2e21e4d42c764a68767a0a4c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;587&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"587\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic1.zhimg.com/v2-d0d0252c2e21e4d42c764a68767a0a4c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d0d0252c2e21e4d42c764a68767a0a4c_b.jpg\"/></figure><p>刚才手残，多点了下add，所以有两条数据。</p><p>这个接口是获取所有数据，现在来获取单个信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-74a2f0b2a020f0bcf92aea5144cff017_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"999\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb\" width=\"999\" data-original=\"https://pic4.zhimg.com/v2-74a2f0b2a020f0bcf92aea5144cff017_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;999&#39; height=&#39;409&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"999\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"999\" data-original=\"https://pic4.zhimg.com/v2-74a2f0b2a020f0bcf92aea5144cff017_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-74a2f0b2a020f0bcf92aea5144cff017_b.jpg\"/></figure><p>需要前端来传一个id。</p><p>现在到postman中测试：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-74e0ef01faa3c325990e6db04544d97d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic2.zhimg.com/v2-74e0ef01faa3c325990e6db04544d97d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;487&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic2.zhimg.com/v2-74e0ef01faa3c325990e6db04544d97d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-74e0ef01faa3c325990e6db04544d97d_b.jpg\"/></figure><p>如果我们传一个不存在的id</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-85c3cc6ded0dfe99660184a74b7f45a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic4.zhimg.com/v2-85c3cc6ded0dfe99660184a74b7f45a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;413&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic4.zhimg.com/v2-85c3cc6ded0dfe99660184a74b7f45a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-85c3cc6ded0dfe99660184a74b7f45a3_b.jpg\"/></figure><p>------------------------------------获取编辑、删除---------------------------------------</p><p>编辑和删除很类似</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-180337933e432816d70d8ae664e6ff8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"603\" class=\"origin_image zh-lightbox-thumb\" width=\"1109\" data-original=\"https://pic2.zhimg.com/v2-180337933e432816d70d8ae664e6ff8d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1109&#39; height=&#39;603&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"603\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1109\" data-original=\"https://pic2.zhimg.com/v2-180337933e432816d70d8ae664e6ff8d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-180337933e432816d70d8ae664e6ff8d_b.jpg\"/></figure><p>去测试下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a1dc38cf9509c38d33dc2f36954d34d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb\" width=\"519\" data-original=\"https://pic2.zhimg.com/v2-a1dc38cf9509c38d33dc2f36954d34d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;519&#39; height=&#39;568&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"519\" data-original=\"https://pic2.zhimg.com/v2-a1dc38cf9509c38d33dc2f36954d34d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a1dc38cf9509c38d33dc2f36954d34d9_b.jpg\"/></figure><p>可以成功更改。</p><p>现在做删除接口：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1a881033d0ee6282e511508d644cd343_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb\" width=\"946\" data-original=\"https://pic4.zhimg.com/v2-1a881033d0ee6282e511508d644cd343_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;946&#39; height=&#39;419&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"946\" data-original=\"https://pic4.zhimg.com/v2-1a881033d0ee6282e511508d644cd343_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1a881033d0ee6282e511508d644cd343_b.jpg\"/></figure><p>调试一下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-27245ca41456278a1d848dc2e16ede06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"445\" class=\"origin_image zh-lightbox-thumb\" width=\"559\" data-original=\"https://pic3.zhimg.com/v2-27245ca41456278a1d848dc2e16ede06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;559&#39; height=&#39;445&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"445\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"559\" data-original=\"https://pic3.zhimg.com/v2-27245ca41456278a1d848dc2e16ede06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-27245ca41456278a1d848dc2e16ede06_b.jpg\"/></figure><p>这时候再获取下全部信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-30e1cd96cc8877c07867ccfd2a08e4a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"471\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb\" width=\"471\" data-original=\"https://pic2.zhimg.com/v2-30e1cd96cc8877c07867ccfd2a08e4a1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;471&#39; height=&#39;594&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"471\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"471\" data-original=\"https://pic2.zhimg.com/v2-30e1cd96cc8877c07867ccfd2a08e4a1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-30e1cd96cc8877c07867ccfd2a08e4a1_b.jpg\"/></figure><p>就没有刚才删掉的那条信息了。</p><p>但是这里有个问题，我可以连续请求两次删除这个id，但是第二次的时候就会catch住，说删除失败。这个问题，前端那一般是删完了就刷新列表，不会请求第二次删除。暂且不管吧。放个链接先<a href=\"https://link.zhihu.com/?target=https%3A//mongoosejs.com/docs/guide.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mongoose v5.4.19: Schemas</a></p><p>随口问了后台GG一句，后台GG说先查询，然后我就把接口改成了这个样子：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-15e0877cd51a4259d2ae3e92c463c1fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1113\" data-rawheight=\"604\" class=\"origin_image zh-lightbox-thumb\" width=\"1113\" data-original=\"https://pic2.zhimg.com/v2-15e0877cd51a4259d2ae3e92c463c1fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1113&#39; height=&#39;604&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1113\" data-rawheight=\"604\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1113\" data-original=\"https://pic2.zhimg.com/v2-15e0877cd51a4259d2ae3e92c463c1fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-15e0877cd51a4259d2ae3e92c463c1fd_b.jpg\"/></figure><p>现在再调试：</p><p>第一次删除：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cb8e75b57c3b892b2642395f1a37027c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic1.zhimg.com/v2-cb8e75b57c3b892b2642395f1a37027c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;594&#39; height=&#39;466&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"594\" data-original=\"https://pic1.zhimg.com/v2-cb8e75b57c3b892b2642395f1a37027c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cb8e75b57c3b892b2642395f1a37027c_b.jpg\"/></figure><p>同样的数据删除第二次：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-67a101a1c565051c2f3267f552d5ed9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb\" width=\"668\" data-original=\"https://pic4.zhimg.com/v2-67a101a1c565051c2f3267f552d5ed9b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;668&#39; height=&#39;347&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"668\" data-original=\"https://pic4.zhimg.com/v2-67a101a1c565051c2f3267f552d5ed9b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-67a101a1c565051c2f3267f552d5ed9b_b.jpg\"/></figure><p>随便输个id：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6409b407258823a73487f5e79c6c987b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic4.zhimg.com/v2-6409b407258823a73487f5e79c6c987b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;568&#39; height=&#39;327&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"568\" data-original=\"https://pic4.zhimg.com/v2-6409b407258823a73487f5e79c6c987b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6409b407258823a73487f5e79c6c987b_b.jpg\"/></figure><p>OK，接口就写到这。只入门，只入门，我是前端，我是前端。接下来构建前端页面。</p><p>-----------------------------------前后端连载---------------------------------------------</p><p>先看下cli的版本，3.X</p><p>然后创建一个vue项目  比如 叫client</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5d642a045f79aeb24a2bc4c86b67a40e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"422\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"422\" data-original=\"https://pic3.zhimg.com/v2-5d642a045f79aeb24a2bc4c86b67a40e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;422&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"422\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"422\" data-original=\"https://pic3.zhimg.com/v2-5d642a045f79aeb24a2bc4c86b67a40e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5d642a045f79aeb24a2bc4c86b67a40e_b.jpg\"/></figure><p>会有一些需要我们选择的一些东西，我们现在手动选择一些选项：</p><p>按空格是选择/取消</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cbc44ad1bfd836f07915e7ef2c214ced_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"243\" class=\"content_image\" width=\"418\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;418&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"243\" class=\"content_image lazy\" width=\"418\" data-actualsrc=\"https://pic2.zhimg.com/v2-cbc44ad1bfd836f07915e7ef2c214ced_b.jpg\"/></figure><p>然后按回车，使用个history模式，使用scss等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1f1fcbe5583a6baa10156ddf7444387f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"747\" data-original=\"https://pic4.zhimg.com/v2-1f1fcbe5583a6baa10156ddf7444387f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;747&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"747\" data-original=\"https://pic4.zhimg.com/v2-1f1fcbe5583a6baa10156ddf7444387f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1f1fcbe5583a6baa10156ddf7444387f_b.jpg\"/></figure><p>现在我们项目的目录结构：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d1af7cdbf604d4492f41148dbce11ec6_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"176\" data-rawheight=\"520\" class=\"content_image\" width=\"176\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;176&#39; height=&#39;520&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"176\" data-rawheight=\"520\" class=\"content_image lazy\" width=\"176\" data-actualsrc=\"https://pic3.zhimg.com/v2-d1af7cdbf604d4492f41148dbce11ec6_b.png\"/></figure><p>然后我们就可以cd到client再把它启动起来了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b9e10f1976002eec91525789eecad71d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"36\" class=\"content_image\" width=\"309\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;309&#39; height=&#39;36&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"36\" class=\"content_image lazy\" width=\"309\" data-actualsrc=\"https://pic2.zhimg.com/v2-b9e10f1976002eec91525789eecad71d_b.png\"/></figure><p>现在我们就有两个终端来同时启动前端和后端了。</p><p>前端的话要进入到client中，后端是要在项目根目录启动（nodemon）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ca779569ae3a357a62d75b7a9f61c913_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb\" width=\"815\" data-original=\"https://pic4.zhimg.com/v2-ca779569ae3a357a62d75b7a9f61c913_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;815&#39; height=&#39;133&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"815\" data-original=\"https://pic4.zhimg.com/v2-ca779569ae3a357a62d75b7a9f61c913_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ca779569ae3a357a62d75b7a9f61c913_b.png\"/></figure><p>这样分开启动比较麻烦，我们现在来一个前后端连载：</p><p>安装下 concurrently，这个模块就可实现将多个终端启动的项目都绑定到一块。</p><p>现在我们看下我们在项目根目录这有个package.json ，在client目录内也有一个package.json。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-83160921775c2419749a34e9aba2b785_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1060\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb\" width=\"1060\" data-original=\"https://pic2.zhimg.com/v2-83160921775c2419749a34e9aba2b785_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1060&#39; height=&#39;321&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1060\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1060\" data-original=\"https://pic2.zhimg.com/v2-83160921775c2419749a34e9aba2b785_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-83160921775c2419749a34e9aba2b785_b.jpg\"/></figure><p>start和server 启动的是后端的项目。</p><p>client中的文件，server启动的是前端的项目。我们可以给它起个名字：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-498e30995cfcae4ab4319a68486a50ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb\" width=\"464\" data-original=\"https://pic4.zhimg.com/v2-498e30995cfcae4ab4319a68486a50ab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;464&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"464\" data-original=\"https://pic4.zhimg.com/v2-498e30995cfcae4ab4319a68486a50ab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-498e30995cfcae4ab4319a68486a50ab_b.jpg\"/></figure><p>当我们npm start的时候，就会启动serve，就会执行vue-cli-service serve。</p><p>我们再配置下根目录下的package文件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-37de5bc206940d980b5d34195ab73746_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"662\" data-original=\"https://pic3.zhimg.com/v2-37de5bc206940d980b5d34195ab73746_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;662&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"662\" data-original=\"https://pic3.zhimg.com/v2-37de5bc206940d980b5d34195ab73746_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-37de5bc206940d980b5d34195ab73746_b.jpg\"/></figure><p>意思是：我们要确保前端已经依赖了这里面的模块，当启动的时候，首先要来装一下client里面的依赖模块。再配置下启动：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-97a7534166724e3c16546b39e8469080_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb\" width=\"629\" data-original=\"https://pic1.zhimg.com/v2-97a7534166724e3c16546b39e8469080_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;629&#39; height=&#39;183&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"629\" data-original=\"https://pic1.zhimg.com/v2-97a7534166724e3c16546b39e8469080_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-97a7534166724e3c16546b39e8469080_b.jpg\"/></figure><p>npm start是我们刚在client的package文件中设置的，不过我们还要告诉它要启动的路径 --prefix client。这时候就会给我们启动前端的项目了。</p><p>现在我们后端可以启动了（npm run serve），前端也可以启动了(npm run client)。</p><p>接下来我们把前端项目和后端项目绑定到一块。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1f63f69ab193aa71e64d3905cb551786_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb\" width=\"768\" data-original=\"https://pic3.zhimg.com/v2-1f63f69ab193aa71e64d3905cb551786_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;768&#39; height=&#39;213&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"768\" data-original=\"https://pic3.zhimg.com/v2-1f63f69ab193aa71e64d3905cb551786_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1f63f69ab193aa71e64d3905cb551786_b.jpg\"/></figure><p>这里的\\是转义。</p><p>现在  npm run dev就可以同时启动两端了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7e6daabe9b2db67158d5a7e62f9c22d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic1.zhimg.com/v2-7e6daabe9b2db67158d5a7e62f9c22d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;586&#39; height=&#39;566&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"586\" data-original=\"https://pic1.zhimg.com/v2-7e6daabe9b2db67158d5a7e62f9c22d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7e6daabe9b2db67158d5a7e62f9c22d0_b.jpg\"/></figure><p>现在方便多了，我能说我开三个终端，设备卡死吗？（一个启动前端，一个启动后端，一个装包）。</p><p>----------------------------------------前端准备工作-------------------------------------</p><p>现在做一下前端项目的调整，把我们不需要的东西都给删除掉。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a850adbe547d96effdedf4f057cad7f5_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"149\" data-rawheight=\"353\" class=\"content_image\" width=\"149\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;149&#39; height=&#39;353&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"149\" data-rawheight=\"353\" class=\"content_image lazy\" width=\"149\" data-actualsrc=\"https://pic2.zhimg.com/v2-a850adbe547d96effdedf4f057cad7f5_b.png\"/></figure><p>调整后的Index.vue：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-086384b2370bce9b66a4bcc79afa3183_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"273\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;273&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"273\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic4.zhimg.com/v2-086384b2370bce9b66a4bcc79afa3183_b.jpg\"/></figure><p>调整后的router：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3d7dea305e7c9692697815b2a1410c8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-3d7dea305e7c9692697815b2a1410c8a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;485&#39; height=&#39;570&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-3d7dea305e7c9692697815b2a1410c8a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3d7dea305e7c9692697815b2a1410c8a_b.jpg\"/></figure><p>现在页面长这样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6520f39c52a72bff010646240da65a69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"301\" data-rawheight=\"183\" class=\"content_image\" width=\"301\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;301&#39; height=&#39;183&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"301\" data-rawheight=\"183\" class=\"content_image lazy\" width=\"301\" data-actualsrc=\"https://pic2.zhimg.com/v2-6520f39c52a72bff010646240da65a69_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后我们把reset.css给引进来。<a href=\"https://link.zhihu.com/?target=https%3A//meyerweb.com/eric/tools/css/reset/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CSS Tools: Reset CSS</a></p><p>现在，前端的准备工作就完成了。</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "全栈开发", 
                    "tagLink": "https://api.zhihu.com/topics/20043281"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59234594", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 1, 
            "title": "接口入门（二）：登录注册", 
            "content": "<p>依旧是post方法，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-68fa1b5f9e9e29214ad50c1f29fd8060_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic1.zhimg.com/v2-68fa1b5f9e9e29214ad50c1f29fd8060_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;805&#39; height=&#39;539&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"805\" data-original=\"https://pic1.zhimg.com/v2-68fa1b5f9e9e29214ad50c1f29fd8060_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-68fa1b5f9e9e29214ad50c1f29fd8060_b.jpg\"/></figure><p>但是这里bcrypt用到的是验证密码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e2d9c5717103ea0af574da9e522722b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb\" width=\"736\" data-original=\"https://pic1.zhimg.com/v2-e2d9c5717103ea0af574da9e522722b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;736&#39; height=&#39;257&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"736\" data-original=\"https://pic1.zhimg.com/v2-e2d9c5717103ea0af574da9e522722b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e2d9c5717103ea0af574da9e522722b4_b.jpg\"/></figure><p>这里，myPlaintextPassword就是数据库中的密码，hash就是要登录时传过来的密码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-777966f1e68d4408b30ac01e24b08334_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-777966f1e68d4408b30ac01e24b08334_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;835&#39; height=&#39;651&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-777966f1e68d4408b30ac01e24b08334_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-777966f1e68d4408b30ac01e24b08334_b.jpg\"/></figure><p>我们到postman里面去调试：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-652fad1066894413edfe4629d53c4583_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb\" width=\"559\" data-original=\"https://pic4.zhimg.com/v2-652fad1066894413edfe4629d53c4583_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;559&#39; height=&#39;409&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"559\" data-original=\"https://pic4.zhimg.com/v2-652fad1066894413edfe4629d53c4583_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-652fad1066894413edfe4629d53c4583_b.jpg\"/></figure><p>这是登录成功状态。</p><p>当我们把密码输错的时候：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9c1d74c60369c4314b3a45a742303b2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb\" width=\"483\" data-original=\"https://pic3.zhimg.com/v2-9c1d74c60369c4314b3a45a742303b2e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;483&#39; height=&#39;266&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"483\" data-original=\"https://pic3.zhimg.com/v2-9c1d74c60369c4314b3a45a742303b2e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9c1d74c60369c4314b3a45a742303b2e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当我们用户名不对的时候：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e5458add22e2041161064b1ccfecb7e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-e5458add22e2041161064b1ccfecb7e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;512&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-e5458add22e2041161064b1ccfecb7e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e5458add22e2041161064b1ccfecb7e7_b.jpg\"/></figure><p>那么这个接口没什么问题了，现在就是登录成功后，我们应该是返回一个token，而不是返回suc。</p><p>-----------------------------------------返回token----------------------------------------</p><p>我们使用的是jsonwebtoken，安装一下。<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/jsonwebtoken\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">jsonwebtoken</a></p><p>引入一下 const jwt = require(&#39;jsonwebtoken&#39;); //引入jsonwebtoken。</p><p>基本用法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8c28c08e463ca135fca4d9d35e2b71af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"755\" data-original=\"https://pic4.zhimg.com/v2-8c28c08e463ca135fca4d9d35e2b71af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;755&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"755\" data-original=\"https://pic4.zhimg.com/v2-8c28c08e463ca135fca4d9d35e2b71af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8c28c08e463ca135fca4d9d35e2b71af_b.jpg\"/></figure><p>在isMatch时，返回一个success前，使用jwt：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f71881b273296937cf65bcb286527581_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic2.zhimg.com/v2-f71881b273296937cf65bcb286527581_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;183&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic2.zhimg.com/v2-f71881b273296937cf65bcb286527581_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f71881b273296937cf65bcb286527581_b.jpg\"/></figure><p>在这个箭头函数中，可以返回一个对应的json。</p><p>我们可以使用id值加上一个email来做一个token。（参见mangoDB中的数据）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-602632156b29e37ef15ed2147c941115_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"116\" class=\"origin_image zh-lightbox-thumb\" width=\"534\" data-original=\"https://pic2.zhimg.com/v2-602632156b29e37ef15ed2147c941115_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;534&#39; height=&#39;116&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"116\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"534\" data-original=\"https://pic2.zhimg.com/v2-602632156b29e37ef15ed2147c941115_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-602632156b29e37ef15ed2147c941115_b.jpg\"/></figure><p>这个rule，我们可以直接定义：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-121fc3e84bb99195803d24a557b5d9b4_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb\" width=\"1044\" data-original=\"https://pic1.zhimg.com/v2-121fc3e84bb99195803d24a557b5d9b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1044&#39; height=&#39;73&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1044\" data-original=\"https://pic1.zhimg.com/v2-121fc3e84bb99195803d24a557b5d9b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-121fc3e84bb99195803d24a557b5d9b4_b.png\"/></figure><p>在keys.js文件中我们增加一句：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fb34e84d9d39fb58b986ff568ba315fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"366\" data-rawheight=\"164\" class=\"content_image\" width=\"366\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;366&#39; height=&#39;164&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"366\" data-rawheight=\"164\" class=\"content_image lazy\" width=\"366\" data-actualsrc=\"https://pic4.zhimg.com/v2-fb34e84d9d39fb58b986ff568ba315fb_b.jpg\"/></figure><p>然后我们在这个文件中引入一下keys（const keys = require(&#39;../../config/keys&#39;) //密码验证那里需要引用keys里面 secret）。</p><p>现在我们的验证就可以替换一下了：</p><p>jwt.sign(rule, keys.secretOrKey,&#39;过期时间&#39;,&#39;箭头函数&#39;);</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dd0d2261d5c99e31a836696dc14b6bde_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"867\" data-original=\"https://pic3.zhimg.com/v2-dd0d2261d5c99e31a836696dc14b6bde_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;867&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"867\" data-original=\"https://pic3.zhimg.com/v2-dd0d2261d5c99e31a836696dc14b6bde_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dd0d2261d5c99e31a836696dc14b6bde_b.jpg\"/></figure><p>我们再去postman调试一下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f76e067b1b991106baac8b5cf98eff04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"287\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-f76e067b1b991106baac8b5cf98eff04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;287&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"287\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-f76e067b1b991106baac8b5cf98eff04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f76e067b1b991106baac8b5cf98eff04_b.jpg\"/></figure><p>我们可以看到，这个就是xxx+某个东西。</p><p>------------------------------验证token---------------------------------------------------</p><p>token其实就是一个令牌、钥匙，拿着这个令牌去拿一些数据。如果没有token或者token过期了，是拿不到对应的数据的。</p><p>假设用户已经拿到了token，现在他要请求一些数据</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0c2416a484efcbfeafd6b491be649d41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic2.zhimg.com/v2-0c2416a484efcbfeafd6b491be649d41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic2.zhimg.com/v2-0c2416a484efcbfeafd6b491be649d41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0c2416a484efcbfeafd6b491be649d41_b.jpg\"/></figure><p>这时候我们的node开始报错，因为验证token需要我们来做。我们使用<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/passport-jwt\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">passport-jwt</a>和<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/passport\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">passport</a>来做。安装（npm i passport passport-jwt）、引入。</p><p>在server中引入const passport = require(&#39;passport&#39;)//引入 passport 还要初始化</p><p>// passport 初始化<br/>app.use(passport.initialize()); </p><p>初始化后才可以使用</p><p>然后我们在config -&gt; passport.js中进行配置passport。server文件中引入这个passport.js。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e208347b51a3c8ab916921d0cf3d4ea9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"96\" class=\"origin_image zh-lightbox-thumb\" width=\"774\" data-original=\"https://pic2.zhimg.com/v2-e208347b51a3c8ab916921d0cf3d4ea9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;774&#39; height=&#39;96&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"96\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"774\" data-original=\"https://pic2.zhimg.com/v2-e208347b51a3c8ab916921d0cf3d4ea9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e208347b51a3c8ab916921d0cf3d4ea9_b.png\"/></figure><p>现在我们已经把passport给传了过去，我们就可以把代码抽离出来，到config-&gt;passport.js中去写。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3a1a6148efbfa79bd6bada7414262d34_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"405\" data-rawheight=\"149\" class=\"content_image\" width=\"405\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;405&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"405\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"405\" data-actualsrc=\"https://pic1.zhimg.com/v2-3a1a6148efbfa79bd6bada7414262d34_b.jpg\"/></figure><p>现在看下passport-jwt的用法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6896f0fc5c23d7cef76e185016d574b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic3.zhimg.com/v2-6896f0fc5c23d7cef76e185016d574b6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic3.zhimg.com/v2-6896f0fc5c23d7cef76e185016d574b6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6896f0fc5c23d7cef76e185016d574b6_b.jpg\"/></figure><p>直接拿来修改：server.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7794bfcd139f859186166a48cc1e9358_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic1.zhimg.com/v2-7794bfcd139f859186166a48cc1e9358_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;777&#39; height=&#39;473&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"777\" data-original=\"https://pic1.zhimg.com/v2-7794bfcd139f859186166a48cc1e9358_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7794bfcd139f859186166a48cc1e9358_b.jpg\"/></figure><p>现在准备工作做好了，看下怎么使用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b7daf8362e3537f47e82cc0f3523b532_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb\" width=\"780\" data-original=\"https://pic3.zhimg.com/v2-b7daf8362e3537f47e82cc0f3523b532_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;780&#39; height=&#39;181&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"780\" data-original=\"https://pic3.zhimg.com/v2-b7daf8362e3537f47e82cc0f3523b532_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b7daf8362e3537f47e82cc0f3523b532_b.jpg\"/></figure><p>在user.js文件中，我们可以操作验证token了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4d4694468265fc1b17af7784e76f5638_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"816\" data-rawheight=\"217\" class=\"origin_image zh-lightbox-thumb\" width=\"816\" data-original=\"https://pic1.zhimg.com/v2-4d4694468265fc1b17af7784e76f5638_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;816&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"816\" data-rawheight=\"217\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"816\" data-original=\"https://pic1.zhimg.com/v2-4d4694468265fc1b17af7784e76f5638_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4d4694468265fc1b17af7784e76f5638_b.jpg\"/></figure><p>在users中先引入：const passport = require(&#39;passport&#39;); //哪里需要验证 就引入</p><p>然后将“验证token替换掉”</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-eb91ded460e71ef1179edcf39156fcc6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-eb91ded460e71ef1179edcf39156fcc6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1041&#39; height=&#39;267&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-eb91ded460e71ef1179edcf39156fcc6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-eb91ded460e71ef1179edcf39156fcc6_b.jpg\"/></figure><p>我们再去postman中测试：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-87b7350fef3c23af1059b1474f1d6047_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"382\" data-rawheight=\"266\" class=\"content_image\" width=\"382\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;382&#39; height=&#39;266&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"382\" data-rawheight=\"266\" class=\"content_image lazy\" width=\"382\" data-actualsrc=\"https://pic4.zhimg.com/v2-87b7350fef3c23af1059b1474f1d6047_b.jpg\"/></figure><p>得到的是Unauthorized。没有认证通过。因为我们没有带上token。我们应该在登录的时候就把token给保存下来，拿着这个token去请求current。它才可以正常的把信息返回。</p><p>我们重新登录，把token粘贴到参数中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4f328bbe95e5b5e41758be91abd7d924_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb\" width=\"657\" data-original=\"https://pic1.zhimg.com/v2-4f328bbe95e5b5e41758be91abd7d924_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;657&#39; height=&#39;305&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"657\" data-original=\"https://pic1.zhimg.com/v2-4f328bbe95e5b5e41758be91abd7d924_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4f328bbe95e5b5e41758be91abd7d924_b.jpg\"/></figure><p>但是我们这样做了，还是会打印验证未通过，这是因为在制作token的时候，我们加的xxx，必须是固定的：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-09d9eaf70134689541d8bbef071f638c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"809\" data-original=\"https://pic1.zhimg.com/v2-09d9eaf70134689541d8bbef071f638c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;809&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"809\" data-original=\"https://pic1.zhimg.com/v2-09d9eaf70134689541d8bbef071f638c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-09d9eaf70134689541d8bbef071f638c_b.jpg\"/></figure><p>现在将xxx改为Bearer加一个空格，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-62c74f90fd3e9824030ab4da147bba79_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb\" width=\"819\" data-original=\"https://pic2.zhimg.com/v2-62c74f90fd3e9824030ab4da147bba79_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;819&#39; height=&#39;204&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"819\" data-original=\"https://pic2.zhimg.com/v2-62c74f90fd3e9824030ab4da147bba79_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-62c74f90fd3e9824030ab4da147bba79_b.jpg\"/></figure><p>现在请求login拿到新的token，然后重新请求current。它会一直请求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fecc3a4f733b8f3793fd8aedb8ba88a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"667\" data-original=\"https://pic3.zhimg.com/v2-fecc3a4f733b8f3793fd8aedb8ba88a6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;667&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"667\" data-original=\"https://pic3.zhimg.com/v2-fecc3a4f733b8f3793fd8aedb8ba88a6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fecc3a4f733b8f3793fd8aedb8ba88a6_b.jpg\"/></figure><p>但是，可以在node端拿到当前用户的信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e3418acc2d2722e7ff32593d1596be03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"131\" class=\"content_image\" width=\"341\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;341&#39; height=&#39;131&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"131\" class=\"content_image lazy\" width=\"341\" data-actualsrc=\"https://pic4.zhimg.com/v2-e3418acc2d2722e7ff32593d1596be03_b.jpg\"/></figure><p>那么既然我们能够得到这些内容，我们就可进行查询，把我们获取到的返回回去。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9cbe73d09f2d2e638cbea9707900aaa8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"826\" data-original=\"https://pic1.zhimg.com/v2-9cbe73d09f2d2e638cbea9707900aaa8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;826&#39; height=&#39;390&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"826\" data-original=\"https://pic1.zhimg.com/v2-9cbe73d09f2d2e638cbea9707900aaa8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9cbe73d09f2d2e638cbea9707900aaa8_b.jpg\"/></figure><p>现在的路由长这样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-82843c05d51ad749e570eb2a06ceb4af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1111\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"1111\" data-original=\"https://pic4.zhimg.com/v2-82843c05d51ad749e570eb2a06ceb4af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1111&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1111\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1111\" data-original=\"https://pic4.zhimg.com/v2-82843c05d51ad749e570eb2a06ceb4af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-82843c05d51ad749e570eb2a06ceb4af_b.jpg\"/></figure><p>如果我们这样返回，那么在send后就会得到：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b0f3a4dc1cd51152f951a6528a61a647_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"713\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"713\" data-original=\"https://pic4.zhimg.com/v2-b0f3a4dc1cd51152f951a6528a61a647_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;713&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"713\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"713\" data-original=\"https://pic4.zhimg.com/v2-b0f3a4dc1cd51152f951a6528a61a647_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b0f3a4dc1cd51152f951a6528a61a647_b.jpg\"/></figure><p>现在可以把路由那给调整下，我们应该是返回用户信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2b20924441b3a1471e48d38eeee61a1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"257\" data-rawheight=\"83\" class=\"content_image\" width=\"257\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;257&#39; height=&#39;83&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"257\" data-rawheight=\"83\" class=\"content_image lazy\" width=\"257\" data-actualsrc=\"https://pic4.zhimg.com/v2-2b20924441b3a1471e48d38eeee61a1b_b.jpg\"/></figure><p>这时我们再send：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5395e9baa581bff55762d70056dc74e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"358\" class=\"origin_image zh-lightbox-thumb\" width=\"623\" data-original=\"https://pic3.zhimg.com/v2-5395e9baa581bff55762d70056dc74e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;623&#39; height=&#39;358&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"358\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"623\" data-original=\"https://pic3.zhimg.com/v2-5395e9baa581bff55762d70056dc74e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5395e9baa581bff55762d70056dc74e2_b.jpg\"/></figure><p>我们不能把所有信息都返回回去，所以我们再调整下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8df7772309e429481469376c2287d11f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb\" width=\"529\" data-original=\"https://pic4.zhimg.com/v2-8df7772309e429481469376c2287d11f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;529&#39; height=&#39;207&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"529\" data-original=\"https://pic4.zhimg.com/v2-8df7772309e429481469376c2287d11f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8df7772309e429481469376c2287d11f_b.jpg\"/></figure><p>然后send下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1e4ac85341d4d33a1c4dad0c612c62ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"259\" class=\"content_image\" width=\"403\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;403&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"259\" class=\"content_image lazy\" width=\"403\" data-actualsrc=\"https://pic3.zhimg.com/v2-1e4ac85341d4d33a1c4dad0c612c62ce_b.jpg\"/></figure><p>在实际工作中，这种后台管理系统都是有权限分配的。</p><p>---------------------------------------权限-----------------------------------------------</p><p>现在加一个选择身份的字段：</p><p>在模型中增加：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3ee10d282a2cec62f9478885421c30b9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"305\" data-rawheight=\"334\" class=\"content_image\" width=\"305\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;305&#39; height=&#39;334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"305\" data-rawheight=\"334\" class=\"content_image lazy\" width=\"305\" data-actualsrc=\"https://pic2.zhimg.com/v2-3ee10d282a2cec62f9478885421c30b9_b.jpg\"/></figure><p>那么在创建用户时也应该加上这个字段：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-99f79d5f9195c649f824d89d50ec73ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"435\" data-original=\"https://pic2.zhimg.com/v2-99f79d5f9195c649f824d89d50ec73ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;435&#39; height=&#39;267&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"435\" data-original=\"https://pic2.zhimg.com/v2-99f79d5f9195c649f824d89d50ec73ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-99f79d5f9195c649f824d89d50ec73ed_b.jpg\"/></figure><p>现在就有对应的身份了。</p><p>我们在登录的时候也增加下内容：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b0e94c8b1b53f8a3710e692c82baa664_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"231\" class=\"content_image\" width=\"385\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;385&#39; height=&#39;231&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"231\" class=\"content_image lazy\" width=\"385\" data-actualsrc=\"https://pic1.zhimg.com/v2-b0e94c8b1b53f8a3710e692c82baa664_b.jpg\"/></figure><p>这样在我们登录的时候也可以获取到身份信息了。</p><p>当我们在请求current时，也应该将相应的身份返回回去：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c6f97d801418e0b120f2d2a05261a887_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb\" width=\"521\" data-original=\"https://pic4.zhimg.com/v2-c6f97d801418e0b120f2d2a05261a887_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;521&#39; height=&#39;233&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"521\" data-original=\"https://pic4.zhimg.com/v2-c6f97d801418e0b120f2d2a05261a887_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c6f97d801418e0b120f2d2a05261a887_b.jpg\"/></figure><p>这时候我们到postman中send一下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c6bdd468f3ffce370e3be93005fa8cad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"721\" data-original=\"https://pic2.zhimg.com/v2-c6bdd468f3ffce370e3be93005fa8cad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;721&#39; height=&#39;522&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"721\" data-original=\"https://pic2.zhimg.com/v2-c6bdd468f3ffce370e3be93005fa8cad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c6bdd468f3ffce370e3be93005fa8cad_b.jpg\"/></figure><p>我们再登录下，拿到token：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fc605119aa0793c8f60367b2b0d8fd8c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb\" width=\"675\" data-original=\"https://pic1.zhimg.com/v2-fc605119aa0793c8f60367b2b0d8fd8c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;675&#39; height=&#39;469&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"675\" data-original=\"https://pic1.zhimg.com/v2-fc605119aa0793c8f60367b2b0d8fd8c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fc605119aa0793c8f60367b2b0d8fd8c_b.jpg\"/></figure><p>然后，拿着token去拿current信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-51532ada4f1eacb41f68182ea28c8652_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"390\" class=\"content_image\" width=\"413\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;413&#39; height=&#39;390&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"390\" class=\"content_image lazy\" width=\"413\" data-actualsrc=\"https://pic3.zhimg.com/v2-51532ada4f1eacb41f68182ea28c8652_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "全栈开发", 
                    "tagLink": "https://api.zhihu.com/topics/20043281"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59105720", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 5, 
            "title": "接口入门（一）：node准备工作", 
            "content": "<p>ES6系列先放放，没办法，公司缺后端，我想如果和后台交互不太多的小项目，就不麻烦老大了。其实我是找个理由偷偷来学一丢丢node的（捂脸），手指切菜时受伤了，不区分大小写了。</p><p>先看下技术点：</p><p>1、构建文档接口：node + express + jwt</p><p>2、构建前端页面：vue-cli3.0 + element-ui</p><p>3、数据请求及拦截：axios + mlab + mongoDB</p><p>忘记说了，这是一个有权限管理的后台管理系统。</p><p>第一步：初始化项目 <i>npm init</i> ，作者、描述之类的自己看着写。入口文件偶用的server.js。</p><p>第二步：根目录创建个server.js （<i>touch server.js</i>），顺便安装下express （<i>npm i express</i>）。</p><p>现在demo长这样</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fd544a38fb5ba4e5fdb410d194c3d87d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"163\" data-rawheight=\"93\" class=\"content_image\" width=\"163\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;163&#39; height=&#39;93&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"163\" data-rawheight=\"93\" class=\"content_image lazy\" width=\"163\" data-actualsrc=\"https://pic2.zhimg.com/v2-fd544a38fb5ba4e5fdb410d194c3d87d_b.png\"/></figure><p>第三步：实例化一个app，让这个服务启动起来</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fb2f80ac2c80589382bee8c24088de48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"786\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"786\" data-original=\"https://pic1.zhimg.com/v2-fb2f80ac2c80589382bee8c24088de48_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;786&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"786\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"786\" data-original=\"https://pic1.zhimg.com/v2-fb2f80ac2c80589382bee8c24088de48_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fb2f80ac2c80589382bee8c24088de48_b.jpg\"/></figure><p>但是现在打开网页，是什么都看不到的，因为我们没有设置路由。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e40f64f3c66a7899ad288ffdeffbc3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"253\" class=\"origin_image zh-lightbox-thumb\" width=\"592\" data-original=\"https://pic4.zhimg.com/v2-3e40f64f3c66a7899ad288ffdeffbc3f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;592&#39; height=&#39;253&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"253\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"592\" data-original=\"https://pic4.zhimg.com/v2-3e40f64f3c66a7899ad288ffdeffbc3f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e40f64f3c66a7899ad288ffdeffbc3f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a4cdb7cae1044ea33b39cf05394de555_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-a4cdb7cae1044ea33b39cf05394de555_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;639&#39; height=&#39;250&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-a4cdb7cae1044ea33b39cf05394de555_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a4cdb7cae1044ea33b39cf05394de555_b.jpg\"/></figure><p>由于每次更改完server后都要重启才能生效，所以，可以安装个nodemon （<i>sudo npm i nodemon -g</i>） 之后，就可以在终端使用（<i>nodemon server.js</i>） 来启动服务了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e2d5d7a09feb0eba3559df608b5dae25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic2.zhimg.com/v2-e2d5d7a09feb0eba3559df608b5dae25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;247&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic2.zhimg.com/v2-e2d5d7a09feb0eba3559df608b5dae25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e2d5d7a09feb0eba3559df608b5dae25_b.jpg\"/></figure><p>其实以上步骤，在学习HTTP时，已经操作过了。</p><p>我们还可以通过改动package.json，来设置通过哪些命令来启动服务。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ab2519162678badecab9b4c8a874d73a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"119\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic3.zhimg.com/v2-ab2519162678badecab9b4c8a874d73a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;458&#39; height=&#39;119&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"119\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"458\" data-original=\"https://pic3.zhimg.com/v2-ab2519162678badecab9b4c8a874d73a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ab2519162678badecab9b4c8a874d73a_b.jpg\"/></figure><p>这两行代码的意思是：npm run start 时  就是在执行 node server.js ，但是这样子每次改动server文件还是要重启，所以增加了下面那行代码。说白了，其实就是 npm run server 来代替nodemon server.js。</p><p>---------------------------------------扮演下分割线--------------------------------------</p><p>连接mangoDB数据库。</p><p>这个交互还是很友好的</p><p>我们还需要使用mongoose ，所以，安装一下。（npm i mongoose）。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4b5cb280b10715ddc1fbdf1b13fa8bc7_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"97\" class=\"origin_image zh-lightbox-thumb\" width=\"796\" data-original=\"https://pic4.zhimg.com/v2-4b5cb280b10715ddc1fbdf1b13fa8bc7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;796&#39; height=&#39;97&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"97\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"796\" data-original=\"https://pic4.zhimg.com/v2-4b5cb280b10715ddc1fbdf1b13fa8bc7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4b5cb280b10715ddc1fbdf1b13fa8bc7_b.png\"/></figure><p>新建一个config文件夹，新建个key文件，专门放URI</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1650f55f3f8786c0aeed1fc242a35a77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"285\" data-rawheight=\"117\" class=\"content_image\" width=\"285\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;285&#39; height=&#39;117&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"285\" data-rawheight=\"117\" class=\"content_image lazy\" width=\"285\" data-actualsrc=\"https://pic4.zhimg.com/v2-1650f55f3f8786c0aeed1fc242a35a77_b.jpg\"/></figure><p>在server.js文件中引入这个key。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9e1f6d70b01992433ed12c8231b3f474_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"643\" data-original=\"https://pic1.zhimg.com/v2-9e1f6d70b01992433ed12c8231b3f474_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;643&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"643\" data-original=\"https://pic1.zhimg.com/v2-9e1f6d70b01992433ed12c8231b3f474_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9e1f6d70b01992433ed12c8231b3f474_b.jpg\"/></figure><p>当然了，也可以直接在mongoose.connect(&#39;uri&#39;)，里面把URI地址写上。</p><p>连接数据库时，我们需要使用mango shell。在用brew安装时，出了点小插曲。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-850db5b10046f5258e957e91b763b373_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-850db5b10046f5258e957e91b763b373_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-850db5b10046f5258e957e91b763b373_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-850db5b10046f5258e957e91b763b373_b.jpg\"/></figure><p>额，卸载重装homebrew。</p><p>卸载：/usr/bin/ruby -e &#34;$(curl -fsSL <a href=\"https://link.zhihu.com/?target=https%3A//raw.githubusercontent.com/Homebrew/install/master/uninstall\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">raw.githubusercontent.com</span><span class=\"invisible\">/Homebrew/install/master/uninstall</span><span class=\"ellipsis\"></span></a>)&#34;</p><p>重装：/usr/bin/ruby -e &#34;$(curl -fsSL <a href=\"https://link.zhihu.com/?target=https%3A//raw.githubusercontent.com/Homebrew/install/master/install\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">raw.githubusercontent.com</span><span class=\"invisible\">/Homebrew/install/master/install</span><span class=\"ellipsis\"></span></a>)&#34;</p><p>更新：brew update</p><p>重来一遍。装完后，记得检查下版本：mongod -version</p><p>现在就可以看到在终端能打印出连接好了的字样。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-01236528687a824233cf36fc5752f9b8_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"41\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;41&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"41\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic1.zhimg.com/v2-01236528687a824233cf36fc5752f9b8_b.png\"/></figure><p>*也可以直接使用第二种连接方式：连接应用程序，这个比较简单。node3+</p><p>只需要修改下密码</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c51717d631e03197ad334ca1ca3d71d0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"38\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic1.zhimg.com/v2-c51717d631e03197ad334ca1ca3d71d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;38&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"38\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic1.zhimg.com/v2-c51717d631e03197ad334ca1ca3d71d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c51717d631e03197ad334ca1ca3d71d0_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-646548777292cf9789e301aa82356044_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"32\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic1.zhimg.com/v2-646548777292cf9789e301aa82356044_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;562&#39; height=&#39;32&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"32\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"562\" data-original=\"https://pic1.zhimg.com/v2-646548777292cf9789e301aa82356044_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-646548777292cf9789e301aa82356044_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>但是会提示，这个字符串解析弃用云云</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2e6486ac602f6bf12da46e3d3da618e4_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-2e6486ac602f6bf12da46e3d3da618e4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;70&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-2e6486ac602f6bf12da46e3d3da618e4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2e6486ac602f6bf12da46e3d3da618e4_b.png\"/></figure><p>我们按照提示，在server.js文件中，增加：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-169844582071a4582134af4ba56e714d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"659\" data-original=\"https://pic2.zhimg.com/v2-169844582071a4582134af4ba56e714d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;659&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"659\" data-original=\"https://pic2.zhimg.com/v2-169844582071a4582134af4ba56e714d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-169844582071a4582134af4ba56e714d_b.jpg\"/></figure><p>就不会再有提示了。</p><p>现在把路由给分离出来，新建个routes-&gt;api-&gt;users.js 。</p><p>这个user.js主要功能是用于login和register</p><p>当然，要引入express、router，好有个路由的指向。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-952d80bc79a216e9cac274f3791b614f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb\" width=\"643\" data-original=\"https://pic4.zhimg.com/v2-952d80bc79a216e9cac274f3791b614f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;643&#39; height=&#39;419&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"643\" data-original=\"https://pic4.zhimg.com/v2-952d80bc79a216e9cac274f3791b614f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-952d80bc79a216e9cac274f3791b614f_b.jpg\"/></figure><p>然后到server.js中引入user.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0c380002bd594f650e4809157221d8c7_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"78\" class=\"origin_image zh-lightbox-thumb\" width=\"555\" data-original=\"https://pic4.zhimg.com/v2-0c380002bd594f650e4809157221d8c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;555&#39; height=&#39;78&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"78\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"555\" data-original=\"https://pic4.zhimg.com/v2-0c380002bd594f650e4809157221d8c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0c380002bd594f650e4809157221d8c7_b.png\"/></figure><p>现在，需要用中间件来使用router。那我们就在端口号上面来使用router</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-30646f0490e154a05f98fb2f00e23e4d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1172\" data-rawheight=\"89\" class=\"origin_image zh-lightbox-thumb\" width=\"1172\" data-original=\"https://pic2.zhimg.com/v2-30646f0490e154a05f98fb2f00e23e4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1172&#39; height=&#39;89&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1172\" data-rawheight=\"89\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1172\" data-original=\"https://pic2.zhimg.com/v2-30646f0490e154a05f98fb2f00e23e4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-30646f0490e154a05f98fb2f00e23e4d_b.png\"/></figure><p>现在到浏览器去访问这个api。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-11352777fd8b9f796cb05622d5666f7a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"537\" data-original=\"https://pic3.zhimg.com/v2-11352777fd8b9f796cb05622d5666f7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;537&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"537\" data-original=\"https://pic3.zhimg.com/v2-11352777fd8b9f796cb05622d5666f7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-11352777fd8b9f796cb05622d5666f7a_b.jpg\"/></figure><p>现在，我们创建一个模型。models-&gt;User.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e3f39ac39108e4a4fe437390cee88788_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"784\" class=\"origin_image zh-lightbox-thumb\" width=\"823\" data-original=\"https://pic1.zhimg.com/v2-e3f39ac39108e4a4fe437390cee88788_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;823&#39; height=&#39;784&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"784\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"823\" data-original=\"https://pic1.zhimg.com/v2-e3f39ac39108e4a4fe437390cee88788_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e3f39ac39108e4a4fe437390cee88788_b.jpg\"/></figure><p>----------------------------假装我也是分割线---------------------------------------------</p><p>搭建注册接口</p><p>1.本地测试接口工具：postman  2.搭建注册接口  3.使用第三方头像和库</p><p>瞄一眼postman本地测试刚才的接口：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-84972d159975caa0f19827fdf778c42d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1171\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb\" width=\"1171\" data-original=\"https://pic2.zhimg.com/v2-84972d159975caa0f19827fdf778c42d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1171&#39; height=&#39;407&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1171\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1171\" data-original=\"https://pic2.zhimg.com/v2-84972d159975caa0f19827fdf778c42d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-84972d159975caa0f19827fdf778c42d_b.jpg\"/></figure><p>来搭建一下登录注册接口</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-96b40d807f9d3e4f2814e1607fd4ff5f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"166\" class=\"origin_image zh-lightbox-thumb\" width=\"464\" data-original=\"https://pic4.zhimg.com/v2-96b40d807f9d3e4f2814e1607fd4ff5f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;464&#39; height=&#39;166&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"166\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"464\" data-original=\"https://pic4.zhimg.com/v2-96b40d807f9d3e4f2814e1607fd4ff5f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-96b40d807f9d3e4f2814e1607fd4ff5f_b.jpg\"/></figure><p>注册接口肯定是要传递数据的，所以我们使用的是post方法。需要安装一个body-parser的解析包。<i>npm i body-parser</i></p><p>安装好了之后就可以在依赖里面看到。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-862f0e3a170107c3d20668291b8b08f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"147\" class=\"content_image\" width=\"385\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;385&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"147\" class=\"content_image lazy\" width=\"385\" data-actualsrc=\"https://pic1.zhimg.com/v2-862f0e3a170107c3d20668291b8b08f8_b.jpg\"/></figure><p>然后我们在server.js文件中引入这个body-parser</p><p>const bodyParser = require(&#39;body-parser&#39;); // 引入body-parser  然后使用中间件</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-95bf0d25049df814c0d42202f13320b0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"98\" class=\"origin_image zh-lightbox-thumb\" width=\"908\" data-original=\"https://pic1.zhimg.com/v2-95bf0d25049df814c0d42202f13320b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;908&#39; height=&#39;98&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"98\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"908\" data-original=\"https://pic1.zhimg.com/v2-95bf0d25049df814c0d42202f13320b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-95bf0d25049df814c0d42202f13320b0_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9aa33849bcbe4b93f70e7309163e2ce8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"153\" class=\"origin_image zh-lightbox-thumb\" width=\"436\" data-original=\"https://pic1.zhimg.com/v2-9aa33849bcbe4b93f70e7309163e2ce8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;436&#39; height=&#39;153&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"153\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"436\" data-original=\"https://pic1.zhimg.com/v2-9aa33849bcbe4b93f70e7309163e2ce8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9aa33849bcbe4b93f70e7309163e2ce8_b.jpg\"/></figure><p>现在我们可以使用body-parser了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-200ab260d3a3b24c1e0692de8c8cf088_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"870\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb\" width=\"870\" data-original=\"https://pic1.zhimg.com/v2-200ab260d3a3b24c1e0692de8c8cf088_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;870&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"870\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"870\" data-original=\"https://pic1.zhimg.com/v2-200ab260d3a3b24c1e0692de8c8cf088_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-200ab260d3a3b24c1e0692de8c8cf088_b.jpg\"/></figure><p>在body中选择红框，在header中，会自动加上content-type</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-29e85e6661b1882417a283ea61d50931_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-29e85e6661b1882417a283ea61d50931_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;118&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-29e85e6661b1882417a283ea61d50931_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-29e85e6661b1882417a283ea61d50931_b.jpg\"/></figure><p>现在我们send后，就能在node端得到body中的数据</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b8f49d932be5996e59a3138aa891d4e5_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"263\" data-rawheight=\"34\" class=\"content_image\" width=\"263\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;263&#39; height=&#39;34&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"263\" data-rawheight=\"34\" class=\"content_image lazy\" width=\"263\" data-actualsrc=\"https://pic2.zhimg.com/v2-b8f49d932be5996e59a3138aa891d4e5_b.png\"/></figure><p>那么，我们可以正常得到request.body中的内容，我们就可以进行查询，看数据库中是否已经有这条数据。当数据库中没有这条数据时，才可以正常注册。</p><p>我们把数据模型中的User.js引入一下。// const User = require(&#39;../../models/User&#39;)</p><p>然后我们就可以进行后续的逻辑：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cbebcde0f28216c331c49c7d15ad90d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb\" width=\"735\" data-original=\"https://pic2.zhimg.com/v2-cbebcde0f28216c331c49c7d15ad90d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;735&#39; height=&#39;542&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"735\" data-original=\"https://pic2.zhimg.com/v2-cbebcde0f28216c331c49c7d15ad90d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cbebcde0f28216c331c49c7d15ad90d1_b.jpg\"/></figure><p>密码这里我们需要做一下加密：</p><p>先安装一个bcrypt（npm i bcrypt）装完以后，哪里用到加密，就把当前要加密的内容引过来(const bcrypt = require(&#39;bcrypt&#39;);)。使用方法：<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/bcrypt\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bcrypt</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6b126d77f128c1a6bb693836424c4469_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic2.zhimg.com/v2-6b126d77f128c1a6bb693836424c4469_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;244&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic2.zhimg.com/v2-6b126d77f128c1a6bb693836424c4469_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6b126d77f128c1a6bb693836424c4469_b.jpg\"/></figure><p>把下面这句直接复制过来：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4021f1bc3a4c8ce8c828a9ccbc892508_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb\" width=\"694\" data-original=\"https://pic1.zhimg.com/v2-4021f1bc3a4c8ce8c828a9ccbc892508_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;694&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"694\" data-original=\"https://pic1.zhimg.com/v2-4021f1bc3a4c8ce8c828a9ccbc892508_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4021f1bc3a4c8ce8c828a9ccbc892508_b.jpg\"/></figure><p>saltRounds是一种加密方式，栗子中给我们10，那我们也用10好了。突然想起来一个梗（加点盐）。</p><p>myPlaintextPassword，给谁加密就改成谁，我们这里是给password加密。</p><p>接下来的function我们可以写成箭头函数。hash就是我们加密后的密码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae5e6415a6a45b5c44f4bec929ef5899_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"532\" class=\"origin_image zh-lightbox-thumb\" width=\"838\" data-original=\"https://pic2.zhimg.com/v2-ae5e6415a6a45b5c44f4bec929ef5899_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;838&#39; height=&#39;532&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"532\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"838\" data-original=\"https://pic2.zhimg.com/v2-ae5e6415a6a45b5c44f4bec929ef5899_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae5e6415a6a45b5c44f4bec929ef5899_b.jpg\"/></figure><p>现在我们来测试下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b7b8d37eed72844a267ece233f132dc3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb\" width=\"681\" data-original=\"https://pic4.zhimg.com/v2-b7b8d37eed72844a267ece233f132dc3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;681&#39; height=&#39;518&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"681\" data-original=\"https://pic4.zhimg.com/v2-b7b8d37eed72844a267ece233f132dc3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b7b8d37eed72844a267ece233f132dc3_b.jpg\"/></figure><p>我们是可以正常得到这些数据的。</p><p>在mangoDB中我们也存上了这些数据。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7797d7fe9c2a095d656481fb82e28a22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb\" width=\"696\" data-original=\"https://pic3.zhimg.com/v2-7797d7fe9c2a095d656481fb82e28a22_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;696&#39; height=&#39;468&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"696\" data-original=\"https://pic3.zhimg.com/v2-7797d7fe9c2a095d656481fb82e28a22_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7797d7fe9c2a095d656481fb82e28a22_b.jpg\"/></figure><p>再次send时。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e2bea0ae683fea4af5351dbc9a610ef3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic4.zhimg.com/v2-e2bea0ae683fea4af5351dbc9a610ef3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;412&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic4.zhimg.com/v2-e2bea0ae683fea4af5351dbc9a610ef3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e2bea0ae683fea4af5351dbc9a610ef3_b.jpg\"/></figure><p>提示我们，已被注册。</p><p>其实大多数应用都是要有个avatar的，我们也处理一下。使用第三方：<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/gravatar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gravatar</a></p><p>先安装（npm i gravatar ）再引入 const gravatar = require(&#39;gravatar&#39;);</p><p>使用方法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2f045b2276941e8688c5c8e5b324f17c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"606\" data-original=\"https://pic1.zhimg.com/v2-2f045b2276941e8688c5c8e5b324f17c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;606&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"606\" data-original=\"https://pic1.zhimg.com/v2-2f045b2276941e8688c5c8e5b324f17c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2f045b2276941e8688c5c8e5b324f17c_b.jpg\"/></figure><p>还有一些栗子：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b5d9ca80f7d6e3042a82b53bd5bcd921_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-b5d9ca80f7d6e3042a82b53bd5bcd921_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-b5d9ca80f7d6e3042a82b53bd5bcd921_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b5d9ca80f7d6e3042a82b53bd5bcd921_b.jpg\"/></figure><p>s r d的含义</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-46ae69509bba514132aab43438a8cfef_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"751\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"751\" data-original=\"https://pic4.zhimg.com/v2-46ae69509bba514132aab43438a8cfef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;751&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"751\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"751\" data-original=\"https://pic4.zhimg.com/v2-46ae69509bba514132aab43438a8cfef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-46ae69509bba514132aab43438a8cfef_b.png\"/></figure><p>我们把d：’404‘改为mm，就可以得到一个默认的头像占位符。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2e6e43f43eeb0a303d367e8932d97872_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb\" width=\"934\" data-original=\"https://pic3.zhimg.com/v2-2e6e43f43eeb0a303d367e8932d97872_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;934&#39; height=&#39;70&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"934\" data-original=\"https://pic3.zhimg.com/v2-2e6e43f43eeb0a303d367e8932d97872_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2e6e43f43eeb0a303d367e8932d97872_b.png\"/></figure><p>这时候我们再次send，会得到avatar</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a02481300965f6ddfc391f2d6f16142a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"713\" data-rawheight=\"391\" class=\"origin_image zh-lightbox-thumb\" width=\"713\" data-original=\"https://pic3.zhimg.com/v2-a02481300965f6ddfc391f2d6f16142a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;713&#39; height=&#39;391&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"713\" data-rawheight=\"391\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"713\" data-original=\"https://pic3.zhimg.com/v2-a02481300965f6ddfc391f2d6f16142a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a02481300965f6ddfc391f2d6f16142a_b.jpg\"/></figure><p>将这串地址复制下来在浏览器打开，就会得到这样的一个效果。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-09fa8e7b44e1c0010df026e9e86c93db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"414\" data-rawheight=\"414\" class=\"content_image\" width=\"414\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;414&#39; height=&#39;414&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"414\" data-rawheight=\"414\" class=\"content_image lazy\" width=\"414\" data-actualsrc=\"https://pic4.zhimg.com/v2-09fa8e7b44e1c0010df026e9e86c93db_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这个就是mm给到的一个类似于空的效果。当然了，也可以自定义。</p><p>注册下<a href=\"https://link.zhihu.com/?target=https%3A//cn.gravatar.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Gravatar - 全球公认的头像</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-11ebc3081264b5a9ebdcb7211fa243e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb\" width=\"454\" data-original=\"https://pic2.zhimg.com/v2-11ebc3081264b5a9ebdcb7211fa243e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;454&#39; height=&#39;223&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"454\" data-original=\"https://pic2.zhimg.com/v2-11ebc3081264b5a9ebdcb7211fa243e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-11ebc3081264b5a9ebdcb7211fa243e5_b.jpg\"/></figure><p>然后根据提示一步一步操作，因为我们在代码里用的是pg，所以，我们这里也用pg。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9228f04222325be1f6ad40479f7d69fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"529\" data-original=\"https://pic3.zhimg.com/v2-9228f04222325be1f6ad40479f7d69fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;529&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"529\" data-original=\"https://pic3.zhimg.com/v2-9228f04222325be1f6ad40479f7d69fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9228f04222325be1f6ad40479f7d69fe_b.jpg\"/></figure><p>这样子，如果是已经注册的邮箱，就会得到当前的头像，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d55cb3ec826d74fe6d19db04fbb076f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"484\" data-original=\"https://pic2.zhimg.com/v2-d55cb3ec826d74fe6d19db04fbb076f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;484&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"484\" data-original=\"https://pic2.zhimg.com/v2-d55cb3ec826d74fe6d19db04fbb076f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d55cb3ec826d74fe6d19db04fbb076f5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果是没有注册的邮箱，就会得到默认的头像。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "全栈开发", 
                    "tagLink": "https://api.zhihu.com/topics/20043281"
                }
            ], 
            "comments": [
                {
                    "userName": "clouds", 
                    "userLink": "https://www.zhihu.com/people/3b7a26d031543374d09505fc079818b4", 
                    "content": "<p> 棒棒哒</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Limousine", 
                    "userLink": "https://www.zhihu.com/people/b54aebffcd894acac073cb09b8dba699", 
                    "content": "可以 写的很细致", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "良好市民张骚骚", 
                    "userLink": "https://www.zhihu.com/people/455006176f7f0c0f8167e95da1654267", 
                    "content": "好", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57702819", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 1, 
            "title": "再学ES6（三）：参数处理、解构赋值", 
            "content": "<h2>参数处理</h2><p><b><i>函数默认参数处理</i></b></p><p>在ES5中，如果没有给某个参数传值：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-71e7ad2dcffb9825e26ed5e90f6087f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"421\" data-original=\"https://pic3.zhimg.com/v2-71e7ad2dcffb9825e26ed5e90f6087f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;421&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"421\" data-original=\"https://pic3.zhimg.com/v2-71e7ad2dcffb9825e26ed5e90f6087f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-71e7ad2dcffb9825e26ed5e90f6087f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>1 + undefined   NAN</p><p>一般这么处理：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2b575667ac1677ff14b4249a9fd28487_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"275\" data-rawheight=\"178\" class=\"content_image\" width=\"275\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;275&#39; height=&#39;178&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"275\" data-rawheight=\"178\" class=\"content_image lazy\" width=\"275\" data-actualsrc=\"https://pic4.zhimg.com/v2-2b575667ac1677ff14b4249a9fd28487_b.jpg\"/></figure><p>有几个参数，就要苦哈哈的这样写几次。</p><p>在ES6中，可以这么写：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-333421f6ade4547a732983004b64e995_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"569\" data-original=\"https://pic2.zhimg.com/v2-333421f6ade4547a732983004b64e995_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;569&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"569\" data-original=\"https://pic2.zhimg.com/v2-333421f6ade4547a732983004b64e995_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-333421f6ade4547a732983004b64e995_b.jpg\"/></figure><p>当传入一个空数组时，可以把参数push进数组</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-74b57f35a5409b6483021f039dc065e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic3.zhimg.com/v2-74b57f35a5409b6483021f039dc065e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;475&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"475\" data-original=\"https://pic3.zhimg.com/v2-74b57f35a5409b6483021f039dc065e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-74b57f35a5409b6483021f039dc065e2_b.jpg\"/></figure><p>每次调用函数，都会初始化一个新的数组。在其他语言，一般都是同一个数组。我是这样理解的，这里的arr = [] ，其实相当于在函数里面声明let arr = [];</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a8edb01b51539e3fe938d2e993731faa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"219\" data-rawheight=\"145\" class=\"content_image\" width=\"219\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;219&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"219\" data-rawheight=\"145\" class=\"content_image lazy\" width=\"219\" data-actualsrc=\"https://pic3.zhimg.com/v2-a8edb01b51539e3fe938d2e993731faa_b.jpg\"/></figure><p>函数调用完，这个arr就再也访问不到了，下次再调用，自然是一个新的arr。再执行函数，可不就是push到了一个新的arr里。</p><p><b><i>剩余参数</i></b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4844e274c18f50174f24a9fea80e732d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"339\" data-rawheight=\"156\" class=\"content_image\" width=\"339\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;339&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"339\" data-rawheight=\"156\" class=\"content_image lazy\" width=\"339\" data-actualsrc=\"https://pic2.zhimg.com/v2-4844e274c18f50174f24a9fea80e732d_b.jpg\"/></figure><p>假如我们不知道有几个参数，求它们的值。</p><p>在ES5中</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c4869905c115e80b5b2feee243276993_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb\" width=\"567\" data-original=\"https://pic4.zhimg.com/v2-c4869905c115e80b5b2feee243276993_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;567&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"567\" data-original=\"https://pic4.zhimg.com/v2-c4869905c115e80b5b2feee243276993_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c4869905c115e80b5b2feee243276993_b.jpg\"/></figure><p>这里的arguments是个伪数组，没有push等数组方法。</p><p>如果我们前两个参数不是数字，我们只要让后几个数字相加。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-09eed11d290538dc4a80ca9794fa79ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb\" width=\"577\" data-original=\"https://pic3.zhimg.com/v2-09eed11d290538dc4a80ca9794fa79ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;577&#39; height=&#39;246&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"577\" data-original=\"https://pic3.zhimg.com/v2-09eed11d290538dc4a80ca9794fa79ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-09eed11d290538dc4a80ca9794fa79ca_b.jpg\"/></figure><p>现在，就把这些参数分成了两部分。</p><p>在ES6中，我们可以这么做：使用剩余参数</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6886d2792a6d6f92616f4b6fae3aac9f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"240\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-6886d2792a6d6f92616f4b6fae3aac9f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;545&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"240\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-6886d2792a6d6f92616f4b6fae3aac9f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6886d2792a6d6f92616f4b6fae3aac9f_b.jpg\"/></figure><p>因为nums是一个真的数组，所以可以再简化一下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f969821c8d552dcf044771bd7cc8b217_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb\" width=\"633\" data-original=\"https://pic4.zhimg.com/v2-f969821c8d552dcf044771bd7cc8b217_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;633&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"633\" data-original=\"https://pic4.zhimg.com/v2-f969821c8d552dcf044771bd7cc8b217_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f969821c8d552dcf044771bd7cc8b217_b.jpg\"/></figure><p>如果不用剩余参数，非用arguments，也可以。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-867962da719d5aaf125211d58175b155_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-867962da719d5aaf125211d58175b155_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-867962da719d5aaf125211d58175b155_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-867962da719d5aaf125211d58175b155_b.jpg\"/></figure><p>在ES6中，有一个新方法，可以方便快捷的把伪数组变成数组</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f0108c2fb1e53f5a4df4152d380ab1b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb\" width=\"601\" data-original=\"https://pic3.zhimg.com/v2-f0108c2fb1e53f5a4df4152d380ab1b2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;601&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"601\" data-original=\"https://pic3.zhimg.com/v2-f0108c2fb1e53f5a4df4152d380ab1b2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f0108c2fb1e53f5a4df4152d380ab1b2_b.jpg\"/></figure><p>Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例</p><p>还有一个很好用的方法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-20f769aece87cdc3f4e63bf4d08de3b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"493\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"493\" data-original=\"https://pic2.zhimg.com/v2-20f769aece87cdc3f4e63bf4d08de3b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;493&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"493\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"493\" data-original=\"https://pic2.zhimg.com/v2-20f769aece87cdc3f4e63bf4d08de3b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-20f769aece87cdc3f4e63bf4d08de3b1_b.jpg\"/></figure><p>以上三种，都是把<b>伪数组变成真数组</b>的方法。</p><p>最简洁：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0c74d10111359a9ba3abebba50b8bfd8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic1.zhimg.com/v2-0c74d10111359a9ba3abebba50b8bfd8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;144&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic1.zhimg.com/v2-0c74d10111359a9ba3abebba50b8bfd8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0c74d10111359a9ba3abebba50b8bfd8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><i><b>展开操作</b></i></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bec3e3258f85b571faa864ddcde04ed5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb\" width=\"463\" data-original=\"https://pic2.zhimg.com/v2-bec3e3258f85b571faa864ddcde04ed5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;463&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"463\" data-original=\"https://pic2.zhimg.com/v2-bec3e3258f85b571faa864ddcde04ed5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bec3e3258f85b571faa864ddcde04ed5_b.jpg\"/></figure><p>a, b,c在这里好碍眼，我们可以把它们删掉。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-25ace698cf23ecbf8e809ab20263c181_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"451\" data-original=\"https://pic2.zhimg.com/v2-25ace698cf23ecbf8e809ab20263c181_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;451&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"451\" data-original=\"https://pic2.zhimg.com/v2-25ace698cf23ecbf8e809ab20263c181_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-25ace698cf23ecbf8e809ab20263c181_b.jpg\"/></figure><p>还可以有其他比较方便的操作</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-63bc86519553362f993363aae9b07221_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"528\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb\" width=\"528\" data-original=\"https://pic2.zhimg.com/v2-63bc86519553362f993363aae9b07221_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;528&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"528\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"528\" data-original=\"https://pic2.zhimg.com/v2-63bc86519553362f993363aae9b07221_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-63bc86519553362f993363aae9b07221_b.jpg\"/></figure><p><b><i>解构赋值</i></b></p><p>交换两个变量的值</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2fc208f47109e3a17f46c959e04fd9d8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"228\" data-rawheight=\"52\" class=\"content_image\" width=\"228\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;228&#39; height=&#39;52&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"228\" data-rawheight=\"52\" class=\"content_image lazy\" width=\"228\" data-actualsrc=\"https://pic1.zhimg.com/v2-2fc208f47109e3a17f46c959e04fd9d8_b.jpg\"/></figure><p>在这里有个坑，就是[]开头的一定要有个; 因为它会往上找。个人基本上不会省略；当然了，还有圆括号。</p><p>使用...rest</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-512a2d180bec0b7015555344b70e3096_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic3.zhimg.com/v2-512a2d180bec0b7015555344b70e3096_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic3.zhimg.com/v2-512a2d180bec0b7015555344b70e3096_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-512a2d180bec0b7015555344b70e3096_b.jpg\"/></figure><p>将对象解构赋值</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-19df40dcdf178a489daa8493c547fa9d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic2.zhimg.com/v2-19df40dcdf178a489daa8493c547fa9d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;335&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic2.zhimg.com/v2-19df40dcdf178a489daa8493c547fa9d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-19df40dcdf178a489daa8493c547fa9d_b.jpg\"/></figure><p>其实就是语法糖。</p><p>解构赋值和默认参数并用</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e39f00a8a79b563dd3829110faf0cbcc_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-e39f00a8a79b563dd3829110faf0cbcc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;644&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-e39f00a8a79b563dd3829110faf0cbcc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e39f00a8a79b563dd3829110faf0cbcc_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-36c333ebe0e08e2afaf2883376b7a8f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"487\" data-rawheight=\"153\" class=\"origin_image zh-lightbox-thumb\" width=\"487\" data-original=\"https://pic2.zhimg.com/v2-36c333ebe0e08e2afaf2883376b7a8f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;487&#39; height=&#39;153&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"487\" data-rawheight=\"153\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"487\" data-original=\"https://pic2.zhimg.com/v2-36c333ebe0e08e2afaf2883376b7a8f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-36c333ebe0e08e2afaf2883376b7a8f5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f7b134454e531be18fc419f6839d57ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"155\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic4.zhimg.com/v2-f7b134454e531be18fc419f6839d57ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;155&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"155\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic4.zhimg.com/v2-f7b134454e531be18fc419f6839d57ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f7b134454e531be18fc419f6839d57ef_b.jpg\"/></figure><p>在对象中使用：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-263c023d6da7638c7366d9e20d2eb26c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-263c023d6da7638c7366d9e20d2eb26c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;270&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-263c023d6da7638c7366d9e20d2eb26c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-263c023d6da7638c7366d9e20d2eb26c_b.jpg\"/></figure><p>这时候打印nameC的时候是会报错的。</p><p>但是对象中的属性名是没有任何变化的，我们只是把变量nameC的名字重命名为xingming了，并没有改动对象cc中的属性名。</p><p>如果我们要取子代的数据：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-395b04efd5ebfe53b7359674b10986a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"393\" class=\"content_image\" width=\"408\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;408&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"393\" class=\"content_image lazy\" width=\"408\" data-actualsrc=\"https://pic1.zhimg.com/v2-395b04efd5ebfe53b7359674b10986a4_b.jpg\"/></figure><p>这个时候，child并没有被声明，它并不是一个变量。参考var {nameC: xingming} = cc;这个时候，也可以把它理解为使用{}中的数据，重命名了child。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-49206fd478b0fed22f659851bffe3c75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"101\" class=\"origin_image zh-lightbox-thumb\" width=\"476\" data-original=\"https://pic2.zhimg.com/v2-49206fd478b0fed22f659851bffe3c75_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;476&#39; height=&#39;101&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"101\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"476\" data-original=\"https://pic2.zhimg.com/v2-49206fd478b0fed22f659851bffe3c75_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-49206fd478b0fed22f659851bffe3c75_b.jpg\"/></figure><p>如果要取child，就不要冒号后面的那些解构。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f938783611ac2f956257a3b90819f651_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"622\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"622\" data-original=\"https://pic2.zhimg.com/v2-f938783611ac2f956257a3b90819f651_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;622&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"622\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"622\" data-original=\"https://pic2.zhimg.com/v2-f938783611ac2f956257a3b90819f651_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f938783611ac2f956257a3b90819f651_b.png\"/></figure><p>还可以在解构时给属性一个默认值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7ef58e5334e8cacbb753204fc15c6a0e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"60\" class=\"origin_image zh-lightbox-thumb\" width=\"555\" data-original=\"https://pic3.zhimg.com/v2-7ef58e5334e8cacbb753204fc15c6a0e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;555&#39; height=&#39;60&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"60\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"555\" data-original=\"https://pic3.zhimg.com/v2-7ef58e5334e8cacbb753204fc15c6a0e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7ef58e5334e8cacbb753204fc15c6a0e_b.png\"/></figure><p><i>拷贝对象：</i></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-507d2869d06d91ceeac835b4b3719453_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"510\" data-original=\"https://pic4.zhimg.com/v2-507d2869d06d91ceeac835b4b3719453_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;510&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"510\" data-original=\"https://pic4.zhimg.com/v2-507d2869d06d91ceeac835b4b3719453_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-507d2869d06d91ceeac835b4b3719453_b.jpg\"/></figure><p>为什么说是浅拷贝呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8ced561aba79cb6c67043f44a292be2a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic3.zhimg.com/v2-8ced561aba79cb6c67043f44a292be2a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;490&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"490\" data-original=\"https://pic3.zhimg.com/v2-8ced561aba79cb6c67043f44a292be2a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8ced561aba79cb6c67043f44a292be2a_b.jpg\"/></figure><p>我们只是把objA中存放name的地址拷贝过来了，改变其地址内的数据，两个对象指向的是这同一个地址，所以，打印objA的name，值也变了。</p><p>简单理解浅拷贝就是：共用对象</p><p>在ES6中，有比较方便的方法做浅拷贝。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-54e5ee9e7c47b5718785f04e5d902364_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"91\" class=\"origin_image zh-lightbox-thumb\" width=\"504\" data-original=\"https://pic1.zhimg.com/v2-54e5ee9e7c47b5718785f04e5d902364_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;504&#39; height=&#39;91&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"91\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"504\" data-original=\"https://pic1.zhimg.com/v2-54e5ee9e7c47b5718785f04e5d902364_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-54e5ee9e7c47b5718785f04e5d902364_b.jpg\"/></figure><p>我们还可以做对象的合并：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-07e033f13022bf7f295af5d5c79e33e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic1.zhimg.com/v2-07e033f13022bf7f295af5d5c79e33e4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;531&#39; height=&#39;330&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"531\" data-original=\"https://pic1.zhimg.com/v2-07e033f13022bf7f295af5d5c79e33e4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-07e033f13022bf7f295af5d5c79e33e4_b.jpg\"/></figure><p>还可以参照上例，更简洁的写法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-24df103a5f6eef4c7d4388a7e1634bdc_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"529\" data-original=\"https://pic1.zhimg.com/v2-24df103a5f6eef4c7d4388a7e1634bdc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;529&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"529\" data-original=\"https://pic1.zhimg.com/v2-24df103a5f6eef4c7d4388a7e1634bdc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-24df103a5f6eef4c7d4388a7e1634bdc_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>深拷贝：JSON.parse（JSON.stringify(data) ）这个对象不适用于复杂对象。</p><p>如果这个对象满足以下条件就是深拷贝：1- 这个对象中没有复杂的对象（日期、正则、函数、循环引用），没有所有普通对象之外的对象；2- 这个对象没有undefined，因为JSON不支持undefined。</p><p>能适用于复杂对象的深拷贝：递归。</p><p>动态的key值：以前的写法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e08d0489eb70bcfa42ec8c27d39b375b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"116\" class=\"content_image\" width=\"411\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;411&#39; height=&#39;116&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"116\" class=\"content_image lazy\" width=\"411\" data-actualsrc=\"https://pic4.zhimg.com/v2-e08d0489eb70bcfa42ec8c27d39b375b_b.jpg\"/></figure><p>ES6的语法糖：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-812c2b56f817946ba9de291f0332c62c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"149\" class=\"content_image\" width=\"411\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;411&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"411\" data-actualsrc=\"https://pic1.zhimg.com/v2-812c2b56f817946ba9de291f0332c62c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>模板字符串：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ab2e11d770f2e2e8f097c90b93345f8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"332\" data-rawheight=\"365\" class=\"content_image\" width=\"332\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;332&#39; height=&#39;365&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"332\" data-rawheight=\"365\" class=\"content_image lazy\" width=\"332\" data-actualsrc=\"https://pic4.zhimg.com/v2-ab2e11d770f2e2e8f097c90b93345f8b_b.jpg\"/></figure><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "ECMAScript 2015", 
                    "tagLink": "https://api.zhihu.com/topics/19651015"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57683044", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 1, 
            "title": "再学ES6（二）：箭头函数、this", 
            "content": "<p>在ES3中，声明函数：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ec8d0536fbff1bb94ef36e5408bd244c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"642\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb\" width=\"642\" data-original=\"https://pic1.zhimg.com/v2-ec8d0536fbff1bb94ef36e5408bd244c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;642&#39; height=&#39;515&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"642\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"642\" data-original=\"https://pic1.zhimg.com/v2-ec8d0536fbff1bb94ef36e5408bd244c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ec8d0536fbff1bb94ef36e5408bd244c_b.jpg\"/></figure><p>在ES6中，新增的箭头函数只能做赋值，不能做声明。有三种写法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-92ca403be22c448fd967cb38758242f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"451\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-92ca403be22c448fd967cb38758242f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;570&#39; height=&#39;451&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"451\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-92ca403be22c448fd967cb38758242f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-92ca403be22c448fd967cb38758242f1_b.jpg\"/></figure><p>ES3：支持this。</p><p>ES6：也支持this，但是用箭头函数弱化了this的用法。</p><p>再次认识this之前，先认识下arguments对象。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3927a59b0b180520352b7783a67ddd0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb\" width=\"470\" data-original=\"https://pic1.zhimg.com/v2-3927a59b0b180520352b7783a67ddd0c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;470&#39; height=&#39;570&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"470\" data-original=\"https://pic1.zhimg.com/v2-3927a59b0b180520352b7783a67ddd0c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3927a59b0b180520352b7783a67ddd0c_b.jpg\"/></figure><p>依旧用这个函数，这次不打印参数，我们直接打印this。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3495261b4163c934ca0dcd82794cede8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"116\" class=\"content_image\" width=\"304\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;304&#39; height=&#39;116&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"116\" class=\"content_image lazy\" width=\"304\" data-actualsrc=\"https://pic1.zhimg.com/v2-3495261b4163c934ca0dcd82794cede8_b.jpg\"/></figure><p>我们传了参数p1 和 p2，但是我们并没有传this，this是什么？this是哪里来的？为什么可以打印this不报错？（先把大脑放空，你不认识this）。</p><p>那么我们再传两个值试试？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-abec0a02c51a7f9d6814df0761789b55_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"121\" class=\"content_image\" width=\"381\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;381&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"121\" class=\"content_image lazy\" width=\"381\" data-actualsrc=\"https://pic2.zhimg.com/v2-abec0a02c51a7f9d6814df0761789b55_b.jpg\"/></figure><p>如果我们把this当做和p1 p2一样，当做参数，是不是就是打印 1 2 &#34;aaa&#34;呢？是不是感觉这个this是一个特殊的参数呢？仿佛隐身了一般，隐式的传参，也就是在调用的时候，像是在xxx(不可见的某某某， p1， p2)。</p><p>当我们在调用一个函数的时候，我们不知道是谁在调用它。那么，在我们不知道是谁在调用它的时候，怎么获取它呢？ 其实是可以使用第一个参数来获取，第一个参数必须传调用者的名字。但是这么名字不需要传，JS默认的是帮我们传了。<b>this就是.前面的那个某某某。</b></p><p>如图中xxx3，前面没有.，但是它是Window的方法，所以其实是<a href=\"https://link.zhihu.com/?target=http%3A//Window.xxx%28%29\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">Window.xxx()</span><span class=\"invisible\"></span></a>; 打印出来的this，就是.xxx前的Window对象。</p><p>再看下例：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-99f89ed8d63c89323e27d13383602e50_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"303\" data-rawheight=\"241\" class=\"content_image\" width=\"303\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;303&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"303\" data-rawheight=\"241\" class=\"content_image lazy\" width=\"303\" data-actualsrc=\"https://pic1.zhimg.com/v2-99f89ed8d63c89323e27d13383602e50_b.jpg\"/></figure><p>这里调用的hi，.hi前面是obj，所以，这里打印出来的this，便是obj。</p><p>其实，JS是接受this的。但是，这个obj是隐藏的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-307d776217f23ede1f45b3415bcbdc72_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"225\" class=\"origin_image zh-lightbox-thumb\" width=\"499\" data-original=\"https://pic3.zhimg.com/v2-307d776217f23ede1f45b3415bcbdc72_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;499&#39; height=&#39;225&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"225\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"499\" data-original=\"https://pic3.zhimg.com/v2-307d776217f23ede1f45b3415bcbdc72_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-307d776217f23ede1f45b3415bcbdc72_b.jpg\"/></figure><p>那么我们为什么知道this的值呢？因为我们在obj.hi()的时候，我们知道obj是作为this传进来的。this是被隐藏起来的，我们只能看到p1 p2。</p><p>obj.hi(1, 2) 等价于 obj.hi.call( obj , 1, 2)</p><p>t<b>his的确定方式，和p1 p2的确定方式一样，必须看是谁调用的。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-454a84dc35ba89f916915b3fd966655c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"763\" data-original=\"https://pic1.zhimg.com/v2-454a84dc35ba89f916915b3fd966655c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;763&#39; height=&#39;395&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"763\" data-original=\"https://pic1.zhimg.com/v2-454a84dc35ba89f916915b3fd966655c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-454a84dc35ba89f916915b3fd966655c_b.jpg\"/></figure><p>因为这个this是可变的，所以可以在外层用个变量把它保存下来。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cdcb812c704be62b6415f97998e626df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic4.zhimg.com/v2-cdcb812c704be62b6415f97998e626df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;594&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"594\" data-original=\"https://pic4.zhimg.com/v2-cdcb812c704be62b6415f97998e626df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cdcb812c704be62b6415f97998e626df_b.jpg\"/></figure><p>箭头函数就是为了解决this的坑</p><p>箭头函数没有隐藏的this，没有this的概念。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9d68503ba8d03a09951b88c403c2af3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"268\" class=\"content_image\" width=\"375\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;375&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"268\" class=\"content_image lazy\" width=\"375\" data-actualsrc=\"https://pic3.zhimg.com/v2-9d68503ba8d03a09951b88c403c2af3a_b.jpg\"/></figure><p>箭头函数，给它传this，它也不要，外面的this是谁，在箭头函数里面就是谁。没有任何隐藏的参数。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8f919ec1482a634ab4ad0cdb499f7ccf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"453\" data-original=\"https://pic4.zhimg.com/v2-8f919ec1482a634ab4ad0cdb499f7ccf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;453&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"453\" data-original=\"https://pic4.zhimg.com/v2-8f919ec1482a634ab4ad0cdb499f7ccf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8f919ec1482a634ab4ad0cdb499f7ccf_b.jpg\"/></figure><p>如果想要用外面的this</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-327b1a181a27316fa1da0170349df9a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb\" width=\"645\" data-original=\"https://pic2.zhimg.com/v2-327b1a181a27316fa1da0170349df9a5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;645&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"645\" data-original=\"https://pic2.zhimg.com/v2-327b1a181a27316fa1da0170349df9a5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-327b1a181a27316fa1da0170349df9a5_b.jpg\"/></figure><p>就得必须显式的把this传过去</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-419bed47e9a61a9b7fb1e3b2046b6a7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"209\" class=\"content_image\" width=\"335\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;335&#39; height=&#39;209&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"209\" class=\"content_image lazy\" width=\"335\" data-actualsrc=\"https://pic4.zhimg.com/v2-419bed47e9a61a9b7fb1e3b2046b6a7b_b.jpg\"/></figure><p>用了箭头函数之后，怎么使用a变量的，就可以怎么使用this。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9121179e7501c5f218ca9319420bba08_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"150\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic1.zhimg.com/v2-9121179e7501c5f218ca9319420bba08_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"150\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic1.zhimg.com/v2-9121179e7501c5f218ca9319420bba08_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9121179e7501c5f218ca9319420bba08_b.jpg\"/></figure><p>vue中不要在选项属性或回调上面使用箭头函数，因为vue 依赖this。可以在里面使用，最外面那层不要用。</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "ECMAScript 2015", 
                    "tagLink": "https://api.zhihu.com/topics/19651015"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57625794", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 6, 
            "title": "再学ES6（一）：var、let、const", 
            "content": "<p><b>声明变量的方式：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fb7d06f0fe2b8816d4b332e730f76058_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"553\" data-original=\"https://pic1.zhimg.com/v2-fb7d06f0fe2b8816d4b332e730f76058_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;553&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"553\" data-original=\"https://pic1.zhimg.com/v2-fb7d06f0fe2b8816d4b332e730f76058_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fb7d06f0fe2b8816d4b332e730f76058_b.jpg\"/></figure><p>1- 在没有函数的时候，直接在外部声明a，是隐式的声明全部变量。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1f9b215f1b2fea6f1eaabe5bcc77e244_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"94\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"94\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic1.zhimg.com/v2-1f9b215f1b2fea6f1eaabe5bcc77e244_b.jpg\"/></figure><p>2- 在有一层函数的时候，函数内部声明a，也是全局变量。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f3b9f351dee64a1e3b921cad6180f260_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"150\" class=\"content_image\" width=\"394\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;394&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"394\" data-actualsrc=\"https://pic1.zhimg.com/v2-f3b9f351dee64a1e3b921cad6180f260_b.jpg\"/></figure><p>3- 在有一层函数的时候，外面有a，里面也有a，是对全局变量的（重新)赋值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-96c713e81d60ac2a161e6ea5dddc4100_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"179\" class=\"content_image\" width=\"394\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;394&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"179\" class=\"content_image lazy\" width=\"394\" data-actualsrc=\"https://pic1.zhimg.com/v2-96c713e81d60ac2a161e6ea5dddc4100_b.jpg\"/></figure><p>4- 当有两层函数，且内部都是直接a=xx来声明</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0517f69c7c8a5a34539d085ddfa9ff10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic1.zhimg.com/v2-0517f69c7c8a5a34539d085ddfa9ff10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;531&#39; height=&#39;244&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"531\" data-original=\"https://pic1.zhimg.com/v2-0517f69c7c8a5a34539d085ddfa9ff10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0517f69c7c8a5a34539d085ddfa9ff10_b.jpg\"/></figure><p>5- 当有两层函数，但是外层是以var关键字来声明</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-14a4ead3be47156fd06fc249e4ef1b04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"611\" data-original=\"https://pic1.zhimg.com/v2-14a4ead3be47156fd06fc249e4ef1b04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;611&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"611\" data-original=\"https://pic1.zhimg.com/v2-14a4ead3be47156fd06fc249e4ef1b04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-14a4ead3be47156fd06fc249e4ef1b04_b.jpg\"/></figure><p><b>由此可见，并不是所有情况，a=xxx时都是声明全局变量。</b></p><p>6- 当有两层函数，内层函数是以var关键字来声明  ---仅仅放在这---供观赏</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-faae9b2aa21a1cb0076a9695307b2676_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic3.zhimg.com/v2-faae9b2aa21a1cb0076a9695307b2676_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;262&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic3.zhimg.com/v2-faae9b2aa21a1cb0076a9695307b2676_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-faae9b2aa21a1cb0076a9695307b2676_b.jpg\"/></figure><p>a=xxx，尽量不要用，因为它含义不明。var a = xxx，是声明自己的a，不会不小心声明个全局变量。但是var会有提升的作用。即使是在不会执行的那块代码中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ef56c97ee3920204602639a5ed4979f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"429\" data-original=\"https://pic4.zhimg.com/v2-ef56c97ee3920204602639a5ed4979f3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;429&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"429\" data-original=\"https://pic4.zhimg.com/v2-ef56c97ee3920204602639a5ed4979f3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ef56c97ee3920204602639a5ed4979f3_b.jpg\"/></figure><p>把var a 删掉，就会报错。</p><p>上图中代码，等价于：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ef2ebfe865aad6f062ac939a55ec7d9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"241\" class=\"content_image\" width=\"413\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;413&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"241\" class=\"content_image lazy\" width=\"413\" data-actualsrc=\"https://pic3.zhimg.com/v2-ef2ebfe865aad6f062ac939a55ec7d9a_b.jpg\"/></figure><p>无论var在哪里，都会把声明头提升到作用域最顶部。</p><p><b>这个var就会给代码带来一些不符合逻辑的地方。</b>所以一般写js，所有的var，写在作用域的第一行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果我们要不使用全局变量，不暴露任何变量，假如用var a，无论在哪里写，都会暴露window.a这个全局变量。只能把所有变量放在一个函数里面。但是函数有名字，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6e6931230f5098affacf2a7f77dc4721_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"168\" class=\"content_image\" width=\"341\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;341&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"168\" class=\"content_image lazy\" width=\"341\" data-actualsrc=\"https://pic2.zhimg.com/v2-6e6931230f5098affacf2a7f77dc4721_b.jpg\"/></figure><p>虽然我们把a给隐藏了，但是又把xxx给暴露出来了。</p><p>要么暴露a，要么暴露xxx。</p><p>/(ㄒoㄒ)/~~只好使用立即执行函数</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ca3f698e5bc61b0512d80ebe7705860e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"215\" class=\"content_image\" width=\"326\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;326&#39; height=&#39;215&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"215\" class=\"content_image lazy\" width=\"326\" data-actualsrc=\"https://pic3.zhimg.com/v2-ca3f698e5bc61b0512d80ebe7705860e_b.jpg\"/></figure><p>于是，let出来了</p><p><b>let特点</b>：</p><p>1- let的作用域就是当前花括号。不会往上升。写在哪是哪，不会到处乱跑。这样我们就可以方便的使用局部变量了。而不需要引入一个函数。</p><p>2- let也是可以嵌套的。如果没有在相应的代码块中声明，就直接报错。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aa0edcd242ffa15d5800547838f26a2d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"478\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"478\" data-original=\"https://pic2.zhimg.com/v2-aa0edcd242ffa15d5800547838f26a2d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;478&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"478\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"478\" data-original=\"https://pic2.zhimg.com/v2-aa0edcd242ffa15d5800547838f26a2d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aa0edcd242ffa15d5800547838f26a2d_b.jpg\"/></figure><p>如果我们像下图一样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f9ac924ffd3c7cc541b565a227f11999_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-f9ac924ffd3c7cc541b565a227f11999_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-f9ac924ffd3c7cc541b565a227f11999_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f9ac924ffd3c7cc541b565a227f11999_b.jpg\"/></figure><p>这时候它既不会用外面的，也不会用里面的，它直接报错（听说这个叫临时死区：temp dead zone）。这样就不会出现一些奇异的代码。</p><p>3- 如果重复声明let a 也会报错。 // Identifier &#39;a&#39; has already been declared</p><p><b>const特点：</b></p><p>1 2 3 - 和let一致</p><p>4-只能赋值一次（常量， 简单数据类型，如果是复杂数据类型，比如数组，是可以push的），而且声明时必须赋值。</p><p>坑：</p><p>1- 注意代码执行的顺序</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-50f8a720003232c64eda765a501d3a24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"310\" data-rawheight=\"175\" class=\"content_image\" width=\"310\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;310&#39; height=&#39;175&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"310\" data-rawheight=\"175\" class=\"content_image lazy\" width=\"310\" data-actualsrc=\"https://pic1.zhimg.com/v2-50f8a720003232c64eda765a501d3a24_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-61006afe7ec9c508a4fa8180d871e4ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"210\" class=\"content_image\" width=\"312\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;312&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"210\" class=\"content_image lazy\" width=\"312\" data-actualsrc=\"https://pic4.zhimg.com/v2-61006afe7ec9c508a4fa8180d871e4ab_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-06bfa2edfd65f0314fb7246cddae24c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"211\" class=\"content_image\" width=\"326\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;326&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"211\" class=\"content_image lazy\" width=\"326\" data-actualsrc=\"https://pic4.zhimg.com/v2-06bfa2edfd65f0314fb7246cddae24c7_b.jpg\"/></figure><p>再看实际项目中常遇到的问题：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d2efdddb627a174ecae9ed99cb6be9cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"173\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic2.zhimg.com/v2-d2efdddb627a174ecae9ed99cb6be9cd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;584&#39; height=&#39;173&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"173\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"584\" data-original=\"https://pic2.zhimg.com/v2-d2efdddb627a174ecae9ed99cb6be9cd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d2efdddb627a174ecae9ed99cb6be9cd_b.jpg\"/></figure><p>无论点击哪个导航，打印的都是6，额，忘了说了，我结构里有6个li。</p><p>这不是我们想要的结果。我们想要的是，点击哪个i就打印哪个i。</p><p>只需要:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8f1ccc59a1a11c306a38156944b7786a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic3.zhimg.com/v2-8f1ccc59a1a11c306a38156944b7786a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic3.zhimg.com/v2-8f1ccc59a1a11c306a38156944b7786a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8f1ccc59a1a11c306a38156944b7786a_b.jpg\"/></figure><p>那么下图为什么不行呢？因为它不在一个块里，我们不知道它的作用域。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f2deaaefb65f2375be80f4f73e9363ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic3.zhimg.com/v2-f2deaaefb65f2375be80f4f73e9363ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic3.zhimg.com/v2-f2deaaefb65f2375be80f4f73e9363ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f2deaaefb65f2375be80f4f73e9363ca_b.jpg\"/></figure><p>ES6在定义它的时候，如果不是在一个块里，它的作用域是在for()这个圆括号里。出了这个圆括号，就没有i。for循环，在进入花括号时，会帮我们创建一个i。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a9e2d6432f658ca1c78f439574239572_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-a9e2d6432f658ca1c78f439574239572_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;266&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-a9e2d6432f658ca1c78f439574239572_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a9e2d6432f658ca1c78f439574239572_b.jpg\"/></figure><p>块里面的i，等于圆括号里面的i。</p><p>这样子下来，一共有7个i，一个是圆括号里面的i，贯穿了循环的始终。6个i是块作用域里的i。</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "ECMAScript 2015", 
                    "tagLink": "https://api.zhihu.com/topics/19651015"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57282596", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（九）：HTTPS、HTTP2", 
            "content": "<p>HTTP没有任何安全属性，HTTPS 就是HTTP + Security。</p><h2>加密</h2><p>私钥：放在服务器。 </p><p>公钥：放在互联网上， 所有人都可以拿到的加密的字符串。这个字符串用来加密我们传输的信息。使用公钥加密的数据传输到服务器上之后，只有服务器通过私钥进行解密，才能把公钥加密过的数据给解密出来。任何人都拿不到私钥，因为私钥只放在服务器上。不会放到互联网上进行传输。</p><p>公钥和私钥，在握手的时候进行传输。</p><p>HTTPS传输的过程</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b4966edb67956d7643e2dac0154ed733_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1710\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb\" width=\"1710\" data-original=\"https://pic4.zhimg.com/v2-b4966edb67956d7643e2dac0154ed733_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1710&#39; height=&#39;926&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1710\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1710\" data-original=\"https://pic4.zhimg.com/v2-b4966edb67956d7643e2dac0154ed733_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b4966edb67956d7643e2dac0154ed733_b.jpg\"/></figure><p>1、客户端先生成一个随机数，传输给服务端，中间会带上客户端支持的加密套件。</p><p>2、服务端拿到这个随机数之后，先保存，也生成一个随机数，会伴随着一个证书，也就是公钥，传输给客户端。</p><p>3、客户端收到服务端传来的随机数和公钥，也保存下，然后生成一个预主秘钥，也就是第三个随机数，这个随机数用公钥加密了，传输给服务器。</p><p>4、服务端收到加密的预主秘钥，使用私钥进行解密，拿到预主秘钥，客户端和服务端同时对这三个随机数进行算法的操作，生成一个主秘钥。后期传输的数据都是通过这个主秘钥进行加密的。</p><p>HTTPS默认使用的端口：443</p><p>需要第三方权威机构来颁发安全证书。</p><h2>HTTP2 </h2><h2>优势</h2><p>1、信道复用</p><p>2、数据的传输方式：分帧传输，每一帧都有上下文的联系，并不一定要按照连续的顺序发送，而是可以不同的帧，一起发送。全部传输完毕，后根据帧里面的信息再进行一次组合成为一个真正的数据。这样就可以在同一个连接上并发的发送不同的请求。</p><p>3、Server Push</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e50469efd74c26797d289f33b6fc3930_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"561\" data-original=\"https://pic1.zhimg.com/v2-e50469efd74c26797d289f33b6fc3930_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;561&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"561\" data-original=\"https://pic1.zhimg.com/v2-e50469efd74c26797d289f33b6fc3930_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e50469efd74c26797d289f33b6fc3930_b.jpg\"/></figure><p>HTTP2 是由Google之前开发的 SPDY 演化而来的，SPDY是要使用HTTPS才能够支持。所以HTTP2也要使用HTTPS。</p><p>HTTP1.1 vs HTTP2  HTTP2 vs HTTP2 server-push</p><a href=\"https://link.zhihu.com/?target=https%3A//http2.akamai.com/demo/http2-lab.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTTP/2 Server-Push LAB | Akamai</a><p>HTTP2整体的性能提升，不是在server-push上，而是在信道复用和分帧传输上面。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><i>HTTP原理：</i></p><p>是建立在TCP连接上才能发送的，创建TCP连接要经过三次握手，或者使用的是HTTPS，要经过加密数据的握手。以及HTTP是否是一个长连接，能够为服务带来什么好处。如果使用的是HTTP2，在长连接的基础上又增加了信道复用和分帧传输。</p><p><i>HTTP技术点：</i></p><p>HTTP头相关的一些作用：cache-control来控制缓存，以及last-modified来验证缓存是否可用。CSP如何控制网页加载的安全性。CORS，如何创建一个可用性很高而且有足够的安全性的跨域服务。</p><p>面向未来的HTTP：HTTPS（安全如何保证）、HTTP2</p><p>最后再来温习下图图</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5bd2bb408b3e4c2578c5f267d0f40472_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1560\" data-rawheight=\"517\" class=\"origin_image zh-lightbox-thumb\" width=\"1560\" data-original=\"https://pic3.zhimg.com/v2-5bd2bb408b3e4c2578c5f267d0f40472_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1560&#39; height=&#39;517&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1560\" data-rawheight=\"517\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1560\" data-original=\"https://pic3.zhimg.com/v2-5bd2bb408b3e4c2578c5f267d0f40472_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5bd2bb408b3e4c2578c5f267d0f40472_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57233015", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（八）：Content-Security-Policy", 
            "content": "<p>内容安全策略</p><p>作用：</p><p>1、限制资源获取：限制网页当中一系列的资源获取的情况，从哪里获取，请求发到哪个地方</p><p>限制方式：</p><p>default-src限制全局的和链接有关的作用范围</p><p>根据资源类型（connect-src、img-src等），限制资源范围</p><p>2、报告资源获取越权：在网页当中获取了一些我们不应该获取的资源的时候，给服务进行报告，报告资源获取越权，然后做出调整</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-38f5d584c547dee6e075aa5830a3bf3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic3.zhimg.com/v2-38f5d584c547dee6e075aa5830a3bf3a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;320&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic3.zhimg.com/v2-38f5d584c547dee6e075aa5830a3bf3a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-38f5d584c547dee6e075aa5830a3bf3a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-305dc832ed9d9e0934e3f5be720d00d8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb\" width=\"797\" data-original=\"https://pic1.zhimg.com/v2-305dc832ed9d9e0934e3f5be720d00d8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;797&#39; height=&#39;355&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"797\" data-original=\"https://pic1.zhimg.com/v2-305dc832ed9d9e0934e3f5be720d00d8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-305dc832ed9d9e0934e3f5be720d00d8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-254c3ec9c9b26e00df220a001caa9952_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb\" width=\"818\" data-original=\"https://pic3.zhimg.com/v2-254c3ec9c9b26e00df220a001caa9952_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;818&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"818\" data-original=\"https://pic3.zhimg.com/v2-254c3ec9c9b26e00df220a001caa9952_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-254c3ec9c9b26e00df220a001caa9952_b.jpg\"/></figure><p>之所以报这个错误，就是我们加了这个头的作用。</p><p>如果不是inline脚本，而是外链，则</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1aa3169b80dabab36bc9a50d047ff12d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic2.zhimg.com/v2-1aa3169b80dabab36bc9a50d047ff12d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic2.zhimg.com/v2-1aa3169b80dabab36bc9a50d047ff12d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1aa3169b80dabab36bc9a50d047ff12d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d2577e60f87cca1c2d1ef9b64b5a65d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb\" width=\"755\" data-original=\"https://pic2.zhimg.com/v2-d2577e60f87cca1c2d1ef9b64b5a65d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;755&#39; height=&#39;416&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"755\" data-original=\"https://pic2.zhimg.com/v2-d2577e60f87cca1c2d1ef9b64b5a65d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d2577e60f87cca1c2d1ef9b64b5a65d1_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-76189c287174dac5ad1329ed352c38a5_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"846\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb\" width=\"846\" data-original=\"https://pic2.zhimg.com/v2-76189c287174dac5ad1329ed352c38a5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;846&#39; height=&#39;133&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"846\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"846\" data-original=\"https://pic2.zhimg.com/v2-76189c287174dac5ad1329ed352c38a5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-76189c287174dac5ad1329ed352c38a5_b.png\"/></figure><p>这个头不仅可以限制文件，还可以限制域名。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7bb0bb52cabb59da27826749234951e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"672\" data-original=\"https://pic1.zhimg.com/v2-7bb0bb52cabb59da27826749234951e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;672&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"672\" data-original=\"https://pic1.zhimg.com/v2-7bb0bb52cabb59da27826749234951e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7bb0bb52cabb59da27826749234951e8_b.jpg\"/></figure><p>这个时候 inline脚本还是不能执行的。如果引入外链的脚本文件，则会报错，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8adb200ee3b565ca3f2d3bf1c1c8a1e9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"889\" data-rawheight=\"83\" class=\"origin_image zh-lightbox-thumb\" width=\"889\" data-original=\"https://pic2.zhimg.com/v2-8adb200ee3b565ca3f2d3bf1c1c8a1e9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;889&#39; height=&#39;83&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"889\" data-rawheight=\"83\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"889\" data-original=\"https://pic2.zhimg.com/v2-8adb200ee3b565ca3f2d3bf1c1c8a1e9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8adb200ee3b565ca3f2d3bf1c1c8a1e9_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0d6fa12f86616e99e4782b443f45733a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"https://pic3.zhimg.com/v2-0d6fa12f86616e99e4782b443f45733a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;863&#39; height=&#39;183&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"863\" data-original=\"https://pic3.zhimg.com/v2-0d6fa12f86616e99e4782b443f45733a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0d6fa12f86616e99e4782b443f45733a_b.jpg\"/></figure><p>这样就可限制，只能使用我们本站使用的脚本。</p><p>还可以限制指定某一个网站。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-116af3bffc98a866650fd4e4ed673b3a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"979\" data-rawheight=\"137\" class=\"origin_image zh-lightbox-thumb\" width=\"979\" data-original=\"https://pic3.zhimg.com/v2-116af3bffc98a866650fd4e4ed673b3a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;979&#39; height=&#39;137&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"979\" data-rawheight=\"137\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"979\" data-original=\"https://pic3.zhimg.com/v2-116af3bffc98a866650fd4e4ed673b3a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-116af3bffc98a866650fd4e4ed673b3a_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d6554ebfa480a5d2ec48256b3d36a5ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb\" width=\"858\" data-original=\"https://pic1.zhimg.com/v2-d6554ebfa480a5d2ec48256b3d36a5ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;858&#39; height=&#39;157&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"858\" data-original=\"https://pic1.zhimg.com/v2-d6554ebfa480a5d2ec48256b3d36a5ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d6554ebfa480a5d2ec48256b3d36a5ec_b.jpg\"/></figure><p>这个文件已经加载成功了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1de1226ee7cae7aa52f9f67eb64d7638_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"446\" data-original=\"https://pic1.zhimg.com/v2-1de1226ee7cae7aa52f9f67eb64d7638_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;446&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"446\" data-original=\"https://pic1.zhimg.com/v2-1de1226ee7cae7aa52f9f67eb64d7638_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1de1226ee7cae7aa52f9f67eb64d7638_b.jpg\"/></figure><p>如果把指定的网站给去掉</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b8b03bd470d3bb6551842a93e477b141_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"93\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-b8b03bd470d3bb6551842a93e477b141_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;508&#39; height=&#39;93&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"93\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-b8b03bd470d3bb6551842a93e477b141_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b8b03bd470d3bb6551842a93e477b141_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ede98b5462ca9cd53a03296886bb339b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"150\" class=\"origin_image zh-lightbox-thumb\" width=\"499\" data-original=\"https://pic4.zhimg.com/v2-ede98b5462ca9cd53a03296886bb339b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;499&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"150\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"499\" data-original=\"https://pic4.zhimg.com/v2-ede98b5462ca9cd53a03296886bb339b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ede98b5462ca9cd53a03296886bb339b_b.jpg\"/></figure><p>浏览器这端就把它限制掉了，不去发送请求。</p><p>我们可以限制全局，也可以限制局部的。</p><p>也可以限制form表单提交的方向。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d71bb2eee4e72945ff63efaea715674f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic4.zhimg.com/v2-d71bb2eee4e72945ff63efaea715674f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;501&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"501\" data-original=\"https://pic4.zhimg.com/v2-d71bb2eee4e72945ff63efaea715674f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d71bb2eee4e72945ff63efaea715674f_b.jpg\"/></figure><p>如果仅仅这么写，点击按钮，是会跳转到zhihu去的，我们要限制只能跳转本站的话，应该是不能跳转成功的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-197dae455792ab21f7b34f6441385533_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"939\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb\" width=\"939\" data-original=\"https://pic4.zhimg.com/v2-197dae455792ab21f7b34f6441385533_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;939&#39; height=&#39;127&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"939\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"939\" data-original=\"https://pic4.zhimg.com/v2-197dae455792ab21f7b34f6441385533_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-197dae455792ab21f7b34f6441385533_b.png\"/></figure><p>这样限制，就不会做任何的跳转了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-55e6a0285b41422b878ec04bf5556435_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"749\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb\" width=\"749\" data-original=\"https://pic2.zhimg.com/v2-55e6a0285b41422b878ec04bf5556435_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;749&#39; height=&#39;54&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"749\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"749\" data-original=\"https://pic2.zhimg.com/v2-55e6a0285b41422b878ec04bf5556435_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-55e6a0285b41422b878ec04bf5556435_b.png\"/></figure><p>更详细的参见：</p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-72382e605ce3eba8154aa310a712c403_ipico.jpg\" data-image-width=\"600\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">内容安全策略( CSP )</a><p>也可以把default-src 换成指定的文件类型，如img-src script-src</p><p>我们还可以让它主动向服务器发一个请求，进行汇报</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6fc8e6928c9ab0c3775a4c566153837_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb\" width=\"611\" data-original=\"https://pic4.zhimg.com/v2-b6fc8e6928c9ab0c3775a4c566153837_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;611&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"611\" data-original=\"https://pic4.zhimg.com/v2-b6fc8e6928c9ab0c3775a4c566153837_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6fc8e6928c9ab0c3775a4c566153837_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-60dc21e724e74bbdc39270c64fa416e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb\" width=\"767\" data-original=\"https://pic4.zhimg.com/v2-60dc21e724e74bbdc39270c64fa416e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;767&#39; height=&#39;475&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"767\" data-original=\"https://pic4.zhimg.com/v2-60dc21e724e74bbdc39270c64fa416e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-60dc21e724e74bbdc39270c64fa416e3_b.jpg\"/></figure><p>发送的内容是一个标准的csp-report的内容。</p><p>不仅可以在HTTP的头里面写，还可以通过在HTML文档中的meta标签来使用。report-uri只能通过HTTP头部去设置，在HTML的meta标签中是无法使用的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-174248da846c5543d0dc6418ddff4ba0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"930\" data-original=\"https://pic1.zhimg.com/v2-174248da846c5543d0dc6418ddff4ba0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;930&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"930\" data-original=\"https://pic1.zhimg.com/v2-174248da846c5543d0dc6418ddff4ba0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-174248da846c5543d0dc6418ddff4ba0_b.png\"/></figure><p>效果是一样的。</p><p>更推荐使用HTTP。</p><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57173551", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（七）：数据协商、Redirect", 
            "content": "<p>在客户端发送给服务端请求的时候，客户端会声明：我希望这个请求我拿到的数据格式以及数据相关的一些限制是怎样的。服务端会根据这个做出判断要返回怎样的数据。</p><h2>分类</h2><p><b>请求：</b>通过Accept来声明想要的数据</p><p>Accept：指定想要的类型 好几种格式</p><p>Accept-Encoding：数据的编码方式，限制服务端进行数据的压缩</p><p>Accept-Language：中文、英文等</p><p>User-Agent：浏览器的信息</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>返回：</b>Content</p><p>Content-Type：对应Accept，从中选择一种作为真正返回的数据格式</p><p>Content-Encoding： 对应Accept-Encoding</p><p>Content-Language：根据请求返回语言</p><p>我们写一个简单的server</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f6ed829d8eda4f6cb430b4e7361c8ac0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"549\" data-original=\"https://pic1.zhimg.com/v2-f6ed829d8eda4f6cb430b4e7361c8ac0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;549&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"549\" data-original=\"https://pic1.zhimg.com/v2-f6ed829d8eda4f6cb430b4e7361c8ac0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f6ed829d8eda4f6cb430b4e7361c8ac0_b.jpg\"/></figure><p>这些我们并没有设置，是浏览器帮我们设置的。</p><p>User-Agent：Mizilla5.0 默认的头 ，很多老的web服务器都只支持这个头。兼容老的web服务器。后跟的是用户的操作系统，AppleWebkit是苹果公司开发的浏览器内核。KHTML是火狐浏览器使用的渲染引擎版本。类似于Gecko。Chrome/ 72.0 版本号。后面声明的Safari，是因为使用的是苹果公司开发的浏览器内核。</p><p>在服务端返回时，可以返回一个头：X-Content-Type-Options：nosniff，基本只会用到这一个值。在早期IE浏览器，如果传到的Content-Type它不接受或者我们没有声明对或者我们压根没有传，浏览器会预测我们返回的内容是哪个类型，会导致一些安全问题。设置了这个头，就不会让浏览器主动地去预测了。现在这个头很少用。</p><p>Content-Encoding的好处：传输内容没有变，但是实际传输的大小变小。压缩后，能够减少网络传输的开销。</p><p><b>发送请求时的Content-Type</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5151945d6028f65f592f6964d5e5af41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"984\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb\" width=\"984\" data-original=\"https://pic2.zhimg.com/v2-5151945d6028f65f592f6964d5e5af41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;984&#39; height=&#39;178&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"984\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"984\" data-original=\"https://pic2.zhimg.com/v2-5151945d6028f65f592f6964d5e5af41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5151945d6028f65f592f6964d5e5af41_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-49fb8f4791627e1b394ee05cbd194d07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb\" width=\"499\" data-original=\"https://pic4.zhimg.com/v2-49fb8f4791627e1b394ee05cbd194d07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;499&#39; height=&#39;419&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"499\" data-original=\"https://pic4.zhimg.com/v2-49fb8f4791627e1b394ee05cbd194d07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-49fb8f4791627e1b394ee05cbd194d07_b.jpg\"/></figure><p>发送的Content-Type是在结构里声明的application，Form Data是浏览器帮我们格式化过后的，服务端看到是application的格式后，只需要把body读出来，转化成我们想要的数据格式就可以了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3d98ac67fe86b9df3981b61954a25641_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"869\" data-original=\"https://pic2.zhimg.com/v2-3d98ac67fe86b9df3981b61954a25641_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;869&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"869\" data-original=\"https://pic2.zhimg.com/v2-3d98ac67fe86b9df3981b61954a25641_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3d98ac67fe86b9df3981b61954a25641_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7e9a1fcde268d7188e7b8d97de22e07d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"730\" data-original=\"https://pic2.zhimg.com/v2-7e9a1fcde268d7188e7b8d97de22e07d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;730&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"730\" data-original=\"https://pic2.zhimg.com/v2-7e9a1fcde268d7188e7b8d97de22e07d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7e9a1fcde268d7188e7b8d97de22e07d_b.jpg\"/></figure><p>在content-type处，后面有boundary，是分割表单中每一部分的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-653fe740ce28fd9b819b8ec065734e74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb\" width=\"435\" data-original=\"https://pic1.zhimg.com/v2-653fe740ce28fd9b819b8ec065734e74_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;435&#39; height=&#39;223&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"435\" data-original=\"https://pic1.zhimg.com/v2-653fe740ce28fd9b819b8ec065734e74_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-653fe740ce28fd9b819b8ec065734e74_b.jpg\"/></figure><h2>Redirect</h2><p>我们通过URL去访问一个资源的时候，我们发现这个资源可能已经不在这个地址了。服务端应该告诉客户端，你所请求的这个资源在哪个地方。然后客户端再去重新请求那个地方。这样就可以拿到所要的资源。如果之前开发服务器的时候已经指定了某一个资源在某个地方，如果要把这个资源搬到别的地方，不应该立刻把这个URL给废弃了，正常情况下应该告诉客户端应该去哪个地方找到这个资源。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-24f445380d53b172f5226776436b8108_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"444\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"444\" data-original=\"https://pic1.zhimg.com/v2-24f445380d53b172f5226776436b8108_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;444&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"444\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"444\" data-original=\"https://pic1.zhimg.com/v2-24f445380d53b172f5226776436b8108_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-24f445380d53b172f5226776436b8108_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2c2be0c16fa42f9d02a95e3ea11c865d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"599\" data-original=\"https://pic2.zhimg.com/v2-2c2be0c16fa42f9d02a95e3ea11c865d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;599&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"599\" data-original=\"https://pic2.zhimg.com/v2-2c2be0c16fa42f9d02a95e3ea11c865d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2c2be0c16fa42f9d02a95e3ea11c865d_b.jpg\"/></figure><p>假如在请求时返回200，则什么都不会有。只有302的头才代表要进行跳转。</p><p>在302的情况，仍然是要经过服务端来指定要跳转到哪里，302代表临时跳转，而不是永久跳转，如果确定要永久跳转，就用301。用302时，每次访问的时候都要经过老地址才能跳到新的地址。但是如果用301，只需要第一次经过老地址跳转到新地址，后面的都是直接访问新地址了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c628de8c8083b0e40499ee6b1dc124b3_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"114\" class=\"origin_image zh-lightbox-thumb\" width=\"695\" data-original=\"https://pic4.zhimg.com/v2-c628de8c8083b0e40499ee6b1dc124b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;695&#39; height=&#39;114&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"114\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"695\" data-original=\"https://pic4.zhimg.com/v2-c628de8c8083b0e40499ee6b1dc124b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c628de8c8083b0e40499ee6b1dc124b3_b.png\"/></figure><p>301 302都是从缓存中读取，而且是尽可能长的时间去保存。301 302的缓存要慎重去做。是用户使用浏览器的情况去定这个缓存时间。</p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57142432", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 4, 
            "title": "HTTP总结（六）：长连接", 
            "content": "<p>HTTP的请求是在TCP的连接上面发送的。TCP的连接分为长连接短连接。如果HTTP连接结束了，还需要再次发送请求，最好用长连接。长连接是可以设置timeout的。现在基本都保持长连接。</p><p>如何保证创建的连接是长连接而不是短连接？</p><p>Connection： keep-alive</p><p>有一个协商的过程，在发送请求的时候，浏览器就希望服务端是保持长连接的。服务端在返回的时候，可以选择是保持还是不保持。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-eb16f112fb4a7e887a54a2b25a71bbe6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-eb16f112fb4a7e887a54a2b25a71bbe6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;526&#39; height=&#39;347&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-eb16f112fb4a7e887a54a2b25a71bbe6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-eb16f112fb4a7e887a54a2b25a71bbe6_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-76d0e59b2c2e213c7a629ea835116480_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb\" width=\"793\" data-original=\"https://pic1.zhimg.com/v2-76d0e59b2c2e213c7a629ea835116480_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;793&#39; height=&#39;601&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"793\" data-original=\"https://pic1.zhimg.com/v2-76d0e59b2c2e213c7a629ea835116480_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-76d0e59b2c2e213c7a629ea835116480_b.jpg\"/></figure><p>虽然图片是一样的，但是因为是不同的URL，浏览器只是根据不同的URL来定位不同的资源，所以还是会加载。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6661f8cc733ec80e6450edba92bd9c71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"913\" data-original=\"https://pic2.zhimg.com/v2-6661f8cc733ec80e6450edba92bd9c71_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;913&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"913\" data-original=\"https://pic2.zhimg.com/v2-6661f8cc733ec80e6450edba92bd9c71_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6661f8cc733ec80e6450edba92bd9c71_b.jpg\"/></figure><p>要等html加载完了之后才会解析图片。</p><p>我们如果把结构中的图片多复制一些</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f85966f620dc5849443e757b69a999f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1001\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb\" width=\"1001\" data-original=\"https://pic2.zhimg.com/v2-f85966f620dc5849443e757b69a999f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1001&#39; height=&#39;665&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1001\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1001\" data-original=\"https://pic2.zhimg.com/v2-f85966f620dc5849443e757b69a999f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f85966f620dc5849443e757b69a999f5_b.jpg\"/></figure><p>更能观察出并发量。</p><p>如果把connection：keep-alive 改为close</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0199d35e72d1f5b32040621e59c20ed1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic2.zhimg.com/v2-0199d35e72d1f5b32040621e59c20ed1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;458&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"458\" data-original=\"https://pic2.zhimg.com/v2-0199d35e72d1f5b32040621e59c20ed1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0199d35e72d1f5b32040621e59c20ed1_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e414bcd8afedc949fb680c666a241860_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb\" width=\"1006\" data-original=\"https://pic1.zhimg.com/v2-e414bcd8afedc949fb680c666a241860_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1006&#39; height=&#39;644&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1006\" data-original=\"https://pic1.zhimg.com/v2-e414bcd8afedc949fb680c666a241860_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e414bcd8afedc949fb680c666a241860_b.jpg\"/></figure><p>每个connection ID都不一样，没有重复利用TCP/IP连接。每次请求完就关闭了。可以在服务端设置个keep-alive的过期时间，但是和HTTP没关系，不会在头部展示。</p><p>在HTTP2里面有个<i>信道复用</i>的概念，在TCP/IP连接上面，可以并发的发送HTTP请求。在我们连接网站的时候，只需要一个TCP连接。</p><p>比如Google的首页</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2eccb4b888732a50eacb4e8f73a9cb1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"819\" data-original=\"https://pic1.zhimg.com/v2-2eccb4b888732a50eacb4e8f73a9cb1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;819&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"819\" data-original=\"https://pic1.zhimg.com/v2-2eccb4b888732a50eacb4e8f73a9cb1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2eccb4b888732a50eacb4e8f73a9cb1c_b.jpg\"/></figure><p>基本上是只有一个connectionID。只有同域的情况下才会是一个。如果不同域，则会有多个TCP连接。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a8cc0ccb7ac11eb473f55944729addd0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"660\" class=\"origin_image zh-lightbox-thumb\" width=\"886\" data-original=\"https://pic1.zhimg.com/v2-a8cc0ccb7ac11eb473f55944729addd0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;886&#39; height=&#39;660&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"660\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"886\" data-original=\"https://pic1.zhimg.com/v2-a8cc0ccb7ac11eb473f55944729addd0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a8cc0ccb7ac11eb473f55944729addd0_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57131494", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（五）：Cookie、Session", 
            "content": "<h2>Cookie</h2><p>Cookie是在服务端返回数据的时候，<i>通过Set-Cookie这个header设置</i>到浏览器里面，保存到浏览器里面的内容。</p><p>浏览器保存了这个Cookie之后，在下次同域的请求当中，就会带上这个Cookie，可以实现用户在访问这个网站的会话当中，通过Cookie一直在传输的内容，保证我们返回的内容是这个用户的。</p><p><i>下次请求就会自动带上</i></p><p><i>键值对的形式保存，可以设置多个</i></p><p><b>Cookie属性</b></p><p>max-age 和 expires   设置过期时间</p><p>Secure   只在HTTPS的时候发送</p><p>HttpOnly   无法通过JS的document.cookie访问（安全性，防攻击）禁止一些重要的信息通过JS的当时去访问</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b79a56bead060bbbfa987afab7ca8475_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"773\" data-original=\"https://pic2.zhimg.com/v2-b79a56bead060bbbfa987afab7ca8475_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;773&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"773\" data-original=\"https://pic2.zhimg.com/v2-b79a56bead060bbbfa987afab7ca8475_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b79a56bead060bbbfa987afab7ca8475_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae9ceb5b43ff07da0b2b41c6e9d73219_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic2.zhimg.com/v2-ae9ceb5b43ff07da0b2b41c6e9d73219_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic2.zhimg.com/v2-ae9ceb5b43ff07da0b2b41c6e9d73219_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae9ceb5b43ff07da0b2b41c6e9d73219_b.jpg\"/></figure><p>启动服务</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bfd1c919c21881e95a478addb9baa89a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb\" width=\"595\" data-original=\"https://pic3.zhimg.com/v2-bfd1c919c21881e95a478addb9baa89a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;595&#39; height=&#39;207&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"595\" data-original=\"https://pic3.zhimg.com/v2-bfd1c919c21881e95a478addb9baa89a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bfd1c919c21881e95a478addb9baa89a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9eceebe14c6bf964ae84ba8b3a3c2892_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"916\" data-original=\"https://pic3.zhimg.com/v2-9eceebe14c6bf964ae84ba8b3a3c2892_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;916&#39; height=&#39;244&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"916\" data-original=\"https://pic3.zhimg.com/v2-9eceebe14c6bf964ae84ba8b3a3c2892_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9eceebe14c6bf964ae84ba8b3a3c2892_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1b5339dbbb57fb476f5e1bd03d626ecc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"634\" data-original=\"https://pic1.zhimg.com/v2-1b5339dbbb57fb476f5e1bd03d626ecc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;634&#39; height=&#39;392&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"634\" data-original=\"https://pic1.zhimg.com/v2-1b5339dbbb57fb476f5e1bd03d626ecc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1b5339dbbb57fb476f5e1bd03d626ecc_b.jpg\"/></figure><p><b>cookie是可以返回多个的</b></p><p>传数组来保存多个cookie</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae9ecab13011fd5270d52c9b6600b4cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"674\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb\" width=\"674\" data-original=\"https://pic2.zhimg.com/v2-ae9ecab13011fd5270d52c9b6600b4cd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;674&#39; height=&#39;232&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"674\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"674\" data-original=\"https://pic2.zhimg.com/v2-ae9ecab13011fd5270d52c9b6600b4cd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae9ecab13011fd5270d52c9b6600b4cd_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2c25729072c14467b139d664fed987dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-2c25729072c14467b139d664fed987dc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-2c25729072c14467b139d664fed987dc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2c25729072c14467b139d664fed987dc_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4a9aec09794e88f920f4bf57f748e12a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"827\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"827\" data-original=\"https://pic3.zhimg.com/v2-4a9aec09794e88f920f4bf57f748e12a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;827&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"827\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"827\" data-original=\"https://pic3.zhimg.com/v2-4a9aec09794e88f920f4bf57f748e12a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4a9aec09794e88f920f4bf57f748e12a_b.jpg\"/></figure><p>cookie是存在时效的，如果没有给他设置一个过期时间，那么浏览器关闭后就没有了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e0158dbf6025c101db1005431342827f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"56\" class=\"origin_image zh-lightbox-thumb\" width=\"763\" data-original=\"https://pic4.zhimg.com/v2-e0158dbf6025c101db1005431342827f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;763&#39; height=&#39;56&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"56\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"763\" data-original=\"https://pic4.zhimg.com/v2-e0158dbf6025c101db1005431342827f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e0158dbf6025c101db1005431342827f_b.png\"/></figure><p>cookie设置了过期时间以后，过了以后，就没了。expires是到了这个时间点。</p><p>设置HttpOnly属性，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-aba233423e97682d564bdc90a8cf6697_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb\" width=\"875\" data-original=\"https://pic4.zhimg.com/v2-aba233423e97682d564bdc90a8cf6697_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;875&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"875\" data-original=\"https://pic4.zhimg.com/v2-aba233423e97682d564bdc90a8cf6697_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-aba233423e97682d564bdc90a8cf6697_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0a6aa0543cb41f8e587ac989e35a94a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb\" width=\"768\" data-original=\"https://pic2.zhimg.com/v2-0a6aa0543cb41f8e587ac989e35a94a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;768&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"768\" data-original=\"https://pic2.zhimg.com/v2-0a6aa0543cb41f8e587ac989e35a94a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0a6aa0543cb41f8e587ac989e35a94a9_b.jpg\"/></figure><p>打印出来的便没有age=18。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9c2e7ee298fc50872451999de893fc12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic3.zhimg.com/v2-9c2e7ee298fc50872451999de893fc12_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic3.zhimg.com/v2-9c2e7ee298fc50872451999de893fc12_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9c2e7ee298fc50872451999de893fc12_b.jpg\"/></figure><p><b>cookie的访问权限的域的设定：domain</b></p><p>一般来说，当前域写了cookie之后，其他域是不能访问的。对于同一个域名，cookie也有限制方案，比如<a href=\"https://link.zhihu.com/?target=http%3A//a.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">a.com</span><span class=\"invisible\"></span></a>有个二级域名<a href=\"https://link.zhihu.com/?target=http%3A//a.xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">a.xxx.com</span><span class=\"invisible\"></span></a>我们有办法让这个二级域名访问到<a href=\"https://link.zhihu.com/?target=http%3A//a.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">a.com</span><span class=\"invisible\"></span></a>的cookie。就是通过domain这种方式来实现。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e21330dcb66df20b4196c5cab3f61b27_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"563\" class=\"origin_image zh-lightbox-thumb\" width=\"936\" data-original=\"https://pic4.zhimg.com/v2-e21330dcb66df20b4196c5cab3f61b27_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;936&#39; height=&#39;563&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"563\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"936\" data-original=\"https://pic4.zhimg.com/v2-e21330dcb66df20b4196c5cab3f61b27_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e21330dcb66df20b4196c5cab3f61b27_b.jpg\"/></figure><p>去Chrome里面添加个工具</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e6278ada1ddca928f5e08096d2dfa6c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic3.zhimg.com/v2-e6278ada1ddca928f5e08096d2dfa6c6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;132&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic3.zhimg.com/v2-e6278ada1ddca928f5e08096d2dfa6c6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e6278ada1ddca928f5e08096d2dfa6c6_b.jpg\"/></figure><p>然后，做个映射。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b89d563caf960c02ba846f2a7007fffd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"507\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb\" width=\"507\" data-original=\"https://pic2.zhimg.com/v2-b89d563caf960c02ba846f2a7007fffd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;507&#39; height=&#39;135&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"507\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"507\" data-original=\"https://pic2.zhimg.com/v2-b89d563caf960c02ba846f2a7007fffd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b89d563caf960c02ba846f2a7007fffd_b.jpg\"/></figure><p>这时候我们再启动服务器，浏览器输入<a href=\"https://link.zhihu.com/?target=http%3A//a.xxx.com%3A8888\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">a.xxx.com:8888</span><span class=\"invisible\"></span></a> 就会映射到127.0.0.1:8888</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-828fb7cebab94d0d2c58465150b5d8b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb\" width=\"619\" data-original=\"https://pic4.zhimg.com/v2-828fb7cebab94d0d2c58465150b5d8b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;619&#39; height=&#39;178&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"619\" data-original=\"https://pic4.zhimg.com/v2-828fb7cebab94d0d2c58465150b5d8b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-828fb7cebab94d0d2c58465150b5d8b7_b.jpg\"/></figure><p>再添加个<a href=\"https://link.zhihu.com/?target=http%3A//b.xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">b.xxx.com</span><span class=\"invisible\"></span></a>，也映射到127.0.0.1</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c8d39ca859d15fc6822f46be4c0b17da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"567\" data-original=\"https://pic3.zhimg.com/v2-c8d39ca859d15fc6822f46be4c0b17da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;567&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"567\" data-original=\"https://pic3.zhimg.com/v2-c8d39ca859d15fc6822f46be4c0b17da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c8d39ca859d15fc6822f46be4c0b17da_b.jpg\"/></figure><p>这时候访问<a href=\"https://link.zhihu.com/?target=http%3A//b.xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">b.xxx.com</span><span class=\"invisible\"></span></a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d7e2dae82a7013c915e6222667a3394a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"997\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"997\" data-original=\"https://pic3.zhimg.com/v2-d7e2dae82a7013c915e6222667a3394a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;997&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"997\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"997\" data-original=\"https://pic3.zhimg.com/v2-d7e2dae82a7013c915e6222667a3394a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d7e2dae82a7013c915e6222667a3394a_b.jpg\"/></figure><p>在<a href=\"https://link.zhihu.com/?target=http%3A//a.xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">a.xxx.com</span><span class=\"invisible\"></span></a>是有cookie的，但是在<a href=\"https://link.zhihu.com/?target=http%3A//b.xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">b.xxx.com</span><span class=\"invisible\"></span></a>中是没有cookie的。不同域名之间的cookie是不能共享的。但是他们都有<a href=\"https://link.zhihu.com/?target=http%3A//xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xxx.com</span><span class=\"invisible\"></span></a>这个二级域名，如要一级域名下所有<a href=\"https://link.zhihu.com/?target=http%3A//xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xxx.com</span><span class=\"invisible\"></span></a>这个二级域名都可以访问cookie。</p><p>在同一个主域名下，二级域名是可以共享cookie的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-82a51afc1651ad95155e73cde294cab7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1003\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"1003\" data-original=\"https://pic4.zhimg.com/v2-82a51afc1651ad95155e73cde294cab7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1003&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1003\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1003\" data-original=\"https://pic4.zhimg.com/v2-82a51afc1651ad95155e73cde294cab7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-82a51afc1651ad95155e73cde294cab7_b.jpg\"/></figure><h2>Session</h2><p>在网站开发中，最常用的就是使用cookie来保证session。</p><p>经常会做的是把用户登录后的一个id，给设置到cookie里面。根据这个id来搜索用户的信息。为了保证安全，可以把这个id转换为一个对应的key，只要能保证定位到用户，就是session的一种实现方案。</p><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57100556", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（四）：Cache-Control", 
            "content": "<h2>Cache-Control 特性： </h2><p><b>可缓存性</b>（哪些地方可以执行缓存）：</p><p> public（这个HTTP请求返回的内容所经过的任何路径当中，包括代理服务器以及发送请求的客户端浏览器，都可以进行对这个返回内容的缓存的操作）</p><p>private（只有发起请求的浏览器才可以进行缓存）</p><p>no-cache  （我们可以在本地进行缓存，在proxy服务器进行缓存。每次发送请求时都要去服务器验证一下，如果服务器返回的请求告诉我们可以使用本地的缓存，我们才可以真正的使用本地的这部分缓存）</p><p><b>到期</b></p><p>max-age=时间（s）</p><p>s-maxage=时间（s）代替max-age，只有在代理服务器端才会生效</p><p>max-stale=时间（s） 在max-age过期之后，如果返回的资源里面有max-stale的设置，即便缓存已经过期了，只要在这个时间内，还可以使用过期的缓存。这个头在发起端设置才有用。</p><p><b>重新验证（很少用）</b></p><p>must-revalidate  在设置了max-age，已经过期了，我们必须去源服务端发送请求，重新获取数据来验证这个内容是否真的过期了，而不能直接使用本地的缓存。</p><p>proxy-revalidate  用在缓存服务器中</p><p><b>其他</b></p><p>no-store  区分no-cache   （任何一个节点都不可以进行缓存，永远都要去拿新数据）</p><p>no-transform  主要用在proxy服务器那边，告诉代理服务器不要改动我们的内容。有时候返回的文件太大了，proxy服务器会做些压缩、格式的转换等</p><p>这些头只是限制性的，没有强制的约束力，可以不按照这个规范去做</p><h2>Cache-Control设置了以后的效果</h2><p><b>浏览器如何从本地读取缓存</b></p><p>页面中我们来缓存下script.js文件</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c0d63b947f0fb4cce000e0d683867dd9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb\" width=\"463\" data-original=\"https://pic2.zhimg.com/v2-c0d63b947f0fb4cce000e0d683867dd9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;463&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"463\" data-original=\"https://pic2.zhimg.com/v2-c0d63b947f0fb4cce000e0d683867dd9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c0d63b947f0fb4cce000e0d683867dd9_b.jpg\"/></figure><p>加载了html之后，就会请求script.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-627e73b143941bdb0d29ee22dbd5f8bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb\" width=\"756\" data-original=\"https://pic4.zhimg.com/v2-627e73b143941bdb0d29ee22dbd5f8bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;756&#39; height=&#39;542&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"756\" data-original=\"https://pic4.zhimg.com/v2-627e73b143941bdb0d29ee22dbd5f8bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-627e73b143941bdb0d29ee22dbd5f8bf_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-90ba36f413e81456c7d019942d7666e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb\" width=\"591\" data-original=\"https://pic4.zhimg.com/v2-90ba36f413e81456c7d019942d7666e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;591&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"591\" data-original=\"https://pic4.zhimg.com/v2-90ba36f413e81456c7d019942d7666e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-90ba36f413e81456c7d019942d7666e7_b.jpg\"/></figure><p>然后我们在script请求里面设置一下cache</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a748adef710cf2e9e7788dfdb1c0cd43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic4.zhimg.com/v2-a748adef710cf2e9e7788dfdb1c0cd43_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic4.zhimg.com/v2-a748adef710cf2e9e7788dfdb1c0cd43_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a748adef710cf2e9e7788dfdb1c0cd43_b.jpg\"/></figure><p>重启下服务器</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e54e193297633ec15968bf7a2858563f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"257\" class=\"content_image\" width=\"411\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;411&#39; height=&#39;257&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"257\" class=\"content_image lazy\" width=\"411\" data-actualsrc=\"https://pic4.zhimg.com/v2-e54e193297633ec15968bf7a2858563f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-580ae5261fbd7ebdb4629095302bee84_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb\" width=\"886\" data-original=\"https://pic1.zhimg.com/v2-580ae5261fbd7ebdb4629095302bee84_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;886&#39; height=&#39;191&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"886\" data-original=\"https://pic1.zhimg.com/v2-580ae5261fbd7ebdb4629095302bee84_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-580ae5261fbd7ebdb4629095302bee84_b.jpg\"/></figure><p>cache-control的作用：可以让请求从缓存里面去读取</p><p>如果我们把max-age设置的时间稍微长一点，再修改内容。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9127a768257fab7f8a00a9dc7363bdad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic2.zhimg.com/v2-9127a768257fab7f8a00a9dc7363bdad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;231&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic2.zhimg.com/v2-9127a768257fab7f8a00a9dc7363bdad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9127a768257fab7f8a00a9dc7363bdad_b.jpg\"/></figure><p>浏览器中刷新几次，从缓存中读取script文件，我们再修改一下内容</p><p>在300s之后，缓存过期后，才会加载新的内容，URL没有变，就还会从member cache里面去读。</p><p>Cache-Control是一个客户端缓存，如果我们设置了cache-control  就直接在客户端缓存了。根本不经过服务端的验证。在服务端更新了文件之后，客户端并不知道服务端已经更新了，还是从缓存中去读，就导致了静态资源更新后，没有及时更新到客户端。</p><p>我们希望浏览器缓存一些静态文件，又不希望服务端内容更新了以后客户端还是请求的缓存的旧的资源，我们想要更新一个应用的时候，客户端根本就触及不到，浏览器中我们一般设置为比较长的时间，常见的解决方案：</p><p>在做js，有个构建流程的时候，我们会在打包完成的js文件名上去根据内容的hash结果加上一串hash码。哈希码是根据打包的js文件以及其他静态资源的文件的内容进行的哈希计算，如果里面的内容不变，那么哈希码不变，反应到web页面上，就是URL没有变，那么我们就可以使用静态资源缓存。否则，嵌入在URL里面的路径就会有变化，发起的请求就是一个新的静态资源的请求。这样就能达到更新缓存的目的。</p><h2>资源验证</h2><p>如果我们给我们的cache-control设置了no-cache以后，每次浏览器发起设置了cache-control资源请求的时候，都会到服务器端进行资源的验证，验证完了以后，如果确定这个资源可以使用缓存，才会读取本地的缓存。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-04a01fb8b2f4147d6a22c32884d3bfa9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1565\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb\" width=\"1565\" data-original=\"https://pic2.zhimg.com/v2-04a01fb8b2f4147d6a22c32884d3bfa9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1565&#39; height=&#39;719&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1565\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1565\" data-original=\"https://pic2.zhimg.com/v2-04a01fb8b2f4147d6a22c32884d3bfa9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-04a01fb8b2f4147d6a22c32884d3bfa9_b.jpg\"/></figure><p>1、浏览器创建一个请求，请求首先到达的地方是本地缓存，如果已经找到了，就直接返回浏览器，浏览器显示页面，不需要经过任何网络的传输。</p><p>2、如果没有命中，就往互联网上发送，有可能会经过一个代理缓存的代理服务，代理服务里面也会查找相关缓存的设置。</p><p>3、如果代理服务器也没有命中，就会向源服务器请求。</p><p><b> 数据进行验证</b></p><p><b>验证头</b></p><p>last-Modified ： <i>上次修改时间  主要配合If-Modified-Since 或者 If-Unmodofied-Since使用</i>。</p><p>如果我们请求一个资源，这个资源上面返回的header里面有last-Modified 这个头，指定了一个时间，这个时间在下次浏览器发起请求的时候，就会带上last-Modified传过来的值。通过If-Modified-Since 在请求里面就会把这个值带到服务器上。服务器就可以通过If-Modified-Since带来的值，对比资源存在的地方，对比它上次修改的时间，如果发现两个时间是一样的，代表这个资源还没有被修改过。服务器就可以告诉浏览器，可以直接使用缓存的资源。</p><p><i>对比上次修改时间以验证资源是否需要更新</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Etag （更加严格的验证）：<i>数据签名</i>（我们的资源对内容会产生唯一的签名，如果资源修改，签名就会变成新的） ，最典型的就是对资源的内容进行一个哈希计算。用这个签名来标记这个资源，下次浏览器发起请求的时候就会带上<i>if-match或if-non-match</i>这个头。这个值就是服务端返回的Etag的值。</p><p><i>配合if-match或if-none-match使用</i></p><p><i>对比资源的签名判断是否使用缓存（服务器的签名和浏览器传来的签名）</i></p><p>回到代码</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2a890c9b82fbd444a7519f8048a3554c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"754\" data-original=\"https://pic1.zhimg.com/v2-2a890c9b82fbd444a7519f8048a3554c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;754&#39; height=&#39;335&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"754\" data-original=\"https://pic1.zhimg.com/v2-2a890c9b82fbd444a7519f8048a3554c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2a890c9b82fbd444a7519f8048a3554c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f797ed73fbb16bdfa9f56217aaf9c3de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"438\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb\" width=\"438\" data-original=\"https://pic3.zhimg.com/v2-f797ed73fbb16bdfa9f56217aaf9c3de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;438&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"438\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"438\" data-original=\"https://pic3.zhimg.com/v2-f797ed73fbb16bdfa9f56217aaf9c3de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f797ed73fbb16bdfa9f56217aaf9c3de_b.jpg\"/></figure><p>刷新，再次发送请求，资源没有从缓存里面去取。</p><p>再看下响应头</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-823138eefe2da65d9d1f6d7e261a50bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"429\" class=\"origin_image zh-lightbox-thumb\" width=\"686\" data-original=\"https://pic4.zhimg.com/v2-823138eefe2da65d9d1f6d7e261a50bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;686&#39; height=&#39;429&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"429\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"686\" data-original=\"https://pic4.zhimg.com/v2-823138eefe2da65d9d1f6d7e261a50bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-823138eefe2da65d9d1f6d7e261a50bf_b.jpg\"/></figure><p>在我们设置了这个头之后。浏览器下次就会把对应的缓存的头带上。</p><p>但是在response里面是有内容的</p><p>我们的内容实际上没有做任何的更改，这时候我们希望服务器不需要返回实际的内容，只需要让服务器告诉浏览器去读缓存。这时候需要在服务器做一个判断。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8ed3003035176125a5bbd98cb09ffe05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"657\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-8ed3003035176125a5bbd98cb09ffe05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;684&#39; height=&#39;657&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"657\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-8ed3003035176125a5bbd98cb09ffe05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8ed3003035176125a5bbd98cb09ffe05_b.jpg\"/></figure><p>这时候在浏览器，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3fd0c391d454787a2049c388aaae4309_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb\" width=\"850\" data-original=\"https://pic2.zhimg.com/v2-3fd0c391d454787a2049c388aaae4309_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;850&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"850\" data-original=\"https://pic2.zhimg.com/v2-3fd0c391d454787a2049c388aaae4309_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3fd0c391d454787a2049c388aaae4309_b.png\"/></figure><p>在response里面是有内容的，只是是之前的内容。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1dcb6f66cbef555cfa1f115f66277801_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"87\" class=\"content_image\" width=\"374\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;374&#39; height=&#39;87&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"87\" class=\"content_image lazy\" width=\"374\" data-actualsrc=\"https://pic2.zhimg.com/v2-1dcb6f66cbef555cfa1f115f66277801_b.jpg\"/></figure><p>在Chrome里面，有个disable cache，如果勾上，则没有任何关于缓存的头和信息。</p><p>如果我们把设置的头里面的no-cache给去掉，刷新两次页面，则直接会是200 请求成功，并且from memory cache。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-38bf94e599714f917b4ea847c4f62d52_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"58\" class=\"origin_image zh-lightbox-thumb\" width=\"912\" data-original=\"https://pic3.zhimg.com/v2-38bf94e599714f917b4ea847c4f62d52_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;912&#39; height=&#39;58&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"58\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"912\" data-original=\"https://pic3.zhimg.com/v2-38bf94e599714f917b4ea847c4f62d52_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-38bf94e599714f917b4ea847c4f62d52_b.png\"/></figure><p>如果我们把no-cache换成no-store(根本没有任何缓存)</p><p>会忽略任何和缓存有关的信息。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b5bf4c4b09f6475e34567f7a3b0ceecb_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"74\" class=\"origin_image zh-lightbox-thumb\" width=\"958\" data-original=\"https://pic4.zhimg.com/v2-b5bf4c4b09f6475e34567f7a3b0ceecb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;958&#39; height=&#39;74&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"74\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"958\" data-original=\"https://pic4.zhimg.com/v2-b5bf4c4b09f6475e34567f7a3b0ceecb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b5bf4c4b09f6475e34567f7a3b0ceecb_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0da74f52d038743e06d96bfd9d70534e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic3.zhimg.com/v2-0da74f52d038743e06d96bfd9d70534e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;658&#39; height=&#39;382&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"658\" data-original=\"https://pic3.zhimg.com/v2-0da74f52d038743e06d96bfd9d70534e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0da74f52d038743e06d96bfd9d70534e_b.jpg\"/></figure><p>直接认为是一个全新的请求。</p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57080609", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 1, 
            "title": "HTTP总结（三）：跨域、预请求", 
            "content": "<p><b>用node来实现一个简单的HTTP服务</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5f8091f2b106d9be44ef0634c4c500b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic1.zhimg.com/v2-5f8091f2b106d9be44ef0634c4c500b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic1.zhimg.com/v2-5f8091f2b106d9be44ef0634c4c500b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5f8091f2b106d9be44ef0634c4c500b4_b.jpg\"/></figure><p>在终端启动服务</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-86c467390c7550ea14361fb3f7f7f178_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"92\" class=\"content_image\" width=\"288\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;288&#39; height=&#39;92&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"92\" class=\"content_image lazy\" width=\"288\" data-actualsrc=\"https://pic1.zhimg.com/v2-86c467390c7550ea14361fb3f7f7f178_b.jpg\"/></figure><p>浏览器端</p><p><b>关于HTTP的header的一些功能</b></p><p>什么是HTTP的客户端：最简单最常用的HTTP客户端就是浏览器，浏览器不仅发送HTTP请求和返回内容，还帮我们处理了返回的内容。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6d51399d7b5ed1edccb01b6d62aaef2c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"130\" class=\"content_image\" width=\"395\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;395&#39; height=&#39;130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"130\" class=\"content_image lazy\" width=\"395\" data-actualsrc=\"https://pic1.zhimg.com/v2-6d51399d7b5ed1edccb01b6d62aaef2c_b.jpg\"/></figure><p>这个就是HTTP的首行信息，并不属于headers里面的内容，</p><p>再看response</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-223125779a5acc768039196b8ba60859_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"88\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-223125779a5acc768039196b8ba60859_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;88&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"88\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-223125779a5acc768039196b8ba60859_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-223125779a5acc768039196b8ba60859_b.png\"/></figure><p>response其实是一堆html代码。返回的这些html如何变成我们看到的页面呢？浏览器又做了一些工作。</p><p>用curl来请求</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ba7bc8e57d6537b3a932e2710aa18479_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"669\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb\" width=\"669\" data-original=\"https://pic2.zhimg.com/v2-ba7bc8e57d6537b3a932e2710aa18479_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;669&#39; height=&#39;378&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"669\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"669\" data-original=\"https://pic2.zhimg.com/v2-ba7bc8e57d6537b3a932e2710aa18479_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ba7bc8e57d6537b3a932e2710aa18479_b.jpg\"/></figure><p>返回的内容很少，浏览器会识别这些标签。</p><p>可以用curl -v 来更详细的展示请求和返回的header和general相关的一些东西。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d8ecacdcd4234bba65f1c11fb03b9735_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic2.zhimg.com/v2-d8ecacdcd4234bba65f1c11fb03b9735_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;366&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic2.zhimg.com/v2-d8ecacdcd4234bba65f1c11fb03b9735_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d8ecacdcd4234bba65f1c11fb03b9735_b.jpg\"/></figure><p>用curl不会像浏览器一样去渲染。</p><p><b>浏览器同域的限制</b></p><p>两个端口不一样的server</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b5aacbe0423a50676921a5d8dfb7db78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"881\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb\" width=\"881\" data-original=\"https://pic1.zhimg.com/v2-b5aacbe0423a50676921a5d8dfb7db78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;881&#39; height=&#39;481&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"881\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"881\" data-original=\"https://pic1.zhimg.com/v2-b5aacbe0423a50676921a5d8dfb7db78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b5aacbe0423a50676921a5d8dfb7db78_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-09c33cfe178a2bfd4fd54ade896bb82c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-09c33cfe178a2bfd4fd54ade896bb82c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;295&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-09c33cfe178a2bfd4fd54ade896bb82c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-09c33cfe178a2bfd4fd54ade896bb82c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d39e679b2d2f9976e10037f30e675e38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"947\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb\" width=\"947\" data-original=\"https://pic1.zhimg.com/v2-d39e679b2d2f9976e10037f30e675e38_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;947&#39; height=&#39;524&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"947\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"947\" data-original=\"https://pic1.zhimg.com/v2-d39e679b2d2f9976e10037f30e675e38_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d39e679b2d2f9976e10037f30e675e38_b.jpg\"/></figure><p>启动这两个服务，这时候我们是用8888端口去请求8889，浏览器中观察下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-009f08a221bda80ca6a9aa33be2c0fdb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb\" width=\"745\" data-original=\"https://pic4.zhimg.com/v2-009f08a221bda80ca6a9aa33be2c0fdb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;745&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"745\" data-original=\"https://pic4.zhimg.com/v2-009f08a221bda80ca6a9aa33be2c0fdb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-009f08a221bda80ca6a9aa33be2c0fdb_b.jpg\"/></figure><p>确实有了html的结构</p><p>但是</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-270b259c85e4a80a94f85380d96cdbfb_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1011\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"1011\" data-original=\"https://pic4.zhimg.com/v2-270b259c85e4a80a94f85380d96cdbfb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1011&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1011\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1011\" data-original=\"https://pic4.zhimg.com/v2-270b259c85e4a80a94f85380d96cdbfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-270b259c85e4a80a94f85380d96cdbfb_b.png\"/></figure><p>因为8889端口没有设置允许跨域的header，所以出现了跨域问题。</p><p>我们可以在server2.js里面设置</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e4447ac1513e14c94ab648190246882b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic4.zhimg.com/v2-e4447ac1513e14c94ab648190246882b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;658&#39; height=&#39;401&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"658\" data-original=\"https://pic4.zhimg.com/v2-e4447ac1513e14c94ab648190246882b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e4447ac1513e14c94ab648190246882b_b.jpg\"/></figure><p>重启一下服务，</p><p>再到浏览器中，就没有报错了，并且成功请求了8889</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-837f9cfc19f10594177836588275225e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"635\" class=\"origin_image zh-lightbox-thumb\" width=\"886\" data-original=\"https://pic3.zhimg.com/v2-837f9cfc19f10594177836588275225e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;886&#39; height=&#39;635&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"635\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"886\" data-original=\"https://pic3.zhimg.com/v2-837f9cfc19f10594177836588275225e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-837f9cfc19f10594177836588275225e_b.jpg\"/></figure><p>不管我们有没有返回header，浏览器都会向我们这个服务发送这个请求。浏览器在发送这个请求的时候，并不知道这个服务是不是跨域。</p><p>请求已经发送了，内容也已经返回了，只是浏览器在解析了这个返回的内容之后，它发现这个是不允许的，就帮我们拦截了，这其实是浏览器提供的一个功能。</p><p>如果在curl里面，随便怎么发送，都是没有跨域的概念的。</p><p><b>跨域的方法：jsonp</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a0c9beb23a5e8d01fd9ea14db0f56aaa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb\" width=\"885\" data-original=\"https://pic3.zhimg.com/v2-a0c9beb23a5e8d01fd9ea14db0f56aaa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;885&#39; height=&#39;540&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"885\" data-original=\"https://pic3.zhimg.com/v2-a0c9beb23a5e8d01fd9ea14db0f56aaa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a0c9beb23a5e8d01fd9ea14db0f56aaa_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7812089a6ad4167e3204ea7dbbd85a58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb\" width=\"745\" data-original=\"https://pic1.zhimg.com/v2-7812089a6ad4167e3204ea7dbbd85a58_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;745&#39; height=&#39;407&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"745\" data-original=\"https://pic1.zhimg.com/v2-7812089a6ad4167e3204ea7dbbd85a58_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7812089a6ad4167e3204ea7dbbd85a58_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1e5675d421df0d396759088de19e537a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1031\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb\" width=\"1031\" data-original=\"https://pic3.zhimg.com/v2-1e5675d421df0d396759088de19e537a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1031&#39; height=&#39;492&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1031\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1031\" data-original=\"https://pic3.zhimg.com/v2-1e5675d421df0d396759088de19e537a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1e5675d421df0d396759088de19e537a_b.jpg\"/></figure><p>这样子请求依旧是成功的，<i><b>浏览器允许向link、img、script标签，在标签上src</b></i>加载一些内容的时候，是允许跨域的。并不在乎服务器是否设置了跨域的头。</p><p>jsonp实现的原理就是在script标签里面加载了一个链接，这个链接访问了服务器的某一个请求，并且返回了内容。因为服务器返回的内容是可控的，所以我们可以在服务器的返回内容里面写script标签里面的代码，是一段可执行的js代码。然后调用jsonp在发起请求之前，给我们设置的一些内容。</p><p><b>跨域的头的设置</b></p><p>如果把Access-Control-Allow-Origin设置为*，是不安全的，因为任何人都可以访问，可以把*设置为某一个特定的域名，比如设置为<a href=\"https://link.zhihu.com/?target=http%3A//xxx.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xxx.com</span><span class=\"invisible\"></span></a>当然不会有这个域名来请求这个服务。我们可以把头设置为127.0.0.1，依然可以实现跨域。这个头只能设置一个值，不能设置为多个值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4b8664f7174e27eecd20be7a5abbe766_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"101\" class=\"origin_image zh-lightbox-thumb\" width=\"784\" data-original=\"https://pic3.zhimg.com/v2-4b8664f7174e27eecd20be7a5abbe766_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;784&#39; height=&#39;101&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"101\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"784\" data-original=\"https://pic3.zhimg.com/v2-4b8664f7174e27eecd20be7a5abbe766_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4b8664f7174e27eecd20be7a5abbe766_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6be187bdc7622b0cf608acff309a3624_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic1.zhimg.com/v2-6be187bdc7622b0cf608acff309a3624_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic1.zhimg.com/v2-6be187bdc7622b0cf608acff309a3624_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6be187bdc7622b0cf608acff309a3624_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9e0ee13136343687f549395d292648ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"936\" data-original=\"https://pic1.zhimg.com/v2-9e0ee13136343687f549395d292648ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;936&#39; height=&#39;350&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"936\" data-original=\"https://pic1.zhimg.com/v2-9e0ee13136343687f549395d292648ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9e0ee13136343687f549395d292648ec_b.jpg\"/></figure><p></p><p>html文件我们用fetch</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-812427e951b0ff12322d4d92148e5370_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"665\" data-original=\"https://pic1.zhimg.com/v2-812427e951b0ff12322d4d92148e5370_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;665&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"665\" data-original=\"https://pic1.zhimg.com/v2-812427e951b0ff12322d4d92148e5370_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-812427e951b0ff12322d4d92148e5370_b.jpg\"/></figure><p>server2.js文件不变</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-361501e781678b7732b953a3631429b7_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1007\" data-rawheight=\"68\" class=\"origin_image zh-lightbox-thumb\" width=\"1007\" data-original=\"https://pic4.zhimg.com/v2-361501e781678b7732b953a3631429b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1007&#39; height=&#39;68&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1007\" data-rawheight=\"68\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1007\" data-original=\"https://pic4.zhimg.com/v2-361501e781678b7732b953a3631429b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-361501e781678b7732b953a3631429b7_b.png\"/></figure><p>我们写的X-Test-Cors在跨域请求的时候是不被允许的。</p><p>其他限制：</p><p>在跨域的时候允许的方法：<i>GET HEAD POST</i> ，其他的方法默认不允许，预请求会验证。这三个方法不需要预请求。</p><p>允许的<i>Content-Type</i>：text/plain  multipart/form-data  application/x-www-form-urlencoded，其他的值也要通过预请求之后才能进行发送。</p><p>其他限制：<i>请求头</i>限制（比如上文的请求头），XMLHttpRequestUpload对象均没有注册任何事件监听器，请求中没有使用ReadableStream对象。</p><p><b>CORS的预请求</b></p><p>浏览器根据什么判断这个返回的内容是不是允许的呢？就是header。</p><p>如果我们要允许我们自定义的头在请求里面发送，我们需要返回一个新的头来告诉浏览器，这个操作是允许的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-58ca4f15d6d237000a0141145e112de1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-58ca4f15d6d237000a0141145e112de1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;127&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-58ca4f15d6d237000a0141145e112de1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-58ca4f15d6d237000a0141145e112de1_b.jpg\"/></figure><p>这个时候浏览器是请求成功的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-94bc6537d64360983cd06157888776c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"655\" data-original=\"https://pic3.zhimg.com/v2-94bc6537d64360983cd06157888776c6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;655&#39; height=&#39;408&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"655\" data-original=\"https://pic3.zhimg.com/v2-94bc6537d64360983cd06157888776c6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-94bc6537d64360983cd06157888776c6_b.jpg\"/></figure><p>但是比之前多出一个请求，就是预请求。method为OPTIONS.</p><p>类似的，我们也可以通过设置，来使用除了<i>GET HEAD POST</i>这三个方法以外的方法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-47eb74bb8fa5606e188f4a931c257120_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb\" width=\"726\" data-original=\"https://pic1.zhimg.com/v2-47eb74bb8fa5606e188f4a931c257120_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;726&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"726\" data-original=\"https://pic1.zhimg.com/v2-47eb74bb8fa5606e188f4a931c257120_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-47eb74bb8fa5606e188f4a931c257120_b.jpg\"/></figure><p>还可以设置一下，&#39;Access-Control-Max-Age&#39;: &#39;1000&#39;  在这个请求下面允许以这种方式实现跨域的请求的最长时间，比如，1000秒之内不需要再发送预请求来验证了，发正式请求就可以了。</p><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "程序猿啊", 
                    "userLink": "https://www.zhihu.com/people/f96563f33a8ee6bf3c2e28b80d8c0abf", 
                    "content": "请教一下，xhr请求是带不带cookie的呢？和ajax油有什么区别呢", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "乌龙茶晚来秋", 
                            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
                            "content": "<p>xhr.withCredentials ，希望能帮到你。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "程序猿啊"
                        }, 
                        {
                            "userName": "程序猿啊", 
                            "userLink": "https://www.zhihu.com/people/f96563f33a8ee6bf3c2e28b80d8c0abf", 
                            "content": "好的谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "乌龙茶晚来秋"
                        }
                    ]
                }, 
                {
                    "userName": "程序猿啊", 
                    "userLink": "https://www.zhihu.com/people/f96563f33a8ee6bf3c2e28b80d8c0abf", 
                    "content": "请教一下，xhr请求是带不带cookie的呢？和ajax油有什么区别呢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57036404", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（二）：三次握手、报文等概念", 
            "content": "<p><b>HTTP的三次握手</b></p><p><i>TCP connection的概念理解</i></p><p>在客户端和服务器之间进行HTTP发送请求和返回响应的过程中，需要创建一个TCP connection，HTTP没有连接的概念，只有请求和响应的概念。请求和响应的都是数据包，它们之间需要经过一个传输的通道，这个通道就是TCP创建的，从客户端发起到服务端接收的连接。这个连接可以一直保持在那边，HTTP请求是在这个连接的基础上去发送的。在TCP连接上面是可以发送多个HTTP请求的，在不同的版本里面，模式不一样。在HTTP1.0里面，这个连接是在一个HTTP请求创建的时候就创建TCP连接，连接创建完了，请求发送过去，服务器响应了以后，这个TCP连接就关闭了。在HTTP/1.1 里面，这个连接我们可以通过某种方式声明这个连接可以一直保持在那边。在TCP连接过程中，有三次握手的消耗。也就是有三次网络传输。把TCP连接保持在那，再次发送HTTP请求时，就没有了三次握手的开销。在HTTP2里面，TCP连接上HTTP请求是可以并发的。</p><p><i>三次握手：</i></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-52595b2a4ac5e6f2b93450ebb1c49306_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1018\" data-rawheight=\"860\" class=\"origin_image zh-lightbox-thumb\" width=\"1018\" data-original=\"https://pic3.zhimg.com/v2-52595b2a4ac5e6f2b93450ebb1c49306_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1018&#39; height=&#39;860&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1018\" data-rawheight=\"860\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1018\" data-original=\"https://pic3.zhimg.com/v2-52595b2a4ac5e6f2b93450ebb1c49306_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-52595b2a4ac5e6f2b93450ebb1c49306_b.jpg\"/></figure><p>（图片侵删，ACK：命令正确回答，Seq：sequence，序列）</p><p>1、客户端发起一个我要连接的数据包的请求，到服务端（有个标志位SYN=1（占据了第一个标志位），Seq=X，一般是1）；</p><p>2、服务端接收到数据包之后，知道有个客户端要连接我，就会开启一个端口， 然后返回给客户端（也是有个标志位SYN=1，ACK=X+1，上面那个请求里的Seq的X +1 ,Seq=Y）；</p><p>3、客户端拿到服务端的sequence，就再发送个（ACK=Y+1, Seq=Z）。</p><p>为什么要进行三次握手？</p><p>网络连接是有延迟的，服务端并不知道客户端是否收到了发送的数据包，防止服务器开启一些无用的连接，增加服务器的开销。</p><p><b>URI、URL、URN</b></p><p><i>URI： uniform resource  identifier / 统一资源标志符 </i></p><p>URI，为了定位某一个资源，用来唯一标识互联网上的信息资源</p><p>包含URL和URN</p><p><i>URL： uniform resource locator / 统一资源定位器</i></p><p>URL是定义web网站具体的某一个页面</p><p>http:// user:<a href=\"https://link.zhihu.com/?target=http%3A//pass\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pass</span><span class=\"invisible\"></span></a>@host.com/path?query=string#hash(http://我们以怎样一个方式怎样的协议去访问这个资源，user：pass现在基本不用，是对用户的一个认证。@<a href=\"https://link.zhihu.com/?target=http%3A//host.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">host.com</span><span class=\"invisible\"></span></a>是对IP的定位，：80是端口。不带端口的情况下，默认传的是80端口。/path 路由 对应这个web服务目录结构下面的路径。更多时候是来辨别这个URL所要请求的数据。在程序里面去判断，而不是对一个目录结构的映射关系。query 搜索参数 。hash 在HTTP里面是文档里面的某一个片段）</p><p><i>URN：永久统一资源定位符</i></p><p>在资源移动之后还能被找到</p><p>目前还没有非常成熟的使用方案</p><p><b>报文形式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a56117a907fe763e6ab90c6bc10e8871_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1272\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb\" width=\"1272\" data-original=\"https://pic2.zhimg.com/v2-a56117a907fe763e6ab90c6bc10e8871_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1272&#39; height=&#39;327&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1272\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1272\" data-original=\"https://pic2.zhimg.com/v2-a56117a907fe763e6ab90c6bc10e8871_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a56117a907fe763e6ab90c6bc10e8871_b.jpg\"/></figure><p>实现请求方法时，可以不遵守约定，只是从定义上告诉你应该这么去做。请求的地址是我们在服务端发起请求的时候，它需要解析并创建连接的过程。最终发送这个请求的时候，连接已经创建完成了，请求报文里面没必要把这部分给放进去，只需要告诉服务器，我们请求的资源是哪个地方就可以了。</p><p>header这块，描述了我们想要响应返回的数据类型等其他信息。</p><p><i>HTTP方法：</i>用来定义对于资源的操作</p><p><i>HTTP CODE</i>：定义服务器对请求的处理结果  各个区间的code有各自的语义 </p><p>一个好的HTTP服务可以通过code判断结果</p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57006955", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "HTTP总结（一）：HTTP的重要性及相关版本", 
            "content": "<p><b>HTTP重要性</b>：前端所有的静态资源加载和数据加载都是通过HTTP协议进行发送的，后端做出来的服务及提供出来的内容丢给前端或者移动端APP或者客户端，也是通过HTTP去发送。</p><p>如：输入URL打开网页、AJAX获取数据、img标签加载图片。</p><p>Cache-Control：</p><p>很多人知道可以设置max-age，对应的静态资源缓存多少秒，我们还可以给它设置public、private来控制它是只能在客户端进行缓存，还是可以通过代理服务器进行缓存。还可以设置must-revalidate，缓存过期后必须要到服务端验证过，才能继续使用缓存。再比如，设置no-cache、no-store，可以控制我们是否使用缓存。</p><p>缓存验证：缓存是存储在客户端的，客户端并不知道服务端是否有改变缓存的这部分数据，我们可以使用last-modified和if-modified-since来进行验证，还可以使用etag配合if-none-match来进行验证。</p><p><b>缓存是web服务中对性能提升最大的一块。</b></p><p>每一个HTTP的头都会使用价值。Content-Type、Content-Encoding等约束我们传输的数据类型，Cookie保持会话信息（最常见的筛选），CORS实现跨域并保持安全性限制。</p><p>输入URL按回车键开始，到加载完整个页面开始把它显示出来之前，整个过程中HTTP协议做了哪些事情。每个节点都代表HTTP协议为我们做的功能。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d16e2981151a0e13fbc017b486c2fb7a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1552\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb\" width=\"1552\" data-original=\"https://pic3.zhimg.com/v2-d16e2981151a0e13fbc017b486c2fb7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1552&#39; height=&#39;494&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1552\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1552\" data-original=\"https://pic3.zhimg.com/v2-d16e2981151a0e13fbc017b486c2fb7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d16e2981151a0e13fbc017b486c2fb7a_b.jpg\"/></figure><p> 浏览器API里面，有个performance，这个performance会给我们记录每一个时间点，HTTP在每个时间点都有它发挥作用的地方，它的时间过程的消耗会通过这个API进行记录，对于我们开发者来说，我们知道哪个时间点的耗时特别的长，就可以去优化它。</p><p>在最开始我们在浏览器<b>输入一个URL按下回车</b>发起一个请求的时候， 1、最开始它做一个Redirect，因为浏览器可能记录了这个URL已经永久跳转成一个新的URL，所以一开始，浏览器就要判断一下，是否需要redirect，以及redirect到哪里。2、看缓存，请求的这个资源可能已经缓存过了，如果没有缓存，就去实际的服务器那边请求资源。因为我们输入的是域名，域名要对应成IP以后，我们才能真正的访问到服务器，这个时候要先去查找域名对应的IP地址。3、通过DNS解析，有了IP之后，就要创建TCP链接，经过TCP的三次握手才能把真正的把链接创建起来。同时，如果我们这个请求是HTTPS的，则创建一个HTTPS的链接，跟TCP的三次握手不一样，中间要有一个保证安全的数据传输的过程，链接创建好之后，就要4、真正发送HTTP请求的数据包。5、服务器接收到这个数据，进行数据操作以后，返回请求想要的内容，返回数据之后，这个HTTP请求就真正的完成了。</p><h2>网络协议分层：</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-20cd0fddf9a3015672164606471a3ea2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1189\" data-rawheight=\"757\" class=\"origin_image zh-lightbox-thumb\" width=\"1189\" data-original=\"https://pic3.zhimg.com/v2-20cd0fddf9a3015672164606471a3ea2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1189&#39; height=&#39;757&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1189\" data-rawheight=\"757\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1189\" data-original=\"https://pic3.zhimg.com/v2-20cd0fddf9a3015672164606471a3ea2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-20cd0fddf9a3015672164606471a3ea2_b.jpg\"/></figure><p>HTTP协议要基于传输层一个非常重要的协议：TCP/IP协议。HTTP、FTP、email这些服务都是基于TCP/IP协议去实现的。</p><p><b>低三层</b>：</p><p><i>物理层</i>主要作用是定义物理设备如何传输数据，就是我们电脑的硬件（网卡、端口、网线、光缆）。</p><p><i>数据链路层</i>：在通信的实体间建立数据链路连接，物理是可以把两台机器连接在一起的，需要一个软件服务通过物理的设备创建一个电路的连接，也就是这两边可以传输数据（0101）。</p><p><i>网络层</i>：为数据在结点之间传输创建逻辑链路，逻辑链路包含一些（比如，我的电脑要访问知乎的服务器，如何寻找知乎服务器所在的地址，就是一个逻辑关系，就是在网络层为我们创建的)。</p><p><b>传输层：</b></p><p> TCP/IP协议和UDP协议，大多数情况下都是TCP/IP协议。</p><p>向用户提供可靠的端到端（end - to - end）服务。</p><p>传输层向高层屏蔽了下层数据通信的细节。</p><p><b>应用层：</b></p><p>为应用软件提供了很多服务</p><p>构建于TCP/IP协议</p><p>屏蔽了网络传输相关细节</p><h2>HTTP协议发展历史</h2><p><b>HTTP/0.9版本</b>    </p><p>只有一个命令GET  </p><p>没有HEADER等描述数据的信息 </p><p>服务器发送完毕，就关闭TCP连接（在同一个TCP连接里面，我们可以发送很多个HTTP请求，在0.9版本是不能这么做，在HTTP2里面，更大的优化了相关的东西，提高HTTP协议传输的效率以及服务器的性能）</p><p><b>HTTP/1.0版本</b></p><p>增加了很多命令（POST PUT DELETE等）</p><p>增加了status code 和 header（不管是发送 还是请求的一些相关的数据，它的描述以及我们对这个数据如何操作的一个方法 ） 相关的内容</p><p>多字符集支持、多部分发送、权限、缓存等</p><p><b>HTTP/1.1版本</b></p><p>在HTTP/1.0 的基础上增加了一些功能，来优化网络连接的过程</p><p>增加了：</p><p>持久连接（以前的版本，一个HTTP请求创建一个TCP连接，在服务端返回内容之后，就断开了TCP连接，成本相对较高）</p><p>pipeline 我们可以在同一个连接里面发送多个请求，在服务端要按照顺序来处理，如果前一个请求等待的时间长，而后一个处理的也比较快，后面这个请求不能先发送，要等第一个请求全部发送完成之后，才能发送。这部分时间，串行和并行的差异就体现出来。（HTTP2里面会进行优化）</p><p>增加host（有了host之后，我们就可以在同一台物理服务器同时跑多个web服务）和其他一些HTTP的头和命令</p><p><b>HTTP2</b></p><p>所有数据都是以二进制传输（之前大部分数据都是通过字符串），所以数据的分片方式是不太一样的， 在HTTP2里面，都是以帧进行传输的。</p><p>同一个连接里面发送多个请求不再需要按照顺序来，可以同时返回（HTTP的传输效率有个质的提升）</p><p>头信息压缩以及推送等提高效率的功能（有效的减少带宽使用，以前版本客户端主动方，服务端被动方，推送功能是服务端可以主动发起一些数据传输，解决了html、css、js并行而不是串行）</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56952497", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：构建Web内容的技术、Web的攻击技术", 
            "content": "<p><b>1、HTML</b></p><p><i>1.1  Web页面几乎全由HTML构建</i></p><p>HTML是为了发送Web上的超文本而开发的标记语言。</p><p>超文本是一种文档系统，可将文档中任意位置的信息与其他信息（文本或图片）建立关联，即超链接文本。</p><p>标记语言是指通过在文档的某部分穿插特别的字符串标签，用来修饰文档的语言。</p><p>由HTML构成的文档经过浏览器的解析、渲染后，呈现出来的结果就是Web页面。</p><p><i>1.2  设计应用CSS</i></p><p>CSS的理念就是让文档的结构和设计分离，达到解耦的目的。</p><p><b>2、动态HTML</b></p><p><i>2.1  让Web页面动起来的动态HTML</i></p><p>所谓动态HTML，是指使用客户端脚本语言将静态的HTML内容变成动态的技术的总称。</p><p><i>2.2  更易控制HTML的DOM</i></p><p>通过调用JS等脚本语言对DOM的操作，可以以更为简单的方式控制HTML的改变。</p><p><b>3、Web应用</b></p><p><i>3.1  通过Web提供功能的Web应用</i></p><p>原本应用HTTP协议的Web的机制就是对客户端发来的请求，返回事前准备好的内容，现在更需要引入由程序创建HTML内容的做法。</p><p>类似这种由程序创建的内容称为动态内容。而事先准备好的内容称为静态内容。Web应用则作用于动态内容上。</p><p><i>3.2  与Web服务器及程序协作的CGI</i></p><p>CGI（通用网关接口）是指Web服务器在接收到客户端发送过来的请求后转发给程序的一组机制。在CGI的作用下，程序会对请求内容作出相应的动作，比如创建HTML等动态内容。</p><p><i>3.3  因Java而普及的Servlet</i></p><p>Servlet是一种能在服务器上创建动态内容的程序。Servlet是Java语言实现的一个接口，属于面向企业级Java的一部分。</p><h2><b><i>Web的攻击技术</i></b></h2><p><i>互联网上的攻击大都将Web站点作为目标</i></p><p><b>1、针对Web的攻击技术</b></p><p>应用HTTP协议的服务器和客户端，以及运行在服务器上的Web应用等资源才是攻击目标。</p><p><i>1.1  HTTP不具备必要的安全功能</i></p><p>整体上看，HTTP就是一个通用的单纯协议机制。</p><p><i>1.2  在客户端即可篡改请求</i></p><p>在HTTP请求报文被加载攻击代码，就能发起对Web应用的攻击。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-26ff4c7cf2ebb6c864788d343834bac6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"422\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb\" width=\"422\" data-original=\"https://pic3.zhimg.com/v2-26ff4c7cf2ebb6c864788d343834bac6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;422&#39; height=&#39;266&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"422\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"422\" data-original=\"https://pic3.zhimg.com/v2-26ff4c7cf2ebb6c864788d343834bac6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-26ff4c7cf2ebb6c864788d343834bac6_b.jpg\"/></figure><p><b>1.3  针对Web应用的攻击模式</b></p><p><i>主动攻击</i></p><p>主动攻击是指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。直接针对服务器上的资源进行攻击，攻击者需要能够访问那些资源。</p><p>代表性：SQL注入、OS命令注入</p><p><i>被动攻击</i></p><p>被动攻击是指利用圈套策略执行攻击代码的攻击模式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f01797c013b885f334118692609f2a18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb\" width=\"451\" data-original=\"https://pic1.zhimg.com/v2-f01797c013b885f334118692609f2a18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;451&#39; height=&#39;366&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"451\" data-original=\"https://pic1.zhimg.com/v2-f01797c013b885f334118692609f2a18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f01797c013b885f334118692609f2a18_b.jpg\"/></figure><p>利用用户的身份攻击企业内部网络</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-598c4fa03283d58d377ee7e78127673e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"531\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic3.zhimg.com/v2-598c4fa03283d58d377ee7e78127673e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;727&#39; height=&#39;531&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"531\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"727\" data-original=\"https://pic3.zhimg.com/v2-598c4fa03283d58d377ee7e78127673e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-598c4fa03283d58d377ee7e78127673e_b.jpg\"/></figure><h2>2、因输出值转义不完全引发的安全漏洞</h2><p>实施Web应用的安全对策可大致分为两部分</p><p>客户端验证</p><p>Web应用端（服务端）的验证（输入值验证、输出值转义）</p><p>保留客户端验证只是为了尽早地辨识输入错误，起到提高UI体验的作用。</p><p>输入值验证通常是指检查是否是符合系统业务逻辑的数值或检查字符编码等预防对策。</p><p><b>2.1  跨站脚本攻击</b></p><p><b>XSS</b>是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JS进行的一种攻击。</p><p>造成的影响：骗取用户个人信息、利用cookie，帮助攻击者发送恶意请求。</p><p>在动态生成HTML处发生、XSS是攻击者利用预先设置的陷阱触发的被动攻击。</p><p>对用户Cookie的窃取攻击</p><p><b>2.2  SQL注入攻击</b></p><p>是指针对Web应用使用的数据库，通过运行非法的SQL而产生的攻击。</p><p><b>2.3  OS命令注入攻击</b></p><p>指通过Web应用，执行非法的操作系统命令达到攻击的目的。只要在能调用Shell函数的地方就有存在被攻击的风险。</p><p><b>2.4  HTTP首部注入攻击</b></p><p>攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击。属被动攻击。</p><p>（两个换行）向首部主体内添加内容的攻击称为HTTP响应截取攻击。</p><p>影响：设置任何Cookie信息、重定向至任意URL、显示任意的主体（HTTP响应截断攻击）</p><p>另外，滥用HTTP/1.1 中汇集多响应返回功能，会导致缓存服务器对任意内容进行缓存操作。这种攻击称为缓存污染。</p><p><b>2.5  邮件首部注入攻击</b></p><p><b>2.6  目录遍历攻击</b></p><p><b>2.7  远程文件包含漏洞</b></p><h2>3、因设置或设计上的缺陷引发的安全漏洞</h2><p><b>3.1  强制浏览</b></p><p><b>3.2  不正确的错误消息处理</b></p><p><b>3.3  开放重定向</b></p><h2>4、因会话管理疏忽引发的安全漏洞</h2><p><b>4.1  会话劫持</b></p><p><b>4.2  会话固定攻击</b></p><p><b>4.3  跨站点请求伪造  (CSRF)</b></p><h2>5、其他安全漏洞</h2><p><b>5.1  密码破解</b></p><p><b>5.2  点击劫持</b></p><p><b>5.3  DoS攻击</b></p><p>是一种让运行中的服务呈停止状态的攻击。</p><p><b>5.4  后门程序</b></p><p></p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56804847", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：基于HTTP的功能追加协议", 
            "content": "<h2>1、消除HTTP瓶颈的SPDY</h2><p>HTTP标准的瓶颈：</p><p>1   一条连接上只可发送一个请求；</p><p>2   请求只能从客户端开始，客户端不可以接收除响应以外的指令；</p><p>3  请求/响应首部未经压缩就发送。首部信息越多延迟越大；</p><p>4  发送冗长的首部。每次互相发送相同的首部造成的浪费较多；</p><p>5  可任意选择数据压缩格式，非 强制压缩发送。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-aedea535d984bad5d295a9e88c7095c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"510\" class=\"origin_image zh-lightbox-thumb\" width=\"697\" data-original=\"https://pic1.zhimg.com/v2-aedea535d984bad5d295a9e88c7095c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;697&#39; height=&#39;510&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"510\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"697\" data-original=\"https://pic1.zhimg.com/v2-aedea535d984bad5d295a9e88c7095c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-aedea535d984bad5d295a9e88c7095c0_b.jpg\"/></figure><p><b>Ajax的解决方法</b></p><p>ajax是一种有效利用js和DOM的操作，以达到局部web页面替换加载的异步通信手段。</p><p>Ajax核心技术：XMLHttpRequest的API，通过JS脚本语言的调用就能和服务器进行HTTP通信。实现局部更新页面。</p><p>利用Ajax实时地从服务器获取内容，有可能会导致大量请求产生。也未解决HTTP协议本身存在的问题。（每次发送相同的首部，有时不压缩数据直接发送）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5ac86f27ce167fb1b13db470a269eaf3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb\" width=\"695\" data-original=\"https://pic4.zhimg.com/v2-5ac86f27ce167fb1b13db470a269eaf3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;695&#39; height=&#39;494&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"695\" data-original=\"https://pic4.zhimg.com/v2-5ac86f27ce167fb1b13db470a269eaf3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5ac86f27ce167fb1b13db470a269eaf3_b.jpg\"/></figure><p><b>Comet的解决方法</b></p><p>一旦服务端有内容更新了，Comet不会让请求等待，而是直接给客户端返回响应。</p><p>这是一种通过延迟应答，模拟实现服务器端向客户端推送的功能。</p><p>Comet会先将响应置于挂起状态，当服务器端有内容更新时，再返回该响应。</p><p>消耗更多资源，也未解决HTTP本身存在的问题。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-139d9a3cdd1ff78cdead28b1d6389a21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic2.zhimg.com/v2-139d9a3cdd1ff78cdead28b1d6389a21_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;485&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic2.zhimg.com/v2-139d9a3cdd1ff78cdead28b1d6389a21_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-139d9a3cdd1ff78cdead28b1d6389a21_b.jpg\"/></figure><p><b>SPDY的目标</b></p><p>处于持续开发状态中的SPDY协议，正式为了在协议级别消除HTTP所遭遇的瓶颈。</p><p>1-  SPDY的设计与功能</p><p>SPDY没有完全改写HTTP协议，而是在TCP/IP的应用层与传输层之间通过新加会话层的形式运作。</p><p>同时考虑到安全性问题，SPDY规定通信中使用SSL。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e68b1c086cfb1131c3f0bc31fa4b43a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-e68b1c086cfb1131c3f0bc31fa4b43a5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;349&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-e68b1c086cfb1131c3f0bc31fa4b43a5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e68b1c086cfb1131c3f0bc31fa4b43a5_b.jpg\"/></figure><p>使用SPDY后，HTTP协议额外获得以下功能</p><p>多路复用流、赋予请求优先级、压缩HTTP首部、推送功能、服务器提示功能</p><p>2-  SPDY消除Web瓶颈了吗</p><p>因为SPDY基本上只是将单个域名的通信多路复用，所以当一个Web网站上使用多个域名下的资源，改善效果就会受到限制。</p><p>SPDY的确是一种可有效消除HTTP瓶颈的技术。对web本身的速度提升还可以从改善web内容的编写方式入手。</p><h2>2、使用浏览器进行全双工通信的WebSocket</h2><p>利用Ajax和Comet技术进行通信可以提升Web的浏览速度。</p><p>但若使用HTTP协议，就无法彻底解决瓶颈问题，WebSocket网络技术正是为解决这些问题而实现的一套新协议及API。</p><p><b>2.1 WebSocket的设计与功能</b></p><p>WebSocket，即Web浏览器与Web服务器之间全双工通信标准。</p><p>仍在开发中的WebSocket技术主要是为了解决Ajax和Comet里XMLHttpReqeust附带的缺陷所引起的问题。</p><p><b>2.2  WebSocket协议</b></p><p>一旦建立WebSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。</p><p>可互相发送任意格式的数据。</p><p>特点：推送功能、减少通信量</p><p>为了实现WebSocket通信，在HTTP连接建立之后，需要完成一次握手的步骤。</p><p><i>握手·请求 </i></p><p><i>握手·响应</i></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a621b81772978cbd5f294af3aec87260_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"471\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic1.zhimg.com/v2-a621b81772978cbd5f294af3aec87260_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;610&#39; height=&#39;471&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"471\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"610\" data-original=\"https://pic1.zhimg.com/v2-a621b81772978cbd5f294af3aec87260_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a621b81772978cbd5f294af3aec87260_b.jpg\"/></figure><p>成功握手确立WebSocket连接之后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。</p><p><i>WebSocket API</i></p><p>JS可调用 the WebSocket API内提供的WebSocket程序接口，以实现WebSocket协议下全双工通信，</p><h2>3、期盼已久的HTTP/2.0</h2><p>HTTP/2.0 的特点</p><p>目标：改善用户在使用Web时的速度体验。实现方法：</p><p>SPDY</p><p>HTTP Speed+Mobility （微软起草，用于改善并提高移动端通信时的通信速度和性能的标准，它建立在Google提出的SPDY与WebSocket的基础之上）</p><p>NetWork-Friendly HTTP Upgrade （主要在移动端通信时改善HTTP性能的标准）</p><p>HTTP/2.0的7项技术及讨论</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6ec7e8bee81e6401d1319a19124e20b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic1.zhimg.com/v2-6ec7e8bee81e6401d1319a19124e20b8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;673&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"673\" data-original=\"https://pic1.zhimg.com/v2-6ec7e8bee81e6401d1319a19124e20b8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6ec7e8bee81e6401d1319a19124e20b8_b.jpg\"/></figure><h2>4、Web服务器管理文件的WebDAV</h2><p>WebDAV（ 基于万维网的分布式创作和版本控制）是一个可对Web服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统。</p><p><b>4.1  扩展HTTP/1.1 的WebDAV</b></p><p>针对服务器上的资源，WebDAV新增加了一些概念。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e42118674d0a038de5c4cb4e83616341_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb\" width=\"707\" data-original=\"https://pic2.zhimg.com/v2-e42118674d0a038de5c4cb4e83616341_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;707&#39; height=&#39;325&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"707\" data-original=\"https://pic2.zhimg.com/v2-e42118674d0a038de5c4cb4e83616341_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e42118674d0a038de5c4cb4e83616341_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3a6e993ec14b7a6dabcbc8bcdcf3678a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"682\" data-original=\"https://pic3.zhimg.com/v2-3a6e993ec14b7a6dabcbc8bcdcf3678a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;682&#39; height=&#39;264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"682\" data-original=\"https://pic3.zhimg.com/v2-3a6e993ec14b7a6dabcbc8bcdcf3678a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3a6e993ec14b7a6dabcbc8bcdcf3678a_b.jpg\"/></figure><p>4.2  WebDAV内新增的方法及状态码</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1a2e53aa4114e0e64ca0c8843b51a7d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"690\" class=\"origin_image zh-lightbox-thumb\" width=\"678\" data-original=\"https://pic4.zhimg.com/v2-1a2e53aa4114e0e64ca0c8843b51a7d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;678&#39; height=&#39;690&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"690\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"678\" data-original=\"https://pic4.zhimg.com/v2-1a2e53aa4114e0e64ca0c8843b51a7d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1a2e53aa4114e0e64ca0c8843b51a7d7_b.jpg\"/></figure><p>WebDAV的请求实例</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-82387bf03ad143f2e6a6baaed0c82c9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"616\" data-original=\"https://pic3.zhimg.com/v2-82387bf03ad143f2e6a6baaed0c82c9a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;616&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"616\" data-original=\"https://pic3.zhimg.com/v2-82387bf03ad143f2e6a6baaed0c82c9a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-82387bf03ad143f2e6a6baaed0c82c9a_b.jpg\"/></figure><p>WebDAV的响应实例</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4bda5e4cc413e84a92cf714c492e2ec7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb\" width=\"621\" data-original=\"https://pic4.zhimg.com/v2-4bda5e4cc413e84a92cf714c492e2ec7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;621&#39; height=&#39;321&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"621\" data-original=\"https://pic4.zhimg.com/v2-4bda5e4cc413e84a92cf714c492e2ec7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4bda5e4cc413e84a92cf714c492e2ec7_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56794855", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：确认访问用户身份的认证", 
            "content": "<p><b>HTTP 使用的认证方式：</b></p><p>BASIC认证（基本认证）</p><p>DIGEST认证（摘要认证）</p><p>SSL客户端认证</p><p>FormBase（基于表单认证）</p><h2>1、BASIC认证</h2><p>是web服务器与通信客户端之间进行的认证方式</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-85045c8116c8ffeffc55491c6e855bf7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"651\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb\" width=\"651\" data-original=\"https://pic4.zhimg.com/v2-85045c8116c8ffeffc55491c6e855bf7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;651&#39; height=&#39;416&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"651\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"651\" data-original=\"https://pic4.zhimg.com/v2-85045c8116c8ffeffc55491c6e855bf7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-85045c8116c8ffeffc55491c6e855bf7_b.jpg\"/></figure><p>BASIC认证虽然采用base64编码方式，但这不是加密处理，不需要任何附加信息即可对其解码。使用上不够便捷灵活，且达不到多数web网站期望的安全性等级。因此<b>并不常用</b>。</p><h2>2、DIGEST认证</h2><p>从HTTP/1.1起，有了DIGEST认证。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-67ab703dc3162b85c5f20030ab2d80e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb\" width=\"690\" data-original=\"https://pic3.zhimg.com/v2-67ab703dc3162b85c5f20030ab2d80e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;690&#39; height=&#39;548&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"690\" data-original=\"https://pic3.zhimg.com/v2-67ab703dc3162b85c5f20030ab2d80e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-67ab703dc3162b85c5f20030ab2d80e2_b.jpg\"/></figure><p>DIGEST认证提供了高于BASIC认证的安全等级，但是和HTTPS的客户端认证相比仍旧很弱。DIGEST认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。</p><p>使用上也不便捷灵活，达不到安全等级的追求标准，适用<b>范围有限</b>。</p><h2>3、SSL客户端认证</h2><p>SSL客户端认证是借由HTTPS的客户端证书完成认证的方式，凭借客户端证书认证，服务器可确认访问是否来自己登录的客户端。</p><p>3.1  SSL客户端认证的认证步骤</p><p>先将客户端证书分发给客户端，且客户端必须安装此证书。</p><p>1 -  服务器 --&gt;发送Certificate Request报文，要求客户端提供客户端证书</p><p>2-  用户选择证书   客户端--&gt;把客户端证书信息以Client Certificate报文方式发送给服务器</p><p>3-  服务器验证，然后开始HTTPS通信</p><p>3.2  SSL客户端认证采用双因素认证</p><p>一般不会仅依靠证书，一般会基于表单认证组合形成一种双因素认证来使用。</p><p>3.3  SSL客户端认证必要的费用</p><h2>4、FormBase</h2><p>基于表单的认证方法并不是在HTTP协议中定义的。</p><p>客户端会向服务器上的web应用程序发送登录信息，按登录信息的验证结果认证。</p><p>4.1  认证多半为基于表单认证</p><p>4.2  Session管理及Cookie应用</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f2ea6c18e8a3afaddb7eac5fbacc9394_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"698\" data-original=\"https://pic1.zhimg.com/v2-f2ea6c18e8a3afaddb7eac5fbacc9394_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;698&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"698\" data-original=\"https://pic1.zhimg.com/v2-f2ea6c18e8a3afaddb7eac5fbacc9394_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f2ea6c18e8a3afaddb7eac5fbacc9394_b.jpg\"/></figure><p>不仅基于表单认证的登录信息及认证过程都无标准化的方法，服务器端应如何保存用户提交的密码等登录信息等也没有标准化。</p><p>一种安全的保存方法：先利用给密码加盐的方式增加额外信息，再使用散列函数计算出散列值后保存。</p><p>加盐：由服务器随机生成一个字符串，足够长，真正随机。然后把它和密码字符串 相连接，生成散列值。</p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56782377", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：确保Web安全的HTTPS", 
            "content": "<h2>1、HTTP的缺点</h2><p><b>HTTP的不足：</b></p><p>通信使用明文，内容可能会被窃听；</p><p>不验证通信方的身份，因此有可能遭遇伪装；</p><p>无法证明报文的完整性，所以有可能已遭篡改。</p><p>其他未加密的协议中也会存在这类问题。</p><p>以及一些安全漏洞。</p><p><b>1.1  通信使用明文可能会被窃听</b></p><p><b>1-&gt; TCP/IP  是可能被窃听的网络</b></p><p>按TCP/IP 协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。</p><p>互联网上的任何角落都存在通信内容被窃听的风险</p><p><b>2-&gt; 加密处理防止被窃听</b></p><p><b>通信的加密：</b>HTTP协议中没有加密机制，但可以通过和<b>SSL（Secure Socket Layer</b>，安全套接层）或<b>TLS（Transport Layer Security，安全传输层协议</b>）的组合使用，加密HTTP的通信内容。</p><p><b>内容的加密</b>：要求客户端和服务器同时具备加密和解密机制。内容仍然有被篡改的风险。</p><p><b>1.2  不验证通信方的身份就可能遭遇伪装</b></p><p><b>1-&gt; 任何人都可发起请求</b></p><p>有可能是已伪装的Web服务器；有可能是已伪装的客户端；对方是否具备访问权限，有些内容只发给特定用户；无法判断请求时来自何方、出自谁手；即使是无意义的请求也会照单全收，无法阻止海量请求下的DoS攻击。（Denial of Service 拒绝服务攻击）</p><p><b>2-&gt;查明对手的证书</b></p><p>使用SSL可以确定通信方，SSL不仅提供加密处理，还是用证书确认通信方。</p><p>证书由值得信任的第三方机构颁发，用以证明服务器和客户端是实际存在的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3eb5a1694f066000671d7d7d46354763_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-3eb5a1694f066000671d7d7d46354763_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-3eb5a1694f066000671d7d7d46354763_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3eb5a1694f066000671d7d7d46354763_b.jpg\"/></figure><p><b>1.3  无法证明报文完整性，可能已遭篡改</b></p><p><b>1-&gt;接收到的内容可能有误</b></p><p>HTTP协议无法证明通信的报文完整性。</p><p>在请求或响应的传输途中，遭攻击者拦截并篡改内容的攻击称为中间人攻击。</p><p>（MITM：Man-in-the-Middle attack）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6dfeff237913129def643c5fb23f48eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic4.zhimg.com/v2-6dfeff237913129def643c5fb23f48eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;586&#39; height=&#39;353&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"586\" data-original=\"https://pic4.zhimg.com/v2-6dfeff237913129def643c5fb23f48eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6dfeff237913129def643c5fb23f48eb_b.jpg\"/></figure><p><b>2-&gt;如何防止篡改</b></p><p>常用MD5和SHA-1等散列值校验的方法，以及用来确认文件的数字签名方法。</p><p>提供文件下载服务的Web网站也会提供相应的以PGP创建的数字签名及MD5算法生成的散列值</p><p>但也没办法保证百分百正确，因为PGP和MD5本身被改写的话，用户是没办法意识到的。</p><p>为了有效防止这些弊端，有必要使用HTTPS。</p><p>SSL提供认证和加密处理及摘要功能。</p><h2>2、HTTP+加密+完整性保护=HTTPS</h2><p><b>2.1  HTTP加上加密处理和认证以及完整性保护后即是HTTPS</b></p><p>我们把添加了加密及认证机制的HTTP称为HTTPS（HTTP Secure）</p><p>Web的登录页和购物车结算页面经常使用。</p><p><b>2.2  HTTPS是身披SSL外壳的HTTP</b></p><p>HTTPS并非是应用层的一种新协议，<b>只是HTTP通信接口部分用SSL和TLS协议代替而已</b>。</p><p>通常： HTTP 直接和 TCP 通信</p><p>使用SSL：HTTP先和SSL通信，再由SSL和TCP通信。</p><p>其他运行在应用层的SMTP和Telnet等协议均可配合SSL协议使用。</p><p>SSL是当今世界上应用最广泛的网络安全技术。</p><p><b>2.3  相互交换密钥的公开密钥加密技术</b></p><p>SSL采用一种叫做公开密钥加密的加密处理方式。</p><p>1-&gt; 共享密钥加密的困境 </p><p>加密和解密同用一个密钥的方式称为共享密钥加密，也叫对称密钥加密。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-60a128ee1641652f9b44a3d88c28634f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic4.zhimg.com/v2-60a128ee1641652f9b44a3d88c28634f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;398&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic4.zhimg.com/v2-60a128ee1641652f9b44a3d88c28634f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-60a128ee1641652f9b44a3d88c28634f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a64a2b1681e34f36be32f44197640c3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-a64a2b1681e34f36be32f44197640c3a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-a64a2b1681e34f36be32f44197640c3a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a64a2b1681e34f36be32f44197640c3a_b.jpg\"/></figure><p>2-&gt; 使用两把密钥的公开密钥加密</p><p>公开密钥加密使用一对非对称的密钥。一把叫私有密钥，另一把叫公开密钥。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5595b2185b958356f3dd9126db4a38e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"503\" class=\"origin_image zh-lightbox-thumb\" width=\"635\" data-original=\"https://pic2.zhimg.com/v2-5595b2185b958356f3dd9126db4a38e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;635&#39; height=&#39;503&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"503\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"635\" data-original=\"https://pic2.zhimg.com/v2-5595b2185b958356f3dd9126db4a38e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5595b2185b958356f3dd9126db4a38e1_b.jpg\"/></figure><p>3-&gt; HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5e8ca46b651f3bd276145b76f947247c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"544\" data-rawheight=\"465\" class=\"origin_image zh-lightbox-thumb\" width=\"544\" data-original=\"https://pic1.zhimg.com/v2-5e8ca46b651f3bd276145b76f947247c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;544&#39; height=&#39;465&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"544\" data-rawheight=\"465\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"544\" data-original=\"https://pic1.zhimg.com/v2-5e8ca46b651f3bd276145b76f947247c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5e8ca46b651f3bd276145b76f947247c_b.jpg\"/></figure><p><b>2.4  证明公开密钥正确性的证书</b></p><p>由数字证书认证机构和其相关机关颁发的公开密钥证书。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f301cd99cfef24cd5c3b421269cb82e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic1.zhimg.com/v2-f301cd99cfef24cd5c3b421269cb82e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;999&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https://pic1.zhimg.com/v2-f301cd99cfef24cd5c3b421269cb82e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f301cd99cfef24cd5c3b421269cb82e8_b.jpg\"/></figure><p>1-  可证明组织真实性的EV SSL证书</p><p>用来证明作为通信一方的服务器是否规范，还可确认对方服务器背后运营的企业是否真实存在</p><p>持有EV SSL证书的Web网站的浏览器地址处的背景色是绿色。</p><p>2-  用以确认客户端的客户端证书</p><p><b>2.5  HTTPS的安全通信机制</b></p><p><b>HTTPS通信步骤</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6332f3dfa26498e0094950f445aeae69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"833\" class=\"origin_image zh-lightbox-thumb\" width=\"712\" data-original=\"https://pic2.zhimg.com/v2-6332f3dfa26498e0094950f445aeae69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;712&#39; height=&#39;833&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"833\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"712\" data-original=\"https://pic2.zhimg.com/v2-6332f3dfa26498e0094950f445aeae69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6332f3dfa26498e0094950f445aeae69_b.jpg\"/></figure><p>应用层发送数据时，会附加一种叫做MAC（Message Authentication Code）的报文摘要。MAC能够查知报文是否遭到篡改，从而保护报文的完整性。</p><p>从仅使用服务器端的公开密钥证书（服务器证书）<b>建立HTTPS通信的整个过程</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e4ca1599bc6240c36d4e2f4c88b8b842_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic3.zhimg.com/v2-e4ca1599bc6240c36d4e2f4c88b8b842_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;673&#39; height=&#39;460&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"673\" data-original=\"https://pic3.zhimg.com/v2-e4ca1599bc6240c36d4e2f4c88b8b842_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e4ca1599bc6240c36d4e2f4c88b8b842_b.jpg\"/></figure><p>1-  SSL和TLS </p><p>SSL-网景率先，3.0之前版本，现在主导权-&gt; IETF internet工程任务组。</p><p>IETF以SSL3.0为基准，制定TLS1.0 1.1 1.2 是以SSL为原型开发的协议。有时统称为SSL。</p><p>当前主流版本 SSL3.0 TLS1.0</p><p>2- SSL速度慢吗</p><p>HTTPS，当使用SSL时，处理速度会变慢。</p><p>分两种：通信慢、处理速度变慢。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0da080135f8f0f6c9f27c444a0e2d0f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic1.zhimg.com/v2-0da080135f8f0f6c9f27c444a0e2d0f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;684&#39; height=&#39;366&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"684\" data-original=\"https://pic1.zhimg.com/v2-0da080135f8f0f6c9f27c444a0e2d0f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0da080135f8f0f6c9f27c444a0e2d0f4_b.jpg\"/></figure><p>针对速度变慢，并没有根本性的解决方案，我们会使用SSL加速器这种硬件来改善该问题。</p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56696044", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：HTTP首部", 
            "content": "<h2>1、HTTP报文首部</h2><p>首部内容为客户端和服务器分别处理请求和响应提供所需要的信息</p><p>HTTP请求报文</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-357ae625cf88d2235f0aab40338a3274_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic1.zhimg.com/v2-357ae625cf88d2235f0aab40338a3274_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;680&#39; height=&#39;194&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"680\" data-original=\"https://pic1.zhimg.com/v2-357ae625cf88d2235f0aab40338a3274_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-357ae625cf88d2235f0aab40338a3274_b.jpg\"/></figure><p>HTTP响应报文</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ce51e1779bb8f331d3f34d05ecbd29e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"426\" data-original=\"https://pic2.zhimg.com/v2-ce51e1779bb8f331d3f34d05ecbd29e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;426&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"426\" data-original=\"https://pic2.zhimg.com/v2-ce51e1779bb8f331d3f34d05ecbd29e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ce51e1779bb8f331d3f34d05ecbd29e1_b.jpg\"/></figure><p>在报文众多的字段当中，HTTP首部字段包含的信息最为丰富。</p><p>首部字段同时存在于请求和响应报文内，并涵盖HTTP报文相关的内容信息。</p><h2>2、HTTP首部字段</h2><p><b>2.1 HTTP首部字段传递重要信息</b></p><p>使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。</p><p><b>2.2 HTTP首部字段结构</b></p><p>字段名 + ： + 字段值（可以有多个）  如 报文主体的对象类型：Content-Type：text/html</p><p><b>2.3 4种HTTP首部字段类型</b></p><p>通用首部字段（请求报文和响应报文读会使用的首部）</p><p>请求首部字段（请求报文 补充请求的附加内容、客户端信息、相应内容相关优先级等信息）</p><p>响应首部字段（响应报文 补充响应的附加内容，也会要求客户端附加额外的内容信息 ）</p><p>实体首部字段 （响应和请求报文的实体部分使用的首部 补充了资源内容更新的时间等与实体有关的信息）</p><p><b>2.4 HTTP/1.1 首部字段一览</b></p><p>HTTP/1.1 47种首部字段 这是通用首部字段</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a1425bfb043434577f721348be5a16b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb\" width=\"441\" data-original=\"https://pic4.zhimg.com/v2-a1425bfb043434577f721348be5a16b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;441&#39; height=&#39;305&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"441\" data-original=\"https://pic4.zhimg.com/v2-a1425bfb043434577f721348be5a16b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a1425bfb043434577f721348be5a16b3_b.jpg\"/></figure><p><b>2.5 非HTTP/1.1 首部字段</b></p><p>Cookie Set-Cookie Content-Disposition等</p><h2>3、HTTP/1.1 通用首部字段</h2><p><b>3.1 Cache-Control</b></p><p>操作缓存的工作机制。</p><p>表示能否缓存的指令：public、private、no-cache</p><p>控制可执行缓存的对象的指令：no-store</p><p>指定缓存期限和认证的指令：</p><p>s-maxage（用于供多位用户使用的公共缓存服务器、max-age、min-fresh（要求缓存服务器返回至少还未过指定时间的缓存资源）、max-stale（缓存即使过期也照常接收）、only-if-cached（仅在缓存服务器本地缓存目标资源的情况下才会要求其返回）、must-revalidate（代理会向源服务器再次获取有效资源的话，缓存必须给客户端一条504状态码）、proxy-revalidate（必须再次验证缓存的有效性）、no-transform（缓存不能改变实体主体的媒体类型）</p><p><b>3.2 Connection</b></p><p>两个作用：控制不再转发给代理的首部字段（Connection：首部字段名）、管理持久连接（close、Keep-Alive）HTTP/1.1 默认为持久连接</p><p><b>3.3 Date（</b>创建HTTP报文的日期和时间<b>）</b></p><p><b>3.4 Pragma </b></p><p>（历史遗留字段，向后兼容而定义，形式唯一 pragma：no-cache，只用在发送请求中）</p><p><b>3.5 Trailer</b></p><p>会事先说明在报文主体后记录了哪些首部字段，应用在分块传输编码时（值：Expires）</p><p><b>3.6 Transfer-encoding</b></p><p>传输报文主体时采用的编码方式，传输编码方式仅对分块传输编码有效（值：chunked）</p><p><b>3.7 Upgrade</b></p><p>用于检测HTTP协议及其他协议是否可使用更高的版本进行通信（值：其他通信协议）</p><p>使用它时，还需要Connection的值被指定为Upgrade</p><p><b>3.8 Via</b></p><p>追踪客户端与服务器之间的请求和响应报文的传输路径。经过代理时，会在Via中附加该服务器的信息。还可以避免请求回环的发生。经常和TRACE方法一起使用。</p><p><b>3.9 Warning</b></p><p>告知用户一些与缓存想相关的问题的警告</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4a8567de27bcb73db6a7ece68da9e3e6_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"669\" data-rawheight=\"39\" class=\"origin_image zh-lightbox-thumb\" width=\"669\" data-original=\"https://pic3.zhimg.com/v2-4a8567de27bcb73db6a7ece68da9e3e6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;669&#39; height=&#39;39&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"669\" data-rawheight=\"39\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"669\" data-original=\"https://pic3.zhimg.com/v2-4a8567de27bcb73db6a7ece68da9e3e6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4a8567de27bcb73db6a7ece68da9e3e6_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e63a523cdf1b66ba313fd1ff312bea7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb\" width=\"666\" data-original=\"https://pic2.zhimg.com/v2-e63a523cdf1b66ba313fd1ff312bea7d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;666&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"666\" data-original=\"https://pic2.zhimg.com/v2-e63a523cdf1b66ba313fd1ff312bea7d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e63a523cdf1b66ba313fd1ff312bea7d_b.jpg\"/></figure><h2>4、请求首部字段</h2><p><b>4.1 Accept</b></p><p>用户代理能够处理的媒体类型及媒体类型的相对优先级，可一次性指定多个（媒体类型：文本、图片、视频、应用程序使用的二进制）</p><p>Accept: text/html, application/xhtml+xml, application/xml; q=0.9,*<b>/*</b>;q=0.8</p><p>给显示的媒体类型增加优先级，使用q=来额外表示权重值，服务器提供多种内容时，优先返回权重值最高的媒体类型。</p><p><b>4.2 Accept-Charset</b></p><p>通知服务器用户代理支持的字符集及字符集的相对优先顺序，可一次性指定多个。</p><p><b>4.3 Accept-Encoding</b></p><p>告知服务器，用户大力支持的内容编码及内容编码的优先级顺序。可一次性指定多种。</p><p>gzip、compress、deflate、identify</p><p><b>4.4 Accept-Language</b></p><p>告知服务器用户代理能够处理的自然语言集，及优先级，可一次指定多个</p><p><b>4.5 Authorization</b></p><p>告知服务器用户代理的认证信息。</p><p><b>4.6 Expect</b></p><p>期望出现的某种特定行为</p><p><b>4.7 From</b></p><p>告知服务器使用用户代理的用户的电子邮件地址</p><p><b>4.8 Host</b></p><p>虚拟主机运行在同一个IP上，因此使用Host加以区分。</p><p><b>其他</b>：if-Match、 if-Modified-Since、 if-None-Match、 if-Range、 if-Unmodified-Since、 Max-Forwards、 Proxy-Authorization、 Range、 Referer、 TE、 User-Agent</p><h2>5、响应首部字段</h2><p><b>5.1 Accept-Range</b></p><p>告知客户端服务器是否能处理范围请求，字段值为bytes或none</p><p><b>5.2 Age</b></p><p>告知客户端，源服务器在多久前创建了响应。字段值单位为秒。</p><p>若是缓存服务器，则是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段Age。</p><p><b>5.3 Etag</b></p><p>告知客户端实体标识。是一种可将资源以字符串形式做唯一标识的方式。服务器会为每份资源分配对应的ETag值。</p><p>强ETag值，不论实体发生多么细微的变化都会改变其值。弱ETag值只用于提示资源是否相同</p><p><b>5.4 Location</b></p><p>将响应接收方式引导至某个与请求URI位置不同的资源。配合3XX：Redirection的响应，提供重定向的URI。</p><p><b>5.5 Proxy-Authenticate</b></p><p>会把由代理服务器所要求的认证信息发送给客户端</p><p><b>5.6 Retry-After</b></p><p>告知客户端应该在多久以后再次发送请求，配合状态码503或3XX：Redirection一起使用。</p><p><b>5.7 Server</b></p><p>当前服务器上安装的HTTP服务器应用程序的信息。</p><p><b>5.8 Vary</b></p><p>只能对相同自然语言（Accept-Language）的请求返回缓存</p><p><b>5.9 WWW-Authenticate</b></p><p>用于HTTP访问认证。它会告知客户端适用于访问请求URI所指定资源的认证方案（Basic或Digest）和带有参数提示的质询（challenge）。状态码401中肯定有这个字段。</p><h2>6、实体首部字段</h2><p>用于补充内容的更新时间等与实体相关的信息。</p><p>在请求和响应两方的HTTP报文中都含有与实体相关的首部字段。</p><p><b>6.1 Allow</b></p><p>用于通知客户端能够支持Request-URI指定资源的所有HTTP方法。收到不支持的HTTP方法时，会以状态码405作为响应返回。</p><p><b>6.2 Content-Encoding</b></p><p>告知客户端服务器对实体的主体部分选用的内容编码方式</p><p>（gzip、compress、delfate、identify）</p><p><b>6.3 Content-Language</b></p><p>告知客户端实体主体使用的自然语言</p><p><b>6.4 Content-Length</b></p><p>实体主体部分的大小（单位字节）</p><p><b>6.5 Content-Location</b></p><p>给出与报文主体部分相对应的URI。和首部字段location不同，Content-Location表示的是报文主体返回资源对应的URI。</p><p><b>6.6 Content-MD5</b></p><p>客户端会对接收的报文主体执行相同的MD5算法，然后与首部字段Content-MD5的字段值比较。</p><p>对报文主体执行的MD5短发获得的128位二进制数，再通过Base64编码后将结果写入Content-MD5字段值。</p><p>由于HTTP首部无法记录二进制值，所以要通过Base64编码处理。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bf9b57d5e99ac7b41287e9b46848d518_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic1.zhimg.com/v2-bf9b57d5e99ac7b41287e9b46848d518_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic1.zhimg.com/v2-bf9b57d5e99ac7b41287e9b46848d518_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bf9b57d5e99ac7b41287e9b46848d518_b.jpg\"/></figure><p><b>6.7 Content-Range</b></p><p>告知客户端作为响应返回的实体的哪个部分符合范围要求，字段值以字节为单位。表示当前发送部分及整个实体大小。</p><p><b>6.8 Content-Type</b></p><p>实体主体内对象的媒体类型。</p><p><b>6.9 Expires</b></p><p>告知客户端资源失效的日期</p><p><b>6.10 Last-Modified</b></p><p>资源最终修改的时间</p><h2>7、为Cookie服务的首部字段</h2><p>Cookie的工作机制是用户识别及状态管理。</p><p><b>7.1 Set-Cookie</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-29e939f4687e8ce3dba5a96b6519f22f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb\" width=\"678\" data-original=\"https://pic4.zhimg.com/v2-29e939f4687e8ce3dba5a96b6519f22f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;678&#39; height=&#39;257&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"678\" data-original=\"https://pic4.zhimg.com/v2-29e939f4687e8ce3dba5a96b6519f22f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-29e939f4687e8ce3dba5a96b6519f22f_b.jpg\"/></figure><p><b>7.2 Cookie</b></p><p>Cookie：status=enable</p><p>当客户端想获得HTTP状态管理支持时，就会在请求中包含从服务器接收到的Cookie。</p><h2>8、其他首部字段</h2><p>HTTP首部字段是可以自行扩展的。</p><p><b>8.1 X-Frame-Options</b></p><p>属于HTTP响应首部，用于控制网站内容在其他Web网站的Frame标签内的显示问题。</p><p>DENY: 拒绝，SAMEORIGIN:仅同源域名下的页面匹配时许可</p><p><b>8.2 X-XSS-Protection</b></p><p>属于HTTP响应首部，针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器XSS防护机制的开关。0：无效，1：有效。</p><p><b>8.3 DNT</b></p><p>属于请求首部，Do Not Track的简称，拒绝个人信息被收集。是表示拒绝被精准广告追踪的一种方法。0：同意被追踪，1：拒绝被追踪</p><p><b>8.4 P3P</b></p><p>属于响应首部，在线隐私偏好平台的简称。可以让Web网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。</p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56687296", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：与HTTP协作的Web服务器", 
            "content": "<h2>1、用单机虚拟主机实现多个域名</h2><p>在互联网上，域名通过DNS服务映射到IP地址之后访问目标网站，当请求发送到服务器时，已经是以IP地址形式访问了。在相同的IP地址下，由于虚拟主机可以寄存多个不同主机名和域名的Web网站，因此在发送HTTP请求时，必须在Host首部内完整指定主机名或域名的URI。</p><h2>2、通信数据转发程序：代理、网关、隧道</h2><p>这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收从那台服务器发送的响应再转发客户端。</p><p><b>2.1 代理</b></p><p>一种有转发功能的应用程序，是服务器和客户端的中间人。</p><p>不改变URI</p><p>在HTTP通信过程中，可级联多台代理服务器。</p><p>使用代理服务器的理由：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的等。</p><p>代理使用方法：是否使用缓存 、 是否会修改报文</p><p>缓存代理：代理转发响应时，缓存代理会预先将资源的副本缓存在代理服务器上</p><p>透明代理：不对报文做任何加工的代理类型，否则为非透明。</p><p><b>2.2 网关</b></p><p>是转发其他服务器通信数据的服务器。好像自己拥有资源的源服务器一样对请求进行处理。</p><p>持有资源实体的服务器被称为源服务器。</p><p>工作机制和代理类似，网关能使通信线路上的服务器提供非HTTP协议服务。</p><p>利用网关能提高通信的安全性</p><p><b>2.3 隧道</b></p><p>在相隔甚远的两者之间进行中转，并保持双方通信连接的应用程序。</p><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。</p><p>隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身是透明的。</p><h2>3、保存资源的缓存</h2><p>缓存服务器是代理服务器的一种，归类在缓存代理类型中。</p><p>当代理转发从服务器返回的响应时，代理服务器将会保存一份资源的副本。</p><p>3.1 缓存的有效期限</p><p>3.2 客户端的缓存</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在HTTP出现之前的协议：</p><p>FTP：文件传输时用的协议，现在还在广泛使用。</p><p>NNTP（用于NetNews电子会议 室内传送消息的协议） Archie（搜索anonymous FTP公开的文件信息的协议） WAIS（以关键词检索多个数据库使用的协议） Gopher（查找与互联网连接的计算机内信息的协议） 不常用</p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56678187", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 1, 
            "title": "读书笔记《图解HTTP》：返回结果的HTTP状态码", 
            "content": "<h2>1、状态码告知从服务器端返回的请求结果</h2><h2>2、2XX 成功</h2><p><b>200 OK</b> 被正常处理了 在响应报文中，随状态码一起返回的信息会因方法的不同而改变</p><p><b>204 No Content</b> 请求已成功处理，但在返回的响应报文中不含实体的主体部分，不允许返回任何主体的实体，页面不更新</p><p><b>206 Partial Content</b> 范围请求 服务器成功执行了这部分的GET请求</p><h2>3、3XX 重定向</h2><p><b>301 Moved Permanently </b> 永久性重定向  已被分配了新的URI，以后使用这个新URI</p><p><b>302 Found </b>临时性重定向 分配了新URI，希望用户本次能使用新的URI访问</p><p><b>303 See Other</b> 由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源</p><p>当301 302 303响应状态码返回时，几乎所有的浏览器都会把POST改为GET，并删除请求保温内的主体，之后请求会自动再次发送。301 302标准是禁止将POST方法变成GET方法的，但是实际使用时，大家都这么做。</p><p><b>304 Not Modified</b> 资源已经找到，但不符合要求。服务器端资源未改变，可直接使用客户端未过期的缓存。304状态码返回时不包含任何响应的主体部分。和重定向没关系</p><p><b>307 Temporary Redirect </b> 临时重定向 和302 Found。但302得违反标准将POST变成GET，而307不会从POST变成GET。浏览器处理响应时的行为出现的情况各异。</p><h2>4、4XX 客户端错误</h2><p><b>400 Bad Request</b>  请求报文中存在语法错误，浏览器会像200一样对待该状态码</p><p><b>401 Unauthorized</b>  请求需要通过有HTTP认证的认证信息</p><p><b>403 Forbidden</b> 服务器端拒绝访问那个资源</p><p><b>404 Not Found</b> 服务器上没有请求的资源</p><h2>5、5XX 服务器错误</h2><p><b>500 internal server error</b> 服务器内部资源出故障，（状态码依然会返回200）</p><p><b>503 service unavailable</b> 服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</p><p></p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56669887", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：HTTP报文内的HTTP信息", 
            "content": "<h2>1、HTTP报文</h2><p>HTTP报文本身是由多行数据构成的字符串文本</p><h2>2、请求报文及相应报文的结构</h2><p><b>请求行</b>（方法、URI、版本）</p><p><b>状态行</b>（方法、URI、版本）</p><p><b>首部字段</b>（各种条件和属性的各类首部：请求首部、响应首部、通用首部、实体首部）</p><p><b>其他</b>（RFC里未定义的首部 cookie等）</p><h2>3、编码提升传输速率</h2><p>传输过程中可以按照原貌传输，也可以在传输过程中通过编码来提升传输速率，编码会消耗更多的CPU资源。</p><p><b>3.1 报文主体和实体主体的差异</b></p><p><b>报文</b>：HTTP通信中的基本单位，8位组字节流组成。</p><p><b>实体</b>：作为有效载荷数据被传输，由实体首部和实体主体构成。</p><p>HTTP报文的<b>主体用于传输请求或响应的实体主体</b>。</p><p>通常主体和实体相等，只有传输中进行<b>编码，实体主体的内容发生变化</b>，两者有差异。</p><p><b>3.2 压缩传输的内容编码</b></p><p>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。</p><p>常见的内容编码：</p><p>gzip、compress、deflate、identity</p><p><b>3.3 分割发送的分块传输编码</b></p><p>在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面。</p><p>分块传输编码将实体主体分成多块，每一块都用十六进制来标记块的大小。</p><h2>4、发送多种数据的多部分对象集合</h2><p>HTTP协议中也采纳了对部分对象集合，发送的一份报文主体内可含有多类型实体。通常是在图片上或文本文件等上传时使用。需要在首部字段加上Content-type。</p><p><b>multipart/form-data</b>：表单文件上传时使用</p><p><b>multipart/byteranges</b>：状态码206响应报文包含了多个范围的内容时使用。</p><h2>5、获取部分内容的范围请求</h2><p>从之前下载中断处恢复下载。</p><p>要实现该功能，需要制定下载的实体范围。<b>指定范围发送的请求叫做范围请求</b>。</p><p>执行范围请求时，会用到首部字段Range来指定资源的byte范围。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3bf8124021c767e4789b88dad1994532_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic3.zhimg.com/v2-3bf8124021c767e4789b88dad1994532_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;343&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic3.zhimg.com/v2-3bf8124021c767e4789b88dad1994532_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3bf8124021c767e4789b88dad1994532_b.jpg\"/></figure><p>针对范围请求，响应会返回206.多重范围请求，响应会在首部字段Content-type标明multipart/byteranges后返回响应报文。</p><p>如果服务端无法响应范围请求，则返回200 OK 和完整的实体内容。</p><h2>6、内容协商返回最合适的内容</h2><p>当浏览器的默认语言为英文或者中文，访问相同的URI的web页面时，则会显示对应的英语版或中文版的web页面，这样的机制成为内容协商。</p><p>内容协商机制是指客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。以语言、字符集、编码方式等为基准判断响应的资源。</p><p>某些首部字段就是判断的基准：    <br/> Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language</p><p>内容协商技术有以下类型：</p><p>服务器驱动协商、客户端驱动协商、透明协商</p><p><br/> <br/> <br/> <br/> <br/> <br/> </p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56605463", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：简单的HTTP协议", 
            "content": "<h2>1.HTTP协议用于客户端和服务端之间的通信</h2><h2>2.通过请求和响应的交换达成通信</h2><p>请求报文：起始行头的GET表示请求访问服务器的类型，称为方法。随后的字符串/index.html 指明了请求访问的资源对象，也叫做请求URI。最后的HTTP/1.1 即HTTP版本号</p><p>请求报文是由请求方法、请求URI、协议版本、<b>可选的请求首部字段</b>和<b>内容实体</b>构成的。</p><p>响应报文：起始行头 HTTP版本、状态码、原因短语、创建响应时间是首部字段内的一个属性。</p><p>响应报文基本上是由以上加可选的响应首部字段以及实体主体构成。</p><h2>3.HTTP是不保存状态的协议</h2><p>HTTP协议自身不对请求和响应之间的通信状态进行保存。</p><p>每当有新的请求发送时，就会有对应的响应产生，协议本身并不保留之前一切的请求或响应报文的信息。</p><p>为了实现期望的保持状态功能，引入了cookie技术。管理状态。</p><h2>4.请求URI定位资源</h2><p>HTTP协议使用URI定位互联网上的资源，正是因为URI的特定功能，在互联网上任意位置的资源都能访问到。</p><h2>5.告知服务器意图的HTTP方法</h2><p><b>GET：获取资源</b></p><p>GET方法用来请求访问已被URI识别的资源。指定的资源经服务器端解析后返回响应的内容。</p><p><b>POST：传输实体主体</b></p><p>PUT：传输文件（像FTP，将文件保存到请求URI指定的位置，但是HTTP/1.1的PUT方法不带任何验证机制，任何人都可以上传文件，存在安全性问题）</p><p><b>HEAD：获得报文首部</b>（和get方法一样，只是不返回主体部分，用于确认URI的有效性及资源更新的日期时间等）</p><p><b>DELETE</b>：删除文件（和PUT一样不带验证机制）</p><p>OPTIONS：询问支持的方法（查询针对请求URI指定的资源支持的方法）</p><p>TRACE：追踪路径（容易引发XST攻击）</p><p>CONNECT：要求用隧道协议连接代理（主要使用SSL和TLS协议把通信内容加密后经网络隧道传输）</p><h2>6.使用方法下达命令</h2><p>向请求URI指定的资源发送请求报文时，采用称为方法的命令。</p><h2>7.持久连接节省通信量</h2><p>HTTP协议初始版本，每进行一次HTTP通信就要断开一次TCP连接，增加通信量的开销。</p><p><b>7.1 持久连接</b></p><p>只要任意一端没有明确提出断开连接，则保持TCP连接状态。</p><p>持久连接的好处在于减少TCP连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。页面的显示速度也就相应提高。</p><p>在HTTP/1.1 中，所有的连接默认都是持久连接。</p><p><b>7.2 管线化</b></p><p>持久连接使得多数请求以管线化方式成为可能。并行发送多个请求。</p><h2>8.使用cookie的状态管理</h2><p>cookie技术通过在请求和响应报文中写入cookie信息来控制客户端的状态。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4271dd39d22a9ec51cf5649376735b4f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb\" width=\"729\" data-original=\"https://pic4.zhimg.com/v2-4271dd39d22a9ec51cf5649376735b4f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;729&#39; height=&#39;363&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"729\" data-original=\"https://pic4.zhimg.com/v2-4271dd39d22a9ec51cf5649376735b4f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4271dd39d22a9ec51cf5649376735b4f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-96a7709c020518074488f177c68566f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"667\" data-original=\"https://pic1.zhimg.com/v2-96a7709c020518074488f177c68566f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;667&#39; height=&#39;310&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"667\" data-original=\"https://pic1.zhimg.com/v2-96a7709c020518074488f177c68566f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-96a7709c020518074488f177c68566f8_b.jpg\"/></figure><p>这是发生了cookie交换的情景。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8983948cd9245c448512d40c64c467e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"535\" class=\"origin_image zh-lightbox-thumb\" width=\"712\" data-original=\"https://pic2.zhimg.com/v2-8983948cd9245c448512d40c64c467e9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;712&#39; height=&#39;535&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"535\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"712\" data-original=\"https://pic2.zhimg.com/v2-8983948cd9245c448512d40c64c467e9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8983948cd9245c448512d40c64c467e9_b.jpg\"/></figure><p>cookie会根据从服务端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。</p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56445280", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《图解HTTP》：了解Web及网络基础", 
            "content": "<h2><b>1、使用HTTP协议访问Web</b></h2><p>本书一开场便是经典面试题：<b>当我们在网页浏览器的地址栏中输入URL时，Web页面是如何呈现的。</b></p><p>1- 当我们在浏览器地址栏输入URL之后，信息会被送往某处；2- 然后从某处获取文件资源等信息，从而显示出Web页面。</p><p>通过发送请求获取服务器资源的Web浏览器，都可称为客户端。</p><p>Web使用一种名为HTTP（翻译为超文本转移协议更为精确）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定，可以说，<b>Web是建立在HTTP协议上通信的</b>。</p><h2><b>2、HTTP的诞生</b></h2><p><b>2.1 为知识共享而规划Web</b></p><p>WWW这一提议，是致力于全世界的研究者们进行知识共享。Tim Bernaers Lee博士提出一种让远隔两地的研究者们共享知识的设想，最初是借助多文档之间相互关联形成的超文本，连成可相互参阅的world wide web（万维网）。</p><p>3项WWW构建技术，分别是：1- 把SGML作为页面的文本标记语言的HTML；2- 作为文档传递协议的HTTP；3- 指定文档所在地址的URL。</p><p>WWW： Web浏览器当年用来浏览超文本的客户端应用程序时的名称，现在则用来表示这一系列的集合，简称Web。</p><p><b>2.2 Web成长时代</b></p><p>1990.11： CERN成功研发了世界上第一台web服务器和web浏览器。</p><p>1992.9：日本的第一个网站的主页上线。</p><p>1993.1：现代浏览器的祖先NCAS研发的mosaic问世。</p><p>1994.12：网景发布NN1.0</p><p>1995：微软发布IE1.0 和IE2.0</p><p>2000：网景衰落</p><p>2004：Mozilla基金会发布FF。</p><p><b>2.3 驻足不前的HTTP</b></p><p>1990：HTTP/0.9问世，但是那时的HTTP并没有作为正式的标准被建立。</p><p>1996.5：HTTP/1.0，正式作为标准被公布。</p><p>1997.1：HTTP/1.1，目前主流版本。</p><p>当年HTTP协议的出现主要是为了解决文本传输的难题。</p><h2><b>3、网络基础  TCP/IP</b></h2><p>通常使用的网络是在 TCP/IP 协议族的基础上运作的。而HTTP属于它内部的一个子集。 </p><p><b>3.1 TCP/IP 协议族</b></p><p>计算机与网络设备要相互通信，双方就必须基于相同的方法，不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则，我们就把这种规则成为协议。与互联网相关联的协议集合起来总称为 TCP/IP。</p><p><b>3.2 TCP/IP 的分层机制</b></p><p> TCP/IP协议族里重要的一点就是<b>分层</b>，按层次分别为：<b>应用层、传输层、网络层和数据链路层。</b></p><p><b>3.2.1  应用层：决定了向用户提供应用服务时通信的活动。</b></p><p> TCP/IP协议族内预存了各类通用的应用服务，FTP、DNS服务就是其中两类。</p><p><i>HTTP也属于应用层。</i></p><p><b>3.2.2  传输层：</b>对上层应用提供处于网络连接中的<b>两台计算机之间的数据传输。</b></p><p>在传输层有两个性质不同的协议：TCP和UDP。</p><p><b>3.2.3 网络层（又称网络互联层）：处理在网络上流动的数据包。</b></p><p>该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><p>与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</p><p><b>3.2.4 链路层（又名数据链路层，网络接口层）：用来处理链接网络的硬件部分。</b></p><p>包括：控制操作系统、硬件的设备驱动、NIC（网卡）、光纤等物理可见部分（连接器等一切传输媒介）。</p><p><b>硬件上的范畴均在链路层的作用范围之内。</b></p><p><b>3.3 TCP/IP 通信传输流</b></p><p>发送端从应用层往下走，接收端则从链路层往上走。</p><p>1- 作为发送端的客户端在应用层（HTTP协议）发出一个想看某个web页面的HTTP请求。</p><p>2- 在传输层（TCP协议）把从应用层处收到的数据（HTTP报文）进行分割，并在各个报文上打上标记序号与端口号后转发给网络层。</p><p>3- 在网络层，增加作为通信目的地的MAC地址后转发给链路层。</p><p>4- 接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才算真正接收到由客户端发送过来的HTTP请求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c05ea236ae6c4dd44d8eb609ba305c1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-c05ea236ae6c4dd44d8eb609ba305c1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;578&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-c05ea236ae6c4dd44d8eb609ba305c1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c05ea236ae6c4dd44d8eb609ba305c1b_b.jpg\"/></figure><p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。</p><p>接收端在层与层传输数据时，每经过一层时会把相应的首部消去。</p><h2><b>4、与HTTP关系密切的协议：IP、TCP和DNS</b></h2><p><b>4.1 负责传输的IP协议</b></p><p>IP协议作用：把各种数据包传送给对方</p><p>IP地址：指明了节点被分配的地址</p><p>MAC地址：网卡所属的固定地址</p><p>IP地址可以和MAC地址进行配对，IP地址可变换，但MAC地址基本上不会更改。</p><p>使用ARP协议凭借MAC地址进行通信。IP间的通信依赖MAC地址。</p><p>没有人能够全面掌握互联网中的传输状况。到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线（这种机制称为路由选择）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d1b1396c1d9a1d7d543e645ade295e14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1224\" data-rawheight=\"1148\" class=\"origin_image zh-lightbox-thumb\" width=\"1224\" data-original=\"https://pic1.zhimg.com/v2-d1b1396c1d9a1d7d543e645ade295e14_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1224&#39; height=&#39;1148&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1224\" data-rawheight=\"1148\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1224\" data-original=\"https://pic1.zhimg.com/v2-d1b1396c1d9a1d7d543e645ade295e14_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d1b1396c1d9a1d7d543e645ade295e14_b.jpg\"/></figure><p><b>4.2 确保可靠性的TCP协议</b></p><p>TCP属于传输层，提供可靠的字节流服务。将大块数据分割成以报文段为单位的数据包进行管理。TCP协议能够确认数据最终是否送达对方。</p><p><b>确保数据能到达目标</b></p><p>为了准确无误地将数据送达目标，TCP协议采取了三次握手策略。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7f0091f17bcc44633c786ddd804dc573_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"726\" data-original=\"https://pic4.zhimg.com/v2-7f0091f17bcc44633c786ddd804dc573_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;726&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"726\" data-original=\"https://pic4.zhimg.com/v2-7f0091f17bcc44633c786ddd804dc573_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7f0091f17bcc44633c786ddd804dc573_b.jpg\"/></figure><p>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><h2><b>5、负责域名解析的DNS服务</b></h2><p>DNS服务是和HTTP协议一样位于应用层的协议，它提供域名到IP地址之间的解析服务。</p><p>计算机既可以被赋予IP地址，也可以被赋予主机名和域名。</p><h2><b>6、各种协议与HTTP协议的关系</b></h2><p>IP协议、TCP协议和DNS服务在使用HTTP协议的通信过程中各自发挥的作用</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-52a25a0a2e89f28b6d90d477ef828dca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic3.zhimg.com/v2-52a25a0a2e89f28b6d90d477ef828dca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4032&#39; height=&#39;3024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4032\" data-original=\"https://pic3.zhimg.com/v2-52a25a0a2e89f28b6d90d477ef828dca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-52a25a0a2e89f28b6d90d477ef828dca_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>7、URI和URL</b></h2><p><b>7.1 URI 统一资源标识符</b></p><p><b>Uniform：</b>规定统一的格式可方便处理多种不同类型的资源</p><p><b>Resource：</b>可标识的任何东西</p><p><b>Identity</b>：可标识的对象</p><p>URI就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。</p><p>URI用字符串标识某一互联网资源，URL标识资源的地点。<b>URL是URI的子集</b>。</p><p><b>7.2 URI格式</b></p><p><b>相对URL：</b>指从浏览器中基本URI处指定的URL，如/image/logo.gif</p><p></p>", 
            "topic": [
                {
                    "tag": "图解HTTP（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20128409"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56322654", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 3, 
            "title": "DOM总结：表单操作", 
            "content": "<p><b>1、构建表单：</b>所有的表单都是以一个form元素开始</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ac363645f906348c29327dddcfc3731a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic3.zhimg.com/v2-ac363645f906348c29327dddcfc3731a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;644&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"644\" data-original=\"https://pic3.zhimg.com/v2-ac363645f906348c29327dddcfc3731a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ac363645f906348c29327dddcfc3731a_b.jpg\"/></figure><p>我们最好再做一下验证，比如，某些必填项要提示用户。</p><p>学习的内容：元素（表单构建的元素）、验证（表单验证相关的操作）、提交（表单提交相关的操作）</p><h2><b>form元素</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-482701eaafbf31cbef0762c4f67d0a82_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"176\" class=\"content_image\" width=\"409\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;409&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"176\" class=\"content_image lazy\" width=\"409\" data-actualsrc=\"https://pic3.zhimg.com/v2-482701eaafbf31cbef0762c4f67d0a82_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cc4495b09efed42ba7c56eda3aacc2e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-cc4495b09efed42ba7c56eda3aacc2e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;376&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-cc4495b09efed42ba7c56eda3aacc2e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cc4495b09efed42ba7c56eda3aacc2e2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0db995a608bf000d600820bf6c18d1b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic3.zhimg.com/v2-0db995a608bf000d600820bf6c18d1b6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;610&#39; height=&#39;135&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"610\" data-original=\"https://pic3.zhimg.com/v2-0db995a608bf000d600820bf6c18d1b6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0db995a608bf000d600820bf6c18d1b6_b.jpg\"/></figure><p><b>form的两个重要属性：elements 和 length。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-29edb13e7951d0ff6d89622e770dc273_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"683\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"683\" data-original=\"https://pic4.zhimg.com/v2-29edb13e7951d0ff6d89622e770dc273_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;683&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"683\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"683\" data-original=\"https://pic4.zhimg.com/v2-29edb13e7951d0ff6d89622e770dc273_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-29edb13e7951d0ff6d89622e770dc273_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7cd920079f0f5e22f5bb991c087827e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-7cd920079f0f5e22f5bb991c087827e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;752&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-7cd920079f0f5e22f5bb991c087827e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7cd920079f0f5e22f5bb991c087827e5_b.jpg\"/></figure><p>即使是在form=&#39;a&#39;里面的表单空间，如果指明form=&#39;b&#39;，是formb的子孙表单控件，而非A的。</p><p><b>form的length属性</b>，等价于elements.length.这个集合的个数。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7e151b958961b925e43d54a71cc6f457_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"75\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic4.zhimg.com/v2-7e151b958961b925e43d54a71cc6f457_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;708&#39; height=&#39;75&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"75\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"708\" data-original=\"https://pic4.zhimg.com/v2-7e151b958961b925e43d54a71cc6f457_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7e151b958961b925e43d54a71cc6f457_b.png\"/></figure><p><b>通过form来取到它里面的表单控件。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5036946eeedf2dbf41900ddf4becb9c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"353\" data-rawheight=\"83\" class=\"content_image\" width=\"353\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;353&#39; height=&#39;83&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"353\" data-rawheight=\"83\" class=\"content_image lazy\" width=\"353\" data-actualsrc=\"https://pic1.zhimg.com/v2-5036946eeedf2dbf41900ddf4becb9c0_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8f17aa37835c212aaf62faf5631b4a9d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"58\" class=\"origin_image zh-lightbox-thumb\" width=\"624\" data-original=\"https://pic2.zhimg.com/v2-8f17aa37835c212aaf62faf5631b4a9d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;624&#39; height=&#39;58&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"58\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"624\" data-original=\"https://pic2.zhimg.com/v2-8f17aa37835c212aaf62faf5631b4a9d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8f17aa37835c212aaf62faf5631b4a9d_b.png\"/></figure><p>重点说下通过名称来取控件的规则：<b>form[name]</b></p><p>-&gt;返回id或name为指定名称的表单控件（除图片按钮）；</p><p>-&gt;如果结果为空，则返回id为指定名称的img元素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dffa2ad5475d07f4db564a25e4c0db18_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb\" width=\"721\" data-original=\"https://pic1.zhimg.com/v2-dffa2ad5475d07f4db564a25e4c0db18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;721&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"721\" data-original=\"https://pic1.zhimg.com/v2-dffa2ad5475d07f4db564a25e4c0db18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dffa2ad5475d07f4db564a25e4c0db18_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9512a80bc03173f7495475bec62a9c2e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"788\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"788\" data-original=\"https://pic3.zhimg.com/v2-9512a80bc03173f7495475bec62a9c2e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;788&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"788\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"788\" data-original=\"https://pic3.zhimg.com/v2-9512a80bc03173f7495475bec62a9c2e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9512a80bc03173f7495475bec62a9c2e_b.png\"/></figure><p>-&gt; 如果有多个同名的元素，则返回这些元素的动态节点集合。</p><p>-&gt; 一旦用指定名称取过该元素，则不管该元素的id或name怎么变化，只要节点还在页面上均可使用原名称获取该元素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b917fd0088ebb22b5ddeabb221373bfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"199\" class=\"origin_image zh-lightbox-thumb\" width=\"929\" data-original=\"https://pic4.zhimg.com/v2-b917fd0088ebb22b5ddeabb221373bfb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;929&#39; height=&#39;199&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"199\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"929\" data-original=\"https://pic4.zhimg.com/v2-b917fd0088ebb22b5ddeabb221373bfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b917fd0088ebb22b5ddeabb221373bfb_b.jpg\"/></figure><p>form除了上述属性，<b>还有接口 reset() submit() checkValidity()</b></p><p><b>reset()</b></p><p>-&gt; 可重置元素：input、keygen、output、select、textarea</p><p>-&gt; 当我们在表单做reset操作时，就会触发reset事件，阻止该事件的默认行为可取消重置；</p><p>-&gt; 元素重置时不再触发元素上的change和input事件</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-30925c402aa66c24f43961ae47353764_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb\" width=\"862\" data-original=\"https://pic1.zhimg.com/v2-30925c402aa66c24f43961ae47353764_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;862&#39; height=&#39;181&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"862\" data-original=\"https://pic1.zhimg.com/v2-30925c402aa66c24f43961ae47353764_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-30925c402aa66c24f43961ae47353764_b.jpg\"/></figure><h2><b>label元素</b></h2><p>指定了label的for属性后，浏览器会自动生成control属性。用来关联这个节点。form指定了这个表单控件属于哪个表单，也是由浏览器动态生成的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f9637a989c2c378cc2f9b2ae37a5b872_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb\" width=\"437\" data-original=\"https://pic3.zhimg.com/v2-f9637a989c2c378cc2f9b2ae37a5b872_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;437&#39; height=&#39;262&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"437\" data-original=\"https://pic3.zhimg.com/v2-f9637a989c2c378cc2f9b2ae37a5b872_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f9637a989c2c378cc2f9b2ae37a5b872_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>label.htmlFor</b>：</p><p>-&gt; 关联表单控件激活行为，点击这个表单控件的行为就和这个表单保持一致。</p><p>-&gt; 可关联元素：button、input（除hidden外），keygen、meter、output、progress、select、textarea</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-015e1bf248924fd4c85892aca830e21a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic3.zhimg.com/v2-015e1bf248924fd4c85892aca830e21a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;814&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"814\" data-original=\"https://pic3.zhimg.com/v2-015e1bf248924fd4c85892aca830e21a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-015e1bf248924fd4c85892aca830e21a_b.jpg\"/></figure><p>这样就可以用各种复杂的图片来美化上传文件表单控件。</p><p><b>label.control</b></p><p>-&gt; 如果指定了for属性，则为该for属性关联对应的id的可关联元素</p><p>-&gt; 如果没有指定for属性，则为第一个子孙可关联元素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1bd510999201daafdb73da577974b20b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic4.zhimg.com/v2-1bd510999201daafdb73da577974b20b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic4.zhimg.com/v2-1bd510999201daafdb73da577974b20b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1bd510999201daafdb73da577974b20b_b.jpg\"/></figure><p><b>label.form </b></p><p>-&gt; 关联归属表单  所有的表单控件也都有这个属性</p><p>-&gt; 可关联元素：button、fieldset、input、keygen、label、object、output、select、textarea</p><p>-&gt; 对应的form的值是浏览器自己算的，是一个只读属性，不可在程序过程中直接修改。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4bf255ea80189b3930c334d4368cc21a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"95\" class=\"origin_image zh-lightbox-thumb\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-4bf255ea80189b3930c334d4368cc21a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;739&#39; height=&#39;95&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"95\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-4bf255ea80189b3930c334d4368cc21a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4bf255ea80189b3930c334d4368cc21a_b.png\"/></figure><h2><b>input元素</b></h2><p><b>input.type 属性</b></p><p>-&gt; 控件外观 不同的type有不同的展示效果</p><p>-&gt; 数据类型 不同的type有不同的数据类型，如果不指定，则默认为 text</p><h2><b>select 元素</b></h2><p>选项列表里面选择一个选项 （子元素：optgroup、 option）</p><p>属性：name、value、multiple、options（动态集合）、selectedOptions（所有已经选中的选项的动态集合）、selectedIndex（第一个选中的选项的索引值，如果没有选中的，则返回-1）、add（element [, before]）在指定的元素之前添加选项，如果没有指定参照物，则在最后添加这个选项、remove（[index]）用来表示删除某个选项。</p><p>optgroup元素（把一些相关性比较大的选项作为分组）的属性：disabled（当前这个分组里的选项都是不可选的）、label（必选的，我们在分组的时候可以看到某些选项下面归属于哪个分组的，对这个分组的说明，就用label来表示）。</p><p>option元素的属性：disabled、label、value、text、index、selected、defaultSelected。</p><p><b>select</b>主要包含对选项的操作：</p><p><b>创建选项</b>（1- document.createElement 2-new Option([text [, value [, defaultSelected [,selected]]]]）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e6d6fd11394e7c2522743a7730e9903_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"856\" data-original=\"https://pic4.zhimg.com/v2-9e6d6fd11394e7c2522743a7730e9903_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;856&#39; height=&#39;244&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"856\" data-original=\"https://pic4.zhimg.com/v2-9e6d6fd11394e7c2522743a7730e9903_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e6d6fd11394e7c2522743a7730e9903_b.jpg\"/></figure><p><b>添加</b>（1- insertBefore  2- select.add）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9c24e37876001b7c6198295731a2735b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb\" width=\"495\" data-original=\"https://pic4.zhimg.com/v2-9c24e37876001b7c6198295731a2735b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;495&#39; height=&#39;118&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"495\" data-original=\"https://pic4.zhimg.com/v2-9c24e37876001b7c6198295731a2735b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9c24e37876001b7c6198295731a2735b_b.jpg\"/></figure><p><b>删除</b>（1-removeChild  2-select.remove）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-aa9bc4582d26426f401466e521c4a1a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb\" width=\"441\" data-original=\"https://pic1.zhimg.com/v2-aa9bc4582d26426f401466e521c4a1a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;441&#39; height=&#39;76&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"441\" data-original=\"https://pic1.zhimg.com/v2-aa9bc4582d26426f401466e521c4a1a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-aa9bc4582d26426f401466e521c4a1a4_b.jpg\"/></figure><p>select元素级联下拉选择器：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6c0a3c34583ff1935f82a6a07733ff76_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"349\" data-rawheight=\"169\" class=\"content_image\" width=\"349\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;349&#39; height=&#39;169&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"349\" data-rawheight=\"169\" class=\"content_image lazy\" width=\"349\" data-actualsrc=\"https://pic3.zhimg.com/v2-6c0a3c34583ff1935f82a6a07733ff76_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8b9982cafe81c0c97a933b4626daabcc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"432\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb\" width=\"432\" data-original=\"https://pic1.zhimg.com/v2-8b9982cafe81c0c97a933b4626daabcc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;432&#39; height=&#39;406&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"432\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"432\" data-original=\"https://pic1.zhimg.com/v2-8b9982cafe81c0c97a933b4626daabcc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8b9982cafe81c0c97a933b4626daabcc_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4be24118b5fb8ff05bebb98c8b992ec3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"469\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"469\" data-original=\"https://pic4.zhimg.com/v2-4be24118b5fb8ff05bebb98c8b992ec3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;469&#39; height=&#39;335&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"469\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"469\" data-original=\"https://pic4.zhimg.com/v2-4be24118b5fb8ff05bebb98c8b992ec3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4be24118b5fb8ff05bebb98c8b992ec3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0682b65535aa2789f0320214b4bf7af3_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"208\" data-rawheight=\"32\" class=\"content_image\" width=\"208\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;208&#39; height=&#39;32&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"208\" data-rawheight=\"32\" class=\"content_image lazy\" width=\"208\" data-actualsrc=\"https://pic4.zhimg.com/v2-0682b65535aa2789f0320214b4bf7af3_b.png\"/></figure><h2><b>textarea元素</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e8762e81dd16f4dbc6751d653c36927_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic4.zhimg.com/v2-3e8762e81dd16f4dbc6751d653c36927_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;436&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic4.zhimg.com/v2-3e8762e81dd16f4dbc6751d653c36927_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e8762e81dd16f4dbc6751d653c36927_b.jpg\"/></figure><p>textarea.selection 选择区域，没有中的时候，selectionStart 和 selectionEnd都是光标位置。当选中某个区域时，selectionStart 和 selectionEnd会到相应的位置。</p><p>selectionDirection：键盘上按下了shift功能键或者方向键，如果指定了forward，则shift+左右键改变的是selectionEnd。如果指定是backward，则shift+左右键改变的是selectionStart。</p><p>@输入提示</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-03a0801f7610e4c53327bc0461621ce5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"873\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb\" width=\"873\" data-original=\"https://pic2.zhimg.com/v2-03a0801f7610e4c53327bc0461621ce5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;873&#39; height=&#39;348&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"873\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"873\" data-original=\"https://pic2.zhimg.com/v2-03a0801f7610e4c53327bc0461621ce5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-03a0801f7610e4c53327bc0461621ce5_b.jpg\"/></figure><p>还有一些不常用的元素：fieldset、button、keygen、output、progress、meter等。</p><p>支持情况：</p><a href=\"https://link.zhihu.com/?target=https%3A//html5test.com/compare/browser/ie-8/ie-9/ie-10.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">How well does your browser support HTML5?</a><h2><b>表单验证：</b></h2><p><b>哪些元素需要做表单验证：</b>button、input、select、textarea</p><p><b>以下情况不做验证</b>：1-input 的 type值为 hidden、reset、button之一的话，不用做验证  2-button的type值为reset或者button 也不用做，3-input或textarea  只读 也就是readonly时，不用做验证。4-可验证元素作为datalist的子孙节点时。5-元素为disabled时。</p><p><b>验证时的接口：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9919a7a6c0d73eff1d9c65e85a97c988_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"766\" data-original=\"https://pic1.zhimg.com/v2-9919a7a6c0d73eff1d9c65e85a97c988_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;766&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"766\" data-original=\"https://pic1.zhimg.com/v2-9919a7a6c0d73eff1d9c65e85a97c988_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9919a7a6c0d73eff1d9c65e85a97c988_b.jpg\"/></figure><p>1-willvalidate：表单在提交时是否会验证  2-checkValidity 用来验证元素，通过验证会返回true，否则会触发元素上的invalid事件。3-validity 存储验证结果，不同的异常状态都会在这个属性下面标识出来。4-validationMessage 显示验证的异常信息  5-setCustomeValidity（message）传入一个自定义的消息，用来显示异常显示的信息。主要用来做自定义的验证错误。</p><p><b>validity</b>（包含内容）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4a9c683b6f4ec4f6f0b1ea959e3b0345_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"649\" data-original=\"https://pic2.zhimg.com/v2-4a9c683b6f4ec4f6f0b1ea959e3b0345_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;649&#39; height=&#39;420&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"649\" data-original=\"https://pic2.zhimg.com/v2-4a9c683b6f4ec4f6f0b1ea959e3b0345_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4a9c683b6f4ec4f6f0b1ea959e3b0345_b.jpg\"/></figure><p><b>自定义异常</b>：</p><p>1-oninvalid  2-setCustomValidity</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2734b84b36c04c4ae8a04df2c64ccf69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic2.zhimg.com/v2-2734b84b36c04c4ae8a04df2c64ccf69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;586&#39; height=&#39;181&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"586\" data-original=\"https://pic2.zhimg.com/v2-2734b84b36c04c4ae8a04df2c64ccf69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2734b84b36c04c4ae8a04df2c64ccf69_b.jpg\"/></figure><p><b>禁止验证：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0bfd060b81bd6f45b978146055d3a388_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"656\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"656\" data-original=\"https://pic1.zhimg.com/v2-0bfd060b81bd6f45b978146055d3a388_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;656&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"656\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"656\" data-original=\"https://pic1.zhimg.com/v2-0bfd060b81bd6f45b978146055d3a388_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0bfd060b81bd6f45b978146055d3a388_b.png\"/></figure><p><b>表单隐式提交：</b></p><p>如： 聚焦在输入框时回车提交表单 需要满足任意一个条件：1-表单有非禁用的提交按钮 2-没有提交按钮时，不超过一个类型为text、search、url、email、password、date、time、number的input元素（只有一个这样的元素）。</p><p><b>提交过程：</b></p><p>1- 浏览器根据表单提交的enctype指定的值，构建要提交的数据结构。2- 使用method指定的方式发送数据到action指定的目标上。</p><p><b>浏览器构建提交数据：</b></p><p>1- 浏览器从可提交元素中提取数据组装成指定的数据结构 2- 可提交元素：button、input、keygen、object、select、textarea </p><p><b>提交过程用的编码方式（enctype）：</b></p><p>1-application/x-wwww-form-urlencoded [默认] 2- multipart/form-data 3- text/plain  这三种方式都是在请求的 Content-typ处，组织形式：1- &amp;符号分割 2-字节流 3-回车和键值对</p><p><b>特殊案例：</b></p><p>1--&gt;name=&#39;isindex&#39; &amp;&amp; type=&#39;text&#39;   1- 编码方式为url，作为表单的第一个提交元素，提交时只发送value值，不会包含name</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-aed04e91c067e27c6b9295b60fb25bfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb\" width=\"635\" data-original=\"https://pic3.zhimg.com/v2-aed04e91c067e27c6b9295b60fb25bfe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;635&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"635\" data-original=\"https://pic3.zhimg.com/v2-aed04e91c067e27c6b9295b60fb25bfe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-aed04e91c067e27c6b9295b60fb25bfe_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2--&gt; name = &#39;_<i>charset</i>_&#39; &amp;&amp; type=&#39;hidden&#39;  1-没有设置value值，提交时value自动用当前提交的字符集填充。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c714866420c24e572f1ff0b83314c5d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb\" width=\"601\" data-original=\"https://pic2.zhimg.com/v2-c714866420c24e572f1ff0b83314c5d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;601&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"601\" data-original=\"https://pic2.zhimg.com/v2-c714866420c24e572f1ff0b83314c5d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c714866420c24e572f1ff0b83314c5d1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>提交：</b></p><p>submit（），除了用提交按钮提交表单之外，还可以用这个接口。form.submit()</p><p>不管用什么形式去提交表单，都会触发一个onsubmit事件。在这个事件触发的时候，我们可以做一些表单提交之前的数据验证。如果验证没有通过，可以通过这个事件的默认行为来取消表单提交。虽然表单有自带的一些验证规则，但是也有很多情况，自带的规则没有体现出来。这样我们就可以在onsubmit这个事件中去做验证。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-038d60556a34d1352049ab949d5fd849_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic2.zhimg.com/v2-038d60556a34d1352049ab949d5fd849_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic2.zhimg.com/v2-038d60556a34d1352049ab949d5fd849_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-038d60556a34d1352049ab949d5fd849_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>无刷新表单提交：</b></p><p>比较常见的可能是ajax的方式，再介绍下另外一种方式：用iframe做中间代理，结合表单的form、target来做无刷新的表单提交。原理：页面上放一个iframe和一个form元素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-295d97e96c488bed9d617ad3e1fda90f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"691\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"691\" data-original=\"https://pic4.zhimg.com/v2-295d97e96c488bed9d617ad3e1fda90f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;691&#39; height=&#39;336&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"691\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"691\" data-original=\"https://pic4.zhimg.com/v2-295d97e96c488bed9d617ad3e1fda90f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-295d97e96c488bed9d617ad3e1fda90f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0e107979ccef1834b6f5919b018cdf6b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"329\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic4.zhimg.com/v2-0e107979ccef1834b6f5919b018cdf6b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;329&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"329\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic4.zhimg.com/v2-0e107979ccef1834b6f5919b018cdf6b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0e107979ccef1834b6f5919b018cdf6b_b.jpg\"/></figure><p></p><p></p>", 
            "topic": [
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56321312", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "DOM总结：BOM", 
            "content": "<p>广义上的JS由三部分组成：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-31cd37036e782171efa2870106f35dd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"459\" data-original=\"https://pic3.zhimg.com/v2-31cd37036e782171efa2870106f35dd6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;459&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"459\" data-original=\"https://pic3.zhimg.com/v2-31cd37036e782171efa2870106f35dd6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-31cd37036e782171efa2870106f35dd6_b.jpg\"/></figure><p>BOM：浏览器窗口对象的一组API。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9ec390358bfb3ffc4b30d1541f1656d2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"776\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"776\" data-original=\"https://pic3.zhimg.com/v2-9ec390358bfb3ffc4b30d1541f1656d2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;776&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"776\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"776\" data-original=\"https://pic3.zhimg.com/v2-9ec390358bfb3ffc4b30d1541f1656d2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9ec390358bfb3ffc4b30d1541f1656d2_b.jpg\"/></figure><p>BOM主要是这几个属性的用法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3b84cf92279a9fc4885fe3a4e9f5e224_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb\" width=\"495\" data-original=\"https://pic1.zhimg.com/v2-3b84cf92279a9fc4885fe3a4e9f5e224_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;495&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"495\" data-original=\"https://pic1.zhimg.com/v2-3b84cf92279a9fc4885fe3a4e9f5e224_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3b84cf92279a9fc4885fe3a4e9f5e224_b.jpg\"/></figure><p><b>navigator</b>：浏览器信息</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-774c41a4e517fd77b9f3bb23aa58878b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic4.zhimg.com/v2-774c41a4e517fd77b9f3bb23aa58878b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;556&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic4.zhimg.com/v2-774c41a4e517fd77b9f3bb23aa58878b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-774c41a4e517fd77b9f3bb23aa58878b_b.jpg\"/></figure><p><b>navigator.userAgent</b>具体包含的信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-03d17817e314e1ec1b617e58f7fb6e66_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"84\" class=\"origin_image zh-lightbox-thumb\" width=\"774\" data-original=\"https://pic3.zhimg.com/v2-03d17817e314e1ec1b617e58f7fb6e66_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;774&#39; height=&#39;84&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"84\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"774\" data-original=\"https://pic3.zhimg.com/v2-03d17817e314e1ec1b617e58f7fb6e66_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-03d17817e314e1ec1b617e58f7fb6e66_b.png\"/></figure><p>Chrome内核：AppleWebkit 所以user-agent 是部分Chrome和部分 Safari</p><p>FF内核：Gecko 浏览器 FF</p><p>IE内核：Trident </p><p>一般我们可以通过判断内核，来判断是运行在什么浏览器上的。</p><p><b>location：</b>浏览器定位和导航</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-513230f2b4f8e5350402aaf43c5ae8f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic1.zhimg.com/v2-513230f2b4f8e5350402aaf43c5ae8f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;661&#39; height=&#39;310&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"661\" data-original=\"https://pic1.zhimg.com/v2-513230f2b4f8e5350402aaf43c5ae8f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-513230f2b4f8e5350402aaf43c5ae8f8_b.jpg\"/></figure><p>可以通过location这个属性。来操作url的各个部分。</p><p>最重要的属性：href，代表浏览器当前的访问的资源的完整路径。可以通过修改url的和这个小属性进行浏览器的跳转。</p><p>还有个方法：toString，如果我们直接修改location属性的话，让它赋值为一个字符串，它会默认去调用toSting方法。返回href属性。所以我们可以通过直接修改location属性，达到修改location属性下的href属性的效果。</p><p>location属性有三个方法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-064bb5c8a0833c27183bfc8b3cb5cf69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"443\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"443\" data-original=\"https://pic2.zhimg.com/v2-064bb5c8a0833c27183bfc8b3cb5cf69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;443&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"443\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"443\" data-original=\"https://pic2.zhimg.com/v2-064bb5c8a0833c27183bfc8b3cb5cf69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-064bb5c8a0833c27183bfc8b3cb5cf69_b.jpg\"/></figure><p><b>history</b>：浏览器当前窗口的浏览历史</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-70cc0d97391841a6b57abb86a7cec8bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb\" width=\"664\" data-original=\"https://pic1.zhimg.com/v2-70cc0d97391841a6b57abb86a7cec8bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;664&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"664\" data-original=\"https://pic1.zhimg.com/v2-70cc0d97391841a6b57abb86a7cec8bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-70cc0d97391841a6b57abb86a7cec8bc_b.jpg\"/></figure><p>常用方法：</p><p>back（正整数），forward（正整数），go（整数）：前进或后退的步长</p><p><b>screen</b>：显示器的信息</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-60c9b6e7d56e5a4ca0cb7f867c4b3314_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-60c9b6e7d56e5a4ca0cb7f867c4b3314_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;181&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-60c9b6e7d56e5a4ca0cb7f867c4b3314_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-60c9b6e7d56e5a4ca0cb7f867c4b3314_b.jpg\"/></figure><p>可用高度，availHeight，和height的差额，可以理解为操作系统的底栏有个操作栏。这个操作栏的高度刚好是40px。</p><p>window对象下的方法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f501c71f1ff8aae050a0ff17db0b9e46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-f501c71f1ff8aae050a0ff17db0b9e46_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-f501c71f1ff8aae050a0ff17db0b9e46_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f501c71f1ff8aae050a0ff17db0b9e46_b.jpg\"/></figure><p>如果当前窗口弹出了一个alert框，当前窗口是阻塞状态。除非用户去点击alert框的确定按钮或者关闭按钮，才能继续浏览当前的一个线程。这三种对话框，都是可阻塞的。</p><p>开关新窗口：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b27ed8562a6f1bde644b6a563c14221f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"792\" data-original=\"https://pic4.zhimg.com/v2-b27ed8562a6f1bde644b6a563c14221f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;792&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"792\" data-original=\"https://pic4.zhimg.com/v2-b27ed8562a6f1bde644b6a563c14221f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b27ed8562a6f1bde644b6a563c14221f_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56314832", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "DOM总结：多媒体（动画、音频、视频、canvas）", 
            "content": "<p>帧：动画里的最小单位，是静态的图像；帧频：一秒钟内播放的帧的数量。</p><p>一个完整的动画是如何实现的？</p><p>首先：它是由很多帧组成的，人眼是由视觉暂留效果的，当一系列的相似的图像，用时间轴串联起来之后，如果时间间隔足够的小，那么人眼感知的就是一副流畅的动画，一秒钟30帧以上，基本就比较流畅了。</p><p><b>前端实现动画的方式</b>：gif（以图像形式存储，容量比较大，还要借助ps、ai等制图工具来制作）、flash（借助编码实现，有逐渐退出的迹象）、CSS3（有局限性）、JS（可实现大部分动画）。</p><p><b>JS实现动画三要素</b>：对象（页面里的DOM对象）、属性（这个对象的属性：width、height、opacity、left、top等）、定时器（setInterval、setTimeout、requestAnimationFrame）</p><p><b>定时器的API：</b></p><p>setInterval：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f931c5af4e2dad01f89b2f7c59bb0f66_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"87\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-f931c5af4e2dad01f89b2f7c59bb0f66_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;87&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"87\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-f931c5af4e2dad01f89b2f7c59bb0f66_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f931c5af4e2dad01f89b2f7c59bb0f66_b.png\"/></figure><p>setTimeout:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b5d3d8fd7f5fb35903358132adc716b4_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"528\" data-rawheight=\"86\" class=\"origin_image zh-lightbox-thumb\" width=\"528\" data-original=\"https://pic1.zhimg.com/v2-b5d3d8fd7f5fb35903358132adc716b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;528&#39; height=&#39;86&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"528\" data-rawheight=\"86\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"528\" data-original=\"https://pic1.zhimg.com/v2-b5d3d8fd7f5fb35903358132adc716b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b5d3d8fd7f5fb35903358132adc716b4_b.png\"/></figure><p>requestAnimationFrame:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-670da37e1ac486930844aeaf1bc37ec6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb\" width=\"589\" data-original=\"https://pic3.zhimg.com/v2-670da37e1ac486930844aeaf1bc37ec6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;589&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"589\" data-original=\"https://pic3.zhimg.com/v2-670da37e1ac486930844aeaf1bc37ec6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-670da37e1ac486930844aeaf1bc37ec6_b.jpg\"/></figure><p><b>常见动画</b>：</p><p>形变、位移（相对位置）、旋转、透明度</p><p><b>音频和视频：</b></p><p>audio、video</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-076698cd821b2546fc91d56f6a321d8b_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb\" width=\"486\" data-original=\"https://pic4.zhimg.com/v2-076698cd821b2546fc91d56f6a321d8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;486&#39; height=&#39;47&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"486\" data-original=\"https://pic4.zhimg.com/v2-076698cd821b2546fc91d56f6a321d8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-076698cd821b2546fc91d56f6a321d8b_b.png\"/></figure><p>但是，W3C在规定这两个标签的时候，没有明确规定所支持的格式，所以我们要为此做兼容。audio：mp3/wav/ogg 三种主流的格式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c9a3a7be6ea0c265417be3473fd859c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb\" width=\"595\" data-original=\"https://pic2.zhimg.com/v2-c9a3a7be6ea0c265417be3473fd859c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;595&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"595\" data-original=\"https://pic2.zhimg.com/v2-c9a3a7be6ea0c265417be3473fd859c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c9a3a7be6ea0c265417be3473fd859c9_b.jpg\"/></figure><p>它们共有的一些HTML属性：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9f8b7613c2b85d67a1760d3176b411d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"905\" data-original=\"https://pic1.zhimg.com/v2-9f8b7613c2b85d67a1760d3176b411d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;905&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"905\" data-original=\"https://pic1.zhimg.com/v2-9f8b7613c2b85d67a1760d3176b411d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9f8b7613c2b85d67a1760d3176b411d4_b.jpg\"/></figure><p>控制多媒体播放：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bcc32579bef506b02a7cbb65843c506a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"746\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"746\" data-original=\"https://pic3.zhimg.com/v2-bcc32579bef506b02a7cbb65843c506a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;746&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"746\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"746\" data-original=\"https://pic3.zhimg.com/v2-bcc32579bef506b02a7cbb65843c506a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bcc32579bef506b02a7cbb65843c506a_b.jpg\"/></figure><p>playbackRate 有效区间：0-4</p><p>currentTime 有效区间：媒体的播放时长</p><p>volume 有效区间：0-1的浮点数</p><p>只读属性：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-89f180eaf16d73a2685afb80e86a2a60_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"729\" data-original=\"https://pic1.zhimg.com/v2-89f180eaf16d73a2685afb80e86a2a60_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;729&#39; height=&#39;320&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"729\" data-original=\"https://pic1.zhimg.com/v2-89f180eaf16d73a2685afb80e86a2a60_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-89f180eaf16d73a2685afb80e86a2a60_b.jpg\"/></figure><p>左边三个都是布尔值，右边两个都是数值。</p><p>相关事件：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-15bdc5b62f5cf4c21d332116fb44e022_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"914\" data-original=\"https://pic3.zhimg.com/v2-15bdc5b62f5cf4c21d332116fb44e022_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;914&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"914\" data-original=\"https://pic3.zhimg.com/v2-15bdc5b62f5cf4c21d332116fb44e022_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-15bdc5b62f5cf4c21d332116fb44e022_b.jpg\"/></figure><p>学习链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-72382e605ce3eba8154aa310a712c403_ipico.jpg\" data-image-width=\"600\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Web Audio API</a><a href=\"https://link.zhihu.com/?target=http%3A//www.html5rocks.com/en/tutorials/webaudio/intro/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cee9777b421419439ed30e15199347be_ipico.jpg\" data-image-width=\"175\" data-image-height=\"175\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Getting Started with Web Audio API - HTML5 Rocks</a><a href=\"https://link.zhihu.com/?target=http%3A//webaudio.github.io/web-audio-api/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4779d8fcc286f11d91263d4fd6d715fb_180x120.jpg\" data-image-width=\"305\" data-image-height=\"128\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Web Audio API</a><p><b>canvas</b>：</p><p>基本用法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4192dcd8b32fbc7bb4219f1a13a5729f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"28\" class=\"origin_image zh-lightbox-thumb\" width=\"446\" data-original=\"https://pic4.zhimg.com/v2-4192dcd8b32fbc7bb4219f1a13a5729f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;446&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"28\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"446\" data-original=\"https://pic4.zhimg.com/v2-4192dcd8b32fbc7bb4219f1a13a5729f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4192dcd8b32fbc7bb4219f1a13a5729f_b.png\"/></figure><p>如果不指定宽和高，默认是宽300高150.也可以用CSS去指定它的宽和高，但是不建议用CSS。因为CSS和JS在渲染的速度上有些差异。用CSS渲染的话，可能在图像呈现上会有一些问题。推荐使用canvas的weith和height属性，来指定它的宽和高。</p><p>canvas大部分的API是在：渲染上下文。的对象里的。</p><p>获取渲染上下文对象：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bbcef7e3b48aa0b6e6f5984de51f9dfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"117\" class=\"origin_image zh-lightbox-thumb\" width=\"441\" data-original=\"https://pic3.zhimg.com/v2-bbcef7e3b48aa0b6e6f5984de51f9dfe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;441&#39; height=&#39;117&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"117\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"441\" data-original=\"https://pic3.zhimg.com/v2-bbcef7e3b48aa0b6e6f5984de51f9dfe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bbcef7e3b48aa0b6e6f5984de51f9dfe_b.jpg\"/></figure><p>在画每一帧图像之前，可能需要设置一下 globalCompositeOperation这个属性。从字面上理解：全局的组合操作。我将它理解为画纸之间的关系。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a8da98349d0ab1f0558b234ea5cf3c1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"461\" data-original=\"https://pic2.zhimg.com/v2-a8da98349d0ab1f0558b234ea5cf3c1d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;461&#39; height=&#39;392&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"461\" data-original=\"https://pic2.zhimg.com/v2-a8da98349d0ab1f0558b234ea5cf3c1d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a8da98349d0ab1f0558b234ea5cf3c1d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-03e0274046e726483846873991c2674e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"419\" data-rawheight=\"31\" class=\"content_image\" width=\"419\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;419&#39; height=&#39;31&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"419\" data-rawheight=\"31\" class=\"content_image lazy\" width=\"419\" data-actualsrc=\"https://pic3.zhimg.com/v2-03e0274046e726483846873991c2674e_b.png\"/></figure><p>基本绘图的步骤：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c364c071bc87bebba29034588b6ad7fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"482\" data-original=\"https://pic2.zhimg.com/v2-c364c071bc87bebba29034588b6ad7fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;482&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"482\" data-original=\"https://pic2.zhimg.com/v2-c364c071bc87bebba29034588b6ad7fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c364c071bc87bebba29034588b6ad7fd_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c8a67358cdcc7dfcb861daa8b81fc118_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"757\" data-rawheight=\"632\" class=\"origin_image zh-lightbox-thumb\" width=\"757\" data-original=\"https://pic1.zhimg.com/v2-c8a67358cdcc7dfcb861daa8b81fc118_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;757&#39; height=&#39;632&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"757\" data-rawheight=\"632\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"757\" data-original=\"https://pic1.zhimg.com/v2-c8a67358cdcc7dfcb861daa8b81fc118_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c8a67358cdcc7dfcb861daa8b81fc118_b.jpg\"/></figure><p>教程：</p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-72382e605ce3eba8154aa310a712c403_ipico.jpg\" data-image-width=\"600\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Canvas tutorial</a><p></p>", 
            "topic": [
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56300597", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "DOM总结：数据存储（cookie，storage）", 
            "content": "<p><b>浏览器中的cookie是一段小型的文本文件</b>，根据不同浏览器对cookie的实现，大概都是在4kb大小。cookie是由键值对构成，键值对中间用分号和空格来隔开。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a6ab950ea3cee91ead484c16b85cb95b_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb\" width=\"555\" data-original=\"https://pic4.zhimg.com/v2-a6ab950ea3cee91ead484c16b85cb95b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;555&#39; height=&#39;80&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"555\" data-original=\"https://pic4.zhimg.com/v2-a6ab950ea3cee91ead484c16b85cb95b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a6ab950ea3cee91ead484c16b85cb95b_b.png\"/></figure><p>虽然cookie是存储在浏览器端的，但是大部分时候，我们是在服务器端对cookie进行设置。我们可以通过在HTTP返回体里面，通过设置 Set-Cookie值的头部，来告诉浏览器端需要存储的cookie</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-eef8f6b98acea0911882a1eb1fb0c486_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"581\" data-original=\"https://pic3.zhimg.com/v2-eef8f6b98acea0911882a1eb1fb0c486_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;581&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"581\" data-original=\"https://pic3.zhimg.com/v2-eef8f6b98acea0911882a1eb1fb0c486_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-eef8f6b98acea0911882a1eb1fb0c486_b.jpg\"/></figure><p>到浏览器</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3ba7011df1284b42b0f7044f942f2fc8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic1.zhimg.com/v2-3ba7011df1284b42b0f7044f942f2fc8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic1.zhimg.com/v2-3ba7011df1284b42b0f7044f942f2fc8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3ba7011df1284b42b0f7044f942f2fc8_b.jpg\"/></figure><p>可以访问当前域的cookie，也可以访问父域的cookie。</p><p>一个完整的cookie，是由这几个属性构成的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-018d6acfdd978ca573831bd77cc82760_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic1.zhimg.com/v2-018d6acfdd978ca573831bd77cc82760_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic1.zhimg.com/v2-018d6acfdd978ca573831bd77cc82760_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-018d6acfdd978ca573831bd77cc82760_b.jpg\"/></figure><p>Name和Value是在设置cookie的时候，必须填写的属性。Domain是表示的作用域，如果不设置，就是当前的文档域。Expires是时间戳，Max-Age是毫秒数为单位的数值。Secure只有当协议是HTTPS时才生效，默认是false。想标识一个唯一的cookie值，需要name、domain跟path的组合。</p><p><b>cookie的作用域</b></p><p>如果设置cookie的path=&#39;/&#39; 都为根目录，当设置cookie的domain为<a href=\"https://link.zhihu.com/?target=http%3A//xxx.aaa.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xxx.aaa.com</span><span class=\"invisible\"></span></a>的时候，访问<a href=\"https://link.zhihu.com/?target=http%3A//xxx.aaa.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xxx.aaa.com</span><span class=\"invisible\"></span></a>的时候，会带上cookie。当设置domain为父域：.<a href=\"https://link.zhihu.com/?target=http%3A//aaa.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">aaa.com</span><span class=\"invisible\"></span></a>的时候，访问子域的时候，都会带上cookie。路径同。</p><p><b>读取：</b></p><p>一段小型文本文件转化为json对象</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2c874e9965ef59b7bda8baba01357fe7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"363\" data-rawheight=\"313\" class=\"content_image\" width=\"363\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;363&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"363\" data-rawheight=\"313\" class=\"content_image lazy\" width=\"363\" data-actualsrc=\"https://pic4.zhimg.com/v2-2c874e9965ef59b7bda8baba01357fe7_b.jpg\"/></figure><p><b>增删改查</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9b99231bc8ec80f5d0817b9bb4a57f09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic2.zhimg.com/v2-9b99231bc8ec80f5d0817b9bb4a57f09_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;658&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"658\" data-original=\"https://pic2.zhimg.com/v2-9b99231bc8ec80f5d0817b9bb4a57f09_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9b99231bc8ec80f5d0817b9bb4a57f09_b.jpg\"/></figure><p><b>删除</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c95255d6bd7c37b2df9bcd4df7ddbb43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-c95255d6bd7c37b2df9bcd4df7ddbb43_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-c95255d6bd7c37b2df9bcd4df7ddbb43_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c95255d6bd7c37b2df9bcd4df7ddbb43_b.jpg\"/></figure><p><b>缺陷：</b></p><p>流量代价：cookie只要满足作用域和作用路径，每次请求都带上cookie，所以会产生巨大的流浪代价。</p><p>安全性问题：cookie是明文传递的</p><p>大小限制：4k左右，功能有限。</p><p>HTML5提供了<b>storage</b>这种客户端存储的替代方案。根据有效期和作用域的不同，storage分为localStorage和sessionStorage。大小：大部分浏览器都是5M左右。</p><p><b>localStorage  -&gt; </b>有效期：永久  作用域：在localStorage的基础上，再加上窗口的限制。浏览器不同的窗口是不共享sessionStorage的</p><p><b>sessionStorage -&gt; </b>有效期 ：浏览器的会话时间 作用域：协议、主机名、端口号来决定的。</p><p>可以简单的将storage理解为一个对象。</p><p><b>读取</b>：localStorage.name</p><p><b>添加/修改</b>：localStorage.name=&#39;wulongcha&#39;到目前为止浏览器支持的storage的类型只有string</p><p><b>删除</b>：delete localStorage.name</p><p><b>API</b>：调用API进行增删查改好处：可以向下兼容，如果浏览器不支持storage的话，可以用cookie来模拟。</p><p>获取键值对数量：localStorage.length</p><p>读取：localStorage.getItem(&#39;name&#39;),localStorage.key(i)</p><p>添加/修改：localStorage.setItem(&#39;name&#39;,&#39;wanlaiqiu&#39;)</p><p>删除对应键值：localStorage.removeItem(&#39;name&#39;)</p><p>删除所有数据：localStorage.clear()</p>", 
            "topic": [
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56296374", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "DOM总结：数据通信（HTTP协议和Ajax）", 
            "content": "<p><b>HTTP协议：</b></p><p><b>一个完整的HTTP请求的过程</b>：1、浏览器会向服务器端发送给一个包含命令和URL的HTTP请求报文；2、当服务器端接收到这个请求报文之后，会进行一系列的计算，向浏览器返回一个包含事务结果的HTTP响应报文；3、浏览器接收到响应报文之后，会将报文的主体显示在浏览器端上。</p><p>HTTP报文分为请求报文和响应报文。都是由三部分组成：头行、头部和主体。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-53223e0c69cba002f9bd12e58026dec5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb\" width=\"759\" data-original=\"https://pic2.zhimg.com/v2-53223e0c69cba002f9bd12e58026dec5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;759&#39; height=&#39;315&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"759\" data-original=\"https://pic2.zhimg.com/v2-53223e0c69cba002f9bd12e58026dec5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-53223e0c69cba002f9bd12e58026dec5_b.jpg\"/></figure><p>头行由三部分构成：方法、主机地址、HTTP的版本</p><p>头部：许多的键值对构成</p><p>Accept：浏览器端可以接收的媒体类型</p><p>Accept-Encoding：浏览器端可以接收的媒体类型的编码的方式</p><p>Accept-Language：浏览器端可以接收的语言类型</p><p>Cache-Control：缓存策略</p><p>Connection：keep-alive</p><p>Cookie：浏览器端向服务器端发送的cookie值</p><p>Host：主机</p><p>Pragma：头域用来包含实现特定的指令,最常用的是no-cache</p><p>User-Agent：当前浏览器的版本</p><p>GET方法，请求体为空。</p><p>响应报文的格式：也是由三部分组成 头行 头部 和主体</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e647e703e547fe2fd20dab2f247e3d08_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"765\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"765\" data-original=\"https://pic1.zhimg.com/v2-e647e703e547fe2fd20dab2f247e3d08_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;765&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"765\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"765\" data-original=\"https://pic1.zhimg.com/v2-e647e703e547fe2fd20dab2f247e3d08_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e647e703e547fe2fd20dab2f247e3d08_b.jpg\"/></figure><p>头行：HTTP协议版本、HTTP状态码、HTTP状态码描述</p><p>expires：缓存的有效时间，如果缓存策略设置了缓存的话，可以设置下expires，赋一个时间戳。</p><p>server：服务器端的HTTP服务器使用的是Nginx服务器。</p><p>主体：因为访问的是一个页面，所以返回的是一个完整的xml文件。</p><p><b>常见的HTTP方法</b>：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c0f83c0cb42982fd84907fc6ebd4f8b9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb\" width=\"901\" data-original=\"https://pic2.zhimg.com/v2-c0f83c0cb42982fd84907fc6ebd4f8b9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;901&#39; height=&#39;312&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"901\" data-original=\"https://pic2.zhimg.com/v2-c0f83c0cb42982fd84907fc6ebd4f8b9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c0f83c0cb42982fd84907fc6ebd4f8b9_b.jpg\"/></figure><p><b>URL构成</b></p><p><b>protocol + host（</b>hostname + port <b>）+ pathname + search + hash</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-30cbac3c370928a8c2702b45ccc971e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb\" width=\"911\" data-original=\"https://pic3.zhimg.com/v2-30cbac3c370928a8c2702b45ccc971e6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;911&#39; height=&#39;171&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"911\" data-original=\"https://pic3.zhimg.com/v2-30cbac3c370928a8c2702b45ccc971e6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-30cbac3c370928a8c2702b45ccc971e6_b.jpg\"/></figure><p>port、pathname、search、hash都是不必须的。</p><p><b>HTTP版本</b></p><p>1991年，HTTP的原型，有很多设计缺陷  HTTP/0.9</p><p>HTTP/1.0版本很快取代了0.9，成为了第一个广泛应用的版本。</p><p>HTTP/1.0+ 添加持久的keep-alive连接、虚拟主机支持，以及代理连接支持，称为非官方的事实标准。</p><p>HTTP/1.1 校正了结构性缺陷，明确语义，引入重要的性能优化措施，删除不好特性。</p><p><b>常见HTTP状态码</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3cd8ee666d4f9364726936f889612929_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic2.zhimg.com/v2-3cd8ee666d4f9364726936f889612929_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;903&#39; height=&#39;331&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"903\" data-original=\"https://pic2.zhimg.com/v2-3cd8ee666d4f9364726936f889612929_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3cd8ee666d4f9364726936f889612929_b.jpg\"/></figure><p><b>HTTP协议在前端开发中的应用</b></p><p>Asynchronous Javascript and XML</p><p><b>完整的Ajax通信流程</b></p><p>1、创建一个Ajax对象 XHR（readyState：0，status： responseText：）当XHR初始化的时候，readyState=0，另外两个属性的值为空。</p><p>2、调用XHR对象的open方法，readyState=1，开启一个请求，以备发送。但是没有向服务器端发请求。xhr.open(method,url [ , async = true])  默认是异步请求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-85f5f0a36d9c034b7ffc5854a60c0092_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"782\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"782\" data-original=\"https://pic3.zhimg.com/v2-85f5f0a36d9c034b7ffc5854a60c0092_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;782&#39; height=&#39;320&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"782\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"782\" data-original=\"https://pic3.zhimg.com/v2-85f5f0a36d9c034b7ffc5854a60c0092_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-85f5f0a36d9c034b7ffc5854a60c0092_b.jpg\"/></figure><p>调用open方法之后调用xhr.setRequestHeader(header, value)，也不一定非要调用它。调用这个方法可以在请求体头部设置头部字段，比如把header的值设为content-type 。如果当前这个请求是表单编码的、文件上传</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-901686505e89758e929e119537aba1f2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"843\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb\" width=\"843\" data-original=\"https://pic3.zhimg.com/v2-901686505e89758e929e119537aba1f2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;843&#39; height=&#39;170&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"843\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"843\" data-original=\"https://pic3.zhimg.com/v2-901686505e89758e929e119537aba1f2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-901686505e89758e929e119537aba1f2_b.jpg\"/></figure><p>3、调用send方法，readyState=2，正式向服务器端发送请求。xhr.send([data = null])向服务器端发送请求的请求体里的数据。这个数据可以是string类型，也可以是formdata类型的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b428bcad9ec48df91268e6f6a86c31aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"225\" class=\"origin_image zh-lightbox-thumb\" width=\"835\" data-original=\"https://pic3.zhimg.com/v2-b428bcad9ec48df91268e6f6a86c31aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;835&#39; height=&#39;225&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"225\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"835\" data-original=\"https://pic3.zhimg.com/v2-b428bcad9ec48df91268e6f6a86c31aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b428bcad9ec48df91268e6f6a86c31aa_b.jpg\"/></figure><p>4、当服务器端开始返回数据的时候，浏览器接收到这个数据，readyState=3。</p><p>5、浏览器端结束请求时，readyState=4，status=200，responseText=&lt;!DOCTYPE html&gt;</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-74648008cd45d685aecbf017bff8ae9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"901\" data-original=\"https://pic3.zhimg.com/v2-74648008cd45d685aecbf017bff8ae9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;901&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"901\" data-original=\"https://pic3.zhimg.com/v2-74648008cd45d685aecbf017bff8ae9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-74648008cd45d685aecbf017bff8ae9e_b.jpg\"/></figure><p>在HTTP2.0的标准里面，我们还可以监听它的xhr.onload事件，可以代替onreadystatechange事件，当readyState=4,&amp;&amp;status=200的时候才会触发。</p><p><b>请求参数序列化：</b></p><p>如果是get请求：需要把查询参数作为字符串，跟在URL后面，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7653fdd1618a840db8a0d484fb582998_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"789\" data-rawheight=\"117\" class=\"origin_image zh-lightbox-thumb\" width=\"789\" data-original=\"https://pic1.zhimg.com/v2-7653fdd1618a840db8a0d484fb582998_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;789&#39; height=&#39;117&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"789\" data-rawheight=\"117\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"789\" data-original=\"https://pic1.zhimg.com/v2-7653fdd1618a840db8a0d484fb582998_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7653fdd1618a840db8a0d484fb582998_b.png\"/></figure><p>如果这个查询参数是个对象，就需要把这个对象转换成这样一个字符串。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9d450df1623e9a6a5dcd7ea34d847541_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"762\" data-original=\"https://pic2.zhimg.com/v2-9d450df1623e9a6a5dcd7ea34d847541_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;762&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"762\" data-original=\"https://pic2.zhimg.com/v2-9d450df1623e9a6a5dcd7ea34d847541_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9d450df1623e9a6a5dcd7ea34d847541_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-22881a172bee4879896345a179809c47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"463\" data-original=\"https://pic4.zhimg.com/v2-22881a172bee4879896345a179809c47_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;463&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"463\" data-original=\"https://pic4.zhimg.com/v2-22881a172bee4879896345a179809c47_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-22881a172bee4879896345a179809c47_b.jpg\"/></figure><p>通过这个函数，我们传入一个对象，就会返回我们需要的那个字符串。</p><p>GET请求参数序列化</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7e56ef4a57a98f489eec148f274e1ce5_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"910\" data-original=\"https://pic2.zhimg.com/v2-7e56ef4a57a98f489eec148f274e1ce5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;910&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"910\" data-original=\"https://pic2.zhimg.com/v2-7e56ef4a57a98f489eec148f274e1ce5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7e56ef4a57a98f489eec148f274e1ce5_b.png\"/></figure><p>请求体里为null。</p><p>POST请求参数序列化</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-97197bef674cba1ade9d47c89aa2f18f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"106\" class=\"origin_image zh-lightbox-thumb\" width=\"882\" data-original=\"https://pic4.zhimg.com/v2-97197bef674cba1ade9d47c89aa2f18f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;882&#39; height=&#39;106&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"106\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"882\" data-original=\"https://pic4.zhimg.com/v2-97197bef674cba1ade9d47c89aa2f18f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-97197bef674cba1ade9d47c89aa2f18f_b.png\"/></figure><p>查询参数会作为send的参数。</p><p><b>同源策略：</b></p><p>两个页面拥有相同的协议（protocol）、端口（port）、主机（host），那么这两个页面就属于同一个源（origin）。</p><p>如果不满足同源策略的访问，称为：<b>跨域资源访问，</b>W3C定义了CORS，现代浏览器已经实现了对CORS的支持。</p><p>CORS标准的原理：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8c440aaf324f2e86e06b0ee7bd7a417d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"897\" data-original=\"https://pic2.zhimg.com/v2-8c440aaf324f2e86e06b0ee7bd7a417d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;897&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"897\" data-original=\"https://pic2.zhimg.com/v2-8c440aaf324f2e86e06b0ee7bd7a417d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8c440aaf324f2e86e06b0ee7bd7a417d_b.jpg\"/></figure><p>1、浏览器会捕获到A应用往S服务器发起的请求；</p><p>2、浏览器根据请求的情况，确定是否需要先作为一次预请求来验证S服务器是否允许发送当前请求过去、如果需要的话，浏览器会发起一个option的请求到S服务器来验证；</p><p>3、S服务器会根据浏览器发过来的header信息，验证S服务器对资源的配置信息，然后返回资源的实际控制配置权限，然后浏览器验证请求返回的信息，判断是否将请求发送到S服务器，4、如果可以的话就发送实际的请求到S服务器；如果不行，则异常退出。</p><p>4、如果不需要就跳过第三步；</p><p>5、S服务器返回请求数据及资源的配置信息至浏览器，然后浏览器验证资源的控制信息是否允许当前实际请求取到数据，</p><p>6、如果允许，则发送S服务器，返回数据给A应用。否则就异常退出。</p><p>其他跨域技术：</p><p>Frame代理</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-35a5231ebaff2943c11d47947a77fb89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb\" width=\"867\" data-original=\"https://pic2.zhimg.com/v2-35a5231ebaff2943c11d47947a77fb89_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;867&#39; height=&#39;419&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"867\" data-original=\"https://pic2.zhimg.com/v2-35a5231ebaff2943c11d47947a77fb89_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-35a5231ebaff2943c11d47947a77fb89_b.jpg\"/></figure><p>1、A应用要往S服务器取数据时，它会先用iframe请求S服务器上的代理文件，</p><p>2、S服务器返回了配置的代理文件，并载入iframe，</p><p>3、代理文件载入完成后，A应用将发送的请求通过消息、通信的方式传递给代理文件；</p><p>4、代理文件验证A应用是否在预先配置的白名单中，如果在则直接发送请求至S服务器，否则异常退出；</p><p>5、服务器返回数据至代理文件，</p><p>6、代理文件通过消息机制将请求的结果返回给A应用。</p><p>frame代理优点：1、参照cors标准，2、支持各种请求方法、</p><p>缺点：需要在目标服务器放置代理文件，它由于首次发起请求需要载入代理文件，在载入代理文件之前的所有请求都会存在一定的延迟，对于低版本浏览器受限于消息通信机制的限制，并发量大的请求返回时可能存在较大的延迟。</p><p>JSONP</p><p>JSON with padding（填充式JSON）</p><p>利用的是script可以跨域，利用script标签，向服务器请求一段JS代码，然后执行这段JS代码，实现跨域。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2d6c2ef2af615d628b0c25e438608478_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"886\" data-original=\"https://pic1.zhimg.com/v2-2d6c2ef2af615d628b0c25e438608478_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;886&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"886\" data-original=\"https://pic1.zhimg.com/v2-2d6c2ef2af615d628b0c25e438608478_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2d6c2ef2af615d628b0c25e438608478_b.jpg\"/></figure><p>服务器就会返回一个叫json.js的一个文件，这个js文件里就是一段JS代码。执行handleResponse这个函数。response就是要从服务器端拿取得数据。</p><p>Comet</p><p>Web Sockets等</p>", 
            "topic": [
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56292968", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 2, 
            "title": "DOM总结：事件", 
            "content": "<p><b>什么是DOM事件：</b>点击一个DOM元素、键盘按下一个键、输入框输入内容、当页面加载完成时，都会触发DOM事件。</p><h2><b>事件流：</b>DOM事件处理执行的过程。</h2><p>capture phase：从DOM最顶端也就是window开始往下捕获，直到捕获到触发这个事件的节点的父元素。</p><p>target phase：目标节点（事件处理节点）的事件触发过程。</p><p>bubble phase：当前节点的父节点开始，冒泡到顶层的window对象。</p><p>并非所有浏览器都有这三个过程，在IE低版本中没有捕获过程。有些事件没有冒泡过程，比如页面的load事件。</p><p>如何去捕获一个事件？如何去处理这个事件？DOM事件流的这三个阶段，无论注册到事件流过程中的任意一个节点，都会被触发。</p><h2><b>事件注册与触发：</b></h2><p><b>事件注册：</b>eventTarget.addEventListener(type, listener[,useCapture]) 作用于一个DOM元素，有三个参数（事件类型、事件处理函数，可选参数：是否是捕获过程，默认处理的是冒泡过程）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d5dcff1ab633dd7eb7d5da15d2429ff9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-d5dcff1ab633dd7eb7d5da15d2429ff9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;570&#39; height=&#39;228&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-d5dcff1ab633dd7eb7d5da15d2429ff9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d5dcff1ab633dd7eb7d5da15d2429ff9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3170b081df0a4ec70c61043d120ee12a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"517\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb\" width=\"517\" data-original=\"https://pic3.zhimg.com/v2-3170b081df0a4ec70c61043d120ee12a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;517&#39; height=&#39;431&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"517\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"517\" data-original=\"https://pic3.zhimg.com/v2-3170b081df0a4ec70c61043d120ee12a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3170b081df0a4ec70c61043d120ee12a_b.jpg\"/></figure><p><b>取消事件注册：</b>eventTarget.removeEventListener(type, listener[,useCapture])</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5a2a1487cfc58ba7148d677a16932d4f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"57\" class=\"origin_image zh-lightbox-thumb\" width=\"472\" data-original=\"https://pic4.zhimg.com/v2-5a2a1487cfc58ba7148d677a16932d4f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;472&#39; height=&#39;57&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"57\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"472\" data-original=\"https://pic4.zhimg.com/v2-5a2a1487cfc58ba7148d677a16932d4f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5a2a1487cfc58ba7148d677a16932d4f_b.png\"/></figure><p><b>事件触发：</b>点击元素会触发、按下一个按键触发、用程序代码来触发，如何使用程序代码来触发？eventTarget.dispatchEvent(type)  创建 -&gt; 初始化-&gt; 派发  document.createEvent( ) -&gt; event.initEvent( ) -&gt; element.dispatchEvent( )</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fe047d659ba279a8780bb5eeee07868a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb\" width=\"467\" data-original=\"https://pic3.zhimg.com/v2-fe047d659ba279a8780bb5eeee07868a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;467&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"467\" data-original=\"https://pic3.zhimg.com/v2-fe047d659ba279a8780bb5eeee07868a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fe047d659ba279a8780bb5eeee07868a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3ac3e35bf75ecb1108b204c4c13b568f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"571\" data-original=\"https://pic4.zhimg.com/v2-3ac3e35bf75ecb1108b204c4c13b568f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;571&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"571\" data-original=\"https://pic4.zhimg.com/v2-3ac3e35bf75ecb1108b204c4c13b568f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3ac3e35bf75ecb1108b204c4c13b568f_b.jpg\"/></figure><p>IE8及以下：1、事件注册与取消--attchEvent/detachEvent   2、 事件触发--fireEvent(e)   3、nocapture 只能处理冒泡阶段</p><p><b>事件对象：</b>事件被触发的时候会调用事件处理函数，在调用事件处理函数的时候引擎会传入一些信息，这些信息就代表了当前事件的一些状态，这个就是事件对象。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-89ce757b38c202c0b180b53fb5570682_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"495\" data-original=\"https://pic3.zhimg.com/v2-89ce757b38c202c0b180b53fb5570682_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;495&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"495\" data-original=\"https://pic3.zhimg.com/v2-89ce757b38c202c0b180b53fb5570682_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-89ce757b38c202c0b180b53fb5570682_b.jpg\"/></figure><p>事件对象<b>属性</b>：</p><p><b>type </b>-&gt; 事件类型          </p><p><b>target</b>（IE8及以下用srcElement）-&gt; 事件触发的节点  比如点击的是这个id为xxx的div </p><p><b>currentTarget </b>-&gt; 当前处理这个事件节点的函数 ，不一定要把事件注册在target上面，我们可注册在target父节点，当事件冒泡到target父节点的时候，仍然可以处理这个事件。如果把一个事件注册在target父节点的话，currentTarget就是父节点的元素。只有事件处于目标阶段的时候，currentTarget才和target一致。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7f11ebc526a823880ba64d8fccac0915_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"565\" data-original=\"https://pic2.zhimg.com/v2-7f11ebc526a823880ba64d8fccac0915_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;565&#39; height=&#39;596&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"565\" data-original=\"https://pic2.zhimg.com/v2-7f11ebc526a823880ba64d8fccac0915_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7f11ebc526a823880ba64d8fccac0915_b.jpg\"/></figure><p>事件对象<b>方法</b>：</p><p><b>stopPropagation：</b>阻止事件传播  IE8及以下用的是event.cancelBubble = true</p><p><b>preventDefault</b>：阻止默认行为，比如单击链接时，链接会打开，双击文字时，文字会被选中。IE8及以下使用 event.returnValue = false</p><p><b>stopImmediatePropagation</b>：也是阻止冒泡，但是实际上是做了两件事：1.阻止事件向父节点传播；2.阻止当前节点的后续事件，如果当前节点还别的事件，后面注册的事件就不会被触发。</p><h2><b>DOM事件分类及继承关系：</b></h2><p><b>Event事件</b>：load、unload、error、select、abort</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7770d495548c523dd3c3bdd1b2657c1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"905\" data-original=\"https://pic4.zhimg.com/v2-7770d495548c523dd3c3bdd1b2657c1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;905&#39; height=&#39;336&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"905\" data-original=\"https://pic4.zhimg.com/v2-7770d495548c523dd3c3bdd1b2657c1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7770d495548c523dd3c3bdd1b2657c1b_b.jpg\"/></figure><p>Event事件常见处理DOM元素：<b>window </b>load（页面加载完成触发），unload（页面中的链接被点击把用户带到了另外一个页面，当前这个页面就会被卸载），error（当浏览器出现异常的时候），abort（取消的时候）</p><p><b>Image </b> load（图片加载完了），error（出错的时候），abort（图片正在加载，点击esc）</p><p><b>UIEvent事件</b>：从Event事件继承过来，有所有的属性和方法，属于UIE的 resize、scroll</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-be0528719614e56ef98f91ffc5bc2491_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"901\" data-original=\"https://pic2.zhimg.com/v2-be0528719614e56ef98f91ffc5bc2491_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;901&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"901\" data-original=\"https://pic2.zhimg.com/v2-be0528719614e56ef98f91ffc5bc2491_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-be0528719614e56ef98f91ffc5bc2491_b.png\"/></figure><p>改变大小的时候，会触发resize。页面的默认滚动条和DIV，如果是在div中，可以冒泡。如果是在document上面，比如是在window上处理的，最外层的个月滚动事件，这时候是不能被冒泡的。</p><p><b>FocusEvent</b>：blur、focus、focusin（即将获得焦点）、focusout 聚焦事件，从UIE事件继承</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d7ed97ac22fbedf3619873c51b225bc3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb\" width=\"897\" data-original=\"https://pic4.zhimg.com/v2-d7ed97ac22fbedf3619873c51b225bc3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;897&#39; height=&#39;233&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"897\" data-original=\"https://pic4.zhimg.com/v2-d7ed97ac22fbedf3619873c51b225bc3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d7ed97ac22fbedf3619873c51b225bc3_b.jpg\"/></figure><p>FocusEvent扩展的属性：relatedTarget，当一个元素失去焦点时，另一个元素就要获得焦点。获得焦点的这个元素就是relatedTarget。</p><p><b>InputEvent</b>：从UIE继承，还有beforeinput、input</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d45b8212a600ae276bb525f85754b50a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https://pic3.zhimg.com/v2-d45b8212a600ae276bb525f85754b50a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;902&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"902\" data-original=\"https://pic3.zhimg.com/v2-d45b8212a600ae276bb525f85754b50a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d45b8212a600ae276bb525f85754b50a_b.jpg\"/></figure><p>IE8及以下没有input事件，通常 onpropertychange（）来代替。</p><p><b>KeyboardEvent</b>：从UIE继承，keydown、keyup</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ac2d03219af19d142b67e9009e0bd0cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb\" width=\"908\" data-original=\"https://pic1.zhimg.com/v2-ac2d03219af19d142b67e9009e0bd0cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;908&#39; height=&#39;190&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"908\" data-original=\"https://pic1.zhimg.com/v2-ac2d03219af19d142b67e9009e0bd0cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ac2d03219af19d142b67e9009e0bd0cc_b.jpg\"/></figure><p>属性：key：代表按下的某个键  code：按键码  ctrlKey、shiftKey、altKey、metaKey（标识有没有被按下去） repeat：一个键按着一直不动 就是true</p><p>keyCode、charCode、which: 现代浏览器 可以通过这个来获得键盘的ASCII码</p><p><b>MouseEvent</b>：从UIE继承，最常见的一类。click、dbclick、mousedown、mouseenter、mouseleave、mousemove、mouseout、mouseover、mouseup</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-70942916f8e3e4fb4c416c6c59051702_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb\" width=\"880\" data-original=\"https://pic3.zhimg.com/v2-70942916f8e3e4fb4c416c6c59051702_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;880&#39; height=&#39;457&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"880\" data-original=\"https://pic3.zhimg.com/v2-70942916f8e3e4fb4c416c6c59051702_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-70942916f8e3e4fb4c416c6c59051702_b.jpg\"/></figure><p>mouseover：鼠标移到div上，这个div里面可能还有子元素，在div里面移动时有可能会移动到这个div里面的子元素上去，这样都可以出发mouseover事件。</p><p>mouseenter：只有鼠标移动到div时，被嵌套的元素是不会触发mouseenter的。</p><p>mouseleave和mouseout，和上述一样。</p><p>MouseEvent对象<b>属性</b>：clientX、clientY、screenX、screenY、ctrlKey、shiftKey、altKey、metaKey，当这些事件触发的时候，键盘上的键是被按下去的，就是true。button（0, 1, 2）是按下了鼠标的左键、中键、右键。</p><p>MouseEvent<b>顺序</b>：</p><p>从元素A上方移过 </p><p>mousemove -&gt; mouseover(A) -&gt; mouseenter(A) -&gt; mousemove(A) -&gt; mouseout(A) -&gt; mouseleave(A)</p><p>点击元素A</p><p>mousedown -&gt; [mousemove] -&gt; mouseup -&gt; click</p><p>看一个div拖拽实例：有很多需要完善的地方，先看个大概。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-427d86339f1f3f52a605d3391689c080_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb\" width=\"533\" data-original=\"https://pic1.zhimg.com/v2-427d86339f1f3f52a605d3391689c080_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;533&#39; height=&#39;559&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"533\" data-original=\"https://pic1.zhimg.com/v2-427d86339f1f3f52a605d3391689c080_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-427d86339f1f3f52a605d3391689c080_b.jpg\"/></figure><p><b>WheelEvent</b>：从MouseEvent继承过来。wheel 鼠标滚轮事件</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7f8f3c910ec4e80579c9a42c741ee168_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"905\" data-original=\"https://pic1.zhimg.com/v2-7f8f3c910ec4e80579c9a42c741ee168_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;905&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"905\" data-original=\"https://pic1.zhimg.com/v2-7f8f3c910ec4e80579c9a42c741ee168_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7f8f3c910ec4e80579c9a42c741ee168_b.png\"/></figure><p>WheelEvent对象属性： deltaMode（delta值的单位）  deltaX（鼠标滚轮在X轴的偏移量）、deltaY、deltaZ</p><h2><b>事件代理：</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7fa7f11aeab27681bdb27439f23ddc3b_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"155\" data-rawheight=\"150\" class=\"content_image\" width=\"155\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;155&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"155\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"155\" data-actualsrc=\"https://pic4.zhimg.com/v2-7fa7f11aeab27681bdb27439f23ddc3b_b.png\"/></figure><p>现在有个需求，给每个li注册一个事件，但是因为li比较多，我们可以给ul注册。这种将事件注册到元素的父节点上，就称为：事件代理。</p><p>好处：不用注册那么多事件，内存分配的更少。</p><p>不足：如果handler很多，放在父元素上管理起来会很复杂。</p>", 
            "topic": [
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56272831", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "DOM总结：文档树、节点操作、属性操作、样式操作", 
            "content": "<p>1、<b>DOM的概念</b>：由JS节点对象组成的层次结构、层次树。一系列API规范。节点（Node）对应的API，这些API可以操作节点。这样就可以动态的修改节点。Document节点，继承自Node节点。通过这些API可以操作DOM树。DOM是HTML文档对象的表示。</p><p>2、<b>DOM和JS的关系</b>：JS可以通过调用DOM来操作浏览器和页面的结构样式等。</p><p>3、<b>DOM包含</b>：DOM core（DOM核心定义、API的定义） 、 DOM HTML（HTML如何转换成对象） 、DOM style（样式如何转化为对象）、 DOM Event（事件对象的模型，让页面相应用户的操作）</p><p>4、<b>节点遍历：</b>node.parent、 firstChild、lastChild、previousSibling、nextSibling，没有的话就返回null，通过这些属性，我们就可以遍历DOM树，获取我们想获取的节点。</p><p>5、<b>节点类型</b>：ELEMENT_NODE   TEXT_NODE</p><p>6、<b>元素节点的遍历：</b>firstElementChild、lastElementChild、nextElementSibling、previousElementSibling、（现在没有再让兼容IE8以下的吧？）</p><p>7、<b>节点操作</b>：<b>（获取）</b>getElementById、getElementsByClassName、getElementsByTagName、querySelector(All)、</p><p>通过父子关系、兄弟关系获取节点的可维护性非常差，一旦节点的位置发生了变化，那么通过节点关系获取到的就不准确了。</p><p>在控制台中表示节点对象：选择器来表示 标签名id类 如 p#desc.para</p><p>语法:  element = <i>document</i>.getElementById( &#39;id名&#39; )   只能在document上调用  返回值唯一</p><p>collection = element.getElementsByTagName( &#39;标签名&#39; )  得到的HTML集合是动态的 </p><p>collection = element.getElementsByClassName( &#39;类名&#39; ) 可以空格分割多个类名 获取到同时具有多个类名的元素  类名的顺序无关  （IE 9以上支持）</p><p>element /list = element.querySelector / All（&#39;选择器&#39;）（第一个符合条件的元素，返回值唯一）（所有）list是静态的不是动态的，一旦获取之后就不会变化了。后面做了修改，对list是没有影响的。（IE 9以上支持）</p><p><b>（创建）</b>createElement、</p><p>语法：element = <i>document</i>.createElement(&#39;标签名&#39;)</p><p><b>（修改）</b>textContent、innerText</p><p>element.textContent  节点及其后代节点的文本内容 直接赋值既是修改 （IE9+支持）</p><p>element.innerText  和textContent一模一样  但是不规范 FF不支持</p><p><b>（插入）</b>appendChild、 insertBefore、</p><p>语法：var achild = element.appendChild(achild)  指定的元素 追加achild</p><p>var achild = element.insertBefore(achild, referenceChild) 在指定元素的指定前面插入</p><p><b>（删除）</b>removeChild、 innerHTML</p><p>语法：child = element.removeChild(child)</p><p>element.innerHTML 是节点的HTML内容， 让其等于空 ，就相当于批量删除了这些节点</p><p>为其赋值， 既完成了创建节点也完成了插入节点</p><p>如果+= ，直接连接一些节点会出现问题：因为是相当于创建了一批新的节点，原来的节点上的事件和样式全都被清掉了。原来的变量和事件就不能被回收。</p><p>内存泄漏（低版本的浏览器）、安全问题</p><p>建议仅用于新节点，内容可控，尽量不要让用户填写内容，就算需要，也不要让用户填写标签。</p><h2>8、<b>属性操作</b></h2><p>HTML attribute =&gt; DOM property </p><p>HTML属性 和DOM属性 对应关系  通过JS来修改DOM属性，就能完成属性的操作</p><p>id =&gt; &#39;userName&#39;  className（名称异常） =&gt; &#39;desc&#39;</p><p>property accessor<b> 属性访问器 </b>操作对象</p><p>（读）input.className  （写）input.value =&#39;xxx&#39;   </p><p>属性值类型：string number Boolean function 通过属性访问符访问到的属性，是转换过的实用对象。如果结果是string，继续保留为string，如果是数字，会把string转换成number</p><p>用属性访问器访问属性特点：<b>通用性差</b>-名字异常 <b> 扩展性差</b>--每增加一个HTML属性，DOM就会增加 好处是：<b>取到的是实用对象，</b>我们可以直接使用。</p><p><b>getAttribute、setAttribute</b></p><p>（读）var attribute = element.getAttribute(attributeName)  attributeName实一个字符串，我们可以规避名字异常的问题</p><p>（写）var element.setAttribute(name, value)</p><p>属性值类型：string  得到的是属性的字符串</p><p>特点：仅仅是字符串的操作、但是通用性好</p><p>两种方法比较：如果是纯字符串的操作，建议还是用getAttribute或setAttribute</p><p><b>dataset（IE11才支持）</b></p><p>HTMLElement.dataset   是HTML元素上增加的一个属性</p><p>它是data-xxx属性集  一个集合 div.dataset</p><p>作用：元素上保存数据  一般做自定义的数据属性</p><h2><b>9、样式操作</b></h2><p>用户交互之后引起了页面当中一个元素或者一批元素样式发生了变化，也就是通过JS来修改样式。</p><p>CSS =&gt; DOM</p><p>link 引入css文件，可以通过element.sheet来修改</p><p>style 内嵌样式表  =&gt; element.sheet  </p><p>样式规则列表 =&gt;  element.sheet.cssRules[i] 可以通过下标来获取  element.sheet.cssRules[i].style =&gt; 属性名和属性值的键值对 element.sheet.cssRules[i].selectorText =&gt; 选择器element.sheet.cssRules[i].style.lineHeight =&gt; 对应的属性值 </p><p>.style -&gt; CSSStyleDeclaration 这个类的一个对象</p><p>整张页面  所有的样式表（外部CSS和内嵌样式表） =&gt; document.styleSheets</p><p>标签内联样式 =&gt; element.style</p><p>.style -&gt; CSSStyleDeclaration CSS属性名和属性值的键值对列表</p><p><b> 更新样式：</b></p><p>element.style.color = &#39;#f0f&#39;  </p><p>问题：更新一个属性需要一条语句、不是我们熟悉的CSS</p><p><b>element.style.cssText</b> = &#39;color: #f0f; margin:10px&#39; 这样一条语句就可以完成</p><p>但是这两种方法都有个不好的地方：样式混在逻辑中</p><p>我们推荐采用<b>更新class的</b>方法</p><p>element.className += &#39;需要更新的属性名&#39;</p><p>一次性修改大量CSS，我们可以更换样式表。</p><p><b>获取样式</b></p><p>element.style=&gt; 只能获取内联样式element.style.color</p><p>style获取到的不一定是实际的样式值</p><p>window.getComputedStyle()（&gt;=IE9）（IE9使用element.currentStylel来做兼容，单不符合规范）</p><p>var style = window.getComputedStyle(element<i>,[,pseudoElt</i>])传入你想获取样式的元素，和很少用到的伪类  获取到的这个style是只读属性，不能去修改。</p><p>document.styleSheets =&gt; StyleSheetList  StyleSheetList [i]=&gt;CSSStyleSheet(具体的样式表，含CSSRules) CSSRules-&gt; CSSRulesList的一个对象  可以通过下标获取它的元素</p><p>CSSRulesList[i] -&gt; CSSStyleRule(style,selectorText) </p><p> style-&gt;样式的声明CSSStyleDeclaration （ color margin ）</p><p>element.style -&gt; CSSStyleDeclaration </p><p>window.getComputedStyle()-&gt; CSSStyleDeclaration </p><p>link.sheet -&gt; CSSStyleSheet的一个对象  内嵌的style.sheet 也是-&gt; CSSStyleSheet</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4fff1f25d873b094725c0432a6bacb87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"567\" class=\"origin_image zh-lightbox-thumb\" width=\"1360\" data-original=\"https://pic4.zhimg.com/v2-4fff1f25d873b094725c0432a6bacb87_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1360&#39; height=&#39;567&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"567\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1360\" data-original=\"https://pic4.zhimg.com/v2-4fff1f25d873b094725c0432a6bacb87_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4fff1f25d873b094725c0432a6bacb87_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }, 
                {
                    "tag": "DOM", 
                    "tagLink": "https://api.zhihu.com/topics/19579804"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56252620", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》综合案例", 
            "content": "<p>这本书到了最后一章了，一起来做一下这个小案例吧！</p><p><b>结构：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-767d165434d6a3a640045a993cc0e82e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"499\" class=\"origin_image zh-lightbox-thumb\" width=\"822\" data-original=\"https://pic3.zhimg.com/v2-767d165434d6a3a640045a993cc0e82e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;822&#39; height=&#39;499&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"499\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"822\" data-original=\"https://pic3.zhimg.com/v2-767d165434d6a3a640045a993cc0e82e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-767d165434d6a3a640045a993cc0e82e_b.jpg\"/></figure><p>虽然每个页面的内容不一样，但是它们都要使用相同的基本结构，为这些页面创建一个模板。</p><p>看下我们的页面：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d9f14eb09ddb68fa54e01b332ba57370_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"642\" class=\"origin_image zh-lightbox-thumb\" width=\"985\" data-original=\"https://pic1.zhimg.com/v2-d9f14eb09ddb68fa54e01b332ba57370_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;985&#39; height=&#39;642&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"642\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"985\" data-original=\"https://pic1.zhimg.com/v2-d9f14eb09ddb68fa54e01b332ba57370_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d9f14eb09ddb68fa54e01b332ba57370_b.jpg\"/></figure><p>现在我们来写JS：</p><p>让当前导航高亮</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-493a088c8fc00431f97f11e93b30245e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"561\" data-original=\"https://pic3.zhimg.com/v2-493a088c8fc00431f97f11e93b30245e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;561&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"561\" data-original=\"https://pic3.zhimg.com/v2-493a088c8fc00431f97f11e93b30245e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-493a088c8fc00431f97f11e93b30245e_b.jpg\"/></figure><p>这个案例，只做了一个页面，实现了两个小功能：</p><p>1。当前导航高亮；2.鼠标经过，有相应动画来显示相应的图片。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e076e467708622af6bb195bba000f913_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://pic4.zhimg.com/v2-e076e467708622af6bb195bba000f913_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1185&#39; height=&#39;644&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1185\" data-original=\"https://pic4.zhimg.com/v2-e076e467708622af6bb195bba000f913_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e076e467708622af6bb195bba000f913_b.jpg\"/></figure><p>demo地址：</p><a href=\"https://link.zhihu.com/?target=https%3A//miyawang.github.io/DOM-demo/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-651a3fe539bfae8e984c61ae83a1c1ae_180x120.jpg\" data-image-width=\"600\" data-image-height=\"450\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">template</a><p class=\"ztext-empty-paragraph\"><br/></p><p>这本书，就这么结束了~</p><p></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56252013", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》HTML5", 
            "content": "<p>这章很水，稍微了解下就好。</p><p>这一章介绍了HTML的几个标签，canvas、视频、音频和表单。目前我工作中貌似没用过canvas和视频。。。</p><p>HTML5提供的这几个交互及媒体元素，很多都带有自己的JS和DOM API。</p><p>在行为层，HTML5规定了DOM中每个新元素的交互方式，以及新的API。</p><p><b>canvas：可以动态创建和操作图形图像。</b></p><p>本质上来说：canvas涉及的数学及定位概念与AI等基于矢量的图形软件或者基于矢量的编程语言没有太大的差别。</p><p>我把这块略过了，因为我用不上。。。</p><p>canvas不仅仅能够用来绘制矢量路径，还可以通过它来显示和操作位图图像。</p><p>这个元素和flash一样，都不具备可访问性，会给那些用户带来同样的烦恼。</p><p><b>video和audio</b></p><p>在每个影片容器中，音频和视频轨道都使用不同的编解码器来编码，编解码器决定了浏览器在播放时应该如何解码音频和视频。编解码器的核心就是一个算法，用于压缩和存储视频，以减少原始文件的大小，同时可能会也可能不会损失品质。</p><p>为了确保HTML5的最大兼容性，至少要包含三个版本：mp4、webM、ogg</p><p><b>表单 新的输入控件类型：email、URL、date、number、range、search、tel、color</b></p><p><b>新的属性：autocomplete、autofocus、form、min、max、step、pattern、placeholder、required</b></p><p><b>这些属性把原来很多由DOM脚本负责的任务都转移给了浏览器。</b></p><p><b>其他特性：</b></p><p><b>1。使用localstorage和sessionStorage在客户端存储大型和复杂数据集的更有效方案；</b></p><p><b>2。使用webSocket与服务器端脚本进行开放的双向通信；</b></p><p><b>3。使用web worker在后台执行JS；</b></p><p><b>4。标准化的拖放实现；</b></p><p><b>5。在浏览器中实现地理位置服务。</b></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56244961", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》动画的基础知识", 
            "content": "<p>后面这三章，其实没有什么内容了，但是本着有始有终的态度，还是认认真真把它记录完。</p><p>今天除夕，戊戌年马上结束了，砖还得继续搬，书也得继续读，笔记还得继续记，新的技术还得继续学。要问我为啥开始玩DOM，其实是框架永久了，怕自己把原生的东西全都忘记了，也因为心情有些浮躁了，想静下心来脚踏实地的重学一遍前端。</p><p>动画就是让元素的<b>位置</b>随着<b>时间</b>而<b>不断地</b>发生变化。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6d7132704857779f6b7617cef1800deb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"618\" class=\"origin_image zh-lightbox-thumb\" width=\"662\" data-original=\"https://pic4.zhimg.com/v2-6d7132704857779f6b7617cef1800deb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;662&#39; height=&#39;618&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"618\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"662\" data-original=\"https://pic4.zhimg.com/v2-6d7132704857779f6b7617cef1800deb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6d7132704857779f6b7617cef1800deb_b.jpg\"/></figure><p>现在让它变得更通用：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-236787c6f8b2cf5bc622e79e28baed76_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"619\" class=\"origin_image zh-lightbox-thumb\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-236787c6f8b2cf5bc622e79e28baed76_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;634&#39; height=&#39;619&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"619\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-236787c6f8b2cf5bc622e79e28baed76_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-236787c6f8b2cf5bc622e79e28baed76_b.jpg\"/></figure><p>根据用户行为移动一个页面元素可能起到增强网页的效果。</p><p>当用户把鼠标指针悬停在其中的某个链接上时，我们想用一种先睹为快的方式告诉用户这个链接将把他们带往哪里。</p><p>静态如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d2aa8a8fe16163d86304fec58bff8c73_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"678\" data-original=\"https://pic4.zhimg.com/v2-d2aa8a8fe16163d86304fec58bff8c73_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;678&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"678\" data-original=\"https://pic4.zhimg.com/v2-d2aa8a8fe16163d86304fec58bff8c73_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d2aa8a8fe16163d86304fec58bff8c73_b.jpg\"/></figure><p>简单处理下样式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0a82f67b079a7b6dae8d6d872cb78f25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"741\" data-original=\"https://pic2.zhimg.com/v2-0a82f67b079a7b6dae8d6d872cb78f25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;741&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"741\" data-original=\"https://pic2.zhimg.com/v2-0a82f67b079a7b6dae8d6d872cb78f25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0a82f67b079a7b6dae8d6d872cb78f25_b.jpg\"/></figure><p>现在我们让这个网页对用户的操作行为做出正确的响应。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-aec602bb1fb6c34c5ce1b5f3ab966716_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-aec602bb1fb6c34c5ce1b5f3ab966716_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;485&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-aec602bb1fb6c34c5ce1b5f3ab966716_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-aec602bb1fb6c34c5ce1b5f3ab966716_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>基本效果实现了，但是还有很多不足，比如：抖动。。渣电脑遇到个定时器已经死机两次，暂时跳过动画。。。</p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56080882", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》CSS-DOM", 
            "content": "<p>三位一体的网页，不再重复了啊，结构层，表示层和行为层。</p><p>这三种技术之间存在着一些潜在的重叠区域，CSS正在利用伪类走进DOM的领地。</p><h2><b>style属性</b></h2><p>文档中每个元素都是一个对象，每个对象又有着各种各样的属性。每个元素节点还有一个style属性，包含着元素的样式，查询这个属性，将返回一个对象，而不是一个简单的字符串。样式都存放在这个style对象的属性里。</p><p><a href=\"https://link.zhihu.com/?target=http%3A//element.style.property/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">element.style.property</a> </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-abdc15e8464fd098f5ac24d4f823dee9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1214\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb\" width=\"1214\" data-original=\"https://pic2.zhimg.com/v2-abdc15e8464fd098f5ac24d4f823dee9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1214&#39; height=&#39;276&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1214\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1214\" data-original=\"https://pic2.zhimg.com/v2-abdc15e8464fd098f5ac24d4f823dee9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-abdc15e8464fd098f5ac24d4f823dee9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5e1fdc27c1b2978f722f3b635fa63719_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"162\" class=\"origin_image zh-lightbox-thumb\" width=\"704\" data-original=\"https://pic2.zhimg.com/v2-5e1fdc27c1b2978f722f3b635fa63719_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;704&#39; height=&#39;162&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"162\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"704\" data-original=\"https://pic2.zhimg.com/v2-5e1fdc27c1b2978f722f3b635fa63719_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5e1fdc27c1b2978f722f3b635fa63719_b.jpg\"/></figure><p>tip: 减号和加号之类的操作符是保留字符，不允许用在函数或者变量的名字里。同时也不能用在方法或属性的名字里，当我们需要用到中间有减号的CSS属性时，DOM要求必须用驼峰命名法。</p><p>不管CSS样式属性的名字里有多少个连字符，DOM一律采用驼峰命名法来表示它们。</p><p>DOM在表示样式属性时采用的单位并不总是与它们在CSS样式表里的设置相同。如颜色，在CSS样式表中用十六进制，在某些浏览器中，color属性以RGB返回。</p><p>不过绝大部分样式属性的返回值与它们的设置值都采用同样的计量单位。</p><p>通过style属性获取样式有很大的局限性，style属性只能返回内嵌样式。不能检索在外部CSS文件里表明的样式。在外部样式表里声明的样式不会进入style对象。</p><h2><b>如何改变样式</b></h2><p>许多DOM属性是只读的--只能用它们来获取信息，但不能用它们来设置或更新信息。</p><p>style对象的各个属性就都是可读写的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9c2c2dae087be2b89536bcd724cf7dae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"761\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb\" width=\"761\" data-original=\"https://pic3.zhimg.com/v2-9c2c2dae087be2b89536bcd724cf7dae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;761&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"761\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"761\" data-original=\"https://pic3.zhimg.com/v2-9c2c2dae087be2b89536bcd724cf7dae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9c2c2dae087be2b89536bcd724cf7dae_b.jpg\"/></figure><p>在使用CSS不方便的场合，还是可利用DOM对文档的样式做一些小的增强。</p><p><b>根据元素在节点树里的位置来设置样式</b></p><p><b>根据某种条件反复设置某种样式</b></p><p><b>响应事件</b></p><p>在很多场合，需要决定是采用纯粹的CSS来解决，还是利用DOM来设置样式，需要考虑：这个问题最简单的解决方法是什么；哪种解决方案会得到更多浏览器的支持。</p><p><b>className属性</b></p><p>elem.setAttribute(&#39;class&#39;,&#39;需要更换的类名&#39;)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f5e62f37da3073f42db82da7dbd77379_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-f5e62f37da3073f42db82da7dbd77379_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;549&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-f5e62f37da3073f42db82da7dbd77379_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f5e62f37da3073f42db82da7dbd77379_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-02c97e0800fb4ee5c2f710bfdcd4da26_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic3.zhimg.com/v2-02c97e0800fb4ee5c2f710bfdcd4da26_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic3.zhimg.com/v2-02c97e0800fb4ee5c2f710bfdcd4da26_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-02c97e0800fb4ee5c2f710bfdcd4da26_b.jpg\"/></figure><p>只要有可能，就应选择更新className属性，而不是去直接更新style对象的有关属性。</p><p>对函数进行抽象：把一个非常具体的东西改进为一个较为通用的东西的过程叫做抽象。</p><p></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56073178", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 1, 
            "title": "读书笔记《DOM编程艺术》充实文档内容", 
            "content": "<p><b>不应该做什么</b></p><p>如果我们觉察到自己正在使用DOM技术把一些重要的内容添加到网页上，则应该立刻停下来去检讨你的计划和思路。</p><p>两项原则：渐进增强--你应该总是从最核心的部分，也就是内容开始。应该根据内容使用标记实现良好的结构；然后再逐步加强这些内容。</p><p>平稳退化--渐进增强的实现必然支持平稳退化。</p><p><b>把“不可见”变成“可见”</b></p><p>display:none 这个元素仍然是DOM节点树的组成部分，只是浏览器不显示它们而已。</p><p>除了标签之间的内容以外，标签内的属性中也包含语义信息。绝大多数属性值在web浏览器里都是不显示的，只有极少数属性例外，但不同的浏览器在呈现这些例外的属性时却常常千姿百态。</p><p>本章：使用DOM技术为网页添加一些使用的小部件--得到隐藏在属性里的信息，创建标记封装这些信息，把这些标记插入到文档。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1a378c4bc62e5b52d8b2553821bf62dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"982\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"982\" data-original=\"https://pic2.zhimg.com/v2-1a378c4bc62e5b52d8b2553821bf62dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;982&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"982\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"982\" data-original=\"https://pic2.zhimg.com/v2-1a378c4bc62e5b52d8b2553821bf62dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1a378c4bc62e5b52d8b2553821bf62dd_b.jpg\"/></figure><p>缩略语&lt;abbr&gt;标签的title属性在浏览器里是隐藏的，不同的浏览器对缩略语的默认呈现行为也是各有各的做法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1a42e44a6518303607a490753b3c5d75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"892\" data-original=\"https://pic2.zhimg.com/v2-1a42e44a6518303607a490753b3c5d75_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;892&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"892\" data-original=\"https://pic2.zhimg.com/v2-1a42e44a6518303607a490753b3c5d75_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1a42e44a6518303607a490753b3c5d75_b.jpg\"/></figure><h2><b>为文档创建“缩略语列表”的函数</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fb4127fca4c128212736b71a122c7d4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb\" width=\"869\" data-original=\"https://pic2.zhimg.com/v2-fb4127fca4c128212736b71a122c7d4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;869&#39; height=&#39;921&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"869\" data-original=\"https://pic2.zhimg.com/v2-fb4127fca4c128212736b71a122c7d4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fb4127fca4c128212736b71a122c7d4d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dd63fc2cd3220d518d8f601228700a5a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"890\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb\" width=\"890\" data-original=\"https://pic3.zhimg.com/v2-dd63fc2cd3220d518d8f601228700a5a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;890&#39; height=&#39;582&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"890\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"890\" data-original=\"https://pic3.zhimg.com/v2-dd63fc2cd3220d518d8f601228700a5a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dd63fc2cd3220d518d8f601228700a5a_b.jpg\"/></figure><p><b>再检查兼容性</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f0e1cbdafb24103616d86a4114a28fad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"816\" class=\"origin_image zh-lightbox-thumb\" width=\"795\" data-original=\"https://pic2.zhimg.com/v2-f0e1cbdafb24103616d86a4114a28fad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;795&#39; height=&#39;816&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"816\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"795\" data-original=\"https://pic2.zhimg.com/v2-f0e1cbdafb24103616d86a4114a28fad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f0e1cbdafb24103616d86a4114a28fad_b.jpg\"/></figure><p>JS脚本只应该用来充实文档的内容，要避免使用DOM技术来创建核心内容。</p><p>本章还有其他内容：文献来源链接函数、快捷键清单函数，但因为用的很少，且思路类似，就略过了。</p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": [
                {
                    "userName": "未来码畜", 
                    "userLink": "https://www.zhihu.com/people/5ea5706a9c150920081880a29d3d6f7a", 
                    "content": "这里面好多做法的过时了，了解一下就行，不用那么较真", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "乌龙茶晚来秋", 
                            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
                            "content": "<p>嗯嗯，好的呢~谢谢~</p>", 
                            "likes": 0, 
                            "replyToAuthor": "未来码畜"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56027373", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》动态创建标记", 
            "content": "<p>不可否认，有很多东西确实过时了，但我重在过程，也就是本书的思维逻辑。</p><p>本章主要介绍JS用来改变网页的结构和内容的方法。</p><h2><b>传统方法：document.write()  innerHTML</b></h2><p><b>document.write()</b>方法可以方便快捷地把字符串插入到文档里。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-25609bf9fdf674ceeecf243e8da13bae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"83\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-25609bf9fdf674ceeecf243e8da13bae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;83&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"83\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-25609bf9fdf674ceeecf243e8da13bae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-25609bf9fdf674ceeecf243e8da13bae_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-27e90975472a7d9b1b6fe896e73bf8a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"889\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb\" width=\"889\" data-original=\"https://pic4.zhimg.com/v2-27e90975472a7d9b1b6fe896e73bf8a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;889&#39; height=&#39;236&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"889\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"889\" data-original=\"https://pic4.zhimg.com/v2-27e90975472a7d9b1b6fe896e73bf8a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-27e90975472a7d9b1b6fe896e73bf8a7_b.jpg\"/></figure><p>document.write的最大缺点就是它违背了“行为应该与标签分离”的原则。即使把document.write语句挪到外部函数里，也还是需要在标记的&lt;body&gt;部分使用&lt;script&gt;标签才能调用那个函数。这样的文档还很容易导致验证错误。</p><p>我们应该避免使用document.write方法。</p><p><b> innerHTML属性可以用来读、写 元素里的内容</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6b63794e2ad9a2ed4adc1df1f9fd1b98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic1.zhimg.com/v2-6b63794e2ad9a2ed4adc1df1f9fd1b98_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;673&#39; height=&#39;331&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"673\" data-original=\"https://pic1.zhimg.com/v2-6b63794e2ad9a2ed4adc1df1f9fd1b98_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6b63794e2ad9a2ed4adc1df1f9fd1b98_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4fd5f36bd9da422dad4f8068d5fbd0b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb\" width=\"879\" data-original=\"https://pic1.zhimg.com/v2-4fd5f36bd9da422dad4f8068d5fbd0b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;879&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"879\" data-original=\"https://pic1.zhimg.com/v2-4fd5f36bd9da422dad4f8068d5fbd0b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4fd5f36bd9da422dad4f8068d5fbd0b0_b.jpg\"/></figure><p>innerHTML属性无细节可言，要想获得细节，就必须使用DOM方法和属性。</p><p>给定的元素里是否有内容不重要，一旦使用了innerHTML属性，它的全部内容都将被替换。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0a165ae28148b767cbe7e8a7d7afa862_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb\" width=\"768\" data-original=\"https://pic3.zhimg.com/v2-0a165ae28148b767cbe7e8a7d7afa862_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;768&#39; height=&#39;351&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"768\" data-original=\"https://pic3.zhimg.com/v2-0a165ae28148b767cbe7e8a7d7afa862_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0a165ae28148b767cbe7e8a7d7afa862_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9e1bdfcd7293185427092e308b46aafd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"804\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb\" width=\"804\" data-original=\"https://pic2.zhimg.com/v2-9e1bdfcd7293185427092e308b46aafd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;804&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"804\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"804\" data-original=\"https://pic2.zhimg.com/v2-9e1bdfcd7293185427092e308b46aafd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9e1bdfcd7293185427092e308b46aafd_b.jpg\"/></figure><p>在需要把一大段HTML内容插入一份文档时，innerHTML属性可以方便快捷的完成。而且，innerHTML属性不会返回任何对刚插入的内容的引用。如果想对刚插入的内容进行处理，则需要使用DOM提供的那些精确的方法和属性。</p><p>innerHTML属性要比document.write( )方法更值得推荐。</p><p>在任何时候，标准的DOM都可以用来替代innerHTML。</p><h2><b>DOM方法：ceateElement方法、appendChild方法、createTextNode方法和insertBefore</b></h2><p>DOM是一条双向车道，不仅可以获取文档的内容，还可以更新文档的内容。以动态方式实时创建标记就是：你并不是在创建标记，而是在改变DOM节点树。</p><p><b>ceateElement方法</b></p><p>document.createElement(<b><i>nodeName</i></b>)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8362e34be897cf7e780887052843e737_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"38\" class=\"origin_image zh-lightbox-thumb\" width=\"538\" data-original=\"https://pic4.zhimg.com/v2-8362e34be897cf7e780887052843e737_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;538&#39; height=&#39;38&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"38\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"538\" data-original=\"https://pic4.zhimg.com/v2-8362e34be897cf7e780887052843e737_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8362e34be897cf7e780887052843e737_b.jpg\"/></figure><p>虽然创建出来的元素已经存在了，但它还不是任何一棵DOM节点树的组成部分，它只是JS世界里的一个孤儿，这种情况称为文档碎片。</p><p><b>appendChild方法</b></p><p>把新创建的节点插入某个文档的节点树的最简单的办法是：让它成为这个文档某个现有节点的一个子节点。</p><p><b>parent</b>.appendChild(<b><i>child</i></b>)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-40a4972758fc4f5af87f0a26f4b277ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"593\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"593\" data-original=\"https://pic3.zhimg.com/v2-40a4972758fc4f5af87f0a26f4b277ba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;593&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"593\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"593\" data-original=\"https://pic3.zhimg.com/v2-40a4972758fc4f5af87f0a26f4b277ba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-40a4972758fc4f5af87f0a26f4b277ba_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6881644e01b2c6986179788add35e213_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb\" width=\"832\" data-original=\"https://pic4.zhimg.com/v2-6881644e01b2c6986179788add35e213_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;832&#39; height=&#39;290&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"832\" data-original=\"https://pic4.zhimg.com/v2-6881644e01b2c6986179788add35e213_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6881644e01b2c6986179788add35e213_b.jpg\"/></figure><p><b>createTextNode方法</b></p><p>我们能看到，现在p元素还是空白的。我们如果想把一些文本放进去，就需要用到createTextNode方法。</p><p>document.createTextNode(<b><i>text</i></b>)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-50ac4db5d12250e6f731e6fb0f65dc12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"763\" data-original=\"https://pic3.zhimg.com/v2-50ac4db5d12250e6f731e6fb0f65dc12_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;763&#39; height=&#39;331&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"763\" data-original=\"https://pic3.zhimg.com/v2-50ac4db5d12250e6f731e6fb0f65dc12_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-50ac4db5d12250e6f731e6fb0f65dc12_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2ee9ec2d9e4a1c63e76f7f1be2d69636_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"832\" data-original=\"https://pic3.zhimg.com/v2-2ee9ec2d9e4a1c63e76f7f1be2d69636_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;832&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"832\" data-original=\"https://pic3.zhimg.com/v2-2ee9ec2d9e4a1c63e76f7f1be2d69636_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2ee9ec2d9e4a1c63e76f7f1be2d69636_b.jpg\"/></figure><p><b>insertBefore</b></p><p><b>把一个新元素插入到现有元素的前面。</b></p><p>parentElement.insertBefore(newElement, targetElement)</p><p>目标元素的父元素.insertBefore(新元素，目标元素：我们要把新元素插入到哪个元素之前)  </p><p>我们不必搞清楚父元素到底是哪个，因为targetElement元素的parentNode属性值就是它。</p><p>在DOM里，元素节点的父元素必须是另一个元素节点。属性节点和文本节点的子元素不允许是元素节点。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9f75992a9aafcd0ea779750c1136b1be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"807\" data-original=\"https://pic3.zhimg.com/v2-9f75992a9aafcd0ea779750c1136b1be_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;807&#39; height=&#39;482&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"807\" data-original=\"https://pic3.zhimg.com/v2-9f75992a9aafcd0ea779750c1136b1be_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9f75992a9aafcd0ea779750c1136b1be_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a55bd9597ceefb527a40c62a207dde3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"686\" data-original=\"https://pic3.zhimg.com/v2-a55bd9597ceefb527a40c62a207dde3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;686&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"686\" data-original=\"https://pic3.zhimg.com/v2-a55bd9597ceefb527a40c62a207dde3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a55bd9597ceefb527a40c62a207dde3e_b.jpg\"/></figure><p><b>在现有元素后插入一个新元素</b></p><p>DOM没有提供这个方法，我们可以自己编写一个。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-57be21316fc0446e2cc73252d6f1c9dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"882\" data-original=\"https://pic2.zhimg.com/v2-57be21316fc0446e2cc73252d6f1c9dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;882&#39; height=&#39;482&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"882\" data-original=\"https://pic2.zhimg.com/v2-57be21316fc0446e2cc73252d6f1c9dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-57be21316fc0446e2cc73252d6f1c9dd_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a056e07d4da9ce61fadecfdc07866cd5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic2.zhimg.com/v2-a056e07d4da9ce61fadecfdc07866cd5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;864&#39; height=&#39;309&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"864\" data-original=\"https://pic2.zhimg.com/v2-a056e07d4da9ce61fadecfdc07866cd5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a056e07d4da9ce61fadecfdc07866cd5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>Ajax（简略介绍）</b></h2><p>主要优势就是：对页面的请求以异步方式发送给服务器，只更新页面的一小部分，服务器不用整个页面来响应请求，它会在后台处理请求，同时用户还可能继续浏览页面并与页面交互。</p><p>ajax有自己的适用范围，它依赖于JS。</p><p>ajax技术的核心就是XMLHttpRequest对象。这个对象，充当着浏览器中的脚本（也就是客户端）与服务器之间的中间人的角色。</p><p>XMLHttpRequest对象有许多方法，其中最有用的是open方法，它用来指定服务器上将要访问的文件。指定请求类型：GET POST SEND.这个方法的第三个参数用于指定请求是否以异步方式发送和处理。</p><p>ajax应用主要依赖后台服务器，而非客户端处理。</p><p></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55874316", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》代码严谨性", 
            "content": "<p>这是本书的第六章：图片库改进版。</p><p>读完本章，与DOM编程工作有关的其实就是围绕着平稳退化、向后兼容、行为分离来优化已有代码。个人称呼这些解决方式为代码严谨性。</p><p><b>1.看我们的图片库，它支持平稳退化吗？如果JS被禁用，会怎样？</b></p><p> &lt;li class=&#34;xxx&#34;&gt;<br/>   &lt;a href=&#34;./images/1.png&#34; title=&#34;这是1号色卡&#34; onclick=&#34;showPic(this); return false&#34;&gt;1号色    卡&lt;/a&gt;<br/> &lt;/li&gt;</p><p>我们的代码，假设不支持JS，图片也是可以打开的，只是用户体验上会稍微差一点，原本应该出现在占位符处的图片，会打开一个新的链接，图片显示在新网页里面，想要返回去看图片列表，就得退回去。</p><p>但是网页上的基本功能并未受到损害。</p><p><b>2.它的JS和结构标记是分离的吗？</b></p><p>我们当时把onclick事件处理函数直接插入到了标记文档里，理想中，应该在外部文件里完成onclick事件处理函数的工作。</p><p>2.1  添加事件处理函数</p><p>如果想用JS给某个网页添加一些行为，就不应该让JS代码对这个网页的结构有任何依赖。</p><p>函数应该只有一个入口和一个出口，如果一个函数有多个出口，只要这些出口集中出现在函数的开头部分，就是可以接受的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c66957d1e3f72f87bf9cfc00c8a2803a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"740\" class=\"origin_image zh-lightbox-thumb\" width=\"1360\" data-original=\"https://pic3.zhimg.com/v2-c66957d1e3f72f87bf9cfc00c8a2803a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1360&#39; height=&#39;740&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"740\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1360\" data-original=\"https://pic3.zhimg.com/v2-c66957d1e3f72f87bf9cfc00c8a2803a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c66957d1e3f72f87bf9cfc00c8a2803a_b.jpg\"/></figure><p>2.2  共享onload事件</p><p>我们必须执行preGallery函数才能对onclick事件进行绑定，如果马上执行这个函数它将无法完成其工作。如果在HTML文档加载之前执行脚本，此时DOM是不完整的，那么判断id是否存在，也不准确。我们要让这个函数在网页加载完毕之后立刻执行。</p><p>window.onload = preGallery</p><p>但是每个事件处理函数只能绑定一条指令，否则后面的会覆盖前面的。</p><p>想要在页面加载完成时执行多个函数，就要用到 addLoadEvent 函数。 参数： 打算在页面加载完毕时执行的函数的名字。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cc17b0ab39e24849a65ebe7a022d4b3d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb\" width=\"880\" data-original=\"https://pic2.zhimg.com/v2-cc17b0ab39e24849a65ebe7a022d4b3d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;880&#39; height=&#39;523&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"880\" data-original=\"https://pic2.zhimg.com/v2-cc17b0ab39e24849a65ebe7a022d4b3d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cc17b0ab39e24849a65ebe7a022d4b3d_b.jpg\"/></figure><p><b>3.不要做太多假设</b></p><p>showPic函数将由preGallery函数调用，前者用到了id属性值等于placeholder和description的元素，但我们并未对这些元素是否存在做任何检查。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9194c79a531ccce983ef858318777ae4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"488\" class=\"origin_image zh-lightbox-thumb\" width=\"872\" data-original=\"https://pic1.zhimg.com/v2-9194c79a531ccce983ef858318777ae4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;872&#39; height=&#39;488&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"488\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"872\" data-original=\"https://pic1.zhimg.com/v2-9194c79a531ccce983ef858318777ae4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9194c79a531ccce983ef858318777ae4_b.jpg\"/></figure><p>即使文档里没有placeholder图片，也不会发生任何JS错误。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5d7b412e9df17fdb58cb05c9e1c1632c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb\" width=\"701\" data-original=\"https://pic1.zhimg.com/v2-5d7b412e9df17fdb58cb05c9e1c1632c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;701&#39; height=&#39;548&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"701\" data-original=\"https://pic1.zhimg.com/v2-5d7b412e9df17fdb58cb05c9e1c1632c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5d7b412e9df17fdb58cb05c9e1c1632c_b.jpg\"/></figure><p>这一章主要讲的就是代码的严谨性，必须用到的变量，检测下是否存在。</p><p>尽量让JS代码不再依赖于那些没有保证的假设；</p><p>尽量让JS代码不依赖于HTML文档的内容和结构。</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55767240", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》平稳退化、渐进增强、向后兼容", 
            "content": "<p>这是本书第五章：最佳实践</p><p>如果js代码不符合语法规定，JS解释器（对Web应用而言就是浏览器）将拒绝执行它们并报错；而浏览器在遇到不符合语法规定的HTML代码时，则会千方百计地将其呈现出来。</p><h2><b>平稳退化：确保网页在没有JS的情况下也能正常工作。</b></h2><p>如果正确地使用了JS脚本，就可以让访问者在他们的浏览器不支持JS的情况下仍能顺利地浏览你的网站。这就是<b>平稳退化，</b>就是说，虽然某些功能无法使用，但最基本的操作仍能顺利完成。</p><p>JS使用window对象的open( )方法来创建新的浏览器窗口。</p><p><b>window.open( url, name, features )</b></p><p>url: 想在新窗口里打开的网页的URL地址，如果省略，则会弹出一个空白的浏览器窗口。</p><p>name: 新窗口的名字。可以在代码里通过这个名字与新窗口进行通信。</p><p>features: 逗号分隔的字符串。新窗口的各个属性（尺寸、启用或禁用的各种浏览功能，工具条、菜单条、初始显示位置等） 原则：少而精</p><p>open( )方法是BOM的一个好案例，它的功能对文档的内容也无任何影响（DOM才可以影响）。这个方法只与浏览器环境有关。（这个例子就是window对象）</p><p><b>“javascript:”  伪协议</b></p><p>“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议、FTP协议等。</p><p>伪协议是一种非标准化的协议，<b>“javascript:”  伪协议让我们通过一个链接来调用JS函数</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-af60eedf234db9e0fc4bbed04875c208_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1207\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb\" width=\"1207\" data-original=\"https://pic1.zhimg.com/v2-af60eedf234db9e0fc4bbed04875c208_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1207&#39; height=&#39;511&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1207\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1207\" data-original=\"https://pic1.zhimg.com/v2-af60eedf234db9e0fc4bbed04875c208_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-af60eedf234db9e0fc4bbed04875c208_b.jpg\"/></figure><p>支持“javascript:”  伪协议的浏览器运行正常，</p><p>较老的浏览器会去尝试打开那个链接失败，</p><p>支持这种伪协议，但是禁用了JS功能的浏览器会什么也不做。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ad83b3898124c1a3002b127da0ef8f43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"876\" data-original=\"https://pic4.zhimg.com/v2-ad83b3898124c1a3002b127da0ef8f43_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;876&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"876\" data-original=\"https://pic4.zhimg.com/v2-ad83b3898124c1a3002b127da0ef8f43_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ad83b3898124c1a3002b127da0ef8f43_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f8041336d261fe1b552ddc003de33e10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic1.zhimg.com/v2-f8041336d261fe1b552ddc003de33e10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;474&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic1.zhimg.com/v2-f8041336d261fe1b552ddc003de33e10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f8041336d261fe1b552ddc003de33e10_b.jpg\"/></figure><p>总之：<b>在HTML文档中通过“javascript:”  伪协议调用JS代码的做法非常不好。</b></p><p><b>内嵌的事件处理函数</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-56badd9ecfa761faf580bb8f5a0344a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1281\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb\" width=\"1281\" data-original=\"https://pic3.zhimg.com/v2-56badd9ecfa761faf580bb8f5a0344a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1281&#39; height=&#39;363&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1281\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1281\" data-original=\"https://pic3.zhimg.com/v2-56badd9ecfa761faf580bb8f5a0344a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-56badd9ecfa761faf580bb8f5a0344a2_b.jpg\"/></figure><p><b>谁关心这个：</b>搜索机器人是一种自动化的程序，它们浏览web的目的是把各种网页添加到搜索引擎的数据库里，各大搜索引擎都有类似的程序。目前只有极少数搜索机器人能够理解JS代码。所以如果你的JS网页不能平稳退化，它们在搜索引擎上的排名就可能大受伤害。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1b8002a21fd510e18010cfd690bec8fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"934\" data-original=\"https://pic2.zhimg.com/v2-1b8002a21fd510e18010cfd690bec8fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;934&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"934\" data-original=\"https://pic2.zhimg.com/v2-1b8002a21fd510e18010cfd690bec8fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1b8002a21fd510e18010cfd690bec8fd_b.jpg\"/></figure><p>优化一下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2175885e93782be24b81bb995cb54e18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"873\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"873\" data-original=\"https://pic1.zhimg.com/v2-2175885e93782be24b81bb995cb54e18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;873&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"873\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"873\" data-original=\"https://pic1.zhimg.com/v2-2175885e93782be24b81bb995cb54e18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2175885e93782be24b81bb995cb54e18_b.jpg\"/></figure><h2><b>分离JS：把网页的结构和内容与JS脚本的动作行为分开。</b></h2><p>CSS技术最大的优点是：它能够帮助你将web文档的内部结构（标记）和版面设计（样式）分离出来。</p><p>真正能从CSS技术获益的方法是：把样式全部转移到外部文件中去。</p><p>作为CSS技术的突出优点，文档结构与文档样式的分离可以确保网页杜能平稳退化。</p><p>具备CSS支持的浏览器固然可以把网页呈现的美轮美奂，不支持或者禁用了CSS功能的浏览器同样可以把网页的内容按照正确的结构显示出来。</p><h2><b>渐进增强</b></h2><p><b>“标记良好的内容就是一切”</b></p><p>CSS指令构成了一个表示层。这个表示层就像是一张透明的彩色薄膜，可以包裹到文档的结构上，使文档内容呈现出色彩，但即使去掉这个表示层，文档的内容也依然可以访问（只是缺乏色彩而已）。</p><p><b>所谓“渐进增强”就是用一些额外的信息层去包裹原始数据。</b></p><p>按照“渐进增强”原则创建出来的网页几乎都符合“平稳退化”原则。</p><p>类似于CSS，JS和DOM提供的所有功能也应该构成一个额外的指令层。</p><p>CSS代码负责提供关于“表示”的信息，</p><p>JS代码负责提供“行为”的信息。</p><p>行为层的应用和表示层一样。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-460dc0e63c7605bffc9bb7cd5f6a3e3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1144\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb\" width=\"1144\" data-original=\"https://pic4.zhimg.com/v2-460dc0e63c7605bffc9bb7cd5f6a3e3f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1144&#39; height=&#39;645&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1144\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1144\" data-original=\"https://pic4.zhimg.com/v2-460dc0e63c7605bffc9bb7cd5f6a3e3f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-460dc0e63c7605bffc9bb7cd5f6a3e3f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f249a3c27f401b5d13136a4ed0fba3f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"918\" data-rawheight=\"791\" class=\"origin_image zh-lightbox-thumb\" width=\"918\" data-original=\"https://pic3.zhimg.com/v2-f249a3c27f401b5d13136a4ed0fba3f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;918&#39; height=&#39;791&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"918\" data-rawheight=\"791\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"918\" data-original=\"https://pic3.zhimg.com/v2-f249a3c27f401b5d13136a4ed0fba3f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f249a3c27f401b5d13136a4ed0fba3f6_b.jpg\"/></figure><h2><b>向后兼容性：确保老版本的浏览器不会因为你的JS脚本而死掉。</b></h2><p><b>对象检测：检测浏览器对JS的支持程度。</b></p><p>解决方案：只要把某个方法打包在一个if语句里，就可以根据这条if语句的条件表达式的求值结果是true（这个<b>方法存在</b>），还是false来决定应该采取怎样的行动。这种检测称为<b>对象检测</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-069004d1a597eefdc3ef833bedd2dd84_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb\" width=\"767\" data-original=\"https://pic1.zhimg.com/v2-069004d1a597eefdc3ef833bedd2dd84_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;767&#39; height=&#39;411&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"767\" data-original=\"https://pic1.zhimg.com/v2-069004d1a597eefdc3ef833bedd2dd84_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-069004d1a597eefdc3ef833bedd2dd84_b.jpg\"/></figure><p><b>浏览器嗅探技术</b></p><p>指通过提取浏览器供应商提供的信息来解决向后兼容问题。</p><p>但是这是一种风险非常大的技术。</p><p>浏览器会撒谎、多种浏览器导致浏览器嗅探版本越来越复杂、每当出现新版本时就不得不修改这些脚本。</p><p>浏览器嗅探技术正在被简单也更健壮的对象检测技术所取代。</p><h2><b>性能考虑：确定脚本执行的性能最优。</b></h2><p><b>尽量少访问DOM和尽量减少标记</b></p><p>访问DOM的方式对脚本性能会产生非常大的影响。</p><p>不管什么时候，只要是查询DOM中的某些元素，浏览器都会搜索整个DOM树，从中查找可能匹配的元素。</p><p><b>合并和方式脚本</b></p><p>包含脚本的最佳方式就是使用外部文件。</p><p>脚本在标记中的位置对页面的初次加载时间也有很大影响。</p><p>位于head块中的脚本会导致浏览器无法并行加载其他文件（如图像和其他脚本）</p><p>一般来说，根据HTTP规范，浏览器每次从同一个域名中最多只能同时下载两个文件。在下载期间，浏览器不会下载其他任何文件。</p><p>把所有script标签都放在文档的末尾，body结束标签之前，就可以让页面变的更快。</p><p><b>压缩脚本</b></p><p>指的是把脚本文件中不必要的字节，如空格、注释统统删除，从而达到“压缩”文件的目的。</p><p>多数情况下，你应该有两个版本，一个是工作副本，可以修改代码并添加注释；</p><p>另一个是精简副本，用于放在站点上。最好在精简副本的文件名中加上.min字样。</p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": [
                {
                    "userName": "2933.02", 
                    "userLink": "https://www.zhihu.com/people/be8edea33f958c36c3da120a8689c7a8", 
                    "content": "很多东西已经过时了，比如无 js 下的平稳退化，内联事件处理，css js 分离也不是绝对的等。可以不用花太大精力看这本书", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "乌龙茶晚来秋", 
                            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
                            "content": "谢谢您～有句话说尽信书则不如无书，但也不能不读，毕竟没有筛选能力是自己技术不够精进。不过一两个月一本书，一年下来，圈里的必读书也应该读的差不多了吧？您再推荐些？", 
                            "likes": 0, 
                            "replyToAuthor": "2933.02"
                        }, 
                        {
                            "userName": "2933.02", 
                            "userLink": "https://www.zhihu.com/people/be8edea33f958c36c3da120a8689c7a8", 
                            "content": "嗯还是可以大概翻一下。我觉得一开始还是看网上成体系的视频课程，尽快实习多做项目，然后带着问题就知道要精读那些书了", 
                            "likes": 0, 
                            "replyToAuthor": "乌龙茶晚来秋"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55757600", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》JavaScript图片库", 
            "content": "<p>利用JS来创建图片库：把整个图片库的浏览链接集中安排在图片库主页里，只在用户点击了这个主页里的某个图片链接时才把相应的图片传送给他。</p><p>（最适合于用浏览器来查看的尺寸：400像素*300像素。我做的色卡不是这个尺寸，勉强用用吧。占位符不是我做的，ps打不开了，不做了，就直接网上下载的，侵删）</p><h2><b>步骤一：写静态</b></h2><p>静态页面如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f7af76002daac935ae0dede7764138eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"898\" class=\"origin_image zh-lightbox-thumb\" width=\"1040\" data-original=\"https://pic4.zhimg.com/v2-f7af76002daac935ae0dede7764138eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1040&#39; height=&#39;898&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"898\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1040\" data-original=\"https://pic4.zhimg.com/v2-f7af76002daac935ae0dede7764138eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f7af76002daac935ae0dede7764138eb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-efbd530e52ffd97e3d5733c3bd6d6e67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"973\" class=\"origin_image zh-lightbox-thumb\" width=\"617\" data-original=\"https://pic4.zhimg.com/v2-efbd530e52ffd97e3d5733c3bd6d6e67_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;617&#39; height=&#39;973&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"973\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"617\" data-original=\"https://pic4.zhimg.com/v2-efbd530e52ffd97e3d5733c3bd6d6e67_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-efbd530e52ffd97e3d5733c3bd6d6e67_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d19e5e0ebed20fa1013ea481798b3fa6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic3.zhimg.com/v2-d19e5e0ebed20fa1013ea481798b3fa6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;560&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic3.zhimg.com/v2-d19e5e0ebed20fa1013ea481798b3fa6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d19e5e0ebed20fa1013ea481798b3fa6_b.jpg\"/></figure><p>页面效果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-108ea29ccc957472b4a34099ecddc938_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb\" width=\"888\" data-original=\"https://pic1.zhimg.com/v2-108ea29ccc957472b4a34099ecddc938_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;888&#39; height=&#39;664&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"888\" data-original=\"https://pic1.zhimg.com/v2-108ea29ccc957472b4a34099ecddc938_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-108ea29ccc957472b4a34099ecddc938_b.jpg\"/></figure><h2><b>步骤二： 写函数</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b0fa17c51c2532ac6044c92465070a41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb\" width=\"807\" data-original=\"https://pic2.zhimg.com/v2-b0fa17c51c2532ac6044c92465070a41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;807&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"807\" data-original=\"https://pic2.zhimg.com/v2-b0fa17c51c2532ac6044c92465070a41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b0fa17c51c2532ac6044c92465070a41_b.jpg\"/></figure><h2><b>步骤三、将静态和函数连接起来，并绑定相应元素的事件处理函数。</b></h2><p>tips：若一个站点用到多个JS文件，为了减少对站点的请求次数（提高性能），应该把这个js文件合并到一个文件中。</p><p>事件处理函数的作用是：在特定事件发生时调用特定的js代码。</p><p>工作机制：在给某个元素添加了事件处理函数之后，一个事件发生，相应的js代码就会得到执行。被调用的js代码可以返回一个值，这个值被传递给那个事件处理函数。</p><p>我们的代码中，给a绑定事件函数，如果返回了true，onclick事件梳理函数就会认为这个链接被点击了，就会进行跳转，把用户带到目标链接窗口，我们让塔返回false，不让它进行跳转。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ac12d108db14025fe0438e5405638e44_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"825\" class=\"origin_image zh-lightbox-thumb\" width=\"1304\" data-original=\"https://pic1.zhimg.com/v2-ac12d108db14025fe0438e5405638e44_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1304&#39; height=&#39;825&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"825\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1304\" data-original=\"https://pic1.zhimg.com/v2-ac12d108db14025fe0438e5405638e44_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ac12d108db14025fe0438e5405638e44_b.jpg\"/></figure><p>现在我们页面上已经实现了点击哪个图片，占位符就显示哪张图片的效果了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-92b912007b3ce4b83ec1509aa84cf3a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic4.zhimg.com/v2-92b912007b3ce4b83ec1509aa84cf3a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;830&#39; height=&#39;597&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"830\" data-original=\"https://pic4.zhimg.com/v2-92b912007b3ce4b83ec1509aa84cf3a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-92b912007b3ce4b83ec1509aa84cf3a3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f29cdba6ce7b2d74f4965ba2aed8ba1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"592\" class=\"origin_image zh-lightbox-thumb\" width=\"854\" data-original=\"https://pic4.zhimg.com/v2-f29cdba6ce7b2d74f4965ba2aed8ba1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;854&#39; height=&#39;592&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"592\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"854\" data-original=\"https://pic4.zhimg.com/v2-f29cdba6ce7b2d74f4965ba2aed8ba1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f29cdba6ce7b2d74f4965ba2aed8ba1b_b.jpg\"/></figure><p>现在我们增加点功能，我们让每张图片带的title替换掉p标签中的描述语句。</p><h2><b>步骤四、拿到每张图片的title，替换掉相应的描述语句。</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f3cee2c31d8ec432f6f0587ccdd94e66_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"869\" data-original=\"https://pic3.zhimg.com/v2-f3cee2c31d8ec432f6f0587ccdd94e66_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;869&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"869\" data-original=\"https://pic3.zhimg.com/v2-f3cee2c31d8ec432f6f0587ccdd94e66_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f3cee2c31d8ec432f6f0587ccdd94e66_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5e001cb0ea9f795c5990f9209f0d457e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"825\" data-rawheight=\"583\" class=\"origin_image zh-lightbox-thumb\" width=\"825\" data-original=\"https://pic3.zhimg.com/v2-5e001cb0ea9f795c5990f9209f0d457e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;825&#39; height=&#39;583&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"825\" data-rawheight=\"583\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"825\" data-original=\"https://pic3.zhimg.com/v2-5e001cb0ea9f795c5990f9209f0d457e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5e001cb0ea9f795c5990f9209f0d457e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-16a5cfc51d4e03d7716b62cb4634cf1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb\" width=\"811\" data-original=\"https://pic3.zhimg.com/v2-16a5cfc51d4e03d7716b62cb4634cf1e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;811&#39; height=&#39;578&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"811\" data-original=\"https://pic3.zhimg.com/v2-16a5cfc51d4e03d7716b62cb4634cf1e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-16a5cfc51d4e03d7716b62cb4634cf1e_b.jpg\"/></figure><p>有几个知识点需要注意一下：</p><p>非DOM解决方案</p><p>不用setAttribute方法也可以改变图片的src属性。</p><p>setAttribute方法是“第1级DOM”的组成部分，它可以设置任意元素节点的任意属性，在“第1级DOM”出现之前，可以通过另一种方法设置大部分元素的属性：</p><p>element.value = &#34;the new value&#34;</p><p>等价于</p><p>element.setAttribute（‘value’，‘the new value’）</p><p>这个方法可以对图片、表单及其他一些元素的属性进行设置，但setAttribute可以对任意元素的任意属性进行设置。</p><p>“第1级DOM”的另一个优势是：可移植性更好。</p><p><b>老方法只适用于Web文档，DOM则适用于任何一种标记语言。</b></p><p><b>DOM是一种适用于多种环境和多种程序设计语言的通用型API。</b></p><p><b>1.childNodes 属性</b></p><p>提取了title的值之后要把它插入到HTML文档中。</p><p>childNodes 属性可以用来获取任何一个元素的所有子元素，它是一个包含这个元素全部子元素的数组。</p><p>element.childNodes</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9ffe80f876f05601cf5a344d5da5cfe4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"833\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb\" width=\"833\" data-original=\"https://pic1.zhimg.com/v2-9ffe80f876f05601cf5a344d5da5cfe4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;833&#39; height=&#39;233&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"833\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"833\" data-original=\"https://pic1.zhimg.com/v2-9ffe80f876f05601cf5a344d5da5cfe4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9ffe80f876f05601cf5a344d5da5cfe4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1296e088d5201e9dfaa2692be70d14be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"622\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb\" width=\"622\" data-original=\"https://pic3.zhimg.com/v2-1296e088d5201e9dfaa2692be70d14be_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;622&#39; height=&#39;73&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"622\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"622\" data-original=\"https://pic3.zhimg.com/v2-1296e088d5201e9dfaa2692be70d14be_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1296e088d5201e9dfaa2692be70d14be_b.jpg\"/></figure><p>由childNodes属性返回的数组包含所有类型的节点，而不仅仅是元素节点。</p><p>2.每一个节点都有<b>nodeType属性</b>，nodeType的值并不是英文。</p><p>node.nodeType</p><p>nodeType属性的值总共有12种可取值，但其中仅有三种具有实用价值。</p><p>000.元素节点：1</p><p>000.属性节点：2</p><p>000.文本节点：3</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-45c41b44a9bdb1e015e3e2d05d203dba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic3.zhimg.com/v2-45c41b44a9bdb1e015e3e2d05d203dba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;612&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"612\" data-original=\"https://pic3.zhimg.com/v2-45c41b44a9bdb1e015e3e2d05d203dba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-45c41b44a9bdb1e015e3e2d05d203dba_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6f49ebb9c21269021632a2835a7d3e23_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"182\" data-rawheight=\"288\" class=\"content_image\" width=\"182\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;182&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"182\" data-rawheight=\"288\" class=\"content_image lazy\" width=\"182\" data-actualsrc=\"https://pic4.zhimg.com/v2-6f49ebb9c21269021632a2835a7d3e23_b.jpg\"/></figure><p><b>3.nodeValue 属性</b></p><p>如果想改变一个文本节点的值，那就使用DOM提供的nodeValue属性，它用来得到和设置一个节点的值。</p><p>node.value</p><p>直接去取某个元素的value值，得到的是某个元素本身的nodeValue属性的值，为null。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e84c12fe47da2f5e50ecc0395e9dfdfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"723\" data-original=\"https://pic4.zhimg.com/v2-e84c12fe47da2f5e50ecc0395e9dfdfb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;723&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"723\" data-original=\"https://pic4.zhimg.com/v2-e84c12fe47da2f5e50ecc0395e9dfdfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e84c12fe47da2f5e50ecc0395e9dfdfb_b.jpg\"/></figure><p>我们需要的是元素所包含的文本的值。</p><p>包含在p元素中的文本是另一种节点，它是p元素的第一个子节点。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5abce1498a72866ebe483129b94d799d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb\" width=\"745\" data-original=\"https://pic2.zhimg.com/v2-5abce1498a72866ebe483129b94d799d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;745&#39; height=&#39;201&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"745\" data-original=\"https://pic2.zhimg.com/v2-5abce1498a72866ebe483129b94d799d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5abce1498a72866ebe483129b94d799d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e9985a832921753a3e4c367e99c53e7e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"368\" data-rawheight=\"120\" class=\"content_image\" width=\"368\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;368&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"368\" data-rawheight=\"120\" class=\"content_image lazy\" width=\"368\" data-actualsrc=\"https://pic3.zhimg.com/v2-e9985a832921753a3e4c367e99c53e7e_b.jpg\"/></figure><p><b>4.firstChild 和 lastChild 属性</b></p><p>node.firstChild  node.lastChild</p><p>nodeValue 属性不仅可以用来检索节点的值，还可以用来设置节点的值。</p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55592887", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》DOM", 
            "content": "<ol><li><b>DOM的理解</b></li></ol><p>1.1<b> D：</b>当创建了一个网页并把它加载到Web浏览器中时，DOM就生成了，它将我们编写的网页文档转换成一个<b>文档对象。</b></p><p>1.2<b> O</b>：“对象”是一种自足的数据集合，相关联的变量称为这个对象的属性，只能通过这个对象调用的函数称为这个对象的方法。</p><p>JS中的对象可以分为<b>三种类型</b>：</p><p>A、<b>用户定义对象</b>：程序员自行创建的对象。</p><p>B、<b>内建对象</b>：Array、Math、Date</p><p>C、<b>宿主对象</b>：由浏览器提供的对象。</p><p>JS最初版本中，非常重要的一些宿主对象就可以使用了，最基础的对象是Window对象。Window对象对应着浏览器窗口本身，这个对象的属性和方法通常统称为BOM。</p><p>更好理解：（window object model）窗口对象模型。</p><p>document对象的主要功能就是处理网页内容。接下来我们基本上只讨论document对象的属性和方法。</p><p>1.3<b> M：</b>model map  某种事物的<b>表现形式</b></p><p><b>DOM</b>代表着加载到浏览器窗口的<b>当前网</b>页。<b>浏览器</b>提供了<b>网页的地图</b>，我们可以通过JS去<b>读取这张地图</b>。要想从DOM获得信息，必须先把各种表示和描述文档的“图例”弄明白。</p><p>DOM把文档表示为一颗<b>家谱树</b>。</p><p><b>家谱树、节点树：</b>使用parent、child、sibling等记号来表明<b>家族成员之间的关系</b>。</p><p>根元素是html</p><p>1.4 节点： <b>文档是由节点构成的集合</b>。</p><ol><li>元素节点：DOM的<b>原子</b>是<b>元素节点</b>。这些元素在文档中的布局形成了文档的结构。</li><li>文本节点：文本节点总是被包含在元素节点的内部，或者间接包含。</li><li>属性节点：用来对元素做出更具体的描述，因为属性节点总是被放在起始标签里，所以属性节点总是被包含在元素节点中，所有的属性节点都被元素包含。</li><li>CSS：DOM并不是唯一和网页结构打交道，CSS告诉浏览器应该如何显示一份文档的内容。</li></ol><p>继承是CSS技术中的一项强大功能，类似于DOM，CSS也把文档的内容视为一颗节点树，节点树上的各个元素将继承其父元素的样式属性。</p><p>有时我们需要将某些样式作用于某个特定的元素，需要把元素与其他元素区分开，需要使用class属性或id属性。</p><p>calss属性：为相同的class属性值相同的所有元素定义同一种样式。</p><p>id属性：给页面里的某个元素加上一个独一无二的标识符。</p><p><b>id属性就像是一个挂钩</b>，一头连接着文档里的某个元素，另一头连着CSS样式表里的某个样式。DOM也可以使用这种挂钩。</p><h2><b>1.5 获取元素</b></h2><p>有三种DOM方法可以获取元素节点：</p><ol><li>getElementById</li></ol><p>返回一个对象。</p><p>document对象特有的函数。</p><p>document.getElementById(‘xxx’);</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e84f2224c9cf79e08afa51bf881c2569_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic2.zhimg.com/v2-e84f2224c9cf79e08afa51bf881c2569_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;580&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic2.zhimg.com/v2-e84f2224c9cf79e08afa51bf881c2569_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e84f2224c9cf79e08afa51bf881c2569_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9877691c6fb4fb159036600cbac5edc3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb\" width=\"655\" data-original=\"https://pic4.zhimg.com/v2-9877691c6fb4fb159036600cbac5edc3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;655&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"655\" data-original=\"https://pic4.zhimg.com/v2-9877691c6fb4fb159036600cbac5edc3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9877691c6fb4fb159036600cbac5edc3_b.jpg\"/></figure><p>文档中的每一个元素都是一个对象，利用DOM提供的方法能得到任何一个对象。</p><p>2.getElementsByTagName</p><p>返回一个对象数组</p><p>document.getElementsTagName(‘li’);</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bc950ae0fc5b7deef3911884ddc07ef8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb\" width=\"722\" data-original=\"https://pic1.zhimg.com/v2-bc950ae0fc5b7deef3911884ddc07ef8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;722&#39; height=&#39;585&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"722\" data-original=\"https://pic1.zhimg.com/v2-bc950ae0fc5b7deef3911884ddc07ef8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bc950ae0fc5b7deef3911884ddc07ef8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0a21c07bac546bd72001039c0bc24e06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic3.zhimg.com/v2-0a21c07bac546bd72001039c0bc24e06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;906&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"906\" data-original=\"https://pic3.zhimg.com/v2-0a21c07bac546bd72001039c0bc24e06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0a21c07bac546bd72001039c0bc24e06_b.jpg\"/></figure><p>即使这个标签只有一个元素，也返回一个数组。</p><p>3.getElementsByClassName</p><p>返回一个对象数组</p><p>document.getElementsClassName(‘yyy’);</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ba0c19bb3a9ccb58ac18d99d71f32a74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb\" width=\"772\" data-original=\"https://pic1.zhimg.com/v2-ba0c19bb3a9ccb58ac18d99d71f32a74_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;772&#39; height=&#39;469&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"772\" data-original=\"https://pic1.zhimg.com/v2-ba0c19bb3a9ccb58ac18d99d71f32a74_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ba0c19bb3a9ccb58ac18d99d71f32a74_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f7b8396ce55c1cd7f417efd5408aa5c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb\" width=\"818\" data-original=\"https://pic1.zhimg.com/v2-f7b8396ce55c1cd7f417efd5408aa5c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;818&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"818\" data-original=\"https://pic1.zhimg.com/v2-f7b8396ce55c1cd7f417efd5408aa5c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f7b8396ce55c1cd7f417efd5408aa5c0_b.jpg\"/></figure><p>也可以结合使用，比如，只要id为xxx的里面的元素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-28068b277484e900b122b09fc816c02f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic4.zhimg.com/v2-28068b277484e900b122b09fc816c02f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic4.zhimg.com/v2-28068b277484e900b122b09fc816c02f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-28068b277484e900b122b09fc816c02f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b53bf1914db48a32fdf4019e9bdcb7d5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-b53bf1914db48a32fdf4019e9bdcb7d5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;236&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-b53bf1914db48a32fdf4019e9bdcb7d5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b53bf1914db48a32fdf4019e9bdcb7d5_b.jpg\"/></figure><p>这个函数，IE8以下有兼容问题。不过，现在，没有继续兼容IE的了吧？瑟瑟发抖……</p><h2><b>1.6 获取和设置属性（只能用于元素节点）</b></h2><p><b>A、getAttribute</b></p><p>object.getAttribute(attribute);</p><p>getAttribute方法不属于document对象，只能通过元素节点对象调用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9eeafa90e2e6fa8bd6927dcaf8fa616c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"766\" data-original=\"https://pic1.zhimg.com/v2-9eeafa90e2e6fa8bd6927dcaf8fa616c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;766&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"766\" data-original=\"https://pic1.zhimg.com/v2-9eeafa90e2e6fa8bd6927dcaf8fa616c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9eeafa90e2e6fa8bd6927dcaf8fa616c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-10b3b74dcbfd8492b0d3d79b3522bada_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb\" width=\"585\" data-original=\"https://pic3.zhimg.com/v2-10b3b74dcbfd8492b0d3d79b3522bada_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;585&#39; height=&#39;213&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"585\" data-original=\"https://pic3.zhimg.com/v2-10b3b74dcbfd8492b0d3d79b3522bada_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-10b3b74dcbfd8492b0d3d79b3522bada_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果它们没有某个属性，将会是返回空白或者null，至于是哪个，要看是什么浏览器。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-68eea9d6ca0a200dce4d71c07457ff1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb\" width=\"716\" data-original=\"https://pic1.zhimg.com/v2-68eea9d6ca0a200dce4d71c07457ff1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;716&#39; height=&#39;526&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"716\" data-original=\"https://pic1.zhimg.com/v2-68eea9d6ca0a200dce4d71c07457ff1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-68eea9d6ca0a200dce4d71c07457ff1c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2fab6ecf13cadf1771d97c9b99a15de4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"265\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic1.zhimg.com/v2-2fab6ecf13cadf1771d97c9b99a15de4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;546&#39; height=&#39;265&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"265\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"546\" data-original=\"https://pic1.zhimg.com/v2-2fab6ecf13cadf1771d97c9b99a15de4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2fab6ecf13cadf1771d97c9b99a15de4_b.jpg\"/></figure><p><b>B、setAttribute</b></p><p>对属性节点的值做出修改</p><p>object.setAttribute(attribute,value)</p><p>用在本身就有这个属性的元素上，就会将原来的值覆盖掉。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-df920eab6e3984bec84fcffd6eed76f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb\" width=\"801\" data-original=\"https://pic4.zhimg.com/v2-df920eab6e3984bec84fcffd6eed76f7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;801&#39; height=&#39;502&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"801\" data-original=\"https://pic4.zhimg.com/v2-df920eab6e3984bec84fcffd6eed76f7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-df920eab6e3984bec84fcffd6eed76f7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-50fe6a5e960c2c45f5ed0871c8628087_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic4.zhimg.com/v2-50fe6a5e960c2c45f5ed0871c8628087_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;573&#39; height=&#39;187&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"573\" data-original=\"https://pic4.zhimg.com/v2-50fe6a5e960c2c45f5ed0871c8628087_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-50fe6a5e960c2c45f5ed0871c8628087_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-299be40786ad74f2a4663d9c2ee2fb18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb\" width=\"694\" data-original=\"https://pic1.zhimg.com/v2-299be40786ad74f2a4663d9c2ee2fb18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;694&#39; height=&#39;319&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"694\" data-original=\"https://pic1.zhimg.com/v2-299be40786ad74f2a4663d9c2ee2fb18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-299be40786ad74f2a4663d9c2ee2fb18_b.jpg\"/></figure><p>但是，setAttribute做出的修改不会反映在文档本身的源代码里。</p><p>这种表里不一的现象源自DOM的工作模式：</p><p>先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。</p><p>这正是DOM的真正威力：对页面内容进行刷新却不需要在浏览器里刷新页面。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>tips：这五种方法，是将要编写的许多DOM脚本的基石。</p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55530602", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》JS语法", 
            "content": "<p>复习下JS语法</p><p>程序设计语言分为解释型和编译型两大类。</p><p>Java、C等语言需要一个编译器，编译器是一种程序，能够把用Java等高级语言编写出来的源代码翻译为直接在计算机上执行的文件。</p><p>解释型程序设计语言，仅仅需要解释器，对于JS而言，在互联网环境下，Web浏览器负责完成有关的解释和执行工作。浏览器中的JS解释器将直接读入源代码并执行。浏览器中如果没有解释器，JS代码就无法执行。</p><p>用编译型语言编写的代码有错误，这些错误在代码编译阶段就能被发现。</p><p>而解释型语言代码中的错误只能等到解释器执行到有关代码时才能被发现。</p><p>与解释型语言相比，编译型语言速度更快，可以执行更好。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一、语法：</b></p><p>语言结构方面的各项规则，我们就称之为“语法”。</p><p><b>1.1 语句 </b></p><p>JS编写的脚本，也是由一系列指令构成，这些指令就叫做语句。</p><p>只有按照正确的语法编写出来的语句才能得到正确的解释。</p><p>语句是构成任何一个脚本的基本单位。</p><p><b>1.2 变量</b></p><p>JS变量名允许包含字母、数字、美元符号和下划线（第一个字符不能是数字）。</p><p>通常，驼峰格式是函数名、方法名和对象属性名命名的首选格式。</p><p>变量名用_分隔单词，函数名用驼峰式，基本能够让人一眼就看出哪些是变量、哪些是函数。</p><p><b>1.3 数据类型</b></p><p>JS是一种弱类型语言，不需要像强类型语言那样在声明变量的同时还必须同时声明变量的数据类型。</p><p>字符串、数值、布尔值：从某种意义上讲，<b>为计算机设计程序就是与布尔值打交道</b>。</p><p>String、 Number、 Boolean</p><p>这些都是标量，如果某个变量是<b>标量，它在任意时刻都只能有一个值。</b></p><p><b>1.4 数组</b></p><p>用一个变量来存储一组值，就需要使用数组。</p><p>向数组中添加元素的操作称为填充。</p><p>数组元素可以是：三种标量、混合、变量、另一个数组的元素、其他的数组。</p><p><b>1.5 对象</b></p><p>用对象代替传统数组的做法意味着可以通过元素的名字而不是下标数字来引用他们。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二、操作</b></p><p>2.1 算数操作符</p><p>+  -   *   /   = </p><p>数值和字符串拼接 = 字符串</p><p>数值和数值拼接 = 数值</p><p>2.2 比较操作符</p><p>&gt;=  &lt;=  ==  === != !==</p><p>2.3 逻辑运算符</p><p>逻辑与：&amp;&amp;  短路：取第一个为真值  否则返回最后一个值</p><p>逻辑或： || 短路： 取第一个为假值  否则返回最后一个值</p><p>逻辑非： ！</p><p><b>三、条件语句</b></p><p>If(){}</p><p>条件的求值结果永远是一个布尔值</p><p><b>四、循环语句</b></p><p>4.1 while循环</p><p>4.2 do...while 循环 有时会有包含在循环语句内部的代码至少执行一次的需求</p><p>4.3 for循环 while循环的一种变体</p><p><b>五、函数</b></p><p>每个函数实际上是一个短小的脚本。</p><p>应该先定义函数，再调用。</p><p>你可以把不同的数据传递给它们，而它们将使用这些数据去完成预定的操作。</p><p>我们把传递给函数的数据称为参数。</p><p>函数不仅能够（以参数的形式）接收数据，还能返回数据。</p><p>函数的真正价值体现在：我们可以把它们当做一种数据类型来使用，这意味着可以把一个函数的调用结果赋给一个变量。</p><p>六：<b>变量的作用域</b></p><p>在谈论全局变量和局部变量之间的区别时，我们其实是在讨论变量的作用域。</p><p>我们可以使用var关键字明确地为函数变量设定作用域。</p><p>（ES6有更新，这部分暂时放一放）</p><p>函数在行为方面应该像一个自给自足的脚本，在定义一个函数时，我们一定要把它内部的变量全部明确地声明为局部变量。</p><p><b>七：对象</b></p><p>对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性和方法。</p><p>属性是隶属于某个特定对象的变量；</p><p>方法是只有某个特定对象才能调用的函数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们可以利用JS来创建自己的对象--属于为 用户定义对象</p><p>JS也预先定义了一些对象，我们拿来就用的这些对象称为内建对象。</p><p><b>八：内建对象</b></p><p>Array对象、Math对象、Date对象</p><p class=\"ztext-empty-paragraph\"><br/></p><p>九：<b>宿主对象</b></p><p>由JS的运行环境提供的。具体到web应用，这个环境就是浏览器。</p><p>由浏览器提供的预定义对象称为宿主对象。</p><p>包括：Form、Image、Element、document对象等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（这一章，只是回顾js的一些基本内容，后续会有高程三的读书笔记，再做详细介绍），本书主要是讲DOM。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55343770", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "【代码乱入】简易购物车（vue）", 
            "content": "<p>技术栈：vue2.x + vue cli3.x + less （还有…，想到再说）<br/>实现的功能：1.增减选中的商品数量，对应的金额也会改变；2.单选、多选、全选功能的实现；3.单个商品移除、多个商品移除（编辑功能）的实现；</p><p>（环境全部已配好）</p><p>1.创建个demo</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4509fbab87e9259ca65b955ae148da57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"393\" data-rawheight=\"153\" class=\"content_image\" width=\"393\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;393&#39; height=&#39;153&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"393\" data-rawheight=\"153\" class=\"content_image lazy\" width=\"393\" data-actualsrc=\"https://pic4.zhimg.com/v2-4509fbab87e9259ca65b955ae148da57_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f4fcdde1977cf1333af641f2b11c30aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"224\" class=\"content_image\" width=\"373\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;373&#39; height=&#39;224&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"224\" class=\"content_image lazy\" width=\"373\" data-actualsrc=\"https://pic3.zhimg.com/v2-f4fcdde1977cf1333af641f2b11c30aa_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-106e613b1aededa9083769d408df0bed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-106e613b1aededa9083769d408df0bed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;570&#39; height=&#39;158&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-106e613b1aededa9083769d408df0bed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-106e613b1aededa9083769d408df0bed_b.jpg\"/></figure><p>其实，一个demo而已，也没必要那么麻烦，自己看着选就行了。。。但是，为了后续的升级版，我还是按照正规流程走吧。。。启动项目</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f180bc8e381c52f58b36666116804529_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"774\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;774&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"774\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic2.zhimg.com/v2-f180bc8e381c52f58b36666116804529_b.jpg\"/></figure><p>2.修改成这样子。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-95f4f34dfe16131945a249af0396f636_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"324\" class=\"content_image\" width=\"409\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;409&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"324\" class=\"content_image lazy\" width=\"409\" data-actualsrc=\"https://pic3.zhimg.com/v2-95f4f34dfe16131945a249af0396f636_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c5d5d96763993e1a4cf5627163c66059_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"544\" class=\"origin_image zh-lightbox-thumb\" width=\"579\" data-original=\"https://pic2.zhimg.com/v2-c5d5d96763993e1a4cf5627163c66059_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;579&#39; height=&#39;544&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"544\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"579\" data-original=\"https://pic2.zhimg.com/v2-c5d5d96763993e1a4cf5627163c66059_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c5d5d96763993e1a4cf5627163c66059_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b202c8a9cef61e59ff9670752453bcfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic1.zhimg.com/v2-b202c8a9cef61e59ff9670752453bcfc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;488&#39; height=&#39;439&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic1.zhimg.com/v2-b202c8a9cef61e59ff9670752453bcfc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b202c8a9cef61e59ff9670752453bcfc_b.jpg\"/></figure><p>现在我们的项目长这样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c985492a0c4c537196ba56f93b1ca52f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"435\" class=\"content_image\" width=\"403\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;403&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"435\" class=\"content_image lazy\" width=\"403\" data-actualsrc=\"https://pic4.zhimg.com/v2-c985492a0c4c537196ba56f93b1ca52f_b.jpg\"/></figure><p>接下来，Cart.vue是我们的主战场。</p><p>先把静态给写好。</p><p>全局引入reset.css  组件引入common.less，来定义一些常用变量和混淆。全页面没有任何icon，不要问我为什么。页面美化自己慢慢做。</p><p>页面初现：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-65615fcd18e14731d17b854f14bb673a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1227\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb\" width=\"1227\" data-original=\"https://pic3.zhimg.com/v2-65615fcd18e14731d17b854f14bb673a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1227&#39; height=&#39;882&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1227\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1227\" data-original=\"https://pic3.zhimg.com/v2-65615fcd18e14731d17b854f14bb673a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-65615fcd18e14731d17b854f14bb673a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-99e980cece7a2ec08ca29f0a7c22875c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1302\" data-rawheight=\"976\" class=\"origin_image zh-lightbox-thumb\" width=\"1302\" data-original=\"https://pic1.zhimg.com/v2-99e980cece7a2ec08ca29f0a7c22875c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1302&#39; height=&#39;976&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1302\" data-rawheight=\"976\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1302\" data-original=\"https://pic1.zhimg.com/v2-99e980cece7a2ec08ca29f0a7c22875c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-99e980cece7a2ec08ca29f0a7c22875c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-367959a3f4b391a59c34e4c4410a4688_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"934\" class=\"origin_image zh-lightbox-thumb\" width=\"1507\" data-original=\"https://pic1.zhimg.com/v2-367959a3f4b391a59c34e4c4410a4688_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1507&#39; height=&#39;934&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"934\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1507\" data-original=\"https://pic1.zhimg.com/v2-367959a3f4b391a59c34e4c4410a4688_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-367959a3f4b391a59c34e4c4410a4688_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6ff13640a256791203c1697491e8da0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1114\" data-rawheight=\"955\" class=\"origin_image zh-lightbox-thumb\" width=\"1114\" data-original=\"https://pic4.zhimg.com/v2-6ff13640a256791203c1697491e8da0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1114&#39; height=&#39;955&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1114\" data-rawheight=\"955\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1114\" data-original=\"https://pic4.zhimg.com/v2-6ff13640a256791203c1697491e8da0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6ff13640a256791203c1697491e8da0f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9fd7dcec1dbb72b2e9ccd37c68f3cc9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1208\" data-rawheight=\"946\" class=\"origin_image zh-lightbox-thumb\" width=\"1208\" data-original=\"https://pic3.zhimg.com/v2-9fd7dcec1dbb72b2e9ccd37c68f3cc9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1208&#39; height=&#39;946&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1208\" data-rawheight=\"946\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1208\" data-original=\"https://pic3.zhimg.com/v2-9fd7dcec1dbb72b2e9ccd37c68f3cc9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9fd7dcec1dbb72b2e9ccd37c68f3cc9e_b.jpg\"/></figure><p>太累了，不截了。。。</p><p>demo地址：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/miyawang/vue-cart-demo\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-785d02e4325ca5601772a5f5a42519d4_ipico.jpg\" data-image-width=\"420\" data-image-height=\"420\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">miyawang/vue-cart-demo</a><p>无任何组件库，可放心使用。</p><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55206951", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《DOM编程艺术》一点历史", 
            "content": "<p></p><p>所有与标准相兼容的Web浏览器都支持DOM，我们可以利用DOM给文档增加交互能力。</p><p>简单来说：DOM是一套对文档的内容进行抽象和概念化的方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>JS的早期版本提供了查询和操控Web文档某些实际内容（主要是图像和表单）的手段。</p><p>因为JS预先定义了“image”和“forms”等术语，我们才能在JS脚本里引用具象的（比如文档中第三个图像）（document.images[2]）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>现在的人们通常把这种试验性质的初级DOM称为“第0级DOM”。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>NN和IE在推出第四代浏览器产品后，DOM开始变得麻烦。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这两种浏览器都对他们的早期版本进行了许多改进，答复扩展了DOM，使能够通过JS完成的功能大大增加。而网页设计人员也开始接触到一个新名词：DHTML。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>是“Dynamic HTML”（动态HTML）的简称。描述HTML CSS JS技术组合的术语。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>比如有的DOM，NN4和IE4使用的是两种不兼容的DOM，虽然浏览器厂商的目标一样，但他们在解决DOM问题时采用的办法却完全不同。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>程序员不知道在编写DOM脚本代码时必须知道它们将运行在哪种浏览器环境里，</p><p>需要写一些代码判断是什么浏览器，然后许多脚本还要编写两次，一次为NN，一次为IE。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>就在浏览器厂商以DOM为武器大战时，W3C结合大家的优点推出了一个标准化的DOM。浏览器厂商们与W3C合作，制定新的标准，并在1998年完成了“第1级DOM”。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>W3C推出的标准化DOM可以让任何一种程序设计语言对使用任何一种标记语言编写出来的任何一份文档进行操控。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>DOM是一种API，简单来说，API就是一组已经得到有关各方共同认可的基本约定。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>W3C对DOM的定义是：“<b>一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档的内容、结构和样式”。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>DHTML曾被认为是HTML/XHTML、CSS和JS相结合的产物，但把这些东西真正凝聚在一起的是DOM。</p><p>如果真的需要描述这一过程的话，“DOM基本程序设计”更精确。</p><p>它表示使用W3C DOM来处理文档和样式表。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "JavaScript DOM编程艺术（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134418"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55121353", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 3, 
            "title": "读书笔记《写给大家看的设计书》第二部分：字体设计", 
            "content": "<p>这一部分强调如何结合使用各种字体。</p><p><b>大小：</b>为了有效地使用大小对比，绝对不要保守，字号大小相差不多的字体无法形成明显的对比，大多数情况下，他们只会产生冲突。</p><p>字体大小对比并不意味着必须让字体很大，而只是要求应该有对比。大页面和小字体之间也可以形成明显的对比。</p><p>还可以以一些有煽动性的非常规方式造成大小对比。（印刷符号如数字、&amp;、引号设置很大），当做装饰元素。</p><p>如果使用一个大小非比寻常的项，看看能不能在别处重复这个概念，创建一种吸引人的有效重复。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>粗细：</b>字体的粗细是指笔画的粗细度。大多数字体系列都设计为多种粗细字体：常规、粗体、半粗体、极粗或者细字体。结合使用时，不要太保守。</p><p>如果结合使用两种不同字体系列中的字体，一种字体通常比另一种要粗。</p><p>最好在自己的软件中至少引入一种非常粗的黑粗体。</p><p><b>粗细对比是为页面增加视觉效果最容易而且最有效的方法之一</b>，而且无需从新做任何设计。明确一点：除非有一种笔画很粗大的字体，否则得不到这种漂亮的强烈对比。</p><p><b>粗细对比不仅能使页面更引人注目，也是组织信息的最有效的方式之一。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>结构：</b>字体的结构是指这种字体是如何建立的。有些字体建立时粗细很单一（如大多数无衬线字体），其他字体的建立则非常强调字体的粗细的过渡（如现代字体）。还有一些字体则介于二者之间。</p><p>如果你要结合使用来自两种不同字体系列中的字体，就要使用不同结构的字体系列。</p><p>每种类别都有类似的结构，如果从两个或多个类别中选择两个或多个字体，应该是一个不错的字体方案。</p><p><b>不要把同一类别中的两种字体放在同一个页面上。</b></p><p>排字对比有一个原则：要求必须选取两个不同字体类别中的字体。</p><p>应该避免同时设置两种现代或两种衬线字体。</p><p>也要避免在同一个页面上使用两种手写体。</p><p>衬线体&amp;无衬线体：要想选择有对比的结构，一种容易的方法就是选择一个衬线体和一个无衬线体。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>形状：</b></p><p>全大写&amp;全小写是一种形状上的对比。</p><p>罗马体&amp;斜体是一种形状上的对比。</p><p>不要结合使用两种不同的斜体或者两种不同的手写体。</p><p>也不要结合使用斜体和手写体。</p><p>只会带来冲突，因为它们存在太多的相似性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>方向：</b>文字有一定的倾斜度</p><p>不要设置方向</p><p>向右向上：前进的力量</p><p>向下倾斜：反向的力量</p><p>材质是由不同的字体的结构、行间距、字母间距、粗细度、大小和形状共同创造的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>颜色：</b></p><p>暖色：前进型，会引起我们的注意，只需要很少的一点红色就可以产生对比。</p><p>冷色：远离型，总是在我们的视线中后退。即使更大的区域都是冷色你也未必注意得到。</p><p>需要更多的冷色才能产生有效的对比。</p><p>除了让页面更吸引人，颜色的改变还有助于组织信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>结合多种对比：</p><p>大多数有效的字体布局都会充分利用多种对比。</p><p>找出问题所在才能找出解决方案。</p><p>必须努力去找相似性，而不是差异。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>过程：</p><p><b>从中心点开始：</b>希望读者最先看什么，应该创建一个有强烈对比的中心点。</p><p><b>将信息分组</b>：按逻辑进行分组，确定这些组之间的关系。通过组之间的亲密性来显示这些关系。</p><p>在页面上组织文本和图片时，<b>要建立并维护明确的对齐。</b></p><p><b>创建重复。</b></p><p><b>强烈对比。</b></p>", 
            "topic": [
                {
                    "tag": "写给大家看的设计书（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20130101"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54941544", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《写给大家看的设计书》第二部分：字体类别", 
            "content": "<p><b>字体（与人生）：</b></p><p>字体是“搭建”所有排版页面的基本模块，有时使用多种字体是绝对必要的。</p><ol><li>只使用<b>一种字体</b>系列：很平和、非常正式的<b>协调</b>的关系</li><li><b>多种</b>字体：元素方面很<b>类似但不相同</b>，<b>冲突</b>的关系。</li><li><b>多种字体</b>+元素间<b>截然不同</b>，<b>对比</b>关系。</li></ol><p>如果你能发现并具体指出其中的对比，才能切实地把握页面的设计。</p><p>对比不只能增加作品的美感，页面上信息的条理性和清晰性与对比密不可分。</p><p>字体对比有6种明确的不同方式：大小、粗细、结构、形状、方向和颜色。</p><p>建立对比时要遵循的规则：不要太保守！</p><p><b>字体类别：</b></p><p><b>Tips：个人认为，中文没那么多花。</b></p><p>在有意识地对比字体之前，需要先了解这几组字体设计之间的相似性，因为正是这种相似性才导致了字体组合使用时的冲突。</p><ol><li><b>Oldstyle（旧式体） </b></li></ol><p>旧式体类别中的字体是基于手写体创建的，旧式体都有衬线，而且小写字母的衬线总有一个角度，和主干连接处会有一条线。</p><p>旧式体有一条对角强调线。</p><p>如果你希望人们具体去读某些文字，可以选择设置为旧式体。</p><p><b>2. Modern（现代体）</b></p><p>旧式体反映了人文主义的痕迹。现代体有衬线，不过它们的衬线是水平的，而不再倾斜，而且这些衬线很细。</p><p>有一种冷酷、高雅的感觉。</p><p>现代体外观很醒目，特别是设置得非常大时有一种让人震撼的感觉。不适合大量显示正文。</p><p>3. <b>Slab serif （粗衬线体）</b></p><p>广告。</p><p>粗细对比很小的许多粗衬线体可以提供很好的可读性，这说明它们可以很好地用于显示大量文本。</p><p>会使页面更暗，因为它们的笔画比较粗，而且粗细相对单一。由于其简洁、直接的外观，粗衬线体常在儿童图书中使用。</p><p><b>4. Sans serif （无衬线体）</b></p><p>无衬线体就是指笔画末端没有衬线的字体。</p><p>Helvetica/arial和verdanal都是为屏幕设计的，不适用于印刷。要想更好地设计页面，最好的做法就是引入包括一个很粗很黑字体的无衬线体系列。大多数无衬线体的粗细都是单一的。</p><p>5. <b>Script （手写体）</b></p><p>看上去利用一个书法笔或书法刷手写的所有字体都属于手写类字体。手写体就像奶酪蛋糕，要少用，这样才不会让人觉得恶心。绝对不能将大段文本设置为这些有趣的字体，而且绝对不能设置为全大写。</p><p><b>6.Decorative （花体）</b></p><p>花体可以传达鲜明的情绪，或者可以让它们传达与你第一印象完全不同的内涵，</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "写给大家看的设计书（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20130101"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54271886", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《写给大家看的设计书》第一部分：设计原则", 
            "content": "<p>一旦能够说出什么东西的名字，就会很容易注意到它。你就会掌握它，拥有它，让它受你的控制。</p><p><b>4 大基本原则：</b></p><p><b>对比</b>：要避免页面上的元素太过相似。</p><p>对比是为页面增加视觉效果的最有效的途径，建立一种有组织的层次结构最有效方法。重要规则：要想实现有效的对比，对比就必须要强烈。</p><p>页面上的不同元素之间要有对比效果，达到吸引读者的对比效果。</p><p>对比不仅可以用来吸引眼球，还可以用来组织信息、清晰层级、在页面上指引读者，并且制造焦点。</p><p>如果两个元素虽然不同，但是区别不大，这时候就不是对比，而是冲突。</p><p>增加对比能吸引人的眼球。要实现有效的对比，这两个元素必须截然不同。</p><p><b>根本目的</b>：增强页面的效果、有助于信息的组织。</p><p><b>如何实现</b>：对比强烈</p><p><b>要避免的问题：</b>不要犹豫，如果你想形成对比，就加大力度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>重复</b>：视觉要素在整个作品中重复出现。</p><p>设计的某些方面需要在整个作品中重复</p><p>设计中视觉元素的重复。可以把重复认为是“一致性”</p><p>设计中视觉元素的重复可以将作品中的各部分连在一起，从而统一并增强整个作品，否则这些部分只是彼此孤立的单元。（保持一致）</p><p><b>根本目的</b>：统一，并增强视觉效果。</p><p><b>如何实现：</b>需要把现有的一致性更向前推进一步，使重复元素显得更明显、更生动。重复就像是强调你的衣着。</p><p><b>要避免的问题：</b>太多的重复一个元素（黑晚礼服、红口红、红色耳环、红色帽子）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>对齐</b>：每个元素都应当与页面上的另一个元素有某种视觉联系。</p><p>在设计中，统一性是一个重要的概念。要让页面上的所有元素看上去统一、有联系而且彼此相关，需要在各个单独的元素之间存在某种视觉纽带。</p><p><b>根本目的：</b>使页面统一而且有条理。</p><p><b>如何实现：</b>要特别注意元素放在哪里。</p><p><b>要避免的问题：</b>要避免在页面上混合使用多种文本对齐方式，着力避免居中对齐。正式、稳重（通常也更乏味）可选。</p><p><b>亲密性</b>：彼此相关的项应当靠近，归组在一起。</p><p>如果某些组或项彼此之间并无关联，就不应存在很近的亲密性，这样就能为读者提供一个直观的提示，使读者马上了解页面的组织和内容。</p><p>物理位置的接近就意味着存在关联。</p><p>如果多个项相互之间有很近的亲密性，它们就会成为一个视觉单元，而不是多个孤立的元素。亲密性（即紧密型）意味着存在关联。</p><p>要有意识的注意你是怎样阅读的，你的视线怎么移动：从哪里开始；沿着怎样的路径；到哪里结束；读完之后，接下来看哪里？整个过程应当是一个合理的过程，有确定的开始，而且要有确定的结束。</p><p><b>根本目的</b>：实现组织性</p><p><b>如何实现</b>：微微眯起眼睛，统计眼睛停顿的次数来数一数页面上有多少个元素。如果页面上的项超过3-5个（也看具体情况），就要看看哪些孤立的元素可以归为一个视觉单元。</p><p><b>要避免的问题</b>：</p><p>避免一个页面上有太多孤立的元素。</p><p>不要在元素之间留出同样大小的空白，除非各组同属于一个子集。</p><p>不同属一组的元素之间不要建立关系！</p><p>不要仅仅因为有空白就把元素放在角落或中央。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>结合：</p><ol><li>把信息归入逻辑亲密性；</li><li>利用对齐，找到并制造重复性元素，加入对比。</li><li>找出页面中最有意思的东西，或者最重要的东西加以强调。把最重要的东西放在一起，读者就不会漏掉重点。</li><li>把信息分组为一些逻辑组。合理利用空间（不要用框），将各项分开或者联系起来。</li><li>找出可以重复的元素（包括对比的元素）。</li><li>最重要的是：增加对比。</li></ol><p>优质资源：<a href=\"https://link.zhihu.com/?target=http%3A//Creativemarket.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">Creativemarket.com</span><span class=\"invisible\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>颜色运用：</b></p><p><b>色轮：</b>黄红蓝三原色，唯一无法创建的颜色。</p><p>等量混合，得到三间色（绿、紫、橙）</p><p>将空白两边的颜色再等量混合，得到第三色（橙- 橙+ 紫- 紫+ 绿- 绿+）</p><p>现在就有一个由12种基本颜色构成的色轮。</p><p><b>互补色：</b>色轮上完全对立的颜色，最佳搭配是一种作为主色，另一种用于强调。</p><p>蓝色--橙色</p><p>红色--绿色</p><p>黄色--紫色</p><p><b>三色组：</b>彼此等距的三种颜色  基色三色组、间色三色组等</p><p>分裂互补三色组：从色轮的一边选择一种颜色，再在色轮上找到它的互补色，使用该互补色两侧的颜色。</p><p><b>类似色：</b>色轮上彼此相邻的颜色。</p><p><b>暗色和亮色：</b>纯色就是色调。向色调增加黑色就构成一个暗色；向色调增加白色就构成一个亮色。</p><p><b>单色：</b>由一种色调及其相应的多种亮色和暗色组成。</p><p><b>暗色和亮色的组合：</b>并不使用色调，而是使用这些颜色的不同亮色和暗色。</p><p>注意<b>色质</b>：色质是指，某种颜色的特定明暗度、深浅度或色调。</p><p><b>暖色与冷色</b>：增加红色或黄色来加热，增加不同程度的蓝色降温。</p><p>冷色趋于做背景色，暖色是趋进型的。如果要组合暖色和冷色，一定要少用暖色。</p><p>冷色是后退型的，使用更多的冷色才能产生效果。</p><p><b>如何取舍：</b>季节性？红色或者黄色代表夏季，蓝色冬季，橙色或棕色秋季，绿色春季。</p><p>公司制定的官方颜色？使用一些亮色或暗色？logo色？分类互补色。</p><p>图片？选取颜色，类似色：沉着冷静，或者互补色增加视觉活力。</p><p>CMYK和RGB，印刷与Web</p><p>CMYK：cyan、magenta、yellow、key（通常是黑色） 四色处理</p><p>RGB：red、green、blue</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Test：</p><ol><li>色轮上相邻的颜色称作：类似色</li><li>色轮上相对的颜色称作：互补色</li><li>在色调上增加白色会产生：亮色</li><li>在色调上增加黑色会产生：暗色</li></ol><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "设计", 
                    "tagLink": "https://api.zhihu.com/topics/19551557"
                }, 
                {
                    "tag": "写给大家看的设计书（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20130101"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54559498", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《写给大家看的设计书》提示与技巧", 
            "content": "<p><b>创建包装或品牌：</b></p><p>最重要的特性（重复原则）：每一件作品中都必须有某个标识性\t图像或某种标识性风格。</p><p>努力从相似点中确立特色，留下你的招牌动作。</p><p><b>企业名片：</b></p><p>去掉一切非必要的信息。同样也去掉类似“电话”“邮箱”“网址”之类的词。</p><p>格式：首先确认是水平格式还是垂直格式。</p><p>表述信息更适合垂直布局。</p><p>字体大小：7-9磅</p><p>创建名片、信笺和信封共有的一致图像。</p><p><b>信笺和信封：</b></p><p>信笺与信封应当与企业名片一起设计，他们看上去应该同属一体。</p><p>信封规格： 标准企业信封10号信封 </p><p><b>    创建中心点：</b></p><p>        应该有一个最突出的元素，在这三个上面都应当同样有这个主\t导\t元素。</p><p><b>    对齐：</b></p><p>        不要将某些内容在顶部居中，而把余下的文本左对齐；</p><p>        可以尝试沿着边右对齐，并有很多的行间距；</p><p>        尝试用很大的字体将公司名显示在顶部；</p><p>        尝试将logo标志（或一部分）放大并淡化，化为信件内容区\t的底层阴影。</p><p>    第二页：</p><p>        可以取第一页出现的一个小元素，第二页只使用这个小元素而\t不\t放其他内容。</p><p>    传真和复印：</p><p>        不要选择深色或者带有很多小点的纸张。</p><p>        避免大面积的深色墨迹、反色文本或太小的字体。</p><p>        如果确实需要大量传真，可以设计两种版本的信笺，一种用于\t打印，另一种用于传真。</p><p><b>传单：</b></p><p>    可以安全地冲破各种束缚！</p><p>    传单是最适合使用不同有趣字体和各种图片的地方之一。</p><p>    找到有趣的元素，把它们放大制造焦点。</p><p>    新手最严重的问题：缺少对比，而且信息的表现没有层次。要有\t一个明显的中心点，并使              用对比来组织信息，引导读者的视线浏览页面。</p><p>     创建一个中心点：</p><p>         在页面上放一个很大、有趣而且明显的东西。</p><p>    使用有对比的子标题：</p><p>        有了中心点之后，再使用明显的子标题，使读者能很快扫描这个传单，确定消息的要    点。</p><p>    重复：</p><p>        尝试在文本中适当增加同样的字体来实现重复。</p><p>    对齐：</p><p>        只选择一种对齐！</p><p><b>新闻简报：</b></p><p>    多页出版物最重要的特性之一就是一致性，或重复。</p><p>    新闻简报最大的问题是缺乏对齐、缺少对比。</p><p>    对齐：</p><p>    选择一种方式，然后一直坚持这种对齐。</p><p>    段落缩进：</p><p>        第一段不要缩进，即使跟在子标题后面也是如此。</p><p>    不要使用Helvetica/Arial</p><p>    正文应当可读</p><p><b>宣传册：</b></p><p>    读宣传册中各个面的顺序应该就是读者打开这个宣传册的顺序<b>。</b></p><p>    问题：缺乏对比，没有对齐，使用太多Helvetica/Arial字体。</p><p><b>明信片：</b></p><p>    与众不同</p><p>    成“系列”</p><p>    明确具体</p><p>    力求简练</p><p>    尽可能使用颜色</p><p><b>报纸广告：</b></p><p>    空白</p><p>    机敏</p><p>    清楚</p><p>    简洁</p><p>    问题：太过拥挤</p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "写给大家看的设计书（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20130101"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54714728", 
            "userName": "乌龙茶晚来秋", 
            "userLink": "https://www.zhihu.com/people/adf55f25a1891945165ca7a0ed496e4c", 
            "upvote": 0, 
            "title": "读书笔记《写给大家看的设计书》第二部分：字体设计之字体的基本规则", 
            "content": "<p>Tip：我认为，这部分内容有一部分是过时的，但是还是会记录下来，知道一段历史也是不错的。</p><p>打字机使用的是等宽字体，每个字母占据了相同的空间--一个句号会占据和字幕M同样大的空间。打字机无法打出斜体字，而是使用一个或两个撇号来标识应为斜体的内容。破折号、版权标识。其他特殊符号也没法打出。也没有粗体，强调就加下划线或者大写。</p><p><b>标点后面一个空格</b></p><p><b>引号</b>： 区分打字机引号和印刷引号</p><p><b>撇号</b>：其实是一个单独的闭引号，但它非常重要，有自己的区段</p><p><b>连接号</b>：某些词中间的短线、电话号码中的小横线，转行时用来表示断词</p><p>连字符（odd-looking）、—字线（7—12岁）、破折号（你迟到了——第二次）</p><p><b>特殊符号</b>：@ # $</p><p><b>重音符号</b></p><p><b>大写字母</b>：全部是大写字母，不易阅读</p><p><b>下划线</b>：不要使用下划线，永远不要用。</p><p>下划线最粗是打字员为了要告诉正在给这本书排字的工人哪些字需要印成\t\t\t\t斜体而留下的信号</p><p><b>字距调整：</b>可以创造出字间空格视觉上的连贯性，字号越大，空间调整就越重要。</p><p><b>寡妇和孤儿：</b>当一段文字的最后一行的字符数少于7个的时候，最后一行称为寡妇。</p><p>比在最后一样留下一个单词还糟糕的就是留下完整单词的一部分，而被连字号连接的前半部分还留在上一行，永远不要这么做。</p><p><b>其他：</b></p><p>跟随在有样式的文字后的标点：也应该是同样的样式。</p><p>括号中的标点：如果括号中的文字是整个句子的一部分，那么标点就应该在闭\t\t括号之外。如果括号内的文字是一个完整的单独的句子，标点应该在括号\t\t内。</p><p>段落缩进：一个em空格。</p><p>段落缩进或段落间的空行： 这是新的一段</p><p>首段：跟随在题目或小标题后的首段不需要缩进。</p><p>把文字放进方框里：四周要留足够的空间。</p><p>在列表中使用项目符号或装饰符号，而不是连字符。</p><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "写给大家看的设计书（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20130101"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1066761682327691264"
}
