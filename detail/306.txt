{
    "title": "java教学女司机带你飞", 
    "description": "有时间就更新点", 
    "followers": [
        "https://www.zhihu.com/people/gu-lang-59-53", 
        "https://www.zhihu.com/people/qia-qia-56-70-6", 
        "https://www.zhihu.com/people/zhang-jia-shu-69", 
        "https://www.zhihu.com/people/ha-ha-95-93-54", 
        "https://www.zhihu.com/people/peng-zi-93", 
        "https://www.zhihu.com/people/meng-wu-li-de-ye-wan", 
        "https://www.zhihu.com/people/xst007", 
        "https://www.zhihu.com/people/tan-xiao-yang-95", 
        "https://www.zhihu.com/people/likelxl", 
        "https://www.zhihu.com/people/alex-leon-42", 
        "https://www.zhihu.com/people/ping-you-l", 
        "https://www.zhihu.com/people/gyf-78", 
        "https://www.zhihu.com/people/dou-shi-liu-69", 
        "https://www.zhihu.com/people/qing-xie-leng-yu", 
        "https://www.zhihu.com/people/Reeee", 
        "https://www.zhihu.com/people/song-xiao-hui-74-95", 
        "https://www.zhihu.com/people/di-san-fang-37-10", 
        "https://www.zhihu.com/people/kkpai-duo-rou-jiang", 
        "https://www.zhihu.com/people/hua-zi-80-75-95", 
        "https://www.zhihu.com/people/yuan-lai-shi-li-25", 
        "https://www.zhihu.com/people/xin-ren-9-74-69", 
        "https://www.zhihu.com/people/bu-ding-63-94", 
        "https://www.zhihu.com/people/zhi-hu-29-20", 
        "https://www.zhihu.com/people/stephen-34-51", 
        "https://www.zhihu.com/people/xiao-xiao-niao-79-70", 
        "https://www.zhihu.com/people/laksh-93", 
        "https://www.zhihu.com/people/zhang-yu-tao-45", 
        "https://www.zhihu.com/people/elaine-wu-hui-qing", 
        "https://www.zhihu.com/people/CodeInception", 
        "https://www.zhihu.com/people/zheng-qi-lun-ji", 
        "https://www.zhihu.com/people/zi-shi-wei-guo-45", 
        "https://www.zhihu.com/people/dan-gao-shang-de-li-zi", 
        "https://www.zhihu.com/people/li-jian-fei-93", 
        "https://www.zhihu.com/people/jiehuo.me", 
        "https://www.zhihu.com/people/yu-jian-shu-87", 
        "https://www.zhihu.com/people/zhang-zui-82", 
        "https://www.zhihu.com/people/mei-xi-mao-zi", 
        "https://www.zhihu.com/people/hu-lu-66", 
        "https://www.zhihu.com/people/bing-cang-61", 
        "https://www.zhihu.com/people/xin-yu-36-42-17", 
        "https://www.zhihu.com/people/zcong-diao", 
        "https://www.zhihu.com/people/ya-se-xiao-ge-ge", 
        "https://www.zhihu.com/people/yxf9527", 
        "https://www.zhihu.com/people/liu-dong-rong-37", 
        "https://www.zhihu.com/people/0kooo", 
        "https://www.zhihu.com/people/wu-xiu-heng-20", 
        "https://www.zhihu.com/people/shallow-75-50", 
        "https://www.zhihu.com/people/silas-45", 
        "https://www.zhihu.com/people/xiao-xiao-de-fang-cao", 
        "https://www.zhihu.com/people/include-34-61", 
        "https://www.zhihu.com/people/li-tian-er-31", 
        "https://www.zhihu.com/people/xing-zhi-40", 
        "https://www.zhihu.com/people/mao-zhang", 
        "https://www.zhihu.com/people/zhang-bao-feng-68", 
        "https://www.zhihu.com/people/la-la-39-13-98", 
        "https://www.zhihu.com/people/poplar1989", 
        "https://www.zhihu.com/people/qin-ying-16-33", 
        "https://www.zhihu.com/people/pan-xu-50", 
        "https://www.zhihu.com/people/iwundumx", 
        "https://www.zhihu.com/people/shuidf", 
        "https://www.zhihu.com/people/ao-gu-2-9-89", 
        "https://www.zhihu.com/people/wang-dong-70-56-61", 
        "https://www.zhihu.com/people/chao-ren-20-48", 
        "https://www.zhihu.com/people/suo-you-dui-mei-hao-de-qi-dai", 
        "https://www.zhihu.com/people/blackwooder", 
        "https://www.zhihu.com/people/li-yun-48-21", 
        "https://www.zhihu.com/people/linweiming", 
        "https://www.zhihu.com/people/piexl", 
        "https://www.zhihu.com/people/hui-fei-de-yu-95-72", 
        "https://www.zhihu.com/people/xiao-han-13-60", 
        "https://www.zhihu.com/people/liu-jian-ming-18", 
        "https://www.zhihu.com/people/nong-da-da-shuai-b", 
        "https://www.zhihu.com/people/bianwf-74", 
        "https://www.zhihu.com/people/disat-79", 
        "https://www.zhihu.com/people/bai-ying-98-61", 
        "https://www.zhihu.com/people/SecondaryMarquis", 
        "https://www.zhihu.com/people/she-hui-zhu-yi-wen-ming-he-xie", 
        "https://www.zhihu.com/people/sen-lin-hai-de-lian-ren-60", 
        "https://www.zhihu.com/people/loveandpeace-16", 
        "https://www.zhihu.com/people/mi-mang-de-xiao-xue-sheng-61", 
        "https://www.zhihu.com/people/jungle0718", 
        "https://www.zhihu.com/people/jockey-13", 
        "https://www.zhihu.com/people/meng-li-58", 
        "https://www.zhihu.com/people/zi-fa-84", 
        "https://www.zhihu.com/people/ken-25-97", 
        "https://www.zhihu.com/people/wang-qiang-42-71", 
        "https://www.zhihu.com/people/he-fei-nan-zhan-16", 
        "https://www.zhihu.com/people/liuxiang-92-75", 
        "https://www.zhihu.com/people/cao-wen-xiang-20", 
        "https://www.zhihu.com/people/wang-yong-jun-11-12", 
        "https://www.zhihu.com/people/chan-rao-guan", 
        "https://www.zhihu.com/people/ni-bie-du-wo-81", 
        "https://www.zhihu.com/people/qiu-feng-xiao-se-30", 
        "https://www.zhihu.com/people/1deng", 
        "https://www.zhihu.com/people/pp9714", 
        "https://www.zhihu.com/people/glxe-ge", 
        "https://www.zhihu.com/people/mi-cheng-mi-cheng", 
        "https://www.zhihu.com/people/ke-xiao-er-17", 
        "https://www.zhihu.com/people/huang-hai-bin-19-38", 
        "https://www.zhihu.com/people/kevin-hill", 
        "https://www.zhihu.com/people/tang-xi-59-81", 
        "https://www.zhihu.com/people/ni-hao-xiang-hen-tian-y", 
        "https://www.zhihu.com/people/xu-ni-an-wen-31", 
        "https://www.zhihu.com/people/nan-fang-shao-nian-99", 
        "https://www.zhihu.com/people/xiao-xiao-xiao-liu-12138", 
        "https://www.zhihu.com/people/yun-he-73-56", 
        "https://www.zhihu.com/people/hahax-45", 
        "https://www.zhihu.com/people/k-richard", 
        "https://www.zhihu.com/people/huo-zai-dang-xia-ji-shi-xing-le-85", 
        "https://www.zhihu.com/people/ha-ha-78-46-67", 
        "https://www.zhihu.com/people/ghgg-8", 
        "https://www.zhihu.com/people/da-huan-33-20", 
        "https://www.zhihu.com/people/chi-huan-5", 
        "https://www.zhihu.com/people/ping-zi-li-de-xin", 
        "https://www.zhihu.com/people/yu-qian-55-1", 
        "https://www.zhihu.com/people/ba-shu-wu-yan-zu-62", 
        "https://www.zhihu.com/people/mr-chen-93-25", 
        "https://www.zhihu.com/people/yuan-li-45-33", 
        "https://www.zhihu.com/people/shi-sheng-jun-12", 
        "https://www.zhihu.com/people/li-yi-cong-85", 
        "https://www.zhihu.com/people/scofi-82", 
        "https://www.zhihu.com/people/yangsir-33-27", 
        "https://www.zhihu.com/people/su-duo-duo-43", 
        "https://www.zhihu.com/people/you-zhi-zhi-89", 
        "https://www.zhihu.com/people/cao-xuan-wei-54", 
        "https://www.zhihu.com/people/bing-mao-he-he", 
        "https://www.zhihu.com/people/gao-ming-xin-82-7", 
        "https://www.zhihu.com/people/du-xian-sheng-72-21-25", 
        "https://www.zhihu.com/people/shu-biao-75", 
        "https://www.zhihu.com/people/da-luo-bu-33-58", 
        "https://www.zhihu.com/people/fu-shi-chi-qu", 
        "https://www.zhihu.com/people/ai-luo-li-73", 
        "https://www.zhihu.com/people/liu-zi-91-29", 
        "https://www.zhihu.com/people/hu-yan-luan-yu-21-47", 
        "https://www.zhihu.com/people/feng-bo-yue-90", 
        "https://www.zhihu.com/people/xiao-shuai-54-14", 
        "https://www.zhihu.com/people/song-zi-91-16-43", 
        "https://www.zhihu.com/people/liu-bo-lun-69", 
        "https://www.zhihu.com/people/karen-91-35", 
        "https://www.zhihu.com/people/qiqi-11", 
        "https://www.zhihu.com/people/gou-nian-sha-gou", 
        "https://www.zhihu.com/people/yima-ping-chuan-40-95", 
        "https://www.zhihu.com/people/zsh-18-71", 
        "https://www.zhihu.com/people/li-xiao-hui-15-9", 
        "https://www.zhihu.com/people/ke-lu-si-64", 
        "https://www.zhihu.com/people/tsao-victory", 
        "https://www.zhihu.com/people/struct-78", 
        "https://www.zhihu.com/people/tuo-ba-41", 
        "https://www.zhihu.com/people/chen-fei-yu-37-36", 
        "https://www.zhihu.com/people/indy-24", 
        "https://www.zhihu.com/people/shen-qi-de-shuai-kong-fei-88", 
        "https://www.zhihu.com/people/zheng-zhi-yu-99", 
        "https://www.zhihu.com/people/xiao-yi-97-95-92", 
        "https://www.zhihu.com/people/yang-dong-bo-68", 
        "https://www.zhihu.com/people/kong-fei-92-40", 
        "https://www.zhihu.com/people/meng-bi-5-54", 
        "https://www.zhihu.com/people/boobusy", 
        "https://www.zhihu.com/people/wan-zhuan-you-yang-74", 
        "https://www.zhihu.com/people/18364094456", 
        "https://www.zhihu.com/people/ruo-er-er", 
        "https://www.zhihu.com/people/qing-jin-56-22", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/li-yun-cong-53", 
        "https://www.zhihu.com/people/da-xi-96-97", 
        "https://www.zhihu.com/people/valentin-26-55", 
        "https://www.zhihu.com/people/ji-yu-de-meng-68", 
        "https://www.zhihu.com/people/leftw", 
        "https://www.zhihu.com/people/shi-jian-99-93", 
        "https://www.zhihu.com/people/wang-yu-xuan-9-93", 
        "https://www.zhihu.com/people/fu-pei-49-28", 
        "https://www.zhihu.com/people/wang-ba-bi", 
        "https://www.zhihu.com/people/zhuang-jin-tu-6", 
        "https://www.zhihu.com/people/xuan-yi-97-9", 
        "https://www.zhihu.com/people/suninsky", 
        "https://www.zhihu.com/people/zoupython", 
        "https://www.zhihu.com/people/wan-er-81", 
        "https://www.zhihu.com/people/xian-dao-49", 
        "https://www.zhihu.com/people/yizhi-jue-qiang-de-xiao-zhu", 
        "https://www.zhihu.com/people/li-jian-guo-27", 
        "https://www.zhihu.com/people/yin-chao-97-59", 
        "https://www.zhihu.com/people/jin-chu-47-58", 
        "https://www.zhihu.com/people/gray1993", 
        "https://www.zhihu.com/people/cai-zhong-zhao-2", 
        "https://www.zhihu.com/people/itbu-jie-zhe", 
        "https://www.zhihu.com/people/peter-16-13", 
        "https://www.zhihu.com/people/jin-dan-98-66", 
        "https://www.zhihu.com/people/wu-chu-an-fang-de-qing-chun-70", 
        "https://www.zhihu.com/people/he-he-he-90-4", 
        "https://www.zhihu.com/people/li-xiao-peng-93-43", 
        "https://www.zhihu.com/people/feng-jing-song-53", 
        "https://www.zhihu.com/people/guido-t", 
        "https://www.zhihu.com/people/yishang-qu", 
        "https://www.zhihu.com/people/xiao-liu-50-46", 
        "https://www.zhihu.com/people/yuan-aa-19", 
        "https://www.zhihu.com/people/dao-xin-41-93", 
        "https://www.zhihu.com/people/theking-1-65", 
        "https://www.zhihu.com/people/xu-dong-liang-ren", 
        "https://www.zhihu.com/people/ji-er-60-51", 
        "https://www.zhihu.com/people/jie-jie-17-93", 
        "https://www.zhihu.com/people/nan-de-gu-ji-33", 
        "https://www.zhihu.com/people/819989574qq-com", 
        "https://www.zhihu.com/people/wu-jun-18-31", 
        "https://www.zhihu.com/people/hu-yu-mei-2", 
        "https://www.zhihu.com/people/13644689432", 
        "https://www.zhihu.com/people/da-chuang-88", 
        "https://www.zhihu.com/people/di-tie-69", 
        "https://www.zhihu.com/people/fang-liu-bu-xi", 
        "https://www.zhihu.com/people/teng-", 
        "https://www.zhihu.com/people/zhong-sheng-xue-xi-45", 
        "https://www.zhihu.com/people/insight-jing", 
        "https://www.zhihu.com/people/duan-yi-chi-quan-tian-shi", 
        "https://www.zhihu.com/people/pelven2", 
        "https://www.zhihu.com/people/momoryking-35", 
        "https://www.zhihu.com/people/zhaoxinnevermore", 
        "https://www.zhihu.com/people/wbego", 
        "https://www.zhihu.com/people/feng-xiao-zhong-30", 
        "https://www.zhihu.com/people/bai-lei-06-07", 
        "https://www.zhihu.com/people/feng-41", 
        "https://www.zhihu.com/people/zhi-ao-15-47", 
        "https://www.zhihu.com/people/qiu-tian-de-hai-63", 
        "https://www.zhihu.com/people/zu-qiu-xiao-zi-64", 
        "https://www.zhihu.com/people/xcc-56", 
        "https://www.zhihu.com/people/kaka-4-86", 
        "https://www.zhihu.com/people/xie-zi-82-82", 
        "https://www.zhihu.com/people/jia-bao-sen", 
        "https://www.zhihu.com/people/panda3033-72", 
        "https://www.zhihu.com/people/li-shuai-76-22", 
        "https://www.zhihu.com/people/li-yi-51-65", 
        "https://www.zhihu.com/people/evan_lee", 
        "https://www.zhihu.com/people/han-yang-58-23", 
        "https://www.zhihu.com/people/jack-devil-53", 
        "https://www.zhihu.com/people/chen-gu-niang-35-50", 
        "https://www.zhihu.com/people/kenli", 
        "https://www.zhihu.com/people/jiang-ya-fei-15", 
        "https://www.zhihu.com/people/xiao-huo-chai-62", 
        "https://www.zhihu.com/people/lin-yi-mu-93", 
        "https://www.zhihu.com/people/xie-zheng-yuan-4", 
        "https://www.zhihu.com/people/smile-cheng-46", 
        "https://www.zhihu.com/people/liang-ze-peng", 
        "https://www.zhihu.com/people/xie-xiao-yang-47", 
        "https://www.zhihu.com/people/liuqixuan", 
        "https://www.zhihu.com/people/zhou-ben-yu-hong-31", 
        "https://www.zhihu.com/people/xiao-ao-56-95", 
        "https://www.zhihu.com/people/le-you-ran-84", 
        "https://www.zhihu.com/people/zhang-de-37-80", 
        "https://www.zhihu.com/people/17631654762", 
        "https://www.zhihu.com/people/danieltt", 
        "https://www.zhihu.com/people/lei-zi-hai", 
        "https://www.zhihu.com/people/666-54-15-74", 
        "https://www.zhihu.com/people/green-hand-41", 
        "https://www.zhihu.com/people/shi-jian-96-28", 
        "https://www.zhihu.com/people/bfofourseasons", 
        "https://www.zhihu.com/people/he-zu-dao-19-96", 
        "https://www.zhihu.com/people/jin-se-hua-nian-90", 
        "https://www.zhihu.com/people/da-hai-tong-xue-6", 
        "https://www.zhihu.com/people/bei-cheng-qian-xiao", 
        "https://www.zhihu.com/people/elias-95", 
        "https://www.zhihu.com/people/feng-yan-bin-49-52", 
        "https://www.zhihu.com/people/xin-zhi-50-75", 
        "https://www.zhihu.com/people/wang-shuai-34-32", 
        "https://www.zhihu.com/people/heonheon", 
        "https://www.zhihu.com/people/hua-hua-shi-jie-59-18", 
        "https://www.zhihu.com/people/18810642721", 
        "https://www.zhihu.com/people/gao-bi-li-51", 
        "https://www.zhihu.com/people/si-kong-mu-fu", 
        "https://www.zhihu.com/people/cheng-jia-hao-71", 
        "https://www.zhihu.com/people/wang-lei-4-53", 
        "https://www.zhihu.com/people/bjsxtjin", 
        "https://www.zhihu.com/people/xin-yang-13-17-95", 
        "https://www.zhihu.com/people/zhang-liang-75-26-54", 
        "https://www.zhihu.com/people/yin-zi-53-48", 
        "https://www.zhihu.com/people/xin-zhong-ri-yue-12", 
        "https://www.zhihu.com/people/xin-bing-jia-yi-bing-ding-wu-ji-geng-xin", 
        "https://www.zhihu.com/people/zhou-yuan-chao-9", 
        "https://www.zhihu.com/people/13643343349", 
        "https://www.zhihu.com/people/wang-yong-tian-37", 
        "https://www.zhihu.com/people/haozi-96-20-10", 
        "https://www.zhihu.com/people/mmmle", 
        "https://www.zhihu.com/people/zhang-zhang-85-39-12", 
        "https://www.zhihu.com/people/gu-bei-qing-ge-han-68", 
        "https://www.zhihu.com/people/andy123-53", 
        "https://www.zhihu.com/people/15133218313", 
        "https://www.zhihu.com/people/zhang-zheng-69-41", 
        "https://www.zhihu.com/people/together-66-73", 
        "https://www.zhihu.com/people/wan-lun-76", 
        "https://www.zhihu.com/people/xue-ye-bai-xiang-li-12-75", 
        "https://www.zhihu.com/people/la-hu-hu-32", 
        "https://www.zhihu.com/people/Winston.Li"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/49067985", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 2, 
            "title": "关于css盒子模型", 
            "content": "<p>在讲解盒子模型之前，要明确知道html和css是做什么事的？</p><p>html（超文本标记语言）：负责画页面的，但是画出来的页面并不好看！只能说是把页面中需要的元素全都罗列出来。</p><p>css（层叠样式表）：上面说html画出的页面不好看，那么就需要将不好看的页面修饰的好看呀！用的技术就是我们说的css了！</p><p>那么在使页面变得好看炫酷的同时，就涉及到页面各个元素之间的排版，页面上的各个元素之间就需要一个思维模型的理论才可以设计呀！</p><p>这个理论模型 ，就是盒子模型。我们看页面之间的元素之间的关系：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a3293038f14001864eee5c8681af7bea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"953\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"953\" data-original=\"https://pic3.zhimg.com/v2-a3293038f14001864eee5c8681af7bea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;953&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"953\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"953\" data-original=\"https://pic3.zhimg.com/v2-a3293038f14001864eee5c8681af7bea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a3293038f14001864eee5c8681af7bea_b.jpg\"/></figure><p>那么就元素1来看，他在页面中占用的宽度到底是什么？高度到底是什么？</p><p>宽：margin-left+border+padding-left+元素宽度+padding-right+border+margin-right</p><p>高：margin-top+border+padding-top+元素高度+padding-bottom+border+margin-bottom</p><p>对于这个理论的证明，我们可以写一段 代码：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8448f060f14e700a8d4f39fca4424f2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb\" width=\"675\" data-original=\"https://pic3.zhimg.com/v2-8448f060f14e700a8d4f39fca4424f2e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;675&#39; height=&#39;423&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"675\" data-original=\"https://pic3.zhimg.com/v2-8448f060f14e700a8d4f39fca4424f2e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8448f060f14e700a8d4f39fca4424f2e_b.jpg\"/></figure><p>打开谷歌浏览器的前台调试（f12打开），查看盒子模型：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae04f70408a2e773c66c47273d109e3d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1036\" data-rawheight=\"713\" class=\"origin_image zh-lightbox-thumb\" width=\"1036\" data-original=\"https://pic2.zhimg.com/v2-ae04f70408a2e773c66c47273d109e3d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1036&#39; height=&#39;713&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1036\" data-rawheight=\"713\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1036\" data-original=\"https://pic2.zhimg.com/v2-ae04f70408a2e773c66c47273d109e3d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae04f70408a2e773c66c47273d109e3d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面只是大致讲解，本技术用文字表述，写起来有点费劲，所以我配套了一个盒子模型对应的视频，可以看具体调试步骤和盒子模型具体理论：</p><p>百度云地址：</p><p>（1）盒子模型讲解：</p><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1aXqnYlAX2p0HC7odiMSgrw\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1aXqnYl</span><span class=\"invisible\">AX2p0HC7odiMSgrw</span><span class=\"ellipsis\"></span></a> </p><p>提取码：drbk </p><p>（2）盒子模型新版12306中案例练习：</p><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/15qI75x7zP6ej6b6aI_o6Eg\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/15qI75x</span><span class=\"invisible\">7zP6ej6b6aI_o6Eg</span><span class=\"ellipsis\"></span></a> </p><p>提取码：03j1 </p>", 
            "topic": [
                {
                    "tag": "CSS", 
                    "tagLink": "https://api.zhihu.com/topics/19551326"
                }, 
                {
                    "tag": "CSS 布局", 
                    "tagLink": "https://api.zhihu.com/topics/19620819"
                }, 
                {
                    "tag": "Div+CSS", 
                    "tagLink": "https://api.zhihu.com/topics/19566907"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44787918", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 10, 
            "title": "Scanner的close()问题", 
            "content": "<p>好多人发现了在Scanner关闭后无法继续使用的问题：</p><p>例如，先看下面的代码：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"324\" src=\"https://pic4.zhimg.com/v2-41bd567b55a0167697c1321e00c15dfb_b.jpg\" data-size=\"normal\" data-rawwidth=\"782\" class=\"origin_image zh-lightbox-thumb\" width=\"782\" data-original=\"https://pic4.zhimg.com/v2-41bd567b55a0167697c1321e00c15dfb_r.jpg\"/></noscript><img data-rawheight=\"324\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;782&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"782\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"782\" data-original=\"https://pic4.zhimg.com/v2-41bd567b55a0167697c1321e00c15dfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-41bd567b55a0167697c1321e00c15dfb_b.jpg\"/></figure><p>我们初步的想法是：第一个扫描器关闭之后，再创建一个新的扫描器用，但是结果是：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"152\" src=\"https://pic4.zhimg.com/v2-bac6da7dd77897d1b58881527b502b37_b.jpg\" data-size=\"normal\" data-rawwidth=\"748\" class=\"origin_image zh-lightbox-thumb\" width=\"748\" data-original=\"https://pic4.zhimg.com/v2-bac6da7dd77897d1b58881527b502b37_r.jpg\"/></noscript><img data-rawheight=\"152\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;748&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"748\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"748\" data-original=\"https://pic4.zhimg.com/v2-bac6da7dd77897d1b58881527b502b37_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bac6da7dd77897d1b58881527b502b37_b.jpg\"/></figure><p>发现出现异常，原因是什么呢？</p><p>我们通过源码去分析：</p><p>先看System.in----点击源码发现：</p><p>public final static InputStream in = null;</p><p>in这个属性，是System类下面的一个static修饰的常量，那么一旦有了System.in,就是要被共享的！！</p><p>然后再看Scanner的源码：（我截图出来重要的部分）</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"514\" src=\"https://pic3.zhimg.com/v2-53992491e37893bc069433ad0f4e468e_b.jpg\" data-size=\"normal\" data-rawwidth=\"624\" class=\"origin_image zh-lightbox-thumb\" width=\"624\" data-original=\"https://pic3.zhimg.com/v2-53992491e37893bc069433ad0f4e468e_r.jpg\"/></noscript><img data-rawheight=\"514\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;624&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"624\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"624\" data-original=\"https://pic3.zhimg.com/v2-53992491e37893bc069433ad0f4e468e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-53992491e37893bc069433ad0f4e468e_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//System.in\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">System.in</a> 被传入了Scanner的有参构造器，然后在Scanner关闭的时候，其实关闭的就是</p><p>System.in, 那么得到的效果就是：在第一次关闭close之后，再用共享的<a href=\"https://link.zhihu.com/?target=http%3A//System.in\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">System.in</span><span class=\"invisible\"></span></a>就不好使了 ，就会出现异常。</p><p>所以实际在用的时候，我们建议Scanner要当做全局变量使用，在程序结束的时候再回调关闭。</p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "javase", 
                    "tagLink": "https://api.zhihu.com/topics/19725879"
                }
            ], 
            "comments": [
                {
                    "userName": "残心木偶", 
                    "userLink": "https://www.zhihu.com/people/fcda80de00a3e28ba6ff4310abdedeb2", 
                    "content": "<p>找了很久都没有找到能这样完美解释Scanner关闭原理的帖子，老师写的清晰易懂，感谢老师分享😍</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "北落师门", 
                    "userLink": "https://www.zhihu.com/people/c2cfbe65798ea338cfbc59c9b565321d", 
                    "content": "<p>喜迎更新</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Guido.t", 
                    "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                    "content": "撒花", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Guido.t", 
                    "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                    "content": "有多次输入的吗，Scanner的输入好像只有一次有效，再输入不成了，得重新启动程序了", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "不是你说的 看我图中事例", 
                            "likes": 0, 
                            "replyToAuthor": "Guido.t"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42506481", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 3, 
            "title": "人工智能是否终将代替人类", 
            "content": "<p>原谅我的肤浅！！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c52aa30197b729795ae197a4803df9fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-c52aa30197b729795ae197a4803df9fa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;383&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-c52aa30197b729795ae197a4803df9fa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c52aa30197b729795ae197a4803df9fa_b.jpg\"/></figure><p>我写这篇文章！！完全是出于愤怒！！！！我被愤怒点燃了！！！！</p><p>事情是这样的，我辛辛苦苦写了专栏文章：集合总结！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c11a169e06052cdaf4a13298dcff9832_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"349\" data-rawheight=\"50\" class=\"content_image\" width=\"349\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;349&#39; height=&#39;50&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"349\" data-rawheight=\"50\" class=\"content_image lazy\" width=\"349\" data-actualsrc=\"https://pic3.zhimg.com/v2-c11a169e06052cdaf4a13298dcff9832_b.jpg\"/></figure><p>码好多字！整了好多图！！！结果呢！！！！被和谐了两次！告诉我扰乱了社区秩序等等等的！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dba1c06590d3093c7078a3016484db71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-dba1c06590d3093c7078a3016484db71_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;508&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-dba1c06590d3093c7078a3016484db71_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dba1c06590d3093c7078a3016484db71_b.jpg\"/></figure><p>我气愤，我以为我是发了百度云连接所以告诉我含推广内容吗？后来发现也不是啊！</p><p>到底是怎么了啊！！！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3c79b9c4bb30c17129616aab50bc5b20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"379\" class=\"content_image\" width=\"408\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;408&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"379\" class=\"content_image lazy\" width=\"408\" data-actualsrc=\"https://pic1.zhimg.com/v2-3c79b9c4bb30c17129616aab50bc5b20_b.jpg\"/></figure><p>后来  我一个一个字看！！！发现！！！</p><p>我有一张案例图片：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-56b362b9e16212fed0e8c946eeb17aa2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1230\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb\" width=\"1230\" data-original=\"https://pic3.zhimg.com/v2-56b362b9e16212fed0e8c946eeb17aa2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1230&#39; height=&#39;552&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1230\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1230\" data-original=\"https://pic3.zhimg.com/v2-56b362b9e16212fed0e8c946eeb17aa2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-56b362b9e16212fed0e8c946eeb17aa2_b.jpg\"/></figure><p>这和谐的时候，图片没有打码！！！！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我****  哔哔哔哔哔哔  省略一堆你懂得！</p><p>我气愤了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-57242c6b8e4212ce835106cbf89161cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"705\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"705\" data-original=\"https://pic4.zhimg.com/v2-57242c6b8e4212ce835106cbf89161cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;705&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"705\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"705\" data-original=\"https://pic4.zhimg.com/v2-57242c6b8e4212ce835106cbf89161cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-57242c6b8e4212ce835106cbf89161cf_b.jpg\"/></figure><p>从这可以看出！虽然可能很狭隘的想法，但是  真的  在一些场合  他的识别过于智能！！！</p><p>他没有人的思维！！！所以后面 应该还会再提高</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我以前跟同学吃饭 ，他就是做数据分析  我说现在都大数据时代了  还用得着你们么？</p><p>他说了一句：他替代不了我的思维</p><p>当时我还不屑一顾！！！</p><p>啊啊啊啊！</p><p>好了就发泄到这里吧！！！</p><p>原谅我的愤怒和愚蠢！</p><p></p>", 
            "topic": [
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "人类文明", 
                    "tagLink": "https://api.zhihu.com/topics/19623988"
                }, 
                {
                    "tag": "人类未来", 
                    "tagLink": "https://api.zhihu.com/topics/19594149"
                }
            ], 
            "comments": [
                {
                    "userName": "师太别追了", 
                    "userLink": "https://www.zhihu.com/people/96de6f65e7765053edc75ffc0ee0f212", 
                    "content": "<p>可怕</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "kaxty", 
                    "userLink": "https://www.zhihu.com/people/9c6486a51f83399a24d08d5908f6b2f1", 
                    "content": "😂", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "纵情无忧", 
                    "userLink": "https://www.zhihu.com/people/de69aa3ddb1e2d00276f6fcfd831585d", 
                    "content": "<p>阔怕</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "北落师门", 
                    "userLink": "https://www.zhihu.com/people/c2cfbe65798ea338cfbc59c9b565321d", 
                    "content": "<p>老师多萌啊</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "打你小屁屁", 
                    "userLink": "https://www.zhihu.com/people/4dce69b9b11d4a09a6593c0e90199337", 
                    "content": "<p>你太可爱了8</p><p></p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42504173", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 8, 
            "title": "java集合总结", 
            "content": "<p>下面的集合 只是简单讲解，要想看详细的，提供百度云连接：</p><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1DYLMH7evPwvkCHkTSBa-bQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1DYLMH7</span><span class=\"invisible\">evPwvkCHkTSBa-bQ</span><span class=\"ellipsis\"></span></a> 密码：qyhz</p><p>结合着看 效果更好 不然第一次接触这东西，看着可能会有些吃力。</p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><p>无论是在面试中还是实际的开发项目中，集合总是一个重点，这章就是简单介绍一下常用集合。</p><p>（1）什么是集合</p><p>看百度百科中的解释：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5d521c9732bde07a53a2c1c052b23be1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb\" width=\"841\" data-original=\"https://pic2.zhimg.com/v2-5d521c9732bde07a53a2c1c052b23be1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;841&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"841\" data-original=\"https://pic2.zhimg.com/v2-5d521c9732bde07a53a2c1c052b23be1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5d521c9732bde07a53a2c1c052b23be1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>简单来说，集合就是 “存东西”的！ 也可以叫 容器！</p><p>那我们之前学过的数组，其实也是用来“存东西”的，有啥区别呢？对于数组来说，删除增加元素效率很低的，我们学了集合，会客服这些缺点。</p><p>那么集合不是一个概念，我们集合 有好多中类型的，统称为集合！我们可以画一下 集合的简单结构：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-91c3e94d83cc1d47516bd5eec88f0b03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb\" width=\"1056\" data-original=\"https://pic4.zhimg.com/v2-91c3e94d83cc1d47516bd5eec88f0b03_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1056&#39; height=&#39;494&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1056\" data-original=\"https://pic4.zhimg.com/v2-91c3e94d83cc1d47516bd5eec88f0b03_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-91c3e94d83cc1d47516bd5eec88f0b03_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>不同的集合，应用不一样，底层原理不一样，数据结构不一样！所以这章要想学的好，数据结构少不了！就跟女人的包一样，不同的包，不同场合！集合也是 ，集合这么多 供你选择！</p><hr/><p>（2）集合的应用</p><p>我们说一下实际在应用中集合的应用：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a4d96e8b82cdbf65a5a28d3ebe150ce9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1251\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb\" width=\"1251\" data-original=\"https://pic2.zhimg.com/v2-a4d96e8b82cdbf65a5a28d3ebe150ce9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1251&#39; height=&#39;568&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1251\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1251\" data-original=\"https://pic2.zhimg.com/v2-a4d96e8b82cdbf65a5a28d3ebe150ce9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a4d96e8b82cdbf65a5a28d3ebe150ce9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面的这个图是我把常见的一些应用截图了，上面就是实际开发中的一些应用，可以看到大面积应用到集合，集合是后台技能点，将数据存入集合中，然后在前台用好看的绚丽的效果进行展示！</p><hr/><p>（3）集合的详细结构：</p><p>上面我们画的是集合的简单结构图，那么我们本章重点 就是说一下Collection部分的集合，我们看一眼详细结构图，包含简单原理概述：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-77b85defdf32d7a8a339928fda43ec40_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1262\" data-rawheight=\"551\" class=\"origin_image zh-lightbox-thumb\" width=\"1262\" data-original=\"https://pic1.zhimg.com/v2-77b85defdf32d7a8a339928fda43ec40_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1262&#39; height=&#39;551&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1262\" data-rawheight=\"551\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1262\" data-original=\"https://pic1.zhimg.com/v2-77b85defdf32d7a8a339928fda43ec40_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-77b85defdf32d7a8a339928fda43ec40_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面这个图中，上部分是接口部分，底下的方框部分，都是具体的实现类，也就是具体的集合，我们可以分别对每个简单说一下：</p><p>（3-1）ArrayList,Vector:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e6b4de05fb7b4a0f55dbb78c2a3fe1c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"1077\" data-original=\"https://pic4.zhimg.com/v2-e6b4de05fb7b4a0f55dbb78c2a3fe1c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1077&#39; height=&#39;560&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1077\" data-original=\"https://pic4.zhimg.com/v2-e6b4de05fb7b4a0f55dbb78c2a3fe1c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e6b4de05fb7b4a0f55dbb78c2a3fe1c3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>底层原理就是数组的扩容！老数组不够用了，就创建一个新的数组，然后value的指向新的数组！</p><p>（3-2）LinkedList:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b5ac310bb47051faab5392c224697f10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb\" width=\"866\" data-original=\"https://pic1.zhimg.com/v2-b5ac310bb47051faab5392c224697f10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;866&#39; height=&#39;546&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"866\" data-original=\"https://pic1.zhimg.com/v2-b5ac310bb47051faab5392c224697f10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b5ac310bb47051faab5392c224697f10_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>底层是一个双向链表，所以在添加数组，删除数据的时候，效率高！！！</p><p>（3-3）HashSet</p><p>底层原理：哈希表（又叫散列表）</p><p>原理图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1f3f41abc2c1a840def27e798271d668_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1150\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"1150\" data-original=\"https://pic1.zhimg.com/v2-1f3f41abc2c1a840def27e798271d668_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1150&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1150\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1150\" data-original=\"https://pic1.zhimg.com/v2-1f3f41abc2c1a840def27e798271d668_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1f3f41abc2c1a840def27e798271d668_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（3-4）TreeSet</p><p>底层原理：二叉树（红黑树）对于二叉树的遍历方式，按照中序遍历：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e9cc5f5f2891b0a41d5a527fa9dd2682_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"905\" data-original=\"https://pic3.zhimg.com/v2-e9cc5f5f2891b0a41d5a527fa9dd2682_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;905&#39; height=&#39;522&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"905\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"905\" data-original=\"https://pic3.zhimg.com/v2-e9cc5f5f2891b0a41d5a527fa9dd2682_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e9cc5f5f2891b0a41d5a527fa9dd2682_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面就是说了一下 简单的原理，并没有从源码层面分析。，</p><p>因为源码太多了 一时写不过来 等我有时间再逐个更新把</p><p>上面是Collection部分的讲解，还有另一部分Map部分</p><p>但是Map部分也是侧重讲解源码，因为底层也是哈希表和二叉树</p><p>源码的东西 有机会再写 用知乎写代码 很不好看 再说吧 可能是我没研究明白怎么调节好看的格式！！</p><p>over~~</p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "集合类", 
                    "tagLink": "https://api.zhihu.com/topics/20060916"
                }, 
                {
                    "tag": "树（数据结构）", 
                    "tagLink": "https://api.zhihu.com/topics/19680489"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41669811", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 19, 
            "title": "session和cookie区别", 
            "content": "<p>建议先看前两篇文章，再看这个 会透彻一点，希望你看一下前两篇的session简介和cookie简介！！！</p><p>有些初学者，在学完了session和cookie之后，就感觉？哎？？这玩意有区别么？都是服务器端生成，都可以存数据？？？啥区别啊？？？干啥用的啊！！</p><p>我用一张图表示，想说的全在图中！</p><p>请放大这个图，好好看看！！求你！！！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ba61c43d1ecf2530f0a2fde645c69895_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"295\" class=\"content_image\" width=\"319\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;319&#39; height=&#39;295&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"295\" class=\"content_image lazy\" width=\"319\" data-actualsrc=\"https://pic2.zhimg.com/v2-ba61c43d1ecf2530f0a2fde645c69895_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-680bfaf42fe746ef5642be21c711ddb5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1217\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb\" width=\"1217\" data-original=\"https://pic2.zhimg.com/v2-680bfaf42fe746ef5642be21c711ddb5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1217&#39; height=&#39;536&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1217\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1217\" data-original=\"https://pic2.zhimg.com/v2-680bfaf42fe746ef5642be21c711ddb5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-680bfaf42fe746ef5642be21c711ddb5_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "session", 
                    "tagLink": "https://api.zhihu.com/topics/19601625"
                }, 
                {
                    "tag": "cookie (HTTP)", 
                    "tagLink": "https://api.zhihu.com/topics/19616699"
                }, 
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }
            ], 
            "comments": [
                {
                    "userName": "神奇的帅孔斐88", 
                    "userLink": "https://www.zhihu.com/people/a7bbe8f680eb61f19daa8f880b9cfc22", 
                    "content": "<p>很清晰!!!!</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Guido.t", 
                    "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                    "content": "集合呢，看见你更新了，点进去又不存在", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "被。被。被和谐了 气哭脸", 
                            "likes": 0, 
                            "replyToAuthor": "Guido.t"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41665368", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 23, 
            "title": "session简介", 
            "content": "<p>上一篇写了cookie，建议你先去上一篇搂一眼，别混了。。初学者很容易混了。。并且cookie是基础。。</p><p>开始正题，session：</p><h2>1.什么是Session？</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5e300a4bebe37631a35304a517b7746a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"718\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb\" width=\"718\" data-original=\"https://pic3.zhimg.com/v2-5e300a4bebe37631a35304a517b7746a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;718&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"718\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"718\" data-original=\"https://pic3.zhimg.com/v2-5e300a4bebe37631a35304a517b7746a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5e300a4bebe37631a35304a517b7746a_b.jpg\"/></figure><p>上面的文字好好读一下，起码要知道大致的概念，有点印象再往下走~</p><h2>2.创建session感受！</h2><p>Session在服务器端对应的类是：javax.servlet.http.HttpSession:</p><p>(1)创建一个Servlet：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SessionServlet</span> <span class=\"kd\">extends</span> <span class=\"n\">HttpServlet</span> <span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">service</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">req</span><span class=\"o\">,</span> <span class=\"n\">HttpServletResponse</span> <span class=\"n\">resp</span><span class=\"o\">)</span>\n\t\t\t<span class=\"kd\">throws</span> <span class=\"n\">ServletException</span><span class=\"o\">,</span> <span class=\"n\">IOException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">HttpSession</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"na\">getSession</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">());</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>（2）开始访问：</p><p>前台：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-550e4faf1d86338a82f2fd206f7ecfe3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1017\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb\" width=\"1017\" data-original=\"https://pic4.zhimg.com/v2-550e4faf1d86338a82f2fd206f7ecfe3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1017&#39; height=&#39;606&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1017\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1017\" data-original=\"https://pic4.zhimg.com/v2-550e4faf1d86338a82f2fd206f7ecfe3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-550e4faf1d86338a82f2fd206f7ecfe3_b.jpg\"/></figure><p>第一次访问我们看到，后台创建了session之后，将其对应的sessionid响应到浏览器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>后台打印sessionid：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b97860ca9aa4e981a3b4f7e27ab4c224_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"79\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic1.zhimg.com/v2-b97860ca9aa4e981a3b4f7e27ab4c224_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;523&#39; height=&#39;79&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"79\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"523\" data-original=\"https://pic1.zhimg.com/v2-b97860ca9aa4e981a3b4f7e27ab4c224_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b97860ca9aa4e981a3b4f7e27ab4c224_b.jpg\"/></figure><p>再次访问（注意，不关闭浏览器再次访问后台）：</p><p>前台：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0a77e2c7dd7a7c9fbdc3648768cf507c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1019\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb\" width=\"1019\" data-original=\"https://pic1.zhimg.com/v2-0a77e2c7dd7a7c9fbdc3648768cf507c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1019&#39; height=&#39;616&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1019\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1019\" data-original=\"https://pic1.zhimg.com/v2-0a77e2c7dd7a7c9fbdc3648768cf507c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0a77e2c7dd7a7c9fbdc3648768cf507c_b.jpg\"/></figure><p>发现什么？响应中已经没有sessionid了，意味这个session第二次不会再被创建了，但是请求中携带着上次的sessionid，意味着 可以通过这个sessionid访问到之前的那个session啊！</p><p>看一眼后台结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-25bca343bbd8d21bb954c27c6d4385c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic2.zhimg.com/v2-25bca343bbd8d21bb954c27c6d4385c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;488&#39; height=&#39;80&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic2.zhimg.com/v2-25bca343bbd8d21bb954c27c6d4385c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-25bca343bbd8d21bb954c27c6d4385c9_b.jpg\"/></figure><p>之后，我关闭浏览器！注意是关闭浏览器再次访问！</p><p>看后台：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-44816487b7d3e666223718d245ed522b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb\" width=\"553\" data-original=\"https://pic4.zhimg.com/v2-44816487b7d3e666223718d245ed522b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;553&#39; height=&#39;132&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"553\" data-original=\"https://pic4.zhimg.com/v2-44816487b7d3e666223718d245ed522b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-44816487b7d3e666223718d245ed522b_b.jpg\"/></figure><p>发现了什么！！sessionid变了！！证明了什么！！只要关闭浏览器再次访问，session就要被新创建，生成新的sessionid啊！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>再次总结上面的现象：</p><p>从上面的现象中我们可以发现：</p><p>        第一次访问的时候，发送请求到后端，在后台HttpSession session=req.getSession() ，那么第一次没有Session，那么就会由服务器创建一个HttpSession，并且将HttpSession对应的Sessionid绑定到http协议中响应回客户端。</p><p>        第二次访问的时候，请求的时候 在http协议中有Sessionid ，那么后台 HttpSession session=req.getSession() 就会根据这个id取出对应的HttpSession,并不会生成新的session</p><p>        并且可以发现，在浏览器关闭之后，代表一次会话（浏览器打开到关闭，访问多页页面，都在一个会话中）结束，结束后再次访问时，那么会创建新的Session。</p><h2>3.session有效时间：</h2><p>在第一个session的概念中，我们提到了一个session的有效时间是30min。</p><p>我们可以看一眼：apache-tomcat-7.0.82-windows-x64\\apache-tomcat-7.0.82\\conf\\web.xml  文件中有个配置：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9be6af7aca817007cfdf65ce2ec55c21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"166\" class=\"origin_image zh-lightbox-thumb\" width=\"942\" data-original=\"https://pic2.zhimg.com/v2-9be6af7aca817007cfdf65ce2ec55c21_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;942&#39; height=&#39;166&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"166\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"942\" data-original=\"https://pic2.zhimg.com/v2-9be6af7aca817007cfdf65ce2ec55c21_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9be6af7aca817007cfdf65ce2ec55c21_b.jpg\"/></figure><p>这个时间就是session的有效时间，可以自己手动更改！</p><p>这个有效时间什么意思呢？比如你30min内不关闭浏览器，那么30分钟内session一直用的是一个，但是过了30min，即使不关闭浏览器，session也会新创建。但是你要是关闭浏览器了，30min内那个Session在内存中还没有消失，但是你再次开启浏览器再次访问的时候，session也会创建一个新的，因为session在一个会话中有效！</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面就是session  下一篇 是 session 和 cookie区别！ bye</p>", 
            "topic": [
                {
                    "tag": "session", 
                    "tagLink": "https://api.zhihu.com/topics/19601625"
                }, 
                {
                    "tag": "cookie (HTTP)", 
                    "tagLink": "https://api.zhihu.com/topics/19616699"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": [
                {
                    "userName": "Guido.t", 
                    "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                    "content": "好好好", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "ztw1122", 
                    "userLink": "https://www.zhihu.com/people/e421f1b849165651a0b8795d5d307e12", 
                    "content": "<p>java里这点就是好,<a href=\"http://link.zhihu.com/?target=http%3A//asp.net\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">asp.net</span><span class=\"invisible\"></span></a>里要配置session的存储方式,我好像配的数据库存储,转俩页面session丢了.....</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41648549", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 18, 
            "title": "Cookie简介", 
            "content": "<p>       客户端和服务器端进行交互，要利用http协议，但是http协议本身是没有状态的，没有记忆功能，比如连接一次，你需要录入某个账号密码，浏览器关闭这次会话就结束了，但是我们经常用到一个功能就是记住密码那个，这个是谁完成的？或者验证 你是否登陆过的状态 啥的 ，这些技术谁帮助我们实现的？那么就需要我们接下来要讲的两个技术了：cookie和session</p><hr/><h2>首先学习Cookie：</h2><h2>1.名字的由来：</h2><p>cookie--小甜品的意思，为啥起这个个名？因为在网页中可能会出现 ：你好珊珊，这会让我们感觉很亲切，就好像吃了一个小甜品一样开心（汗。。）--- 我们所说的cookie  就是浏览器的缓存</p><h2>2.验证Cookie的存在----演示效果：</h2><p>(1)打开谷歌搜索京东，随便将一个商品加入购物车:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bf62aa5455c010dcbae979ceb4fea1b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"186\" class=\"content_image\" width=\"309\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;309&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"186\" class=\"content_image lazy\" width=\"309\" data-actualsrc=\"https://pic3.zhimg.com/v2-bf62aa5455c010dcbae979ceb4fea1b2_b.jpg\"/></figure><p>(2)然后关闭谷歌浏览器，再重新打开谷歌，搜索京东并且查看购物车，看商品还在吗？在</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5122298edbae412fd333ee478cd627ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"184\" class=\"content_image\" width=\"315\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;315&#39; height=&#39;184&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"184\" class=\"content_image lazy\" width=\"315\" data-actualsrc=\"https://pic2.zhimg.com/v2-5122298edbae412fd333ee478cd627ad_b.jpg\"/></figure><p>说明了什么：说明我添加的这个购物的信息，它的信息被存在了一个地方，所以才能读取的到啊。。 那么这个信息存哪里了呢？前台还是后台呢？ 不知道啊，都有可能的。。</p><p>(3)关闭谷歌，打开火狐，搜索京东然后查看购物车，商品还在吗？不在</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8f1f5a15380dd0e216ee256b18705d8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"107\" class=\"content_image\" width=\"315\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;315&#39; height=&#39;107&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"107\" class=\"content_image lazy\" width=\"315\" data-actualsrc=\"https://pic3.zhimg.com/v2-8f1f5a15380dd0e216ee256b18705d8a_b.jpg\"/></figure><p>说明了啥?这个数据肯定不是保存在后台或者数据库了，要是在后台或者数据库 ，两个浏览器肯定都可以获取到的。所以只能说明，刚才的那个数据保存在谷歌浏览器上了，保存在哪里呢？就是谷歌浏览器的缓存--Cookie</p><h2>3.那我们就详细讲一下：Cookie--浏览器缓存</h2><p>（1）什么是Cookie：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1e627b25e9ee97f886c4e9478bec64c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb\" width=\"712\" data-original=\"https://pic1.zhimg.com/v2-1e627b25e9ee97f886c4e9478bec64c4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;712&#39; height=&#39;187&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"712\" data-original=\"https://pic1.zhimg.com/v2-1e627b25e9ee97f886c4e9478bec64c4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1e627b25e9ee97f886c4e9478bec64c4_b.jpg\"/></figure><p>（先大致读一下，然后下面用代码去体会这个话的含义）</p><p>（2）根据原理在服务器端创建Cookie吧：</p><p>服务器端的Cookie是由javax.servlet.http.Cookie类封装的。</p><p>每个Cookie都是该类的对象。</p><p>服务器通过该类对象 对客户端Cookie进行操作。</p><p>API截图：（看一眼就可以）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e10c4f3871082e7d2715b6e8a5148ce2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"958\" data-original=\"https://pic3.zhimg.com/v2-e10c4f3871082e7d2715b6e8a5148ce2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;958&#39; height=&#39;334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"958\" data-original=\"https://pic3.zhimg.com/v2-e10c4f3871082e7d2715b6e8a5148ce2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e10c4f3871082e7d2715b6e8a5148ce2_b.jpg\"/></figure><p>上面的表示是：创建的cookie 是    少量的数据从Servlet---》浏览器---&gt;server </p><p>那么我们就按照这个步骤模拟一下：</p><p>（1）创建servlet</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CookieServlet</span> <span class=\"kd\">extends</span> <span class=\"n\">HttpServlet</span> <span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">service</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">req</span><span class=\"o\">,</span> <span class=\"n\">HttpServletResponse</span> <span class=\"n\">resp</span><span class=\"o\">)</span>\n\t\t\t<span class=\"kd\">throws</span> <span class=\"n\">ServletException</span><span class=\"o\">,</span> <span class=\"n\">IOException</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">//1.在serlvet中创建一个cookie：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">Cookie</span> <span class=\"n\">co</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Cookie</span><span class=\"o\">(</span><span class=\"s\">&#34;diannao&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;dell&#34;</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">//2.发送至浏览器：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"na\">addCookie</span><span class=\"o\">(</span><span class=\"n\">co</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>浏览器用F12查看效果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a939e1608b81356eedbb31be3221f61a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb\" width=\"1006\" data-original=\"https://pic3.zhimg.com/v2-a939e1608b81356eedbb31be3221f61a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1006&#39; height=&#39;607&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1006\" data-original=\"https://pic3.zhimg.com/v2-a939e1608b81356eedbb31be3221f61a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a939e1608b81356eedbb31be3221f61a_b.jpg\"/></figure><p>图中效果可以看到，cookie是在服务器端产生，然后响应给了浏览器！</p><p>第二次请求：可以请求项目下的任意页面，都发现cookie携带在request请求中：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8f05fa0f799ee962d7c0fef02aaf0bec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb\" width=\"679\" data-original=\"https://pic1.zhimg.com/v2-8f05fa0f799ee962d7c0fef02aaf0bec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;679&#39; height=&#39;585&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"679\" data-original=\"https://pic1.zhimg.com/v2-8f05fa0f799ee962d7c0fef02aaf0bec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8f05fa0f799ee962d7c0fef02aaf0bec_b.jpg\"/></figure><p>哪怕我请求一个不存在的页面，cookie都是携带在request中的：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aa70eebf5882169383481521d555b659_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"895\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb\" width=\"895\" data-original=\"https://pic2.zhimg.com/v2-aa70eebf5882169383481521d555b659_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;895&#39; height=&#39;607&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"895\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"895\" data-original=\"https://pic2.zhimg.com/v2-aa70eebf5882169383481521d555b659_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aa70eebf5882169383481521d555b659_b.jpg\"/></figure><p>上面的现象证明：cookie是在服务器端产生，然后响应给了浏览器，随后浏览器在访问的时候，就会携带cookie信息！</p><p>现在，我浏览器关闭，再次访问项目，发现cookie不见了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-93d9753002958bc3dfbb5cfb777ce37c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-93d9753002958bc3dfbb5cfb777ce37c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;900&#39; height=&#39;580&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-93d9753002958bc3dfbb5cfb777ce37c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-93d9753002958bc3dfbb5cfb777ce37c_b.jpg\"/></figure><p>（3）那我发现了一个问题！！！那么上面的cookie，在浏览器关闭之后就消失了，但是我们刚开始演示的那个京东购物车的那个案例，同一个浏览器即使是关闭了再打开，还是可以看到信息的呀？这两个cookie有啥不一样吗？我们不一样。。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9a2b2b11e7596cfd58960bd51fbe6de6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic3.zhimg.com/v2-9a2b2b11e7596cfd58960bd51fbe6de6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;865&#39; height=&#39;73&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"865\" data-original=\"https://pic3.zhimg.com/v2-9a2b2b11e7596cfd58960bd51fbe6de6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9a2b2b11e7596cfd58960bd51fbe6de6_b.jpg\"/></figure><p>所以浏览器关闭就没了的cookie，属于 非持久cookie  。</p><p>那么我们能否也创建一个 持久的cookie呢？</p><div class=\"highlight\"><pre><code class=\"language-text\">public class CookieServlet extends HttpServlet {\n\t@Override\n\tprotected void service(HttpServletRequest req, HttpServletResponse resp)\n\t\t\tthrows ServletException, IOException {\n\t\t//1.在serlvet中创建一个cookie：\n\t\tCookie co=new Cookie(&#34;diannao&#34;, &#34;dell&#34;);\n\t\t\n\t\t//2.将内存cookie变成硬盘cookie，也就是存在硬盘上：并且设置一个保存的时间：\n\t\t//参数的单位是：秒 \n\t\tco.setMaxAge(60*2);\n\n\t\t//3.发送至浏览器：\n\t\tresp.addCookie(co);\n\t}\n}</code></pre></div><p>上面发现：在两分钟以内（在设置的时间内），我们访问项目的时候一直都是有diannao的cookie的。但是两分钟后再次访问，就不在了。这就是持久cookie，当然这个持久也是有时间限制的！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面的逻辑你要是看懂了，可以自己实现一下  三天免登陆怎么实现！不会的去网上找找代码，很多案例。。。我就不写了  我主要是讲讲cookie原理！</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>下一篇  再写一个session~~~bye~~~</p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "cookie (HTTP)", 
                    "tagLink": "https://api.zhihu.com/topics/19616699"
                }, 
                {
                    "tag": "HTTP", 
                    "tagLink": "https://api.zhihu.com/topics/19588535"
                }, 
                {
                    "tag": "session", 
                    "tagLink": "https://api.zhihu.com/topics/19601625"
                }
            ], 
            "comments": [
                {
                    "userName": "雪野百香里", 
                    "userLink": "https://www.zhihu.com/people/0d1bb1dfbd22c7bb7b7d2a2789e76f6d", 
                    "content": "<p>很详细</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "江太浪", 
                    "userLink": "https://www.zhihu.com/people/e40fc5d7c3bdc7e21ff459f65e53eb9f", 
                    "content": "通俗易懂[赞]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41093511", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 9, 
            "title": "java中时间日期格式转换Date与String转换", 
            "content": "<p>在做项目的时候，可能经常会需要各种类型日期的转换，不同的格式，不同的类型，让好多同学直发蒙！现在我们就讲讲几种常用的类型：</p><h2>【1】<a href=\"https://link.zhihu.com/?target=http%3A//java.util.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">j</a>ava.util.Date</h2><p>创建对象：</p><p>Date date=new Date();</p><p>System.out.println(date);</p><p>//结果：Thu Aug 02 09:33:02 CST 2018 。这个格式不好看，之后会讲解格式转换</p><p>常用方法：</p><p>long time=date.getTime();</p><p>//结果：1533173618546L---距离1970年1月1日0时0分0秒的毫秒数</p><p>PS:Date也有好多过期方法，但是用的不多，在这里就不提了占用篇幅</p><h2>【2】<a href=\"https://link.zhihu.com/?target=http%3A//java.util.date/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">j</a>ava.sql.Date</h2><p>创建对象：sql.Date没有空构造器，我们用带参构造器创建：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//java.sql.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Date</a> date=new <a href=\"https://link.zhihu.com/?target=http%3A//java.sql.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Date</a>(1533173618546L);//参数要传入一个long类型的数</p><p>System.out.println(date);//2018-08-02</p><p>常用方法：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//java.sql.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Date</a> date2=Date.valueOf(&#34;2016-08-24&#34;);//String类型转化为java.sql.Date</p><p>System.out.println(date2);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>PS:</p><p>java.sql.Date extends <a href=\"https://link.zhihu.com/?target=http%3A//java.util.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java.util.Date</a> ----&gt; util.Date是sql.Date的父类！</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>【3】java.sql.Date和<a href=\"https://link.zhihu.com/?target=http%3A//java.util.date/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java.util.Date</a>相互转化：</h2><p>//sql----&gt;util</p><p>java.util.Date d=new <a href=\"https://link.zhihu.com/?target=http%3A//java.sql.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java.sql.Date</a>(1472025220343L);</p><p>System.out.println(d);//子类赋给父类 ,直接转换就行了！</p><p>//util---&gt;sql</p><p><a href=\"https://link.zhihu.com/?target=http%3A//java.sql.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java.sql.Date</a> d2=new <a href=\"https://link.zhihu.com/?target=http%3A//java.sql.Date\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java.sql.Date</a>(new java.util.Date().getTime());</p><p>System.out.println(d2);</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>【4】String----Date</h2><div class=\"highlight\"><pre><code class=\"language-java\">\t<span class=\"n\">DateFormat</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">SimpleDateFormat</span><span class=\"o\">(</span><span class=\"s\">&#34;yyyy-MM-dd hh-mm-ss&#34;</span><span class=\"o\">);</span>\n\t<span class=\"c1\">//DateFormat是抽象类 ，抽象类不可以直接创建对象，所以我们创建子类的对象\n</span><span class=\"c1\"></span>\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">util</span><span class=\"o\">.</span><span class=\"na\">Date</span> <span class=\"n\">d1</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"s\">&#34;1890-4-4 9-8-7&#34;</span><span class=\"o\">);</span><span class=\"c1\">//这个格式必须按照上面给出的格式进行转化否则出错\n</span><span class=\"c1\"></span>        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">ParseException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span><span class=\"c1\">//为啥抛出异常的  不是随便的字符串都可以可以转化为日期吗的\n</span><span class=\"c1\"></span>\t<span class=\"o\">}</span>\n\t</code></pre></div><p>      日期格式表：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"424\" src=\"https://pic2.zhimg.com/v2-612f3d0b84f07f78ef23b7dcbc038a41_b.jpg\" data-size=\"normal\" data-rawwidth=\"690\" class=\"origin_image zh-lightbox-thumb\" width=\"690\" data-original=\"https://pic2.zhimg.com/v2-612f3d0b84f07f78ef23b7dcbc038a41_r.jpg\"/></noscript><img data-rawheight=\"424\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;690&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"690\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"690\" data-original=\"https://pic2.zhimg.com/v2-612f3d0b84f07f78ef23b7dcbc038a41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-612f3d0b84f07f78ef23b7dcbc038a41_b.jpg\"/></figure><h2>【5】Date---String</h2><div class=\"highlight\"><pre><code class=\"language-java\">\t<span class=\"n\">DateFormat</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">SimpleDateFormat</span><span class=\"o\">(</span><span class=\"s\">&#34;yyyy-MM-dd hh-mm-ss&#34;</span><span class=\"o\">);</span>\n\t<span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">util</span><span class=\"o\">.</span><span class=\"na\">Date</span> <span class=\"n\">da</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">util</span><span class=\"o\">.</span><span class=\"na\">Date</span><span class=\"o\">();</span>\n\t<span class=\"c1\">//法1.\n</span><span class=\"c1\"></span>\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;a1&#34;</span><span class=\"o\">+</span><span class=\"n\">da</span><span class=\"o\">);</span>\n\t<span class=\"c1\">//法2.\n</span><span class=\"c1\"></span>\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;a2&#34;</span><span class=\"o\">+</span><span class=\"n\">da</span><span class=\"o\">.</span><span class=\"na\">toLocaleString</span><span class=\"o\">());</span>\n\t<span class=\"c1\">//法3.\n</span><span class=\"c1\"></span>\t<span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"n\">da</span><span class=\"o\">);</span>\n\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;a3&#34;</span><span class=\"o\">+</span><span class=\"n\">str</span><span class=\"o\">);</span></code></pre></div><h2>【6】String--&gt;Date---&gt;Calendar</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//创建Calendar对象\n</span><span class=\"c1\"></span><span class=\"n\">Calendar</span> <span class=\"n\">cal</span><span class=\"o\">=</span><span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n<span class=\"c1\">//String--&gt;Date\n</span><span class=\"c1\"></span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">sql</span><span class=\"o\">.</span><span class=\"na\">Date</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">sql</span><span class=\"o\">.</span><span class=\"na\">Date</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"s\">&#34;1999-3-6&#34;</span><span class=\"o\">);</span>\n<span class=\"c1\">//Date---&gt;Calendar\n</span><span class=\"c1\"></span><span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"na\">setTime</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">cal</span><span class=\"o\">);</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "javase", 
                    "tagLink": "https://api.zhihu.com/topics/19725879"
                }, 
                {
                    "tag": "Java 入门", 
                    "tagLink": "https://api.zhihu.com/topics/19646804"
                }, 
                {
                    "tag": "Java 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19723268"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40925435", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 44, 
            "title": "java泛型理解和深入", 
            "content": "<p>看到有个评论要求我写一下泛型，今天有时间，尝试做一个总结：</p><p>先说说为啥要用泛型，先看一段代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//创建一个ArrayList集合\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">ArrayList</span> <span class=\"n\">list</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;java&#34;</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">1234</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"s\">&#34;lili&#34;</span><span class=\"o\">,</span> <span class=\"n\">Sex</span><span class=\"o\">.</span><span class=\"na\">女</span><span class=\"o\">,</span> <span class=\"n\">18</span><span class=\"o\">));</span>\n\t\t<span class=\"c1\">//遍历集合\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span> \n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">);</span>\t\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>上面创建一个集合ArrayList，ArrayList集合底层数据结构是数组，可以存放多种引用数据类型！所以放入集合的数据，可以是String，可以是Integer，可以是Person。</p><p>那么假如，我现在想限定存入ArrayList的数据的类型，我只想放入String类型的数据，在java中，在JDK1.5之后提供了一个解决办法，就是：</p><p>泛型（raw type）,泛型表示  &lt;&gt;  :（上面的代码在eclipse中会出现黄色警告，其实就是人家告诉你要用泛型呢）</p><p>下面看代码加入泛型：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-591203bd2306cb88931c3a389396aefe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-591203bd2306cb88931c3a389396aefe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;485&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-591203bd2306cb88931c3a389396aefe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-591203bd2306cb88931c3a389396aefe_b.jpg\"/></figure><p>我们从结果看到，加了泛型之后，再放入Integer类型，Person类型，就出错啦！</p><p>这就是我们应用泛型的目的~~~也是个最基本的讲解 。</p><hr/><p>接下来我们开始泛型的中级部分，这个不需要你记住，你学会了能看懂API就可以了，会跟人装逼就可以了 ；</p><p>我们开始讲解泛型的分类：</p><p>【1】泛型类</p><p>【2】泛型方法</p><p>【3】泛型接口</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>【1】泛型类：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">AA</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//1. 普通的类FanXing,在后面加上泛型 --- 变成了泛型类\n</span><span class=\"c1\"></span>\t<span class=\"c1\">//2. &lt;&gt;中写什么都可以，什么字母都可以，只是一个占位符，只代表一种数据类型。API中常用E，E代表Element的缩写\n</span><span class=\"c1\"></span>        <span class=\"c1\">//3.  我在这里 泛型用的AA ，就是为了让你看用啥字母都行\n</span><span class=\"c1\"></span>\t<span class=\"c1\">//4. AA的类型现在不确定 ，在创建对象的时候才确定具体的类型 \n</span><span class=\"c1\"></span>\t\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestFanXing</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//5.我们可以直接创建FanXing类的对象，但是有黄线警告，提醒你要加泛型\n</span><span class=\"c1\"></span>\t        <span class=\"n\">FanXing</span> <span class=\"n\">fx1</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">FanXing</span><span class=\"o\">();</span>\n\t\t<span class=\"c1\">//6.创建对象的时候，将类型确定为String \n</span><span class=\"c1\"></span>\t\t<span class=\"n\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">fx2</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span> \n                <span class=\"c1\">//7.创建对象的时候，将类型确定为Person\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">fx3</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">Person</span><span class=\"o\">&gt;();</span> \n                <span class=\"c1\">//8.创建对象的时候，将类型确定为Integer\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">fx4</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">FanXing</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span> \n                <span class=\"c1\">//9. &lt;&gt;中只能是引用数据类型\n</span><span class=\"c1\"></span>\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>API 中的示例：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fdf255d7664e4aa7a2311451a63da153_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb\" width=\"452\" data-original=\"https://pic4.zhimg.com/v2-fdf255d7664e4aa7a2311451a63da153_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;452&#39; height=&#39;151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"452\" data-original=\"https://pic4.zhimg.com/v2-fdf255d7664e4aa7a2311451a63da153_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fdf255d7664e4aa7a2311451a63da153_b.jpg\"/></figure><p>ArrayList就是一个泛型类，E就是一个泛型，具体的类型 ，在创建集合对象的时候才确定，例如：ArrayList&lt;String&gt;  list=new ArrayList&lt;String&gt;();</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>【2】泛型方法：</p><p>在eclipse中先敲出下面的代码：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-677d052e79a7e85f60c91e1a6120e3f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"591\" data-original=\"https://pic1.zhimg.com/v2-677d052e79a7e85f60c91e1a6120e3f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;591&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"591\" data-original=\"https://pic1.zhimg.com/v2-677d052e79a7e85f60c91e1a6120e3f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-677d052e79a7e85f60c91e1a6120e3f8_b.jpg\"/></figure><p>一个一个讲解，首先我们看到FanXing是一个   泛型类。</p><p>a方法：就是泛型类中的一个普通的方法</p><p>b方法：参数BB是什么意思？是一种类型，但是BB跟AA的类型无关，BB的类型，要在调用b方法的时候才会确定！</p><p>c方法：参数AA，确定了吗？确定了！为啥呢？在创建FanXing类的对象的时候，就指定了AA的类型，那么参数AA也就确定了啊！</p><p>d方法，e方法  都是静态方法，但是一个可以一个不可以，为啥呢？因为静态方法在类被加载的时候就会被放入方法区了，e方法的BB参数，在类加载的时候也没有确定，无所谓的。但是</p><p>d方法的AA参数，在这个方法被加载的时候，很可能还没有创建对象，那么AA的类型还没有确定呢!所以直接写肯定是不行 </p><p>f方法：参数是AA类型的数组，AA类型在FanXing对象创建的时候就确定了！</p><p>g方法：是一个可变参数，内部当做数组处理，Q的类型  在调用方法的时候才确定，返回值是一个数组。这个是模拟API中写的一个方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ArrayList类的API示例： 看方法部分：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4fd6dd5afa85714edffe29f2e0c33b10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"131\" class=\"origin_image zh-lightbox-thumb\" width=\"483\" data-original=\"https://pic1.zhimg.com/v2-4fd6dd5afa85714edffe29f2e0c33b10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;483&#39; height=&#39;131&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"131\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"483\" data-original=\"https://pic1.zhimg.com/v2-4fd6dd5afa85714edffe29f2e0c33b10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4fd6dd5afa85714edffe29f2e0c33b10_b.jpg\"/></figure><p>E的类型，在创建ArrayList&lt;String&gt;  list=new ArrayList&lt;String&gt;();对象的时候确定为String类型了，那么在调用add的时候，传入的必须是String类型！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-124248b25a5a86ae7479dbd68d49917d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"72\" class=\"origin_image zh-lightbox-thumb\" width=\"677\" data-original=\"https://pic2.zhimg.com/v2-124248b25a5a86ae7479dbd68d49917d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;677&#39; height=&#39;72&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"72\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"677\" data-original=\"https://pic2.zhimg.com/v2-124248b25a5a86ae7479dbd68d49917d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-124248b25a5a86ae7479dbd68d49917d_b.jpg\"/></figure><p>这个就好比是上面的g方法！</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>【3】泛型接口，上面的懂了 ，这个就简单讲解</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">TestFanXingInterface</span><span class=\"o\">&lt;</span><span class=\"n\">WW</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">A</span> <span class=\"kd\">implements</span> <span class=\"n\">TestFanXingInterface</span><span class=\"o\">{</span><span class=\"c1\">//当做普通的接口实现，报出警告\n</span><span class=\"c1\"></span>\t\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">B</span> <span class=\"kd\">implements</span> <span class=\"n\">TestFanXingInterface</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;{</span><span class=\"c1\">//实现接口的时候，泛型种类确定\n</span><span class=\"c1\"></span>\t\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">C</span><span class=\"o\">&lt;</span><span class=\"n\">WW</span><span class=\"o\">&gt;</span> <span class=\"kd\">implements</span> <span class=\"n\">TestFanXingInterface</span><span class=\"o\">&lt;</span><span class=\"n\">WW</span><span class=\"o\">&gt;{</span><span class=\"c1\">//实现接口的时候，泛型种类不确定，那么实现类也不确定\n</span><span class=\"c1\"></span>\t\n<span class=\"o\">}</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nc\">D</span><span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"c1\">//\t\tTestFanXingInterface tfxi=new TestFanXingInterface();//接口不能创建对象\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">A</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">B</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">C</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">cc</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span><span class=\"c1\">//在创建对象的时候确定类型\n</span><span class=\"c1\"></span>\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><hr/><p>泛型的高级应用，包括泛型的上限和泛型的下限，我们只讲一个，---泛型的上限，这个会了另一个就会了：</p><p>1.先创建两个类：Person和Student，Student是Person的子类 （代码省略）</p><p>2.创建集合代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">//创建一个集合，里面只能存储Person类型的\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Person</span><span class=\"o\">&gt;();</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"s\">&#34;lili&#34;</span><span class=\"o\">,</span><span class=\"n\">18</span><span class=\"o\">,</span> <span class=\"n\">19</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"s\">&#34;nana&#34;</span><span class=\"o\">,</span> <span class=\"n\">18</span><span class=\"o\">,</span> <span class=\"n\">189</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">));</span>\n\t\t\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Person</span> <span class=\"n\">person</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">getAge</span><span class=\"o\">()+</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()+</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n\t\t<span class=\"o\">}</span>\n\t\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;=================&#34;</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">//创建一个集合，里面只能存储Student类型的\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Student</span><span class=\"o\">&gt;</span> <span class=\"n\">list1</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Student</span><span class=\"o\">&gt;();</span>\n\t\t<span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Student</span><span class=\"o\">(</span><span class=\"s\">&#34;lulu&#34;</span><span class=\"o\">,</span> <span class=\"n\">19</span><span class=\"o\">,</span> <span class=\"n\">200</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">,</span> <span class=\"n\">20095452</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Student</span><span class=\"o\">(</span><span class=\"s\">&#34;lily&#34;</span><span class=\"o\">,</span> <span class=\"n\">20</span><span class=\"o\">,</span> <span class=\"n\">10</span><span class=\"o\">.</span><span class=\"na\">4</span><span class=\"o\">,</span> <span class=\"n\">20095459</span><span class=\"o\">));</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Student</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">getAge</span><span class=\"o\">()+</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()+</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;=================&#34;</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">// 想要调用bianLi方法的时候，传入list和list1都可以 ，要怎么办呢？看下个注释\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">bianLi</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">);</span>\n                <span class=\"n\">bianLi</span><span class=\"o\">(</span><span class=\"n\">list1</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"c1\">//利用泛型的上限。父类是Person  只要是Person的子类 都可以使用该方法\n</span><span class=\"c1\"></span>\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">bianLi</span><span class=\"o\">(</span><span class=\"n\">ArrayList</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"n\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">al</span><span class=\"o\">){</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">al</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>API中示例：</p><p>Collection接口中泛型上限的示例：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-798bcb6317cc4e90f08ae92a6f5d034d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"77\" class=\"origin_image zh-lightbox-thumb\" width=\"665\" data-original=\"https://pic2.zhimg.com/v2-798bcb6317cc4e90f08ae92a6f5d034d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;665&#39; height=&#39;77&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"77\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"665\" data-original=\"https://pic2.zhimg.com/v2-798bcb6317cc4e90f08ae92a6f5d034d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-798bcb6317cc4e90f08ae92a6f5d034d_b.jpg\"/></figure><p>Collections类中泛型下限的示例：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0766b82d75bad9bd044f0368282d1d59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb\" width=\"663\" data-original=\"https://pic2.zhimg.com/v2-0766b82d75bad9bd044f0368282d1d59_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;663&#39; height=&#39;54&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"663\" data-original=\"https://pic2.zhimg.com/v2-0766b82d75bad9bd044f0368282d1d59_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0766b82d75bad9bd044f0368282d1d59_b.jpg\"/></figure><p>只要是T类型的父类 ，就都可以传入。。。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>over~~</p>", 
            "topic": [
                {
                    "tag": "泛型 (Generic)", 
                    "tagLink": "https://api.zhihu.com/topics/19649800"
                }, 
                {
                    "tag": "javase", 
                    "tagLink": "https://api.zhihu.com/topics/19725879"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": [
                {
                    "userName": "师太别追了", 
                    "userLink": "https://www.zhihu.com/people/987bc7ba2fb51dfc861a88834e9e63fe", 
                    "content": "可以可以，又复习了一遍，多谢，撤", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Guido.t", 
                    "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                    "content": "上次是我留言的，谢谢老师讲的泛型，还在讲泛型方法的时候特意提到静态方法类型。有两点想确认一下，第一，c方法作为泛型方法，里面的参数AA写在类里面还不确定吧，只是个占位符。只有在创建FangXing类对象的时候，方法中的AA也从而确定是吧？第二，泛型类初始化对象时候也可以不指定类型是吧，把它作为普通类使用。我看代码里面写到C&lt;WW&gt;作为泛型接口的实现类，既可以写C c=new C();也可以写成C&lt;String&gt; cc=new C&lt;String&gt;();<br>老师你发的jsp.servlet视频我下载了，在看哦，讲的老好了。👍", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "对 你说的两点都对 就是这个意思", 
                            "likes": 0, 
                            "replyToAuthor": "Guido.t"
                        }
                    ]
                }, 
                {
                    "userName": "爱媳妇的好男人", 
                    "userLink": "https://www.zhihu.com/people/4e95bfcae8cfc4a818773bb5c593fe69", 
                    "content": "通俗易懂，简单易用，小白教程，非常完美。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "风泊月", 
                    "userLink": "https://www.zhihu.com/people/ddbb38d8709b38fc3e44f0ec4a0a8beb", 
                    "content": "<p>写的很棒，赞一个！！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "崔书豪", 
                    "userLink": "https://www.zhihu.com/people/1573dd01913dd40cbc5ced43ca003d64", 
                    "content": "<p>讲得很清楚了，感谢！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "明白的下里巴", 
                    "userLink": "https://www.zhihu.com/people/2210679c0492b20984e6e8f162da1af7", 
                    "content": "讲的非常让人明白点赞", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40645506", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 127, 
            "title": "java中i=i++问题解析", 
            "content": "<p>今天在班里学了自增操作，先看一个简单的案例：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span><span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">10</span><span class=\"o\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"n\">7</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"o\">++;</span><span class=\"c1\">// m=7+a   a=a+1\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span><span class=\"c1\">//11\n</span><span class=\"c1\"></span>                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">);</span><span class=\"c1\">//17\n</span><span class=\"c1\"></span>\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>i++或者++i参与到运算中的时候，有个特定的规律：</p><p>i++    :       先运算，后加1</p><p>++i    :       先加1，后运算</p><p>所以上面的题，int   m=7+a++;</p><p>计算过程：（1）先计算  m=7+a    （2）再计算： a=a+1</p><p>所以最后结果   a=11   m=17</p><hr/><p>上面的就是个常规题，你要是上面的都没看懂 ，那么下面的也不用看了。。。。</p><p>今天上课有个学生问我  ：i=i++   为啥不遵照上面的规律   ？？？</p><p>先看一个代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span><span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">10</span><span class=\"o\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">varNum</span><span class=\"o\">=</span><span class=\"n\">66</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">varNum</span><span class=\"o\">=</span><span class=\"n\">varNum</span><span class=\"o\">++;</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">varNum</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>按照上面的道理，varNum经过 varNum=varNum++操作后 ，应该变为 67，</p><p>但是实际结果，发现varNum的值 还是66：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-152fea2a3cb794f7eba85e02d4dc0112_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"78\" class=\"content_image\" width=\"380\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;380&#39; height=&#39;78&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"78\" class=\"content_image lazy\" width=\"380\" data-actualsrc=\"https://pic3.zhimg.com/v2-152fea2a3cb794f7eba85e02d4dc0112_b.jpg\"/></figure><p>？？？？为什么？</p><p>在讲解原因之前，先学习一些预备知识：</p><p>（1）栈</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-10d38fae3c55344a0f3dfed7662ca870_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"323\" class=\"content_image\" width=\"319\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;319&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"323\" class=\"content_image lazy\" width=\"319\" data-actualsrc=\"https://pic1.zhimg.com/v2-10d38fae3c55344a0f3dfed7662ca870_b.jpg\"/></figure><p>栈最上面是栈顶，下面是栈底 。。</p><p>局部变量的值，在内存分析的时候，都被放入了栈中，栈的特点是先进后出，意味着先放进去的数，会被放在下面，后进去的数，一个一个垒在上面（就像往筒中放乒乓球）</p><p>（2）虚拟机指令---假如看不懂，可以先略过这部分往下看，然后回头再回来看~~~</p><p>要铺垫一些简单的虚拟机指令：（以下截图都是我从百度找的）</p><p>第一个：bipush </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1f360415044e9d8d33d8c198b6dc12dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb\" width=\"861\" data-original=\"https://pic2.zhimg.com/v2-1f360415044e9d8d33d8c198b6dc12dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;861&#39; height=&#39;343&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"861\" data-original=\"https://pic2.zhimg.com/v2-1f360415044e9d8d33d8c198b6dc12dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1f360415044e9d8d33d8c198b6dc12dd_b.jpg\"/></figure><p>第二个：istore_1</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-70c77c3868c0ce69bd42fbb2652fd827_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb\" width=\"861\" data-original=\"https://pic4.zhimg.com/v2-70c77c3868c0ce69bd42fbb2652fd827_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;861&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"861\" data-original=\"https://pic4.zhimg.com/v2-70c77c3868c0ce69bd42fbb2652fd827_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-70c77c3868c0ce69bd42fbb2652fd827_b.jpg\"/></figure><p>第三个：iload_1</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e2da6c3a13e99a14b04432d736715066_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"812\" data-original=\"https://pic3.zhimg.com/v2-e2da6c3a13e99a14b04432d736715066_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;812&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"812\" data-original=\"https://pic3.zhimg.com/v2-e2da6c3a13e99a14b04432d736715066_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e2da6c3a13e99a14b04432d736715066_b.jpg\"/></figure><p>第四个：iinc</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f842d3bce93e3e8e0abe16316e0320ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-f842d3bce93e3e8e0abe16316e0320ae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-f842d3bce93e3e8e0abe16316e0320ae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f842d3bce93e3e8e0abe16316e0320ae_b.jpg\"/></figure><p>上面的两个技能点，是两个铺垫技能点，下面开始讲解 varNum=varNum++运算：</p><p>首先先介绍一个JDK自带的反编译工具： 一个命令  javap  可以看到到底底层是怎么执行上面的代码的！</p><p>首先先编译Demo.java文件：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-78757303f4cd4d83f1badd9bfe275ed5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"64\" class=\"content_image\" width=\"360\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;360&#39; height=&#39;64&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"64\" class=\"content_image lazy\" width=\"360\" data-actualsrc=\"https://pic2.zhimg.com/v2-78757303f4cd4d83f1badd9bfe275ed5_b.jpg\"/></figure><p>此时已经在我电脑的D盘train2018文件夹下  生成了Demo.class文件！</p><p>然后执行javap命令：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0512926ae3b6d856ff08fd65dfce12a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"813\" data-original=\"https://pic2.zhimg.com/v2-0512926ae3b6d856ff08fd65dfce12a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;813&#39; height=&#39;390&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"813\" data-original=\"https://pic2.zhimg.com/v2-0512926ae3b6d856ff08fd65dfce12a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0512926ae3b6d856ff08fd65dfce12a9_b.jpg\"/></figure><p>上面图中，红色部分，就是底层  varNum=varNum++的执行过程：</p><p>那么通过下面的解释，结合上面铺垫的虚拟机指令，来讲解红色框部分：</p><p> 0: bipush        10        将参数10压入栈；</p><p> 2: istore_1                  栈中弹出一个数，赋给第一个局部变量：a</p><p> 3: bipush        66        将参数66压入栈；</p><p> 5: istore_2                  栈中弹出一个数，赋给第二个局部变量：varNum </p><p> 6: iload_2                    将第二个局部变量varNum的值入栈，此时栈顶的值为66</p><p> 7: iinc           2, 1         指令iinc对给定的局部变量做自增操作</p><p>                     2, 1        表示对第2个局部变量varNum进行累加1操作 ，意味着</p><p>\t                            varNum 变为了 67 </p><p>10: istore_2    栈顶弹出一个数：也就是66  赋给第二个局部变量 varNum</p><p>                      意味这 varNum的值 又变回66了。。白忙活了</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>最终打印结果   就是：  66</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-403f065ff3c87f51e3c2db6b8aa0aeb8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"310\" data-rawheight=\"79\" class=\"content_image\" width=\"310\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;310&#39; height=&#39;79&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"310\" data-rawheight=\"79\" class=\"content_image lazy\" width=\"310\" data-actualsrc=\"https://pic1.zhimg.com/v2-403f065ff3c87f51e3c2db6b8aa0aeb8_b.jpg\"/></figure><p>over~~~~</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对评论的几个意见做个解释：</p><p>1.为什么名字我起成了varNum而不是i </p><p>因为虚拟机指令例如istore_1</p><p>我不想让你误会那个指令中的i是变量名字i</p><p>2.为什么给了一个值66</p><p>同上个原因 ，就是为了不让你误会istore_1的1是变量值</p><p>3.对于评论中说这玩意工作用不到的</p><p>工作中谁这样写，多半是脑子有泡</p><p>我讲的目的是为了面试 ，是为了给需要这个问题的人看</p><p>4.为啥要写这玩意 因为上面说了有学生问！</p><p></p>", 
            "topic": [
                {
                    "tag": "javase", 
                    "tagLink": "https://api.zhihu.com/topics/19725879"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": [
                {
                    "userName": "心静了丶世界就静了", 
                    "userLink": "https://www.zhihu.com/people/78fd27265525aa3c9978042791c12e79", 
                    "content": "老师，辛苦了", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>老师，是不是因为自增是直接对变量的值进行修改，然后赋值就是从栈中取值，所以自增后再赋值就被先前放入栈中的值给覆盖掉了？</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "伍俊", 
                    "userLink": "https://www.zhihu.com/people/b4c4d561ae8b6f295e66251c9834c8f3", 
                    "content": "真实项目里基本没人这么写", 
                    "likes": 12, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "说不定我们得填坑", 
                            "likes": 0, 
                            "replyToAuthor": "伍俊"
                        }, 
                        {
                            "userName": "蕊希", 
                            "userLink": "https://www.zhihu.com/people/6c83bfdf1ac83d07a46e12a8285c56a7", 
                            "content": "/", 
                            "likes": 0, 
                            "replyToAuthor": "伍俊"
                        }
                    ]
                }, 
                {
                    "userName": "大帝", 
                    "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                    "content": "我去来的", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "老男孩", 
                    "userLink": "https://www.zhihu.com/people/3a2b6d633d82130949916b3fdda97f94", 
                    "content": "<p>也没说我什么自增后为什么不重新入栈，不过实际开发肯定不会这样写，也就面试题会这样出，我只能这样理解，复制后出栈的优先级比执行自增的优先级高。</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "浪里小白龙", 
                    "userLink": "https://www.zhihu.com/people/7fb6af3569a26643b7b0c35d96e01335", 
                    "content": "<p>“=”不也是运算符吗，按照这样子理解不是本来就是先赋值再递增吗？</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "老罗791", 
                            "userLink": "https://www.zhihu.com/people/b11efe0f4131b6d2e35e6c91cccc3389", 
                            "content": "我也跟你想的一样。可能我学得太浅薄了", 
                            "likes": 0, 
                            "replyToAuthor": "浪里小白龙"
                        }, 
                        {
                            "userName": "果绿橙", 
                            "userLink": "https://www.zhihu.com/people/006cd45e53d877e60224dd14b788017b", 
                            "content": "<p>i++，你可以把++看成一个函数， 参数为i， 返回值是自增前的i，然后再进行赋值行为</p>", 
                            "likes": 0, 
                            "replyToAuthor": "浪里小白龙"
                        }
                    ]
                }, 
                {
                    "userName": "当代打工典范0527", 
                    "userLink": "https://www.zhihu.com/people/693544982d9ec7c3b1586512af986cbf", 
                    "content": "第二个事例代码多一个中括号😱😱😱", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "杨小鑫", 
                    "userLink": "https://www.zhihu.com/people/5a39e3cf79e39f18e80091c97f1fc0ce", 
                    "content": "温馨提示，工作中写这样的代码会被打", 
                    "likes": 7, 
                    "childComments": []
                }, 
                {
                    "userName": "Jerify", 
                    "userLink": "https://www.zhihu.com/people/95634ca806ba948e975d681f8708a825", 
                    "content": "该评论已删除", 
                    "likes": 7, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "多读书 少说话", 
                            "likes": 2, 
                            "replyToAuthor": "Jerify"
                        }, 
                        {
                            "userName": "南屏晚风", 
                            "userLink": "https://www.zhihu.com/people/6a23def30257d2eeadc33441c88ed142", 
                            "content": "运算符有优先级的哦", 
                            "likes": 1, 
                            "replyToAuthor": "Jerify"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "非要用自增。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>a = a++ 翻译成逻辑语言不存在意义吧？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "深情的八戒", 
                    "userLink": "https://www.zhihu.com/people/7ffc58b5316286bd3bcac30b57940994", 
                    "content": "可以从运算符优先顺序来说吧 先把66赋值给i 在执行i的增长", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "大z12136", 
                    "userLink": "https://www.zhihu.com/people/99489479b13bed2d43b6a3598f9f6a16", 
                    "content": "曾经我也被i++,++i的问题困扰过，也是通过看字节码弄清楚这个问题的。字节码已经看不懂了,只记下一个结论。\r<br>int i = 0;（前提条件), int a = i++(就相当于 int b=i;把b的值赋给a,然后b=i+1;)。如果是int a =++i(则是先int b=i;在把b=i+1的值赋给a)。\r<br>说白了就是i++这个操作在字节码里是通过两行代码来实现的。(竟然在知乎偶遇sxt传说中的美女老师！！！)", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "我这么火了么？哈哈哈搞的像个水军一样", 
                            "likes": 0, 
                            "replyToAuthor": "大z12136"
                        }
                    ]
                }, 
                {
                    "userName": "学无止境", 
                    "userLink": "https://www.zhihu.com/people/27d3a68b50110a06acefb9bfa7806172", 
                    "content": "学习中确实有很多坑，不过这个=号作用于int会拷贝一份值出来吧，然后就相当于变量指向了66的新地址，而原地址66再++，然后被回收？打印新地址就是66了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "何一", 
                    "userLink": "https://www.zhihu.com/people/62a8888f3d10ad4d0ed27ce9dbfa9e4d", 
                    "content": "<p>为何要做这样的设计？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "你会遇到更好的我", 
                    "userLink": "https://www.zhihu.com/people/29d4a83f03b70f9216a4d9d9bd6baa42", 
                    "content": "Python就没这个问题了（滑稽#）", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "暮无井见铃", 
                    "userLink": "https://www.zhihu.com/people/443c193a7d764c7cf0cc40891d853f48", 
                    "content": "<p><a href=\"http://link.zhihu.com/?target=https%3A//en.cppreference.com/w/cpp/language/eval_order\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Order of evaluation</a> 我觉得像这里这样总结可能更好（虽然 C++ 和 Java 的表达式求值顺序不同）</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>Java的求值和副作用规则基本上就是“先左再右后中间”，比C++简单多了</p>", 
                            "likes": 1, 
                            "replyToAuthor": "暮无井见铃"
                        }
                    ]
                }, 
                {
                    "userName": "娃娃啊", 
                    "userLink": "https://www.zhihu.com/people/6f66a5af4aefaa3e6e35f6de931edd33", 
                    "content": "i = i++;<br>=运算符先算右边 。<br>i++  表达式返回66 ，i自增i变为67。 所以运算的结果为返回值为66，i=67。<br>再算等号左边赋值，把返回值66赋给i， i又变成了66。<br>是这个意思吗？", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "灵魂对撞机", 
                    "userLink": "https://www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d", 
                    "content": "项目里面敢这样写，会被打死。", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "心静了丶世界就静了", 
                    "userLink": "https://www.zhihu.com/people/78fd27265525aa3c9978042791c12e79", 
                    "content": "老师，辛苦了", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>老师，是不是因为自增是直接对变量的值进行修改，然后赋值就是从栈中取值，所以自增后再赋值就被先前放入栈中的值给覆盖掉了？</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "伍俊", 
                    "userLink": "https://www.zhihu.com/people/b4c4d561ae8b6f295e66251c9834c8f3", 
                    "content": "真实项目里基本没人这么写", 
                    "likes": 12, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "说不定我们得填坑", 
                            "likes": 0, 
                            "replyToAuthor": "伍俊"
                        }, 
                        {
                            "userName": "蕊希", 
                            "userLink": "https://www.zhihu.com/people/6c83bfdf1ac83d07a46e12a8285c56a7", 
                            "content": "/", 
                            "likes": 0, 
                            "replyToAuthor": "伍俊"
                        }
                    ]
                }, 
                {
                    "userName": "大帝", 
                    "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                    "content": "我去来的", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "老男孩", 
                    "userLink": "https://www.zhihu.com/people/3a2b6d633d82130949916b3fdda97f94", 
                    "content": "<p>也没说我什么自增后为什么不重新入栈，不过实际开发肯定不会这样写，也就面试题会这样出，我只能这样理解，复制后出栈的优先级比执行自增的优先级高。</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "浪里小白龙", 
                    "userLink": "https://www.zhihu.com/people/7fb6af3569a26643b7b0c35d96e01335", 
                    "content": "<p>“=”不也是运算符吗，按照这样子理解不是本来就是先赋值再递增吗？</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "老罗791", 
                            "userLink": "https://www.zhihu.com/people/b11efe0f4131b6d2e35e6c91cccc3389", 
                            "content": "我也跟你想的一样。可能我学得太浅薄了", 
                            "likes": 0, 
                            "replyToAuthor": "浪里小白龙"
                        }, 
                        {
                            "userName": "果绿橙", 
                            "userLink": "https://www.zhihu.com/people/006cd45e53d877e60224dd14b788017b", 
                            "content": "<p>i++，你可以把++看成一个函数， 参数为i， 返回值是自增前的i，然后再进行赋值行为</p>", 
                            "likes": 0, 
                            "replyToAuthor": "浪里小白龙"
                        }
                    ]
                }, 
                {
                    "userName": "当代打工典范0527", 
                    "userLink": "https://www.zhihu.com/people/693544982d9ec7c3b1586512af986cbf", 
                    "content": "第二个事例代码多一个中括号😱😱😱", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "杨小鑫", 
                    "userLink": "https://www.zhihu.com/people/5a39e3cf79e39f18e80091c97f1fc0ce", 
                    "content": "温馨提示，工作中写这样的代码会被打", 
                    "likes": 7, 
                    "childComments": []
                }, 
                {
                    "userName": "Jerify", 
                    "userLink": "https://www.zhihu.com/people/95634ca806ba948e975d681f8708a825", 
                    "content": "该评论已删除", 
                    "likes": 7, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "多读书 少说话", 
                            "likes": 2, 
                            "replyToAuthor": "Jerify"
                        }, 
                        {
                            "userName": "南屏晚风", 
                            "userLink": "https://www.zhihu.com/people/6a23def30257d2eeadc33441c88ed142", 
                            "content": "运算符有优先级的哦", 
                            "likes": 1, 
                            "replyToAuthor": "Jerify"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "非要用自增。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>a = a++ 翻译成逻辑语言不存在意义吧？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "深情的八戒", 
                    "userLink": "https://www.zhihu.com/people/7ffc58b5316286bd3bcac30b57940994", 
                    "content": "可以从运算符优先顺序来说吧 先把66赋值给i 在执行i的增长", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "大z12136", 
                    "userLink": "https://www.zhihu.com/people/99489479b13bed2d43b6a3598f9f6a16", 
                    "content": "曾经我也被i++,++i的问题困扰过，也是通过看字节码弄清楚这个问题的。字节码已经看不懂了,只记下一个结论。\r<br>int i = 0;（前提条件), int a = i++(就相当于 int b=i;把b的值赋给a,然后b=i+1;)。如果是int a =++i(则是先int b=i;在把b=i+1的值赋给a)。\r<br>说白了就是i++这个操作在字节码里是通过两行代码来实现的。(竟然在知乎偶遇sxt传说中的美女老师！！！)", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "我这么火了么？哈哈哈搞的像个水军一样", 
                            "likes": 0, 
                            "replyToAuthor": "大z12136"
                        }
                    ]
                }, 
                {
                    "userName": "学无止境", 
                    "userLink": "https://www.zhihu.com/people/27d3a68b50110a06acefb9bfa7806172", 
                    "content": "学习中确实有很多坑，不过这个=号作用于int会拷贝一份值出来吧，然后就相当于变量指向了66的新地址，而原地址66再++，然后被回收？打印新地址就是66了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "何一", 
                    "userLink": "https://www.zhihu.com/people/62a8888f3d10ad4d0ed27ce9dbfa9e4d", 
                    "content": "<p>为何要做这样的设计？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "你会遇到更好的我", 
                    "userLink": "https://www.zhihu.com/people/29d4a83f03b70f9216a4d9d9bd6baa42", 
                    "content": "Python就没这个问题了（滑稽#）", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "暮无井见铃", 
                    "userLink": "https://www.zhihu.com/people/443c193a7d764c7cf0cc40891d853f48", 
                    "content": "<p><a href=\"http://link.zhihu.com/?target=https%3A//en.cppreference.com/w/cpp/language/eval_order\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Order of evaluation</a> 我觉得像这里这样总结可能更好（虽然 C++ 和 Java 的表达式求值顺序不同）</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>Java的求值和副作用规则基本上就是“先左再右后中间”，比C++简单多了</p>", 
                            "likes": 1, 
                            "replyToAuthor": "暮无井见铃"
                        }
                    ]
                }, 
                {
                    "userName": "娃娃啊", 
                    "userLink": "https://www.zhihu.com/people/6f66a5af4aefaa3e6e35f6de931edd33", 
                    "content": "i = i++;<br>=运算符先算右边 。<br>i++  表达式返回66 ，i自增i变为67。 所以运算的结果为返回值为66，i=67。<br>再算等号左边赋值，把返回值66赋给i， i又变成了66。<br>是这个意思吗？", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "灵魂对撞机", 
                    "userLink": "https://www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d", 
                    "content": "项目里面敢这样写，会被打死。", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40521510", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 11, 
            "title": "Servlet中文乱码问题", 
            "content": "<h2><b>请求</b>：</h2><p>1.写一个jsp： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b146d327cf373f4ba81f2b65391cd728_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"137\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic1.zhimg.com/v2-b146d327cf373f4ba81f2b65391cd728_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;137&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"137\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic1.zhimg.com/v2-b146d327cf373f4ba81f2b65391cd728_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b146d327cf373f4ba81f2b65391cd728_b.jpg\"/></figure><p>2.写对应的servlet，配置web.xml</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HiLogin</span> <span class=\"kd\">extends</span> <span class=\"n\">HttpServlet</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">service</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">req</span><span class=\"o\">,</span> <span class=\"n\">HttpServletResponse</span> <span class=\"n\">resp</span><span class=\"o\">)</span>\n\t\t\t<span class=\"kd\">throws</span> <span class=\"n\">ServletException</span><span class=\"o\">,</span> <span class=\"n\">IOException</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">//1.获取前台数据\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;前台过来的参数是：&#34;</span><span class=\"o\">+</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"na\">getParameter</span><span class=\"o\">(</span><span class=\"s\">&#34;uname&#34;</span><span class=\"o\">));</span>\n\t\t<span class=\"c1\">//2.向前台写个数据\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"na\">getWriter</span><span class=\"o\">().</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"s\">&#34;我是后台写过来的数据啊。。&#34;</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p>前台做请求：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-895e2146c5b1cd565356c82883e8b0b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"125\" class=\"content_image\" width=\"318\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;318&#39; height=&#39;125&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"125\" class=\"content_image lazy\" width=\"318\" data-actualsrc=\"https://pic3.zhimg.com/v2-895e2146c5b1cd565356c82883e8b0b6_b.jpg\"/></figure><p>请求后台结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3c27749016f3bb052125b5c171106dfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"92\" class=\"content_image\" width=\"338\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;338&#39; height=&#39;92&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"92\" class=\"content_image lazy\" width=\"338\" data-actualsrc=\"https://pic3.zhimg.com/v2-3c27749016f3bb052125b5c171106dfe_b.jpg\"/></figure><p>前台响应的结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-676fd8f4aaa71694c6d10a8ca50727dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"286\" data-rawheight=\"97\" class=\"content_image\" width=\"286\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;286&#39; height=&#39;97&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"286\" data-rawheight=\"97\" class=\"content_image lazy\" width=\"286\" data-actualsrc=\"https://pic2.zhimg.com/v2-676fd8f4aaa71694c6d10a8ca50727dd_b.jpg\"/></figure><h2>那么就出问题了 啥问题：中国特色社会主义编码问题  为啥这么说 外国没中文啊 </h2><p>3.分析原因：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7a7e86a39c74b3ce1ea312eb9bd1b62f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1253\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"1253\" data-original=\"https://pic4.zhimg.com/v2-7a7e86a39c74b3ce1ea312eb9bd1b62f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1253&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1253\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1253\" data-original=\"https://pic4.zhimg.com/v2-7a7e86a39c74b3ce1ea312eb9bd1b62f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7a7e86a39c74b3ce1ea312eb9bd1b62f_b.jpg\"/></figure><p>4.解决：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ee0b355e683bea1c9bf6a1e148facc11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1101\" data-rawheight=\"265\" class=\"origin_image zh-lightbox-thumb\" width=\"1101\" data-original=\"https://pic2.zhimg.com/v2-ee0b355e683bea1c9bf6a1e148facc11_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1101&#39; height=&#39;265&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1101\" data-rawheight=\"265\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1101\" data-original=\"https://pic2.zhimg.com/v2-ee0b355e683bea1c9bf6a1e148facc11_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ee0b355e683bea1c9bf6a1e148facc11_b.jpg\"/></figure><p>后台结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-75b943a1cd904e133409008a09261dc0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"218\" data-rawheight=\"77\" class=\"content_image\" width=\"218\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;218&#39; height=&#39;77&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"218\" data-rawheight=\"77\" class=\"content_image lazy\" width=\"218\" data-actualsrc=\"https://pic1.zhimg.com/v2-75b943a1cd904e133409008a09261dc0_b.jpg\"/></figure><p>5.缺点及解决办法2：</p><p>上面的解决方式缺点是啥？假如表单中有name,password,habbit等等多个元素，那么在后台解决的话每个都要这样转一下啊 ，那有没有更快速的方式呢？</p><p>解决办法2：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9202dcbaf093dd72ca6df3fda0b4b7ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"954\" data-original=\"https://pic3.zhimg.com/v2-9202dcbaf093dd72ca6df3fda0b4b7ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;954&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"954\" data-original=\"https://pic3.zhimg.com/v2-9202dcbaf093dd72ca6df3fda0b4b7ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9202dcbaf093dd72ca6df3fda0b4b7ee_b.jpg\"/></figure><p>但是这种方式只针对post方式有效，对get方式仍然无效</p><p>原因：post方式，会把请求的数据封装到请求实体中，这个方法只能对请求实体的内容有效，所以对POST有效，对于get方式，参数是放在URI之后的，对get方式无效。</p><p>解决：</p><p>办法1：对get方式，一直用手动解码，post不用：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c2a9abd08a2d54e5570490dc7582b9f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1106\" data-rawheight=\"87\" class=\"origin_image zh-lightbox-thumb\" width=\"1106\" data-original=\"https://pic1.zhimg.com/v2-c2a9abd08a2d54e5570490dc7582b9f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1106&#39; height=&#39;87&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1106\" data-rawheight=\"87\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1106\" data-original=\"https://pic1.zhimg.com/v2-c2a9abd08a2d54e5570490dc7582b9f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c2a9abd08a2d54e5570490dc7582b9f8_b.jpg\"/></figure><p>办法2：（推荐）</p><p>过滤器方式</p><p>办法3：</p><p>在tomcat的配置文件中server.xml中更改：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aa61a1bc7189d08da2458fcc9fe1470d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic2.zhimg.com/v2-aa61a1bc7189d08da2458fcc9fe1470d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;671&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"671\" data-original=\"https://pic2.zhimg.com/v2-aa61a1bc7189d08da2458fcc9fe1470d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aa61a1bc7189d08da2458fcc9fe1470d_b.jpg\"/></figure><p>就是改变URI后面的编码的，对get方式有效。</p><p>但是这种方式是不建议的，为啥？服务器的配置文件不是你想改就能改的。</p><p>因为在服务器上不只你一个项目啊 ，别的项目可能就不需要这个编码格式啊</p><hr/><p>上面是请求，下面说响应的乱码：</p><p>原因分析：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8e24ec3ef6aaf3dcdaf236bee4012650_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"961\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb\" width=\"961\" data-original=\"https://pic1.zhimg.com/v2-8e24ec3ef6aaf3dcdaf236bee4012650_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;961&#39; height=&#39;382&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"961\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"961\" data-original=\"https://pic1.zhimg.com/v2-8e24ec3ef6aaf3dcdaf236bee4012650_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8e24ec3ef6aaf3dcdaf236bee4012650_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>所以在servlet中，service方法中，上来你就可以写三句话：</p><p>                req.setCharacterEncoding(&#34;utf-8&#34;);</p><p>\t\tresp.setCharacterEncoding(&#34;utf-8&#34;);</p><p>                resp.setContentType(&#34;text/html;charset=utf-8&#34;);</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>该吃饭啦~~~~</p><p></p>", 
            "topic": [
                {
                    "tag": "Servlet", 
                    "tagLink": "https://api.zhihu.com/topics/19634546"
                }, 
                {
                    "tag": "中文乱码", 
                    "tagLink": "https://api.zhihu.com/topics/19682686"
                }, 
                {
                    "tag": "JSP", 
                    "tagLink": "https://api.zhihu.com/topics/19572326"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br></p><p><br></p><p><b>注意:由于break 语句的作用是跳出代码块,所以break 可以适用于循环和switch等; </b><br><b>\t\t而continue 语句的作用是进入下一个迭代,所以continue只能用于循环的代码块.</b></p><p><b>不太懂什么意思.....</b></p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "意思continue不能放switch中呗", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>对对对对!!!好像就是这意思,太书面,哈哈</p>", 
                            "likes": 0, 
                            "replyToAuthor": "尚学堂讲师赵珊珊"
                        }
                    ]
                }, 
                {
                    "userName": "滥调丶", 
                    "userLink": "https://www.zhihu.com/people/0faea6b9894a10ab80f7671bb74535fc", 
                    "content": "<p>urlencode 你得了解下 。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40083341", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 14, 
            "title": "log4j记录日志", 
            "content": "<p>首先说一下啥叫 log4j ----&gt; log  for  java。  这是针对java语言输出日志的工具！那言外之意就是别的语言也有呗？必须的，比如 log4python 哈哈 见名知意了！</p><p>那么再说，log4j是干嘛的呀？记录日志 。。。为啥要记录日志  ？比如以前我在做开发的时候，我们的系统中的异常啥的  都会保存到日志中，一旦项目出问题，运维人员就会把日志给我拿过来，我直接去日志中看项目到底哪里出问题了，所以我们的项目中的各种信息，都可以整到日志里做记录，为后续对日志进行分析统计，查找问题都是方便的！</p><p>记录日志的方式其实有很多，比如最笨的 ，我可以直接在项目中打印到控制台，但是这种信息是不能保存的呀，要想保存，我们可以用IO流将数据全都怼到文件中！但是这样的话，我们没有办法控制日志的级别和日志的格式！当然了，你可以自己写代码控制这些逻辑啊，那多麻烦啊？所以别人给我们写好这个日志框架了，我们拿来用就可以了！也就是log4j </p><p>那么log4j到底怎么用呢？</p><p>1.既然是别人提供的框架，我们拿过来用，就需要导入jar包啊！这个jar包：log4j-1.2.8.jar （我用的这个）</p><p>2.在项目的src下，导入一个properties配置文件：<a href=\"https://link.zhihu.com/?target=http%3A//log4j.properties/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">l</a><a href=\"https://link.zhihu.com/?target=http%3A//og4j.properties/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">og4j.properties</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1ffb97090fdb22668fdb536562c76560_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"1077\" data-original=\"https://pic1.zhimg.com/v2-1ffb97090fdb22668fdb536562c76560_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1077&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1077\" data-original=\"https://pic1.zhimg.com/v2-1ffb97090fdb22668fdb536562c76560_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1ffb97090fdb22668fdb536562c76560_b.jpg\"/></figure><p>上面配置文件的含义：</p><p>（1）log4j.rootLogger=debug,logfile</p><p>        日志中记录的都是高于debug级别的信息。</p><p>        logfile是选择了日志的记录方式</p><p>（2）记录方式1：</p><p>log4j.appender.stdout=org.apache.log4j.ConsoleAppender</p><p>log4j.appender.stdout.Target=System.err</p><p>log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout</p><p>解释：利用ConsoleAppender类将日志用红色字体输出在控制台上，SimpleLayout就是用一种简单的格式输出</p><p>（3）记录方式2：</p><p>log4j.appender.logfile=org.apache.log4j.FileAppender</p><p>log4j.appender.logfile.File=d:/bjsxt.log</p><p>log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</p><p>log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %l %F %p %m%n</p><p>解释：利用FileAppender类将日志输出到指定文件：d:/bjsxt.log中去，利用PatternLayout类可以控制日志的输出格式，具体格式为：%d{yyyy-MM-dd HH:mm:ss} %l %F %p %m%n</p><p>格式含义可以百度：log4j  日志 格式：（下图为百度文章的截图）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fe4f1f96b08aa45ccab44b0e06dfa843_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"917\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"917\" data-original=\"https://pic4.zhimg.com/v2-fe4f1f96b08aa45ccab44b0e06dfa843_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;917&#39; height=&#39;376&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"917\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"917\" data-original=\"https://pic4.zhimg.com/v2-fe4f1f96b08aa45ccab44b0e06dfa843_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fe4f1f96b08aa45ccab44b0e06dfa843_b.jpg\"/></figure><p>3.在你要记录日志的类中加入代码：</p><p>//创建一个日志记录器：</p><p>private static Logger logger=Logger.getLogger(XXXClass对象);</p><p>logger.error(e);</p><p><a href=\"https://link.zhihu.com/?target=http%3A//logger.info/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">logger.info</a>(&#34;数据库获取连接成功！&#34;);</p><p>上面可以看出，我们利用不同的方法可以控制日志的级别：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8f9885835e0802ae79dc7bea24ceac2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-8f9885835e0802ae79dc7bea24ceac2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-8f9885835e0802ae79dc7bea24ceac2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8f9885835e0802ae79dc7bea24ceac2b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>4.验证结果，</p><p>如果上面你选的是输出在控制台，那么结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0cd7a24bf8d5dbda18ac84987c644ace_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1038\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"1038\" data-original=\"https://pic3.zhimg.com/v2-0cd7a24bf8d5dbda18ac84987c644ace_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1038&#39; height=&#39;482&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1038\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1038\" data-original=\"https://pic3.zhimg.com/v2-0cd7a24bf8d5dbda18ac84987c644ace_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0cd7a24bf8d5dbda18ac84987c644ace_b.jpg\"/></figure><p>如果上面你选的是在指定文件中记录日志：那么我从d:/bjsxt.log打开日志如下：（按照我自己设定的格式输出的日志）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0da8cfd0313510d4dbdf2cd6b87b304c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"899\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"899\" data-original=\"https://pic1.zhimg.com/v2-0da8cfd0313510d4dbdf2cd6b87b304c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;899&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"899\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"899\" data-original=\"https://pic1.zhimg.com/v2-0da8cfd0313510d4dbdf2cd6b87b304c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0da8cfd0313510d4dbdf2cd6b87b304c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面就是日志的用法，自己动动手 在eclipse中试一下吧~~~~</p>", 
            "topic": [
                {
                    "tag": "Log4j(日志记录器）", 
                    "tagLink": "https://api.zhihu.com/topics/20035246"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "日志", 
                    "tagLink": "https://api.zhihu.com/topics/19718384"
                }
            ], 
            "comments": [
                {
                    "userName": "nobody", 
                    "userLink": "https://www.zhihu.com/people/b6b410961cf6df8e162a712177dcd827", 
                    "content": "很6", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "ztw1122", 
                    "userLink": "https://www.zhihu.com/people/e421f1b849165651a0b8795d5d307e12", 
                    "content": "<p>昨天我终于搞定log4j中mybatis只输出sql</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "王家伟", 
                            "userLink": "https://www.zhihu.com/people/682f76d399ab8da2c0a3c53a8fb31422", 
                            "content": "怎么做的", 
                            "likes": 0, 
                            "replyToAuthor": "ztw1122"
                        }
                    ]
                }, 
                {
                    "userName": "Waiter", 
                    "userLink": "https://www.zhihu.com/people/1df686eed7bf05da5f61d8bbd5f15e75", 
                    "content": "c#也有个包叫log4j..", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>log4j 2 都很多年了, 你这也太过时了。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39810092", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 29, 
            "title": "反射机制-java的各大框架中到处用到反射机制，反射到底哪里好？", 
            "content": "<p>我们通过一个案例引入，首先，先不要考虑反射的问题，先把案例完成。</p><p>案例：比如订餐程序 美团外卖，在下单支付的时候，我们可以通过支付宝支付，可以通过微信支付，可以通过银行卡直接  等等途径。那么在美团外卖和这些支付的公司合作的时候，就一定要制定一个支付的准则，这个准则，在java中怎么表示？自然是用接口了，所以由美团外卖指定接口，然后这些合作的公司去实现这个接口：</p><h2>接口制定：</h2><p>//定义一个网上支付的接口</p><p>public interface MeiTuanMoney{</p><p>        //定义一个抽象方法 ，网上支付。</p><p>       void onLinePay();</p><p>}</p><h2>各个合作的公司去实现这个接口：</h2><p>//支付宝可以与美团合作，那么你可以用支付宝支付，支付宝的公司只要实现美团定义的接口就可以了。</p><p>public class ZhiFuBao implements MeiTuanMoney {</p><p>      @Override</p><p>      public void onLinePay() {</p><p>            System.out.println(&#34;我用支付宝付款&#34;);</p><p>      }</p><p>}</p><p>//微信可以与美团合作，那么可以用微信支付，只要腾讯的微信实现美团定义的接口就可以了。</p><p>public class WeChat implements MeiTuanMoney {</p><p>       @Override</p><p>       public void onLinePay() {</p><p>               System.out.println(&#34;我可以用微信付款。&#34;);</p><p>        }\t</p><p>}</p><h2>测试：</h2><p>public class Test {</p><p>\tpublic static void main(String[] args) {</p><p>//你作为用户来说，你一直习惯用支付宝付款。</p><p>        pay(new ZhiFuBao());</p><p>\t\t//你还可以用微信来支付</p><p>        pay(new WeChat());</p><p>\t}</p><p>\tpublic static void pay(MeiTuanMoney mt){</p><p>         mt.onLinePay();</p><p>\t}</p><p>}</p><p>你作为用户来说，你肯定是要么用支付宝支付，要么用微信支付，二选一。</p><p>但是难道你说用支付宝支付，然后你自己过来改个源码，然后明天支付宝没钱了你用微信支付，你又跑来改源码，说你用微信支付。。这不可能把？</p><p>你可能想，那么可以让程序员在定义的时候，就用if-else进行判断：</p><p>               //假如用的选的是支付宝，这个字符串str可以是从前台接收过来的</p><p>                String str=&#34;支付宝&#34;;</p><p>\t\tif(&#34;支付宝&#34;.equals(str)){</p><p>\t\t\t//你作为用户来说，你一直习惯用支付宝付款。</p><p>      pay(new ZhiFuBao());</p><p>\t\t}else if(&#34;微信&#34;.equals(str)){</p><p>      //你还可以用微信来支付</p><p>      pay(new WeChat());</p><p>\t         }</p><p>上面代码 利用多态，多态的优点就是扩展性好。此时体会到多态的好处了，但是，多态的扩展性虽好，但不是最好~~~为什么呢？</p><p>比如，支付宝有个口碑外卖，已经跟饿了么合作了，那么美团想取消跟竞争单位的合作，取消的支付宝支付一项。那么要在源码中删除支付宝的分支，比如现在又支持信用卡支付，那我还要在代码中加入信用卡支付的分支。所以上面的代码扩展性是否最好?肯定没有。</p><p>解决：利用反射：</p><p>                 //这个str字符串，可以是前台选了支付宝然后传过来的字符串。。</p><p>                 String str=&#34;com.bjsxt.test.ZhiFuBao&#34;;</p><p>\t\t Class c1=Class.forName(str);</p><p>                 //利用反射获取支付宝这个类对应的字节码信息---c1---就是Class类下面的一个对象</p><p>                 Object o=c1.newInstance(); //利用反射创建支付宝这个类的对象</p><p>                 Method m=c1.getMethod(&#34;onLinePay&#34;);//或者payOnline这个方法</p><p>                 m.invoke(o);  //执行o对象的onLinePay这个方法 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面的代码，短短几行，但是扩展性达到了最好！为什么？前台选支付宝还是美团还是等等其他的，爱啥啥，只要把对应类的字符串传过来就行了，后台你增减代码，只要增减对应的类就行了，但是逻辑代码不用变！此时扩展性最好！</p><p>这就是为什么各大框架中都用到了反射机制，框架是提供给你用的，自然需要扩展性好！</p><p>（上面的案例涉及到的公司等，只是为了案例需要，不要计较真实性~~）</p>", 
            "topic": [
                {
                    "tag": "反射（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19596531"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 框架", 
                    "tagLink": "https://api.zhihu.com/topics/19702290"
                }
            ], 
            "comments": [
                {
                    "userName": "雪晋", 
                    "userLink": "https://www.zhihu.com/people/f1f321d9e0442594cc2f2a546d3c5f82", 
                    "content": "最近项目刚好用到反射，虽然代码套用了，但是看你这个又加深了一层理解嘿嘿", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "ztw1122", 
                    "userLink": "https://www.zhihu.com/people/e421f1b849165651a0b8795d5d307e12", 
                    "content": "<p>online其实是个单词...看来作者不怎么玩国产网游...</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "soga", 
                            "likes": 0, 
                            "replyToAuthor": "ztw1122"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>不懂java，C#这里可以用委托，按理说java也应该有类似委托的机制。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Guido.t", 
                    "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                    "content": "<p>讲得很好呀，有泛型吗，借一部说话</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "回头写一个给你", 
                            "likes": 0, 
                            "replyToAuthor": "Guido.t"
                        }, 
                        {
                            "userName": "Guido.t", 
                            "userLink": "https://www.zhihu.com/people/f18697044643e72b1eccdaad5b35c1e1", 
                            "content": "<p>感谢美女讲师，给你笔芯</p>", 
                            "likes": 0, 
                            "replyToAuthor": "尚学堂讲师赵珊珊"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "这个就是工厂方法模式", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39651803", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 137, 
            "title": "mysql和oracle的区别", 
            "content": "<p>1. mysql和oracle都是关系型数据库，可以应用于各种平台。我们用的oracle的版本是oracle11g ,用的mysql的版本是mysql5.5。mysql最开始是瑞典一个公司开发的，开源的，但是后来被sun公司收购，后来sun又被oracle收购，所以现在可以说mysql属于甲骨文公司了！现在用mysql的公司也有很多，mysql价钱便宜些，处理千万级别的数据不成问题的，并且开源，很友好！</p><p>2. mysql默认端口：3306     默认用户root</p><p>    oracle默认端口 1521    默认用户system</p><p>3. mysql的安装卸载简单，oracle很麻烦，动不动就要害的大家重做系统（迷醉）</p><p>4. oracle在命令行用命令登陆：sqlplus---然后录入账号密码 </p><p>    mysql在命令行用命令登陆： mysql -hlocalhost -uroot -p123123</p><p>    (开头字母代表 -----  h:host  u:user  p:password，并且这些命令要想正常运行，那必须要在环境变量path中配置好)</p><p>5. 在初学阶段，图形化工具，oracle 一般用PLSQL ，mysql 一般用navicat。假如别的你用着习惯比如sqlyog小海豚啥的当然也没有问题。</p><p>6. 关于数据库的层次结构：</p><p>        oracle：创建一个数据库，数据库下有好多用户：sys,system,scott等，不同用户下还有好多表。我们自己练习一般就创建一个数据库用。</p><p>        mysql：默认用户是root，用户下可以创建好多数据库，每个数据库下还有好多表。我们一般自己练习就用默认用户，不会创建多个用户。</p><p>7.数据库中表字段的类型：</p><p>         oracle：number（数值型），varchar2,varchar,char (字符型)，date 日期型  等</p><p>         mysql：int,float,double等数值型，varchar,char字符型，date,datetime,time,year,timestamp等日期型。</p><p>         其中char(2)这样定义，这个单位在oracle中2代表两个字节，mysql中代表两个字符。</p><p>        其中varchar在mysql中 必须给长度例如varchar(10) 不然插入的时候出错。</p><p> 8.主键递增操作：</p><p>         oracle:可以借助序列</p><p>         mysql:利用自增  auto_increment</p><p> 9.单表sql语法：</p><p>（a）创建表：</p><p>oracle:</p><p>create table t_student(</p><p>\tsid int primary key ,</p><p>        sname varchar(1) not null ,</p><p>        enterdate date,</p><p>        gender char(1),</p><p>        mail unique,  ---唯一约束</p><p>        age number check (age&gt;19 and age&lt;30) -----检查约束</p><p>)</p><p>mysql:</p><p>create table t_student(</p><p>\tsid int primary key auto_increment,</p><p>        sname varchar(1) not null ,</p><p>        enterdate date,</p><p>        gender char(1),</p><p>        age int check (age&gt;18 and age&lt;40),   ---检查约束，虽然语法可以通过，但是不好使</p><p>        mail varchar(10) UNIQUE   --- 唯一约束</p><p>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（b）插入数据：</p><p>oracle:</p><p>insert into myuser values (序列名字.nextval,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,to_date(&#39;1990-3-4&#39;,&#39;YYYY-MM-DD&#39;))</p><p>mysql:</p><p>(0)正确写法：null  自增 </p><p>(1)日期不同 可以直接添加：&#39;1990-3-4&#39;</p><p>(2)单位(1)代表一个字符，字母汉字都是一个字符！ 性别 char(2)  代表 两个字符 ：a一个字符 男 一个字符  </p><p>(3)日期没有sysdate , 要是：sysdate() now()  错误 没有to_date函数 insert into myuser values (NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,to_date(&#39;1990-3-4&#39;,&#39;YYYY-MM-DD&#39;))</p><p>(4)可以多条数据一起添加</p><p>(5)非空约束，唯一约束，主键约束，都可以，但是 检查约束不好使</p><p>下面语法都是可以的：</p><p>insert into t_student values (NULL,&#39;a&#39;,&#39;1990-3-4&#39;,&#39;a&#39;)</p><p>insert into myuser values (NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,&#39;1990-3-4&#39;)</p><p>insert into myuser values (NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,&#39;1990/3/4&#39;)</p><p>insert into myuser values (NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,sysdate())</p><p>insert into myuser values (NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,now())</p><p>insert into myuser values (NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,sysdate()),(NULL,&#39;nana&#39;,&#39;123&#39;,&#39;男&#39;,sysdate())</p><p>（c）删除表</p><p>(1)删除表：这里不同</p><p>oracle: delate from myuser ;  ---from 可有可无 </p><p>mysql: delete from myuser;  ---必须有from</p><p>(2)删除整个表：oracle,mysql一样</p><p>drop table myuser ;</p><p>(3)只删除数据 不删除表 :oracle,mysql一样</p><p>TRUNCATE table myuser ;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>10.多表sql语法：</p><p>（1）oracle：创建学生表，班级表，添加外键关联：</p><p>--创建学生表：</p><p>create table t_student(</p><p>       sid number primary key ,</p><p>       sname varchar2(10),</p><p>       gender char(3),</p><p>       classid number </p><p>)</p><p>--创建班级表：</p><p>create table t_class(</p><p>       cid number primary key,</p><p>       cname varchar(10)</p><p>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>----学生表添加数据：</p><p>insert into t_student values (seq_emp.nextval,&#39;lili&#39;,&#39;男&#39;,1);</p><p>insert into t_student values (seq_emp.nextval,&#39;nana&#39;,&#39;男&#39;,2);</p><p>insert into t_student values (seq_emp.nextval,&#39;feifei&#39;,&#39;男&#39;,3);</p><p>---班级表添加数据：</p><p>insert into t_class values (1,&#39;java01&#39;);</p><p>insert into t_class values (2,&#39;java02&#39;);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>--添加学生表的外键约束：</p><p>alter table t_student add constraints fk_student foreign key (classid) references t_class (cid)on delete cascade;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（2）mysql创建学生表，班级表，添加外键关联：</p><p>##创建学生表：</p><p>create table t_student(</p><p>       sid int primary key auto_increment,</p><p>       sname varchar(10),</p><p>       gender char(3),</p><p>       classid int </p><p>)</p><p>##创建班级表：</p><p>create table t_class(</p><p>       cid int primary key,</p><p>       cname varchar(10)</p><p>)</p><p>##学生表添加数据：</p><p>insert into t_student values (null,&#39;lili&#39;,&#39;男&#39;,1);</p><p>insert into t_student values (null,&#39;nana&#39;,&#39;男&#39;,2);</p><p>##班级表添加数据：</p><p>insert into t_class values (1,&#39;java01&#39;);</p><p>insert into t_class values (2,&#39;java02&#39;);</p><p>##添加学生表的外键约束：</p><p>alter table t_student add constraint fk_student foreign key (classid) references t_class (cid) on delete set null on update CASCADE;</p><p>注意哪里不同：</p><p>创建语法不同</p><p>外键约束：oracle是constraints,mysql是constraint</p><p>级联操作：</p><p>         oracle：on delete set null 或者on delete cascade</p><p>         mysql : on delete set null on update CASCADE</p><p>                      更改班级表的主键的时候，学生表外键的值也随之更改</p><p>                      删除班级表的主键记录的时候，学生表外键的值置空</p><p class=\"ztext-empty-paragraph\"><br/></p><p>11.外连接：</p><p>oracle：92语法：可以内连接，外连接</p><p>             99语法：可以内连接，外连接，全外连接</p><p>mysql：只支持 内连接，外连接 ，并且只能用类似oracle中99语法的格式写：</p><p>select * from t_class c,t_student s where c.cid(+)=s.classid; （不可以出错）</p><p>select * from t_class c right join  t_student s on  c.cid=s.classid;（只能这样写）</p><p>12.分页：</p><p>（1）oracle分页复杂：</p><p>第2页:6-10条记录</p><p>select * from</p><p> (select rownum rr,a.* from (select * from emp order by sal) a ) </p><p>where rr&gt;5 and rr&lt;=10;</p><p>（2）mysql分页简单一句话:</p><p>select * from help_category  order  by  parent_category_id limit  10,5</p><p>10,5含义：</p><p>记录从0开始，所以其实10代表的是第11条记录，从第11条记录开始，取5个数据</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>整理不易，中午没吃饭，有点饿~~~~~~~~</p><p>教训：中午还是要吃饭的  ！</p>", 
            "topic": [
                {
                    "tag": "MySQL", 
                    "tagLink": "https://api.zhihu.com/topics/19554128"
                }, 
                {
                    "tag": "MySQL 入门", 
                    "tagLink": "https://api.zhihu.com/topics/19667043"
                }, 
                {
                    "tag": "Oracle 认证", 
                    "tagLink": "https://api.zhihu.com/topics/19636160"
                }
            ], 
            "comments": [
                {
                    "userName": "周本宇红", 
                    "userLink": "https://www.zhihu.com/people/07140bad3b374e07c00632293cb2f413", 
                    "content": "谢谢老师指导。敬礼", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "哈利路亚", 
                    "userLink": "https://www.zhihu.com/people/f8082d5113933516b79d09e7bebe0c02", 
                    "content": "赞！", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "任卫", 
                    "userLink": "https://www.zhihu.com/people/4b9ce4037a3e4d52cc3196150a98f655", 
                    "content": "瑞典吧", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "是的是的 打错了 已更改 谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "任卫"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "旧文了吧？<br>现在MySQL最新已经8.0了，5系列也已经是5.7了。估计是被mariadb逼的，新版已经增强很多了。<br><br>Oracle也已经12，18了……<br><br>SQL标准也有更新的了……<br><br>希望能对比下最近的版本……", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "确实版本不高，我们培训阶段用的就这，毕竟太新的好些功能用不到，就像jdk 用的8 ，不过我会听取你的建议  自己看看新版本 谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "Casanova", 
                    "userLink": "https://www.zhihu.com/people/58a84b1cdcdb6b485275483db1e3fa5b", 
                    "content": "既然都是甲骨文的，为什么两个数据库不合并成一个算了？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "你说thinkpad跟联想咋没合呢", 
                            "likes": 1, 
                            "replyToAuthor": "Casanova"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39475311", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 15, 
            "title": "oracle_sql_92语法和99语法", 
            "content": "<p>在oracle的scott用户下的表，截图展示：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7cb46f54e5f468b6f4e4780e52bf70da_b.jpg\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb\" width=\"577\" data-original=\"https://pic3.zhimg.com/v2-7cb46f54e5f468b6f4e4780e52bf70da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;577&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"577\" data-original=\"https://pic3.zhimg.com/v2-7cb46f54e5f468b6f4e4780e52bf70da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7cb46f54e5f468b6f4e4780e52bf70da_b.jpg\"/><figcaption>emp（员工）表</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2e9f239ddacdda0f598e7df04e606df1_b.jpg\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"179\" class=\"content_image\" width=\"356\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;356&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"179\" class=\"content_image lazy\" width=\"356\" data-actualsrc=\"https://pic2.zhimg.com/v2-2e9f239ddacdda0f598e7df04e606df1_b.jpg\"/><figcaption>dept（部门）表</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-944e0f28fe74196a961f0ee9e95f4069_b.jpg\" data-size=\"normal\" data-rawwidth=\"352\" data-rawheight=\"155\" class=\"content_image\" width=\"352\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;352&#39; height=&#39;155&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"352\" data-rawheight=\"155\" class=\"content_image lazy\" width=\"352\" data-actualsrc=\"https://pic2.zhimg.com/v2-944e0f28fe74196a961f0ee9e95f4069_b.jpg\"/><figcaption>city（城市）表</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>-----我们先用两张表emp,dept进行关联:</p><p>----92语法 ：笛卡尔积方式：</p><p>select * from emp,dept;</p><p>----99语法：交叉连接：</p><p>select * from emp cross join dept;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>----那么上面的数据中，好多数据都是无效的，我现在想过滤掉无效数据，怎么办？</p><p>----92语法：利用的是内连接（等值连接）</p><p>select * from emp e,dept d where e.deptno=d.deptno;</p><p>----99语法：自然连接</p><p>select * from emp natural join dept;</p><p>上面从结果看到的区别：</p><p>在92语法中，emp表中的deptno和dept表中的deptno最后都会显示出来，</p><p>但是在99语法中，两个字段会合成一个字段展示.</p><p>所以导致下面的语句就比较特殊：</p><p>92语法字段前可以加所属表：</p><p>select d.deptno from emp e,dept d where e.deptno=d.deptno ;（可以）</p><p>99不可以加所属表：</p><p>select e.deptno from emp e natural join dept d;（报错）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面的方式连接的是emp和dept表中所有的相同数据（名字相同，类型相同）</p><p>在上面99语法中：</p><p>select * from emp natural join dept;</p><p>它是自然连接，连接两张表中所有的相同字段。</p><p>举例说明：</p><p>比如两张表emp和dept中有两个相同字段，一个是deptno，一个是 a</p><p>---92语法连接写法：</p><p>select * from emp e, dept d where e.deptno=d.deptno and e.a=d.a;</p><p>----99语法连接写法：</p><p>select * from emp natural join dept;直接会将所有相同字段连接！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么在99语法中,我就想连接 我指定的某个字段呢？</p><p>select * from emp inner join  dept using (deptno); </p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>下面的两张表：</p><p>select * from dept;</p><p>select * from city;</p><p>----92将上面两个表连接：</p><p>select * from dept d,city c where d.loc=c.cid; </p><p>----99将上面两个表连接：</p><p>select * from dept d inner join city c  on (d.loc=c.cid)</p><p>on后面加的是：两张表连接的条件</p><p>可否再给这个表加上过滤条件,用下面两种方式：</p><p>select * from dept d inner join city c  on (d.loc=c.cid and deptno&gt;30) --可以</p><p>select * from dept d inner join city c  on (d.loc=c.cid ) where deptno&gt;30-- 也可以</p><p>上面两种哪个好？第二种好</p><p>因为on后面最好加的连接条件，where后加的是过滤条件</p><p class=\"ztext-empty-paragraph\"><br/></p><p>---上面说的都是内连接，下面我们说外连接：</p><p>---92左外连接</p><p>select * from emp e,dept d where e.deptno=d.deptno(+);</p><p>---99左外连接</p><p>select * from emp e left join dept d on e.deptno=d.deptno ;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>---92右外连接</p><p>select * from emp e,dept d where e.deptno(+)=d.deptno;</p><p>---99右外连接</p><p>select * from emp e right join dept d on e.deptno=d.deptno ;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>---92没有全外连接：</p><p>select * from emp e,dept d where e.deptno(+)=d.deptno(+);---这种出错</p><p>---99全外连接：</p><p>select * from emp e full join dept d on e.deptno=d.deptno ;</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>-----下面我们说三表连接：</p><p>---92语法：</p><p>select * from emp e,dept d ,city c</p><p>where e.deptno=d.deptno and d.loc=c.cid;</p><p>---99语法：</p><p>select * from emp e </p><p>join dept  d </p><p>on e.deptno=d.deptno </p><p>join city c </p><p>on d.loc=c.cid; </p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>希望上面简单的总结可以帮助到你，有问题私信~</p>", 
            "topic": [
                {
                    "tag": "SQL", 
                    "tagLink": "https://api.zhihu.com/topics/19553557"
                }, 
                {
                    "tag": "数据库", 
                    "tagLink": "https://api.zhihu.com/topics/19552067"
                }, 
                {
                    "tag": "SQL 语句", 
                    "tagLink": "https://api.zhihu.com/topics/19575650"
                }
            ], 
            "comments": [
                {
                    "userName": "孙孙孙", 
                    "userLink": "https://www.zhihu.com/people/0a4b59d7835634f1637a110ed6d97765", 
                    "content": "这个老师讲的真详细 可以多发一点", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39083007", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 12, 
            "title": "Callable原理,线程池执行Callable任务", 
            "content": "<p>线程的创建方式一共三种，1.继承Thread类  2.实现Runnable接口  3，实现Callable接口</p><p>前两种方式，比较简单，我在这节就不说了，我们在这里说一说JDK1.5之后新的这个创建线程的方式：实现Callable接口</p><p>先来一段代码，用实现Callable接口的方式 创建线程(这个代码，没有用线程池)：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.Random</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.Callable</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.ExecutionException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.FutureTask</span><span class=\"o\">;</span>\n<span class=\"c1\">//1.创建一个线程类，实现Callable接口，\n</span><span class=\"c1\">//2.Callable会报一个黄色的警告，原因：可以加个泛型，这个泛型，是返回值对应的类型。\n</span><span class=\"c1\">//3.我们这个题是产生随机数，所以加个泛型Integer\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RanDomCallable</span> <span class=\"kd\">implements</span> <span class=\"n\">Callable</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\t<span class=\"c1\">//4.一旦上面的泛型确定了，那么这个重写的方法的返回值类型就是Integer了。\n</span><span class=\"c1\"></span>\t<span class=\"kd\">public</span> <span class=\"n\">Integer</span> <span class=\"nf\">call</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">2000</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Random</span><span class=\"o\">().</span><span class=\"na\">nextInt</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"c1\">//5.写main方法测试\n</span><span class=\"c1\"></span>\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">InterruptedException</span><span class=\"o\">,</span> <span class=\"n\">ExecutionException</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">//6.创建一个线程对象：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">RanDomCallable</span> <span class=\"n\">rdc</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">RanDomCallable</span><span class=\"o\">();</span>\n\t\t<span class=\"c1\">//7.启动线程，直接用Thread传rdc不行，必须再借助一个FutureTask\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">FutureTask</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">ft</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">FutureTask</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;(</span><span class=\"n\">rdc</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">Thread</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">ft</span><span class=\"o\">);</span><span class=\"c1\">//FutureTask实现了Runnable接口所以可以传入\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\t\t<span class=\"c1\">//8.上面已经将线程启动了，直接运行是没有结果的\n</span><span class=\"c1\"></span>\t\t<span class=\"c1\">//9.我们必须要对返回值处理，那么如何接收返回值：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">Integer</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span><span class=\"c1\">//get方法中可以加入sleep,验证get是个阻塞方法\n</span><span class=\"c1\"></span>\t\t<span class=\"c1\">//10.判断线程是否执行结束：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"na\">isDone</span><span class=\"o\">());</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"na\">isDone</span><span class=\"o\">());</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>上面的代码，发现在call中，sleep中睡了两秒，执行结果就是 两秒后 才将随机数输出。</p><p>那么get方法为什么是阻塞的呢？看一眼源码</p><p>这种线程方式，最根本的实现类就是FutureTask：</p><p>我们看看FutureTask的源码：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a93c346be8cb0b10784356bf260dedee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"1050\" data-original=\"https://pic3.zhimg.com/v2-a93c346be8cb0b10784356bf260dedee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1050&#39; height=&#39;433&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1050\" data-original=\"https://pic3.zhimg.com/v2-a93c346be8cb0b10784356bf260dedee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a93c346be8cb0b10784356bf260dedee_b.jpg\"/></figure><p>在看run方法前，你要明白，这个线程走完，最终state的数值，从1（new）变为2(completing)变为3(normal) 那么线程就执行好了！</p><p>先看构造器：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c7fd3727c4d4cda9e8387f1023882707_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"188\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic4.zhimg.com/v2-c7fd3727c4d4cda9e8387f1023882707_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;188&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"188\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic4.zhimg.com/v2-c7fd3727c4d4cda9e8387f1023882707_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c7fd3727c4d4cda9e8387f1023882707_b.jpg\"/></figure><p>我们去看看FutureTask的run方法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5b7717f876a515afba244f9438045ed8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1010\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb\" width=\"1010\" data-original=\"https://pic1.zhimg.com/v2-5b7717f876a515afba244f9438045ed8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1010&#39; height=&#39;549&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1010\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1010\" data-original=\"https://pic1.zhimg.com/v2-5b7717f876a515afba244f9438045ed8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5b7717f876a515afba244f9438045ed8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a6cc175f015d910d67734b6241909045_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"1039\" data-original=\"https://pic2.zhimg.com/v2-a6cc175f015d910d67734b6241909045_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1039&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1039\" data-original=\"https://pic2.zhimg.com/v2-a6cc175f015d910d67734b6241909045_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a6cc175f015d910d67734b6241909045_b.jpg\"/></figure><p><br/>发现 在执行过程中，state要从0到1到2，返回值才会保存到outcome中。</p><p>那么我们现在看一眼get方法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7eaaa6a2158a29231b483a821d2b9195_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"923\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"923\" data-original=\"https://pic2.zhimg.com/v2-7eaaa6a2158a29231b483a821d2b9195_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;923&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"923\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"923\" data-original=\"https://pic2.zhimg.com/v2-7eaaa6a2158a29231b483a821d2b9195_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7eaaa6a2158a29231b483a821d2b9195_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-45f282dfb2bd93838bd73c8e963841f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb\" width=\"821\" data-original=\"https://pic1.zhimg.com/v2-45f282dfb2bd93838bd73c8e963841f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;821&#39; height=&#39;228&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"821\" data-original=\"https://pic1.zhimg.com/v2-45f282dfb2bd93838bd73c8e963841f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-45f282dfb2bd93838bd73c8e963841f8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面验证出get方法是阻塞的！</p><p>那么现在我们利用线程池来处理任务：</p><p>代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">InterruptedException</span><span class=\"o\">,</span> <span class=\"n\">ExecutionException</span> <span class=\"o\">{</span>\n\t\t\n\t\t\n\t\t<span class=\"c1\">//线程池的核心线程数：3个 \n</span><span class=\"c1\"></span>\t\t<span class=\"n\">ExecutorService</span> <span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span><span class=\"n\">100</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">//提交任务之后，返回结果是Future，此时线程还没有结束，等待任务的返回值呢 \n</span><span class=\"c1\"></span>\t\t\t<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">TestThread</span><span class=\"o\">());</span>\n\t\t\t<span class=\"c1\">//输出返回值\n</span><span class=\"c1\"></span>\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">());</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">TestThread</span> <span class=\"kd\">implements</span> <span class=\"n\">Callable</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">call</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">2000</span><span class=\"o\">);</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Random</span><span class=\"o\">().</span><span class=\"na\">nextInt</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;===&#34;</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span></code></pre></div><p>上面代码的执行结果是：每两秒输出一个随机数，原因就是get方法是阻塞的啊，要执行完才会得到结果的，那么我们要是想效率高一点怎么办，改为下面的代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test5</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">InterruptedException</span><span class=\"o\">,</span> <span class=\"n\">ExecutionException</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">//线程池的核心线程数：3个 \n</span><span class=\"c1\"></span>\t\t<span class=\"n\">ExecutorService</span> <span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">Executors</span><span class=\"o\">.</span><span class=\"na\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">//List集合用来存储Future\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Future</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Future</span><span class=\"o\">&gt;();</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span><span class=\"n\">100</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">//提交任务之后，返回结果是Future，此时线程还没有结束，等待任务的返回值呢 \n</span><span class=\"c1\"></span>\t\t\t<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"na\">submit</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">TestThread</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;asf&#34;</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Future</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">());</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"na\">shutdown</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>这样，100个任务就会全都分配下去，进入到队列中，然后核心线程数为3个，所以就会3个3个执行线程，所以结果也是三个一输出，三个一输出。假如你的核心线程数要是比任务多，那就一次性全都输出啦（2秒中同时执行任务！）</p><p></p>", 
            "topic": [
                {
                    "tag": "并发", 
                    "tagLink": "https://api.zhihu.com/topics/19757794"
                }, 
                {
                    "tag": "线程", 
                    "tagLink": "https://api.zhihu.com/topics/19619468"
                }, 
                {
                    "tag": "线程池", 
                    "tagLink": "https://api.zhihu.com/topics/19721742"
                }
            ], 
            "comments": [
                {
                    "userName": "nobody", 
                    "userLink": "https://www.zhihu.com/people/b6b410961cf6df8e162a712177dcd827", 
                    "content": "你到底开不开车", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "By yourself", 
                    "userLink": "https://www.zhihu.com/people/073f0456296fd9f782c29688aa8b61a4", 
                    "content": "这是去尚学堂的车", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>感觉周末休息了有东西看了,加油哦~</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "小迷妹儿", 
                    "userLink": "https://www.zhihu.com/people/1251542bfac4d1069bf5da204c9f5aba", 
                    "content": "<p>你有你的知识，我有我的讲师，不是很牛，但是很美，安排！</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38968821", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 22, 
            "title": "线程池原理解析", 
            "content": "<p>首先先说一下线程池的应用场景：</p><p>一个线程，从新生阶段，到死亡阶段，假如是顺利的过程的话，那么其中可能：创建线程需要3秒+执行2秒+销毁2秒。</p><p>那么在高并发系统中，你这样频繁的创建销毁线程，就大大降低了系统的效率。此时想到用线程池来解决！！！</p><p>线程池  就好比什么？好比去学校前台借电脑：</p><p>正常前台要是不提供这个功能，学生用电脑怎么办，自己买电脑 从京东订货，然后买一台 等待发货 几天到手，用完几个月 买了挂咸鱼卖了，还要等一段。当大批量的同学都有这个需求，为了提高效率，那么需要开始提供租借电脑服务，买1000台电脑，你来了 拿过来用，用完了还回来。大大节约效率啊！！线程池就是这个原理，在系统高并发时候，省去了大量的创建，销毁线程的时间，线程用完了不销毁，放回来  供别人用！</p><p>那你说线程池底层用的是   阻塞队列   还是  非阻塞队列？</p><p>比如你来借电脑，之前的1000个电脑被借完了，然后行政 告诉你 滚。。不借。。 可以吗？  不可以啊 肯定是谁退了 赶紧给你拿来了 ！</p><p>所以底层用的就是  阻塞队列！！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>线程池，用到的一个类就是ThreadPoolExcutor类！！</p><p>那么线程池原理分析，看图：直接手画流程图感受：（图有点大，自己放大看，，，也上传百度云了，需要清晰大图给我私信~~）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e1102852d8d93a71450e7806baffda7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1243\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb\" width=\"1243\" data-original=\"https://pic2.zhimg.com/v2-e1102852d8d93a71450e7806baffda7d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1243&#39; height=&#39;540&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1243\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1243\" data-original=\"https://pic2.zhimg.com/v2-e1102852d8d93a71450e7806baffda7d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e1102852d8d93a71450e7806baffda7d_b.jpg\"/></figure><p>代码测试：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2b3ac50e54683cee12bf9942e81a445d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb\" width=\"1041\" data-original=\"https://pic2.zhimg.com/v2-2b3ac50e54683cee12bf9942e81a445d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1041&#39; height=&#39;457&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1041\" data-original=\"https://pic2.zhimg.com/v2-2b3ac50e54683cee12bf9942e81a445d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2b3ac50e54683cee12bf9942e81a445d_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "线程池", 
                    "tagLink": "https://api.zhihu.com/topics/19721742"
                }, 
                {
                    "tag": "线程", 
                    "tagLink": "https://api.zhihu.com/topics/19619468"
                }, 
                {
                    "tag": "并发", 
                    "tagLink": "https://api.zhihu.com/topics/19757794"
                }
            ], 
            "comments": [
                {
                    "userName": "TheCeltics丶凯子", 
                    "userLink": "https://www.zhihu.com/people/95bc76da40c1fed581d9ada460665a13", 
                    "content": "稳得一匹", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>不可描述不可描述……</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Darcy Mr", 
                    "userLink": "https://www.zhihu.com/people/b434e789337c4d7a3768fa1c465af273", 
                    "content": "<p>少了一个参数</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "你说的是构造器嘛？有五个参数的 有七个参数的", 
                            "likes": 0, 
                            "replyToAuthor": "Darcy Mr"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38961499", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 17, 
            "title": "并发队列", 
            "content": "<p>在数据结构中，有一种结构就是队列。</p><p>现在我们要讲的是在并发编程中会用到的并发队列。</p><p>首先要说，什么是队列：</p><p>举例：就好像是排队上地铁，先排到的人先进站，后面的人后进站，所以队列有一个特点就是“先进先出”，这是跟栈不一样的地方！</p><p>再说啥是并发：</p><p>就是同时发生的，排队进站，这么多人 ，就是并发呗！</p><p>那么我们现在，将其中的并发队列划分为两种，一个是阻塞队列，一个是非阻塞队列。</p><p>区别是什么呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ccc4298caec740afcdee6f3e704558b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-ccc4298caec740afcdee6f3e704558b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;865&#39; height=&#39;312&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-ccc4298caec740afcdee6f3e704558b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ccc4298caec740afcdee6f3e704558b0_b.jpg\"/></figure><p>数据就是一个一个的放入队列中，队列是一个逻辑结构，其对应的具体的物理结构，可能是由数组或链表或其它实现的，这一点要搞清楚。</p><p>对于入队来说：</p><p>数据一个一个放入队列，假如队列长度为10，那么当你放入第11个数据的时候：</p><p>阻塞队列：可以设置一个时间，在这个时间内等待队列中有没有出队的，有就放进去了。假如超出时间还没有等到，那才会放弃</p><p>非阻塞队列：不等，直接丢失了。</p><p>对于出队来说：</p><p>在队列中获取数据的时候，假如是非阻塞队列，那么数列中要是没数据了，那么取出来的就是null，但是阻塞队列，就要等待，什么时候来数据再给你取出来  一直阻塞着。</p><hr/><p>下面我们用代码验证一下：</p><p>非阻塞队列：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1325e366fc7449f81bf403106f6e3ce2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb\" width=\"841\" data-original=\"https://pic3.zhimg.com/v2-1325e366fc7449f81bf403106f6e3ce2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;841&#39; height=&#39;374&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"841\" data-original=\"https://pic3.zhimg.com/v2-1325e366fc7449f81bf403106f6e3ce2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1325e366fc7449f81bf403106f6e3ce2_b.jpg\"/></figure><p>阻塞队列：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-13cb35476d830f2c758997001d4a1c96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"687\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb\" width=\"687\" data-original=\"https://pic3.zhimg.com/v2-13cb35476d830f2c758997001d4a1c96_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;687&#39; height=&#39;602&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"687\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"687\" data-original=\"https://pic3.zhimg.com/v2-13cb35476d830f2c758997001d4a1c96_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-13cb35476d830f2c758997001d4a1c96_b.jpg\"/></figure><p>改变一下上面的代码：验证阻塞队列！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6a22993af59719ea88bffa3dca6dfc90_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-6a22993af59719ea88bffa3dca6dfc90_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;271&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-6a22993af59719ea88bffa3dca6dfc90_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6a22993af59719ea88bffa3dca6dfc90_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们讲阻塞队列，非阻塞队列的目的，是在java的线程池中，利用的就是阻塞队列，以后有时间再更新线程池~~~bye~</p>", 
            "topic": [
                {
                    "tag": "高并发", 
                    "tagLink": "https://api.zhihu.com/topics/19596218"
                }, 
                {
                    "tag": "并发", 
                    "tagLink": "https://api.zhihu.com/topics/19757794"
                }, 
                {
                    "tag": "Redis", 
                    "tagLink": "https://api.zhihu.com/topics/19557280"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38959384", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 23, 
            "title": "javaee_中级视频_百度云链接", 
            "content": "<h2>1.oracle</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1GBhtBS3mZckY0kaulQkyMA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1GBhtBS</span><span class=\"invisible\">3mZckY0kaulQkyMA</span><span class=\"ellipsis\"></span></a> 密码：56qz</p><h2>2.mysql</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1qHmATcWJieuzCK5ec3A5FQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1qHmATc</span><span class=\"invisible\">WJieuzCK5ec3A5FQ</span><span class=\"ellipsis\"></span></a> 密码：vppj</p><h2>3.JDBC</h2><h2>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1uUzGcQmShOPNZwq3xcv4zQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1uUzGcQ</span><span class=\"invisible\">mShOPNZwq3xcv4zQ</span><span class=\"ellipsis\"></span></a> 密码：wc7s</h2><h2>4.反射</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1aDeERfEoVI8hkqcP1EWwVQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1aDeERf</span><span class=\"invisible\">EoVI8hkqcP1EWwVQ</span><span class=\"ellipsis\"></span></a> 密码：vh99</p><h2>5.xml</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1OtmSo6uOx6hFEl9cyrRkEw\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1OtmSo6</span><span class=\"invisible\">uOx6hFEl9cyrRkEw</span><span class=\"ellipsis\"></span></a> 密码：ue2k</p><h2>6.Tomcat</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1yapK223aqDoHZKxhXJGkFw\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1yapK22</span><span class=\"invisible\">3aqDoHZKxhXJGkFw</span><span class=\"ellipsis\"></span></a> 密码：3ryc</p><h2>7.JSP+Servlet</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1J3p3baIoOAgf7OnW33EozA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1J3p3ba</span><span class=\"invisible\">IoOAgf7OnW33EozA</span><span class=\"ellipsis\"></span></a> 密码：1ut7</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Java 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19723268"
                }, 
                {
                    "tag": "Java Web", 
                    "tagLink": "https://api.zhihu.com/topics/19622819"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": [
                {
                    "userName": "Fulgrim", 
                    "userLink": "https://www.zhihu.com/people/50b7497ee4f7a41334b296ead0b3a4ea", 
                    "content": "没照片！差评！", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这视频是你录得吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "北落师门", 
                    "userLink": "https://www.zhihu.com/people/c2cfbe65798ea338cfbc59c9b565321d", 
                    "content": "<p>跪求JDBC部分的视频Orz</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "已更新", 
                            "likes": 1, 
                            "replyToAuthor": "北落师门"
                        }, 
                        {
                            "userName": "北落师门", 
                            "userLink": "https://www.zhihu.com/people/c2cfbe65798ea338cfbc59c9b565321d", 
                            "content": "<p>这速度。。感谢赵老师 笔芯！</p>", 
                            "likes": 0, 
                            "replyToAuthor": "尚学堂讲师赵珊珊"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>老师真的讲的很好，跪求课堂笔记！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "张宝峰", 
                    "userLink": "https://www.zhihu.com/people/63160f01661121dc6c6033e377fc87e8", 
                    "content": "赵老师您好，如果能走你的笔记和教学大纲就更好了[大笑]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38595242", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 33, 
            "title": "javase部分_百度云链接", 
            "content": "<p>任何问题，私信询问，看到第一时间回复~</p><h2>1.java初步</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1BpeF8P6MaJByEPwKx6pldw\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1BpeF8P</span><span class=\"invisible\">6MaJByEPwKx6pldw</span><span class=\"ellipsis\"></span></a> 密码：rlef</p><h2>2.变量和数据类型</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1ERVsJtK7_qJJIb7zjVgpuA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1ERVsJt</span><span class=\"invisible\">K7_qJJIb7zjVgpuA</span><span class=\"ellipsis\"></span></a> 密码：8odv</p><h2>3.运算符</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1aXroyOGk2NMycQd6IjMiLQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1aXroyO</span><span class=\"invisible\">Gk2NMycQd6IjMiLQ</span><span class=\"ellipsis\"></span></a> 密码：ghqk</p><h2>4.控制流程</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1IS2MJ3Gu_4IYbCsap04TqA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1IS2MJ3</span><span class=\"invisible\">Gu_4IYbCsap04TqA</span><span class=\"ellipsis\"></span></a> 密码：kag0</p><h2>5.方法，递归</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/11S-BxlwNE9wxjau7hyHUNQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/11S-Bxl</span><span class=\"invisible\">wNE9wxjau7hyHUNQ</span><span class=\"ellipsis\"></span></a> 密码：h8ms</p><h2>6.面向对象</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/15rBaxS2M-_puYbi7GVUEPQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/15rBaxS</span><span class=\"invisible\">2M-_puYbi7GVUEPQ</span><span class=\"ellipsis\"></span></a> 密码：s7qu</p><h2>7.异常</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1p73fyyaukIT68w3W0Nt93g\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1p73fyy</span><span class=\"invisible\">aukIT68w3W0Nt93g</span><span class=\"ellipsis\"></span></a> 密码：p05g</p><h2>8.数组</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1oV6bh4OVf1UkdfZoZ30gfA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1oV6bh4</span><span class=\"invisible\">OVf1UkdfZoZ30gfA</span><span class=\"ellipsis\"></span></a> 密码：mt2m</p><h2>9.常用类</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1KERLwP6brQVpccPSnS7NDg\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1KERLwP</span><span class=\"invisible\">6brQVpccPSnS7NDg</span><span class=\"ellipsis\"></span></a> 密码：4epx</p><h2>10.集合</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1yyaPEK3AR3MqcStKjDSVXw\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1yyaPEK</span><span class=\"invisible\">3AR3MqcStKjDSVXw</span><span class=\"ellipsis\"></span></a> 密码：dc9w</p><h2><a href=\"https://link.zhihu.com/?target=http%3A//11.IO\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">11.IO</span><span class=\"invisible\"></span></a>流</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/13D-DKX0MN5UQvq0ZppaBKA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/13D-DKX</span><span class=\"invisible\">0MN5UQvq0ZppaBKA</span><span class=\"ellipsis\"></span></a> 密码：71wz</p><h2>12.多线程</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/17g-eh2se3z4zrfGTjOrsow\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/17g-eh2</span><span class=\"invisible\">se3z4zrfGTjOrsow</span><span class=\"ellipsis\"></span></a> 密码：0I10</p><h2>13.网络编程</h2><p>链接：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1OMl7roq7tun73ybRTtMKoA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.baidu.com/s/1OMl7ro</span><span class=\"invisible\">q7tun73ybRTtMKoA</span><span class=\"ellipsis\"></span></a> 密码：sm0u</p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Java EE", 
                    "tagLink": "https://api.zhihu.com/topics/19620553"
                }, 
                {
                    "tag": "Java Web", 
                    "tagLink": "https://api.zhihu.com/topics/19622819"
                }
            ], 
            "comments": [
                {
                    "userName": "傻核桃", 
                    "userLink": "https://www.zhihu.com/people/b73d5ee3a44388074d07e88f37937dfa", 
                    "content": "<p>挺好的</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "大帝", 
                    "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                    "content": "讲的挺不错，通俗易懂", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "北城浅笑", 
                    "userLink": "https://www.zhihu.com/people/88fce841efce37e594f643bd5362663d", 
                    "content": "<p>珊姐牛逼！！！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "德炜", 
                    "userLink": "https://www.zhihu.com/people/0c0fb2d8bfeac2dc3584dc0271acdaff", 
                    "content": "<p>知乎大牛哦!!</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "留学小白说", 
                    "userLink": "https://www.zhihu.com/people/7d7143e3981a77b40ec117deed432fb5", 
                    "content": "66666", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "薛定猫的谔", 
                    "userLink": "https://www.zhihu.com/people/701309aa169775733920d271e4846d2d", 
                    "content": "<p>思路清晰，讲课风趣幽默，在不知不觉中学习到很多知识，受益匪浅。希望可以多出此类的视频供大家学习！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>珊姐   还记得皇上翻牌吗   第一女司机！！！</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "侧耳倾听", 
                            "userLink": "https://www.zhihu.com/people/e12b1ac1159f77d826eac45f7d37767d", 
                            "content": "咱不会是一个班吧", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>老师，数组里的视频是不是传错了，里面是异常的</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "<p>已更换~</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "德炜", 
                    "userLink": "https://www.zhihu.com/people/0c0fb2d8bfeac2dc3584dc0271acdaff", 
                    "content": "<p>成功获取价值千元的复习视频</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "胖了白了兔", 
                    "userLink": "https://www.zhihu.com/people/6ba158070942ef519f2481514206135f", 
                    "content": "多线程拿不到", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "尚学堂讲师赵珊珊", 
                            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
                            "content": "我的视频在b站也传了 叫尚学堂深入浅出 你可以直接去那里看 不用下载", 
                            "likes": 0, 
                            "replyToAuthor": "胖了白了兔"
                        }
                    ]
                }, 
                {
                    "userName": "张宝峰", 
                    "userLink": "https://www.zhihu.com/people/63160f01661121dc6c6033e377fc87e8", 
                    "content": "真心感谢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37976338", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 31, 
            "title": "接口认识", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-13cebdbb8da3d69dd1bca5b354b970d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1157\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb\" width=\"1157\" data-original=\"https://pic1.zhimg.com/v2-13cebdbb8da3d69dd1bca5b354b970d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1157&#39; height=&#39;541&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1157\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1157\" data-original=\"https://pic1.zhimg.com/v2-13cebdbb8da3d69dd1bca5b354b970d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-13cebdbb8da3d69dd1bca5b354b970d4_b.jpg\"/></figure><h2>我们就从上面的图中去感受接口。</h2><h2>接口就好比是你找男朋友的品质，你要的男朋友是什么样子的规定。那么，你找的男朋友的类型就多了，比如不幸，你找到的是屌丝类型的，那么屌丝具备啥特点？懒+会编程 。   如果你很幸运，找到了对你好的高帅富，那么高帅富这类人群的特点是啥？有钱+帅+有品位（我要有钱我也有品味）。</h2><h2>所以我们感受到：（1）一个类，只实现跟他有关，或者说只实现它需要实现的接口。并不是说要实现程序中全部的接口。（2）实现接口，就要满足接口中定义的规则。（3）接口与接口之间没有任何关联，耦合性低。（4）一个类可以实现多个接口，但是继承 只能是 单继承。</h2>", 
            "topic": [
                {
                    "tag": "软件接口设计", 
                    "tagLink": "https://api.zhihu.com/topics/20027597"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "javase", 
                    "tagLink": "https://api.zhihu.com/topics/19725879"
                }
            ], 
            "comments": [
                {
                    "userName": "师太别追了", 
                    "userLink": "https://www.zhihu.com/people/987bc7ba2fb51dfc861a88834e9e63fe", 
                    "content": "中国队加油", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "kaxty", 
                    "userLink": "https://www.zhihu.com/people/9c6486a51f83399a24d08d5908f6b2f1", 
                    "content": "珊珊是女司机？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "神奇的帅孔斐88", 
                            "userLink": "https://www.zhihu.com/people/a7bbe8f680eb61f19daa8f880b9cfc22", 
                            "content": "绝对是美女司机！", 
                            "likes": 0, 
                            "replyToAuthor": "kaxty"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37853346", 
            "userName": "尚学堂讲师赵珊珊", 
            "userLink": "https://www.zhihu.com/people/0e70dfc15d8e6d0760946a935e4b7655", 
            "upvote": 66, 
            "title": "面向对象中封装的认识", 
            "content": "<p>今天在班上讲了封装，又是元气满满的一个周末。</p><p>二话不说，还是要化繁为简，这节的目的是整明白啥叫封装！</p><p>首先看一眼百度百科上封装的定义：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"170\" src=\"https://pic2.zhimg.com/v2-2dda3f9f2481975cf019315148208521_b.jpg\" data-size=\"normal\" data-rawwidth=\"821\" class=\"origin_image zh-lightbox-thumb\" width=\"821\" data-original=\"https://pic2.zhimg.com/v2-2dda3f9f2481975cf019315148208521_r.jpg\"/></noscript><img data-rawheight=\"170\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;821&#39; height=&#39;170&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"821\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"821\" data-original=\"https://pic2.zhimg.com/v2-2dda3f9f2481975cf019315148208521_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2dda3f9f2481975cf019315148208521_b.jpg\"/></figure><p>讲道理，看到这样的描述，我的人是崩溃的</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"188\" src=\"https://pic3.zhimg.com/v2-1e728a3d536f733b729aa38ec215850e_b.jpg\" data-size=\"normal\" data-rawwidth=\"221\" class=\"content_image\" width=\"221\"/></noscript><img data-rawheight=\"188\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;221&#39; height=&#39;188&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"221\" class=\"content_image lazy\" width=\"221\" data-actualsrc=\"https://pic3.zhimg.com/v2-1e728a3d536f733b729aa38ec215850e_b.jpg\"/></figure><p>首先用一个案例引入，那就是女性年龄这事，一般非妙龄少女的年龄，是不想让人知道的，比如我！</p><p>首先创建一个Girl类：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Girl</span> <span class=\"o\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>然后写一个测试类：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">Girl</span> <span class=\"n\">g</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Girl</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"na\">age</span><span class=\"o\">=</span><span class=\"n\">36</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>上来你就给我来个36岁，这是跟sei俩呢！我拒绝！！</p><p>那么问题来了，咋拒绝？不想让你随意糟蹋我的年龄。。解决：在age属性前加上一个修饰符private：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Girl</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>那么测试类中,立马就报错了：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"153\" src=\"https://pic1.zhimg.com/v2-764b993a3da54b19b1604b90d8531f98_b.jpg\" data-size=\"normal\" data-rawwidth=\"671\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-764b993a3da54b19b1604b90d8531f98_r.jpg\"/></noscript><img data-rawheight=\"153\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;671&#39; height=&#39;153&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"671\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-764b993a3da54b19b1604b90d8531f98_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-764b993a3da54b19b1604b90d8531f98_b.jpg\"/></figure><p>目的达到了，我这个age对你来说访问不到了！那么，此时，你该理解了，我这个age属性，对你来说，已经封装起来了，但是效果不好，为啥呢？因为对你哪些不礼貌的人，我确实需要隐藏我的年龄，但是在一些必要的场合，age这个属性也必须要提供给你用，怎么办呢？解决办法：你对我的年龄，无非就是设置值，读取值操作，那么我就给你提供俩方法，让你通过这两个方法访问到我的年龄。。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Girl</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n\t<span class=\"c1\">//设置年龄的值\n</span><span class=\"c1\"></span>\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">sheZhiAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"c1\">//读取年龄的值\n</span><span class=\"c1\"></span>\t<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">duQuAge</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>这样你访问的时候，就可以按照下面方式访问了：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">Girl</span> <span class=\"n\">g</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Girl</span><span class=\"o\">();</span>\n\t\t<span class=\"c1\">//对年龄设置值：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"na\">sheZhiAge</span><span class=\"o\">(</span><span class=\"n\">20</span><span class=\"o\">);</span><span class=\"c1\">//美美哒20岁\n</span><span class=\"c1\"></span>\t\t<span class=\"c1\">//读取年龄的值：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"na\">duQuAge</span><span class=\"o\">());</span>\t\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>这种方式，达到了设置，读取的目的，那么问题来了，你现在再说我是36岁可以吗？可以试一下，36岁，依旧可以设置读取。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">Girl</span> <span class=\"n\">g</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Girl</span><span class=\"o\">();</span>\n\t\t<span class=\"c1\">//对年龄设置值：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"na\">sheZhiAge</span><span class=\"o\">(</span><span class=\"n\">36</span><span class=\"o\">);</span><span class=\"c1\">//我老了\n</span><span class=\"c1\"></span>\t\t<span class=\"c1\">//读取年龄的值：\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"na\">duQuAge</span><span class=\"o\">());</span>\t\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>恩？可以设置读取？？？那折腾这么多干嘛？</p><p>答：之所以这样做，是因为，这个设置读取的方法是我给你提供的，那么既然是我提供的，我怎么写就是我的事了！那么我就可以加限制了！我将其中的设置年龄的方法改为：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//设置年龄的值\n</span><span class=\"c1\"></span>\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">sheZhiAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">age</span><span class=\"o\">&gt;=</span><span class=\"n\">30</span><span class=\"o\">){</span>\n\t\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span><span class=\"o\">=</span><span class=\"n\">18</span><span class=\"o\">;</span>\n\t\t<span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n\t\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n</code></pre></div><p>加了上面的限制，你再问是不是36岁的时候 ，那么返回的值就是18了！</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"405\" src=\"https://pic4.zhimg.com/v2-e3f88fe9c6e23c3aaa8d1eadf0d1b073_b.jpg\" data-size=\"normal\" data-rawwidth=\"657\" class=\"origin_image zh-lightbox-thumb\" width=\"657\" data-original=\"https://pic4.zhimg.com/v2-e3f88fe9c6e23c3aaa8d1eadf0d1b073_r.jpg\"/></noscript><img data-rawheight=\"405\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;657&#39; height=&#39;405&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"657\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"657\" data-original=\"https://pic4.zhimg.com/v2-e3f88fe9c6e23c3aaa8d1eadf0d1b073_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e3f88fe9c6e23c3aaa8d1eadf0d1b073_b.jpg\"/></figure><p>那么上面，我们完成了对age属性的封装，终于明白 ，啥叫封装了。</p><p>总结一句话，你访问的有限制，不随意，对你来说，都是封装！</p><p>那么在实际写代码过程中，我们对于上述的两个设置值，读取值的方法，我们一般都定义为set,get方法：</p><div class=\"highlight\"><pre><code class=\"language-text\">public class Girl {\n\tprivate int age;\n\t//设置年龄的值\n\tpublic void setAge(int age) {\n\t\tif(age&gt;=30){\n\t\t\tthis.age=18;\n\t\t}else{\n\t\t\tthis.age = age;\n\t\t}\n\t}\n\t//读取年龄的值\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n}\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>另外说一嘴，有些人常说，private就是封装。这句话是错误的。上面我们虽然用到了private，但是private只是我们加的一个修饰符，只是用来控制权限的其中一种方式而已，稍后有机会我再更新java中的权限修饰符！bye~</p>", 
            "topic": [
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "面向对象编程", 
                    "tagLink": "https://api.zhihu.com/topics/19569910"
                }, 
                {
                    "tag": "面向对象分析与设计", 
                    "tagLink": "https://api.zhihu.com/topics/20035116"
                }
            ], 
            "comments": [
                {
                    "userName": "雪野百香里", 
                    "userLink": "https://www.zhihu.com/people/0d1bb1dfbd22c7bb7b7d2a2789e76f6d", 
                    "content": "<p>牛批啊,36岁的老姐</p><p><br></p>", 
                    "likes": 4, 
                    "childComments": []
                }, 
                {
                    "userName": "just", 
                    "userLink": "https://www.zhihu.com/people/b4005563f4c34e3b507d64ddeeec853b", 
                    "content": "<p>一楼说得对</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "TOGETHER", 
                    "userLink": "https://www.zhihu.com/people/4b308902ad6a7b8bd4d1eb6c09190b7c", 
                    "content": "<p>666</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "AA丶勿忘初心", 
                    "userLink": "https://www.zhihu.com/people/f696236c89bb6579b72c351d9f382587", 
                    "content": "<p>目测，还不到36，最多33！！！！！！！！！！！</p><p><br></p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "师太别追了", 
                    "userLink": "https://www.zhihu.com/people/987bc7ba2fb51dfc861a88834e9e63fe", 
                    "content": "这个老师皮的很，要我回家跟我妈说晚上要给我们讲Java", 
                    "likes": 3, 
                    "childComments": []
                }, 
                {
                    "userName": "大帝", 
                    "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                    "content": "顶楼", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "岩礁蓑鲉", 
                    "userLink": "https://www.zhihu.com/people/b7ac711952facd7cdef847a31b8e7345", 
                    "content": "神他妈shezhiage和duquage", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "大帝", 
                            "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                            "content": "你是没看到底下的setAge？？", 
                            "likes": 0, 
                            "replyToAuthor": "岩礁蓑鲉"
                        }, 
                        {
                            "userName": "岩礁蓑鲉", 
                            "userLink": "https://www.zhihu.com/people/b7ac711952facd7cdef847a31b8e7345", 
                            "content": "看到了，哈哈哈，就觉得shezhiage很好玩😂😂", 
                            "likes": 0, 
                            "replyToAuthor": "大帝"
                        }
                    ]
                }, 
                {
                    "userName": "Xcode耗子", 
                    "userLink": "https://www.zhihu.com/people/8d69779fc5d36b2886e460efcbd60837", 
                    "content": "<p>并不是人造革，而是真的皮啊</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "饼哥威武大快乐", 
                    "userLink": "https://www.zhihu.com/people/ee73181e3c9223a844a925a7ea19e363", 
                    "content": "舒服", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Winston.Li", 
                    "userLink": "https://www.zhihu.com/people/a565bcd91f394087707d6d07b500c5d6", 
                    "content": "<p>稳</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "新兵甲乙丙丁戊己庚辛", 
                    "userLink": "https://www.zhihu.com/people/12180b7632209ca0bc203b54797c2730", 
                    "content": "<p>都有腰间盘 为何你这么突出</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "银子", 
                    "userLink": "https://www.zhihu.com/people/3a82c7acff538ab9bd4f6a30e09b3780", 
                    "content": "了解了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "芙蓉王的忧伤", 
                    "userLink": "https://www.zhihu.com/people/c1a0042a2daefa0e6db470707c4dbfc1", 
                    "content": "你的个性签名 应该是 人美声甜技术强  😁", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "By yourself", 
                    "userLink": "https://www.zhihu.com/people/073f0456296fd9f782c29688aa8b61a4", 
                    "content": "哈哈哈  居然在这里碰到珊姐  顶一个", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bjsxtjin", 
                    "userLink": "https://www.zhihu.com/people/930a12931ac2525ffc84ba6d36790da0", 
                    "content": "<p>嘿嘿，珊珊老师我有setAccessible(true)</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "大鲨鱼", 
                    "userLink": "https://www.zhihu.com/people/b5f8e206d717fb24ab51ad89b064d9f8", 
                    "content": "我反射给你设置age", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gaara", 
                    "userLink": "https://www.zhihu.com/people/b189e3af29203a1dde8eac700a3f8cb4", 
                    "content": "跟sei俩呢。噗嗤", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "elgna", 
                    "userLink": "https://www.zhihu.com/people/dcb4ecd2541a56bcd3818e11a237c57f", 
                    "content": "陈独秀，又学习了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Insomnia", 
                    "userLink": "https://www.zhihu.com/people/ee59e9734344ffbed816870e4eb178f2", 
                    "content": "关注了 这36岁大姐太皮了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "雪晋", 
                    "userLink": "https://www.zhihu.com/people/f1f321d9e0442594cc2f2a546d3c5f82", 
                    "content": "这个比喻无敌了！", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "雪野百香里", 
                    "userLink": "https://www.zhihu.com/people/0d1bb1dfbd22c7bb7b7d2a2789e76f6d", 
                    "content": "<p>牛批啊,36岁的老姐</p><p><br></p>", 
                    "likes": 4, 
                    "childComments": []
                }, 
                {
                    "userName": "just", 
                    "userLink": "https://www.zhihu.com/people/b4005563f4c34e3b507d64ddeeec853b", 
                    "content": "<p>一楼说得对</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "TOGETHER", 
                    "userLink": "https://www.zhihu.com/people/4b308902ad6a7b8bd4d1eb6c09190b7c", 
                    "content": "<p>666</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "AA丶勿忘初心", 
                    "userLink": "https://www.zhihu.com/people/f696236c89bb6579b72c351d9f382587", 
                    "content": "<p>目测，还不到36，最多33！！！！！！！！！！！</p><p><br></p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "师太别追了", 
                    "userLink": "https://www.zhihu.com/people/987bc7ba2fb51dfc861a88834e9e63fe", 
                    "content": "这个老师皮的很，要我回家跟我妈说晚上要给我们讲Java", 
                    "likes": 3, 
                    "childComments": []
                }, 
                {
                    "userName": "大帝", 
                    "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                    "content": "顶楼", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "岩礁蓑鲉", 
                    "userLink": "https://www.zhihu.com/people/b7ac711952facd7cdef847a31b8e7345", 
                    "content": "神他妈shezhiage和duquage", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "大帝", 
                            "userLink": "https://www.zhihu.com/people/f3f2ce4fd61d06a1b4cfe7a25cb49f91", 
                            "content": "你是没看到底下的setAge？？", 
                            "likes": 0, 
                            "replyToAuthor": "岩礁蓑鲉"
                        }, 
                        {
                            "userName": "岩礁蓑鲉", 
                            "userLink": "https://www.zhihu.com/people/b7ac711952facd7cdef847a31b8e7345", 
                            "content": "看到了，哈哈哈，就觉得shezhiage很好玩😂😂", 
                            "likes": 0, 
                            "replyToAuthor": "大帝"
                        }
                    ]
                }, 
                {
                    "userName": "Xcode耗子", 
                    "userLink": "https://www.zhihu.com/people/8d69779fc5d36b2886e460efcbd60837", 
                    "content": "<p>并不是人造革，而是真的皮啊</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "饼哥威武大快乐", 
                    "userLink": "https://www.zhihu.com/people/ee73181e3c9223a844a925a7ea19e363", 
                    "content": "舒服", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Winston.Li", 
                    "userLink": "https://www.zhihu.com/people/a565bcd91f394087707d6d07b500c5d6", 
                    "content": "<p>稳</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "新兵甲乙丙丁戊己庚辛", 
                    "userLink": "https://www.zhihu.com/people/12180b7632209ca0bc203b54797c2730", 
                    "content": "<p>都有腰间盘 为何你这么突出</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "银子", 
                    "userLink": "https://www.zhihu.com/people/3a82c7acff538ab9bd4f6a30e09b3780", 
                    "content": "了解了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "芙蓉王的忧伤", 
                    "userLink": "https://www.zhihu.com/people/c1a0042a2daefa0e6db470707c4dbfc1", 
                    "content": "你的个性签名 应该是 人美声甜技术强  😁", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "By yourself", 
                    "userLink": "https://www.zhihu.com/people/073f0456296fd9f782c29688aa8b61a4", 
                    "content": "哈哈哈  居然在这里碰到珊姐  顶一个", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bjsxtjin", 
                    "userLink": "https://www.zhihu.com/people/930a12931ac2525ffc84ba6d36790da0", 
                    "content": "<p>嘿嘿，珊珊老师我有setAccessible(true)</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "大鲨鱼", 
                    "userLink": "https://www.zhihu.com/people/b5f8e206d717fb24ab51ad89b064d9f8", 
                    "content": "我反射给你设置age", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gaara", 
                    "userLink": "https://www.zhihu.com/people/b189e3af29203a1dde8eac700a3f8cb4", 
                    "content": "跟sei俩呢。噗嗤", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "elgna", 
                    "userLink": "https://www.zhihu.com/people/dcb4ecd2541a56bcd3818e11a237c57f", 
                    "content": "陈独秀，又学习了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Insomnia", 
                    "userLink": "https://www.zhihu.com/people/ee59e9734344ffbed816870e4eb178f2", 
                    "content": "关注了 这36岁大姐太皮了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "雪晋", 
                    "userLink": "https://www.zhihu.com/people/f1f321d9e0442594cc2f2a546d3c5f82", 
                    "content": "这个比喻无敌了！", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_199906208"
}
