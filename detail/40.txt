{
    "title": "南京前端专栏", 
    "description": "每周不定期更新前端内容", 
    "followers": [
        "https://www.zhihu.com/people/nan-you-xiao-ba-wang", 
        "https://www.zhihu.com/people/james-45-99", 
        "https://www.zhihu.com/people/xiao-bai-24-52-83-40", 
        "https://www.zhihu.com/people/zhi-jian-xing-guang-11", 
        "https://www.zhihu.com/people/fanshuzero", 
        "https://www.zhihu.com/people/smart-61-95", 
        "https://www.zhihu.com/people/feng-jian-da", 
        "https://www.zhihu.com/people/wang-yang-46-24", 
        "https://www.zhihu.com/people/shao-xiao-ming-23", 
        "https://www.zhihu.com/people/zee-24-96", 
        "https://www.zhihu.com/people/ha-lou-8-41-92", 
        "https://www.zhihu.com/people/cccc-83-16-15", 
        "https://www.zhihu.com/people/huang-dong-peng", 
        "https://www.zhihu.com/people/ai-ya-ding-ya", 
        "https://www.zhihu.com/people/yuan-dian-yin-li", 
        "https://www.zhihu.com/people/mashin-83", 
        "https://www.zhihu.com/people/mao-mi-78-36-78", 
        "https://www.zhihu.com/people/liwei-xie-50", 
        "https://www.zhihu.com/people/sun-zheng-bin", 
        "https://www.zhihu.com/people/sailingcai", 
        "https://www.zhihu.com/people/ji-xu-shan-31", 
        "https://www.zhihu.com/people/he-wen-63-8", 
        "https://www.zhihu.com/people/topcoder", 
        "https://www.zhihu.com/people/zi-mo-shou", 
        "https://www.zhihu.com/people/li-wen-hao-48-58", 
        "https://www.zhihu.com/people/wang-xi-ping-30", 
        "https://www.zhihu.com/people/cwd9914", 
        "https://www.zhihu.com/people/30lao-diao", 
        "https://www.zhihu.com/people/jp928-67", 
        "https://www.zhihu.com/people/zhu-shi-jie-99", 
        "https://www.zhihu.com/people/li-cen-54-52", 
        "https://www.zhihu.com/people/alanzeng-69", 
        "https://www.zhihu.com/people/bo-la-tu-chun-tian", 
        "https://www.zhihu.com/people/a-bin-ge-79", 
        "https://www.zhihu.com/people/xu-qiang-29-78", 
        "https://www.zhihu.com/people/longtengdao", 
        "https://www.zhihu.com/people/typeR32", 
        "https://www.zhihu.com/people/loryhuang", 
        "https://www.zhihu.com/people/da-jie-zi-41", 
        "https://www.zhihu.com/people/liu-tian-zeng-87", 
        "https://www.zhihu.com/people/2kda-lao", 
        "https://www.zhihu.com/people/lai-ge-tu-zi", 
        "https://www.zhihu.com/people/IDforHYIT", 
        "https://www.zhihu.com/people/shi-jian-hui-chong-dan-yi-qie-9", 
        "https://www.zhihu.com/people/huanggengtao", 
        "https://www.zhihu.com/people/cubesugarZhang", 
        "https://www.zhihu.com/people/shao-hua-wu-liu-nian-17", 
        "https://www.zhihu.com/people/lan-lan-wan", 
        "https://www.zhihu.com/people/jehasdsama", 
        "https://www.zhihu.com/people/li-zhi-yan-2", 
        "https://www.zhihu.com/people/yi-yie-wu-qing-feng", 
        "https://www.zhihu.com/people/di-qia-nong-2", 
        "https://www.zhihu.com/people/bailaoda", 
        "https://www.zhihu.com/people/ma-rocky-55", 
        "https://www.zhihu.com/people/qi-tun-wan-li-ru-hu-86", 
        "https://www.zhihu.com/people/yang-chao-jie-67", 
        "https://www.zhihu.com/people/wxx1990", 
        "https://www.zhihu.com/people/foxcpu", 
        "https://www.zhihu.com/people/mao.huang", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/noeltoby", 
        "https://www.zhihu.com/people/xiao-guang-ge-99-88", 
        "https://www.zhihu.com/people/ha-li-hai-dao-chuan", 
        "https://www.zhihu.com/people/wei-shi-tai-lang-9", 
        "https://www.zhihu.com/people/NanCrystal", 
        "https://www.zhihu.com/people/piao-feng-bu-zhong-zhao-98", 
        "https://www.zhihu.com/people/zhaoLu-sunshine", 
        "https://www.zhihu.com/people/heywe-97", 
        "https://www.zhihu.com/people/watcher-86", 
        "https://www.zhihu.com/people/ztrywei", 
        "https://www.zhihu.com/people/li-xing-44", 
        "https://www.zhihu.com/people/dong-feng-zao-ji", 
        "https://www.zhihu.com/people/dominee-dominee", 
        "https://www.zhihu.com/people/wang-xiao-hu-27-48", 
        "https://www.zhihu.com/people/camark", 
        "https://www.zhihu.com/people/fang-kai-72-25", 
        "https://www.zhihu.com/people/zhang-cheng-11-36", 
        "https://www.zhihu.com/people/zhanba", 
        "https://www.zhihu.com/people/sparrow-pineapple", 
        "https://www.zhihu.com/people/bie-shu-zi-shen-she-ji-shi", 
        "https://www.zhihu.com/people/suteki-90", 
        "https://www.zhihu.com/people/liu-meng-yin-68", 
        "https://www.zhihu.com/people/li-mou-mou-94-97", 
        "https://www.zhihu.com/people/rusty-nail", 
        "https://www.zhihu.com/people/du-yu-95-12", 
        "https://www.zhihu.com/people/insight-jing", 
        "https://www.zhihu.com/people/you-meng-xiang-de-ma-nong-77", 
        "https://www.zhihu.com/people/John-Titor-bak", 
        "https://www.zhihu.com/people/SecondaryMarquis", 
        "https://www.zhihu.com/people/123456-36-71", 
        "https://www.zhihu.com/people/julytian", 
        "https://www.zhihu.com/people/shangcloud", 
        "https://www.zhihu.com/people/si-jia-29", 
        "https://www.zhihu.com/people/lin-shui-zhao-hua-96", 
        "https://www.zhihu.com/people/shengyin-zhu", 
        "https://www.zhihu.com/people/powertyuui", 
        "https://www.zhihu.com/people/xie-xiao-gui", 
        "https://www.zhihu.com/people/swk-64-54", 
        "https://www.zhihu.com/people/nuan-feng-ru-ni-54", 
        "https://www.zhihu.com/people/mo-shang-hua-kai-27-75", 
        "https://www.zhihu.com/people/libin-sui", 
        "https://www.zhihu.com/people/jia-jin-peng-68", 
        "https://www.zhihu.com/people/lai-zi-huo-xing-de-di-qiu-ren-41", 
        "https://www.zhihu.com/people/hello-86-53", 
        "https://www.zhihu.com/people/bingfurong"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/89813865", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 63, 
            "title": "对前端小白的告白", 
            "content": "<p>写这篇文章的目的，就是吸粉吸赞。我一直在思索，为什么我写的东西没有人看，后来意识到不仅水平菜，而且还没有交心。怎么理解这个”交心“，我记得一个场景，《纸牌屋》中弗兰克当时已经是副总统了，但是却遭到了总统的质疑，被怀疑一直在背后搞事情，弗兰克在妻子的指点下，把“整颗心”都掏给了总统，扭转劣势，最终登顶成功。虽然这个例子中弗兰克掏心的行为是一种欺骗，但是交心确实更容易得到认可。我将分享前端自学经验，向广大前端初学者”告白“。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a58f8a7dac6a13c87ce5704d71dd07d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"268\" data-rawheight=\"397\" class=\"content_image\" width=\"268\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;268&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"268\" data-rawheight=\"397\" class=\"content_image lazy\" width=\"268\" data-actualsrc=\"https://pic1.zhimg.com/v2-a58f8a7dac6a13c87ce5704d71dd07d4_b.jpg\"/></figure><h3>自我介绍</h3><p>我现在在小米的MIUI团队。我2015年年开始接触前端，是Vue诞生的同一年，但是我当时在一家医疗公司实习，那是谁都能进的公司，别说Vue了，就是Jquery也是很少用，平时基本扣扣图，偶尔需要用一下轮播组件，我还记得工作中的第一次分享，使用JS做了一个倒计时的时钟，那完全是抄着网上的实现，自己再硬理解，还好没人为难我，而我当时也没什么想法，就呆到了毕业。</p><p>毕业了，去了一家创业公司面试，此前已知道自己的技术很菜，所以会每天晚上看JS和Jquery的视频，我还记得翁恺老师的JavaScript视频，<a href=\"https://link.zhihu.com/?target=https%3A//study.163.com/course/courseMain.htm%3FcourseId%3D195001\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">视频地址</a>，非常适合入门看。当然没有JS实战经验，笔试题的编程题我都没有答出来，但是很多智力题都答出来了，因为都是经典的题目，只要有一点点数学基础，递增数字找规律，两个水壶互相倒水，最后得到一个要求的升数，最后一题是你最喜欢看的是什么电影，因为当时刚看过华尔街之狼，觉得很Cool，想也没想就写上去了，后来老板和我聊的很欢，他说创业的时候看了三次华尔街之狼，难道我是因为电影才被招进去的？随后，有一次我在网吧打团战，一个陌生电话Call过来，我打游戏的时候不喜欢别人打扰，用比较大的声音回了对方，等对方介绍一番，我才起来这是我的金主爸爸啊，愧疚之余，只剩下喜悦，挂了电话，对着5黑的兄弟，“兄弟们，今晚撸串啊，一个别跑。”创业公司老板都是能力极强的人，非常的全面，对你的要求也很高，是我前端水平的一个爆发阶段。也很感谢我的老板，以及公司书架上的书，让我知道书籍的重要性。</p><p>再然后来到了小米，从毕业到进入小米，大概用了2年半，走了很多弯路，当然有些路是正确的，下面将分享这些经验。在现在公司我唯一怕的就是大家讨论学历我是专科毕业，然后自考了本科，但是现在公司个个学历都是顶呱呱，所以学历无法弥补，我只有加倍努力。而在进入小米1年后，我已经是团队核心开发了，也是目前部门绩效最高的。真的，一个好的公司，一个好的团队，它们是会把很多好的想法落地，我觉得这是我成长最快的一年，当然离不开之前的积累。我可以放慢脚步，打磨基础，修炼内功，扩展横向的能力，目前处于很nice的状态。同时我的自学之路多多少少可以为大家正在自学的人借鉴，因为我体会过无助，无论是学历还是编程水平。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-585fab4406be722e17e9485020250c41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"574\" data-rawheight=\"1204\" class=\"origin_image zh-lightbox-thumb\" width=\"574\" data-original=\"https://pic2.zhimg.com/v2-585fab4406be722e17e9485020250c41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;574&#39; height=&#39;1204&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"574\" data-rawheight=\"1204\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"574\" data-original=\"https://pic2.zhimg.com/v2-585fab4406be722e17e9485020250c41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-585fab4406be722e17e9485020250c41_b.jpg\"/></figure><p>这篇文章我认为是最好的介绍MIUI11文章。</p><a href=\"https://link.zhihu.com/?target=http%3A//www.miui.com/%3Ffrom%3Dtimeline%26isappinstalled%3D0\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-2decbebec838315298818bb9b66a85fc_ipico.jpg\" data-image-width=\"516\" data-image-height=\"512\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MIUI11</a><h3>方法论</h3><p>我面试过一些实习和正式生，他们中自学者占大多数，所以前端是自学者的天堂？前端实际工作中使用到的计算机理论基础相关的内容比较少，所以自学者就可以针对面试题，JS本身练习。有很多1年左右的自学者，它们的水平可以达到3年左右的工作者，他们形成了自己的一套自学体系，不断完善，这个差距还会逐渐拉大。下面分享一下我的方法论。</p><ul><li>合理的学习周期</li></ul><p>现在有很多机构3个月培养一个前端，里面的学生大多数是被迫性的接受知识，光理论的东西就要学2个多月，而且很容易学了后面忘了前面。而且三个月真的只够学习一些概念的东西。我觉得6个月最好，9个月或者1年太久，容易让自学者失去方向，如果money每天都是支出状态，会产生焦虑心理，也会影响学习。6个月可以前几个月学习理论和简单编码，最后一两个月以实战项目收尾，毕竟编程是实践类工作。</p><ul><li>基础出发</li></ul><p>大家也知道这个道理，一上来学习困难的东西，很容易把信心击垮，自学中，信心是我们的基石，我们一直坚信有付出就有收获。还有一个更重要的原因，先听我说一个最近的事，上周我的同事分享了关于红黑树的PPT，对于前端，红黑树简直是噩梦，听过，完全不知道内部原理，你可以也听过它相关的东西，左旋，右旋，颜色翻转，每次听到左旋就会想到一个减肥产品，但是当同事用了40分钟左右仔细讲解了红黑树的由来，以及怎么实现红黑树。那一刻我顿悟了，不仅是我掌握了红黑树，它就是2-3平衡数的一种实现。也掌握了一个规律，所有困难的概念都是由简单的原理演进而来，再加上一些原子性的操作（左旋，右旋等）组合，最终形成一套你看不懂的组合拳。所以难题的组成部分一定全部来自基础。</p><ul><li>故不积跬步，无以至千里</li></ul><p>坚持，这是最难的部分，处理自学内容中的难题已经够让人头疼了，还要面对生活杂事、搞笑视频的诱惑。我觉得这取决于个人，种瓜得瓜种豆得豆，我身边很多朋友在自学道路上都已经瓜熟蒂落了，而很少有人得豆，因为未得豆的人，大概率也懒得买种子。坚持可能太困难了，但是我们可以合理的利用时间。推荐一本关于时间掌控的书，《为什么精英都是时间控》，如何合理分配时间，以及多出的时间反哺工作，形成滚雪球效应。</p><ul><li>营造良好的学习氛围</li></ul><p>可以去上培训班，或者三五成群，建立一个学习小组，也可以加入一些qq群，共同学习。其实看教学视频和上培训班差不多，如果你觉得在家看视频没有效率，完全可以找个咖啡馆或者图书馆看，学习的时候仪式感很重要。我起初是通过一个qq群学习的，大概20人的小群，真的精英小群，3年前我们都是小菜鸟，而现在我在小米，他们有在阿里的，有在美国苹果公司的，当然不是卖手机的，是程序员。找到志同道合的，你会发现前方的道路不仅不孤单，并且有时候也会push自己跟上他们。</p><h3>实践</h3><p>这应该是本文中最重要的部分，知乎大V谢春霖在《认知红利》中说到，只有被转化成规律的经验才有意义，我帮助了几个朋友成功转行，他们有在移动，有在工商银行，也有在小米的。我也经常和自学的人一起探讨学习经验，也看了网上很多成功转行的大佬的经历。所以我总结了一些规律。从零基础开始，有部分经验的可以直接跳过相应的部分。</p><p>前端基础应该是包含HTML+CSS+JS，当然包括一些辅助工具，比如编辑器VSCode，在线练习工具，w3school。笔记工具，有道云，可以随时随地记录疑问和心得。奇妙清单，非常好用的Todo工具。学习网站有慕课网，网易有道云，还有极客时间，质量都很高但是不太适合初学者。</p><h3>HTML</h3><p>HTML是一种偏友好的语言，可以直接在w3school上直接学习，</p><a href=\"https://link.zhihu.com/?target=https%3A//www.w3school.com.cn/example/html_examples.asp\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTML 实例</a><h3>CSS</h3><p>其实大多数人，包括我都没有系统性地学过CSS，都是现查现用，实际上理解它的原理和模型，能让你更快更高效地切图（构建页面）。以后同事看到了你写的CSS，哇这个人素养好高，CSS写那么漂亮，而不是，这个人CSS写的很坨屎一样，定义一大堆错误、无用的属性，尽管它能正常执行（run），CSS就是这么神奇，你不完整掌握它，你就会一直被它玩弄。</p><p>还是首推w3school的教程，我没有偷懒哦。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.w3school.com.cn/css/index.asp\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CSS 教程</a><p>还有慕课网这个教程，讲得非常详细易懂。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.imooc.com/learn/9\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-3e6cb08f03397d62cf9b16c8c7afd9dd_ipico.jpg\" data-image-width=\"216\" data-image-height=\"216\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTML+CSS基础教程-慕课网</a><p>平时有什么CSS疑难杂症，直接百度或谷歌搜<code>CSS关键字 + 张鑫旭</code>，如果搜索<code>盒子模型 张鑫旭</code>，就出来他的文章了，我擦，翻开一看是2010年写的文章，这文章有味道。这哥们专注研究CSS十年，今年还在北京的GMTC上分享自己的十年经验。还写过一本书《CSS世界》，我没看过，但是很多网友推荐。</p><p>想进阶的话，可以看《CSS揭秘》，作者是W3C CSS工作组特邀专家，设计CSS语言的委员之一，中文版也翻译的很好。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ed5a3596654b5bc947f418d5b1619c51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"970\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-ed5a3596654b5bc947f418d5b1619c51_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;970&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"970\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-ed5a3596654b5bc947f418d5b1619c51_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ed5a3596654b5bc947f418d5b1619c51_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这部分最重要的还是实战，下面这个视频涵盖了CSS大部分的场景，而电商也是常见的开发需求。<br/></p><a href=\"https://link.zhihu.com/?target=https%3A//www.imooc.com/learn/100\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-3e6cb08f03397d62cf9b16c8c7afd9dd_ipico.jpg\" data-image-width=\"216\" data-image-height=\"216\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电商网站开发视频教程-慕课网</a><h3>JS</h3><p>JS其实是最难的一部分，不仅因为它是更系统的语言，而且它涉及的概念杂而广。目前，大多数公司都需要你掌握JS的一个框架，什么Jquery，React，Angular，Koa，我们也都不管，就忠于Vue，只学Vue技术相关的内容，跟紧了，千万不要被其他概念抓跑。我们的终点是全面掌握Vue，包括它的作者尤雨溪。</p><p>我们先来拆解一下如何学习，我们分成四个部分</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-87ddcb56ea71e88d8d671ab5f1eed3a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"677\" class=\"origin_image zh-lightbox-thumb\" width=\"707\" data-original=\"https://pic3.zhimg.com/v2-87ddcb56ea71e88d8d671ab5f1eed3a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;707&#39; height=&#39;677&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"677\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"707\" data-original=\"https://pic3.zhimg.com/v2-87ddcb56ea71e88d8d671ab5f1eed3a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-87ddcb56ea71e88d8d671ab5f1eed3a2_b.jpg\"/></figure><ul><li>JS基础</li></ul><p>JS光看w3school视频肯定不够，但是作为起点非常合适。视频，首推翁恺老师的JavaScript视频，非常不推荐在JS水平还很菜的时候读《JavaScript高级程序设计》，它是每一个前端工作者都需要读的书，但是前期读受益不大，而且各种概念会让你头晕目眩。比如阮一峰的《ECMAScript 6 入门》比较适合初学者，它是开源的，可以在网上直接阅读PDF，<a href=\"https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://es6.ruanyifeng.com</a>。</p><a href=\"https://link.zhihu.com/?target=https%3A//study.163.com/course/courseMain.htm%3FcourseId%3D195001\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JavaScript - 网易云课堂</a><p class=\"ztext-empty-paragraph\"><br/></p><p>当然如果你觉得自己基础已经很好了，就可以读《JavaScript高级程序设计》，《JavaScript 语言精粹》，《你不知道JavaScript》，《JavaScript设计模式与开发实践》。我有部分书籍的pdf，欢迎私聊。</p><ul><li>Vue项目搭建</li></ul><p>目前Vue的版本是2，所以你可以放心学习2的内容，而且明年发布的Vue3也基本支持所有的Vue2语法，所以不用担心。安装推荐直接学习官网例子</p><a href=\"https://link.zhihu.com/?target=https%3A//cn.vuejs.org/v2/guide/installation.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cf23526f451784ff137f161b8fe18d5a_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">安装 — Vue.js</a><ul><li>Vue语法</li></ul><p>也推荐直接使用官方例子</p><a href=\"https://link.zhihu.com/?target=https%3A//cn.vuejs.org/v2/guide/%23Vue-js-%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cf23526f451784ff137f161b8fe18d5a_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">介绍 — Vue.js</a><ul><li>Vue实战</li></ul><p>非常推荐黄毅老师的视频，转行的几个朋友都非常推荐，他的视频能让你体系化地构建一个项目，我觉得它的视频内容可以作为官方首推。我没有打广告，这个视频需要花钱。你当然可以看慕课网其他的免费视频。</p><a href=\"https://link.zhihu.com/?target=https%3A//coding.imooc.com/class/107.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-3e6cb08f03397d62cf9b16c8c7afd9dd_ipico.jpg\" data-image-width=\"216\" data-image-height=\"216\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vue.js高级实战-开发移动端音乐App-慕课网实战课程</a><a href=\"https://link.zhihu.com/?target=https%3A//coding.imooc.com/class/228.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-3e6cb08f03397d62cf9b16c8c7afd9dd_ipico.jpg\" data-image-width=\"216\" data-image-height=\"216\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vue.js 源码全方位深入解析-慕课网实战</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-464775028010edad6e6b9d8e0bdec3dd_b.jpg\" data-size=\"normal\" data-rawwidth=\"1606\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"1606\" data-original=\"https://pic2.zhimg.com/v2-464775028010edad6e6b9d8e0bdec3dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1606&#39; height=&#39;840&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1606\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1606\" data-original=\"https://pic2.zhimg.com/v2-464775028010edad6e6b9d8e0bdec3dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-464775028010edad6e6b9d8e0bdec3dd_b.jpg\"/><figcaption>慕课网截图</figcaption></figure><a href=\"https://link.zhihu.com/?target=https%3A//www.imooc.com/learn/935\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-3e6cb08f03397d62cf9b16c8c7afd9dd_ipico.jpg\" data-image-width=\"216\" data-image-height=\"216\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vue+Webpack打造todo应用-慕课网</a><h3>进阶</h3><p>知乎也有很多高赞的关于自学的回答，</p><a href=\"https://www.zhihu.com/question/19834302/answer/13108148\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">零基础的前端开发初学者应如何系统地学习？</a><p>英语好的，起点会更高，可以看这个同学的自学经历。</p><a href=\"https://zhuanlan.zhihu.com/p/46401520\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-c059115e8045d64421282e7c531d0f80_180x120.jpg\" data-image-width=\"480\" data-image-height=\"360\" class=\"internal\">「已注销」：我如何零基础转行成为一个自信的前端</a><p>前端面试题，都是github高赞。</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-3208a577224f9ea9b4d51a18696e181e_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">markyun/My-blog</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/h5bp/Front-end-Developer-Interview-Questions\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Front-end Job Interview Questions</a><p>计算机网络相关的，最近刚看完李兵老师的《浏览器工作原理与实战》，既能知道浏览器的工作原理，中间也穿插了很多网络相关的知识，很赞。书籍推荐看《图解HTTP》，毅力强的可以看《计算机网络自顶向下方法》。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cf1016d7e7e1d8873520642ddbb38732_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-cf1016d7e7e1d8873520642ddbb38732_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1920&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-cf1016d7e7e1d8873520642ddbb38732_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cf1016d7e7e1d8873520642ddbb38732_b.jpg\"/></figure><p>另外算法相关的推荐极客时间王争老师的《数据结构与算法之美》。我整理过一个笔记，入门可以看一看，</p><a href=\"https://zhuanlan.zhihu.com/p/46082463\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">Peter Cheng：《数据结构与算法之美》笔记</a><p>计算机系统，如果你都已经要学计算机系统了，我相信你会去啃《深入理解计算机系统》。</p><p>所有的自学手段，都推荐看视频，视频容易集中精力，而且可以能看到实操效果，这就好比，老师敲出了“Hello World”，你也会下意识的认为自己能敲出“Hello World”。书籍虽然更全面，但是吸收慢，适合补充学习。</p><h3>我希望你</h3><p>我希望你站在巨人的肩旁上，你的顿悟可能只是别人的基本功。学会抱团取暖，用合适的方式解决问题，自行解决永远是第一途径，百度谷歌能让你不求于人，这些都无法解决时，可以通过QQ群或者知乎提问，或者知乎私聊，有钱的还可以付费咨询。学会与自己沟通，学前端，我能行。</p><p>最后希望收获大量点赞，大量关注。欢迎私聊。</p><hr/><p>写作时间：20191102</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "可乐小丸子", 
                    "userLink": "https://www.zhihu.com/people/3e2ccfb8c1bdb86ba4c524c1c66fa0bd", 
                    "content": "赞", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gakki", 
                    "userLink": "https://www.zhihu.com/people/95ec0bdd44682f29d16b2460ace4e00f", 
                    "content": "赞赞赞，作者大大写的吼吼～", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<a class=\"comment_sticker\" href=\"https://pic2.zhimg.com/v2-fa420fb01533452e9d5f021c52dc6cc5.gif\" data-sticker-id=\"980770233090535424\"> [超得意]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "Gakki"
                        }
                    ]
                }, 
                {
                    "userName": "这是个幌子", 
                    "userLink": "https://www.zhihu.com/people/74579f421be2a8765e3f8ee1637ff087", 
                    "content": "赞！", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Jerry Cha", 
                    "userLink": "https://www.zhihu.com/people/063af460cbe420767f89d62891b07afd", 
                    "content": "红黑树。。。想起为了写作业自行推到avl树左旋后的平衡因子更新公式[捂脸]红黑树直接就死在想象上了", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "如果有人花1个小时和你认真的讲解，你也能懂[捂嘴]", 
                            "likes": 0, 
                            "replyToAuthor": "Jerry Cha"
                        }
                    ]
                }, 
                {
                    "userName": "温馨又从容", 
                    "userLink": "https://www.zhihu.com/people/f03ca322d5b26a5c2a5cb9bc022d2d2a", 
                    "content": "<p>666啊</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "mjy", 
                    "userLink": "https://www.zhihu.com/people/c9204d4ec0715b95005bbf64db4229cf", 
                    "content": "写得真好", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "谢谢[害羞]", 
                            "likes": 0, 
                            "replyToAuthor": "mjy"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88767748", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 10, 
            "title": "IntersectionObserver带来X%的性能提升", 
            "content": "<h2>前言</h2><p>广告打点和图片懒加载是两个非常常见的需求，最简单的实现方式通过监听scroll事件，但是大家都知道scroll事件的监听回调是同步执行的，这样就会影响JS主线程的UI渲染。而我们的主角IntersectionObserver即将登场。文章里用observer代替IntersectionObserver。</p><p>首先来一段官方宣言（MDN），</p><blockquote> Intersection Observer API提供了一种异步观察目标元素与祖先元素或者顶级文档viewport的交集中的变化的方法。<br/> </blockquote><p>重点：<b>异步</b>，<b>交集</b>，<b>变化</b>。</p><h3>用途</h3><p>再来一段官方宣言（MDN）介绍它的用途。如果大家对我引用官方描述不满意的话，这里有地址可以直接查看，<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Intersection Observer API</a></p><ul><li>当页面滚动时，懒加载图片或其他内容。</li><li>实现“可无限滚动”网站，也就是当用户滚动网页时直接加载更多内容，无需翻页。</li><li>为计算广告收益，检测其广告元素的曝光情况。</li><li>根据用户是否已滚动到相应区域来灵活开始执行任务或动画。</li></ul><h3>用法</h3><p>它的用法也很简单。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">callback</span> <span class=\"o\">=</span> <span class=\"nx\">entries</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>  \n<span class=\"c1\">// ...  \n</span><span class=\"c1\"></span><span class=\"p\">};</span> \n \n<span class=\"k\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  \n  <span class=\"nx\">root</span><span class=\"o\">:</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#scroll&#39;</span><span class=\"p\">),</span>\n  <span class=\"nx\">rootMargin</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0px&#39;</span><span class=\"p\">,</span>  \n  <span class=\"nx\">threshold</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  \n<span class=\"p\">};</span>  \n\n<span class=\"k\">const</span> <span class=\"nx\">observer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">IntersectionObserver</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>  \n\n<span class=\"k\">const</span> <span class=\"nx\">ele</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.img&#39;</span><span class=\"p\">);</span>  \n\n<span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nx\">observe</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"p\">);</span> \n</code></pre></div><ul><li>root 目标元素所在的容器节点，如果不指定根节点，默认文档为根节点。</li><li>rootMargin 围绕根元素的边距，类似于css的margin属性。注意这个单位为px</li><li>threshold 相交的比例，既可以是一个数字也可以是一个数组。取值在0-1之间。</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">callback</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">entries</span><span class=\"p\">,</span> <span class=\"nx\">observer</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>   \n  <span class=\"nx\">entries</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">entry</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>  \n    <span class=\"c1\">//   entry.boundingClientRect  \n</span><span class=\"c1\"></span>    <span class=\"c1\">//   entry.intersectionRatio  \n</span><span class=\"c1\"></span>    <span class=\"c1\">//   entry.intersectionRect  \n</span><span class=\"c1\"></span>    <span class=\"c1\">//   entry.isIntersecting  \n</span><span class=\"c1\"></span>    <span class=\"c1\">//   entry.rootBounds  \n</span><span class=\"c1\"></span>    <span class=\"c1\">//   entry.target  \n</span><span class=\"c1\"></span>    <span class=\"c1\">//   entry.time  \n</span><span class=\"c1\"></span>  <span class=\"p\">});</span>  \n\n<span class=\"p\">};</span>\n</code></pre></div><ul><li>entry.boundingClientRect 目标元素的区域信息，getBoundingClientRect()的返回值</li><li>entry.intersectionRatio 目标元素的可见比率</li><li>entry.intersectionRect  目标元素与根元素交叉的区域信息</li><li>entry.isIntersecting 是否进入可视区域</li><li>entry.rootBounds 根元素的矩形区域信息</li><li>entry.target 被观察的目标，是一个DOM节点</li><li>entry.time 可见性发生变化的时间,相交发生时距离页面打开时的毫秒数.精度为微秒。</li></ul><p>上面一段基本也是基本来自于MDN的解释，你问我这篇文章做了什么，对，我就是copy&amp;paste搬运工。</p><h3>可执行方法</h3><p>observe，创建一个观察对象。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#listItem&#39;</span><span class=\"p\">);</span>  \n<span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nx\">observe</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>  \n</code></pre></div><p>unobserver，取消观察对象。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nx\">unobserve</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n</code></pre></div><p>takeRecords，返回一个IntersectionObserverEntry对象数组。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">records</span> <span class=\"o\">=</span> <span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nx\">takeRecords</span><span class=\"p\">();</span> \n</code></pre></div><p>每个对象的目标元素都包含每次相交的信息。takeRecords是同步的，IntersectionObserver的回调是异步的，且IntersectionObserver的回调时间最大是100ms，所以回调会在1-100ms内执行。如果执行了异步回调，takeRecords()就会返回空数据组，如果同步先执行，则回调不执行。使用场景较少。</p><p>disconnect，终止对所有目标元素可见性变化的观察。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> \n</code></pre></div><h3>从scroll切换observer</h3><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/carrollcai/scroll-demo\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-5de72a60daec1dddad418789e28c4446_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">carrollcai/scroll-demo</a><p>上面是我写的一个Demo，scroll和observer实现相同的元素出现在视图，执行回调的效果。</p><p>视频里demo的效果。</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1171925188685312000\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"它来了\" data-poster=\"https://pic1.zhimg.com/v2-53a9ad787880e29bd80fe64c33bd4b1c.jpg\" data-lens-id=\"1171925188685312000\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-53a9ad787880e29bd80fe64c33bd4b1c.jpg\"/><span class=\"content\"><span class=\"title\">它来了<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1171925188685312000</span></span></a><p class=\"ztext-empty-paragraph\"><br/></p><p>下面我简单做一个实验，实现图片预加载。如果B距离根文档还有300px，那就与根文档形成交集。代码如下</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&#34;height: 100vh; width: 100%&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">B</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">B</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">A</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">callback</span> <span class=\"o\">=</span> <span class=\"nx\">entries</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entries</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">entry</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">entry</span><span class=\"p\">.</span><span class=\"nx\">isIntersecting</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;B相交了&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">rootMargin</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0px 0px 300px 0px&#39;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">ob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">IntersectionObserver</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n<span class=\"nx\">ob</span><span class=\"p\">.</span><span class=\"nx\">observe</span><span class=\"p\">(</span><span class=\"nx\">B</span><span class=\"p\">);</span>\n</code></pre></div><p>当observer没有设置root，默认根文档就是观察区域。如果这时你设置A为滚动区间（overflow: auto; height: 100vh），它就会形成一个独立的层，这会直接导致rootMargin失效，因为rootMargin为<code>0px 0px 300px 0px</code>时，只是将root的下边界增加300px，而A已经形成自己的BFC（这里是我的理解，有错误请指出），所以rootMargin的设置会失效。最好的办法是将A的滚动区间去掉，因为这样观察区域是根元素，js事件机制是先捕获再冒泡，在根元素上捕获和冒泡是同时发生的，等于没有这个过程，性能最优。最小的改动，是将观察区域root设置为A，这样rootMargin也能生效。我为什么要举这个例子，因为我之前想实现预加载图片，即离窗口还有一段距离时，加载图片。我设置观察区域为根元素，但是观察目标的父层又设置了滚动区域，直接导致rootMargin失效，一度让我怀疑是API有问题，最终得到知乎一位大佬（id： <a class=\"member_mention\" href=\"https://www.zhihu.com/people/49d887d9671861f21479a6cdcca81d51\" data-hash=\"49d887d9671861f21479a6cdcca81d51\" data-hovercard=\"p$b$49d887d9671861f21479a6cdcca81d51\">@紫云飞</a> ）帮助。它也写过一篇介绍observer的文章，2016年时写的。<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/ziyunfei/p/5558712.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IntersectionObserver API</a>。</p><h3>性能测试</h3><p>有一位大师说过，我懒得查名字了，<code>you can&#39;t optimize what you can&#39;t measure</code>。当然我也懒得做性能测试了，所以文章的标题，由<code>IntersectionObserver带来100%的性能提升</code>变成<code>IntersectionObserver带来X%的性能提升</code>，X可能为负。</p><h3>总结</h3><p>observer api安卓手机2016年就支持了，ios2018年底才支持，好在有<a href=\"https://link.zhihu.com/?target=https%3A//github.com/w3c/IntersectionObserver\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">polyfill</a>。我已经在生产上使用这个api，目前道路畅通，暂无阻碍。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>欢迎大家关注，目标1000，还差800，我会继续努力。</p><hr/><p>写作时间：20191027</p>", 
            "topic": [
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83613489", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 11, 
            "title": "为什么我的装饰器没别人的强？", 
            "content": "<p>装饰器（Decorator）是一种设计模式，允许向一个对象添加功能，但是又不改变其内部结构。经评论区点出，装饰器只是ES7中提案，目前处于Stage 2阶段，但是不久的将来就会变成规范。它主要用来修饰类以及类属性。</p><p>本文总共分为五个部分：</p><ul><li>修饰类</li><li>修饰类属性</li><li>三个参数</li><li>在React的应用</li><li>Babel编译</li></ul><h3>修饰类</h3><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"err\">@</span><span class=\"nx\">isPerson</span>\n<span class=\"k\">class</span> <span class=\"nx\">Person</span> <span class=\"p\">{}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">isPerson</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">isPerson</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">person1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">person1</span><span class=\"p\">.</span><span class=\"nx\">isPerson</span><span class=\"p\">);</span> <span class=\"c1\">// true\n</span></code></pre></div><p>上面有一个<code>Person</code>类，我们写了一个<code>isPerson</code>装饰器修饰它，最终我们实例化<code>Person</code>时，实例上多了<code>isPerson</code>属性。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"err\">@</span><span class=\"nx\">isPerson</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nx\">Person</span> <span class=\"p\">{}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">isPerson</span><span class=\"p\">(</span><span class=\"nx\">bol</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">isPerson</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>同样我们也可以给装饰器<code>isPerson</code>添加参数，而装饰器内容就会多一层结构，<code>return</code>对一个对象。所以装饰器是支持传参和不传参的。</p><p>本质上可以把<code>Person</code>看作一个方法，而实际上装饰器就是将方法当参数传入。在<b>Babel编译</b>我会讲解装饰器的本质。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">isPerson</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)(</span><span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">()</span> <span class=\"p\">{})</span>\n</code></pre></div><h3>修饰类属性</h3><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Person</span> <span class=\"p\">{</span>\n  <span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Peter&#39;</span><span class=\"p\">;</span>\n  <span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Cheng&#39;</span><span class=\"p\">;</span>\n\n  <span class=\"err\">@</span><span class=\"nx\">readonly</span>\n  <span class=\"nx\">realName</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span><span class=\"si\">}</span><span class=\"sb\"> </span><span class=\"si\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">readonly</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">descriptor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">descriptor</span><span class=\"p\">.</span><span class=\"nx\">writable</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">person2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">person2</span><span class=\"p\">.</span><span class=\"nx\">realName</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div><p>同时给类<code>Person</code>的<code>realName</code>方法添加了<code>readonly</code>装饰器，当输出实例的<code>realName</code>属性时，程序会报错，<code>Uncaught TypeError: Cannot assign to read only property &#39;realName&#39; of object &#39;#&lt;Person&gt;&#39;</code>。注意，这里实际上修饰的是类方法，装饰器目前不能修饰类里面的变量，比如<code>firstName</code>和<code>lastName</code>。</p><h3>三个参数</h3><ul><li>target</li></ul><p>如果修饰类，那<code>target</code>就是目标本身，第一个例子中就是<code>Person</code>类。如果你修饰的是类方法，那<code>target</code>就是类实例。</p><ul><li>name</li></ul><p>类名或者类方法名称，同样第一个例子，打印出来就是<code>Person</code>。</p><ul><li>descriptor</li></ul><p>属性的描述对象。它具有如下几个属性，<code>value</code>，<code>enumerable</code>，<code>configurable</code>，<code>writable</code>。value是修饰对象本身，而其他值和<code>Object.defineProperty</code>的属性一样，控制值的行为。</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n   value: ƒ realName(),\n   enumerable: false,\n   configurable: true,\n   writable: false\n };</code></pre></div><h3>在React的应用</h3><p>装饰器在React中的应用我们随处看见，比如Redux，自定义HOC等，其实这些都是高阶函数的应用。</p><p>下面我们实现一个打点装饰器，当我们触发<code>postClick</code>方法时，会输出一个打点的log，最终会输出<code>postClick 2</code>。我们通过拦截<code>value</code>，并重写<code>value</code>，将参数id打印了出来。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">App</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"err\">@</span><span class=\"nx\">analytic</span><span class=\"p\">()</span>\n  <span class=\"nx\">postClick</span><span class=\"p\">(</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">analytic</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"nx\">decorator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">descriptor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">descriptor</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;undefined&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;@analytic decorator can only be applied to class methods&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">descriptor</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">newValue</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\"> </span><span class=\"si\">${</span><span class=\"nx\">args</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)(</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">descriptor</span><span class=\"p\">,</span>\n      <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"nx\">newValue</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">();</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">postClick</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n</code></pre></div><h3>Babel编译</h3><p>我们选择修饰类方法的例子，看一下最简单的装饰器如果编译成ES5代码会是怎么样。可以用Babel官方的网址 <a href=\"https://link.zhihu.com/?target=https%3A//babeljs.io/repl\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">babeljs.io/repl</span><span class=\"invisible\"></span></a>，看一下第一个例子中代码被编译成什么样子。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Person</span> <span class=\"p\">{</span>\n  <span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Peter&#39;</span><span class=\"p\">;</span>\n  <span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Cheng&#39;</span><span class=\"p\">;</span>\n\n  <span class=\"err\">@</span><span class=\"nx\">readonly</span>\n  <span class=\"nx\">realName</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span><span class=\"si\">}</span><span class=\"sb\"> </span><span class=\"si\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">readonly</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">descriptor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">descriptor</span><span class=\"p\">.</span><span class=\"nx\">writable</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">person2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">person2</span><span class=\"p\">.</span><span class=\"nx\">realName</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div><p>编译之后</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">_decorate</span><span class=\"p\">(</span><span class=\"nx\">decorators</span><span class=\"p\">,</span> <span class=\"nx\">factory</span><span class=\"p\">,</span> <span class=\"nx\">superClass</span><span class=\"p\">,</span> <span class=\"nx\">mixins</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n<span class=\"c1\">// 省略中间一大推\n</span><span class=\"c1\"></span>\n<span class=\"kd\">var</span> <span class=\"nx\">Person</span> <span class=\"o\">=</span> <span class=\"nx\">_decorate</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">_initialize</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">Person</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">_classCallCheck</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">Person</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">_initialize</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">F</span><span class=\"o\">:</span> <span class=\"nx\">Person</span><span class=\"p\">,</span>\n    <span class=\"nx\">d</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n      <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&#34;field&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"s2\">&#34;firstName&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"nx\">value</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;Peter&#39;</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n      <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&#34;field&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"s2\">&#34;lastName&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"nx\">value</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;Cheng&#39;</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n      <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&#34;method&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">decorators</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">readonly</span><span class=\"p\">],</span>\n      <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"s2\">&#34;realName&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"nx\">realName</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"s2\">&#34; &#34;</span><span class=\"p\">).</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}]</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">readonly</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">descriptor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">descriptor</span><span class=\"p\">.</span><span class=\"nx\">writable</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">person2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">person2</span><span class=\"p\">.</span><span class=\"nx\">realName</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div><p>其实主要看<code>Person</code>对象有那些变化，Babel将类编译成了ES5的function，并且外面套一层装饰器，但是装饰器最终还是赋值给<code>Person</code>变量。内部<code>Person</code>对象最终返回一个对象，而key为<code>realName</code>的对象有一个<code>decorators</code>，它是一个数组。我们看看<code>decorators</code>做了什么。其实就是遍历数组，将参数最终映射到<code>Object.defineProperty</code>，操作对象的可写入等属性。</p><h3>结束语</h3><p>通过本文我们知道了装饰器是什么，并且用来做什么，以及实质是什么。最近看了一部电影《斯隆女士》，里面就有一个片段阐述专业性的重要性，作为前端，首先需要掌握的就是ES相关的知识。终于整理完装饰器的知识了，我最近正在用<code>Node + Flutter</code>做一个App，最终计划是发布上线，敬请期待。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我用create-react-app生成了一个项目，可以直接使用装饰器。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/carrollcai/decorator-demo\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-5de72a60daec1dddad418789e28c4446_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">carrollcai/decorator-demo</a><h3>参考</h3><p><a href=\"https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/%23docs/decorator\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">es6.ruanyifeng.com/#</span><span class=\"invisible\">docs/decorator</span><span class=\"ellipsis\"></span></a></p><hr/><p>写作时间： 20190922</p>", 
            "topic": [
                {
                    "tag": "装饰器", 
                    "tagLink": "https://api.zhihu.com/topics/20062630"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "ECMAScript", 
                    "tagLink": "https://api.zhihu.com/topics/19600610"
                }
            ], 
            "comments": [
                {
                    "userName": "朝歌夜弦", 
                    "userLink": "https://www.zhihu.com/people/90bd17957300062099d073cc8f81cb74", 
                    "content": "哎 刚入门 看的不太懂", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "我可以贴一篇入门级的文章", 
                            "likes": 0, 
                            "replyToAuthor": "朝歌夜弦"
                        }
                    ]
                }, 
                {
                    "userName": "H2rmone", 
                    "userLink": "https://www.zhihu.com/people/fa68cbd20cc789f22d1a9700f05b7bff", 
                    "content": "纠正一下 decorator 语法不是 ES7 语法 也不是任何一个ES规范的语法 它只是一个实验性的语法 目前尚在 stage-2阶段 并且经历过一次大改 不推荐在生产环境中使用", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "谢谢纠正", 
                            "likes": 0, 
                            "replyToAuthor": "H2rmone"
                        }
                    ]
                }, 
                {
                    "userName": "朱仕杰", 
                    "userLink": "https://www.zhihu.com/people/bf51c2e0d3539a4f1e3b3f113b9e9e38", 
                    "content": "感觉有点基础[捂脸]其实这个东西不复杂，而且装饰器在ts用的是草案第一版，其实草案已经有3版了，每版都有变化。 装饰器在任何语言都可以算是 一个简而高特性，估计了解的都是对代码有点小洁癖的工程师。 那些业务搬砖估计不喜欢这些，阿里草根一枚", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "[赞][赞]", 
                            "likes": 0, 
                            "replyToAuthor": "朱仕杰"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82567664", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 11, 
            "title": "《TypeScript开发实战》总结", 
            "content": "<p>《TypeScript开发实战》是极客时间上的课程，是由搜狗营销事业部高级架构师的梁宵老师出品，总共47章，涵盖了TypeScript所有用法，以及我们如何在实战中应用TS。本课程还覆盖了一些额外的前端基础内容，比如webpack配置，react编程范式，非常适合初学者。</p><p>下面是老师整理的TypeScript实战内容：</p><p>这是项目相关代码的github链接，</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//github.com/geektime-geekbang/typescript-in-action\" data-image=\"https://pic4.zhimg.com/v2-cdf1b212c388401b12c4b77f62cc725f_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">geektime-geekbang/typescript-in-action</a><p>ppt链接：</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//github.com/geektime-geekbang/typescript-in-action/blob/master/ppt/%25E3%2580%258ATypeScript%25E5%25BC%2580%25E5%258F%2591%25E5%25AE%259E%25E6%2588%2598%25E3%2580%258B%25E8%25AF%25BE%25E4%25BB%25B6.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/geektime-gee</span><span class=\"invisible\">kbang/typescript-in-action/blob/master/ppt/%E3%80%8ATypeScript%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BE%E4%BB%B6.pdf</span><span class=\"ellipsis\"></span></a><p>因为我对TS有一点了解，所以全程我都是1.5倍数看完。下面我会整理课程的全部内容，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-084496d0c41241f835127b1026004b7a_b.jpg\" data-rawwidth=\"3137\" data-rawheight=\"4081\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"3137\" data-original=\"https://pic3.zhimg.com/v2-084496d0c41241f835127b1026004b7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3137&#39; height=&#39;4081&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"3137\" data-rawheight=\"4081\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3137\" data-original=\"https://pic3.zhimg.com/v2-084496d0c41241f835127b1026004b7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-084496d0c41241f835127b1026004b7a_b.jpg\"/></figure><h3>基础篇</h3><p>一般编程语言按类型，分为强类型和弱类型，动态类型和静态类型，而JS是弱类型动态语言，在类型转换的时候，隐式的帮你做了很多操作，减少了开发难度，同时也带来一些隐患，在你不想要类型转换的地方做了类型转换，或者一些动态的类型转换导致了代码跑异常，只有在运行时才知道。而TS是一门强类型静态的语言，强大的类型系统，不仅能开发阶段推导类型，带来开发的便利，同时为每一个变量函数声明类型，有助于代码的维护和重构。正如讲师所说，TS的ROI（投入回报率）是勾型的。小型且不长久的项目慎入，越是需要多人合作和生命周期越长的项目，回报率越高。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4eaae6808d3c95b413d730ed777886de_b.jpg\" data-rawwidth=\"2838\" data-rawheight=\"1408\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"2838\" data-original=\"https://pic3.zhimg.com/v2-4eaae6808d3c95b413d730ed777886de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2838&#39; height=&#39;1408&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"2838\" data-rawheight=\"1408\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2838\" data-original=\"https://pic3.zhimg.com/v2-4eaae6808d3c95b413d730ed777886de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4eaae6808d3c95b413d730ed777886de_b.jpg\"/></figure><p>如何搭建TS环境，请自行百度。或者通过网站运行TS，</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//www.tslang.cn/play/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学习乐园 · TypeScript--JavaScript的超集</a><ul><li>编写第一个TS程序</li></ul><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">let</span> <span class=\"nx\">hello</span>: <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello TypeScript&#39;</span><span class=\"p\">;</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.app&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">hello</span><span class=\"p\">;</span></code></pre></div><ul><li>基本类型</li></ul><p>ES6中基本类型，<code>Boolean，Number，String，Array，Function，Object，Symbol，undefined，null</code>。</p><p>TS数据类型，包含了ES6中所有类型，同时新增了一些类型，<code>void，any，never，元组，枚举，高级类型</code>。</p><ul><li>枚举类型</li></ul><p>通过关键字<code>enum</code>实现</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">enum</span> <span class=\"nx\">Role</span> <span class=\"p\">{</span>\n    <span class=\"nx\">teacher</span>: <span class=\"kt\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">children</span>: <span class=\"kt\">2</span><span class=\"p\">,</span>\n    <span class=\"nx\">other</span>: <span class=\"kt\">3</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">childrenType</span>: <span class=\"kt\">Role</span> <span class=\"o\">=</span> <span class=\"nx\">Role</span><span class=\"p\">[</span><span class=\"nx\">children</span><span class=\"p\">];</span></code></pre></div><ul><li>接口</li></ul><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">interface</span> <span class=\"nx\">List</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span>: <span class=\"kt\">number</span><span class=\"p\">,</span>\n    <span class=\"nx\">name</span>: <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Result</span> <span class=\"p\">{</span>\n    <span class=\"nx\">data</span>: <span class=\"kt\">List</span><span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">result</span>: <span class=\"kt\">Result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nx\">id</span>: <span class=\"kt\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;A&#39;</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nx\">id</span>: <span class=\"kt\">2</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;B&#39;</span> <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">};</span></code></pre></div><p>当然接口也可以约束函数</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">interface</span> <span class=\"nx\">Add</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"nx\">x</span>: <span class=\"kt\">number</span><span class=\"p\">,</span> <span class=\"nx\">y</span>: <span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kt\">number</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">add</span>: <span class=\"kt\">Add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">;</span></code></pre></div><p>当然也可以用类型约束，用关键字<code>type</code></p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"nx\">type</span> <span class=\"nx\">Add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span>: <span class=\"kt\">number</span><span class=\"p\">,</span> <span class=\"nx\">y</span>: <span class=\"kt\">number</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">number</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">add</span>: <span class=\"kt\">Add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">;</span></code></pre></div><ul><li>类</li></ul><p>ts中添加了类型注解</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">class</span> <span class=\"nx\">Dog</span> <span class=\"p\">{</span>\n    <span class=\"kr\">constructor</span><span class=\"p\">(</span><span class=\"nx\">name</span>: <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">static</span> <span class=\"nx\">food</span>: <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bones&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"kr\">public</span> <span class=\"nx\">run() {</span><span class=\"p\">}</span>\n\n    <span class=\"kr\">protected</span> <span class=\"p\">;</span>\n\n    <span class=\"kr\">private</span> <span class=\"nx\">say</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;wangwang&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">readonly</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">;</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">Husky</span> <span class=\"kr\">extends</span> <span class=\"nx\">Dog</span> <span class=\"p\">{</span>\n    <span class=\"kr\">constructor</span><span class=\"p\">(</span><span class=\"nx\">name</span>: <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">color</span>: <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"nx\">color</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">color</span>: <span class=\"kt\">string</span>\n<span class=\"p\">}</span></code></pre></div><p>抽象类，用关键字<code>abstract</code>，只能被继承，不能被实例化。抽象类可以实现多态。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">abstract</span> <span class=\"kr\">class</span> <span class=\"nx\">Animal</span> <span class=\"p\">{</span>\n    <span class=\"nx\">eat() {</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;eat&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 抽象方法可以不在父类中实现\n</span><span class=\"c1\"></span>    <span class=\"kr\">abstract</span> <span class=\"nx\">sleep</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">animal</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Animal</span><span class=\"p\">();</span> <span class=\"c1\">// error\n</span><span class=\"c1\"></span>\n<span class=\"kr\">class</span> <span class=\"nx\">Dog</span> <span class=\"kr\">extends</span> <span class=\"nx\">Animal</span><span class=\"p\">{</span>\n    <span class=\"kr\">constructor</span><span class=\"p\">(</span><span class=\"nx\">name</span>: <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">super</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">run() {</span><span class=\"p\">}</span>\n\n    <span class=\"nx\">sleep() {</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;dog sleep&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">dog</span>: <span class=\"kt\">Dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"s1\">&#39;small dog&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">eat</span><span class=\"p\">()</span> <span class=\"c1\">// eat;\n</span><span class=\"c1\"></span><span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">sleep</span><span class=\"p\">();</span> <span class=\"err\">// dog sleep</span></code></pre></div><p>类型与接口的关系，借用课程的一张图，侵删。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-38371de6b8e63c08fd3b540c3db0afdf_b.jpg\" data-rawwidth=\"2820\" data-rawheight=\"1400\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"2820\" data-original=\"https://pic4.zhimg.com/v2-38371de6b8e63c08fd3b540c3db0afdf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2820&#39; height=&#39;1400&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"2820\" data-rawheight=\"1400\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2820\" data-original=\"https://pic4.zhimg.com/v2-38371de6b8e63c08fd3b540c3db0afdf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-38371de6b8e63c08fd3b540c3db0afdf_b.jpg\"/></figure><p>接口之间可以相互继承，类之间也可以相互继承，实现复用。接口可以通过类来实现，但是接口只能约束类的共有成员。</p><ul><li>泛型</li></ul><p>简单点说，类型也是动态传入，实现类型的灵活。也可以理解为，不预先确定的数据类型，具体类型只有在使用的时候才能确定。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">x</span>: <span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"nx\">y</span>: <span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">add</span><span class=\"o\">&lt;</span><span class=\"kt\">number</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span></code></pre></div><ul><li>高级类型</li></ul><p>为了语言的灵活性，引入了高级类型</p><p>交叉类型 交叉类型需要实现所有的接口方法</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">interface</span> <span class=\"nx\">DogInterface</span> <span class=\"p\">{</span>\n    <span class=\"nx\">run() {</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">interface</span> <span class=\"nx\">CatInterface</span> <span class=\"p\">{</span>\n    <span class=\"nx\">jump() {</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">Dog</span> <span class=\"kr\">implements</span> <span class=\"nx\">DogInterface</span> <span class=\"o\">&amp;</span> <span class=\"nx\">CatInterface</span> <span class=\"p\">{</span>\n    <span class=\"nx\">run() {</span><span class=\"p\">}</span>\n    <span class=\"nx\">jump() {</span><span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>联合类型</p><p>使代码具有不确定性，增强代码的灵活性。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">let</span> <span class=\"nx\">a</span>: <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"o\">|</span> <span class=\"s1\">&#39;b&#39;</span> <span class=\"o\">|</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">c</span>: <span class=\"kt\">1</span> <span class=\"o\">|</span> <span class=\"mi\">2</span> <span class=\"o\">|</span> <span class=\"mi\">3</span><span class=\"p\">;</span></code></pre></div><p>索引类型、映射类型、条件类型，用到的场景比较少，可以用到时再去查询。</p><h3>工程篇与实战篇</h3><ul><li>配置tsconfig.json</li></ul><p>新建一个ts项目</p><div class=\"highlight\"><pre><code class=\"language-text\">yarn install -g tsc\ntsc &#39;project&#39;</code></pre></div><p>这样就能新建一个TS项目，同时生成一个tsconfig.json文件。</p><p>如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。（来自于html中文网）</p><p class=\"ztext-empty-paragraph\"><br/></p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//www.html.cn/doc/typescript/doc/handbook/tsconfig.json.html\" data-image=\"https://pic1.zhimg.com/v2-d3826303d9d4784ac37b83bb99516f80_180x120.jpg\" data-image-width=\"480\" data-image-height=\"150\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tsconfig.json - TypeScript 中文文档（v2.4） - html中文网</a><p>，这里面有项目所需配置项说明。</p><ul><li>编译工具</li></ul><p>一般我们都是基于前端框架，很难像VsCode一样，不借助任何前端框架，所以我们选择编译工具的时候，最好不要用ts-loader，因为它缺少插件支持，并且TS官方团队也选择和Babel合作，兼容现有前端的生态，所以推荐使用Babel。</p><ul><li>投入生产</li></ul><p>如果我们需要在现有项目中使用TS，需要遵循几个原则，共存原则，宽松原则和严格原则，根据字面意思，可以选择配置tsconfig.json配置项，设置不同对严格等级。而我推荐对部分开启严格模式，先项目一小部分，其他部分采用宽松原则，这样项目能正常开发和稳步迁移。</p><h3>总结</h3><p>这个课程很全面讲解了TS，支不支持梁老师，看大家的意愿，而我是通过极客时间送我的7天试用面卡看的视频。我还看完了《React进阶实战篇》，随后送达。将注意力focus到能产生改变的领域，与大家共勉。</p><hr/><p>写作时间：20190915</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "tj.dis1", 
                    "userLink": "https://www.zhihu.com/people/83aaa8bb463d64fcd740a071128a20b4", 
                    "content": "<p>赞</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "tj.dis1", 
                    "userLink": "https://www.zhihu.com/people/83aaa8bb463d64fcd740a071128a20b4", 
                    "content": "<p>不搞清ts看源码太难受了</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<p>对，像ant-design的代码就是行业标杆</p>", 
                            "likes": 0, 
                            "replyToAuthor": "tj.dis1"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77575834", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 6, 
            "title": "你不知道的JS拷贝", 
            "content": "<h2>前言</h2><p>今年初看到一篇好文章，今天才有时间翻译。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//smalldata.tech/blog/2018/11/01/copying-objects-in-javascript\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">COPYING OBJECTS IN JAVASCRIPT</a></p><h3>内容</h3><p>在本文中，我们将着手于通过不同的方式探索在JavaScript中一个对象被拷贝。我们将会在浅拷贝和深拷贝之间做一个对比。</p><p>在开始之前，有一个小地方值得注意：在JS中的对象是一个简单的本地内存的引用。这些引用是可变的，比如，它们可以被重新赋值。因此，简单复制一份引用将导致2个引用对象指向同一个本地内存地址。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">a</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;abc&#34;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// abc\n</span><span class=\"c1\"></span>\n<span class=\"kd\">var</span> <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// abc\n</span><span class=\"c1\"></span>\n<span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;yo foo&#34;</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// yo foo\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// yo foo\n</span><span class=\"c1\"></span>\n<span class=\"nx\">bar</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;whatup bar?&#34;</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// whatup bar?\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// whatup bar?\n</span></code></pre></div><p>正如上面的例子，foo和bar都反应出改变会影响另一个对象。因此，在JS中做一个拷贝有时需要依赖于你的场景。</p><h3>浅拷贝</h3><p>如果你的对象只有值类型的属性，你可以使用解构赋值（spread）的语法或者<code>Object.assign(...)</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s2\">&#34;foo&#34;</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"s2\">&#34;bar&#34;</span> <span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">obj</span> <span class=\"p\">};</span> <span class=\"c1\">// Object { foo: &#34;foo&#34;, bar: &#34;bar&#34; }\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s2\">&#34;foo&#34;</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"s2\">&#34;bar&#34;</span> <span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">obj</span><span class=\"p\">);</span> <span class=\"c1\">// Object { foo: &#34;foo&#34;, bar: &#34;bar&#34; }\n</span></code></pre></div><p>上面的两种方法可以被用于复制多种原对象或者目标对象的属性值：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s2\">&#34;foo&#34;</span> <span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"s2\">&#34;bar&#34;</span> <span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">copySpread</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">obj2</span> <span class=\"p\">};</span> <span class=\"c1\">// Object { foo: &#34;foo&#34;, bar: &#34;bar&#34; }\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">copyAssign</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"nx\">obj2</span><span class=\"p\">);</span> <span class=\"c1\">// Object { foo: &#34;foo&#34;, bar: &#34;bar&#34; }\n</span></code></pre></div><p>上面的方法的问题展示了用对象的作为对象的属性，仅仅是将引用拷贝过去，这等价于<code>var bar = foo;</code>，在第一个代码例子中。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">c</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">foo</span> <span class=\"p\">};</span>\n\n<span class=\"nx\">copy</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">copy</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">dir</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">);</span> <span class=\"c1\">// { a: 0, b: { c: 2 } }\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">dir</span><span class=\"p\">(</span><span class=\"nx\">copy</span><span class=\"p\">);</span> <span class=\"c1\">// { a: 1, b: { c: 2 } }\n</span></code></pre></div><h3>深拷贝</h3><p>为了深拷贝一个对象，一个可能的解决方案是将对象序列化成一个字符串，再反序列化回一个对象：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">c</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">));</span>\n</code></pre></div><p>很不幸地，这个方法仅仅当对象包含可序列化地值类型和没有循环引用类型时起作用。用<code>Date</code>对象就是一个不可序列化地值类型，尽管它在ISO的标准可以被打印成字符串，<code>JSON.parse</code>仅仅把它解释成一个字符串（string），而不是<code>Date</code>对象。</p><h3>深拷贝的一些警告</h3><p>更复杂的例子，你可以使用HTML5的一个新克隆算法，<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">结构化克隆(structured clone)</a>。很遗憾，在细这篇文章的时候，它仍然被限制于确定的类型，但是它比<code>JSON.parse</code>支持更多的类型：<code>Date, RegExp, Map, Set, Blob, FileList, ImageData, sparse and typed Array</code>。它也在被克隆的数据中保留了引用，支持上面提及的不起作用的序列化方法，循环和递归的结构。</p><p>目前，没有直接的方式可用于可结构化的克隆算法，但有一些新的浏览器特性可以使用这些算法。所以，有一些变通方法可以使用深拷贝对象。</p><p><code>Via MessageChannels</code>:它利用一个通信功能中的序列化算法。这个功能基于事件（event ），克隆结果是一个异步的操作。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">StructuredCloner</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pendingClones_</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Map</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">nextKey_</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">channel</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MessageChannel</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inPort_</span> <span class=\"o\">=</span> <span class=\"nx\">channel</span><span class=\"p\">.</span><span class=\"nx\">port1</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outPort_</span> <span class=\"o\">=</span> <span class=\"nx\">channel</span><span class=\"p\">.</span><span class=\"nx\">port2</span><span class=\"p\">;</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outPort_</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">}})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">resolve</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pendingClones_</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n      <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pendingClones_</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outPort_</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">cloneAsync</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">nextKey_</span><span class=\"o\">++</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pendingClones_</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">resolve</span><span class=\"p\">);</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inPort_</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">({</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">structuredCloneAsync</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">structuredCloneAsync</span> <span class=\"o\">=</span>\n    <span class=\"nx\">StructuredCloner</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">cloneAsync</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">StructuredCloner</span><span class=\"p\">);</span>\n\n\n<span class=\"k\">const</span> <span class=\"nx\">main</span> <span class=\"o\">=</span> <span class=\"kr\">async</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">original</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">date</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nx\">number</span><span class=\"o\">:</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"p\">};</span>\n  <span class=\"nx\">original</span><span class=\"p\">.</span><span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"nx\">original</span><span class=\"p\">;</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">clone</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">structuredCloneAsync</span><span class=\"p\">(</span><span class=\"nx\">original</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// different objects:\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">original</span> <span class=\"o\">!==</span> <span class=\"nx\">clone</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">original</span><span class=\"p\">.</span><span class=\"nx\">date</span> <span class=\"o\">!==</span> <span class=\"nx\">clone</span><span class=\"p\">.</span><span class=\"nx\">date</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// cyclical:\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">original</span><span class=\"p\">.</span><span class=\"nx\">self</span> <span class=\"o\">===</span> <span class=\"nx\">original</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">clone</span><span class=\"p\">.</span><span class=\"nx\">self</span> <span class=\"o\">===</span> <span class=\"nx\">clone</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// equivalent values:\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">original</span><span class=\"p\">.</span><span class=\"nx\">number</span> <span class=\"o\">===</span> <span class=\"nx\">clone</span><span class=\"p\">.</span><span class=\"nx\">number</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">original</span><span class=\"p\">.</span><span class=\"nx\">date</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">clone</span><span class=\"p\">.</span><span class=\"nx\">date</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Assertions complete.&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">main</span><span class=\"p\">();</span>\n</code></pre></div><p><code>Via the history API</code>:<code>history.pushState()</code>和<code>history.replacState()</code>两个API，对它们的第一个参数（argument）创建了结构化克隆！注意在这里，这个方法是同步的，操作浏览器历史不是一个快的方式，一直调用这个方法会导致浏览器无法响应。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">structuredClone</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">oldState</span> <span class=\"o\">=</span> <span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">replaceState</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">clonedObj</span> <span class=\"o\">=</span> <span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">replaceState</span><span class=\"p\">(</span><span class=\"nx\">oldState</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">clonedObj</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p><code>Via this notification API</code>: 当创建一个新的通知（Notification），这个构造函数就会对关联的数据创建一个结构化克隆。通知将会展示一个浏览器的通知给用户，但是这个可能会没有征兆的失败，除非应用（浏览器）允许展示通知消息。在授予权限（通知打开）的情况下，通知会立即关闭。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">structuredClone</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Notification</span><span class=\"p\">(</span><span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">silent</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">});</span>\n  <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nx\">onshow</span> <span class=\"o\">=</span> <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><h3>深拷贝在NodeJs中</h3><p>在8.0.0的版本中，NodeJs提供了一个序列化的api，适配结构化克隆。在写这篇文章时，这个API还被标记为试验性的。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">v8</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;v8&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">buf</span> <span class=\"o\">=</span> <span class=\"nx\">v8</span><span class=\"p\">.</span><span class=\"nx\">serialize</span><span class=\"p\">({</span><span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()});</span>\n<span class=\"k\">const</span> <span class=\"nx\">cloned</span> <span class=\"o\">=</span> <span class=\"nx\">v8</span><span class=\"p\">.</span><span class=\"nx\">deserialize</span><span class=\"p\">(</span><span class=\"nx\">buf</span><span class=\"p\">);</span>\n<span class=\"nx\">cloned</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">getMonth</span><span class=\"p\">();</span>\n</code></pre></div><p>8.0.0之前的版本和更稳定的实现方式，可以使用<code>lodash</code>的<code>cloneDeep</code>，它也是基于结构化克隆的算法。</p><h3>总结</h3><p>在JS中最好的复制对象的算法，高度依赖于上下文和对象的类型，当你想要拷贝的时候。<code>lodash</code>是一个最安全的通用的深拷贝的方法，你可以有更有效的实现方式，如果你想要自定义，下面是对dates也起作用的深拷贝例子。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">deepClone</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">copy</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Handle the 3 simple types, and null or undefined\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"nx\">obj</span> <span class=\"o\">||</span> <span class=\"s2\">&#34;object&#34;</span> <span class=\"o\">!=</span> <span class=\"k\">typeof</span> <span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">obj</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Handle Date\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Date</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n    <span class=\"nx\">copy</span><span class=\"p\">.</span><span class=\"nx\">setTime</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">getTime</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"nx\">copy</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Handle Array\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Array</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">copy</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">deepClone</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">copy</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Handle Function\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Function</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">copy</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Handle Object\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Object</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">copy</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">attr</span> <span class=\"k\">in</span> <span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">attr</span><span class=\"p\">))</span> <span class=\"nx\">copy</span><span class=\"p\">[</span><span class=\"nx\">attr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">deepClone</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">attr</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"nx\">copy</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s2\">&#34;Unable to copy obj as type isn&#39;t supported &#34;</span> <span class=\"o\">+</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>就我而言，我期待在任何地方都能用结构化的克隆，而不用管浅拷贝深拷贝的问题，只有开开心心的复制。只想放养，每次放一只。</p><h3>结束语</h3><p>js的对象是引用类型，因此会引发很多问题。如果react中，PureComponent只有一层浅比较，如果传入的props是对象类型，它就会失效。比如vue中，只改变数组的下标，并不会触发双向数据绑定中的set监听。所以，理解深拷贝与浅拷贝是一项基本技能。</p><hr/><p>写作时间：20190811</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "js事件", 
                    "tagLink": "https://api.zhihu.com/topics/19691457"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77475466", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 4, 
            "title": "js实现call函数", 
            "content": "<h2>前言</h2><p>好久没有更新文章，从一个小知识点开始吧。无聊看到网上一道题目，如何实现call函数。</p><p>我简单手写了一下思路</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">func</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\n<span class=\"nx\">func</span><span class=\"p\">.</span><span class=\"nx\">call2</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">call2</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n\n  <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">arguments</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">fn</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这个代码有两个问题，一、this指向没有改变。二、arguments是函数自带的参数，无法赋值。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">call2</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">_ctx</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// 把this赋值给一个新的对象，这样fn执行的时候，this就执行_ctx了\n</span><span class=\"c1\"></span>  <span class=\"nx\">_ctx</span><span class=\"p\">.</span><span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span>  <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"sb\">`_ctx.fn(</span><span class=\"si\">${</span><span class=\"nx\">args</span><span class=\"si\">}</span><span class=\"sb\">)`</span><span class=\"p\">);</span>\n\n  <span class=\"k\">delete</span> <span class=\"nx\">_ctx</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>eval有运行时执行代码的能力，可以在运行时，执行我们_ctx.fn函数（本质是func函数），参数是call的第一个参数之后的参数。</p><h3>代码案例</h3><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">call2</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">_ctx</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">;</span>\n  <span class=\"nx\">_ctx</span><span class=\"p\">.</span><span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"sb\">`_ctx.fn(</span><span class=\"si\">${</span><span class=\"nx\">args</span><span class=\"si\">}</span><span class=\"sb\">)`</span><span class=\"p\">);</span>\n\n  <span class=\"k\">delete</span> <span class=\"nx\">_ctx</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">func</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">func</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"p\">.</span><span class=\"nx\">call2</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div><h3>总结</h3><p>js中的this运行时可能会改变，虽然增加了灵活性，同时也增加了复杂性。所以我们需要知道call，apply，bind这些函数具体做了什么。</p><hr/><p>写作时间：20190810</p>", 
            "topic": [
                {
                    "tag": "js事件", 
                    "tagLink": "https://api.zhihu.com/topics/19691457"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "宫大汉", 
                    "userLink": "https://www.zhihu.com/people/d6e264b433ef7675e5a0d0a058ab36a8", 
                    "content": "<p>呃没处理ctx里已经有“fn”的情况，建议ES6环境下用一个闭包里的symbol替代“fn”这个key</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<p>很严谨，确实需要判断入参“ctx”可能存在“fn”的情况</p>", 
                            "likes": 0, 
                            "replyToAuthor": "宫大汉"
                        }
                    ]
                }, 
                {
                    "userName": "宫大汉", 
                    "userLink": "https://www.zhihu.com/people/d6e264b433ef7675e5a0d0a058ab36a8", 
                    "content": "<p>另外，修改ctx的方法其实不很安全，会影响Object.getOwnPropertyDescriptors的结果，如果传入的函数里对ctx取所有属性，后续逻辑就可能出错。但文章这个场景下也只能说没办法的办法。</p>", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69334111", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "《原则》札记", 
            "content": "<p>知友经常推荐这本书，所以也有了本文。总得来说，收获颇丰。无论是书中所提之未见闻，亦是你已经形成的原则，这都是一次对你的重新塑造。如果在未读此书前，你发现你坚持的原则，和桥水创始人的原则相同，说明这些原则是大家的共识，是一种通过成功的捷径。</p><p>主人公瑞·达利欧是世界头号对冲基金桥水的创始人，从中产阶级不断奋斗，最终成为世界知名人物，他的成长足迹，也可通过《原则》一书一窥端倪。此书也是比尔·盖茨极力推荐的书。</p><p>阅读此书我最大的两点感悟，一定要形成自己的原则，无论工作、经济或是生活，并且一定要记录下来。追求极度求真，极度透明。</p><p>下面我就偷懒，直接列出在阅读书籍时的笔记与感悟：</p><h3>工作</h3><p>极度求真，极度透明。</p><p>能不加班就不加班。</p><p>工作中的埋头苦干，当老好人，只会拖垮自己。</p><p>别急功近利，一次性想把事情做好，先着手做好眼前的事，再想着做更大的事。</p><p>不要害怕错误被摆到桌面上，只有被摆到桌面上，才能减少下次犯错的概率。</p><p>原则应该尽可能的简单。</p><p>先把你的必做之事做完，再想你的想做之事。</p><p>提防“我以为”为开头的发言。</p><p>痛苦加反思等于进步。</p><p>经验会形成内化的学习，这是书本学习无法替代的。</p><p>别轻易被迫让步，做正确的事情短期内很艰难，但是长期来看是对自己有收益的。</p><p>避免下沉，管理者被迫去做下属的工作。</p><p>爱因斯坦的说话，疯狂就是重复做一件事情却期待不同的结果。</p><p>清洗风暴，是罕见的自然现象，会洗涤所有过度生长的生物。</p><p>为确保正确完成关键人物，做两次比做两遍好。两次是指两个人做，两遍是一个人做两次。</p><h3>生活</h3><p>没有特殊情况，不超过11点睡觉。</p><p>把相关的东西放在一起，避免查找时出现混乱。比如一辆车的所有材料。</p><p>直接结果和后续结果的值得追求性通常是相反的，运动痛苦和浪费时间，但是是带来长期的健康和更具吸引力的形象。</p><p>学会拒绝一些无效文章，精力有限，即使感兴趣的文章，如果对现阶段帮助不大，也需要拒绝。</p><p>托马斯·爱迪生，我没有失败，我只是发现了一万种不成功的方法。</p><p>区分苍白的抱怨和有助于改进工作的诉求。这一点在管理上尤其重要，要允许员工吐槽。</p><p>感知型和直觉型，两个各有利弊，不同的情况下，要用不同类型的人。感知型，做事比较细，直觉型，细节粗略，更注重全局。我属于直觉型。</p><p>让对话或者做事善始善终，像《十二公民》一样。</p><p>更愿意包容别人，而不要理解为降低标准。</p><h3>经济</h3><p>投资不要着急，慢慢寻找，总有风险低回报高的机会。机会多的是。</p><p>现金是长期投资产品里最差的一种。</p><p>竭泽而渔，不要目光短浅。</p><p>成功得到关注并不是一件好事，澳大利亚人称此为“最高婴栗综合症”，长得高的罂粟第一个被摘掉。</p><h3>结束语</h3><p>其实大部分原则都是一些大家的共识，但是真的只有少数人坚持自己的原则。苹果之于乔布斯，特斯拉之于马斯克，阿里之于马云。写下来，不断推敲升级，形成自己的一套原则，这是终生受益的。</p><hr/><p>写作时间：20190616</p>", 
            "topic": [
                {
                    "tag": "原则", 
                    "tagLink": "https://api.zhihu.com/topics/19624252"
                }, 
                {
                    "tag": "瑞·达利欧（Ray Dalio）", 
                    "tagLink": "https://api.zhihu.com/topics/19953389"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57933995", 
            "userName": "前端先锋", 
            "userLink": "https://www.zhihu.com/people/1a53a95bbbc66f6e797ca40d4b407f5b", 
            "upvote": 7, 
            "title": "React 教程：React 快速上手指南", 
            "content": "<blockquote>翻译：疯狂的技术宅<br/><a href=\"https://link.zhihu.com/?target=https%3A//www.toptal.com/react/react-tutorial-pt1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">toptal.com/react/react-</span><span class=\"invisible\">tutorial-pt1</span><span class=\"ellipsis\"></span></a></blockquote><p>前端和 JavaScript 是一个奇怪的世界。大量不断推出的新技术的同时，也在被不需要它们的人嘲笑，往往很多人都会这样做。我们有时会对不断涌现的信息、库和讨论感到不知所措，总希望能有一些稳定的东西，就像能让我们可以休整一段时间的避风港。最近 React 似乎有变成 JavaScript 演变海洋中温暖港湾的趋势。</p><p>正是考虑到这一点，我们决定制作这个 React 系列教程，展示它的功能，并看看它与 Angular 和 VueJS 相比有什么特点。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-27c33ea63d229375af6bce14cb6af7f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-27c33ea63d229375af6bce14cb6af7f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;481&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-27c33ea63d229375af6bce14cb6af7f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-27c33ea63d229375af6bce14cb6af7f9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>React 是一座耸立在 JavaScript 代码海上醒目的灯塔</p><p>当然 React 并不是唯一的选择，但目前它是最受欢迎、最稳定、最具有创新性的解决方案之一，虽然它仍然在不断升级，但更多的是在改进，而不是增加功能。</p><h2><b>2019年的 React</b></h2><p>React 是一个视图库，可以一直追溯到2011年，当时它的第一个原型名为 FaxJs，并出现在 Facebook 上，React 是由 Jordan Walke（他也是上述原型的作者）于2013年5月29日在 JSConfUS 推出的，并于2013年7月2日在 GitHub 上公开发布。</p><p>在2014年，当开始扩大社区并推广 React 时，它受到持续欢迎。然而从我的角度来看，2015年是大型公司（例如 Airbnb 和 Netflix ）开始喜欢并采用 React 的里程碑年。此外，当年还出现了React Native。 React Native背后的想法并不是什么全新的东西，不过看起来很有趣，尤其是因为它得到了 Facebook 的支持。</p><p>另一个重大变化是 Redux，一个 Flux 实现。这使状态管理方式更加简单友好，使其成为迄今为止最成功的实现。</p><p>从其出现一直到现在，还有很多其他的东西供我们使用，包括 React tools【<a href=\"https://link.zhihu.com/?target=https%3A//www.toptal.com/react/navigating-the-react-ecosystem\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">toptal.com/react/naviga</span><span class=\"invisible\">ting-the-react-ecosystem</span><span class=\"ellipsis\"></span></a>】，重写了核心算法；Fiber 用于语义转换版本控制等等。到了今天，我们处于 v16.6.3，几周后可能就会发布支持 Hooks 的新版本（它应该在 16.7.0 得到支持，但由于对 React.lazy 做了一些修复，就先发布了一个版本）。React 由于其名气和稳定性获得了广泛好评。</p><h2><b>但 React 到底是什么？</b></h2><p>好吧，如果你身为前端开发人员但是从来都没有听说过，那么我就要说声“恭喜你”，因为这是一个了不起的壮举。</p><p>开个玩笑而已。React 是一个声明式的基于组件的视图库，可以帮助你构建 UI。它是一个库而不是一个框架，虽然最初很多人把它描述为后者。</p><p>显然，如果我们要把 Redux 和 React Router 等添加到 React，它就拥有了制作常规单页应用程序所需的所有东西，这可能这就是它有时被错误地描述为框架而不是库的原因 。如果一定要这样认为的话，将该环境的所有组件放在一起，术语“框架”可能有点适合它，但就其本身而言，React 仅仅是一个库。</p><p>不要再纠结改怎么对其分类了，先关注 React 有什么独特之处，一些之前没有注意到的东西。首先，当你第一次看到 React 时，就会想到 JSX【<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/jsx-in-depth.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">reactjs.org/docs/jsx-in</span><span class=\"invisible\">-depth.html</span><span class=\"ellipsis\"></span></a>】，因为这是你看到代码时的第一个感受。 JSX是一种 JavaScript 语法扩展，有点类似于 HTML/XML。说到 React 和 JSX，它们与 HTML 有一些区别，例如，React 中的类是 <code>className</code>，没有tabindex 但是有 <code>tabIndex</code>，样式接受具有驼峰命名的属性的 JavaScript 对象，依此类推。</p><p>有一些细微的差别，但是任何人都应该立即接受它们。事件处理是通过例如 <code>onChange</code> 和 <code>onClick</code> 属性实现的，这些属性可以用来附加一些函数来处理事件。此外，以后的组件可以通过使用 props 自由重用和自定义，因此没有理由多次编写相同的代码。</p><div class=\"highlight\"><pre><code class=\"language-text\">1import React, { Component } from &#39;react&#39;;\n2\n3export default class App extends Component {\n4    render() {\n5        return (\n6            &lt;div&gt;Hello World, {this.props.name}&lt;/div&gt;\n7        );\n8    }\n9}\n</code></pre></div><p>但是实际上 JSX 在 React 中并不是非常必要的。你可以编写常规函数来创建元素，而无需使用JSX。上面的代码可以像下面这样去用。</p><div class=\"highlight\"><pre><code class=\"language-text\"> 1import React, { Component } from &#39;react&#39;;\n 2\n 3export default class App extends Component {\n 4    render() {\n 5        return React.createElement(\n 6            &#39;div&#39;,\n 7            null,\n 8            &#39;Hello World, &#39;,\n 9            this.props.name\n10        );\n11    }\n12}\n</code></pre></div><p>很显然我并不是建议你用这样的语法，尽管有些情况下它有可能会派上用场（例如你想要引入一个非常小的东西但是又不想更改构建环境）。</p><p>实际上我展示上述代码还有另一个原因。通常，开发人员不理解我们为什么需要执行以下操作：</p><div class=\"highlight\"><pre><code class=\"language-text\">1import React from &#39;react&#39;;\n</code></pre></div><p>代码片段应该是能够自解释的。即使我们正在提取 <code>Component</code>，仍然需要 React，因为 Babel 在 JSX 之上转换为 <code>React.createElement</code>。所以如果我们不导入 React 就会失效。前面我提到了 Babel，这是一个工具，可以帮助我们预览那些尚未在 JavaScript 中（更确切地说是在浏览器中）支持的东西，或者以某种方式对  JavaScript 进行扩展（或者类似于 TypeScript，Babel 从 Babel 7 开始支持的不同语言）。感谢Babel：</p><ul><li>JSX 将被转化为成浏览器可以理解的代码。</li><li>我们可以使用尚未在浏览器中实现的新功能（例如类属性）。</li><li>我们可以支持新浏览器中的特性，同时在旧浏览器中支持较旧的功能。</li></ul><p>简而言之，在 JavaScript 中，就是今天的代码明天仍然能用；这可能需要为此专门再写一篇文章。值得一提的是，React 的导入也可以被一些其他技术绕过（比如通过 Webpack 引入 ProvidePlugin 等），但是由于篇幅有限，我们将避免使用这种方式，并假设用户将使用 Create React App（ CRA）（稍后将提到有关此工具的更多信息）。</p><p>另一点比 JSX 本身更重要，那就是 React 基于虚拟 DOM。简而言之，虚拟 DOM 是用 JavaScript 编写的在内存中的理想树结构，稍后我们会把它与真实 DOM 进行比较。</p><h2><b>怎样与 Angular 和 Vue 进行比较？</b></h2><p>我很不喜欢对库进行比较，特别是当我们被迫把梨和苹果放在一起进行比较时。</p><p>因此，我将尝试使用一系列简短的问题和答案将 React 与 Angular 和 Vue 进行比较。这种比较与技术相关，而不是主观的作出 <i>“X比Y更好，因为它使用 JSX 而不是模板。”</i> 这种出于个人偏好的对比。另外在速度和内存分配等方面 React 与其主要竞争对手（Angular 和 Vue 都能想得到）非常相似，有一篇关于这个问题的文章很不错，但请记住这一点：绝大多数程序并不会做这种处理上万行数据的事。因此，这些结果也是纯粹的速度实验。实际上你也不会把这放在首位。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-824298740cf95f02b337b8af0425784f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-824298740cf95f02b337b8af0425784f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;363&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-824298740cf95f02b337b8af0425784f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-824298740cf95f02b337b8af0425784f_b.jpg\"/></figure><p>那么让我们来看看关于 React 的问题以及它与竞争对手的比较：</p><p><b><i>我想拥有更多的工作机会。 React 到底有多受欢迎？</i></b></p><p>嗯，这很容易回答 —— 选择 React。实际上，我会说 React 的工作机会大约其它的 6 到 10 <i>倍</i>（可能出入比较大，在一些大网站是 50 倍，也有些网站是 6 倍），是  Vue 的 2 到 4倍，比 Angular 更多。对 React experts 【<a href=\"https://link.zhihu.com/?target=https%3A//www.toptal.com/react\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">toptal.com/react</span><span class=\"invisible\"></span></a>】的需求很大，但是为什么 Vue 在 GitHub 上非常受欢迎（实际上它获得了比 React 更多的star）却没有更多的职位空缺？这点我不知道。【译者注：作者是美国人，这里指的是美国的就业市场】</p><p><b><i>我想要一个很大的社区，还有大量的库，能够快速解决可能出现的问题。</i></b><br/>选 React，不要再犹豫了。</p><p><b><i>它是否容易使用，开发过程是否令人愉快？</i></b></p><p>2018年和2017年的 JS 状态报告显示，React 和 Vue 都享有良好的声誉，大多数开发人员表示会再次使用。另一方面Angular 有一种趋势，每年都会有越来越多的人说不会再次使用它。</p><p><b><i>我想创建一个新的单面应用，但我不想额外去找这种支持库。</i></b></p><p>我认为这大概是 Angular 值得选择的唯一原因。</p><p><b><i>我不是大公司。但是希望尽可能独立，应该选择哪个？</i></b></p><p>Vue —— 它是我们三巨头中唯一独立的一个。 （ Facebook 支持 React，而 Google 支持 Angular。）</p><p><b><i>上手最简单和最快的学习曲线？</i></b></p><p>Vue/React。在这里我更倾向于 Vue，但这只是我个人的意见。至于为什么？因为你不需要懂 JSX（它是可选的），它基本上只是 HTML + CSS + JavaScript。</p><h2><b>React Tutorial：开始你的第一个程序</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e5e0644f1c475b8a4e02934d8ab92a61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"840\" data-original=\"https://pic2.zhimg.com/v2-e5e0644f1c475b8a4e02934d8ab92a61_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;840&#39; height=&#39;538&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"840\" data-original=\"https://pic2.zhimg.com/v2-e5e0644f1c475b8a4e02934d8ab92a61_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e5e0644f1c475b8a4e02934d8ab92a61_b.jpg\"/></figure><p>目前上手 React 最简单方法是使用 CRA，这是一个为你创建项目的 CLI 工具，可帮助你避免配置 Webpack / Babel 等环境。你只需要依赖默的认配置方式，并随着时间的推移更新包含在内的内容。多亏了这一点，你无需关心某些关键库的主要更新。</p><p>当然，稍后，你可以通过运行 <code>npm run eject</code> 来“弹出”自己并自己处理每个细节。这种方法有其自身的优点，因为你可以增加原来不可用的东西（例如装饰器）来增强你的应用，但它也可能是令人头疼的问题，因为它需要花费更多的时间去配置许多额外的文件。</p><p>所以，首先要做的是：</p><div class=\"highlight\"><pre><code class=\"language-text\">1npx create-react-app {app-name}\n</code></pre></div><p>然后 <code>npm run start</code> 就完成了。</p><h2><b>类组件与函数组件</b></h2><p>我们应该先解释这些组件的不同之处。基本上每个组件可以是 <i>function</i> 或 <i>class</i>。它们之间的主要区别在于，类组件有函数组件中没有的一些功能：它们有 state 并使用 refs、生命周期等。从 v16.7 开始我们可以使用 hooks，因此可以使用 hooks 来进行 state 和 refs。</p><p>类组件有两种类型：<code>Component</code> 和 <code>PureComponent</code>。它们唯一的区别是 <code>PureComponent</code> 可以对 props 和 state 进行浅层比较 —— 这在你不想“浪费”渲染资源的情况下有独到的好处，一个组件及其子组件恰好在渲染后处于相同状态。不过它只有一个浅层比较；如果你想实现自己的比较操作（假如你传递的是复杂的 props），只需要用 <code>Component</code> 并覆盖 <code>shouldComponentUpdate</code>（默认情况下返回true）。从 16.6 + 开始，在函数组件中也可以用类似的东西 —— 全靠 <code>React.memo</code> 这个更高阶的组件，在默认情况下表现得像 <code>PureComponent</code>（浅层比较），在你进行自定义的 props 比较时它还需要第二个参数。</p><p>一般来说如果你能用函数组件（假设你不需要类功能）那么就用它。不过从 16.7.0 开始，由于生命周期方法，只能用类组件。但是我认为函数组件更透明，更容易推理和理解。</p><h2><b>React 生命周期方法</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9aa9c19ad1b4d6d57e5b22e25a9876cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"633\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9aa9c19ad1b4d6d57e5b22e25a9876cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;633&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"633\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9aa9c19ad1b4d6d57e5b22e25a9876cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9aa9c19ad1b4d6d57e5b22e25a9876cf_b.jpg\"/></figure><p><b><i>Constructor(props)</i></b></p><ul><li>可选，CRA 使其变得受欢迎，默认包含 JavaScript 的类字段声明。声明是否通过类中的箭头函数去绑定方法是没有意义的。类似的状态也可以初始化为类属性。</li><li>仅用于 ES6 类中初始化对象的本地状态和绑定方法。</li></ul><p><b><i>componentDidMount()</i></b></p><ul><li>在这里进行 Ajax 调用。</li><li>如果你需要事件监听器，订阅等功能，可以在此处添加。</li><li>你可以在这里使用 <code>setState</code>（但是它会使组件重新渲染）。</li></ul><p><b><i>componentWillUnmount()</i></b></p><ul><li>清除所有仍在进行的东西 —— 例如，Ajax应该被中断，取消订阅，清除定时器等等。</li><li>不要调用 <code>setState</code>，因为它没有意义，因为组件将会被卸载（并且你会得到一个警告）。</li></ul><p><b><i>componentDidUpdate(prevProps, prevState, snapshot)</i></b></p><ul><li>在组件刚刚更新完毕时执行（在开始渲染时不会）。</li><li>有三个可选的参数（以前的props，以前的 state 和只有在你的组件实现 <code>getSnapshotBeforeUpdate</code> 时才会出现的快照 ）。</li><li>仅当 <code>shouldComponentUpdate</code> 返回true时才会执行。</li><li>If you use <code>setState</code> here, you should guard it or you will land in an infinite loop.</li><li>如果你在这里用到了 <code>setState</code>，应该保护它，否则将会陷入无限循环。</li></ul><p><b><i>shouldComponentUpdate(nextProps, nextState)</i></b></p><ul><li>仅用于性能优化。</li><li>如果返回 false，则<b>不会</b>调用渲染器。</li><li>如果重写的 SCO 只是对 props/state的浅层比较，可以使用 <code>PureComponent</code>。</li></ul><p><b><i>getSnapshotBeforeUpdate()</i></b></p><ul><li>可用于保存一些与当前 DOM 有关的信息，例如当前的滚动位置，稍后可在 <code>componentDidUpdate</code> 中重用，用来恢复滚动的位置。</li></ul><p><b><i>componentDidCatch(error, info)</i></b></p><ul><li>应该发生日志记录错误的地方。<br/></li><li>可以调用 <code>setState</code>，但在以后的版本中，将会在静态方法<code>getDerivedStateFromError(error)</code> 中被删除，它将通过返回一个值来更新状态。</li></ul><p>还有两种静态方法，在其他的段落中提到过</p><p><b><i>static getDerivedStateFromError(error)</i></b></p><ul><li>此处提供错误信息。</li><li>应返回一个对象值，该值将会更新可用于处理错误的状态（通过显示内容）。</li><li>由于它是静态的，因此无法访问组件实例本身。</li></ul><p><b><i>static getSnapshotBeforeUpdate(props, state)</i></b></p><ul><li>应该在 props 随时间变化的情况下使用 —— 例如根据 React docs，它可能用于转换组件。</li><li>由于它是静态的，因此无法访问组件实例本身。</li></ul><p>注意，目前还有更多可用的方法，但它们可能会在 React 17.0 中被删除，所以就不在这里没有提起了。</p><h2><b>State vs. Props</b></h2><p>我们先从 <i>Props</i> 开始，因为它更容易解释。Props 是传给组件的属性，以后可以在组件显示信息或业务逻辑时重用它 。</p><div class=\"highlight\"><pre><code class=\"language-text\"> 1import React, { Component } from &#39;react&#39;;\n 2\n 3export default class App extends Component {\n 4   render() {\n 5\n 6       return (\n 7           &lt;div&gt;\n 8               &lt;HelloWorld name=&#34;Someone :)&#34;/&gt;\n 9           &lt;/div&gt;\n10       );\n11   }\n12}\n13\n14const HelloWorld = (props) =&gt; &lt;div&gt;Hello {props.name}&lt;/div&gt;\n</code></pre></div><p>在上面的例子中，<code>name</code> 是一个 prop。prop 是只读元素，不能直接在子组件中更改。很多人有一种不太好的习惯，那就是把 prop 复制到 state ，然后再对 state 进行操作。当然有时候你希望执行类似 “在提交之后去更新父组件的初始状态” 这样的操作，但这种情况非常少见 —— 在这种情况下，更新初始状态可能有意义。另外不仅可以给子组件传递字符串这样的 prop ，还可以传递数字、对象、函数等。</p><p>prop 还有一个更有用的东西叫做 <code>defaultProps</code>，这是一个静态字段，它可以告诉你组件的默认 prop 是什么（比如当它们没有传递给组件时）。</p><p>在“状态提升”的情况下，其中一个组件（父组件）具有稍后由其子组件重用的状态（例如，一个子组件用来显示而另一个用来编辑），那么我们需要将该功能从父组件传递给子组件。 它允许我们更新父级的本地状态。<br/>另一方面，<b>状态</b>是一个可以修改的本地状态，但是通过 <code>this.setState</code> 间接修改。如果直接去改变状态，组件将不会感知到，更不会因为状态的改变而重新渲染。</p><p>**SetState **是一种更改本地状态对象的方法（通过执行浅层合并），之后组件通过重新渲染自己来响应它。请注意，在使用 <code>setState</code> 之后，<code>this.state</code> 属性不会立即对更改（它具有异步性质）作出反应，因为优化的原因，可能会将 <code>setState</code> 的几个实例一起进行批处理。调用它的方式有好几种，其中一种方式允许我们在对状态进行更新能够后立即对组件执行某些操作：</p><ul><li><code>setState({value: ‘5’})</code></li><li><code>setState((state, props) =&amp;gt; ({value: state.name + “‘s”}))</code></li><li><code>setState([object / function like above], () =&amp;gt; {})</code> —— 这个表单允许我们附加 <code>callback</code>，当 state 显示我们想要的数据时被调用（在第一个参数）。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\"> 1import React, { Component } from &#39;react&#39;;\n 2\n 3export default class App extends Component {\n 4   state = {\n 5       name: &#39;Someone :)&#39;\n 6   }\n 7\n 8   onClick = () =&gt; this.setState({ name: &#39;You&#39; })\n 9\n10   render() {\n11       return (\n12           &lt;div&gt;\n13               &lt;HelloWorld name={this.state.name} onClick={this.onClick}/&gt;\n14           &lt;/div&gt;\n15       );\n16   }\n17}\n18\n19const HelloWorld = (props) =&gt; &lt;div onClick={props.onClick}&gt;Hello {props.name}&lt;/div&gt;\n</code></pre></div><h2><b>React Context</b></h2><p>React 最近稳定的 Context API（已经在 React 中存在了相当长的时间，尽管被 Redux 等一些最受欢迎的库广泛使用，却是一个实验性功能）有助于我们解决一个问题：Props drilling。简而言之 Props drilling 是在结构中深入传递 props 的一种方式 —— 例如，它可以是组件的某种主题、针对特定语言的本地化、用户信息等。在 Context出现之前（或者更确切地说，在它变成非实验功能之前），它是通过递归方式从父级一直传递到到子级的最后一级的来进行钻取的（显然还有可以解决这个问题的 Redux）。请注意，此功能仅仅用于解决 Props drilling 的问题，并且不能替代 Redux 或 Mobx 等。当然如果你只使用状态管理库，则可以随意替把它替换掉。</p><h2><b>总结</b></h2><p>这是我们的React教程的第一部分。在后续的文章中，我们会设计更多高级主题，包括样式和类型检查，以及生产部署和性能优化。</p><p><b>欢迎关注京程一灯公众号：jingchengyideng，获取更多前端干货内容。</b></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }, 
                {
                    "tag": "前端架构", 
                    "tagLink": "https://api.zhihu.com/topics/19710481"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57368777", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 2, 
            "title": "vue-router原理", 
            "content": "<p>vue-router原理主要分成两部分，一部分是安装，另一个是实现数据监控，页面跳转。</p><h2>安装</h2><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">install</span><span class=\"p\">(</span><span class=\"nx\">Vue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">mixin</span><span class=\"p\">({</span>\n       <span class=\"nx\">beforeCreate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n           <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n           <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_router</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n           <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">defineReactive</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_route&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_router</span><span class=\"p\">.</span><span class=\"nx\">histroy</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">)</span>\n\n           <span class=\"nx\">registerInstance</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n       <span class=\"p\">}</span>\n       <span class=\"nx\">destoryed</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n           <span class=\"nx\">registerInstance</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n       <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>通过混入beforeCreate实现，路由的绑定和监听操作。初始化router。调用Vue工具类方法defineReactive，当router发生改变时，页面能及时响应更新。最后通过registerInstance来实现对<code>router-view</code>的挂载操作。</p><h2>数据监控和页面跳转</h2><p>路由更新 -&gt; 视图。路由发生变化（hash有hashChange监听方法，history有popstate），改变浏览器里的地址，再更新视图。采用hash或者history的路由模式，前端实现路由跳转。history模式中，主要通过pushstate、replaceState、go实现，它们负责改变浏览器的路由，但是不跳转，这就实现了前端的路由，而popstate是监听方法，处理路由改变后，前端页面的显示问题。就是用栈来实现。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;hashChange&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// ... });\n</span><span class=\"c1\"></span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;popstate&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// ... });\n</span></code></pre></div><h2>如何实现hash和history路由</h2><h2>hash</h2><blockquote> hash路由一个明显的标志是带有#,我们主要是通过监听url中的hash变化来进行路由跳转。<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Router</span> <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentUrl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;load&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refresh</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;hashChange&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refresh</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">router</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">callback</span> <span class=\"o\">|</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">refresh</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentUrl</span> <span class=\"o\">=</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">hash</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">;</span>\n        <span class=\"c1\">// slice\n</span><span class=\"c1\"></span>        <span class=\"c1\">// slice方法，slice(start, end)， 会返回一个新函数，而splice会修改原函数\n</span><span class=\"c1\"></span>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentUrl</span><span class=\"p\">]();</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div><p>页面代码</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span> \n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#/&#34;</span><span class=\"p\">&gt;</span>turn white<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> \n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#/blue&#34;</span><span class=\"p\">&gt;</span>turn blue<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> \n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#/green&#34;</span><span class=\"p\">&gt;</span>turn green<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> \n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\nwindow.Router  =  new Router();\n\nvar content = document.querySelector(&#39;body&#39;);\n// change Page anything\nfunction changeBgColor(color) {\n    content.style.backgroundColor = color;\n}\nRouter.route(&#39;/&#39;, function() {\n    changeBgColor(&#39;white&#39;);\n});\nRouter.route(&#39;/blue&#39;, function() {\n    changeBgColor(&#39;blue&#39;);\n});\nRouter.route(&#39;/green&#39;, function() {\n    changeBgColor(&#39;green&#39;);\n});</code></pre></div><h2>histoty</h2><blockquote> HTML5新路由方案，History API<br/> </blockquote><p>常用API</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">back</span><span class=\"p\">();</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">forward</span><span class=\"p\">();</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">go</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n</code></pre></div><p><code>history.pushState</code>用于在浏览历史中添加历史记录,但是并不触发跳转,此方法接受三个参数，依次为：</p><blockquote> state:一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。 <br/>title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。 <br/>url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。<br/> </blockquote><p><code>history.replaceState</code>方法的参数与<code>pushState</code>方法一模一样，区别是它修改浏览历史中当前纪录,而非添加记录,同样不触发跳转。</p><p><code>popstate</code>事件,每当同一个文档的浏览历史（即history对象）出现变化时，就会触发<code>popstate</code>事件。</p><p>需要注意的是，仅仅调用<code>pushState</code>方法或<code>replaceState</code>方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用back、forward、go方法时才会触发。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Router</span> <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_bindPopstate</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 初始化路由\n</span><span class=\"c1\"></span>    <span class=\"nx\">init</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">replaceState</span><span class=\"p\">({</span><span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">},</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]();</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 将路径和对应的回调函数放到hashMap中\n</span><span class=\"c1\"></span>    <span class=\"nx\">route</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">callback</span> <span class=\"o\">||</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 触发路由对应的回调\n</span><span class=\"c1\"></span>    <span class=\"nx\">go</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pushstate</span><span class=\"p\">({</span><span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">},</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">_bindPopstate</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;popstate&#39;</span><span class=\"p\">,</span> <span class=\"nx\">e</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">?</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">path</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routers</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">]();</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>参考文章，<a href=\"https://zhuanlan.zhihu.com/p/37730038\" class=\"internal\">前端路由简介以及vue-router实现原理</a></p><hr/><p>写作时间：20190214</p>", 
            "topic": [
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "VueRouter", 
                    "tagLink": "https://api.zhihu.com/topics/20070653"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "火星人飞跃彩虹", 
                    "userLink": "https://www.zhihu.com/people/a685be4f8ab5e17027d31a694571007d", 
                    "content": "厉害👍🏻", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<a class=\"comment_sticker\" href=\"https://pic3.zhimg.com/v2-6eeb544aa5ce6be1e6a6add75e436746.gif\" data-sticker-id=\"951517104676491264\"> [哈哈]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "火星人飞跃彩虹"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53401305", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "迎猪送狗，2019", 
            "content": "<h2>总结2018</h2><p>宏观上看，是成功的一年，实现了升职加薪，进入了大互联网公司。以及见识的提高，心智的成熟，并敢于取舍。算了，水平太差，吹牛也吹不出几个词。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>先从我比较满意的地方说起</h2><p>1、跳槽，从亚信跳到了小米。算是一个人生一个转折点。通过自己的努力进入了互联网大公司。</p><p>2、阅读书籍，今天大概达成了一般人的成就，看十几本书。《人类简史》、《生命是孤独的旅程》、《见识》、《数学之美》、《素数之恋》、《写给大家看的设计书》、《呼啸山庄》、《双城记》、《为什么精英都是时间控》、《围城》、《金字塔原理》、《Node.js：来一打C++扩展》、《算法》、《第二次世界大战战史》、《计算机网络：自顶向下方法》（需重温）、《深入理解计算机系统》（需重温）。</p><p>3、坚持运动。今年从2月份开始，基本每天都有跑步，2-3km，坚持到了现在。游泳也基本每周一次，不过，最近冬天了，去的少。</p><p>4、学习算法，一直在学习王争老师的《数据结构与算法之美》的教程，持续了三个多月。现在处于理论阶段，明年的目标，是把所有的算法用JS实现一遍。</p><p>5、前端领域，阅读了前端的Vue源码，虽然只是粗糙的阅读了，但是基本了解了Vue的整个架构。自己搭建了Webpack配置，折腾了很多次，对于Webpack的配置基本了解，可以考虑写一篇Webpack4的自定义配置文章。2018年是我技术快速增长的一年。</p><p>6、观看电影，平均1周看一部电影，我拉了一个Excel，总共69部。”墙裂“推荐（都是豆瓣高分电影）：《彗心的那一夜》、《天才枪手》、《触不可及》、《看不见的客人》、《消失的爱人》、《敦刻尔克》、《出租车司机》、《寻梦环游记》、《楚门的世界》、《无问西东》、《闻香识女人》、《头号玩家》、《死亡诗杜》、《登堂入室》、《美丽人生》、《忠犬八公的故事》、《本杰明.巴顿奇事》、《控方证人》、《少年派的奇幻漂流》、《我不是药神》、《穿条纹睡衣的男孩》、《辛德勒名单》、《活着》、《朗读者》、《在海底出击》、《遗愿清单》、《启示录》。如果只能<b>推荐三部</b>，那《触不可及》、《彗心的那一夜》、《登堂入室》。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>不满意的地方</h2><p>1、尝试脱单，一直失败。个人原因占主导，眼光偏高。</p><p>2、写了一段时间的知乎专栏，发现关注人数很少。首先自己写的内容不够干货，至少需要经过深层次的思考和多次的验证，才能上得了台面。其次知乎也不是前端或者程序员的主战场，考虑转到掘金。并且写的内容杂乱无章，偏记录，后面需要改成一个主线，生活中和工作中的内容变成支线。</p><p>3、一直想写服务端代码，但是用nodejs写了一个Todolist后端服务之后，就没有后续了。明年肯定要有一个自己的完整的后端项目。</p><p>4、发迹线已经有明显向后的趋势，我明明已经不熬夜，多运动了！感慨基因的强大。</p><p>5、定了未完成的计划。<code>明年准备继续完成的：</code>axios源码阅读，阅读《算法》书，完成《计算机网络自顶向下方法》书评，研究Proxy，并且完成研究文章，阅读Vue-router源码。<code>放弃的：</code>Koa开发（学习cookie验证，事务，日志管理，理解next），学习Go或者机语言。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>2019目标</h2><p>1、脱单，这是重中之重。</p><p>2、前端专栏，我准备在掘金或者知乎上开一个专栏，从前端基础开始写起，到React的相关教程，最后涉及服务端的一些内容。至少关注量达到1000。</p><p>3、读书计划，阅读20本以上的书</p><p>4、在职研究生，报名在职。</p><p>5、完成一个完整的后端项目，可以是个人，可以是工作中的项目。</p><p>6、完成一个Electron项目，代码至少在5000以上，页面不得少于10个。</p><p>7、研究react源码，写下研究文章。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>结束语</h2><p><b>我决定把技术沉淀，明年专门开设一个专栏，从前端基础写起，帮助更多的前端小白成长（最主要的还是吸粉）。希望能和大家一起成长。</b></p><hr/><p>写作时间：20181226</p>", 
            "topic": [
                {
                    "tag": "2019", 
                    "tagLink": "https://api.zhihu.com/topics/20171606"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50468292", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 2, 
            "title": "html2canvas与失效的二维码", 
            "content": "<h2>需求导向</h2><p>最近做H5活动时，又遇到一个常规的需求，将页面生成一张图片，提示用户长按保存。类似最近看到的微视的一个测试性格的活动。</p><p>效果图如下，点击链接可测试，请在微信里打开，<a href=\"https://link.zhihu.com/?target=https%3A//h5.weishi.qq.com/weishi/authproxy/domain/billboard%3Fticket%3D%26srctype%3D61%26sid%3D%26g_f%3D5757%26_wv%3D1%26needlogin%3D1%26navstyle%3D0%26wxScope%3Dsnsapi_userinfo%26from%3Dgroupmessage%26isappinstalled%3D0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测试链接</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-792a28362148a3f228ce593ec77d1111_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2339\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-792a28362148a3f228ce593ec77d1111_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;2339&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2339\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-792a28362148a3f228ce593ec77d1111_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-792a28362148a3f228ce593ec77d1111_b.jpg\"/></figure><h2>实现原理</h2><p>我们利用html2canvas这个前端库，先将html页面转换成canvas，再通过这个API的回调，调用生成base64的方法，最终将图片赋值给img标签的src属性。</p><h2>代码实现</h2><p><b>1.html2canvas转换成base64</b></p><p>这里需要注意，html2canvas入参必须要原生JS的DOM对象</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">bodyToImg</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 转换成图片\n</span><span class=\"c1\"></span>  <span class=\"nx\">html2canvas</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#body&#39;</span><span class=\"p\">)).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">canvas</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">dataURL</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">toDataURL</span><span class=\"p\">(</span><span class=\"s1\">&#39;image/jpeg&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;#bodyImg&#39;</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">&#39;src&#39;</span><span class=\"p\">,</span> <span class=\"nx\">dataURL</span><span class=\"p\">);</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;#bodyImg&#39;</span><span class=\"p\">).</span><span class=\"nx\">show</span><span class=\"p\">();</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;#body&#39;</span><span class=\"p\">).</span><span class=\"nx\">hide</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b>2.获取二维码图片</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;xxx&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">imgUrl</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">origin</span><span class=\"si\">}</span><span class=\"sb\">/getQRCode.action?width=129&amp;height=129&amp;url=</span><span class=\"si\">${</span><span class=\"nx\">url</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"nx\">convertImgToBase64</span><span class=\"p\">(</span><span class=\"nx\">imgUrl</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">base64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">qrCode</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">base64</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">qrCode</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">validateImages</span><span class=\"p\">();</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">validateImages</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">qrCode</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">complete</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">clearInterval</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">);</span>\n      <span class=\"nx\">bodyToImg</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span> <span class=\"mi\">300</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">clearInterval</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">convertImgToBase64</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">outputFormat</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">canvas</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;CANVAS&#39;</span><span class=\"p\">);</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">(</span><span class=\"s1\">&#39;2d&#39;</span><span class=\"p\">);</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Image</span><span class=\"p\">();</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">crossOrigin</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Anonymous&#39;</span><span class=\"p\">;</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">height</span><span class=\"p\">;</span>\n    <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">width</span><span class=\"p\">;</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">drawImage</span><span class=\"p\">(</span><span class=\"nx\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">dataURL</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">toDataURL</span><span class=\"p\">(</span><span class=\"nx\">outputFormat</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;image/png&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">callback</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">dataURL</span><span class=\"p\">);</span>\n    <span class=\"nx\">canvas</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>这里做一个解释，后端Java使用的是一个<code>zxing二维码</code>这个库，前端将图片的宽度，图片的高度，以及二维码所对应的url传给后端。后端再调用<code>zxing</code>这个库生成二维码。</p><p>这里有一个问题，图片是保存在<code>zxing</code>这个库的服务器的，后端Java只是做了一层代理，而html2canvas对于跨域的资源是无法解析的。所以我们调用后端服务，将图片的绝对地址转成base64位。</p><p>看一下关键的<code>validateImages</code>函数。将获取的base64位图片赋值给src属性，在图片加载的onload事件里，做一个校验。通过图片加载提供的complete属性，轮询查询图片是否加载完毕，待图片加载完成，再调用html2canvas生成最终的大图。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最终实现效果</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-87cbd9a1225949755a6c54c562d7f7ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"1334\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic1.zhimg.com/v2-87cbd9a1225949755a6c54c562d7f7ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;1334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"1334\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic1.zhimg.com/v2-87cbd9a1225949755a6c54c562d7f7ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-87cbd9a1225949755a6c54c562d7f7ec_b.jpg\"/></figure><hr/><p>写作时间：20181118</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Canvas", 
                    "tagLink": "https://api.zhihu.com/topics/19575286"
                }, 
                {
                    "tag": "QR Code", 
                    "tagLink": "https://api.zhihu.com/topics/19570965"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50225582", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 2, 
            "title": "在前端工程化中使用特殊字体", 
            "content": "<h2>需求导向</h2><p>作为一个前端，肯定遇到过这个需求，UI做出来的设计稿利用了特殊字体。虽然对于前端来说，管你什么字体，我微软雅黑通吃，但是有时候UI会很执着，“这个一定要实现，你直接切一张图片上去也行”。为了省事，我们肯定是直接切一张图上去啊，但是每次切完图之后，图片都需要加工优化。每次替换文字都要重新编辑psd图 -&gt; 切图 -&gt; 优化图片。所以还原高保真的时候要遵循一个原则，能用html实现的就不要用图片代替，美言之为了性能，其实还是为了无止境的需求变更。</p><p>我们知道使用特殊字体，只要引入字体的ttf文件（ttf文件，这里不做介绍，可自行百度）。如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">@font-face {\n  font-family: &#34;fashion&#34;;\n  src: url(&#39;./fashion.ttf&#39;) format(&#39;truetype&#39;);\n  font-weight: normal;\n  font-style: normal;\n}\n.fashion-font {\n  font-family: &#34;fashion&#34;;\n}</code></pre></div><p>但是字体文件一般包含所有文字，字体文件大小几M，对于前端来说，肯定是不能接受的，所以我们需要对ttf文件进行打包操作，只引用用到的文字，这里我们称静态文字，后面会介绍动态文字的解决方案。</p><h2>font-spider</h2><p><code>font-spider</code>是一个npm库，可以解析html用到特殊字体的文字，按需打包，替换原来的ttf文件，并且在ttf文件目录下生成一个<code>.font-spider</code>文件夹存放原来总的ttf文件。使用下面命令可进行打包操作：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo font-spider --debug src/**/index.html</code></pre></div><p><code>--debug</code>命令可以查看解析过程。</p><h2>结合webpack</h2><p>如果你是传统的多页面应用，这样的打包方式是没问题。但是现代前端工程化之后，前端只会有一个<code>index.html</code>入口文件，且css文件是通过js引入的，<code>font-spider</code>无法解析js里的css文件，所以那些引用<code>font-family: &#34;fashion&#34;;</code>字体的文字都会失效。这里提供两个解决方案：</p><p><b>1.在html里引入绝对路径的css文件，<code>https://www.baidu.com/index.css</code>。</b></p><p><b>2.采用相对路径，基于网站根目录。一般情况下webpack工程下都会在项目根目录下建一个<code>static</code>目录存放静态文件。路径如下：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;link rel=&#34;stylesheet&#34; href=&#34;./static/mgday2018/font/font.css&#34; type=&#34;text/css&#34;&gt;</code></pre></div><p>这里有一点需要注意，打包的时候，<code>font-spider</code>是根据index.html检索css所对应的相对目录，比如项目有多个html文件，所以他们所对应的字体文件的位置需要根据html所在的位置。而且你使用字体的方式，不是在使用的地方上加<code>font-family: &#34;fashion&#34;;</code>样式，而是通过class的方式引入（如class=&#34;fashion-font&#34;），这样打包的时候才能被依赖。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;link rel=&#34;stylesheet&#34; href=&#34;./static/mgday2018/font/font.css&#34; type=&#34;text/css&#34;&gt;\n  &lt;!-- 下面的地址是为了兼容font-spider的打包地址 --&gt;\n  &lt;link rel=&#34;stylesheet&#34; href=&#34;../../../static/mgday2018/font/font.css&#34; type=&#34;text/css&#34;&gt;</code></pre></div><p>最终实现效果</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f6ec7eb5b9c07eec53aef1e660ffdcc0_b.jpg\" data-rawwidth=\"1496\" data-rawheight=\"1148\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1496\" data-original=\"https://pic1.zhimg.com/v2-f6ec7eb5b9c07eec53aef1e660ffdcc0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1496&#39; height=&#39;1148&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1496\" data-rawheight=\"1148\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1496\" data-original=\"https://pic1.zhimg.com/v2-f6ec7eb5b9c07eec53aef1e660ffdcc0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f6ec7eb5b9c07eec53aef1e660ffdcc0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>动态文字</h2><p>有些人会说你这是静态文字啊，有些文字是通过后端接口返回的，我们无法提前打包啊。这里提供三个解决方案：</p><p><b>1.利用fontmin.js</b></p><p>fontmin.js允许你提前将需要的文字，提前打包，即使文字不在html里。但这其实这只是解决文字不在html里，还是没解决后端接口返回的文字的问题。参考链接： <a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/kkfd1002/article/details/80073079\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">移动端引入的字体文件过大处理方法</a>。</p><p><b>2.实时打包</b></p><p>原理：搭建一个node中间层，每次接口返回的时候，先调用node服务fontmin，打包接口中用到的文字，然后返回一个包含字体文件的静态地址给前端，前端拿到接口数据和一个静态css地址，先加载css地址，再加载文字。但是这会造成很大的资源浪费，且每次都会生成一个字体文件。这里再提供一种思路，node中间层每次获取接口文字，重新编译页面中所有需要用到的字体（这里会有缓存对比，如果文字都已经包含，则不重新打包），再把css地址和数据返回给前端。但无论如何，只能针对几个接口开放实时打包，否则再大的服务器也抗不住这种压力。</p><p><b>3.引入整个字体文件</b></p><p>回到老问题，引入整个字体文件。先打包首屏所需要用到的字体文件，预先加载。再通过延迟加载和cdn，加载整个字体文件。这样能比较好的实现动态文字的问题。</p><h2>总结</h2><p>可见很明显，动态的文字其实不适合特殊字体，无论怎么优化，都需要浪费很多资源，性能也是一个问题。所以我们只能期望将来某一天，网速飞快了，几M的文件能瞬间加载了，这个问题就迎刃而解了。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>写作时间：20181118</p>", 
            "topic": [
                {
                    "tag": "font-family", 
                    "tagLink": "https://api.zhihu.com/topics/20040708"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }
            ], 
            "comments": [
                {
                    "userName": "oO晨晨晨晨晨Oo", 
                    "userLink": "https://www.zhihu.com/people/681dc36404ee376a17ccef1236b28bea", 
                    "content": "<p>很有用</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "oO晨晨晨晨晨Oo"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47850545", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 12, 
            "title": "《Node.js来一打c++扩展》书评", 
            "content": "<p>刚读完这本书，有几章没读，4 C++扩展实战初探，5 Node.js原生抽象————NAN，7 实战————文件监视器，9 N-API————下一代Node.js C++扩展开发方式。别问我为什么没有读这几章，没有C++基础，读了也基本理解不了什么。</p><p>下面讲讲这本书的优点吧，</p><p>1）对Nodejs包管理的介绍，主要介绍Common.js的，模块管理。</p><p>2）如何在Nodejs中加入C++扩展模块，无论现有可用的C++库，还是自己封装的C++库。</p><p>3）Chrome V8基础的介绍，此前我对于Chrome V8的印象是，应该很牛逼，毕竟汽车里的V8发动机，有8个缸。这一章内容比较多，估计读者是为了照顾部分像我一样的前端工作者，从这几个方面讲解。</p><p>一、基础概念，内存管理，隔离实例（Isolate），上下文（Context），脚本（Script）。内存管理主要是新生代内存管理和老生代内存管理，新生代采用Scanvenge算法，老生代采用标记清除（Mark-Sweep），标记整理（Mark-compact），惰性清理。隔离实例实际上全称是Isolate Instance，是一个V8引擎的实例，但是实例之间互不干扰。上下文就是平时我们JS中执行环境的上下问。脚本即运行编译好的JS脚本，前端用不到。   二、句柄（Handle），V8中优化垃圾回收机制（GC）的一个东西，有好几种句柄类型，分别对应不同的生命周期。与指针不同，是V8中实现的在堆内存中JS对象的一个引用。   三、模板，基于C++中Template类，继承实现了函数模板（Function Template），对象模板（Object Template），即我们平时使用的Object类和Function类都出于此。   四、常用数据类型，基本上是V8对JS中常用对象的封装。   五、异常机制，try-catch，try-catch是C++一个异常类的封装，在其中也学到了JS中除了有Error抛出异常外，还有数据范围错误（RangeError），引用错误（ReferenceError），语法错误（SyntaxError）。</p><p>4）libuv，Nodejs中底层事件循环（event loop），用的就是这个东西，它是跨平台的，支持Unix，Linux，Windows。虽然Nodejs是单线程的（不开启多线程模式），但是底层的libuv是多线程模式，以非阻塞的方式执行Nodejs任务。本质还是通过轮询等方式询问执行结果。</p><p>其他我也不多介绍了，毕竟水平有限，即将我期间补充了一些C++的基础知识，但是看到成堆的C++代码，还是感到头疼。不过书中至少有一半的内容（即非C++内容大概一半）纯前端还是能理解。如果你想要了Chrome V8或者是Nodejs底层原理，这本书是一本不错的推荐。</p><p>结束语，如文章有错误，麻烦及时通知我，此文仅为我个人看法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-31c5181a136dee1a9f6eda2f7d9a9559_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-31c5181a136dee1a9f6eda2f7d9a9559_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2448&#39; height=&#39;3264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-31c5181a136dee1a9f6eda2f7d9a9559_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-31c5181a136dee1a9f6eda2f7d9a9559_b.jpg\"/></figure><p>================</p><p> 写作时间：20181028</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/46082463", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 21, 
            "title": "《数据结构与算法之美》笔记", 
            "content": "<h2>前言</h2><p>最近在极客App上学习王争老师（前Google员工）的课程，《数据结构与算法之美》，记录一下学习内容。之前很多高大上的内容，大O表示法，时间复杂度，空间复杂度，最大期望值算法，最好、最坏、平均、均摊时间复杂度也被拨开云雾，其实这些都是很简单的知识点。</p><p>教程链接：<a href=\"https://link.zhihu.com/?target=https%3A//time.geekbang.org/column/126\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据结构与算法之美</a></p><p>现实生活中我们很少用到数据结构和算法，即使用到了，也完全可以通过牺牲性能或者增加代码量来解决这个问题，所以有些人就认为数据结构和算法，对我毫无作用，没有这些我照样能实现功能。学习数据结构和算法不仅仅是可以用更合理的方式实现程序，使应用的程序性能更佳，更重要的是，它会影响你的程序思维，帮助你理解某些框架的底层实现，更方便你造轮子。操作系统、计算机网络、数据算法和数据结构，这些都是你成长避不开的拦路虎，提前拥有这些素养，会让你更加从容面对未来科技的发展。</p><p>下面是我对专栏前五章的笔记。</p><h2>数据结构和算法</h2><p>先简单介绍一下数据结构和算法的关系。数据结构和算法是相辅相成的，<b>数据结构是为算法服务的，算法要作用在特定的数据结构。</b></p><p>下图是算法和数据结构相关知识的总览</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c4b680c0e1b75b66b8b1932a6e8edd60_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1534\" data-rawheight=\"3338\" class=\"origin_image zh-lightbox-thumb\" width=\"1534\" data-original=\"https://pic1.zhimg.com/v2-c4b680c0e1b75b66b8b1932a6e8edd60_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1534&#39; height=&#39;3338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1534\" data-rawheight=\"3338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1534\" data-original=\"https://pic1.zhimg.com/v2-c4b680c0e1b75b66b8b1932a6e8edd60_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c4b680c0e1b75b66b8b1932a6e8edd60_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当然我们并不需要全部掌握它们，王争老师列举了常用20个用法。10个数据结构：<code>数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie树</code>；10个算法：<code>递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法</code>。</p><h2>时间复杂度和空间复杂度分析</h2><p>数据结构和算法本身就是为了解决“快”和“省”的问题。让代码运行更快，更省储存空间。那首先我们就要先了解自己写的代码复杂度，这里就需要用到时间复杂度和空间复杂度分析。</p><p>1.大O复杂度表示法</p><p>算法的执行效率，粗略地讲就是算法的执行时间。下面的代码是求1，2，3...n累加的和。</p><div class=\"highlight\"><pre><code class=\"language-text\">int cal(int n) {\n  int sum = 0;\n  int i = 1;\n  for (; i &lt;= n; ++i) {\n    sum += i;\n  }\n  return sum;\n}</code></pre></div><p>从CPU的角度，这段代码的操作是，<code>读数据 -&gt; 运算 -&gt; 写数据</code>，如果每一个操作都是unit_time，第二行和第三行是一个unit_time，而第四行和第五行的for循环是2n个unit_time，加上return操作。时间复杂度就是<b>2n+3</b>，一般计算的时候会把常量省略，所以这个程序的时间复杂度就是n。所以就可以推断出，所以代码的执行时间T(n)与每行代码的的执行次数成正比。</p><p>引出重要概念，<b>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正。</b></p><div class=\"highlight\"><pre><code class=\"language-text\">T(n) = O(f(n))</code></pre></div><p>2.复杂度分析法则</p><ul><li>单段代码，看高频，循环的次数。</li><li>多段代码取最大，如果一段代码里单次循环和多重循环，忽略单词，取多重。</li><li>嵌套代码求乘积，比如递归和多重循环。</li><li>多个规模求加法，比如方法有两个参数控制两个循环的次数，这时候，就需要取两者复杂度相加。</li></ul><p>3.常用的复杂度级别</p><p>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长，包括，O(1)(常数阶)、O(logn)(对数阶)、O(n)(线性阶)、O(nlogn)(线性对数阶)、O(n^2)(平方阶)、O(n^3)(立方阶)。</p><p>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这列算法性能极差。包括，O(2^n)(指数阶)、O(n!)(阶乘阶)</p><h2>复杂度分析的四个概念</h2><ul><li>最坏情况时间复杂度：代码在最坏情况下执行的时间复杂度。</li><li>最好情况时间复杂度：代码在最理想情况下执行的时间复杂度。</li><li>平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。</li><li>均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</li></ul><p>区分平均时间复杂度和均摊时间复杂度</p><p>1.平均时间复杂度</p><p>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。</p><p>2.均摊时间复杂度</p><p>两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。</p><h2>书籍推荐</h2><ul><li>入门：《大话数据结构》和《算法图解》</li><li>经典：《算法导论》、《算法》</li><li>全面：《数据结构和算法分析》</li><li>终极：《计算机程序设计艺术》</li></ul><h2>总结</h2><p>本文主要介绍了数据结构和算法的关系，以及两种分析程序复杂度的方式，时间复杂度和空间复杂度。引出大O时间复杂度表示法，T(n) = O(f(n))。也介绍了如何应用复杂度分析法则，常用的复杂度级别。最后介绍复杂度分析的四个概念，用于衡量复杂度的维度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>===============</p><p>写作时间：20181005</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44113974", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 10, 
            "title": "vue项目升级webpack4", 
            "content": "<h2>前言</h2><p>因为现代脚手架越来越完善，打包工具就像一个黑盒子，我们越来越不用关心其内部实现，但是随着项目的增大，页面刷新速度越来越慢，打包体积越来越大，打包时间甚至超过了后端java的打包编译时间，这时候你还能忍受吗？</p><p>我们团队也有内部自定义脚手架，基于vue-cli，改造和新增了一些功能，webpack版本是3.12.0，刚开始打包速度接近2分钟，用webpack DllPlugin插件优化（DllPlugin优化可以参考这篇文章，<a href=\"https://link.zhihu.com/?target=http%3A//blog.caichengnan.com/dll-plugin/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">webpack打包体积和速度优化</a>）之后，也需要50秒，随着项目代码越来越多，代码热更新（HMR，webpack的HotModuleReplacementPlugin插件）时间也越来越长，eslint解析文件内错误语法的时间也变长了，所以趁着webpack4发布稳定版本，我做了一次更新。</p><h2>webpack4做了哪些更新？</h2><p>我介绍几个更新的核心的功能，其它请移至这篇文章，<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/JAZm2LIlHtwltCY0Y3G7Yw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手摸手，带你用合理的姿势使用 webpack 4（上）</a>。</p><ol><li> optimization.splitChunks代替CommonsChunkPlugin<br/> </li><li> 废除Uglifyjs插件，采用.minimize配置的方式<br/> </li><li> 废除css插件extract-text-webpack-plugin，引入mini-css-extract-plugin<br/> </li><li> 热更新加速，更好的利用缓存，加快本地刷新速度。<br/> </li><li> Last but not least，学习了rollup、parcel简易配置化的优势，减少了用户需要配置项。比如默认自带entry和output配置，无需配置。<br/> </li></ol><p>从这些更新能看出，webpack4的版本迭代可算是诚意满满。</p><h2>vue中，webpack3更新至webpack4</h2><h2>升级webpack和相关依赖</h2><p>升级webpack和所有的依赖，但是这里面也有坑，比如我升级了babel（babel的配置，可参考这篇文章，<a href=\"https://link.zhihu.com/?target=https%3A//markus.oberlehner.net/blog/setting-up-a-vue-project-with-webpack-4-and-babel-7/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Setting up a Vue.js Project with webpack 4 and Babel 7</a>），却发现它的配置方式改变了，还有postcss配置。所以我建议先升级webpack相关所有的依赖，包括”webpack-dev-server“，“webpack-merge”，“html-webpack-plugin”等。新版本中将命令行单独拆分出去了，所以还需要安装“webpack-cli”。当然你的node版本不能过低，node8.x已经是稳定版本了，可以升级到8的版本，如果有老项目维护，可以通过nvm管理。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 哪些依赖可以升级</span>\nyarn outdated\n\nyarn add webpack4 webpack-cli webpack-dev-server webpack-merge html-webpack-plugin --save</code></pre></div><h2>通过mode控制环境</h2><p>webpack4不再通过NODE_ENV变量，或者webpack -p控制是开发还是生产等环境，而是通过mode的模式，在webpack.xxx.config.js添加相应的配置</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 开发环境\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">webpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">baseWebpackConfig</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;development&#39;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 生产环境\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">webpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">baseWebpackConfig</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;production&#39;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>或者通过package.json方式修改</p><div class=\"highlight\"><pre><code class=\"language-text\">&#34;scripts&#34;: {\n  &#34;dev&#34;: &#34;webpack --mode development&#34;\n  &#34;build&#34;: &#34;webpack --mode production&#34;\n}</code></pre></div><h2>UglifyJsPlugin和OptimizeCSSPlugin</h2><p>在webpack.production.config.js中修改</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">webpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">baseWebpackConfig</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">minimizer</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"k\">new</span> <span class=\"nx\">UglifyJsPlugin</span><span class=\"p\">({</span>\n        <span class=\"nx\">cache</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">parallel</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">sourceMap</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">.</span><span class=\"nx\">productionSourceMap</span><span class=\"p\">,</span>\n      <span class=\"p\">}),</span>\n      <span class=\"k\">new</span> <span class=\"nx\">OptimizeCSSPlugin</span><span class=\"p\">({</span>\n        <span class=\"c1\">// 可自己配置，建议第一次升级先不配置\n</span><span class=\"c1\"></span>      <span class=\"p\">}),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">splitChunks</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 可自己配置，建议第一次升级先不配置\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// 注释plugins里UglifyJsPlugin，CommonsChunkPlugin，OptimizeCSSPlugin模块`\n</span><span class=\"c1\"></span>\n    <span class=\"c1\">// new UglifyJsPlugin({\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   uglifyOptions: {\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     compress: {\n</span><span class=\"c1\"></span>    <span class=\"c1\">//       warnings: false\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     }\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   },\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   sourceMap: config.build.productionSourceMap,\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   parallel: true\n</span><span class=\"c1\"></span>    <span class=\"c1\">// }),\n</span><span class=\"c1\"></span>    <span class=\"c1\">// new webpack.optimize.CommonsChunkPlugin({\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   name: &#39;vendor&#39;,\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   minChunks(module) {\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     // any required modules inside node_modules are extracted to vendor\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     return (\n</span><span class=\"c1\"></span>    <span class=\"c1\">//       module.resource &amp;&amp;\n</span><span class=\"c1\"></span>    <span class=\"c1\">//       /\\.js$/.test(module.resource) &amp;&amp;\n</span><span class=\"c1\"></span>    <span class=\"c1\">//       module.resource.indexOf(\n</span><span class=\"c1\"></span>    <span class=\"c1\">//         path.join(__dirname, &#39;../node_modules&#39;)\n</span><span class=\"c1\"></span>    <span class=\"c1\">//       ) === 0\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     );\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   }\n</span><span class=\"c1\"></span>    <span class=\"c1\">// }),\n</span><span class=\"c1\"></span>    <span class=\"c1\">// new OptimizeCSSPlugin({\n</span><span class=\"c1\"></span>    <span class=\"c1\">//   cssProcessorOptions: config.build.productionSourceMap\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     ? { safe: true, map: { inline: false } }\n</span><span class=\"c1\"></span>    <span class=\"c1\">//     : { safe: true }\n</span><span class=\"c1\"></span>    <span class=\"c1\">// }),\n</span><span class=\"c1\"></span>  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>vue-loader配置修改</h2><p>在vue文件的解析引入专门的插件，<b>vue-loader</b>，不再通过rules里options配置项。在webpack.base.conf.js中</p><div class=\"highlight\"><pre><code class=\"language-text\">yarn add vue-loader --save\nconst VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;);\n\nplugins: [\n  new VueLoaderPlugin(),\n]</code></pre></div><h2>删除extract-text-webpack-plugin，引入mini-css-extract-plugin</h2><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">yarn</span> <span class=\"nx\">add</span> <span class=\"nx\">mini</span><span class=\"o\">-</span><span class=\"nx\">css</span><span class=\"o\">-</span><span class=\"nx\">extract</span><span class=\"o\">-</span><span class=\"nx\">plugin</span> <span class=\"o\">--</span><span class=\"nx\">save</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">MiniCssExtractPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&#34;mini-css-extract-plugin&#34;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n  <span class=\"c1\">// new ExtractTextPlugin({\n</span><span class=\"c1\"></span>  <span class=\"c1\">//   filename: utils.assetsPath(&#39;css/[name].[contenthash].css&#39;),\n</span><span class=\"c1\"></span>  <span class=\"c1\">//   allChunks: true\n</span><span class=\"c1\"></span>  <span class=\"c1\">// }),\n</span><span class=\"c1\"></span>  <span class=\"k\">new</span> <span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">({</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"nx\">utils</span><span class=\"p\">.</span><span class=\"nx\">assetsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;css/[name].[contenthash:12].css&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">allChunks</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">}),</span>\n<span class=\"p\">]</span>\n</code></pre></div><p>utils修改为mini-css-extract-plugin插件打包</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">MiniCssExtractPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mini-css-extract-plugin&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">extract</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// return ExtractTextPlugin.extract({\n</span><span class=\"c1\"></span>      <span class=\"c1\">//   use: loaders,\n</span><span class=\"c1\"></span>      <span class=\"c1\">//   fallback: &#39;vue-style-loader&#39;\n</span><span class=\"c1\"></span>      <span class=\"c1\">// })\n</span><span class=\"c1\"></span>      <span class=\"c1\">// MiniCssExtractPlugin.loader,\n</span><span class=\"c1\"></span>      <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">].</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">loaders</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">&#39;vue-style-loader&#39;</span><span class=\"p\">].</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">loaders</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</code></pre></div><h2>可能遇到问题</h2><ol><li>244KB限制提醒，WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).webpack中添加performance配置项</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">export.modules = {\n  performance: {\n    hint: true\n  }\n}</code></pre></div><ol><li> babel升级之后报错，babel TypeError: this.setDynamic is not a function？参考<a href=\"https://link.zhihu.com/?target=https%3A//markus.oberlehner.net/blog/setting-up-a-vue-project-with-webpack-4-and-babel-7/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Setting up a Vue.js Project with webpack 4 and Babel 7</a><br/> </li><li> 还是babel升级之后的问题，Plugin/Preset files are not allowed to export objects, only functions.参考<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/49073105/error-running-webpack-with-react-grid-layout-plugin-preset-files-are-not-allowe\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">stackoverflow.com/quest</span><span class=\"invisible\">ions/49073105/error-running-webpack-with-react-grid-layout-plugin-preset-files-are-not-allowe</span><span class=\"ellipsis\"></span></a><br/> </li><li> eslint提示，object-curly-spacing相关错误，在.eslintrc.js中配置，rules配置内容需要用到双引号，因为eslint会把它当做JSON解析。<br/> </li></ol><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n  <span class=\"s2\">&#34;object-curly-spacing&#34;</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">]</span>\n</code></pre></div><ol><li>postcss升级报错，UnhandledPromiseRejectionWarning: Error: Option safe was removed. Use parser: require(&#34;postcss-safe-parser&#34;)。在OptimizeCSSPlugin添加postcss-safe-parser插件。</li></ol><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">safeParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;postcss-safe-parser&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n  <span class=\"k\">new</span> <span class=\"nx\">OptimizeCSSPlugin</span><span class=\"p\">({</span>\n    <span class=\"nx\">cssProcessorOptions</span><span class=\"o\">:</span> <span class=\"p\">{</span> \n      <span class=\"nx\">parser</span><span class=\"o\">:</span> <span class=\"nx\">safeParser</span><span class=\"p\">,</span>\n      <span class=\"nx\">discardComments</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">removeAll</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}),</span>\n<span class=\"p\">}</span>\n</code></pre></div><ol><li>scss打包错误，this._identifier.split(&#39;!&#39;).pop();Cannot read property &#39;split&#39; of undefined。_identifier指向了一个undefined对象，把webpack.base.config.js中scss的配置项去掉。</li></ol><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// {\n</span><span class=\"c1\">//   test: /\\.scss$/,\n</span><span class=\"c1\">//   loaders: [&#34;style&#34;, &#34;css&#34;, &#34;sass&#34;]\n</span><span class=\"c1\">// },\n</span></code></pre></div><h2>优化完之后对比</h2><ul><li>打包速度，提升了20秒左右</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e2c4b5a329f5bd728d3bf38c44461282_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1722\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"1722\" data-original=\"https://pic3.zhimg.com/v2-e2c4b5a329f5bd728d3bf38c44461282_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1722&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1722\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1722\" data-original=\"https://pic3.zhimg.com/v2-e2c4b5a329f5bd728d3bf38c44461282_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e2c4b5a329f5bd728d3bf38c44461282_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e47c1e87996a326caf7ea182470cbe94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"778\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic1.zhimg.com/v2-e47c1e87996a326caf7ea182470cbe94_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;778&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"778\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic1.zhimg.com/v2-e47c1e87996a326caf7ea182470cbe94_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e47c1e87996a326caf7ea182470cbe94_b.jpg\"/></figure><ul><li>打包体积</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e855f24cef3386b94be89d3085f67f52_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb\" width=\"964\" data-original=\"https://pic3.zhimg.com/v2-e855f24cef3386b94be89d3085f67f52_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;964&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"964\" data-original=\"https://pic3.zhimg.com/v2-e855f24cef3386b94be89d3085f67f52_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e855f24cef3386b94be89d3085f67f52_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6c10a8ae10d1692c023626fa8be6888f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-6c10a8ae10d1692c023626fa8be6888f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;138&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-6c10a8ae10d1692c023626fa8be6888f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6c10a8ae10d1692c023626fa8be6888f_b.jpg\"/></figure><ul><li>热更新时间</li></ul><p>没什么变化</p><h2>总结</h2><p>第一次升级完webpack4之后，除了打包时间，其他没有明显的提升，后面我还会细化webpack4配置。但是我觉得你并不能指望一个版本的迭代，项目所有基础设置都有质的提升。所以对于打包时间没有需求的项目，我不建议升级webpack4。即使webpack4即使简化了许多配置，上手难度还是高，坑也还是多。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/carrollcai/vue-webpack4\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源代码github地址</a><h2>参考文章</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000014516899\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vue项目升级webpack4指南</a><br/> </li><li><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/JAZm2LIlHtwltCY0Y3G7Yw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手摸手，带你用合理的姿势使用 webpack 4（上）</a><br/> </li></ol><p>写作时间： 20180909</p>", 
            "topic": [
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }, 
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "vue-cli", 
                    "tagLink": "https://api.zhihu.com/topics/20079871"
                }
            ], 
            "comments": [
                {
                    "userName": "永不止步", 
                    "userLink": "https://www.zhihu.com/people/34da65b3680672a6ee94e6d53f3963b9", 
                    "content": "<p>给你点个赞 哈哈哈</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "可以可以", 
                            "likes": 0, 
                            "replyToAuthor": "永不止步"
                        }
                    ]
                }, 
                {
                    "userName": "Kevin Pan", 
                    "userLink": "https://www.zhihu.com/people/1f273b2a9ab06e22ad33b5d9c0038f61", 
                    "content": "<p>好</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "pubuzhixing", 
                    "userLink": "https://www.zhihu.com/people/f13c467a090ae829af7db8f4509ef5e9", 
                    "content": "棒", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43592264", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 2, 
            "title": "《第二次世界大战战史》观后感", 
            "content": "<p>这篇观后感本应该前几天就完成了，无奈这几天全在加班，昨天还经历了830版本上线。不过，不是很影响，周六的清晨反而更加惬意。</p><p>这本书总共677页，没读完过这么厚的书（虽然其中也有一小部分是跳着看的），文章通俗，流畅，按照时间发展和战争发起到高潮到退潮的叙述顺序，基本上是能一口读完的，如果你是历史爱好者。我爸在我看这本书的时候，问读它有什么用？“以铜为镜，可以正衣冠，以古为镜，可以知兴替。”你以为我会这样告诉他吗，no，就比如他不懂读历史的意义，他也不了解这句话的意思。这期间我看了几部关于二战的电影，《辛德勒的名单》、《穿条纹睡衣的男孩》，《从海底出击》，《朗读者》，以及之间看过几部经典的《兵临城下》，《美丽人生》，《敦刻尔克》。感慨很多，战争总是给人带来深思，下面通过李德·哈特的《第二次世界大战战史》来回忆一下二战的故事。</p><p>二战爆发在我看来是必定的。一战后德国的失利，签订《凡尔赛条约》，削弱德国失利；以及《朗读者》中女主表现出来的，高傲的日耳曼人（德国人），是绝不会简单屈服的，正好这时候不可一世的希特勒上位了，给沉寂的德国人带来了希望；法国、英国在经历了第一次世界大战之后，一直保持着以和平为主的容忍态度。战争的开始，从放弃捷克斯洛伐克，到签订《慕尼黑条约》，一步步忍让，增强了希特勒的信心。同时1939攻击波兰，让以和平为主的西欧国家忍无可忍，这也是二战正式的开端。接着开始对西欧的蹂躏，法国高估了他们骑兵的实力，同时也低谷了敌军坦克的作用，正验证了中国的古话，知己知彼，是多少重要，期间，密码学也高速发展，破译双方通信内容，成了战争重要的一环。书中所记，希特勒其实也不是一个过渡膨胀的人，在法国境地轻松击败联军之后，他竟然让坦克部队暂停进攻，也让英国有了敦刻尔克大撤退的机会，让后续英德大战的英国保存了实力。这期间有一个神奇的任务，古德里安，他崇尚坦克代替骑兵发动奇袭（一般坦克进攻都需要配合骑兵或者摩托师部队，过渡深入敌军容易得不到援助），一路从法国南部杀到了法国北部。英国因为是一个岛国，德国海军实力不太行，所以不列颠之战就成了持久战。随后德国和意大利开始进攻非洲，损耗了部分部队，对进攻苏联产生了一点影响。进攻苏联完全是希特勒主导的。苏联虽然在进攻前有所防御，但是没想到德国真会发动进攻，所以战争前期节节败退。最终苏联还是通过莫斯科保卫战，以及斯大林格勒战役的反攻，抵御了德国的进攻，当然这多亏了苏联低地和丘陵的地势和寒冷的气候。而且后来美国也因珍珠港事件，介入战争，也加速了德国的失败。</p><p>纵观整个战争，德国其实有机会统一西欧，早点占领敦刻尔克，英国说不定就没有实力抵御德国的精工，也不用两面受敌。如果不把战场蔓延到非洲，说不定就能在冬天之前攻占莫斯科。俄罗斯的冬天简直就是德国的噩梦，上届世界杯冠军直接小组未出现。不过，历史上最大的世界战争也是惨烈的，20亿以上的人口被卷入战争，人员伤亡和经济的损失是无法估计的，以及对犹太人的屠杀，日本对中国侵略，这些暴行我们都不应该忘记，更警醒着我们，身处和平年代的不易。战争也带来了部分好处，促进了航海和航空方面的发展，以及信息学密码学等崛起。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>写作时间： 20180901</p>", 
            "topic": [
                {
                    "tag": "第一次世界大战", 
                    "tagLink": "https://api.zhihu.com/topics/19639234"
                }, 
                {
                    "tag": "战争史", 
                    "tagLink": "https://api.zhihu.com/topics/19708426"
                }, 
                {
                    "tag": "第二次世界大战", 
                    "tagLink": "https://api.zhihu.com/topics/19608803"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42802874", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 2, 
            "title": "在远程服务器上搭建jenkins", 
            "content": "<h2>前言</h2><p>在公司，运维都搭建好了jenkins。闲来无事，就给自己的服务器搭建jenkins。服务器系统为Centos7。jenkins发音[&#39;dʒeŋkinz]，詹金斯。请同学们不要再读错了。</p><h2>安装</h2><ol><li><b>查看java版本</b></li></ol><blockquote>jenkins是基于java的引用，需要tomcat服务器</blockquote><div class=\"highlight\"><pre><code class=\"language-bash\">java -version</code></pre></div><p>如果没有安装</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo yum install java</code></pre></div><p><b>2. 添加jenkins源</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo wget -O /etc/yum.repos.d/jenkins.repo http://jenkins-ci.org/redhat/jenkins.repo\nsudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</code></pre></div><p><b>3. 安装jenkins</b></p><blockquote> 在安装过程中，下载源文件过慢，大概率是网速问题，尝试切换网络。<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-text\">yum install jenkins</code></pre></div><p>如由于安装报错，<b>/usr/local/jenkins is not a directory</b>。如有在安装过程中，遇到这种错误，请新建这几个目录</p><div class=\"highlight\"><pre><code class=\"language-text\">mkdir /usr/local/jenkins</code></pre></div><p><b>4. 启动jenkins</b></p><div class=\"highlight\"><pre><code class=\"language-text\">sudo service jenkins start</code></pre></div><p><b>5. 端口冲突</b></p><blockquote> jenkins默认端口是8080，请修改jenkins端口配置<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-bash\">修改 do_start 函数的 check_tcp_port 命令，端口号从 <span class=\"m\">8080</span> 换成 <span class=\"m\">9000</span>（你指定的端口）\nvim /etc/init.d/jenkins\n\n<span class=\"nv\">修改为HTTP_PORT</span> <span class=\"o\">=</span> <span class=\"m\">9000</span>\nvim  /etc/default/jenkins\n\n重启jenkins\nsudo service jenkins start</code></pre></div><p><b>6. 检测是否启动成功</b></p><div class=\"highlight\"><pre><code class=\"language-text\">curl localhost:8080\n\n或者查看端口启动情况\nnetstat -tunlp</code></pre></div><p>curl检测启动成功之后，但是通过外部浏览器确不能访问。修改防火墙：</p><div class=\"highlight\"><pre><code class=\"language-text\">添加对外的8080端口\nfirewall-cmd –zone=public –add-port=8080/tcp –permanent \n\n重启防火墙设置\nfirewall-cmd –reload</code></pre></div><p><b>7. 初始化密码</b></p><p>再次打开浏览器，如果出现下面浏览器，说明jenkins已经能对外访问了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-534a3491237e411860332519fbd9e573_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"612\" class=\"origin_image zh-lightbox-thumb\" width=\"1006\" data-original=\"https://pic4.zhimg.com/v2-534a3491237e411860332519fbd9e573_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1006&#39; height=&#39;612&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"612\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1006\" data-original=\"https://pic4.zhimg.com/v2-534a3491237e411860332519fbd9e573_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-534a3491237e411860332519fbd9e573_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">vim /var/lib/jenkins/secrets/initialAdminPassword\n\n下面一串编码即为系统生成的初始化密码。\n054e75274f2848d6b97bc55231d74e12</code></pre></div><p>输入成功之后，需要输入账号密码，初始化账号密码为admin，054e75274f2848d6b97bc55231d74e12。</p><p><b>8. 成功进入页面</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e11174b1badd8807ecc6879d13f65eb1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2630\" data-rawheight=\"1116\" class=\"origin_image zh-lightbox-thumb\" width=\"2630\" data-original=\"https://pic2.zhimg.com/v2-e11174b1badd8807ecc6879d13f65eb1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2630&#39; height=&#39;1116&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2630\" data-rawheight=\"1116\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2630\" data-original=\"https://pic2.zhimg.com/v2-e11174b1badd8807ecc6879d13f65eb1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e11174b1badd8807ecc6879d13f65eb1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>OK，lets create new jobs。</p><p>参考文章： - <a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/zzy5066/article/details/72818675\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/zzy5066/a</span><span class=\"invisible\">rticle/details/72818675</span><span class=\"ellipsis\"></span></a>  Centos7上安装Jenkins - <a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_24232123/article/details/79781527\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/qq_242321</span><span class=\"invisible\">23/article/details/79781527</span><span class=\"ellipsis\"></span></a>  centos 7.3 开放端口并对外开放</p><p>写作时间： 20180823</p>", 
            "topic": [
                {
                    "tag": "服务器配置", 
                    "tagLink": "https://api.zhihu.com/topics/19625788"
                }, 
                {
                    "tag": "CentOS", 
                    "tagLink": "https://api.zhihu.com/topics/19577255"
                }, 
                {
                    "tag": "Jenkins权威指南（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134454"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42419082", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 4, 
            "title": "如何发布一个npm应用？", 
            "content": "<h2>前言</h2><p>我们每天都需要安装各种各样的npm，那npm是如何发布到远程仓库呢？了解npm从coding，到push至npm仓库的过程，有助于我们更好的调试npm包。下面以我自己写的一个<code>json-tree-diff</code>包为例，展示一个npm包从编写到发布的过程。</p><h2>初始化一个项目</h2><div class=\"highlight\"><pre><code class=\"language-bash\">mkdir json-tree-diff\n<span class=\"nb\">cd</span> json-tree-diff</code></pre></div><h2>构建一个项目</h2><div class=\"highlight\"><pre><code class=\"language-bash\">npm init</code></pre></div><p><b>初始化你的npm包</b></p><ul><li> name: 项目的名称，确保在npm包里是独一无二的。<br/> </li><li> version: 版本号。<br/> </li><li> description: 包描述。<br/> </li><li> entry point: 包主入口文件。<br/> </li><li> test command: 测试命令。一般是npm run test，上线之前确保你的包有测试用例。<br/> </li><li> git repository: git远程地址，随便填写一个，后期项目上传之后修改。<br/> </li><li> keywords: 关键词，方便npm包检索，与html中keywords有点像。<br/> </li><li> author: 这个不解释。<br/> </li><li> license: MIT或者ISC，我也不懂有什么区别，反正MIT就对了。<br/> </li></ul><p>最后有一个is OK？的确认选项，回车就对了。</p><h2>添加开源协议</h2><div class=\"highlight\"><pre><code class=\"language-text\">The MIT License (MIT)\n\nCopyright (c) &lt;year&gt; &lt;copyright holders&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</code></pre></div><p>把<code>year</code>换成时间，<code>copyright holders</code>换成你的名字即可</p><h2>添加README.md等文件</h2><p>俗话说的好，一个项目是否有人用，README.md起了很大作用。所以可以模仿知名项目的md，例如<code>create-react-app</code>，<code>React</code>等。</p><p>添加一些其他的辅助文件，比如<code>.gitignore</code>，如果你引用了其他的npm包，还需要包括<code>package-lock.json</code>，<code>yarn.lock</code>，<code>eslint</code>等相关文件。</p><h2>编写代码</h2><p>在根目录新建一个index.js文件，下面只是测试代码，没有什么实际意义，只是方便大家理解。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">oldJson</span><span class=\"p\">,</span> <span class=\"nx\">newJson</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">oldJson</span> <span class=\"o\">===</span> <span class=\"nx\">newJson</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>发布npm包</h2><ol><li> 在<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://www.npmjs.com</a>上注册一个账号，<b>一定要记住自己的账号密码</b>，我刚刚吃过亏。<br/> </li><li> 在本地添加npm账户<br/> </li></ol><div class=\"highlight\"><pre><code class=\"language-text\">npm adduser</code></pre></div><p>填入对应<code>username</code>，<code>password</code>，<code>email</code>。</p><p>这里有一个坑，如果你之前安装npm用的是淘宝的镜像，是无法登录成功的。所以需要调整会npm本身安装的地址：</p><div class=\"highlight\"><pre><code class=\"language-text\">npm config set registry https://registry.npmjs.org/</code></pre></div><p>我在登录过过程中，还遇到这个的报错（下面代码）。 不知道是我英文不好，还是报错提示不友好，我一直以为是哪里的配置有问题，结果我上网查了很多资料才发现，有可能是我的账号密码错误了。<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/47765060/error-message-when-enabling-2-factor-authentication-for-npm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Error message when enabling 2-factor authentication for NPM</a>，stackoverflow还是那么给力。</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm ERR! code EAUTHIP\nnpm ERR! Unable to authenticate, need: Basic</code></pre></div><ol><li>发布应用</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">npm publish --access=public</code></pre></div><p>通过上面命令即可发布成功，前提是确保你的<b>包名称</b>独一无二。</p><ol><li>测试包是否可用</li></ol><p><b>不要在当前目录下安装刚上传的包</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install json-tree-diff</code></pre></div><p>报错</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm ERR! code ENOSELF\nnpm ERR! Refusing to install package with name <span class=\"s2\">&#34;json-tree-diff&#34;</span> under a package\nnpm ERR! also called <span class=\"s2\">&#34;json-tree-diff&#34;</span>. Did you name your project the same\nnpm ERR! as the dependency you<span class=\"err\">&#39;</span>re installing?</code></pre></div><p>用其他项目测试，你也通过<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://www.npmjs.com</a>查找你的包。</p><p>下图为包发到npm之后，在npm官网查询之后的结果。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-143effd78d35ed44e2bc013bc8ee49fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2022\" data-rawheight=\"1718\" class=\"origin_image zh-lightbox-thumb\" width=\"2022\" data-original=\"https://pic2.zhimg.com/v2-143effd78d35ed44e2bc013bc8ee49fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2022&#39; height=&#39;1718&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2022\" data-rawheight=\"1718\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2022\" data-original=\"https://pic2.zhimg.com/v2-143effd78d35ed44e2bc013bc8ee49fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-143effd78d35ed44e2bc013bc8ee49fd_b.jpg\"/></figure><h2>总结</h2><p>npm提供了一个公共的仓库容纳所有个人开发者的工具包，我们在发布自己的包之前一定要确认可用，易阅读，安全，npm前段时间刚出现安全漏洞。公共的环境每个人都有责任维护。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>写作时间： 20180819</p>", 
            "topic": [
                {
                    "tag": "npm", 
                    "tagLink": "https://api.zhihu.com/topics/19625829"
                }, 
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42414156", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "Sass基础用法", 
            "content": "<p>  Sass是css的一种扩展语法，通过Ruby编写，需要以.sass为后缀名。安装：<br/> </p><div class=\"highlight\"><pre><code class=\"language-text\">npm install sass --save</code></pre></div><h2>变量</h2><p>Sass中的变量以$开头，如果需要将变量插入到字符串中，需要用#{}。</p><div class=\"highlight\"><pre><code class=\"language-text\">$blue: blue;\n.#{$blue}-color: {\n  color: $blue;\n}</code></pre></div><h2>计算</h2><p>Sass中允许直接的算术运算</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">app</span> <span class=\"p\">{</span>\n  <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"err\">${</span><span class=\"n\">minLenght</span><span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"nt\">10</span><span class=\"o\">;</span>\n<span class=\"err\">}</span></code></pre></div><h2>Sass可以使用语法的嵌套</h2><blockquote>Sass中可以不使用大括号，而Less中必须使用。而Scss（Sass3的扩展版本）也是必须要使用括号。</blockquote><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"err\">&amp;</span> <span class=\"err\">.main{</span>\n    <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n\n<span class=\"c\">/* 不使用大括号和分号的语法*/</span> \n<span class=\"nt\">body</span>\n  <span class=\"nt\">font-size</span><span class=\"o\">:</span> <span class=\"nt\">16px</span>\n  <span class=\"p\">.</span><span class=\"nc\">main</span>\n    <span class=\"nt\">color</span><span class=\"o\">:</span> <span class=\"p\">#</span><span class=\"nn\">fff</span></code></pre></div><h2>注释</h2><p>/<i> 注释 </i>/，普通注释，会保留在编译文件，如果是压缩模式，则会删除。</p><p>// 注释，编译后就会被删除。</p><p>/<i>! 注释 </i>/，压缩模式编译也存在。</p><h2>使用extend实现继承</h2><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">parent</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">children</span> <span class=\"p\">{</span>\n  <span class=\"cp\">@extend parent;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#333</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2>使用mixin重用代码块</h2><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">mixin</span> <span class=\"nt\">font14</span> <span class=\"p\">{</span>\n  <span class=\"nt\">font-size</span><span class=\"o\">:</span>  <span class=\"nt\">14px</span><span class=\"o\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">common</span> <span class=\"p\">{</span>\n  <span class=\"cp\">@include font14;</span>\n<span class=\"p\">}</span></code></pre></div><p>与继承不同的是，mixin可传入参数</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">mixin</span> <span class=\"nt\">font</span><span class=\"o\">($</span><span class=\"nt\">font</span><span class=\"o\">:</span> <span class=\"nt\">14px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"nt\">font-size</span><span class=\"o\">:</span> <span class=\"o\">$</span><span class=\"nt\">font</span><span class=\"o\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">font15</span> <span class=\"p\">{</span>\n  <span class=\"cp\">@include: font(15px);</span>\n<span class=\"p\">}</span></code></pre></div><h2>可使用import引入其他文件</h2><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">&#34;./varibles.scss&#34;</span><span class=\"p\">;</span></code></pre></div><h2>条件判断</h2><blockquote> 可使用@if @else写判断语句<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"cp\">@if 1 &gt; 0 {</span>\n    <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"p\">@</span><span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nt\">font-size</span><span class=\"o\">:</span> <span class=\"nt\">20px</span><span class=\"o\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span></code></pre></div><h2>循环语句</h2><p>for循环</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">for</span> <span class=\"o\">$</span><span class=\"nt\">i</span> <span class=\"nt\">from</span> <span class=\"nt\">12</span> <span class=\"nt\">to</span> <span class=\"nt\">20</span> <span class=\"p\">{</span>\n  <span class=\"nt\">font-</span><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"err\">$i</span><span class=\"p\">}</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"err\">#{$</span><span class=\"n\">i</span><span class=\"p\">}</span><span class=\"nt\">px</span><span class=\"o\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span></code></pre></div><h2>自定义函数</h2><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">function</span> <span class=\"nt\">double</span><span class=\"o\">($</span><span class=\"nt\">width</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"k\">return</span> <span class=\"o\">$</span><span class=\"nt\">width</span> <span class=\"o\">*</span> <span class=\"nt\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">font-28</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"kt\">px</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>写作时间： 20180819</p>", 
            "topic": [
                {
                    "tag": "CSS", 
                    "tagLink": "https://api.zhihu.com/topics/19551326"
                }, 
                {
                    "tag": "Sass", 
                    "tagLink": "https://api.zhihu.com/topics/19665643"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41979279", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 0, 
            "title": "nginx超全超有用的配置", 
            "content": "<h2>配置SSL</h2><blockquote>可用于将网站升级https，并且原http地址，重定向到新https地址</blockquote><div class=\"highlight\"><pre><code class=\"language-text\">server {\n  listen 443;\n  server_name nginx.org;\n  ssl on;\n  root /var/www/nginx.org;\n  index index.html index.htm;\n  ssl_certificate_key cert/nginx.key;\n  ssl_session_timeout 5m;\n  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n  ssl_prefer_server_ciphers on;\n  location / {\n    index index.html index.htm;\n  }\n}</code></pre></div><h2>配置反向代理</h2><div class=\"highlight\"><pre><code class=\"language-text\">server {\n  listen 80;\n  server_name  www.baidu.cim;\n  access_log  logs/nginx.access.log  main;\n  error_log  logs/nginx.error.log;\n  root   html;\n  index  index.html index.htm index.php;\n  location / {\n    proxy_pass  http://nginx.org;\n    proxy_redirect     off;\n    proxy_set_header   Host             $host;\n    proxy_set_header   X-Real-IP        $remote_addr;\n    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n    proxy_max_temp_file_size 0;\n  }\n}</code></pre></div><h2>配置负载均衡</h2><div class=\"highlight\"><pre><code class=\"language-text\">upstream server {  \n  server 127.0.0.1:8080 weight=3;  \n  server 127.1.1.1:8081;  \n}   \nserver {\n  listen 80;\n  server_name  www.baidu.cim;\n  access_log  logs/nginx.access.log  main;\n  error_log  logs/nginx.error.log;\n  root   html;\n  index  index.html index.htm index.php;\n  location / {\n    proxy_pass  http://server;\n    proxy_redirect     off;\n    proxy_set_header   Host             $host;\n    proxy_set_header   X-Real-IP        $remote_addr;\n    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n    proxy_max_temp_file_size 0;\n  }\n}</code></pre></div><h2>gzip压缩设置</h2><div class=\"highlight\"><pre><code class=\"language-text\">http {\n  gzip  on;\n  gzip_min_length 20;\n  gzip_buffers 4 16k;\n  gzip_http_version 1.0;\n  gzip_comp_level 6;\n  gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n  gzip_vary on;\n  gzip_disable &#34;MSIE [1-6]\\.&#34;;\n  gzip_proxied any;\n}</code></pre></div><h2>设置网关超时时间,504，Gateway Time-out</h2><blockquote> 504 Gateway Time-out（网关超时），作为网关或代理，没有从上游及时收到请求，或者nginx启动失败。<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-text\">http {\n  send_timeout 60;\n  fastcgi_buffers 8 128k;\n  fastcgi_busy_buffers_size:  256k;\n  fastcgi_temp_file_write_size:  256k\n}</code></pre></div><p>nginx重启</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">cd</span> nginx/sbin\n./nginx -s reload <span class=\"c1\"># 等于下面两步</span>\n./nginx -s stop\n./nginx</code></pre></div><h2>设置上传文件大小，413，Request entity too large</h2><blockquote> nginx默认上传文件大小是1M，如果有大文件上传需要调整。<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-text\">http {\n  client_max_body_size 30M;\n}</code></pre></div><h2>访问允许与限制</h2><div class=\"highlight\"><pre><code class=\"language-text\">location / {\n  allow，deny\n  allow 192.168.1.0/24;\n  allow 10.1.1.0/16;\n  deny all;\n}</code></pre></div><h2>配置日志</h2><div class=\"highlight\"><pre><code class=\"language-bash\">http <span class=\"o\">{</span>\n  error_log logs/error.log<span class=\"p\">;</span>\n  log_format main <span class=\"s1\">&#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;</span>\n  <span class=\"s1\">&#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;</span>\n  <span class=\"s1\">&#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;</span><span class=\"p\">;</span>\n  access_log logs/access.log main<span class=\"p\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\"># 通过vim静态查看日志，通过ps动态查看</span>\nvim  logs/error.log\nps -ef <span class=\"p\">|</span> grep nginx<span class=\"o\">(</span>java<span class=\"o\">)</span></code></pre></div><p>参考文章：<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Z10uRNLUO856F5yZ1w6rAQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">mp.weixin.qq.com/s/Z10u</span><span class=\"invisible\">RNLUO856F5yZ1w6rAQ</span><span class=\"ellipsis\"></span></a></p><p>写作时间： 20180814</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "反向代理", 
                    "tagLink": "https://api.zhihu.com/topics/19645665"
                }, 
                {
                    "tag": "Web 服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19629184"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41786714", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "部署webpack-dev-server到生产环境", 
            "content": "<h2>前言</h2><p>我哥们仿着慕课网做一个vue音乐播放器，希望我部署到远程服务器（所以你拥有一台私人服务器，就像你拥有了大号的充电宝，人人借用）。因为用webpack-dev-server做了一些接口代理的工作（代理qq音乐的API），所以和传统纯前端项目还有所不同，不是打包压缩扔到nginx静态目录就行。需要在生产上启动这个webpack-dev-server服务。</p><h2>step by step</h2><ol><li>SSH登录远程服务（前提是你和我一样拥有一台酷炫的centos云服务器）</li></ol><div class=\"highlight\"><pre><code class=\"language-bash\">ssh 用户名@ip</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 安装node服务</p><p>如果不会安装，这个教程对你帮助也不大。<b><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/lpbottle/p/7733397.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">教程在这</a></b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 代码拉取到远程服务器</p><p>通过git拉取代码到远程服务器。</p><div class=\"highlight\"><pre><code class=\"language-text\">cd 到你指定的目录下\ngit clone https://github.com/gkqmike/vue-music\ncd vue-music\nnpm install</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 安装pm2，管理node进程。</p><p>远程服务器上可不像本地，直接<b>npm run dev</b>，就万事大吉，它需要时刻一直开启node服务，并且出现问题会帮你自动重启node服务，还能监控一些node服务的情况。如何安装？</p><div class=\"highlight\"><pre><code class=\"language-text\">npm install -g pm2</code></pre></div><p>如何用pm2启动node服务器，<b><a href=\"https://link.zhihu.com/?target=https%3A//newsn.net/say/pm2-start.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">教程在这</a></b>。这里直接贴出pm2启动npm的命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">pm2 start npm --watch --name myApp -- run dev</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>5. webpack-dev-server模式，报错，<b>invalid host header</b>。</p><p>因为webpack-dev-server默认是开发模式，默认无法通过远程服务访问。报错，<b>invalid host header</b>。只需要在webpack配置dev-server的添加一行配置即可。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">devServer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n  <span class=\"nx\">disableHostCheck</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>6.  如果按照上面做，你还不能访问，sorry，我不是码神，但是我有几个方式解决方式。</p><ul><li> 在服务器上用<b>npm run dev</b>启动项目，看有没有报错。</li><li>看一下端口是否在安全组网段中，阿里云服务器有对外的网段限制。</li><li>可能防火墙默认不允许外网访问自定义端口，需要手动打开：</li></ul><div class=\"highlight\"><pre><code class=\"language-bash\">/sbin/iptables -l INPUT -p tcp -dport <span class=\"sb\">`</span>你的端口<span class=\"sb\">`</span> -j ACCEPT\n\nservice network restart</code></pre></div><h2>总结</h2><p>服务器部署往往会有很多意想不到的问题，这是开发环境所不能预料的，这更考验你解决的能力。所以平时需要积累一些运维部署能力，其实没有也没关系，只要有一个有私人服务器的朋友。</p><p><b>访问地址：</b><a href=\"caichengnan.com:7000\">caichengnan.com:7000</a></p><p><b>项目源码：</b></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gkqmike/vue-music\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5158d2db5a3ae72d3d3e6916f702f13d_ipico.jpg\" data-image-width=\"420\" data-image-height=\"420\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gkqmike/vue-music</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-44bdb2733225221d8e599b26f16f4329_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"1464\" class=\"origin_image zh-lightbox-thumb\" width=\"818\" data-original=\"https://pic2.zhimg.com/v2-44bdb2733225221d8e599b26f16f4329_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;818&#39; height=&#39;1464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"1464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"818\" data-original=\"https://pic2.zhimg.com/v2-44bdb2733225221d8e599b26f16f4329_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-44bdb2733225221d8e599b26f16f4329_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>写作时间： 20180811</p>", 
            "topic": [
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }, 
                {
                    "tag": "CentOS", 
                    "tagLink": "https://api.zhihu.com/topics/19577255"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41502945", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 3, 
            "title": "Promise.all手动实现", 
            "content": "<h2>前言</h2><p>假设一下Promise其他所有函数都正常工作，但Promise.all功能失效了，我们现在就要为程序重写一个Promise.all。</p><h2>Promise.all正常使用</h2><p>下面为Promise.all的功能展示。正常情况下我们应该输出数组对象<b>[1, 2, 3]</b>。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"kd\">let</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"kd\">let</span> <span class=\"nx\">promise3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">promiseAll</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">([</span><span class=\"nx\">promise1</span><span class=\"p\">,</span> <span class=\"nx\">promise2</span><span class=\"p\">,</span> <span class=\"nx\">promise3</span><span class=\"p\">]);</span>\n<span class=\"nx\">promiseAll</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>ok，我们的Promise.all只要实现上面的功能就可以了。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">promises</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">promises</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 按顺序执行每一个Promise操作\n</span><span class=\"c1\"></span>      <span class=\"nx\">val</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>上面是最简化的版本，但是也有两个问题。一、Promise.all传递的参数可能不是Promise类型，可能不存在then方法。二、如果中间发生错误，应该直接返回错误，不执行后面操作。</p><h2>改造版本</h2><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">all</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">promises</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">promiseCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">promisesLength</span> <span class=\"o\">=</span> <span class=\"nx\">promises</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"k\">of</span> <span class=\"nx\">promises</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">promiseCount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"c1\">// results.push(res);\n</span><span class=\"c1\"></span>        <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 当所有函数都正确执行了，resolve输出所有返回结果。\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">promiseCount</span> <span class=\"o\">===</span> <span class=\"nx\">promisesLength</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>总结</h2><p>Promise.all实现不难，只要了解它做了哪些事情，并且了解Promise的机制，就能大概猜出内部实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>写作时间:<br/>20180806</p><p>这里有问题，经评论区同学指出，在对result数组添加对象时候，需要用到下标赋值，而不是push。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>修改时间：</p><p>20190323</p>", 
            "topic": [
                {
                    "tag": "Promise", 
                    "tagLink": "https://api.zhihu.com/topics/20022534"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "异步", 
                    "tagLink": "https://api.zhihu.com/topics/19571217"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>不好意思..我觉得实现得不太对。</p><p>可以看下这个链接里的：</p><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/xieranmaya/Promise3/blob/master/Promise3.js\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/xieranmaya/P</span><span class=\"invisible\">romise3/blob/master/Promise3.js</span><span class=\"ellipsis\"></span></a></p><p>主要是错在不该push，因为毕竟是异步的，哪个promise先完成还不一定..</p><p>轻拍..</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "对，这个地方确实有问题，刚开始创建一个length长度的数组，对于val[i]的赋值就不会出现下标越界问题.感谢指出问题。", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "victor", 
                    "userLink": "https://www.zhihu.com/people/32d26d6b502735edb2530cbbc43ed53c", 
                    "content": "<p>你好，请问i是哪来的啊，您将results[i]=res;这个i从未声明</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "这个地方遗漏了，在外部需要定义一个字增的i", 
                            "likes": 0, 
                            "replyToAuthor": "victor"
                        }
                    ]
                }, 
                {
                    "userName": "文飞", 
                    "userLink": "https://www.zhihu.com/people/b0a2ef1aface0dabf31c6520a67db52e", 
                    "content": "<p>Promise.prototype.all改为Promise.all更好。调用all方法时，不需要 </p><p>var x = new Promise(...)<br>x.all()</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "文飞", 
                    "userLink": "https://www.zhihu.com/people/b0a2ef1aface0dabf31c6520a67db52e", 
                    "content": "<p>另外，这里异步调用的话，返回的数据的顺序有问题</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41502867", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 2, 
            "title": "《金字塔原理》书评", 
            "content": "<h2>前言</h2><p>一直有人推荐这本书，有生活中的，有网上的。他们似乎都从中收获了很多。我最近正好有时间读完了这本书，收获颇多i。这篇书评我将采用<code>金字塔原理</code>书写。我简单的总结一下<code>金字塔原理</code>式的文章，它应该包含4个方面，背景（situation），冲突（complication），疑问（question），回答（answer），然后回答中需要包含归纳推理或者演绎推理的论证。</p><h2>金字塔结构的作用</h2><p>金字塔原理即像金字塔一样，从顶部的单个内容，往下分发，最后形成多条支干。所以它衍生除了两种思考方式，自上而下/自下而上。两种方式都有其优势，且适用场景不同。例如自上而下可以让你站在统筹的角度看待问题，但是需要有整体结构的思维，即总结先行。而自下而上更容易以具体论点出发，逐步确定中心思想，即总结概括。自下而上更适合不明确的中心思想，但是可以从需要描述的具体论点向上推。金字塔内部之间还有横向和纵向的关系，横向应该是相似或者互斥的平级关系，而纵向则拥有递进的关系，层层演进。所以横向和纵向的逻辑顺序不能颠倒。这都有助于我们梳理文章的结构和脉络。</p><h2>表达的方式</h2><ul><li>为什么是SCQA？</li></ul><p>为什么文章需要包含背景、冲突、疑问、回答？其实很简单，这是符合人的一个理解过程。介绍背景，能让读者知道这篇文章是否是自己想了解的。抛出文章里提出的冲突，就会引起读者的疑问，这个疑问，正是这篇文章需要解答的。整篇文章将围绕着疑问和解答展开。正如上面所说，这个过程非常符合人的思维，与我们的思考过程差不多，所以读者很容易接受这样的展现方式。</p><ul><li>归纳推理和演绎推理</li></ul><p>归纳推理即这几段是同一中心思想的论点。比如我很帅是中心论点。论点A我很高，论点B我很白，论点C我有一双深邃迷人的眼睛，好了，编不下去，意思就是这个。接触到演绎推理这个词的时候，我不是很理解，所以对这个词印象比较深刻。它说的是通过前面几段的论点，得出最后一段的结论，这个结论，就是中心思想。再次以我很帅举例，中国的男生很帅，我是中国人，所以结论是我很帅，这就是演绎推理。</p><h2>思考的过程</h2><ul><li>思考的逻辑顺序</li></ul><p>思考文章规划时，需要应用逻辑顺序。它包括时间顺序、结构顺序、程度顺序。时间顺序不解释。书里说的结构顺序有点抽象，它各个结构相互独立，且需要穷尽所以结构。我直接举例说明吧，公司职位结构，包括董事长，副董，总经理等结构，他就是一种结构顺序，且当你描述公司职位结构的时候，需要描述所有的。程度顺序就比较好理解了，段落之间的思想可以是逐步升温，可以是先强后弱。这主要看文章的style，但是大多数情况下先交代重要的事情，更符合读者的阅读习惯。</p><ul><li>概括各组思想，避免啰嗦</li></ul><p>这是普遍存在的问题。我也存在这种问题，但它并不是错误，只是啰嗦的论点会导致各组思想不突出，读者也很难接收到你所想呈现的思想。列出该组思想的论点之后，你应该思考，这些论点之间是否都指向该中心思想，如果不是，可以再向下分层。且这些论点之间是否有重复的观点可以合并。这些加工的工作不应该交给读者，我们在写文章的时候就需要对文章进行优化，减少读者的误解。</p><h2>总结</h2><p>这篇文章也基于金字塔原理。背景，有人推荐这本书。冲突，读一本书需要花时间。疑问，花时间读这本书，是否有收获？。回答，有。主体结构利用归纳推理，从金字塔结构的作用、表达的方式、思考的过程三个论点论证金字塔原理对写作或者表达有帮助。其实，即使你没有读过这本书，你的写作思维也有金字塔原理的缩影，因为金字塔原理来自于人类思维的总结。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-766deff3fa7c75ec777109dd6c2fcd28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-766deff3fa7c75ec777109dd6c2fcd28_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-766deff3fa7c75ec777109dd6c2fcd28_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-766deff3fa7c75ec777109dd6c2fcd28_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>写作时间：<br/>20180802</p>", 
            "topic": [
                {
                    "tag": "金字塔原理（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20012241"
                }, 
                {
                    "tag": "人文", 
                    "tagLink": "https://api.zhihu.com/topics/20165532"
                }, 
                {
                    "tag": "书籍评价", 
                    "tagLink": "https://api.zhihu.com/topics/19596086"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41502551", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 10, 
            "title": "hybird App原理", 
            "content": "<h2>现有混合技术</h2><p>Hybird App，俗称混合应用，即融合了native和web技术进行开发的移动应用。下面三种技术主要在UI渲染机制上不同：</p><ol><li>基于Webview UI的基础方案。市面上主流，例如微信SDK，通过JsBridge完成H5和Native的双向通讯，从而赋予H5一定的原生能力。</li><li>基于Native UI的方案，例如React-native、Weex等。在赋予H5原生API能力的基础上，进一步通过JsBridge将js解析成虚拟dom传递到native，并使用原生渲染。</li><li>小程序方案。通过定制化的JsBridge，使用双Webview和双线程的模式隔离了JS逻辑和UI渲染，形成特殊的开发模式，加强了H5和原生的混合程度，提高了页面性能和开发体验。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7b8f58585f764a9cec57072bc3d8caa8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"608\" data-rawheight=\"688\" class=\"origin_image zh-lightbox-thumb\" width=\"608\" data-original=\"https://pic1.zhimg.com/v2-7b8f58585f764a9cec57072bc3d8caa8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;608&#39; height=&#39;688&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"608\" data-rawheight=\"688\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"608\" data-original=\"https://pic1.zhimg.com/v2-7b8f58585f764a9cec57072bc3d8caa8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7b8f58585f764a9cec57072bc3d8caa8_b.jpg\"/></figure><h2>Hybird带来的好处</h2><p>Hybird方案能利用H5强大的开发和迭代能力，又能赋予H5强大的底层能力和用户体验，同时能复用现有的成熟Native组件。</p><h2>Hybird原理</h2><p>Hybird App的本质，是在原生App中，使用Webview作为容器直接承载web页面。最核心的点就是Native和H5之间的双向通讯层，其实这里也可以理解为我们需要一套跨语言通讯方案，来完成Native（Java/Objective-c）与JavaScript的通讯。这个方案就是JsBridge。</p><p><b>（一）JavaScript通知Native</b></p><p>基于Webview的机制和开放的API，实现这个功能有三种常见的方案：</p><ul><li>API注入，Native获取JavaScript环境上下文，并直接在上面挂载对象挥着方案，使js可以直接调用，但IOS和Android需要分别挂载。</li><li>Webview中的prompt、console、alert拦截。</li><li>Webview URL Scheme 跳转拦截。但是又限制长度，因此需要制定新的参数传递规则，使用函数调用的方式。原理是，Native可以直接调用JS方法并直接获取函数的返回值。</li></ul><p><b>（二）Native通知JavaScript</b></p><p>由于Native可以算作H5的宿主，因此拥有更大的权限，Native可以直接通过Webview API直接执行JS代码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6dd99192a2a7aa94acfac4253316532f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-6dd99192a2a7aa94acfac4253316532f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-6dd99192a2a7aa94acfac4253316532f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6dd99192a2a7aa94acfac4253316532f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>（三）Jsbridge的接入</b></p><p>图片解释，从上图可以看出，分为两个部分：</p><ul><li>JS部分（bridge）：在JS环境中注入bridge的实现代码，包含协议的拼装/发送/参数池/回调池等。</li><li>Native部分（SDK）：在客户端中birdge的功能映射代码，使用URL拦截解析/环境信息的注入/通用功能映射等功能</li></ul><p>可以将这两部分封装成一个Native SDK，由客户端统一引入。客户端初始化一个Webview打开页面时，如果页面在白名单中，会直接在HTML头部注入对应的bridge.js。这样做的好处：：</p><ul><li>双方代码统一维护。更新时，只需更新客户端SDK，不会出现版本兼容问题。</li><li>App接入方便，只需按文档接入最新的SDK，即可运行Hybird方案</li><li>H5端无需关注，有利于将bridge开放给第三方页面使用。</li></ul><p><b>（四）App中H5的接入方式</b></p><ul><li>在线H5，客户端在Webview中直接打开URL。</li></ul><p>好处：</p><ol><li>独立性强，有独立的开发、调试、更新、上线能力。</li><li>资源通过服务端引入，不影响客户端体积。</li><li>接入成本低，完全的热更新机制。</li></ol><p>劣势：</p><ol><li>完全依赖网络，离线无法使用</li><li>首屏加载依赖网络。</li></ol><ul><li>客户端内置H5。</li></ul><p>优势：</p><ol><li>本地化，首屏加载快，体验接近原生。</li><li>不依赖网络，离线运行。</li></ol><p>劣势：</p><ol><li>开发流程、更新机制复杂，需要客户端和服务端共同合作</li><li>增加App包体积</li></ol><p>原文来自：<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/x-mmH0g3Y0AaFDqmIDzdhQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">mp.weixin.qq.com/s/x-mm</span><span class=\"invisible\">H0g3Y0AaFDqmIDzdhQ</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>摘录时间：<br/>20180801</p>", 
            "topic": [
                {
                    "tag": "Hybird", 
                    "tagLink": "https://api.zhihu.com/topics/20093438"
                }, 
                {
                    "tag": "iOS", 
                    "tagLink": "https://api.zhihu.com/topics/19550461"
                }, 
                {
                    "tag": "html5开发app", 
                    "tagLink": "https://api.zhihu.com/topics/19863231"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40928821", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "redux-saga笔记", 
            "content": "<h2>前言</h2><p>阅读这篇文章前，我默认你已经掌握了react和redux相关知识，否则，这篇文章对你来说没有太多意义。</p><h2>redux-saga背景介绍</h2><blockquote><code>redux-saga</code> is a library that aims to make application side effects（i.e asynchronous things like data fetch and impure things like accessing the broswer cache）eaiser to manage。——来自官网</blockquote><p>redux-saga是一个用于让管理应用的副作用更加简单的库。副作用包括异步获取数据，访问浏览器缓存等。<br/>简单点，他就是处理副作用的框架，那它和redux-thunk，redux-promise这些有什么区别？最主要的，redux-saga使用了ES6的Generator功能，让异步流程像同步流程一样。</p><h2>实现一个最简单的异步获取数据的demo</h2><p>通过按钮点击触发一个action，这个action触发saga，saga里获取异步数据（通过<code>axios</code>获取mock里的数据），最终处理完触发reducer更新store反馈到视图。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Demo.jsx</b>，这个jsx文件比较简单，是一个无状态组件，主要接收父组件的props。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Demo</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">children</span><span class=\"p\">,</span> <span class=\"nx\">onClick</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">test</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">list</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"p\">{</span><span class=\"nx\">list</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">item</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n          <span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">date</span><span class=\"p\">}</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;)</span>\n      <span class=\"p\">})}</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"nx\">marginTop</span><span class=\"o\">:</span> <span class=\"mi\">20</span><span class=\"p\">}}</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/div&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">id</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">onClick</span><span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span>\n        <span class=\"nx\">Demo获取数据</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n<span class=\"p\">);</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Demo</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DemoContainer.jsx</b>，这是一个高阶组件，主要负责业务流程逻辑的处理。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">connect</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">actions</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../../actions/index.js&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Demo</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Demo&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">mapStateToProps</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">ownProps</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"nx\">list</span><span class=\"o\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">list</span>\n<span class=\"p\">});</span>\n<span class=\"k\">const</span> <span class=\"nx\">mapDispatchToProps</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">dispatch</span><span class=\"p\">,</span> <span class=\"nx\">ownProps</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"nx\">onClick</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">actions</span><span class=\"p\">.</span><span class=\"nx\">getDemo</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">))</span>\n<span class=\"p\">});</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">connect</span><span class=\"p\">(</span>\n  <span class=\"nx\">mapStateToProps</span><span class=\"p\">,</span>\n  <span class=\"nx\">mapDispatchToProps</span>\n<span class=\"p\">)(</span><span class=\"nx\">Demo</span><span class=\"p\">);</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>demoAction.js</b>，这是一个action，服务于dispatch。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">types</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../constants/types&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">actions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">getDemo</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">SAGA_DEMO</span><span class=\"p\">,</span>\n      <span class=\"nx\">payload</span><span class=\"o\">:</span> <span class=\"nx\">id</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">actions</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>demoSaga.js</b>，saga文件，处理异步流程。首先<code>function*</code>表示getDemo是一个Generator函数，内部通过yield控制异步流程。下面是saga中几个常用副作用函数：</p><ul><li>call，接受一个返回promise的函数，使用生成器的方式来把异步变同步。</li><li>put，相当于redux的dispatch，用来触发reducer更新store。put是异步的。</li><li>takeEvery，会在接收到action之后不断产生新的副作用。与之对应的takeLatest，根据字面意思也能理解，即相同action触发，之前aciton未执行完，会取消之前aciton，只有最后一次才能生效。</li><li>take和fork，这里没有用到。take会阻塞流程，直到相应aciton触发，fork是无阻塞执行。</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">types</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../constants/types&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">call</span><span class=\"p\">,</span> <span class=\"nx\">put</span><span class=\"p\">,</span> <span class=\"nx\">take</span><span class=\"p\">,</span> <span class=\"nx\">takeEvery</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux-saga/effects&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">API</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../utils/api.js&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span><span class=\"o\">*</span> <span class=\"nx\">getDemo</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">api</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">API</span><span class=\"p\">.</span><span class=\"nx\">getDemo</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">api</span><span class=\"p\">);</span>\n  <span class=\"k\">yield</span> <span class=\"nx\">put</span><span class=\"p\">({</span>\n    <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">DEMO</span><span class=\"p\">,</span>\n    <span class=\"nx\">payload</span><span class=\"o\">:</span> <span class=\"nx\">res</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span><span class=\"o\">*</span> <span class=\"nx\">rootSage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">yield</span> <span class=\"nx\">takeEvery</span><span class=\"p\">(</span><span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">SAGA_DEMO</span><span class=\"p\">,</span> <span class=\"nx\">getDemo</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">rootSage</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>api.js</b>，处理请求的发起和接收。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;axios&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"k\">const</span> <span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">,</span> <span class=\"nx\">method</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">ajx</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">axios</span><span class=\"p\">[</span><span class=\"nx\">method</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ajx</span> <span class=\"o\">=</span> <span class=\"nx\">axios</span><span class=\"p\">[</span><span class=\"nx\">method</span><span class=\"p\">](</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ajx</span> <span class=\"o\">=</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">ajx</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">errorInfo</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;200&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">errorInfo</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 出现400+，500+错误\n</span><span class=\"c1\"></span>      <span class=\"nx\">errorHandle</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>demoReducer.js</b>，更新store。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">types</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../constants/types&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">getDemoReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">DEMO</span><span class=\"o\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">list</span><span class=\"o\">:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">list</span>\n      <span class=\"p\">};</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">getDemoReducer</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>index.js</b>，汇总所有的reducer</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">combineReducers</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">demo</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./demo&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">combineReducers</span><span class=\"p\">({</span>\n  <span class=\"nx\">demo</span>\n<span class=\"p\">});</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>index.js</b>，项目入口文件</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./containers/App&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Provider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createStore</span><span class=\"p\">,</span> <span class=\"nx\">applyMiddleware</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">rootReducer</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./reducers&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">createSageMiddleware</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux-saga&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">sagas</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./sagas&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">sagaMiddleware</span> <span class=\"o\">=</span> <span class=\"nx\">createSageMiddleware</span><span class=\"p\">();</span>\n<span class=\"k\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">createStore</span><span class=\"p\">(</span>\n  <span class=\"nx\">rootReducer</span><span class=\"p\">,</span> \n  <span class=\"nx\">applyMiddleware</span><span class=\"p\">(</span><span class=\"nx\">sagaMiddleware</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n<span class=\"nx\">sagaMiddleware</span><span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">(</span><span class=\"nx\">sagas</span><span class=\"p\">);</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">Provider</span> <span class=\"nx\">store</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">store</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/Provider&gt;,</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;root&#39;</span><span class=\"p\">));</span>\n</code></pre></div><h2>感悟</h2><p>使用<code>redux-saga</code>像是在写同步代码，且API直观简单，简化了异步流程和增强了异步控制。基于saga的阿里框架<a href=\"https://link.zhihu.com/?target=https%3A//github.com/dvajs/dva\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dva</a>，更是简便。react把状态管理交给社区是明智的，衍生出这么多优秀的副作用处理框架，包括最近很火的<code>redux-observable</code>，每次新技术的出现，真是让开发者又爱又恨啊。</p><p>源码地址：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/carrollcai/react-framework/tree/saga\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-5de72a60daec1dddad418789e28c4446_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">carrollcai/react-framework</a><p>写作时间：<br/>20180731</p>", 
            "topic": [
                {
                    "tag": "Redux", 
                    "tagLink": "https://api.zhihu.com/topics/20030680"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "Redux-thunk", 
                    "tagLink": "https://api.zhihu.com/topics/20059100"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40876191", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 0, 
            "title": "利用Webpack快速生成和发布营销活动页面", 
            "content": "<h2>前言</h2><p>我们公司有一项业务，营销活动，集成在手机浏览器和app。基本每隔2周就会有一个营销活动，之前模块是用JQ编写的，而且有一些与JsBridge对接的模块也是用JQ写的，并且JQ后端也能看得懂，所以我不想用vue或者react写营销活动。所以我就搭建基于了<b>JQ+ES6</b>的Webpack脚本，Webpack版本为3.12.0。实现功能：</p><ol><li>命令生成活动模块，活动模块直接引用公共模块内容。</li><li>利用webpack-server-dev启动一个服务，解决代码热加载和跨域问题。</li><li>加入babel编译，可以用es6+方式编写代码，以及用postcss编译css，保证兼容性。</li><li>根据活动目录打包，打包的活动相互独立。</li></ol><h2>项目结构</h2><blockquote>src<br/> &gt; commom<br/> &gt; modules<br/> &gt; template</blockquote><h2>命令构建</h2><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;my-event&#34;</span> npm run init</code></pre></div><p>执行上面命令会在modules下重新生成一个<b>my-event</b>的模块，并将template里所有内容复制进去，然后模块会引用common里的公共方法。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;my-event&#34;</span> npm run dev</code></pre></div><p>执行这个命令，会启动一个服务，src下面所有资源都能访问，以绝对路径访问活动页面，<code>http://localhost:9000/src/modules/my-event/index.html</code>，支持跨域和热加载</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;my-event&#34;</span> npm run build</code></pre></div><p>会将<b>my-event</b>活动模块打包到dist目录下，文件名就为<b>my-event</b></p><h2>每一个命令分析</h2><p>首先看一下package.json中配置的脚本</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"s2\">&#34;scripts&#34;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&#34;init&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;webpack -p --progress --config build/webpack.init.js&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;dev&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;webpack-dev-server --inline --progress --config build/webpack.dev.js --host 0.0.0.0 --port 9000&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;start&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;npm run dev&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;build&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;node build/build.js&#34;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>init，<b>webpack.init.js</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">CopyWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;copy-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">modulesPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;../src/modules&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"nx\">modulesPath</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 判断名称必填\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;NAME is must, please use &#34;NAME=test npm run init&#34;!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 判断名称是否已存在\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">item</span> <span class=\"k\">of</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span> <span class=\"o\">===</span> <span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;NAME is exist, please check!&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">initWebpackConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">app</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"sb\">`../src/main.js`</span><span class=\"p\">),</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"sb\">`../src/common/js`</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">//  拷贝template下的文件到modules下新生成的活动模块\n</span><span class=\"c1\"></span>    <span class=\"k\">new</span> <span class=\"nx\">CopyWebpackPlugin</span><span class=\"p\">([</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;../src/template&#39;</span><span class=\"p\">),</span>\n        <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"sb\">`../src/modules/</span><span class=\"si\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">),</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]),</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">initWebpackConfig</span><span class=\"p\">;</span>\n</code></pre></div><p>简单解释，这里的entry和output其实没有作用，主要是<code>CopyWebpackPlugin</code>实现了模板复制的功能。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>dev，<b>webpack.dev.js</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;../config&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">merge</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack-merge&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">baseWebpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./webpack.base.js&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">HOST</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">HOST</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">modulesPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;../src/modules&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"nx\">modulesPath</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">dir</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;..&#39;</span><span class=\"p\">,</span> <span class=\"nx\">dir</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 判断名称必填\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;NAME is must, please use &#34;NAME=test npm run start&#34;!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 判断名称是否不存在\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;NAME is not exist, please check!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">devWebpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">baseWebpackConfig</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">app</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"sb\">`../src/modules/</span><span class=\"si\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"si\">}</span><span class=\"sb\">/app.js`</span><span class=\"p\">)</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"sb\">`../src/modules/</span><span class=\"si\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">devServer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">clientLogLevel</span><span class=\"o\">:</span> <span class=\"s1\">&#39;warning&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">hot</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">contentBase</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">compress</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">host</span><span class=\"o\">:</span> <span class=\"nx\">HOST</span> <span class=\"o\">||</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">host</span><span class=\"p\">,</span>\n    <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">,</span>\n    <span class=\"nx\">publicPath</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">assetsPublicPath</span><span class=\"p\">,</span>\n    <span class=\"nx\">proxy</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">proxyTable</span><span class=\"p\">,</span>\n    <span class=\"nx\">overlay</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">errorOverlay</span>\n      <span class=\"o\">?</span> <span class=\"p\">{</span> <span class=\"nx\">warnings</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n      <span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// 正确解析js和css文件\n</span><span class=\"c1\"></span>      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;babel-loader&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">include</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"s1\">&#39;src&#39;</span><span class=\"p\">)]</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;style-loader!css-loader&#39;</span>\n      <span class=\"p\">},</span>\n      <span class=\"c1\">// 对js文件进行eslint校验，并把错误信息输入到浏览器上\n</span><span class=\"c1\"></span>      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;eslint-loader&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">enforce</span><span class=\"o\">:</span> <span class=\"s1\">&#39;pre&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">include</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"s1\">&#39;src&#39;</span><span class=\"p\">)],</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">formatter</span><span class=\"o\">:</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;eslint-friendly-formatter&#39;</span><span class=\"p\">),</span>\n          <span class=\"c1\">// 是否将错误输出到浏览器页面上\n</span><span class=\"c1\"></span>          <span class=\"nx\">emitWarning</span><span class=\"o\">:</span> <span class=\"o\">!</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">showEslintErrorsInOverlay</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">HotModuleReplacementPlugin</span><span class=\"p\">(),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"sb\">`./src/modules/</span><span class=\"si\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"si\">}</span><span class=\"sb\">/index.html`</span><span class=\"p\">,</span>\n      <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`./src/modules/</span><span class=\"si\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"si\">}</span><span class=\"sb\">/index.html`</span><span class=\"p\">,</span>\n      <span class=\"nx\">inject</span><span class=\"o\">:</span> <span class=\"s1\">&#39;body&#39;</span>\n    <span class=\"p\">}),</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">devWebpackConfig</span><span class=\"p\">;</span>\n</code></pre></div><p>逐个解析<br/>  - merge，webpack-merge提供的，将公共配置合并到现有配置的方法。<br/>  - entry，对应活动的js入口文件。<br/>  - output，在非<b>production</b>情况下，不输出文件，存在物理内存中。<br/>  - devServer，是Webpack内置的<code>webpack-server-dev</code>模块，配置本地服务，包括是否热加载，端口，对外路径，esling提示以及代理等。<br/>  - module下面有一个rules配置，可配置用什么loader解释文件，这里主要是用<code>babel-loader</code>将es6+编译成es5，<code>eslint-loader</code>校验js语法，<code>css-loader</code>解析css。<br/>  - plugins，即Webpack支持的第三方插件，<code>HotModuleReplacementPlugin</code>即热更新技术，只更新变更内容，不刷新浏览器。<code>HtmlWebpackPlugin</code>是重点，也是通过它支持指定路径的html文件，加载我们想要的活动模块。其中filename代表输出的文件，template代表输入的模板，inject为body，表示js入口文件放置在body底部。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>build，<b>webpack.prod.js</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">baseWebpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./webpack.base.js&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">merge</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack-merge&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;../config&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">UglifyJsPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;uglifyjs-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">ExtractTextPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;extract-text-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">OptimizeCSSPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">modulesPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;../src/modules&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"nx\">modulesPath</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">dir</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;..&#39;</span><span class=\"p\">,</span> <span class=\"nx\">dir</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">assetsPath</span><span class=\"p\">(</span><span class=\"nx\">_path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">assetsSubDirectory</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NODE_ENV</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;production&#39;</span>\n    <span class=\"o\">?</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">.</span><span class=\"nx\">assetsSubDirectory</span>\n    <span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">assetsSubDirectory</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">assetsSubDirectory</span><span class=\"p\">,</span> <span class=\"nx\">_path</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 判断名称必填\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;NAME is must, please use &#34;NAME=test npm run start&#34;!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 判断名称是否不存在\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;NAME is not exist, please check!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">prodWebpackConfig</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">baseWebpackConfig</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">app</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"sb\">`../src/modules/</span><span class=\"si\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NAME</span><span class=\"si\">}</span><span class=\"sb\">/app.js`</span><span class=\"p\">)</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">.</span><span class=\"nx\">assetsRoot</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"nx\">assetsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;js/[name].[chunkhash].js&#39;</span><span class=\"p\">),</span>\n    <span class=\"c1\">// 公共模块单独抽离，且保持hash不变\n</span><span class=\"c1\"></span>    <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"nx\">assetsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;js/[id].[chunkhash].js&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;babel-loader&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">include</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"s1\">&#39;src&#39;</span><span class=\"p\">)]</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"c1\">// 将css从js中抽离出来\n</span><span class=\"c1\"></span>        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"nx\">ExtractTextPlugin</span><span class=\"p\">.</span><span class=\"nx\">extract</span><span class=\"p\">({</span>\n          <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;postcss-loader&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">})</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">UglifyJsPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">uglifyOptions</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">compress</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">warnings</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}),</span>\n    <span class=\"c1\">// extract css into its own file\n</span><span class=\"c1\"></span>    <span class=\"k\">new</span> <span class=\"nx\">ExtractTextPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"nx\">assetsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;css/[name].[contenthash].css&#39;</span><span class=\"p\">),</span>\n      <span class=\"nx\">allChunks</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">OptimizeCSSPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">cssProcessorOptions</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">safe</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">.</span><span class=\"nx\">outIndex</span><span class=\"p\">,</span>\n      <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">.</span><span class=\"nx\">index</span><span class=\"p\">,</span>\n      <span class=\"nx\">inject</span><span class=\"o\">:</span> <span class=\"s1\">&#39;body&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">minify</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">removeComments</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">collapseWhitespace</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">removeAttributeQuotes</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">},</span>\n      <span class=\"nx\">chunksSortMode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dependency&#39;</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">CommonsChunkPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;vendor&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">minChunks</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n          <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">resource</span> <span class=\"o\">&amp;&amp;</span>\n          <span class=\"sr\">/\\.js$/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">resource</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n          <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">resource</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span>\n            <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;../node_modules&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"mi\">0</span>\n        <span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}),</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">prodWebpackConfig</span><span class=\"p\">;</span>\n</code></pre></div><p>production打包和dev大部分相同，output里多了<code>chunkFilename</code>，作用是公共模块单独抽离，且保持hash不变。plugin里，<code>UglifyJsPlugin</code>用于压缩代码，<code>ExtractTextPlugin</code>将css从js中分离变成单独css文件，<code>OptimizeCSSPlugin</code>压缩提取出的css，并解决<code>ExtractTextPlugin</code>分离出的js重复引用问题（多个文件引入同一css文件）。<code>HtmlWebpackPlugin</code>中多了minify，多html进行压缩，<code>chunksSortMode</code>决定script顺序按照文件依赖来。<code>CommonsChunkPlugin</code>是Webpack内置的分割js代码的插件。</p><h2>总结</h2><p>源码地址:</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/carrollcai/auto-compaign-template.git\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">营销活动模板</a><p class=\"ztext-empty-paragraph\"><br/></p><p>现在基本每一个框架都有一套完整的脚手架，我这套Webpack借鉴了vue-cli的部分配置，但是要想实现一些自定义的脚手架，还是需要理解Webpack主要实现了哪些功能。Webpack之前又出了4.0的版本，真的是学无止境啊。</p><p>写作时间:<br/>20180730</p>", 
            "topic": [
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }, 
                {
                    "tag": "vue-cli", 
                    "tagLink": "https://api.zhihu.com/topics/20079871"
                }, 
                {
                    "tag": "jQuery", 
                    "tagLink": "https://api.zhihu.com/topics/19557964"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40847993", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 3, 
            "title": "《为什么精英都是时间控》书评", 
            "content": "<p>我是一个正常的拖延症患者。寒暑假作业总在最后一天写完（这个<code>完</code>字我保留解释权）；总在考试前几天复习；总在最后20%时间完成80%的代码任务。我相信，大多数人都是我这种状态。有时候喝了点鸡汤，会在“规律”的生活中添加一些“混乱”，但总坚持不久。无意中，看到知乎上有人推荐这本书《为什么精英都是时间控》，正好适合我这种没有时间规划的人。</p><p>本书大概讲了几点，在有效的时间里提高专注力，利用好大脑的黄金时期；利用业务时间投资自己；通过运动或者某些方式，让大脑重启；最后是合理利用时间，用时间创造时间。</p><p>阅读完此书之后，我的生活和工作也发生了一定的变化。说一下我收益的几个点吧。</p><p><b>首先</b>，最明显的变化，我的有效时间明显变多了。下面是我每天的改变。<br/>我从没想过能利用早上时间给自己充电，现在我实现了。之前早上7.40起床，开车上班，正好赶上早高峰，8.50左右才能到公司，吃个早饭，就要进入上班状态了。现在我每天6.50起床，起来冲一个澡（书中提到的去除困意的方式），7点20出门，避开早高峰，7.50左右就到公司了，这样我早上就有一个小时的自我充电时间，我会用于研究新技术或者是总结知识。早上7-9点，是大脑的第一个黄金时段。</p><p>我平时也有午休的习惯，不过公司午间时间过长，我一般午休长达1个小时。午休时间超过30分钟，会让大脑更加昏沉，难怪我下午都无精打采。所以我将午休时间调整为半个小时，另外半个小时，用于阅读书籍。合理的利用了时间，又达到了给自己充电的目的，简直一举两得。这里提示一下，午休完之后，大脑处于极佳的状态，是大脑的第二个黄金时段，可以用于高难度作业。</p><p>我之前晚上也有跑步的习惯，但是每次跑完步，洗完澡，就上床玩手机了。殊不知运动完之后，会让大脑重新清醒，大脑也迎来了第三个黄金时段。这时候就可以做一些创造性或者学习。但是这里需要注意，跑步的时间和睡觉的时间应该相差3个小时，相差时间过短，容易造成大脑或者肢体亢奋，失眠了可别怪我。</p><p><b>其次</b>，是一些在工作中的总结。书中提到一些微小的点，<code>2分钟判断术</code>。即当有一个任务抵达，你判断这个任务是否能在2分钟完成（2分钟也只是一个概念，代较短的时间），如果可以，优先完成，否则加入到每天待做表中。<code>不要在疲惫的时间做无用功</code>，大家也能觉得我在说加班时间，毕竟国内加班情况严重，但是我这里值的不仅仅是加班时间，还有白天的时间。当你工作了1个小时，已经感觉疲惫了，但是因为任务繁重，你不得不继续工作，其实你的工作效率此时已经处于直线下降。举个简单的例子，为什么上学的时候，是上45分钟的课，然后课间休息10分钟，因为大脑持续专注时间大概也是45分钟左右，多于这个时间大脑就会开小差。我的专注时间可能只有别人的1/3，因为我每节课都要开2，3次小差。所以疲惫的时间，什么都不要思考，让大脑休息5分钟。</p><p>最后，合理利用时间，用时间创造时间。实际上这说的是一种循环。你利用课余时间充实了自己的技能，肯定会让你的工作更顺心应手，工作效率提高了，就在工作节省了更多时间，这些时间又可以用来充实自己。以此往复，很快你的工作和技能都会提升一个level。</p><p>所以我强烈推荐这本书给没有时间概念的人。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fae9eb62610924b1ceba24456ad49325_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-fae9eb62610924b1ceba24456ad49325_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3264&#39; height=&#39;2448&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-fae9eb62610924b1ceba24456ad49325_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fae9eb62610924b1ceba24456ad49325_b.jpg\"/></figure><p>写作时间：20180730</p>", 
            "topic": [
                {
                    "tag": "精英主义", 
                    "tagLink": "https://api.zhihu.com/topics/19581514"
                }, 
                {
                    "tag": "精英", 
                    "tagLink": "https://api.zhihu.com/topics/19631677"
                }, 
                {
                    "tag": "书籍", 
                    "tagLink": "https://api.zhihu.com/topics/19553713"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36737693", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 0, 
            "title": "通过mockjs搭建本地数据模拟服务", 
            "content": "<blockquote>mock数据是前端不变的需求。那怎么才能轻松的本地模拟后端数据。本文通过在npm start的起一个mock服务，前端可通过http请求的方式，获取模拟的json文件的内容。最关键的是，mock可以模拟和后端一样的接口路径，最终只需要改域名地址，就可以实现前端模拟接口和后端接口的无缝切换。本文以vue为例子，讲解前后端如何交互。</blockquote><h2>原理</h2><p>利用express起一个服务（端口3618），通过<code>glob</code>库获取<code>json文件</code>的内容，添加到<code>apiContArr</code>数组中，同时用<code>fs.watchFile</code>实现文件的监听，最后通过express里的<code>res.json</code>函数将json内容以json格式传输给前台。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>代码</h2><ul><li>前端代码</li></ul><blockquote>通过<code>axios</code>这个库，实现restful风格的请求</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;axios&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">,</span> <span class=\"nx\">method</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">ajx</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;get&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ajx</span> <span class=\"o\">=</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;delete&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ajx</span> <span class=\"o\">=</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ajx</span> <span class=\"o\">=</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">put</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ajx</span> <span class=\"o\">=</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">ajx</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">development</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;http://localhost:3618&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">API</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">method</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">params</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">development</span> <span class=\"o\">+</span> <span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">,</span> <span class=\"nx\">method</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 调用getDemoAPI即可请求数据\n</span><span class=\"c1\"></span><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">getDemoAPI</span><span class=\"o\">:</span> <span class=\"nx\">API</span><span class=\"p\">(</span><span class=\"s1\">&#39;/demo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>后端代码</li></ul><blockquote>json内容读取和实时监听文件变化</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">)();</span>\n<span class=\"k\">const</span> <span class=\"nx\">mock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mockjs&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">glob</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;glob&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 存放所有api内容\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">apiContArr</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> \n\n<span class=\"kr\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">apiPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./*.json&#39;</span><span class=\"p\">);</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">apiPathArr</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">getPath</span><span class=\"p\">(</span><span class=\"nx\">apiPath</span><span class=\"p\">);</span>\n  <span class=\"kr\">await</span> <span class=\"nx\">getApis</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// 监听JSON文件的变化\n</span><span class=\"c1\"></span>  <span class=\"nx\">apiPathArr</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">curr</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;API is updated.&#39;</span><span class=\"p\">,</span> <span class=\"nx\">curr</span><span class=\"p\">.</span><span class=\"nx\">mtime</span><span class=\"p\">);</span>\n      <span class=\"nx\">getApis</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// 将json里的内容添加到apiContArr当中\n</span><span class=\"c1\"></span>  <span class=\"kd\">function</span> <span class=\"nx\">getApis</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">apiPathArr</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kr\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">cont</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">cont</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"s1\">&#39;content must exsit.&#39;</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">apiContArr</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">cont</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">init</span><span class=\"p\">();</span>\n</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0bc94aea126413de47b6845c362fca53_b.jpg\" data-size=\"normal\" data-rawwidth=\"1836\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb\" width=\"1836\" data-original=\"https://pic4.zhimg.com/v2-0bc94aea126413de47b6845c362fca53_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1836&#39; height=&#39;880&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1836\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1836\" data-original=\"https://pic4.zhimg.com/v2-0bc94aea126413de47b6845c362fca53_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0bc94aea126413de47b6845c362fca53_b.jpg\"/><figcaption>读取所有json下的请求，请求地址对应的就是url属性，以此图为例，访问的接口地址就是localhost:3618/demo</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><blockquote>注册url服务</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">delay</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">apiContArr</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">val</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">reqData</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">reqData</span><span class=\"p\">.</span><span class=\"nx\">regexp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">new</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">reqData</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">originalUrl</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">originalUrl</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">reqData</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">let</span> <span class=\"nx\">apiRes</span> <span class=\"o\">=</span> <span class=\"nx\">reqData</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">;</span>\n      <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">reqData</span><span class=\"p\">.</span><span class=\"nx\">mock</span> <span class=\"o\">?</span> <span class=\"nx\">mock</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"nx\">apiRes</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">apiRes</span><span class=\"p\">;</span>\n      <span class=\"nx\">delay</span> <span class=\"o\">=</span> <span class=\"nx\">reqData</span><span class=\"p\">.</span><span class=\"nx\">delay</span> <span class=\"o\">||</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;Access-Control-Allow-Origin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;*&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;Access-Control-Allow-Methods&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;POST, GET, PUT, DELETE, OPTIONS&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;Access-Control-Allow-Headers&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Origin, X-Requested-With, Content-Type, Accept, Authorization&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">data</span> <span class=\"o\">!==</span> <span class=\"kc\">undefined</span> <span class=\"o\">?</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">),</span> <span class=\"nx\">delay</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendStatus</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;3618&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Mock server is listening at 3618&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><blockquote>辅助函数</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 获取某一目录下所有文件名\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">getPath</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">glob</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">er</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">er</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">er</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><blockquote>在package.json中添加mock服务。</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"s2\">&#34;name&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;vue-common-template&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;version&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1.0.0&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;description&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;common template&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;author&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;carroll&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;scripts&#34;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&#34;start&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;npm run mock | npm run dev&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;mock&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;node mock/app.js&#34;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>呈现效果</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-79832975a4418b962ad20893451eea80_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2310\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"2310\" data-original=\"https://pic1.zhimg.com/v2-79832975a4418b962ad20893451eea80_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2310&#39; height=&#39;650&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2310\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2310\" data-original=\"https://pic1.zhimg.com/v2-79832975a4418b962ad20893451eea80_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-79832975a4418b962ad20893451eea80_b.jpg\"/></figure><h2>地址</h2><p>我通过vue-cli搭建了一个vue开箱即用的模板，其中实现了mock功能，<a href=\"https://zhuanlan.zhihu.com/write\" class=\"internal\">https://github.com/carrollcai/vue-template</a>。你可以通过下载这个模板，体验一下本地mock。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>======<br/>当然这个mock还有很多不完善的地方，但是本地调试基本够用。如果错误请指出，谢谢。</p>", 
            "topic": [
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "mock server", 
                    "tagLink": "https://api.zhihu.com/topics/20043502"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36189955", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 0, 
            "title": "参考v-dom，对比两JS对象树，记录差异", 
            "content": "<h2>介绍 </h2><ul><li>本文将介绍在JS中，两颗新旧JS对象树的对比，A对象经过修改变成B对象，现在要在B对象里，体现数据做了哪些更改，是新增，修改还是删除？</li></ul><h2>需求</h2><ul><li>有一个表单报文，内容多，且层次比较深。如果提交报文的时候某处更新了，需要告诉后端哪里更新了（后端美言之为了性能，遍历两棵树耗性能），并打上tag（tag有类型）。每条数据有一个tag状态的标识action。默认action = 3（未改变）。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">数据删除（delete）：action = 0\n数据新增（create）：action = 1\n数据修改（update）：action = 2\n数据不变（unchanged）：action = 3</code></pre></div><h2>难点</h2><ul><li>数据可能是新增、修改、或者删除，删除的数据也需要发送给后台，前端需要对删除数据进行save。</li><li>子层数据发生变化了，父层的action也要相应的变成修改状态的action。</li></ul><h2>启发</h2><ul><li>因为最近在研究Virtual DOM的diff，也深受启发。从DOM对象树映射到JavaScript对象，通过给旧DOM树添加一个唯一标记，然后diff虚拟树，再通过唯一标记把patch的信息追加到旧DOM树。其中，JSON树的对比与diff虚拟树是差不多的过程，只不过patch的部分，JSON树是直接把差异追加到新JSON树，而不是DOM。</li></ul><a href=\"https://www.zhihu.com/question/29504639\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">如何理解虚拟DOM?</a><h2>解决方案</h2><ol><li>最简单的解决方案就是，在每个输入框加一个监听事件，数据发生改变，在此数据上加一个action。</li><li>也是我原来使用的方案，新增和修改直接改变原来JSON树；删除特殊处理，将JSON树中数据删除，并且将删除的数据存储到全局store中。数据提交的时候，用递归，将所有数据的状态改为修改（update），将这条store中删除数据patch到原删除位置，并且action改为删除（delete）。</li><li>也是本文的核心，给JSON树每层数据加上tag，将旧JSON树存储到全局store中。修改数据，提交，将旧JSON树同新JSON树进行对比，修改的部分追加到新JSON树。</li></ol><h2>简单例子</h2><p>修改前</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">old</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">obj</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>加上标记 __i__</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">old</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">obj</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"c1\">// 注意数组的tag是递增的\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>修改后</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">old</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">obj</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n      <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>最终提交的报文</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">old</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">obj</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"c1\">// 这边数据保持不变\n</span><span class=\"c1\"></span>    <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// 这是一条修改的数据\n</span><span class=\"c1\"></span>      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n      <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// 这是一条新增的数据\n</span><span class=\"c1\"></span>      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// 这是一条删除的数据\n</span><span class=\"c1\"></span>      <span class=\"nx\">action</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"nx\">__i__</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>实现</h2><div class=\"highlight\"><pre><code class=\"language-text\">const DELETE = 0\nconst CREATE = 1\nconst UPDATE = 2\nconst UNCHANGED = 3\n\nconst ACTION_TYPE = &#39;actionType&#39;\nconst MARK = &#39;__i__&#39;\n\n// 只是实现主体功能，具体内部实现可以看源码\nclass Compare {\n  Init (obj, __i__ = 1) {\n    // 初始化数据，给数据添加__i__标记\n  }\n  Diff(oldTree, newTree) {\n    // 对比旧树和新树，并且把数据的变更也反应到新树上\n\n    let is = isEqual(oldTree, newTree) // 对比JSON对象是否有差异\n    newTree[ACTION_TYPE] = is ? newTree[ACTION_TYPE] : UPDATE\n\n    this.createAndUpdate(oldTree, newTree) // 新增数据和修改数据标记\n    this.delete(oldTree, newTree) // 追加删除数据\n  }\n  createAndUpdate(oldTree, newTree) {\n    // 添加新增和修改类型\n  }\n  delete(oldTree, newTree) {\n    // 添加删除类型\n  }\n}\n\nfunction isEqual(a, b) {\n  return _.isEqual(a, b) // 参考underscore中isEqual的实现\n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>源码地址：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/carrollcai/tree-diff\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">github源码</a></p><p></p>", 
            "topic": [
                {
                    "tag": "JSON", 
                    "tagLink": "https://api.zhihu.com/topics/19602492"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37155954", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 0, 
            "title": "在RN在使用字体图标", 
            "content": "<p><b>备注：本教程目前只有ios实践。</b></p><p>因为教程网上教程很多已经不能用，或者本身不能用，我写一篇简单的个人实践，当然已经在ios中实现了。</p><h2><b>安装</b></h2><p>首先需要借助第三方<code>react-native-vector-icons</code>。</p><div class=\"highlight\"><pre><code class=\"language-text\">npm install react-native-vector-icons --save</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/oblador/react-native-vector-icons\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-d78882548f5f0f5340e49cb548765ea9_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">oblador/react-native-vector-icons</a><p>下面显示的是第三库已经导入了我们需要的字体文件，你可以从中选择自己想要的图标库。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d997784109471d5cdd8a0a09538bfd56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1418\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb\" width=\"1418\" data-original=\"https://pic3.zhimg.com/v2-d997784109471d5cdd8a0a09538bfd56_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1418&#39; height=&#39;644&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1418\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1418\" data-original=\"https://pic3.zhimg.com/v2-d997784109471d5cdd8a0a09538bfd56_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d997784109471d5cdd8a0a09538bfd56_b.jpg\"/></figure><h2><b>添加字体</b></h2><p>在项目的ios目录找到<code>Info.plist</code> ，双击用xcode打开，添加一个属性<b>Fonts provided by application</b>，然后在对应item里面添加你想要的字体，比如你想要引用materialIcons字体，就填入materialIcons.ttf。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7699219f09a1dded7ee575990a4c3653_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"91\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-7699219f09a1dded7ee575990a4c3653_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;91&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"91\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-7699219f09a1dded7ee575990a4c3653_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7699219f09a1dded7ee575990a4c3653_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//material.io/tools/icons/%3Fstyle%3Dbaseline\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">materialIcons图标库</a><h2><b>关联</b></h2><p>最后你需要用react native命令关联一下。</p><div class=\"highlight\"><pre><code class=\"language-text\">react-native link</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>在项目中引用</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">Icon</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-native-vector-icons/MaterialIcons&#39;</span><span class=\"p\">;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">View</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">}</span> <span class=\"nx\">onPress</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addTodo</span><span class=\"p\">()}</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">Icon</span> <span class=\"nx\">iconStyle</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">addIcon</span><span class=\"p\">}</span> <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">&#34;add&#34;</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">30</span><span class=\"p\">}</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"s2\">&#34;#52C0FE&#34;</span><span class=\"o\">/&gt;</span> \n<span class=\"o\">&lt;</span><span class=\"err\">/View&gt;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>重启项目，你将看到</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6b8996fc6a01f40a6e80f644b07f2644_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"770\" data-rawheight=\"892\" class=\"origin_image zh-lightbox-thumb\" width=\"770\" data-original=\"https://pic1.zhimg.com/v2-6b8996fc6a01f40a6e80f644b07f2644_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;770&#39; height=&#39;892&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"770\" data-rawheight=\"892\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"770\" data-original=\"https://pic1.zhimg.com/v2-6b8996fc6a01f40a6e80f644b07f2644_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6b8996fc6a01f40a6e80f644b07f2644_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>不好意思，图有一点丑。项目还在开发中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>安卓的教程，<code>react-native-vector-icons</code>也给出了解决方案。</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/oblador/react-native-vector-icons\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-d78882548f5f0f5340e49cb548765ea9_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">oblador/react-native-vector-icons</a><p></p>", 
            "topic": [
                {
                    "tag": "React Native", 
                    "tagLink": "https://api.zhihu.com/topics/20025477"
                }, 
                {
                    "tag": "Icon Font", 
                    "tagLink": "https://api.zhihu.com/topics/20007732"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39644959", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 4, 
            "title": "不基于action的文件上传方式", 
            "content": "<ul><li>前言</li></ul><p>后端上传文件需要将header里的<code>Content-Type</code>改为multipart/form-data。我们用的UI框架是Element-UI，它只提供了file类型aciton的上传方式，将url写在action里不好维护和管理。而且如果使用<code>this.$refs.xxx.submit();</code>的方式提交表单。action会执行两次，有一次无效请求。所以我封装了一个upload方法，专供文件上传。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-11a58cfd7a56e4693425581656bc5a58_b.jpg\" data-size=\"normal\" data-rawwidth=\"1118\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"1118\" data-original=\"https://pic1.zhimg.com/v2-11a58cfd7a56e4693425581656bc5a58_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1118&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1118\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1118\" data-original=\"https://pic1.zhimg.com/v2-11a58cfd7a56e4693425581656bc5a58_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-11a58cfd7a56e4693425581656bc5a58_b.jpg\"/><figcaption>此图为element-ui官网的上传，发送了两次请求</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>代码实现</li></ul><p>代码比较简单，主要是基于axios，axios默认<code>Content-Type</code>为application/json，需要修改header。而且不希望使用API者过早关注FormData（js中用于文本上传的对象）这个对象，他们在调用API时，传递的是JSON对象。在API中我们封装了一个jsonToFormData方法将JSON对象转为文本上传支持的FormData对象。</p><p><b>api.js</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">upload</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">params</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">formData</span> <span class=\"o\">=</span> <span class=\"nx\">jsonToFormData</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">configs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span>\n      <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;multipart/form-data&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">return</span> <span class=\"nx\">API</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">formData</span><span class=\"p\">,</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span> <span class=\"nx\">configs</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/*\n</span><span class=\"cm\">* 将json对象转成FormData对象\n</span><span class=\"cm\">* 只支持对象，暂不支持数组和多层嵌套。\n</span><span class=\"cm\">*/</span>\n<span class=\"kd\">function</span> <span class=\"nx\">jsonToFormData</span><span class=\"p\">(</span><span class=\"nx\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">json</span><span class=\"p\">))</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;jsonToFormData dont support Array&#39;</span><span class=\"p\">);</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">formData</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FormData</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"k\">in</span> <span class=\"nx\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">x</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">,</span> <span class=\"nx\">val</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">x</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">,</span> <span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">formData</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>其中API的实现，就是对axios的一层封装，主要起到拦截器作用和支持restful。</p><p><b>api.js</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">API</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">,</span> <span class=\"nx\">method</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span> <span class=\"nx\">configs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 开启全局loading\n</span><span class=\"c1\"></span>  <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">commit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SHOW_PAGE_LOADING&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">ajx</span><span class=\"p\">;</span>\n    <span class=\"nx\">axios</span><span class=\"p\">[</span><span class=\"nx\">method</span><span class=\"p\">](</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">,</span> <span class=\"nx\">configs</span><span class=\"p\">);</span>\n    <span class=\"nx\">ajx</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">commit</span><span class=\"p\">(</span><span class=\"s1\">&#39;HIDE_PAGE_LOADING&#39;</span><span class=\"p\">);</span>\n      <span class=\"c1\">// 统一处理返回逻辑\n</span><span class=\"c1\"></span>      <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">commit</span><span class=\"p\">(</span><span class=\"s1\">&#39;HIDE_PAGE_LOADING&#39;</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// 出现400+，500+错误\n</span><span class=\"c1\"></span>      <span class=\"nx\">errorHandle</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>下面就是对upload这个对象的调用，在api文件中将这个api导出。</p><p><b>api.js</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">uploadOrderHandleTaskAPI</span><span class=\"o\">:</span> <span class=\"nx\">upload</span><span class=\"p\">(</span><span class=\"s1\">&#39;www.baidu.com&#39;</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在vuex的action文件中处理这个逻辑</p><p><b>action.js</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">actions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">uploadOrderHandleTask</span><span class=\"o\">:</span> <span class=\"p\">({</span> <span class=\"nx\">commit</span> <span class=\"p\">},</span> <span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">API</span><span class=\"p\">.</span><span class=\"nx\">uploadOrderHandleTaskAPI</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// commit something\n</span><span class=\"c1\"></span>      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">actions</span><span class=\"p\">;</span>\n</code></pre></div><p>最终只要在页面中调用uploadOrderHandleTask这个action就ok了。这里需要注意，在上传过程中，大多数el-upload的生命周期hook都不起作用，需要借助on-change和on-remove。</p><p><b>xxx.vue文件</b></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">el-form-item</span> <span class=\"na\">label</span><span class=\"o\">=</span><span class=\"s\">&#34;签约合同：&#34;</span> <span class=\"na\">prop</span><span class=\"o\">=</span><span class=\"s\">&#34;files&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">el-upload</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;upload-demo&#34;</span> <span class=\"na\">:auto-upload</span><span class=\"o\">=</span><span class=\"s\">&#34;false&#34;</span> <span class=\"na\">:on-change</span><span class=\"o\">=</span><span class=\"s\">&#34;fileChange&#34;</span> <span class=\"na\">:multiple</span><span class=\"o\">=</span><span class=\"s\">&#34;false&#34;</span> <span class=\"na\">:on-remove</span><span class=\"o\">=</span><span class=\"s\">&#34;removeFile&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">el-button</span> <span class=\"na\">slot</span><span class=\"o\">=</span><span class=\"s\">&#34;trigger&#34;</span> <span class=\"na\">size</span><span class=\"o\">=</span><span class=\"s\">&#34;small&#34;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">i</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;icon-up margin-right-8&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">i</span><span class=\"p\">&gt;</span>上传文件<span class=\"p\">&lt;/</span><span class=\"nt\">el-button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">el-upload</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">el-form-item</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">el-form-item</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">el-button</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;primary&#34;</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"o\">=</span><span class=\"s\">&#34;submitAssignForm()&#34;</span><span class=\"p\">&gt;</span>确定<span class=\"p\">&lt;/</span><span class=\"nt\">el-button</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">el-form-item</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span> \n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">assignForm</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fileChange</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">fileList</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">assignForm</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">raw</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">removeFile</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">fileList</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 筛选选中的文件\n</span><span class=\"c1\"></span>      <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">assignForm</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">findIndex</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">val</span><span class=\"p\">.</span><span class=\"nx\">uid</span> <span class=\"o\">===</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">raw</span><span class=\"p\">.</span><span class=\"nx\">uid</span><span class=\"p\">);</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">assignForm</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">submitAssignForm</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fileTypeId</span><span class=\"o\">:</span> <span class=\"mi\">502</span><span class=\"p\">,</span>\n        <span class=\"nx\">moduleId</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">assignForm</span><span class=\"p\">.</span><span class=\"nx\">files</span>\n      <span class=\"p\">};</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">uploadOrderHandleTask</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">...</span><span class=\"nx\">mapActions</span><span class=\"p\">([</span>\n      <span class=\"s1\">&#39;uploadOrderHandleTask&#39;</span>\n    <span class=\"p\">])</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>踩坑</li></ul><p>因为需要支持上传多个文件，因为我在<code>:multiple=&#34;false&#34;</code>设置了不允许一次上传多个文件，只能一次上传一个，但是允许分批次上传。在我理解中<code>form-data</code>对象应该和<code>x-www-form-urlencoded</code>类型相似，所以针对数组files，上传时会将<code>files</code>改为<code>files[]</code>。所以我当时专门针对数组进行了操作。我在formData.append时特地将数组字段名后面加了<code>[]</code>。代码如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">jsonToFormData</span><span class=\"p\">(</span><span class=\"nx\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">json</span><span class=\"p\">))</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;jsonToFormData dont support Array&#39;</span><span class=\"p\">);</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">formData</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FormData</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"k\">in</span> <span class=\"nx\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n      <span class=\"o\">*****************************************************</span>\n      <span class=\"nx\">错误代码</span><span class=\"err\">：</span><span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">x</span><span class=\"si\">}</span><span class=\"sb\">[]`</span><span class=\"p\">,</span> <span class=\"nx\">val</span><span class=\"p\">));</span>\n      <span class=\"nx\">正确代码</span><span class=\"err\">：</span><span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">x</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">,</span> <span class=\"nx\">val</span><span class=\"p\">));</span>\n      <span class=\"o\">*****************************************************</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">x</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">,</span> <span class=\"nx\">json</span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">formData</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这样造成了后端接收不到files这个数组的数据，后来通过postman（api模拟工具）模拟，才发现，原来浏览器已经帮我们做了这件事情，它能检测files是单文件还是多文件，我们无需关心files字段名的改变。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>总结</li></ul><p>在开发过程中，关于http的操作我们应该放在一起，如果通过el-upload的action的方式提交上传文件，会让上传的url不好管理，而且错误的返回也需要单独处理（无法走全局的axios拦截）。希望这篇文章对于有帮助，如果有问题，请及时联系我，谢谢。</p>", 
            "topic": [
                {
                    "tag": "前端框架", 
                    "tagLink": "https://api.zhihu.com/topics/19806306"
                }, 
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "饿了么外卖", 
                    "tagLink": "https://api.zhihu.com/topics/19596785"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38325718", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "G2（Antv）在vue中的实践", 
            "content": "<h2>前言</h2><p>团队使用G2的原因，主要是设计师认可阿里的审美，UI视觉稿输出的就是G2的图表。</p><h2>在vue中使用G2，Echarts等图表原理</h2><p>为不同类型的图表建不同的文件，Line，Map，Pie等。在mounted（dom结构已经生成的时候），调用图表的渲染函数，对外暴露一个data，并且watch一个data，当data改变的时候，重新调用图表的渲染函数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Line.vue示例</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">:style</span><span class=\"o\">=</span><span class=\"s\">&#34;{ width: `${width}px`, height:`${height}px` }&#34;</span> <span class=\"na\">:id</span><span class=\"o\">=</span><span class=\"s\">&#34;id&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">G2</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@antv/G2&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">chart</span><span class=\"o\">:</span> <span class=\"kc\">null</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">charData</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">Array</span><span class=\"p\">,</span>\n      <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">[];</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">width</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">Number</span>\n      <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"mi\">500</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">Number</span><span class=\"p\">,</span>\n      <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"mi\">500</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">mounted</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">drawChart</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">charData</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">watch</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">charData</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">oldVal</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">drawChart</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">drawChart</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">height</span><span class=\"p\">,</span> <span class=\"nx\">id</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">destroy</span><span class=\"p\">();</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">G2</span><span class=\"p\">.</span><span class=\"nx\">Chart</span><span class=\"p\">({</span>\n        <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"nx\">id</span><span class=\"p\">,</span>\n        <span class=\"nx\">forceFit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"nx\">height</span><span class=\"p\">,</span>\n        <span class=\"nx\">padding</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">]</span>\n      <span class=\"p\">});</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">source</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"p\">().</span><span class=\"nx\">position</span><span class=\"p\">(</span><span class=\"s1\">&#39;periodId*value&#39;</span><span class=\"p\">).</span><span class=\"nx\">size</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">shape</span><span class=\"p\">(</span><span class=\"s1\">&#39;smooth&#39;</span><span class=\"p\">);</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">point</span><span class=\"p\">().</span><span class=\"nx\">position</span><span class=\"p\">(</span><span class=\"s1\">&#39;periodId*value&#39;</span><span class=\"p\">).</span><span class=\"nx\">shape</span><span class=\"p\">(</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">);</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>当然你想对图表数据的显示进行操作，就需要单独引用DataSet函数，这样减少了不必要的包的体积。</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">DataSet</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@antv/data-set&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">ds</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DataSet</span><span class=\"p\">();</span>\n<span class=\"k\">const</span> <span class=\"nx\">dv</span> <span class=\"o\">=</span> <span class=\"nx\">ds</span><span class=\"p\">.</span><span class=\"nx\">createView</span><span class=\"p\">().</span><span class=\"nx\">source</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"nx\">dv</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">({</span>\n  <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;fold&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">fields</span><span class=\"o\">:</span> <span class=\"nx\">fields</span><span class=\"p\">,</span>\n  <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"s1\">&#39;which&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;value&#39;</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">source</span><span class=\"p\">(</span><span class=\"nx\">dv</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">periodId</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">range</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><h2>对比Echarts</h2><ul><li>因为之前一直都在用Echarts，期间也用过charts，highcharts等，这些基本都是一个模式的，通过树状结构的配置渲染图表。有时候图表option的配置可能很长，所以我们当时做大屏展示的时候，将option抽出成一个单独的js文件，减少.vue文件行数。也可能是当时项目比较大，分工比较细，每一个图表基本都要新建一个option，代码比较冗余。但好处是，可以抽象出一个Chart.vue这样的公共组件，供所有图表使用，调只需提供option。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>而在使用G2的使用，我就无法抽出这样一个公共的组件，虽然G2支持树状结构的配置，但是通过函数方式调用，结构更加直观，扁平，更重要的是，你可以通过标签声明式的方式组成图表，官方就有推荐vue-viser。Antv也支持响应式，通过配置forceFit: true就可以实现宽度的自适应。而echarts需要通过监听window.resize，或者watch高度的变化，调用this.chart.resize()重新resize视图。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>Chart.vue(Echarts)</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">:style</span><span class=\"o\">=</span><span class=\"s\">&#34;{height:height,width:width}&#34;</span> <span class=\"na\">ref</span><span class=\"o\">=</span><span class=\"s\">&#34;myEchart&#34;</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">mapState</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;vuex&#39;</span>\n  <span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n    <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">width</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n      <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n      <span class=\"nx\">setOption</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">Object</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">data</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">chart</span><span class=\"o\">:</span> <span class=\"kc\">null</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">mounted</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">initChart</span><span class=\"p\">()</span>\n      <span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">beforeDestroy</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">initChart</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">echarts</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$refs</span><span class=\"p\">.</span><span class=\"nx\">myEchart</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 把配置和数据放这里\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setOption</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">setOption</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setOption</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nx\">changeSetOption</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setOption</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">setOption</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setOption</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">watch</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">&#39;setOption&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;changeSetOption&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>vue-viser示例</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">v-chart</span> <span class=\"na\">:forceFit</span><span class=\"o\">=</span><span class=\"s\">&#34;true&#34;</span> <span class=\"na\">:height</span><span class=\"o\">=</span><span class=\"s\">&#34;height&#34;</span> <span class=\"na\">:data</span><span class=\"o\">=</span><span class=\"s\">&#34;data&#34;</span> <span class=\"na\">:scale</span><span class=\"o\">=</span><span class=\"s\">&#34;scale&#34;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">v-tooltip</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">v-axis</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">v-line</span> <span class=\"na\">position</span><span class=\"o\">=</span><span class=\"s\">&#34;year*value&#34;</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">v-point</span> <span class=\"na\">position</span><span class=\"o\">=</span><span class=\"s\">&#34;year*value&#34;</span> <span class=\"na\">shape</span><span class=\"o\">=</span><span class=\"s\">&#34;circle&#34;</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">v-chart</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"k\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span> <span class=\"nx\">year</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1991&#39;</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"p\">},</span>\n  <span class=\"p\">{</span> <span class=\"nx\">year</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1992&#39;</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"p\">},</span>\n<span class=\"p\">];</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">scale</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n  <span class=\"nx\">dataKey</span><span class=\"o\">:</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">min</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"p\">},{</span>\n  <span class=\"nx\">dataKey</span><span class=\"o\">:</span> <span class=\"s1\">&#39;year&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">min</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">}];</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"nx\">scale</span><span class=\"p\">,</span>\n      <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><h2>总结</h2><p>个人感觉Antv的学习曲线高一点，而且Antv还年轻，缺少沉淀，网上没有多少除官方以为的资料，而且你经常无法从官方获取你想要的解决的问题。echarts有更深的沉淀，网上资料齐全。性能方面没有做过对比，看好Antv的发展，默默在github上点了赞。</p>", 
            "topic": [
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "Ant Design", 
                    "tagLink": "https://api.zhihu.com/topics/20023366"
                }, 
                {
                    "tag": "ECharts", 
                    "tagLink": "https://api.zhihu.com/topics/20005584"
                }
            ], 
            "comments": [
                {
                    "userName": "涂图途", 
                    "userLink": "https://www.zhihu.com/people/10ec33c2121a8ef91fcae88db7abb11a", 
                    "content": "<p>请问我想在vue组件生命周期钩子里调重新渲染图表的方法怎么调  不知道怎么找到chart对象</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Peter Cheng", 
                    "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                    "content": "<p>window.echarts.init(this.$refs.myEchart)</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "涂图途", 
                            "userLink": "https://www.zhihu.com/people/10ec33c2121a8ef91fcae88db7abb11a", 
                            "content": "<p>谢谢</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Peter Cheng"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39727247", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 1, 
            "title": "webpack dllPlugin打包体积和速度优化", 
            "content": "<h2>DllPlugin优化</h2><ol><li>dll功能主要通过webpack的DllPlugin实现，可提前缓存指定的第三方库。开发运行阶段，直接引入第三方打包库。生产打包阶段，已经打包过的第三库不会再次打包，而是直接引用，打包速度提升不止一倍多。</li><li>在开发阶段，需要在index.html配置静态变量，即提前打包的第三方包路径，通过HtmlWebpackPlugin实现。</li><li>在文件中添加hash，用于标记当前打包版本，如果引入第三包没有变化，hash版本号还是和上次一样。这样就能起到缓存的作用。</li><li>需要注意在html里引入的静态变量（第三库路径）,需要依靠webpack.dll.conf.js文件中的AssetsPlugin生成本地静态缓存。</li><li>webpack.dll.conf.js，在build文件中添加</li></ol><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">AssetsPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;assets-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">vendor</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"s1\">&#39;vue/dist/vue.esm.js&#39;</span><span class=\"p\">,</span>\n      <span class=\"s1\">&#39;vue-router&#39;</span><span class=\"p\">,</span>\n      <span class=\"s1\">&#39;vuex&#39;</span><span class=\"p\">,</span>\n      <span class=\"s1\">&#39;element-ui&#39;</span><span class=\"p\">,</span>\n      <span class=\"s1\">&#39;axios&#39;</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;../static/js&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dll.[name]_[hash:6].js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">library</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name]_[hash:6]&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">DllPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[name]-manifest.json&#39;</span><span class=\"p\">),</span>\n      <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name]_[hash:6]&#39;</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">AssetsPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bundle-config.json&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</code></pre></div><ul><li>在webpack.dev.conf.js和webpack.prod.conf.js下plugins配置项，HtmlWebpackPlugin添加vendorJsName: bundleConfig.vendor.js配置。</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">bundleConfig</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&#34;./bundle-config.json&#34;</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span>\n  <span class=\"c1\">// 加载dll文件\n</span><span class=\"c1\"></span>  <span class=\"nx\">vendorJsName</span><span class=\"o\">:</span> <span class=\"nx\">bundleConfig</span><span class=\"p\">.</span><span class=\"nx\">vendor</span><span class=\"p\">.</span><span class=\"nx\">js</span>\n<span class=\"p\">})</span>\n</code></pre></div><ul><li>修改index.html变量</li></ul><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;./static/js/&lt;%= htmlWebpackPlugin.options.vendorJsName %&gt;&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><h2>其他优化</h2><ul><li>CDN引入</li></ul><p>比如babel-polyfill这类的包，可以通过CDN引入，在webpack打包的时候external，webpack使其不参与打包，而在代码中通过AMD，CMD,window的方式访问</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// webpack配置\n</span><span class=\"c1\"></span><span class=\"nx\">externals</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n  <span class=\"s1\">&#39;babel-polyfill&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;window&#39;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// index.html引入\n</span><span class=\"c1\"></span><span class=\"o\">&lt;</span><span class=\"nx\">script</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"s2\">&#34;//cdn.bootcss.com/babel-polyfill/7.0.0-alpha.15/polyfill.min.js&#34;</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/script&gt;</span>\n</code></pre></div><ul><li>引入合适的包，以及按模块应用</li></ul><p>比如使用day.js代替moment.js。lodash按需加载模块，而不是整个引用。</p><ul><li>按需加载，路由里的组件异步加载</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">Foo</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Foo.vue&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 改为异步\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">Foo</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"s1\">&#39;./Foo.vue&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 加入webpackChunkName标记之后就可以组合js打包\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">Foo</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"cm\">/* webpackChunkName: &#34;group-foo&#34;*/</span> <span class=\"s1\">&#39;./Foo.vue&#39;</span><span class=\"p\">);</span>\n</code></pre></div><ul><li>UglifyJsPlugin插件优化代码</li></ul><p>如果使用UglifyJsPlugin压缩代码，可以去掉不必要的console和debugger。</p><ul><li>webpack3功能，Scope Hoisting，作用域提升</li></ul><p>通过在plugins中添加</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n  <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">ModuleConcatenationPlugin</span><span class=\"p\">()</span>\n<span class=\"p\">]</span>\n</code></pre></div><h2>总结</h2><p>在打包过程中也遇到一些问题，比如如果你用es6开发项目，你的vendors里需要填写<code>vue/dist/vue.esm.js</code>而不是<code>vue</code>，因为dllPlugin打包默认打包vue的vue.js，与vue.esm.js有出入，所以这个地方需要制定版本。以及打包<code>element-ui</code>之后，<code>el-tooltip</code>组件会失效，我还没解决这个问题，我给element github提了issue，他们关闭了issue，我猜想应该是dllPlugin打包的问题，这个就需要深入理解dllPlugin打包机制了。所以引入一个新东西也会带来麻烦。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>==========</p><p>20180807更新</p><p>webpack中有一个happypack优化。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">HappyPack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;happypack&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">os</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;os&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">happyThreadPool</span> <span class=\"o\">=</span> <span class=\"nx\">HappyPack</span><span class=\"p\">.</span><span class=\"nx\">ThreadPool</span><span class=\"p\">({</span> <span class=\"nx\">size</span><span class=\"o\">:</span> <span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">cpus</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"p\">});</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"c1\">//把对.js 的文件处理交给id为happyBabel 的HappyPack 的实例执行\n</span><span class=\"c1\"></span>        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;happypack/loader?id=happyBabel&#39;</span><span class=\"p\">,</span>\n        <span class=\"c1\">//排除node_modules 目录下的文件\n</span><span class=\"c1\"></span>        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n<span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HappyPack</span><span class=\"p\">({</span>\n        <span class=\"c1\">//用id来标识 happypack处理那里类文件\n</span><span class=\"c1\"></span>      <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;happyBabel&#39;</span><span class=\"p\">,</span>\n      <span class=\"c1\">//如何处理  用法和loader 的配置一样\n</span><span class=\"c1\"></span>      <span class=\"nx\">loaders</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;babel-loader?cacheDirectory=true&#39;</span><span class=\"p\">,</span>\n      <span class=\"p\">}],</span>\n      <span class=\"c1\">//共享进程池\n</span><span class=\"c1\"></span>      <span class=\"nx\">threadPool</span><span class=\"o\">:</span> <span class=\"nx\">happyThreadPool</span><span class=\"p\">,</span>\n      <span class=\"c1\">//允许 HappyPack 输出日志\n</span><span class=\"c1\"></span>      <span class=\"nx\">verbose</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>实质是利用nodejs可以开启多个线程的，利用系统的多核打包。但是用了之后打包时间没什么变化，<b>对 url-loader，vue-loader 和 file-loader 支持度有限，打包会报错。可不用。</b></p>", 
            "topic": [
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "动态链接库（DLL）", 
                    "tagLink": "https://api.zhihu.com/topics/19621240"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33051365", 
            "userName": "Peter Cheng", 
            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
            "upvote": 50, 
            "title": "React与Vue有什么不同？", 
            "content": "<p>第一次翻译文章，挑了一篇简单的，而且是从国外人的眼中看待React和Vue的区别。原文地址：<a href=\"https://link.zhihu.com/?target=https%3A//javascriptreport.com/how-is-react-different-from-vue/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">How Is React Different from Vue?</a></p><p>话不多说，下面开始正文：</p><p>最近我发表了一篇文章关于最牛前端框架的用法。这两个框架分别是有统治地位的React和爆发式增长的Vue。如果当前趋势继续下去，到明年这个时候，Vue将超越Angular作为前端第二框架。</p><p>过去3年我都在使用React搭建一个客户服务公司的网站。大多数时候，客户告诉我们他们想要使用React。然而，似乎只是时间的问题，Vue即将也是讨论中的一大部分。下面的是我对两个框架理解的阐述。</p><p>虽然我在工作中使用了三年的React并且享受它，我也将尝试在下面的观点中尽可能保持平衡，尽管有些知识的差距会在Vue中不经意地出现。</p><h2><b>从最近开始</b></h2><p>开始我的论点。React和Vue相当的像，但我即将简短地讨论它们一些关键的不同。这些理解来自于尤雨溪，Vue的作者，使用React作为它的灵感。它们的热议比后面两个框架讨论的要多，Angular和Ember。从Vue的文档中，我们看到两者之间（共通点）：</p><ul><li>虚拟DOM</li><li>提供响应式和可组合性的视图组件</li><li>在重点放在核心库，关注像路由和全局状态的管理的处理来自于第三方库</li></ul><p>来自最终产品的立场，如果客户们（或者产品使用者）的app使用Vue或者React搭建，我不知道他们是否能够理解两者的不同。它们表现力相似并且他们都具备开发大项目或者小项目的能力。</p><p>如果你想要通过各种平台发送内容，web 和 移动端，举个例子，React因为有优秀的React Native而有优势。我的同事也使用React构建嵌入式电视应用程序，这可能是另一个React使用平台的例子。Vue把Weex作为原生手机开发的选择，因此它可能将要解决你的问题。</p><p>React也有一个巨大的生态，可以帮助它快速增长。如果你的app需要一个关键的特点或者形态，React社区的有些人可能已经解决了这个问题。实际上，你可能找到几种解决方法。</p><p>客户们关注的另一个问题，他们是否能够找到熟悉他们所投资的框架的开发人员。React在这方面也有优势，目前看来是这样的。</p><p>其他的不同主要来自于开发者的喜好。他们涉及到一些权衡，我没有看到清晰正确或者错误的答案。我将在下章讨论这些。</p><p><b>概要:</b></p><p>如果你的team已经熟悉React了，切换使用Vue是没有优势的。如果你的团队第一次构建前后端应用，或者来自于Backbone或者AngularJS的迁移，你应该关注Vue，尽管React保留我上面提及的优势。其他因素取决于我将在下面讨论的开发人员偏好。</p><h2><b>不同之处</b></h2><p>在React和Vue之间最好的比较可以从查阅Vue的文档（非常好），Vue相当好的解决了这个问题。它很好用，因为文档编辑来自于尤雨溪和Dan Abramov（React团队的成员）。它也能作为一个我有任何偏见的一个平衡点。</p><h2><b>性能</b></h2><p>Vue和React在性能上是相似的。Vue的文档上说在众多案例中它有微小的优势，然而，最近的基准显示React16优于Vue2.5。在优化性能时有一些差异...</p><blockquote><i>在react中，当组件状态改变时，它会触发整个子组件数重新渲染，以根组件作为渲染基点。为了避免不必要的子组件重新渲染，你需要使用PureComponent或者实现 shouldComponentUpdate。</i><br/><i>在Vue中，一个组件在渲染期间依赖于自动追踪，因此系统知道提前预判哪一个组件需要渲染当组件状态发生改变时。每个组件可以被认为具有自动为你实现shouldComponentUpdate，不需要注意嵌套的组件。</i><br/><i>总的来说，这不需要开发人员对整个性能进行优化，允许他们更专注于构建应用程序本身。</i></blockquote><h2><b>Templating vs JSX</b></h2><p>另一个差异来自于Vue使用templates与React的JSX。许多开发者不喜欢templating语言。vue回应...</p><blockquote><i>有些人争论你需要学习一个额外的DSL（Domain-Specific Language，特定领域的语言）去写模板，我们相信这种差异是肤浅的。首先，JSX不明白用户不想要学习任何其他东西，它在扁平的JavaScript中增加了语法，因此熟悉JavaScript的人可以很容易地学习，但是说它基本上是免费的，这是误导性的。类似地，模板只是简单的HTML之上的附加语法，因此对于那些已经熟悉HTML的人来说学习成本非常低。关于DSL我们还能够帮助用户写更少的代码做的更多（例如 v-on 修饰符）。相同的任务可能包含更多的代码当使用普通的JSX或渲染函数时。</i></blockquote><p>我关注的是如果你混合使用JSX和模板语言，你的应用将更复杂。随着从一个组件转到另一个组件，使用一个范例来避免上下文切换的开销更容易。但是明智的人不同意这种观点。</p><h2><b>CSS</b></h2><p>Vue处理CSS的方式相当不错。 Vue文档首先指出，CSS-in-JS是一种非常受欢迎的React范围CSS方法。 然后它继续说...</p><blockquote><i>如果你是CSS-in-JS的粉丝，许多流行的CSS-in-JS库支持Vue（例如，style-components-vue和vue-emotion）。 React和Vue之间的主要区别在于，Vue中的默认样式是通过单个文件组件中比较熟悉的样式标签。</i></blockquote><p>包含CSS的单文件组件对我来说相当不错。 以下是文档中示例组件的屏幕截图。 注意底部的&lt;style&gt;标签。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-91752852891f91a4afd27d95bb00b22d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1246\" data-rawheight=\"1370\" class=\"origin_image zh-lightbox-thumb\" width=\"1246\" data-original=\"https://pic2.zhimg.com/v2-91752852891f91a4afd27d95bb00b22d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1246&#39; height=&#39;1370&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1246\" data-rawheight=\"1370\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1246\" data-original=\"https://pic2.zhimg.com/v2-91752852891f91a4afd27d95bb00b22d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-91752852891f91a4afd27d95bb00b22d_b.jpg\"/></figure><p>通过在组件文件中包含该标签，您可以获得组件范围的CSS和语法高亮显示。 实现React的CSS-in-JS解决方案也更简单一些。</p><h2><b>生态</b></h2><p>如前所述，React的生态是比Vue的大的。这有益于使用React，但是它也给新手压倒性的感觉。Vue留给社区的很少，取代的是让重要的库保持同步：</p><blockquote><i>Vue用于状态管理和路由（以及其他问题）的配套库全部得到官方支持，并与核心库保持同步。 React反而选择把这些问题留给社区，创造一个更加分散的生态系统。 尽管如此，React的生态系统比Vue更为丰富。</i></blockquote><h2><b>状态管理</b></h2><p>对于我来说，这是一个很重要的区别。在React中一个比较大的内容就是函数式编程。如果你用过现在流行的Redux状态管理库，你大部分的开发时间都是在写函数式的内容。</p><p>这仅仅是一些东西但近几年却在巨大的JavaScript社区有很大的影响力。React没有发明函数式编程，它是相当老的一个概念了。但是它使自己流行于近代的编程语言中。它是一个很有用的方式帮助我写更好的代码。</p><p>另一个函数式编程的特点是不可变性。这是最近所谈论的内容“为什么不可变性是重要的参考”，但这个想法是用来控制所谓的“副作用”，并使管理应用程序状态更容易和更可预测。</p><p>现在，React在理解上本身不是一个函数式的库。Mobx是一个流行的React状态管理库，它有可变的状态。通过Vue的文档：</p><blockquote><i>MobX在React社区非常流行，它实际上使用了与Vue几乎相同的反应性系统。 在一定程度上，React + MobX工作流可以被认为是一个更加详细的Vue，所以如果你使用这个组合并且很享受，那么跳进Vue可能是一个明智的选择。</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><i>Mobx加React基本上是一个增大版的Vue？ — Evan You</i></blockquote><p>对于Vue，另外一个流行的状态管理选择是Vuex。引用来自一篇文章比较Redux和Vuex的话，下面比较的不同可以友好的给予启发：</p><blockquote><i>与Redux类似，Vuex也受到Flux的启发。 然而，与Redux不同的是，Vuex改变了状态，而不是使状态不可变，并像Redux的“reducer”函数一样完全替代它。</i><br/><i>这允许Vue.js在状态改变时自动知道哪些指令需要重新渲染。 Vuex不用专门的reducers来分解状态逻辑，而是可以用称为模块的存储来组织它的状态逻辑。</i></blockquote><p>这是一个公正的技术争论，来自于去多开发者的主要观点。如果在函数式编程开发对你很重要，React将可能对你有更多的吸引（这其中可能有例外，使用Mobx）。如果不是，Vue可能更有吸引力。</p><h2><b>其他的观点</b></h2><p>来自于Dan Abramov，最近一系列的tweets，为了回复一个tweet关于比较React不同于Vue，我觉得值得分享。Dan是React的成员，并且他有稍微的倾向在他的评论中，但他们几乎不提出观点讨论React和Vue的不同：</p><blockquote>尽管你的需求越来越复杂，React专注于使您的代码易于理解。 但不专注于让简单的例子竟可能简短。<br/><i>— Dan Abramov</i></blockquote><p>我在最后引用尤雨溪的话。它来自于Vivian Cromwell的采访。问题是关于Vue和其他框架有怎样的不同。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>=======</p><p>2018年5月22日更新</p><p>因为翻译的文章之前有部分是google翻译的，现在重新翻新一遍，更容易理解。</p><p>我最近在写一篇vue简单应用架构的文章，感兴趣的可以关注我一波。</p><p></p>", 
            "topic": [
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "前端框架", 
                    "tagLink": "https://api.zhihu.com/topics/19806306"
                }
            ], 
            "comments": [
                {
                    "userName": "leezii", 
                    "userLink": "https://www.zhihu.com/people/2ee88f7b7bba42397052415aad75228e", 
                    "content": "我认为react社区的繁荣的原因是官方的把几个重要的痛点扔给了社区，比如css 比如状态管理，这办造成了社区很大的分歧，每种解决方案都只解决了一点点问题，通常是为了解决a暴露出b的缺陷，这就有了撕逼的动力理由，不过大家素质较好，用的不爽也不喷，自己写一套扔出来，自然又有一部分人分裂出来，接着改接着撕，没有一个最好的统一的最佳实践，可能是开源项目的哲学吧😂", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "张正", 
                    "userLink": "https://www.zhihu.com/people/f57e0dbddd5f8e3c478501f5fd010b7c", 
                    "content": "<p>牛逼啊</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<p>谢谢</p>", 
                            "likes": 0, 
                            "replyToAuthor": "张正"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>厉害了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "武九", 
                    "userLink": "https://www.zhihu.com/people/3f82bf02f664663e899f0ee2ee96e6b5", 
                    "content": "vuex顶不住f4刷新啊", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Wang Richard", 
                            "userLink": "https://www.zhihu.com/people/71be47ed970d261e3b04df7a5faf760a", 
                            "content": "f5刷新吧", 
                            "likes": 0, 
                            "replyToAuthor": "武九"
                        }, 
                        {
                            "userName": "武九", 
                            "userLink": "https://www.zhihu.com/people/3f82bf02f664663e899f0ee2ee96e6b5", 
                            "content": "好吧我错了 f5", 
                            "likes": 0, 
                            "replyToAuthor": "Wang Richard"
                        }
                    ]
                }, 
                {
                    "userName": "leezii", 
                    "userLink": "https://www.zhihu.com/people/2ee88f7b7bba42397052415aad75228e", 
                    "content": "我认为react社区的繁荣的原因是官方的把几个重要的痛点扔给了社区，比如css 比如状态管理，这办造成了社区很大的分歧，每种解决方案都只解决了一点点问题，通常是为了解决a暴露出b的缺陷，这就有了撕逼的动力理由，不过大家素质较好，用的不爽也不喷，自己写一套扔出来，自然又有一部分人分裂出来，接着改接着撕，没有一个最好的统一的最佳实践，可能是开源项目的哲学吧😂", 
                    "likes": 2, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "是啊，react让人找到了写js的快感", 
                            "likes": 0, 
                            "replyToAuthor": "leezii"
                        }
                    ]
                }, 
                {
                    "userName": "信如花", 
                    "userLink": "https://www.zhihu.com/people/f492f6dbf20d3ec89d5f3a92117acefa", 
                    "content": "内容挺好的，不过到处都是english翻译过来的语法", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "Joe", 
                    "userLink": "https://www.zhihu.com/people/9b16b302a8d79423e019784752cb2c34", 
                    "content": "<p>内容是好内容，翻译是直接谷歌翻译的吧，与原文相去甚远</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<p>引用的地方是的</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Joe"
                        }
                    ]
                }, 
                {
                    "userName": "牧云空", 
                    "userLink": "https://www.zhihu.com/people/01f9d7b59e0a842c1b0e6c39ca15b923", 
                    "content": "机器翻译的？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Ahonn", 
                    "userLink": "https://www.zhihu.com/people/473da99bf6adda4cbad1155d01fc1c23", 
                    "content": "<p>这个翻译看着有点难受..</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "<p>哈哈，不好意思了</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Ahonn"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "很棒，言简意赅。我要是一个月前看了这文章，就不会被面试虐了。", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "于向前", 
                    "userLink": "https://www.zhihu.com/people/48488d65409fe55fb1101f847b39a2ca", 
                    "content": "该评论已删除", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "sorry，我要修改一下文章内容，引用部分是机器翻的.", 
                            "likes": 0, 
                            "replyToAuthor": "于向前"
                        }
                    ]
                }, 
                {
                    "userName": "馒头", 
                    "userLink": "https://www.zhihu.com/people/2a2be54d91a40cfce745fe99f49a0cfa", 
                    "content": "react+mobx真的很赞！", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "林水溶", 
                    "userLink": "https://www.zhihu.com/people/e4bbfad83118b9464955fdf92c0540b1", 
                    "content": "<p>翻译得有点生硬的说... 比如「这仅仅是一些东西但近几年却在巨大的 JavaScript 社区有很大的影响力。」</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Peter Cheng", 
                            "userLink": "https://www.zhihu.com/people/564abf3ad7a477b3b910e733a7d37c34", 
                            "content": "[飙泪笑]", 
                            "likes": 0, 
                            "replyToAuthor": "林水溶"
                        }
                    ]
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_215040065"
}
