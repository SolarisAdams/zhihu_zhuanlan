{
    "title": "每日算法—LeetCode", 
    "description": "每周在这里我将不定期整理leetcode的算法题分享给大家，祝大家面试顺利", 
    "followers": [
        "https://www.zhihu.com/people/wang-xiao-han-36-65", 
        "https://www.zhihu.com/people/sugar-60-72", 
        "https://www.zhihu.com/people/zhou-si-yu-63-57", 
        "https://www.zhihu.com/people/chen-san-jin", 
        "https://www.zhihu.com/people/mo-ke-sao-ren-47", 
        "https://www.zhihu.com/people/li-sheng-guo-36", 
        "https://www.zhihu.com/people/ecolaw", 
        "https://www.zhihu.com/people/searlxin", 
        "https://www.zhihu.com/people/ha-ha-62-35-22", 
        "https://www.zhihu.com/people/better-55-69", 
        "https://www.zhihu.com/people/black-41-38", 
        "https://www.zhihu.com/people/yan-peng-37-73", 
        "https://www.zhihu.com/people/mei-wen-67-3", 
        "https://www.zhihu.com/people/yangjinwen", 
        "https://www.zhihu.com/people/huo-chuang-chuang-39", 
        "https://www.zhihu.com/people/ip-huaz", 
        "https://www.zhihu.com/people/jing-ti-1", 
        "https://www.zhihu.com/people/liu-yi-lun-10", 
        "https://www.zhihu.com/people/grayling-ling-ling", 
        "https://www.zhihu.com/people/lshhe-he", 
        "https://www.zhihu.com/people/eaglewings", 
        "https://www.zhihu.com/people/sun-yun-1-73", 
        "https://www.zhihu.com/people/mars-7-36", 
        "https://www.zhihu.com/people/uuu-59-37", 
        "https://www.zhihu.com/people/qinkang-69", 
        "https://www.zhihu.com/people/li-hai-tao-32", 
        "https://www.zhihu.com/people/leemaster", 
        "https://www.zhihu.com/people/michael-wu-25", 
        "https://www.zhihu.com/people/wang-rui-teng-22", 
        "https://www.zhihu.com/people/hu-ji-jun", 
        "https://www.zhihu.com/people/xu-zi-mai", 
        "https://www.zhihu.com/people/longlyVV", 
        "https://www.zhihu.com/people/hillbilly", 
        "https://www.zhihu.com/people/li-jia-54-85-55", 
        "https://www.zhihu.com/people/bo-en-72", 
        "https://www.zhihu.com/people/jin-wei-8-9", 
        "https://www.zhihu.com/people/wen-xu-yang-28", 
        "https://www.zhihu.com/people/tie-ping-mu-ji", 
        "https://www.zhihu.com/people/zheng-feng-20", 
        "https://www.zhihu.com/people/liulei-76-10", 
        "https://www.zhihu.com/people/yige-ren-77-73", 
        "https://www.zhihu.com/people/su-da-gong-87", 
        "https://www.zhihu.com/people/mathzheye", 
        "https://www.zhihu.com/people/zoro-to-one", 
        "https://www.zhihu.com/people/jiang-kai-ge-76", 
        "https://www.zhihu.com/people/chi-shi-de-ba-ge", 
        "https://www.zhihu.com/people/xiao-kai-jun-70", 
        "https://www.zhihu.com/people/gle-goo-42", 
        "https://www.zhihu.com/people/xiong-yue-fu", 
        "https://www.zhihu.com/people/yachun-du", 
        "https://www.zhihu.com/people/Hao-Maus", 
        "https://www.zhihu.com/people/li-yi-zhang-54", 
        "https://www.zhihu.com/people/cxiao-xin-4", 
        "https://www.zhihu.com/people/wu-tong-bai", 
        "https://www.zhihu.com/people/julian-huang-50", 
        "https://www.zhihu.com/people/goo1016", 
        "https://www.zhihu.com/people/jdo-96", 
        "https://www.zhihu.com/people/qin-yu-qing-14", 
        "https://www.zhihu.com/people/xiao-niu-9-1", 
        "https://www.zhihu.com/people/zi-zai-ru-feng-de-shao-nian-6-86", 
        "https://www.zhihu.com/people/zhao-pei-84-21", 
        "https://www.zhihu.com/people/zhang-ting-kai-1", 
        "https://www.zhihu.com/people/cookie-48-63", 
        "https://www.zhihu.com/people/hu-tao-58", 
        "https://www.zhihu.com/people/wen-xuan-xuan", 
        "https://www.zhihu.com/people/wang-song-77-47", 
        "https://www.zhihu.com/people/1111111-51-87-91", 
        "https://www.zhihu.com/people/bai-xiong-21-79", 
        "https://www.zhihu.com/people/li-jia-hao-32-2", 
        "https://www.zhihu.com/people/wang-ming-66-71", 
        "https://www.zhihu.com/people/zhang-xin-hao-11", 
        "https://www.zhihu.com/people/cz-shi", 
        "https://www.zhihu.com/people/lian-wei-yuan-2", 
        "https://www.zhihu.com/people/shu-xiang-mo-jian", 
        "https://www.zhihu.com/people/clark-yi", 
        "https://www.zhihu.com/people/shuo-bu-de-82", 
        "https://www.zhihu.com/people/dan-dian-xia", 
        "https://www.zhihu.com/people/googoosea", 
        "https://www.zhihu.com/people/omegam", 
        "https://www.zhihu.com/people/mei-shao-nu-zhan-shi-25-51", 
        "https://www.zhihu.com/people/hei-se-fang-tang-57", 
        "https://www.zhihu.com/people/chai-tao-92", 
        "https://www.zhihu.com/people/charles-liu-top", 
        "https://www.zhihu.com/people/xu-yu-71-1", 
        "https://www.zhihu.com/people/xie-liang-chen-7-85", 
        "https://www.zhihu.com/people/wei-wang-66-78", 
        "https://www.zhihu.com/people/messi1023", 
        "https://www.zhihu.com/people/chen-xiao-mo-63-16", 
        "https://www.zhihu.com/people/loveff-81", 
        "https://www.zhihu.com/people/ma-xin-8-7", 
        "https://www.zhihu.com/people/li-wen-qi-14-93", 
        "https://www.zhihu.com/people/yan-ruxin", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/jacf-harry", 
        "https://www.zhihu.com/people/ji-zhu-xiao-bai-78-39", 
        "https://www.zhihu.com/people/xiao-niao-you-ai-li", 
        "https://www.zhihu.com/people/hebingrong", 
        "https://www.zhihu.com/people/shallow-75-50", 
        "https://www.zhihu.com/people/wodedata", 
        "https://www.zhihu.com/people/yuan-xiaokun", 
        "https://www.zhihu.com/people/ye-qiang-qiang-19", 
        "https://www.zhihu.com/people/li-lan-kuang-lan-111", 
        "https://www.zhihu.com/people/heyang-36", 
        "https://www.zhihu.com/people/imentu", 
        "https://www.zhihu.com/people/man-zi-ge-ge", 
        "https://www.zhihu.com/people/Pon9", 
        "https://www.zhihu.com/people/shi-an-yan-29-2-73", 
        "https://www.zhihu.com/people/yu-meng-yu-39", 
        "https://www.zhihu.com/people/da-wei-ge-la-qia-la", 
        "https://www.zhihu.com/people/yu-hao-shi", 
        "https://www.zhihu.com/people/sparkqiu", 
        "https://www.zhihu.com/people/tisuama", 
        "https://www.zhihu.com/people/wu-yue-29-62", 
        "https://www.zhihu.com/people/chen-xi-80-55", 
        "https://www.zhihu.com/people/ce-ma-kuang-xiao-38", 
        "https://www.zhihu.com/people/zhu-xue-jun-76", 
        "https://www.zhihu.com/people/ichigota-ta", 
        "https://www.zhihu.com/people/wang-wei-jia-99", 
        "https://www.zhihu.com/people/gong-zheng-50-1"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/57594099", 
            "userName": "书香墨剑", 
            "userLink": "https://www.zhihu.com/people/6e56c4dc60dcc6645d2f405cc9c554ac", 
            "upvote": 1, 
            "title": "一个小算法问题的解决", 
            "content": "<h2>问题</h2><p>给定一个字符串，找出这个字符串中<b>不包含重复字符</b>的<b>最长</b>子字符串的长度</p><p>例如：</p><ul><li>输入 &#34;abcabcbb&#34;,；输出：3；因为最长不包含重复字符的子串是 &#34;abc&#34;</li><li>输入 &#34;bbbbb&#34;； 输出：1；最长子串为 &#34;b&#34;</li><li>输入 &#34;pwwkew&#34;, 输出： 3; 最长子串为 &#34;kew&#34; </li></ul><h2>解决思路1：</h2><p>找出所有子字符串，并判断每个子字符串是否包含重复的字符，如果不包含，则获取该字符串的长度，并判断是否更新最大的长度。</p><p>先实现函数，判断字符串是否含有重复字符，如果没有，则返回字符串长度，如果有，返回 0</p><div class=\"highlight\"><pre><code class=\"language-js\">    <span class=\"kd\">function</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">newStr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span><span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">newStr</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">)</span>   <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">newStr</span> <span class=\"o\">=</span> <span class=\"nx\">newStr</span> <span class=\"o\">+</span> <span class=\"nx\">str</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</code></pre></div><p>再实现函数，寻找所有子字符串，并获取最大的长度</p><p>循环法：</p><div class=\"highlight\"><pre><code class=\"language-js\">   <span class=\"kd\">function</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">j</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"nx\">j</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">const</span> <span class=\"nx\">noRepeateStrLen</span> <span class=\"o\">=</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">j</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">));</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">noRepeateStrLen</span><span class=\"o\">&gt;</span><span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">resultLen</span> <span class=\"o\">=</span> <span class=\"nx\">noRepeateStrLen</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">resultLen</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>递归法：</p><div class=\"highlight\"><pre><code class=\"language-js\">    <span class=\"kd\">function</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">const</span> <span class=\"nx\">noRepeateStrLen</span> <span class=\"o\">=</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">));</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">noRepeateStrLen</span><span class=\"o\">&gt;</span><span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">resultLen</span> <span class=\"o\">=</span> <span class=\"nx\">noRepeateStrLen</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultLen</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nx\">resultLen</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div><p>全部代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @param {string} s\n</span><span class=\"cm\"> * @return {number}\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lengthOfLongestSubstring</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">newStr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span><span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">newStr</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">){</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">newStr</span> <span class=\"o\">=</span> <span class=\"nx\">newStr</span> <span class=\"o\">+</span> <span class=\"nx\">str</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">const</span> <span class=\"nx\">noRepeateStrLen</span> <span class=\"o\">=</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">));</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">noRepeateStrLen</span><span class=\"o\">&gt;</span><span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">resultLen</span> <span class=\"o\">=</span> <span class=\"nx\">noRepeateStrLen</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultLen</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nx\">resultLen</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span>  <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>该方法能获取正确的答案，但是当给定字符串过长的时候，会出现运行时间过长的问题，不难发现，此方法中有3次有关于字符串长度 n 的遍历，复杂度为 <i>O</i>(<i>n</i>3)。</p><h2>解决方法2：</h2><p>上述方法可以解决问题，但是运行速度过慢了。接下来换一种优化的方法。</p><p>在上述方法中，我们遍历取出了原字符串中所有的子字符串，但仔细分析题目要求，发现同一字母开头的所有不包含重复字母的子串，都包含在该字母开头的最长的那一个不含重复字母的子串之中。因此并不需要全部子字符串，而只需要获取每个字母开头的最长不含重复字母的子串就可以了。</p><p>修改代码如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">lengthOfLongestSubstring</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">newStr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span><span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">newStr</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">){</span>\n              <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">newStr</span> <span class=\"o\">=</span> <span class=\"nx\">newStr</span> <span class=\"o\">+</span> <span class=\"nx\">str</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">newStr</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"nx\">noRepeateStrLen</span> <span class=\"o\">=</span> <span class=\"nx\">getNoRepeateStrLen</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">noRepeateStrLen</span><span class=\"o\">&gt;</span><span class=\"nx\">resultLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">resultLen</span> <span class=\"o\">=</span> <span class=\"nx\">noRepeateStrLen</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultLen</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nx\">resultLen</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span>  <span class=\"nx\">findSub</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>取消了所以子串的遍历，函数<code>getNoRepeateStrLen</code>字符串中不含重复字母的<b>最长子字符串</b>的长度，遍历原字符串中每个字母开头的子串，寻找最大长度。该方法成功将时间复杂度降低为了<i>O</i>(<i>n2</i>)。</p><p>以上是我对这个题目的两种不同的解题思路，欢迎大家指正错误，或者提供更优的算法。</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57959290", 
            "userName": "书香墨剑", 
            "userLink": "https://www.zhihu.com/people/6e56c4dc60dcc6645d2f405cc9c554ac", 
            "upvote": 2, 
            "title": "求两个有序数组中所有数的中位数", 
            "content": "<h2>描述：</h2><p>给定两个有序的数组，nums1, nums2 , 找出这两个数组中所有数字的中位数。</p><p>例如： </p><div class=\"highlight\"><pre><code class=\"language-text\">nums1 = [1, 3]\nnums2 = [2]\n\n结果是 2</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">nums1 = [1, 2]\nnums2 = [3, 4]\n\n结果是 (2 + 3)/2 = 2.5</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>解法1：</h2><p>这是最容易的想到的方法，直接将两个数组拼接，然后重新排序，并找出中间的数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @param {number[]} nums1\n</span><span class=\"cm\"> * @param {number[]} nums2\n</span><span class=\"cm\"> * @return {number}\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">findMedianSortedArrays</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">nums1</span><span class=\"p\">,</span> <span class=\"nx\">nums2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">sortedArray</span> <span class=\"o\">=</span> <span class=\"nx\">nums1</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">nums2</span><span class=\"p\">).</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">const</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">sortedArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">length</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"nx\">sortedArray</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">sortedArray</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"nx\">sortedArray</span><span class=\"p\">[</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span><span class=\"nx\">length</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)];</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>但该解法需要将两个数组的所有元素重新排序，并没有考虑题目中两个原数组都是<b>有序</b>的条件<b>，</b>运行速度依赖于排序算法，在快排的情况下为 O((m+n)log(m+n)) 。m,n 分别为两个数组的长度。</p><h2>解法2：</h2><p>感谢 @小蓝 提供的第二种解法，利用了两个数组有序的初始状态，不断比较将较小的值 push 进新数组，并且在新数组长度达到原数组的一半的时候找到中位数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @param {number[]} nums1\n</span><span class=\"cm\"> * @param {number[]} nums2\n</span><span class=\"cm\"> * @return {number}\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">findMedianSortedArrays</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">nums1</span><span class=\"p\">,</span> <span class=\"nx\">nums2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"k\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">nums1</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">nums2</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">maxLength</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">length</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">ai</span> <span class=\"o\">=</span> <span class=\"nx\">bi</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;</span> <span class=\"nx\">maxLength</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">ai</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">[</span><span class=\"nx\">bi</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n    <span class=\"k\">continue</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">[</span><span class=\"nx\">bi</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">ai</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n    <span class=\"k\">continue</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">ai</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">b</span><span class=\"p\">[</span><span class=\"nx\">bi</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n    <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">ai</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">ai</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"nx\">b</span><span class=\"p\">[</span><span class=\"nx\">bi</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n    <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">[</span><span class=\"nx\">bi</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">mid</span> <span class=\"o\">=</span> <span class=\"nx\">maxLength</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">mid</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>该方法只需要循环原来两个数组长度之和的一半，缩短了运行时间，达到了 O(m+n)</p><h2>解法3：</h2><p>要取一个数组的中位数，需要满足两个条件:</p><ul><li>中位数左右的数字数量相等</li><li>中位数左边的所有数字都比它小，右边的所有数字都比它大</li></ul><p>因此，我们只需要将原来两个数组中的所有数字平均分成两堆，并且保证<b>左边一堆的最大值 lMax &lt;= 右边一堆的最小值 rMin，</b>那么就保证了<b>左边所有的数 &gt;= 右边所有的数。</b>那么 lMax 以及 rMin 就是这所有数中间的数字：</p><ul><li>m+n 为偶数的情况，中位数为 (lMax+rMin) /2</li><li>m+n 为奇数的情况，假设<b>右边的数字比左边多一个</b>，那么，中位数为 rMin</li></ul><p>代码如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @param {number[]} nums1\n</span><span class=\"cm\"> * @param {number[]} nums2\n</span><span class=\"cm\"> * @return {number}\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">findMedianSortedArrays</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">nums1</span><span class=\"p\">,</span> <span class=\"nx\">nums2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">aveLength</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">((</span><span class=\"nx\">nums1</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">nums2</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">lMax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">rMin</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">nums1</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"nx\">nums2</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"nx\">tempArray</span> <span class=\"o\">=</span> <span class=\"nx\">nums2</span><span class=\"p\">;</span>\n        <span class=\"nx\">nums2</span> <span class=\"o\">=</span> <span class=\"nx\">nums1</span><span class=\"p\">;</span>\n        <span class=\"nx\">nums1</span> <span class=\"o\">=</span> <span class=\"nx\">tempArray</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;=</span><span class=\"nx\">nums1</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"nx\">lMax1</span> <span class=\"o\">=</span> <span class=\"nx\">nums1</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">const</span> <span class=\"nx\">rMin1</span> <span class=\"o\">=</span> <span class=\"nx\">nums1</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">const</span> <span class=\"nx\">lMax2</span> <span class=\"o\">=</span> <span class=\"nx\">nums2</span><span class=\"p\">[</span><span class=\"nx\">aveLength</span> <span class=\"o\">-</span><span class=\"nx\">i</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">const</span> <span class=\"nx\">rMin2</span> <span class=\"o\">=</span> <span class=\"nx\">nums2</span><span class=\"p\">[</span><span class=\"nx\">aveLength</span><span class=\"o\">-</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">lMax1</span>  <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">lMax</span> <span class=\"o\">=</span> <span class=\"nx\">lMax2</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">lMax2</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"p\">){</span>\n            <span class=\"nx\">lMax</span> <span class=\"o\">=</span> <span class=\"nx\">lMax1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">lMax</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">max</span><span class=\"p\">(</span><span class=\"nx\">lMax1</span><span class=\"p\">,</span> <span class=\"nx\">lMax2</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">rMin1</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">rMin</span> <span class=\"o\">=</span> <span class=\"nx\">rMin2</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rMin2</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">rMin</span> <span class=\"o\">=</span> <span class=\"nx\">rMin1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">rMin</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">min</span><span class=\"p\">(</span><span class=\"nx\">rMin1</span><span class=\"p\">,</span> <span class=\"nx\">rMin2</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">lMax</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">rMin</span><span class=\"p\">){</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">nums1</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">nums2</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"nx\">lMax</span> <span class=\"o\">+</span> <span class=\"nx\">rMin</span><span class=\"p\">)</span> <span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"nx\">rMin</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>该算法最坏情况下只需要遍历两个数组中较短的一个数组，使运算时间缩短为 O(n), n为较短的数组的长度。</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>第二个算法就是归并排序的半个归并步骤，想不到的回去重学归并排序。</p>", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49889002", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "用栈实现队列", 
            "content": "<p></p><p>使用栈实现队列的下列操作：</p><ul><li>push(x) -- 将一个元素放入队列的尾部。</li><li>pop() -- 从队列首部移除元素。</li><li>peek() -- 返回队列首部的元素。</li><li>empty() -- 返回队列是否为空。</li></ul><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">MyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // 返回 1\nqueue.pop();   // 返回 1\nqueue.empty(); // 返回 false</code></pre></div><p><b>说明:</b></p><ul><li>你只能使用标准的栈操作 -- 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><h2>思路</h2><p>我的思路是创建两个栈S1和S2，入队时，将元素压入S1，出队时，如果栈S2中的元素个数为0，则将S1中的元素一个个压入S2，并弹出最后压入的那个元素，如果栈S2中的元素个数不为0，则直接弹出S2中的顶元素。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">MyQueue</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// Push element x to the back of queue.\n</span><span class=\"c1\"></span>    <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">stack1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n    <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">stack2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">stack1</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Removes the element from in front of queue.\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()==</span><span class=\"n\">0</span><span class=\"o\">)</span>\n        <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">stack1</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">m</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++)</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">stack1</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n                <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n            <span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Get the front element.\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">peek</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()==</span><span class=\"n\">0</span><span class=\"o\">)</span>\n        <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">stack1</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">m</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">stack1</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Return whether the queue is empty.\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">empty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">stack1</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()==</span><span class=\"n\">0</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">stack2</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()==</span><span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49888896", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "删除链表中的节点", 
            "content": "<p></p><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 -- head = [4,5,1,9]，它可以表示为:</p><div class=\"highlight\"><pre><code class=\"language-text\">4 -&gt; 5 -&gt; 1 -&gt; 9</code></pre></div><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: head = [4,5,1,9], node = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: head = [4,5,1,9], node = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</code></pre></div><p><b>说明:</b></p><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><h2>思路</h2><p>很简单的一道题，因为给定了将要被删除的节点，而单向链表又无法回溯，因此可以将下一个节点删除，并将值赋给要被删除的节点，这样也可以算作删除了给定的节点。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">ListNode</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n <span class=\"kd\">class</span> <span class=\"nc\">ListNode</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n\n    <span class=\"n\">ListNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49888836", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "回文链表", 
            "content": "<p></p><p>请判断一个链表是否为回文链表。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1-&gt;2\n输出: false</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1-&gt;2-&gt;2-&gt;1\n输出: true</code></pre></div><p><b>进阶：</b> 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><h2>思路</h2><p>链表用到了快慢指针，快指针每次跳两下，慢指针每次跳一下，这样快指针到终点的时候慢指针刚好一般，然后反转后半部分链表进行对比。该方法时间复杂度O(n)、空间复杂度O(1).</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Definition for singly-linked list.\n</span><span class=\"cm\"> * public class ListNode {\n</span><span class=\"cm\"> *     int val;\n</span><span class=\"cm\"> *     ListNode next;\n</span><span class=\"cm\"> *     ListNode(int x) { val = x; }\n</span><span class=\"cm\"> * }\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPalindrome</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">head</span><span class=\"o\">,</span><span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">((</span><span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">)){</span>\n            <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">last</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">,</span><span class=\"n\">pre</span><span class=\"o\">=</span><span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"n\">ListNode</span> <span class=\"n\">tmp</span><span class=\"o\">=</span><span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">=</span><span class=\"n\">tmp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">tmp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">=</span><span class=\"n\">tmp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">!=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">)</span><span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"n\">pre</span><span class=\"o\">=</span><span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49888682", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "二叉搜索树的最近公共祖先", 
            "content": "<p></p><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259C%2580%25E8%25BF%2591%25E5%2585%25AC%25E5%2585%25B1%25E7%25A5%2596%25E5%2585%2588/8918834%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<b>一个节点也可以是它自己的祖先</b>）。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><div class=\"highlight\"><pre><code class=\"language-text\">        _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   0      _4       7       9\n         /  \\\n         3   5</code></pre></div><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</code></pre></div><p><b>说明:</b></p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li></ul><h2>思路</h2><p>从树的根节点开始和两个节点作比较，如果当前节点的值比两个节点的值都大，则这两个节点的最近公共祖先节点一定在该节点的左子树中，则下一步遍历当前节点的左子树；</p><p>如果当前节点的值比两个节点的值都小，则这两个节点的最近公共祖先节点一定在该节点的右子树中，下一步遍历当前节点的右子树；这样直到找到第一个值是两个输入节点之间的值的节点，该节点就是两个节点的最近公共祖先节点。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Definition for a binary tree node.\n</span><span class=\"cm\"> * public class TreeNode {\n</span><span class=\"cm\"> *     int val;\n</span><span class=\"cm\"> *     TreeNode left;\n</span><span class=\"cm\"> *     TreeNode right;\n</span><span class=\"cm\"> *     TreeNode(int x) { val = x; }\n</span><span class=\"cm\"> * }\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">lowestCommonAncestor</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span> <span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">q</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//处理p,q结点，让p结点的值小于q结点的值\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">){</span>\n            <span class=\"c1\">//如果p.val &gt; q.val，交换两者值\n</span><span class=\"c1\"></span>            <span class=\"n\">TreeNode</span> <span class=\"n\">temp</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"o\">;</span>\n            <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">TreeNode</span> <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">&lt;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">){</span>\n                <span class=\"c1\">//最大值&lt;当前节点，公共祖先在左子树上\n</span><span class=\"c1\"></span>                <span class=\"n\">node</span><span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">&gt;</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">){</span>\n                <span class=\"c1\">//最小值&gt;当前节点，公共祖先在右子树上\n</span><span class=\"c1\"></span>                <span class=\"n\">node</span><span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49888569", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "2的幂", 
            "content": "<p></p><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1\n输出: true\n解释: 2^0 = 1</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 16\n输出: true\n解释: 2^4 = 16</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 218\n输出: false</code></pre></div><h2>思路</h2><p>递归或循环，如果一个数是2的幂，则除以2肯定能整除，而且商肯定也是2的幂。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPowerOfTwo</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">==</span><span class=\"n\">1</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">&gt;=</span><span class=\"n\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"o\">%</span><span class=\"n\">2</span><span class=\"o\">==</span><span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">isPowerOfTwo</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"n\">2</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>    \n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49723703", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "转置矩阵", 
            "content": "<p></p><p>给定一个矩阵 <code>A</code>， 返回 <code>A</code> 的转置矩阵。</p><p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p><p><b>示例 1：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[[1,2,3],[4,5,6],[7,8,9]]\n输出：[[1,4,7],[2,5,8],[3,6,9]]</code></pre></div><p><b>示例 2：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[[1,2,3],[4,5,6]]\n输出：[[1,4],[2,5],[3,6]]</code></pre></div><p><b>提示：</b></p><ol><li><code>1 &lt;= A.length &lt;= 1000</code></li><li><code>1 &lt;= A[0].length &lt;= 1000</code></li></ol><h2>思路</h2><p>矩阵的行列互换，简单的二重循环就可以了。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-text\">class Solution {\n    public int[][] transpose(int[][] A) {\n        int row = A.length;\n        int coloum = A[0].length;\n        int[][] result = new int[coloum][row];\n        for (int i = 0; i &lt; coloum; i++) {\n            for (int j = 0; j &lt; row; j++) {\n                result[i][j] = A[j][i];\n            }\n        }\n        return result;\n    }\n}</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49723492", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "转换成小写字母", 
            "content": "<p></p><p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p><p><b>示例 1：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;Hello&#34;\n输出: &#34;hello&#34;</code></pre></div><p><b>示例 2：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;here&#34;\n输出: &#34;here&#34;</code></pre></div><p><b>示例</b> <b>3：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;LOVELY&#34;\n输出: &#34;lovely&#34;</code></pre></div><h2>思路</h2><p>通过ASCII码，大写字母的ASCII码比小写字母的ASCII码小32位。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toLowerCase</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">chars</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;A&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">chars</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;Z&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">((</span><span class=\"kt\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">32</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49723288", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "卡牌分组", 
            "content": "<p></p><p>给定一副牌，每张牌上都写着一个整数。</p><p>此时，你需要选定一个数字 <code>X</code>，使我们可以将整副牌按下述规则分成 1 组或更多组：</p><ul><li>每组都有 <code>X</code> 张牌。</li><li>组内所有的牌上都写着相同的整数。</li></ul><p>仅当你可选的 <code>X &gt;= 2</code> 时返回 <code>true</code>。</p><p><b>示例 1：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[1,2,3,4,4,3,2,1]\n输出：true\n解释：可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]</code></pre></div><p><b>示例 2：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[1,1,1,2,2,2,3,3]\n输出：false\n解释：没有满足要求的分组。</code></pre></div><p><b>示例 3：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[1]\n输出：false\n解释：没有满足要求的分组。</code></pre></div><p><b>示例 4：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[1,1]\n输出：true\n解释：可行的分组是 [1,1]</code></pre></div><p><b>示例 5：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[1,1,2,2,2,2]\n输出：true\n解释：可行的分组是 [1,1]，[2,2]，[2,2]</code></pre></div><p><b>提示：</b></p><ol><li><code>1 &lt;= deck.length &lt;= 10000</code></li><li><code>0 &lt;= deck[i] &lt; 10000</code></li></ol><h2>思路</h2><p>思路 <i> 利用map统计每个数字的个数， </i> 然后判断卡牌的个数和卡片的数值是否相等,从卡牌数值为0开始判断, <i> 当卡牌的数值和卡片的分组中卡片的个数相等且统计数值大于等于2时，返回true </i> 否则，返回false</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasGroupsSizeX</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">deck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">deck</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">deck</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">values</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">countNum</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">res</span> <span class=\"o\">&gt;</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n     <span class=\"kd\">private</span>  <span class=\"kt\">int</span> <span class=\"nf\">countNum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span> <span class=\"o\">?</span> <span class=\"n\">countNum</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49722947", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "反转字符串中的元音字母", 
            "content": "<p></p><p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;hello&#34;\n输出: &#34;holle&#34;</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;leetcode&#34;\n输出: &#34;leotcede&#34;</code></pre></div><p><b>说明:</b> 元音字母不包含字母&#34;y&#34;。</p><h2>思路</h2><p>双向遍历，各找到一个元音字母后调换一次位置，然后继续遍历就行了。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span>  <span class=\"n\">String</span> <span class=\"nf\">reverseVowels</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n\n        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vowels</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n\n            <span class=\"kt\">char</span> <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n            <span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">center</span><span class=\"o\">;</span>\n\n            <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"n\">r</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vowels</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">vowels</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span>  <span class=\"kt\">boolean</span> <span class=\"nf\">check</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">character</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;a&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;e&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;i&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;o&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;u&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;A&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;E&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;I&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;O&#39;</span> <span class=\"o\">||</span> <span class=\"n\">character</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;U&#39;</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49722825", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "按奇偶排序数组 II", 
            "content": "<p></p><p>给定一个非负整数数组 <code>A</code>， A 中一半整数是奇数，一半整数是偶数。</p><p>对数组进行排序，以便当 <code>A[i]</code> 为奇数时，<code>i</code> 也是奇数；当 <code>A[i]</code> 为偶数时， <code>i</code> 也是偶数。</p><p>你可以返回任何满足上述条件的数组作为答案。</p><p><b>示例：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[4,2,5,7]\n输出：[4,5,2,7]\n解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。</code></pre></div><p><b>提示：</b></p><ol><li><code>2 &lt;= A.length &lt;= 20000</code></li><li><code>A.length % 2 == 0</code></li><li><code>0 &lt;= A[i] &lt;= 1000</code></li></ol><h2>思路</h2><ol><li>分别去除数组中的奇数和偶数存放到list中</li><li>再将奇数和偶数按位重新放入新数组中</li></ol><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">sortArrayByParityII</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">odd</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">%</span> <span class=\"n\">2</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">odd</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">even</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">newData</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">2</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">newData</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">even</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">);</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">newData</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">odd</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">);</span>\n                <span class=\"n\">k</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">newData</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502726", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "用队列实现栈", 
            "content": "<p></p><p>使用队列实现栈的下列操作：</p><ul><li>push(x) -- 元素 x 入栈</li><li>pop() -- 移除栈顶元素</li><li>top() -- 获取栈顶元素</li><li>empty() -- 返回栈是否为空</li></ul><p><b>注意:</b></p><ul><li>你只能使用队列的基本操作-- 也就是 <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, 和 <code>is empty</code> 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><h2>思路</h2><p>使队列queue1中最新存入的元素始终在队列front，这样可以保证后进先出。实现栈的功能。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.company</span><span class=\"o\">;</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.LinkedList</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Queue</span><span class=\"o\">;</span>\n\n <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TwoQueueImplStack</span> <span class=\"o\">{</span>\n     <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">queue1</span><span class=\"o\">;</span>\n     <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">queue2</span><span class=\"o\">;</span>\n\n     <span class=\"cm\">/**\n</span><span class=\"cm\">      * Initialize your data structure here.\n</span><span class=\"cm\">      */</span>\n     <span class=\"kd\">public</span> <span class=\"nf\">TwoQueueImplStack</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n         <span class=\"n\">queue1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n         <span class=\"n\">queue2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n     <span class=\"o\">}</span>\n\n     <span class=\"cm\">/**\n</span><span class=\"cm\">      * Push element x onto stack.\n</span><span class=\"cm\">      */</span>\n     <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">queue2</span> <span class=\"o\">=</span> <span class=\"n\">queue1</span><span class=\"o\">;</span>\n         <span class=\"n\">queue1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span><span class=\"c1\">//q1留空，目的是每次新加入的元素都在q1队列的front\n</span><span class=\"c1\"></span>         <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span><span class=\"c1\">//q1的front加入x\n</span><span class=\"c1\"></span>         <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue2</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n             <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">queue2</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">());</span>\n         <span class=\"o\">}</span>\n     <span class=\"o\">}</span>\n\n     <span class=\"cm\">/**\n</span><span class=\"cm\">      * Removes the element on top of the stack and returns that element.\n</span><span class=\"cm\">      */</span>\n     <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n         <span class=\"k\">return</span> <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n     <span class=\"o\">}</span>\n\n     <span class=\"cm\">/**\n</span><span class=\"cm\">      * Get the top element.\n</span><span class=\"cm\">      */</span>\n     <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">top</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n         <span class=\"k\">return</span> <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n     <span class=\"o\">}</span>\n\n     <span class=\"cm\">/**\n</span><span class=\"cm\">      * Returns whether the stack is empty.\n</span><span class=\"cm\">      */</span>\n     <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">empty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n         <span class=\"k\">return</span> <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n     <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502675", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "唯一摩尔斯密码词", 
            "content": "<p></p><p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: <code>&#34;a&#34;</code> 对应 <code>&#34;.-&#34;</code>, <code>&#34;b&#34;</code> 对应 <code>&#34;-...&#34;</code>, <code>&#34;c&#34;</code> 对应 <code>&#34;-.-.&#34;</code>, 等等。</p><p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">[&#34;.-&#34;,&#34;-...&#34;,&#34;-.-.&#34;,&#34;-..&#34;,&#34;.&#34;,&#34;..-.&#34;,&#34;--.&#34;,&#34;....&#34;,&#34;..&#34;,&#34;.---&#34;,&#34;-.-&#34;,&#34;.-..&#34;,&#34;--&#34;,&#34;-.&#34;,&#34;---&#34;,&#34;.--.&#34;,&#34;--.-&#34;,&#34;.-.&#34;,&#34;...&#34;,&#34;-&#34;,&#34;..-&#34;,&#34;...-&#34;,&#34;.--&#34;,&#34;-..-&#34;,&#34;-.--&#34;,&#34;--..&#34;]</code></pre></div><p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，&#34;cab&#34; 可以写成 &#34;-.-.-....-&#34;，(即 &#34;-.-.&#34; + &#34;-...&#34; + &#34;.-&#34;字符串的结合)。我们将这样一个连接过程称作单词翻译。</p><p>返回我们可以获得所有词不同单词翻译的数量。</p><div class=\"highlight\"><pre><code class=\"language-text\">例如:\n输入: words = [&#34;gin&#34;, &#34;zen&#34;, &#34;gig&#34;, &#34;msg&#34;]\n输出: 2\n解释: \n各单词翻译如下:\n&#34;gin&#34; -&gt; &#34;--...-.&#34;\n&#34;zen&#34; -&gt; &#34;--...-.&#34;\n&#34;gig&#34; -&gt; &#34;--...--.&#34;\n&#34;msg&#34; -&gt; &#34;--...--.&#34;\n\n共有 2 种不同翻译, &#34;--...-.&#34; 和 &#34;--...--.&#34;.</code></pre></div><p><b>注意:</b></p><ul><li>单词列表<code>words</code> 的长度不会超过 <code>100</code>。</li><li>每个单词 <code>words[i]</code>的长度范围为 <code>[1, 12]</code>。</li><li>每个单词 <code>words[i]</code>只包含小写字母</li></ul><h2>思路</h2><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">uniqueMorseRepresentations</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">words</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">morses</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]{</span><span class=\"s\">&#34;.-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-...&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-.-.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-..&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;..-.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;--.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;....&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;..&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;.---&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-.-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;.-..&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;--&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;---&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;.--.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;--.-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;.-.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;...&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;..-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;...-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;.--&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-..-&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;-.--&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;--..&#34;</span><span class=\"o\">};</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">chars</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">;</span> <span class=\"n\">chars</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;z&#39;</span><span class=\"o\">;</span> <span class=\"n\">chars</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">,</span> <span class=\"n\">morses</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]);</span>\n            <span class=\"n\">index</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">wordChars</span> <span class=\"o\">=</span> <span class=\"n\">words</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n            <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">wordChars</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">wordChars</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]));</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502623", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "反转链表", 
            "content": "<p></p><p>反转一个单链表。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre></div><p><b>进阶:</b> 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><h2>思路</h2><p>使用头插法。 </p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">reverseList</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 头结点\n</span><span class=\"c1\"></span>        <span class=\"n\">ListNode</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ListNode</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">nextNode</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">nextNode</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n            <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">nextNode</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": [
                {
                    "userName": "xmyj", 
                    "userLink": "https://www.zhihu.com/people/1f615fe58b039c08cf756d83e1cfa089", 
                    "content": "那反转之后多了一个第一步产生的node？要是第一次不产生node直接给root赋值为NULL是不是更好？", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502548", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "翻转二叉树", 
            "content": "<p></p><p>翻转一棵二叉树。</p><p><b>示例：</b></p><p>输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</code></pre></div><h2>思路：递归法</h2><p>递归的终止条件是当遇到空节点或叶子节点时，不再交换，直接返回该节点。对于其他的节点，我们分别交换它的左子树和右子树，然后将交换过后的左子树赋给右节点，右子树赋给左节点。代码给出的是后序遍历的自下而上的交换，先序遍历的话就是自上而下的交换。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-text\">public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\npublic class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if(root == null || (root.left == null &amp;&amp; root.right == null)) return root;\n        TreeNode newLeft = invertTree(root.right);\n        TreeNode newRight = invertTree(root.left);\n        root.left = newLeft;\n        root.right = newRight;\n        return root;\n    }\n}</code></pre></div><h2>思路：迭代法</h2><p>迭代法的思路是BFS或者DFS，这两种方法都可以实现，实际上也是二叉树的遍历。BFS用Queue实现，DFS的话将代码中的Queue换成Stack。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">invertTree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;();</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"k\">while</span><span class=\"o\">(!</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n            <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502522", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 2, 
            "title": "独特的电子邮件地址", 
            "content": "<p></p><p>每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。</p><p>例如，在 <code>alice@leetcode.com</code>中， <code>alice</code> 是本地名称，而 <code>leetcode.com</code> 是域名。</p><p>除了小写字母，这些电子邮件还可能包含 <code>&#39;,&#39;</code> 或 <code>&#39;+&#39;</code>。</p><p>如果在电子邮件地址的<b>本地名称</b>部分中的某些字符之间添加句点（<code>&#39;.&#39;</code>），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，<code>&#34;alice.z@leetcode.com”</code> 和 <code>“alicez@leetcode.com”</code> 会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）</p><p>如果在<b>本地名称</b>中添加加号（<code>&#39;+&#39;</code>），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 <code>m.y+name@email.com</code> 将转发到 <code>my@email.com</code>。 （同样，此规则不适用于域名。）</p><p>可以同时使用这两个规则。</p><p>给定电子邮件列表 <code>emails</code>，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？</p><p><b>示例：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入：[&#34;test.email+alex@leetcode.com&#34;,&#34;test.e.mail+bob.cathy@leetcode.com&#34;,&#34;testemail+david@lee.tcode.com&#34;]\n输出：2\n解释：实际收到邮件的是 &#34;testemail@leetcode.com&#34; 和 &#34;testemail@lee.tcode.com&#34;。</code></pre></div><p><b>提示：</b></p><ul><li><code>1 &lt;= emails[i].length &lt;= 100</code></li><li><code>1 &lt;= emails.length &lt;= 100</code></li><li>每封 <code>emails[i]</code> 都包含有且仅有一个 <code>&#39;@&#39;</code> 字符。</li></ul><h2>思路</h2><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numUniqueEmails</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">emails</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">mails</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">emails</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">mailChars</span> <span class=\"o\">=</span> <span class=\"n\">emails</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n            <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">mailChars</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mailChars</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;+&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">mailChars</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mailChars</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;@&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">mailChars</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                                <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">mailChars</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mailChars</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;.&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">mailChars</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">mails</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">mails</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502472", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "存在重复元素", 
            "content": "<p></p><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,2,3,1]\n输出: true</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,2,3,4]\n输出: false</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,1,1,3,3,4,3,2,4,2]\n输出: true</code></pre></div><h2>思路</h2><p>哈希表。在map.put之前判断这个值在哈希表里是否已经存在，若存在说明这个数字在数组中是重复的，return true。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsDuplicate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])){</span><span class=\"c1\">//这个数已经出现过一次\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span><span class=\"o\">{</span>\n               <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">i</span><span class=\"o\">);</span> \n            <span class=\"o\">}</span>           \n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49502451", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "存在重复元素 II", 
            "content": "<p></p><p>给定一个整数数组和一个整数 <i>k</i>，判断数组中是否存在两个不同的索引 <i>i</i> 和 <i>j</i>，使得 <b>nums [i] = nums [j]</b>，并且 <i>i</i> 和 <i>j</i> 的差的绝对值最大为 <i>k</i>。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: nums = [1,2,3,1], k = 3\n输出: true</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: nums = [1,0,1,1], k = 1\n输出: true</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: nums = [1,2,3,1,2,3], k = 2\n输出: false</code></pre></div><h2>思路</h2><p>还是利用HashMap数据结构，每次存入数值钱先看一下有没有这个数了，如果已经有了，那么看一下这两个数的索引下标之差是不是小于等于k的，如果是的话那么久说明找到了，返回true，如果没有找到就返回false。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsNearbyDuplicate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">hm</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">hm</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])){</span>\n                <span class=\"kt\">int</span> <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">hm</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">hm</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">hm</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48561112", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "移除链表元素", 
            "content": "<p></p><p>删除链表中等于给定值 <b>val</b> 的所有节点。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6\n输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</code></pre></div><h2>思路</h2><p>通过循环遍历链表，当val值不相等时 停止，以此来保证第二个循环遍历时，不需要考虑链表头。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param head a ListNode\n</span><span class=\"cm\">     * @param val an integer\n</span><span class=\"cm\">     * @return a ListNode\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">removeElements</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Write your code here\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"n\">head</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n\n        <span class=\"n\">ListNode</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">ListNode</span> <span class=\"n\">del</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">;</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"n\">pre</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">;</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": [
                {
                    "userName": "Icarus", 
                    "userLink": "https://www.zhihu.com/people/4d41c6ed6ca260db600a08ab3e7d1183", 
                    "content": "<p>这种操作链表的可以新建一个头，会简洁一些</p>", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48561011", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "同构字符串", 
            "content": "<p></p><p>给定两个字符串 <b>s</b> 和 <b>t</b>，判断它们是否是同构的。</p><p>如果 <b>s</b> 中的字符可以被替换得到 <b>t</b> ，那么这两个字符串是同构的。</p><p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: s = &#34;egg&#34;, t = &#34;add&#34;\n输出: true</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: s = &#34;foo&#34;, t = &#34;bar&#34;\n输出: false</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: s = &#34;paper&#34;, t = &#34;title&#34;\n输出: true</code></pre></div><h2>思路</h2><p>使用一个哈希表map维护两个字符串中字符的映射关系，同时用一个set保存映射的值。(s[i], t[i])，如是s[i]键没有在map中出现过并且t[i]没有在set中出现过，就加入到映射关系中，t[i]值已经出现过，说明是多对一映射，不符合返回false。s[i]键如果已经出现过，设为s[k]，对应的映射值为t[k]),即s[i]==s[k],则找出s[k]的对对应值t[k]，如果t[i]!=t[k],说明一个同一个字符存在两个不同的映射，两个字符串不是同构的，返回false，继续处理下一个字符，直到结束。 </p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isIsomorphic</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// 两个字符串都为空\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 只有一个为空\n</span><span class=\"c1\"></span>        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 两个字符串的长度都为0\n</span><span class=\"c1\"></span>        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 两个字符串的长度不相等\n</span><span class=\"c1\"></span>        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 保存映射关系 \n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">,</span> <span class=\"n\">Character</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n        <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n        <span class=\"kt\">char</span> <span class=\"n\">sChar</span><span class=\"o\">;</span>\n        <span class=\"kt\">char</span> <span class=\"n\">tChar</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sChar</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">tChar</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 键未出现过，就保存映射关系\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">sChar</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">tChar</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n                    <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">tChar</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// 如是键已经出现过\n</span><span class=\"c1\"></span>            <span class=\"k\">else</span> <span class=\"o\">{</span>\n\n                <span class=\"c1\">// 原先的键映射的值是map.get(sChar)，现在要映射的值是tChar\n</span><span class=\"c1\"></span>                <span class=\"c1\">// 如果两个值不相等，说明已经映射了两次，不符合，返回false\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">sChar</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">tChar</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "字符", 
                    "tagLink": "https://api.zhihu.com/topics/19833387"
                }, 
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48560969", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "计算质数", 
            "content": "<p></p><p>统计所有小于非负整数 <i>n</i> 的质数的数量。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 10\n输出: 4\n解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</code></pre></div><h2>思路</h2><p>埃拉托斯特尼筛法，简称埃氏筛或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法：  要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。  </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e12df396388a9f000b1bcb9edd196847_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"445\" data-rawheight=\"369\" data-thumbnail=\"https://pic4.zhimg.com/v2-e12df396388a9f000b1bcb9edd196847_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"445\" data-original=\"https://pic4.zhimg.com/v2-e12df396388a9f000b1bcb9edd196847_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;445&#39; height=&#39;369&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"445\" data-rawheight=\"369\" data-thumbnail=\"https://pic4.zhimg.com/v2-e12df396388a9f000b1bcb9edd196847_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"445\" data-original=\"https://pic4.zhimg.com/v2-e12df396388a9f000b1bcb9edd196847_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e12df396388a9f000b1bcb9edd196847_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">countPrimes</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//默认为false\n</span><span class=\"c1\"></span>        <span class=\"kt\">boolean</span><span class=\"o\">[]</span> <span class=\"n\">isPrime</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]=</span><span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]=</span><span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">2</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//统计质数个数\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">result</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"nl\">b:</span><span class=\"n\">isPrime</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">){</span>\n                <span class=\"n\">result</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数论", 
                    "tagLink": "https://api.zhihu.com/topics/19558748"
                }, 
                {
                    "tag": "素数", 
                    "tagLink": "https://api.zhihu.com/topics/19669697"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48560890", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "欢乐数", 
            "content": "<p></p><p>编写一个算法来判断一个数是不是“快乐数”。</p><p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><p><b>示例:</b> </p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 19\n输出: true\n解释: \n1^2 + 9^2 = 82\n8^2 + 2^2 = 68\n6^2 + 8^2 = 100\n1^2 + 0^2 + 0^2 = 1</code></pre></div><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param n an integer\n</span><span class=\"cm\">     * @return true if this is a happy number or false\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isHappy</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Write your code here\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">==</span><span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">&lt;</span><span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">!=</span><span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n            <span class=\"kt\">char</span> <span class=\"o\">[]</span><span class=\"n\">arr</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n                <span class=\"n\">sum</span><span class=\"o\">+=</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"s\">&#34;&#34;</span><span class=\"o\">)*</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"s\">&#34;&#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">sum</span><span class=\"o\">;</span>\n            <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">&gt;</span><span class=\"n\">1000</span><span class=\"o\">){</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }, 
                {
                    "tag": "数论", 
                    "tagLink": "https://api.zhihu.com/topics/19558748"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48560749", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "打家劫舍", 
            "content": "<p></p><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<b>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</b>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你<b>在不触动警报装置的情况下，</b>能够偷窃到的最高金额。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</code></pre></div><h2>思路</h2><p>很明显的是动态规划题。对于动态规划题就是找他的动态规划方程，也就是找规律。  拿示例1讲解：[1,2,3,1]</p><p>我们会发现我们找的就是当前房屋金额和之前的间隔房屋最大金额与相邻房屋最大金额的最大值。  使用nums数组存储房屋的金额数，使用一个数组arr作为偷到该房屋最大金额数的存储，长度等于房屋数。对于arr[0]就是他自己的金额数为nums[0]=1，对于arr[1]呢，就是nums[0]和nums[1]的较大者，那么对于arr[i]，我们能得到的最大金额是多少呢？就是它的金额数和间隔的房屋最大金额数与它相邻的房屋最大金额数。即：num[i]+arr[i-2]与arr[i-1]的较大者。</p><p>动态规划方程为：arr[i] = Math.max(nums[i]+arr[i-2],arr[i-1]);</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">rob</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">?</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">2</span><span class=\"o\">],</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48313122", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "相交链表", 
            "content": "<p></p><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>例如，下面的两个链表<b>：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">A:          a1 → a2\n                   ↘\n                     c1 → c2 → c3\n                   ↗            \nB:     b1 → b2 → b3</code></pre></div><p>在节点 c1 开始相交。</p><p><b>注意：</b></p><ul><li>如果两个链表没有交点，返回 <code>null</code>.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(<i>n</i>) 时间复杂度，且仅用 O(<i>1</i>) 内存。</li></ul><h2>思路</h2><p>双指针解法顾名思义需要两个指针，假设指针 <code>pA</code> 和 <code>pB</code> 分别指向链表 A 和链表 B 的头结点，之后两个指针分别以步幅为 1 的速度向链表的尾部遍历，当指针 <code>pA</code> 遍历到链表 A 的尾节点时，将指针 <code>pA</code> 指向链表 B 的头部。同样地，当指针 <code>pB</code> 遍历到链表 B 的尾节点时，将指针 <code>pB</code> 指向链表 A 的头部。当两个指针相遇时，指针 <code>pA</code> 或者 <code>pB</code> 所指向的节点就是两个链表的相交节点。</p><p>为了说明双指针的求解思路，假设链表 A 和链表 B 的结构如下图所示，</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d7553ff237bc7d9964785df0c3f62d25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"561\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d7553ff237bc7d9964785df0c3f62d25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;561&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"561\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d7553ff237bc7d9964785df0c3f62d25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d7553ff237bc7d9964785df0c3f62d25_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>其中，链表 A 包含 6 个节点，节点的值分别为 1、3、5、7、9 和 11；链表 B 包含 4 个节点，节点的值分别为 2、4、9 和 11，因此，两个链表的相交节点为 9。设链表 A 中不相交的部分（即蓝色部分的节点）长度为 </p> <p>，链表 B 中不相交的部分（即黄色部分的节点）长度为 </p> <p>，两个链表相交的部分（即红色部分的节点）长度为 </p> <p>。</p><p>如下图所示，当指针 <code>pB</code> 遍历到链表 B 的尾节点 11 时，指针 <code>pA</code> 遍历到链表 A 中节点 7 的位置，下一次遍历指针 <code>pB</code> 将处于链表 A 的节点 1 的位置。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dcdd4ffb8b89ad07d81da08869913e09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-dcdd4ffb8b89ad07d81da08869913e09_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;411&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-dcdd4ffb8b89ad07d81da08869913e09_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dcdd4ffb8b89ad07d81da08869913e09_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>同理，当指针 <code>pA</code> 遍历到链表 A 的尾节点 11 时，此时指针 <code>pB</code> 处于链表 A 中节点 3 的位置，下一次遍历指针 <code>pA</code> 将处于链表 B 的节点 2 位置。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-07ed4864c989f9a23842b7e6a9ad4986_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-07ed4864c989f9a23842b7e6a9ad4986_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;411&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-07ed4864c989f9a23842b7e6a9ad4986_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-07ed4864c989f9a23842b7e6a9ad4986_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>再经过两次遍历后，指针 <code>pA</code> 将位于链表 B 中节点 4 的位置，而指针 <code>pB</code> 也将到达链表 A 的节点 4 的位置，下一次遍历两个指针将在节点 9（即相交节点）相遇。此时，两个指针走过的长度都为 </p><p>。究其原因，可以将两个指针走过的“路程”看成 3 个部分，即蓝色部分、红色部分以及橙色部分，只是两个指针走过 3 个部分的顺序是不同的，指针 <code>pA</code> 先走蓝色部分而指针 <code>pB</code> 先走橙色部分，但是经过前 3 个部分后，两个指针走过的长度一定是相同的，因此在下一次遍历的时候两个指针一定会相遇。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-08ed5620d0aca7d34289b3f0ad8243fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-08ed5620d0aca7d34289b3f0ad8243fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-08ed5620d0aca7d34289b3f0ad8243fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-08ed5620d0aca7d34289b3f0ad8243fe_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Definition for singly-linked list.\n</span><span class=\"cm\"> * public class ListNode {\n</span><span class=\"cm\"> *     int val;\n</span><span class=\"cm\"> *     ListNode next;\n</span><span class=\"cm\"> *     ListNode(int x) {\n</span><span class=\"cm\"> *         val = x;\n</span><span class=\"cm\"> *         next = null;\n</span><span class=\"cm\"> *     }\n</span><span class=\"cm\"> * }\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">getIntersectionNode</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">headA</span><span class=\"o\">,</span> <span class=\"n\">ListNode</span> <span class=\"n\">headB</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">headA</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">headB</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">ListNode</span> <span class=\"n\">pA</span> <span class=\"o\">=</span> <span class=\"n\">headA</span><span class=\"o\">;</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">pB</span> <span class=\"o\">=</span> <span class=\"n\">headB</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">pA</span> <span class=\"o\">!=</span> <span class=\"n\">pB</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">pA</span> <span class=\"o\">=</span> <span class=\"n\">pA</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">headB</span> <span class=\"o\">:</span> <span class=\"n\">pA</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">pB</span> <span class=\"o\">=</span> <span class=\"n\">pB</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">headA</span> <span class=\"o\">:</span> <span class=\"n\">pB</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">pA</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "链表", 
                    "tagLink": "https://api.zhihu.com/topics/19649942"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48312827", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "最小栈", 
            "content": "<p></p><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) -- 将元素 x 推入栈中。</li><li>pop() -- 删除栈顶的元素。</li><li>top() -- 获取栈顶元素。</li><li>getMin() -- 检索栈中的最小元素。</li></ul><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.getMin();   --&gt; 返回 -2.</code></pre></div><h2>思路</h2><p>原理是每一次push一个差值x-min，可以记录上一次的最小值。如果x小于上一次的min，就更改min。同时在pop的时候，要看栈顶是否是最小值，如果是，那么pop了以后就需要更新最小值为x+min。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MinStack</span> <span class=\"o\">{</span>\n\n    <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n    <span class=\"cm\">/** initialize your data structure here. */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">MinStack</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n            <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n                <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">min</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">top</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"o\">&lt;</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"k\">return</span> <span class=\"n\">top</span> <span class=\"o\">+</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getMin</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "检索", 
                    "tagLink": "https://api.zhihu.com/topics/19724451"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48312698", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "旋转数组", 
            "content": "<p></p><p>给定一个数组，将数组中的元素向右移动 <i>k</i> 个位置，其中 <i>k</i> 是非负数。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释: \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]</code></pre></div><p><b>说明:</b></p><ul><li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li><li>要求使用空间复杂度为 O(1) 的原地算法。</li></ul><h2>思路</h2><p>将要右移的数放到一个新的数组里，然后将剩下的补齐</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">reverse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">j</span><span class=\"o\">){</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"n\">j</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48240211", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "两数之和 II - 输入有序数组", 
            "content": "<p>给定一个已按照<b>升序排列</b> 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2<i>。</i></p><p><b>说明:</b></p><ul><li>返回的下标值（index1 和 index2）不是从零开始的。</li><li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li></ul><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</code></pre></div><h2>思路</h2><p>设置两个变量start和end，start指向数组下标0，end指向数组下标numbersSize - 1，因为该数组为有序数组，所以可以通过numbers[start] + number[end]的值和target的值的大小来作为判断，通过移动两个变量的位置来寻找结果，时间复杂度为O(n)，空间复杂度为O(1)。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">twoSum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"o\">[]</span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">0</span><span class=\"o\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">length</span><span class=\"o\">==</span><span class=\"n\">0</span><span class=\"o\">||(</span><span class=\"n\">length</span><span class=\"o\">==</span><span class=\"n\">2</span><span class=\"o\">&amp;&amp;(</span><span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]+</span><span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">])!=</span><span class=\"n\">target</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">length</span><span class=\"o\">){</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">==</span><span class=\"n\">target</span><span class=\"o\">){</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">&lt;</span><span class=\"n\">target</span><span class=\"o\">){</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "函数", 
                    "tagLink": "https://api.zhihu.com/topics/19599298"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48240380", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "求众数", 
            "content": "<p>给定一个大小为 <i>n</i> 的数组，找到其中的众数。众数是指在数组中出现次数<b>大于</b> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [3,2,3]\n输出: 3</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [2,2,1,1,1,2,2]\n输出: 2</code></pre></div><h2>思路</h2><p>将中位数按位来建立，从0到31位，每次统计下数组中该位上0和1的个数，如果1多，那么我们将结果res中该位变为1，最后累加出来的res就是中位数了。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">majorityElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">32</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">zeros</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ones</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"n\">2</span> <span class=\"o\">||</span> <span class=\"n\">zeros</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">num</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">++</span><span class=\"n\">ones</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"o\">++</span><span class=\"n\">zeros</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ones</span> <span class=\"o\">&gt;</span> <span class=\"n\">zeros</span><span class=\"o\">)</span> <span class=\"n\">res</span> <span class=\"o\">|=</span> <span class=\"o\">(</span><span class=\"n\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48240521", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "位1的个数", 
            "content": "<p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25B1%2589%25E6%2598%258E%25E9%2587%258D%25E9%2587%258F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">汉明重量</a>）。</p><p><b>示例 :</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 11\n输出: 3\n解释: 整数 11 的二进制表示为 00000000000000000000000000001011</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 128\n输出: 1\n解释: 整数 128 的二进制表示为 00000000000000000000000010000000</code></pre></div><h2>思路</h2><p>n和n-1的关系  1011—&gt;n  1010—&gt;n-1  1010—-&gt;n&amp;n-1 等于新n  100—&gt;n-1  100—&gt;n&amp;n-1 等于新n  011—-&gt;n-1  000—-&gt;n&amp;n-1</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// you need to treat n as an unsigned value\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">hammingWeight</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">!=</span><span class=\"n\">0</span><span class=\"o\">){</span>\n            <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"n\">num</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": [
                {
                    "userName": "老猪佩奇", 
                    "userLink": "https://www.zhihu.com/people/1f6dacf11f0508e2780fcd3288287902", 
                    "content": "java吗？Integer有个方法，叫bigCount", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48240146", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "阶乘后的零", 
            "content": "<p></p><p>给定一个整数 <i>n</i>，返回 <i>n</i>! 结果尾数中零的数量。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 3\n输出: 0\n解释: 3! = 6, 尾数中没有零。</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 5\n输出: 1\n解释: 5! = 120, 尾数中有 1 个零.</code></pre></div><p><b>说明:</b> 你算法的时间复杂度应为 <i>O</i>(log <i>n</i>) 。</p><h2>思路</h2><p>列出所有5的倍数发现了规律，所有5的倍数会添加一个0，所有5^2的倍数会比5的倍数多添加一个0，.......，所以得出了代码。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">trailingZeroes</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span> \n        <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">n</span> <span class=\"o\">/=</span> <span class=\"n\">5</span><span class=\"o\">;</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48239970", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "Excel表列序号", 
            "content": "<p></p><p>给定一个Excel表格中的列名称，返回其相应的列序号。</p><p>例如，</p><div class=\"highlight\"><pre><code class=\"language-text\">A -&gt; 1\n    B -&gt; 2\n    C -&gt; 3\n    ...\n    Z -&gt; 26\n    AA -&gt; 27\n    AB -&gt; 28 \n    ...</code></pre></div><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;A&#34;\n输出: 1</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;AB&#34;\n输出: 28</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;ZY&#34;\n输出: 701</code></pre></div><h2>思路</h2><p>正常的26进制转10进制</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">titleToNumber</span><span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;Z&#39;</span> <span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"sc\">&#39;A&#39;</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span> <span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"o\">*</span><span class=\"n\">26</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48239851", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "Excel表列名称", 
            "content": "<p></p><p>给定一个正整数，返回它在 Excel 表中相对应的列名称。</p><p>例如，</p><div class=\"highlight\"><pre><code class=\"language-text\">1 -&gt; A\n    2 -&gt; B\n    3 -&gt; C\n    ...\n    26 -&gt; Z\n    27 -&gt; AA\n    28 -&gt; AB \n    ...</code></pre></div><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1\n输出: &#34;A&#34;</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 28\n输出: &#34;AB&#34;</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 701\n输出: &#34;ZY&#34;</code></pre></div><h2>思路</h2><p>此题可看做把一个10进制的数转换成26进制的列名，但由于列名称里没有字母表示十进制的0，所以和单纯的进制转换又不太一样。考虑由最低位开始从右往左来依次求解，最低位的数字范围是1~26，分别对应列名中的A~Z。由列名X1X2…XkXk+1转换成的十进制数可表示为 $$ X1<i>26^k + X2</i>26^k-1 + …… + Xk<i>26 + Xk+1 $$ 可知去掉最低位的数字Xk+1后一定能被26整除，而Xk+1可以取1~26中的数，为了从要转换的数字n中分离出最后一位，所以先把n减1，这样Xk+1的取值变为0~25，让n对26取余后得到的余数即为此时Xk+1对应的数，然后再令A~Z依次匹配0~25即可。最后一位确定后，令n=（n-1）/26，这样得到结果列名依次右移一位的新列名对应的十进制数 $$ X1</i>26^k-1 + X2*26^k-2 + …… + Xk $$ 再对其递归求解，直到十进制数变为0。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"n\">string</span> <span class=\"nf\">convertToTitle</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"n\">string</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n          <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">){</span>\n              <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">)(</span><span class=\"sc\">&#39;A&#39;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">26</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n              <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">26</span><span class=\"o\">;</span>\n          <span class=\"o\">}</span>\n          <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n     <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48088236", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "只出现一次的数字", 
            "content": "<p></p><p>给定一个<b>非空</b>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><b>说明：</b></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [2,2,1]\n输出: 1</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [4,1,2,1,2]\n输出: 4</code></pre></div><h2>思路 1：</h2><p>使用Hash表，建立一个<code>元素 - 出现次数</code>的映射关系，然后再遍历一遍数组找出<code>出现次数</code>唯一的<code>元素</code>。</p><h2>代码 1:</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">singleNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">Integer</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">0</span> <span class=\"o\">:</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路 2：</h2><p>在解题时应该充分考虑题目所给的条件。</p><p>比如“给定一个整数数组，除了某个元素外其余元素均出现两次”，我们由此可以知道，若该数组有序，且有一个元素只出现一次，以步数2向后遍历，那么一定会存在<code>a[i] != a[i+1]</code>。</p><h2>代码 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">singleNumber1</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span> <span class=\"o\">&gt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "时间复杂度", 
                    "tagLink": "https://api.zhihu.com/topics/19587347"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48088183", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "验证回文串", 
            "content": "<p></p><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p><b>说明：</b>本题中，我们将空字符串定义为有效的回文串。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;A man, a plan, a canal: Panama&#34;\n输出: true</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;race a car&#34;\n输出: false</code></pre></div><h2>思路</h2><p>1 很容易想到char[] 数组化，然后用while循环遍历，i，j满足的条件 i&lt;j 即可 2 while循环里的逻辑分3步 </p><ul><li>前置i固定字符</li><li>2 后置j固定字符</li><li>3 然后比较这两个位置的值是否相同，相同继续处理 i++ j++</li></ul><p>3  用到了Character类里的方法 </p><ul><li> 判断是否是数字和英文字符 . Character.isLetterOrDigit<br/> </li><li> 2 字母的小写化 Characte.toLowerCase<br/> </li></ul><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPalindrome</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">cha</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">cha</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">isLetterOrDigit</span><span class=\"o\">(</span><span class=\"n\">cha</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">isLetterOrDigit</span><span class=\"o\">(</span><span class=\"n\">cha</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]))</span>\n                <span class=\"n\">j</span><span class=\"o\">--;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">(</span><span class=\"n\">cha</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">==</span> <span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">(</span><span class=\"n\">cha</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])){</span>\n                    <span class=\"n\">i</span><span class=\"o\">++;</span>\n                    <span class=\"n\">j</span><span class=\"o\">--;</span>\n                <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48088114", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "买卖股票的最佳时机", 
            "content": "<p></p><p>给定一个数组，它的第 <i>i</i> 个元素是一支给定股票第 <i>i</i> 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre></div><h2>思路</h2><p>因为只能完成一笔交易嘛，所以思路就是直接找到到目前为止的最小的价格，然后算一下当前假设是以这个最低价买入的，并且现在卖掉的话可以赚多少钱，然后找出赚钱最多的max就是结果啦</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-68344b1f75c2b180640be3a9db31c11c_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"24\" data-rawheight=\"24\" data-thumbnail=\"https://pic1.zhimg.com/v2-68344b1f75c2b180640be3a9db31c11c_b.jpg\" class=\"content_image\" width=\"24\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;24&#39; height=&#39;24&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"24\" data-rawheight=\"24\" data-thumbnail=\"https://pic1.zhimg.com/v2-68344b1f75c2b180640be3a9db31c11c_b.jpg\" class=\"content_image lazy\" width=\"24\" data-actualsrc=\"https://pic1.zhimg.com/v2-68344b1f75c2b180640be3a9db31c11c_b.gif\"/></figure><p>！</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">prices</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">curMin</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"n\">curMin</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">curMin</span><span class=\"o\">,</span><span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span><span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">curMin</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48088071", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "买卖股票的最佳时机 ll", 
            "content": "<p></p><p>给定一个数组，它的第 <i>i</i> 个元素是一支给定股票第 <i>i</i> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><b>注意：</b>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [7,1,5,3,6,4]\n输出: 7\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,2,3,4,5]\n输出: 4\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre></div><h2>思路</h2><p>使用贪心算法，只要可以产生利润（后一天比前一天股票价值上升），就进行一次买卖</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-text\">private static int maxProfit(int[] prices){\n        int maxMoney=0;\n        int count=0;\n        for(int i=0;i&lt;prices.length-1;i++){\n            if(prices[i]&lt;=prices[i+1]){\n                count++;\n            }else{\n                maxMoney+=prices[i]-prices[i-count];\n                count=0;\n            }\n        }\n        if(count&gt;0){\n            maxMoney+=prices[prices.length-1]-prices[prices.length-1-count];\n        }\n        return maxMoney;\n    }</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48088019", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "环形链表", 
            "content": "<p></p><p>给定一个链表，判断链表中是否有环。</p><p><b>进阶：</b> 你能否不使用额外空间解决此题？</p><h2>思路</h2><p>一快一慢指针，若有环，必然在某个地方相遇。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasCycle</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">fast</span><span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span>  <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">){</span>\n             <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n             <span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span> \n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">slow</span><span class=\"o\">==</span><span class=\"n\">fast</span><span class=\"o\">)</span><span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "链表", 
                    "tagLink": "https://api.zhihu.com/topics/19649942"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47993251", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "杨辉三角", 
            "content": "<p></p><p>给定一个非负整数 <i>numRows，</i>生成杨辉三角的前 <i>numRows</i> 行。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"240\" data-thumbnail=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.jpg\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"240\" data-thumbnail=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.jpg\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 5\n输出:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]</code></pre></div><h2>思路</h2><p>关键记录上一层的结点即pre，每一层的第i个位置，等于上一层第i-1与第i个位置之和。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">generate</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">numRows</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">numRows</span> <span class=\"o\">&lt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 指向上一个三角形\n</span><span class=\"c1\"></span>        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n        <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"o\">);</span>\n        <span class=\"c1\">// i代表层数，从1开始\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">numRows</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n            <span class=\"c1\">// first\n</span><span class=\"c1\"></span>            <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// middle\n</span><span class=\"c1\"></span>                <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// last\n</span><span class=\"c1\"></span>            <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">cur</span><span class=\"o\">);</span>\n            <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47993133", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "杨辉三角 II", 
            "content": "<p></p><p>给定一个非负索引 <i>k</i>，其中 <i>k</i> ≤ 33，返回杨辉三角的第 <i>k</i> 行。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"240\" data-thumbnail=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.jpg\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"240\" data-thumbnail=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.jpg\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic3.zhimg.com/v2-99fd119be3ca7616ae635b28e7181f7e_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 3\n输出: [1,3,3,1]</code></pre></div><p><b>进阶：</b></p><p>你可以优化你的算法到 <i>O</i>(<i>k</i>) 空间复杂度吗？</p><h2>思路</h2><p>获取第k行的杨辉三角，k从0开始</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">getRow</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">rowIndex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rowIndex</span> <span class=\"o\">&lt;</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">rowIndex</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 从后往前覆盖\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47993028", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "平衡二叉树", 
            "content": "<p></p><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote> 一个二叉树<i>每个节点</i> 的左右两个子树的高度差的绝对值不超过1。<br/> </blockquote><p><b>示例 1:</b></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p><div class=\"highlight\"><pre><code class=\"language-text\">    3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre></div><p>返回 <code>true</code> 。</p><p><b>示例 2:</b></p><p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p><div class=\"highlight\"><pre><code class=\"language-text\">       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4</code></pre></div><p>返回 <code>false</code> 。</p><h2>思路</h2><h2>解法1：</h2><p>1.计算每个节点的高度 2.从根节点开始从上往下遍历，判断每个节点的左右子树是否是平衡的</p><p>缺点：每次遍历都要重新计算高度，很多节点的高度都重复计算了，时间复杂度o（n^2）</p><h2>解法2：</h2><p>从根节点开始，从上往下遍历，按照中序遍历的思想，从左右子节点向根节点遍历，一依次判断平衡状态，这样根结点可以重复利用已经计算的子节点的高度，只需要依次遍历整棵树。在遇到某个子树非平衡时，能直接结束，返回false。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isBalanced</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n             <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">leftH</span> <span class=\"o\">=</span> <span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rightH</span> <span class=\"o\">=</span> <span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">leftH</span> <span class=\"o\">-</span> <span class=\"n\">rightH</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">diff</span><span class=\"o\">&gt;</span><span class=\"n\">1</span> <span class=\"o\">||</span> <span class=\"n\">diff</span><span class=\"o\">&lt;-</span><span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">isBalanced</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isBalanced</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">getHeight</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">){</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">1</span><span class=\"o\">+</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span><span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "平衡二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/20092111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47992976", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "路径总和", 
            "content": "<p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p><b>说明:</b> 叶子节点是指没有子节点的节点。</p><p><b>示例:</b>  给定如下二叉树，以及目标和 <code>sum = 22</code>，</p><div class=\"highlight\"><pre><code class=\"language-text\">              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1</code></pre></div><p>返回 <code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p><h2>思路</h2><p>在解决树相关的问题的时候，要时刻想到递归的思维。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasPathSum</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">==</span><span class=\"n\">sum</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">hasPathSum</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span><span class=\"n\">sum</span><span class=\"o\">-</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">==</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">hasPathSum</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span><span class=\"n\">sum</span><span class=\"o\">-</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">==</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47992915", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "二叉树的最小深度", 
            "content": "<p></p><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><b>说明:</b> 叶子节点是指没有子节点的节点。</p><p><b>示例:</b></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><div class=\"highlight\"><pre><code class=\"language-text\">3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre></div><p>返回它的最小深度  2.</p><h2>思路</h2><p>这个题目求其最小深度不同于最大深度那样，这个要考虑该二叉树的左右子树是否存在，有四个方面</p><p>1、该二叉树为空，则返回0；</p><p>2、该二叉树不为空，且左右子树均存在，则和求最大深度一样，利用递归的方法求出最小深度</p><p>3、该二叉树只存在左子树，则返回值为1</p><p>4、该二叉树只存在右子树，则返回值为1</p><p>第二种情况时，分别求出左子树的最小值和右子树的最小值，再比较左右子树的最小值也会出现三种情况</p><p>a、left小于right时，取left+1</p><p>b、left大于right时，取right+1</p><p>c、left等于right时，并且left小于最大值，返回left+1</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">minDepth</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">minDepth</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">minDepth</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">&lt;</span><span class=\"n\">right</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">&gt;</span><span class=\"n\">right</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">right</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">==</span><span class=\"n\">right</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">left</span><span class=\"o\">!=</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">else</span><span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        \n    <span class=\"o\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>   \n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47925879", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "相同的树", 
            "content": "<p></p><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入:       1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入:      1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n输出: false</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入:       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n输出: false</code></pre></div><h2>思路</h2><p>使用递归进行求解，先判断当前结点值是否相等，如果相等就再比较其左右子树，只有当所有的结点都相等才相等。 </p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSameTree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">q</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">q</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">q</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isSameTree</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isSameTree</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "函数", 
                    "tagLink": "https://api.zhihu.com/topics/19599298"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47925775", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "将有序数组转换为二叉搜索树", 
            "content": "<p></p><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树<i>每个节点</i> 的左右两个子树的高度差的绝对值不超过 1。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5</code></pre></div><h2>思路</h2><ul><li> 递归思想，每次找到数组中间的元素为根节点，然后把左边的构建成左子树，右边的构建成右子树。<br/> </li><li> 可以简单举例验证分治的有效性，数组为4个———左1右2、3个——左1右1、2个——左0右1。3种情况下构建的树都是平衡的。<br/> </li><li> 要透过现象看到本质，想想“人”是怎么操作的。另外树的题目要多考虑递归。<br/> </li></ul><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">sortedArrayToBST</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sortedArrayToBST</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">sortedArrayToBST</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&gt;</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]);</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">sortedArrayToBST</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">sortedArrayToBST</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "平衡二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/20092111"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47925712", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "二叉树的最大深度", 
            "content": "<p></p><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><b>说明:</b> 叶子节点是指没有子节点的节点。</p><p><b>示例：</b> 给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><div class=\"highlight\"><pre><code class=\"language-text\">3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre></div><p>返回它的最大深度 3 。</p><h2>思路</h2><p>为了求树的深度，可以先求其左子树的深度和右子树的深度，可以用递归实现，递归的出口就是节点为空。返回值为0。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxDepth</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"kt\">int</span> <span class=\"n\">deep</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">lchildeep</span> <span class=\"o\">=</span> <span class=\"n\">maxDepth</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n      <span class=\"kt\">int</span> <span class=\"n\">rchildeep</span> <span class=\"o\">=</span> <span class=\"n\">maxDepth</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n      <span class=\"n\">deep</span> <span class=\"o\">=</span> <span class=\"n\">lchildeep</span> <span class=\"o\">&gt;</span> <span class=\"n\">rchildeep</span> <span class=\"o\">?</span> <span class=\"n\">lchildeep</span> <span class=\"o\">+</span> <span class=\"n\">1</span> <span class=\"o\">:</span> <span class=\"n\">rchildeep</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">deep</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47925590", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "二叉树的层次遍历II", 
            "content": "<p></p><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p>例如： 给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><div class=\"highlight\"><pre><code class=\"language-text\">3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre></div><p>返回其自底向上的层次遍历为：</p><div class=\"highlight\"><pre><code class=\"language-text\">[\n  [15,7],\n  [9,20],\n  [3]\n]</code></pre></div><h2>思路</h2><p>本题我是利用BFS遍历来实现，按层将节点不断压入队列，因为同一层的节点是在一个vector中的。所以还需要记录节点所在层数。这里恰好可以利用“当前层的节点个数为队列中元素个数”这个性质。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">levelOrderBottom</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">();</span>\n\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;</span> <span class=\"n\">queue1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayDeque</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;</span> <span class=\"n\">queue2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayDeque</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n      <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n      <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n        <span class=\"n\">queue2</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue2</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue2</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n        <span class=\"n\">min</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n          <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n          <span class=\"n\">queue1</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">max</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n      <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47925378", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "对称二叉树", 
            "content": "<p></p><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p><div class=\"highlight\"><pre><code class=\"language-text\">1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3</code></pre></div><p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p><div class=\"highlight\"><pre><code class=\"language-text\">1\n   / \\\n  2   2\n   \\   \\\n   3    3</code></pre></div><h2>思路</h2><p>首先 理解镜像的概念，进行就是一棵二叉树左右节点反转过后形成的二叉树和原来的二叉树是一样的。这道题目中判断条件是使用和元二叉树的镜像相同，那么最low的方法是对原二叉树进行重构，重构后的二叉树和原二叉树进行比较，相同即是对称，不同就是不对称喽。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">boolean</span> <span class=\"nf\">isSymmetrical</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">pRoot</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">getResult</span><span class=\"o\">(</span><span class=\"n\">pRoot</span><span class=\"o\">,</span><span class=\"n\">pRoot</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">boolean</span> <span class=\"nf\">getResult</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">pRoot</span><span class=\"o\">,</span><span class=\"n\">TreeNode</span> <span class=\"n\">Root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pRoot</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">Root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pRoot</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">Root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">pRoot</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">!=</span> <span class=\"n\">Root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">getResult</span><span class=\"o\">(</span><span class=\"n\">pRoot</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span><span class=\"n\">Root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)&amp;&amp;</span><span class=\"n\">getResult</span><span class=\"o\">(</span><span class=\"n\">pRoot</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span><span class=\"n\">Root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47827495", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "搜索插入位置", 
            "content": "<p></p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,3,5,6], 5\n输出: 2</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,3,5,6], 2\n输出: 1</code></pre></div><p><b>示例 3:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,3,5,6], 7\n输出: 4</code></pre></div><p><b>示例 4:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,3,5,6], 0\n输出: 0</code></pre></div><h2>思路</h2><p>二分查找</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">searchInsert</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">&lt;=</span> <span class=\"n\">high</span><span class=\"o\">){</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">target</span><span class=\"o\">)</span>\n                <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">low</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "索引", 
                    "tagLink": "https://api.zhihu.com/topics/19621412"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "搜索", 
                    "tagLink": "https://api.zhihu.com/topics/19552128"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47827328", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "删除排序链表中的重复元素", 
            "content": "<p></p><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1-&gt;1-&gt;2\n输出: 1-&gt;2</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3\n输出: 1-&gt;2-&gt;3</code></pre></div><h2>思路</h2><p>第一个节点head不发生重复</p><p>从前往后遍历，循环条件：node.next != null</p><p>(1)如果下一个节点元素 与 当前节点元素 发生重复，将重复的 下一个节点 移出链表；</p><p>node.next = node.next.next; //node.next  指向 重复的节点 的下一个节点，移除重复的节点。</p><p>(2)如果没有重复，继续往后遍历node= node.next;</p><p>最后返回head  // 上面的操作全部在node上，head 始终指向链表的头结点</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">deleteDuplicates</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">==</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "排序", 
                    "tagLink": "https://api.zhihu.com/topics/19572852"
                }, 
                {
                    "tag": "链表", 
                    "tagLink": "https://api.zhihu.com/topics/19649942"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47827214", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "爬梯子", 
            "content": "<p></p><p>假设你正在爬楼梯。需要 <i>n</i> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><b>注意：</b>给定 <i>n</i> 是一个正整数。</p><p><b>示例 1：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶</code></pre></div><p><b>示例 2：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶</code></pre></div><h2>思路</h2><p>可以这样思考，爬到N阶，可以从第N-1阶爬1步，也可以从第N-2阶爬2步。也就是说到N阶的方式有f(N-1)+f(N-2)种方式（因为要么1步，要么2步），后面一次类推。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">];</span>\n <span class=\"o\">}</span></code></pre></div><h2>动态规划</h2><p>现在来说说动态规划的基本思想 动态规划的关键是发现子问题和怎么记录子问题，以上面的例子说明 （１）对子问题可递归的求解，当n&gt;1时，f(n)=f(n-1)+f(n-2);否则，f(1)=f(0)=1; (2)这些子问题是有重叠的，即求解某个问题时，某些子问题可能需要求解多次。例如求解f(5)时，f(2)就被求解了３次。 在上面两个条件下，用动态规划的方式来求解会高效很多。就是把子问题记录下来，每个子问题只求解一次，从而提高了效率。</p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Google Interview", 
                    "tagLink": "https://api.zhihu.com/topics/19587350"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47827087", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 2, 
            "title": "合并两个有序数组", 
            "content": "<p></p><p>给定两个有序整数数组 <i>nums1</i> 和 <i>nums2</i>，将 <i>nums2</i> 合并到 <i>nums1</i> 中<i>，</i>使得 <i>num1</i> 成为一个有序数组。</p><p><b>说明:</b></p><ul><li>初始化 <i>nums1</i> 和 <i>nums2</i> 的元素数量分别为 <i>m</i> 和 <i>n</i>。</li><li>你可以假设 <i>nums1</i> 有足够的空间（空间大小大于或等于 <i>m + n</i>）来保存 <i>nums2</i> 中的元素。</li></ul><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]</code></pre></div><h2>思路</h2><p>先放到一个新的数组中，在排序。但是这样没有体现任何算法，这里考的不是快速排序等排序算法。关键是如何利用有序这个已知条件。可以这样想，假设两个源数组的长度不一样，那么假设其中短的数组用完了,即全部放入到新数组中去了,那么长数组中剩下的那一段就可以直接拿来放到新数组中去了。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SortTwoArray</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]&gt;=</span><span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]){</span>\n                <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">){</span>\n            <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">){</span>\n            <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47826918", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "x的平方根", 
            "content": "<p></p><p>实现 <code>int sqrt(int x)</code> 函数。</p><p>计算并返回 <i>x</i> 的平方根，其中 <i>x</i> 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 4\n输出: 2</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 8\n输出: 2\n说明: 8 的平方根是 2.82842..., \n     由于返回类型是整数，小数部分将被舍去。</code></pre></div><h2>思路</h2><p>二分搜索，开始区间是1，终止区间是x</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>  \n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sqrt</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">&lt;=</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n            <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">;</span>  \n        <span class=\"o\">}</span>  \n          \n        <span class=\"kt\">int</span> <span class=\"n\">begin</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>  \n        <span class=\"kt\">int</span> <span class=\"n\">end</span>   <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>  \n        <span class=\"kt\">int</span> <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>  \n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">begin</span><span class=\"o\">&lt;=</span><span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n            <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">begin</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">begin</span><span class=\"o\">)/</span><span class=\"n\">2</span><span class=\"o\">;</span>  \n            <span class=\"c1\">//不要写成middle*middle==x，会溢出  \n</span><span class=\"c1\"></span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">middle</span><span class=\"o\">==</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"n\">middle</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n                <span class=\"k\">return</span> <span class=\"n\">middle</span><span class=\"o\">;</span>  \n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>  \n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">middle</span><span class=\"o\">&lt;</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"n\">middle</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n                    <span class=\"n\">begin</span> <span class=\"o\">=</span> <span class=\"n\">middle</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>  \n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>  \n                    <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">middle</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>  \n                <span class=\"o\">}</span>  \n            <span class=\"o\">}</span>  \n              \n        <span class=\"o\">}</span>   \n        <span class=\"c1\">//结束条件end一定&lt;begin，所以返回end  \n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"n\">end</span><span class=\"o\">;</span>  \n    <span class=\"o\">}</span>  \n<span class=\"o\">}</span>  </code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47691806", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "最后一个单词的长度", 
            "content": "<p></p><p>给定一个仅包含大小写字母和空格 <code>&#39; &#39;</code> 的字符串，返回其最后一个单词的长度。</p><p>如果不存在最后一个单词，请返回 0 。</p><p><b>说明：</b>一个单词是指由字母组成，但不包含任何空格的字符串。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;Hello World&#34;\n输出: 5</code></pre></div><h2>思路</h2><p>以空格为分隔符拆开为字符串数组，取最后一个字符串的长度即可</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthOfLastWord</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">s</span><span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">trim</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">sArray</span><span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"n\">sArray</span><span class=\"o\">[</span><span class=\"n\">sArray</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">aString</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }, 
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47691724", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "最大子序和", 
            "content": "<p></p><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><b>示例:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [-2,1,-3,4,-1,2,1,-5,4],\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</code></pre></div><p><b>进阶:</b></p><p>如果你已经实现复杂度为 O(<i>n</i>) 的解法，尝试使用更为精妙的分治法求解。</p><h2>思路 1：动态规划</h2><p>求和，然后判断和是否小于0，因为只要前面的和小于0，那么后面的数加上前面的和就一定比自身小，所以又重新求和，并和之前的最大子序和比较，取最大值。</p><h2>代码 1：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxSubArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n        <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">maxn</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>  \n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++){</span>  \n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>  <span class=\"c1\">//如果前面的和小0，那么重新开始求和\n</span><span class=\"c1\"></span>            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>  \n            <span class=\"n\">maxn</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">Max</span><span class=\"o\">(</span><span class=\"n\">maxn</span><span class=\"o\">,</span> <span class=\"n\">ans</span><span class=\"o\">);</span>   \n        <span class=\"o\">}</span>  \n        <span class=\"k\">return</span> <span class=\"n\">maxn</span><span class=\"o\">;</span>  \n    <span class=\"o\">}</span>  \n<span class=\"o\">};</span></code></pre></div><h2>思路 2：分治</h2><p>刚开始觉得左右递归后，中间还有可能的答案，但是又不知道中间的部分怎么办；看了别人的代码后发现把中间的最大子序和也一起递归就行了。</p><h2>代码 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxSubArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n        <span class=\"k\">return</span> <span class=\"n\">divide</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>  \n\n    <span class=\"kt\">int</span> <span class=\"nf\">divide</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">],</span> <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]+</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]));</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">+</span><span class=\"n\">r</span><span class=\"o\">)&gt;&gt;</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lret</span> <span class=\"o\">=</span> <span class=\"n\">divide</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rret</span> <span class=\"o\">=</span> <span class=\"n\">divide</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">mret</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">mret</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">l</span> <span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"c1\">//    if(sum &lt; 0) sum = 0;\n</span><span class=\"c1\"></span>            <span class=\"n\">mret</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">Max</span><span class=\"o\">(</span><span class=\"n\">mret</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">mret</span><span class=\"o\">;</span>    <span class=\"c1\">//保存已经计算过的左边的最大子序和\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span> <span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"c1\">//    if(sum &lt; 0) sum = 0;\n</span><span class=\"c1\"></span>            <span class=\"n\">mret</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">Max</span><span class=\"o\">(</span><span class=\"n\">mret</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">lret</span><span class=\"o\">,</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">Max</span><span class=\"o\">(</span><span class=\"n\">rret</span><span class=\"o\">,</span> <span class=\"n\">mret</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">};</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47691625", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "加一", 
            "content": "<p></p><p>给定一个由<b>整数</b>组成的<b>非空</b>数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [1,2,3]\n输出: [1,2,4]\n解释: 输入数组表示数字 123。</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: [4,3,2,1]\n输出: [4,3,2,2]\n解释: 输入数组表示数字 4321。</code></pre></div><h2>思路</h2><p>将一个数字的每个位上的数字分别存到一个一维向量中，最高位在最开头，我们需要给这个数字加一，即在末尾数字加一，如果末尾数字是9，那么则会有进位问题，而如果前面位上的数字仍为9，则需要继续向前进位。具体算法如下：首先判断最后一位是否为9，若不是，直接加一返回，若是，则该位赋0，再继续查前一位，同样的方法，知道查完第一位。如果第一位原本为9，加一后会产生新的一位，那么最后要做的是，查运算完的第一位是否为0，如果是，则在最前头加一个1。</p><h2>代码 1:</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">plusOne</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">digits</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">9</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"o\">++</span><span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">return</span> <span class=\"n\">digits</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>代码 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">plusOne</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">digits</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">digits</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">carry</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">digits</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">carry</span><span class=\"o\">;</span>\n            <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">%</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">carry</span> <span class=\"o\">==</span> <span class=\"n\">0</span> <span class=\"o\">?</span> <span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47691026", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "二进制求和", 
            "content": "<p></p><p>给定两个二进制字符串，返回他们的和（用二进制表示）。</p><p>输入为<b>非空</b>字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: a = &#34;11&#34;, b = &#34;1&#34;\n输出: &#34;100&#34;</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: a = &#34;1010&#34;, b = &#34;1011&#34;\n输出: &#34;10101&#34;</code></pre></div><h2>思路</h2><p>根据二进制的相加规则，当前位相加再%2则为结果，进位则/2。</p><p>可以先建立一个StringBuilder类型的result，从后往前，将每一位相加，结果加入result，最后反转输出。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">addBinary</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">al</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">bl</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span><span class=\"o\">(</span> <span class=\"n\">al</span> <span class=\"o\">&gt;=</span><span class=\"n\">0</span>  <span class=\"o\">||</span> <span class=\"n\">bl</span> <span class=\"o\">&gt;=</span><span class=\"n\">0</span> <span class=\"o\">)</span>\n        <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">carry</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">al</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">al</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">);</span>\n                <span class=\"n\">al</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">bl</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">bl</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">);</span>\n                <span class=\"n\">bl</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">%</span><span class=\"n\">2</span><span class=\"o\">);</span>   <span class=\"c1\">//相加结果\n</span><span class=\"c1\"></span>            <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">/</span><span class=\"n\">2</span><span class=\"o\">;</span>         <span class=\"c1\">//进位，如果是1那么carry=0，如果是2则要进位给下面一位+1\n</span><span class=\"c1\"></span>        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">carry</span> <span class=\"o\">!=</span><span class=\"n\">0</span> <span class=\"o\">)</span>              <span class=\"c1\">//都相加完了，还要进位的情况\n</span><span class=\"c1\"></span>            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">reverse</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>  <span class=\"c1\">//先反转，再输出\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "二进制", 
                    "tagLink": "https://api.zhihu.com/topics/19586916"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47690879", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "报数", 
            "content": "<p></p><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221</code></pre></div><p><code>1</code> 被读作  <code>&#34;one 1&#34;</code>  (<code>&#34;一个一&#34;</code>) , 即 <code>11</code>。 <code>11</code> 被读作 <code>&#34;two 1s&#34;</code> (<code>&#34;两个一&#34;</code>）, 即 <code>21</code>。 <code>21</code> 被读作 <code>&#34;one 2&#34;</code>,  &#34;<code>one 1&#34;</code> （<code>&#34;一个二&#34;</code> ,  <code>&#34;一个一&#34;</code>) , 即 <code>1211</code>。</p><p>给定一个正整数 <i>n</i>（1 ≤ <i>n</i> ≤ 30），输出报数序列的第 <i>n</i> 项。</p><p>注意：整数顺序将表示为一个字符串。</p><p><b>示例 1:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 1\n输出: &#34;1&#34;</code></pre></div><p><b>示例 2:</b></p><div class=\"highlight\"><pre><code class=\"language-text\">输入: 4\n输出: &#34;1211&#34;</code></pre></div><h2>思路</h2><p>题目本身不难，而且题目的命名也变相的给了提示。数数并说。搞清楚何时<b>并说</b>何时<b>不并说</b>就可以了。</p><p>根据题目的条件可以知道：</p><p>并说：超过1个相同的数字连在一起时，并说，也就是”几个几“ 不并说：前后数字不同时，不并说，需要单说，也就是”一个几“</p><p>综上，需要我们把数字的<b>值(value)</b>与<b>连续位数(count)</b>记录下来，当数字发生变化时追加连续位数与值到结果中即可。</p><h2>代码</h2><p>```　java public String countAndSay(int n) {</p><div class=\"highlight\"><pre><code class=\"language-text\">if (n &lt;= 0) return &#34;-1&#34;;\n\nString result = &#34;1&#34;;\nfor (int i = 1; i &lt; n; i++) {\n    StringBuilder builder = new StringBuilder();\n    int index = 0;\n    while (index &lt; result.length()) {\n        // 记录值\n        char val = result.charAt(index);\n        // 记录连续位数\n        int count = 0;\n\n        // 查找连续位数，碰到不相同的数字时停止。\n        while (index &lt; result.length() &amp;&amp; result.charAt(index) == val) {\n            index++;\n            count++;\n        }\n\n        // 追加连续位数到结果中\n        builder.append(String.valueOf(count));\n        // 追加连续位数的值到结果中\n        builder.append(val);\n    }\n    result = builder.toString();\n}\nreturn result;</code></pre></div><p>} ```</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47598011", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "有限的括号", 
            "content": "<h2>有限的括号</h2><h2>题目</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><h2>示例 1：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;()&#34;\n输出: true</code></pre></div><h2>示例 2：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;()[]{}&#34;\n输出: true</code></pre></div><h2>示例 3：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;(]&#34;\n输出: false</code></pre></div><h2>示例 4：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;([)]&#34;\n输出: false</code></pre></div><h2>示例 5：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;{[]}&#34;\n输出: true</code></pre></div><h2>思路 1:</h2><p>一种方式是使用链表记录遇到过的括号，每次找到反括号的时候，检查最后添加的括号是否与当前找到的反括号匹配。</p><h2>代码 1:</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValid</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">&gt;();</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"sc\">&#39;)&#39;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;[&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"sc\">&#39;]&#39;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;{&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"sc\">&#39;}&#39;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路 2：</h2><p>看了讨论区后还发现了另一种解题方法，即使用String类下面的replace方法，不断消除掉相邻的正反括号，最后无法消除时，查看字符串内是否还有残留字符。这种方法实现起来比较简单，但效率比上面写的两种方法低很多。</p><h2>代码 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValid</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n        <span class=\"n\">String</span> <span class=\"n\">stemp</span><span class=\"o\">;</span>\n        <span class=\"k\">do</span> <span class=\"o\">{</span>\n            <span class=\"n\">stemp</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">;</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&#34;()&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&#34;[]&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&#34;{}&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">stemp</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">));</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47597816", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "移除元素", 
            "content": "<h2>移除元素</h2><p>给定一个数组 <i>nums</i> 和一个值 <i>val</i>，你需要<b>原地</b>移除所有数值等于 <i>val</i> 的元素，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<b>原地修改输入数组</b>并在使用 O(1) 额外空间的条件下完成。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><h2>示例 1：</h2><div class=\"highlight\"><pre><code class=\"language-text\">给定 nums = [3,2,2,3], val = 3,\n\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n\n你不需要考虑数组中超出新长度后面的元素。</code></pre></div><h2>示例 2：</h2><div class=\"highlight\"><pre><code class=\"language-text\">给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素。</code></pre></div><h2>说明：</h2><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<b>“引用”</b>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\n</span><span class=\"c1\"></span><span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">removeElement</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 在函数里修改输入数组对于调用者是可见的。\n</span><span class=\"c1\">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路：</h2><p>给定一个数组和一个值，删除该值的所有实例并返回新的长度。 元素的顺序可以改变。你留下的新长度并不重要。</p><h2>代码：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">removeElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tempLen</span> <span class=\"o\">=</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span><span class=\"c1\">//每个元素需要向前转移的距离\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"o\">){</span>\n                <span class=\"n\">step</span><span class=\"o\">++;</span><span class=\"c1\">//若相等步长+1\n</span><span class=\"c1\"></span>                <span class=\"n\">tempLen</span><span class=\"o\">--;</span><span class=\"c1\">//每一个相等的元素长度减少1\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span><span class=\"c1\">//元素前移n个步长\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">tempLen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47597642", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "实现strStr()", 
            "content": "<p>实现 <a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/strstr/811469\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">strStr()</a> 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  <b>-1</b>。</p><h2>示例 1：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nl\">输入:</span> <span class=\"n\">haystack</span> <span class=\"o\">=</span> <span class=\"s\">&#34;hello&#34;</span><span class=\"o\">,</span> <span class=\"n\">needle</span> <span class=\"o\">=</span> <span class=\"s\">&#34;ll&#34;</span><span class=\"nl\">\n</span><span class=\"nl\">输出:</span> <span class=\"n\">2</span></code></pre></div><h2>示例 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nl\">输入:</span> <span class=\"n\">haystack</span> <span class=\"o\">=</span> <span class=\"s\">&#34;aaaaa&#34;</span><span class=\"o\">,</span> <span class=\"n\">needle</span> <span class=\"o\">=</span> <span class=\"s\">&#34;bba&#34;</span><span class=\"nl\">\n</span><span class=\"nl\">输出:</span> <span class=\"o\">-</span><span class=\"n\">1</span></code></pre></div><h2>说明：</h2><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与C语言的 <a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/strstr/811469\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">strstr()</a> 以及 Java的 <a href=\"https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/7/docs/api/java/lang/String.html%23indexOf%28java.lang.String%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">indexOf()</a> 定义相符。</p><h2>思路 1：</h2><p>本题有很多高级算法可以在O(N)时间内解决问题，然而这已经超出面试的范畴。本题在面试中出现的作用就是考察基本的编程素养，以及边界条件的考虑。我们用暴力法即可。</p><h2>代码 1：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">strStr</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">haystack</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">needle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 如果剩下的字母不够needle长度就停止遍历\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&lt;=</span> <span class=\"n\">haystack</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()){</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i1</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">i2</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">i2</span> <span class=\"o\">&lt;</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">haystack</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i1</span><span class=\"o\">)==</span><span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i2</span><span class=\"o\">)){</span>\n                <span class=\"n\">i1</span><span class=\"o\">++;</span>\n                <span class=\"n\">i2</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">i2</span> <span class=\"o\">==</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"k\">return</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n            <span class=\"n\">start</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路 2：</h2><p>KMP算法是较为高级的算法。它使用一个next数组，这个数组记录了模式串needle自身的前缀和后缀的重复情况。同样是双指针进行匹配，当失配时可以根据这个数组找到应该将模式串向后位移多少位，避免一些重复的比较。</p><h2>代码 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">strStr</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">haystack</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">needle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n        <span class=\"c1\">// 得到next数组\n</span><span class=\"c1\"></span>        <span class=\"n\">getNextArr</span><span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">needle</span><span class=\"o\">);</span>\n        <span class=\"c1\">// i是匹配串haystack的指针，j是模式串needle的指针\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 双指针开始匹配\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">haystack</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()){</span>\n            <span class=\"c1\">// 如果j=-1意味着刚刚失配过，下标+1后，下一轮就可以开始匹配各自的第一个了\n</span><span class=\"c1\"></span>            <span class=\"c1\">// 如果指向的字母相同，则下一轮匹配各自的下一个\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">1</span> <span class=\"o\">||</span> <span class=\"n\">haystack</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)){</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n            <span class=\"c1\">// 如果失配，则将更新j为next[j]\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">?</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">getNextArr</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">needle</span><span class=\"o\">){</span>\n        <span class=\"c1\">// k是前缀中相同部分的末尾，同时也是相同部分的长度，因为长度等于k-0。\n</span><span class=\"c1\"></span>        <span class=\"c1\">// j是后缀的末尾，即后缀相同部分的末尾 \n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"c1\">// 如果k=-1，说明刚刚失配了，则重新开始计算前缀和后缀相同的长度\n</span><span class=\"c1\"></span>            <span class=\"c1\">// 如果两个字符相等，则在上次前缀和后缀相同的长度加1就行了\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">1</span> <span class=\"o\">||</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">needle</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)){</span>\n                <span class=\"n\">k</span><span class=\"o\">++;</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n                <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 否则，前缀长度缩短为next[k]\n</span><span class=\"c1\"></span>                <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "函数", 
                    "tagLink": "https://api.zhihu.com/topics/19599298"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47597599", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "删除排序数组中的重复项", 
            "content": "<p></p><p>给定一个排序数组，你需要在<b>原地</b>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<b>原地修改输入数组</b>并在使用 O(1) 额外空间的条件下完成。</p><h2>示例 1：</h2><div class=\"highlight\"><pre><code class=\"language-text\">给定数组 nums = [1,1,2], \n\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \n\n你不需要考虑数组中超出新长度后面的元素。</code></pre></div><h2>示例 2：</h2><div class=\"highlight\"><pre><code class=\"language-text\">给定 nums = [0,0,1,1,1,2,2,3,3,4],\n\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n\n你不需要考虑数组中超出新长度后面的元素。</code></pre></div><h2>说明：</h2><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<b>“引用”</b>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\n</span><span class=\"c1\"></span><span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">removeDuplicates</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 在函数里修改输入数组对于调用者是可见的。\n</span><span class=\"c1\">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路：</h2><p>这道题的思路就是采用两个标记点 number 和 i ，number记录不重复元素的位置，i从number的下一个开始遍历数组，如果i位置的数字等于number位置的数字，说明该数字重复出现，不予处理；如果i位置的数字不等于number位置的数字，说明该数字没有重复，需要放到l的下一位置，并使number加1。</p><h2>代码：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">removeDuplicates</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//判断无输入\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span><span class=\"c1\">//标记计数\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">number</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">number</span><span class=\"o\">++;</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">number</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">number</span><span class=\"o\">+=</span><span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"c1\">//标记+1即为数字个数\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"n\">number</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }, 
                {
                    "tag": "排序", 
                    "tagLink": "https://api.zhihu.com/topics/19572852"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47597519", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 1, 
            "title": "合并两个有序链表", 
            "content": "<p></p><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><h2>示例：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</code></pre></div><h2>思路</h2><p>题目是给两个单链表，里面的数值都是有序的，现在要求他们合并成一个有序链表。</p><p>这道题的做法就是，从两个单链表的头结点开始分别设立两个指针p，q，和一个新的临时头结点prehead（结果），同时每次比较的时候，选择p q当中最小的一个，修改指针到prehead那条链表的末尾，然后移动指针。。当p或q有一个到末尾后，则将剩下的那一部分直接链入最终结果当中</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-text\">public class Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode flag = new ListNode(0);\n        ListNode firstflag = flag;//标记第一个节点位置。\n        while (l1 != null &amp;&amp; l2 != null) {//★\n            if(l1.val &lt; l2.val){\n                flag.next = l1;\n                l1 = l1.next;\n            }else {\n                flag.next = l2;\n                l2 = l2.next;\n            }\n            flag = flag.next;\n        }\n        flag.next = l1 != null ? l1 : l2; \n        return firstflag.next;\n    }\n}</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "链表", 
                    "tagLink": "https://api.zhihu.com/topics/19649942"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47510186", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 2, 
            "title": "最长公共前缀", 
            "content": "<h2>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&#34;&#34;</code>。</p><h2>示例 1：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: [&#34;flower&#34;,&#34;flow&#34;,&#34;flight&#34;]\n输出: &#34;fl&#34;</code></pre></div><h2>示例 2:</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: [&#34;dog&#34;,&#34;racecar&#34;,&#34;car&#34;]\n输出: &#34;&#34;\n解释: 输入不存在公共前缀。</code></pre></div><h2>思路 1：横向扫描法</h2><p>该算法需要遍历字符串数组[S1...Sn][S1...Sn]，在第i次遍历过程中查找出LCP(S1...Si)的最长公共前缀，当LCP(S1...Si)查找出来的最长公共前缀是空串时，算法结束。否则，经过n次遍历，该算法就可以找出LCP(S1...Sn)的最长公共前缀。</p><h2>代码 1：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">];</span>\n      <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 找出S1与Si间的最长公共字符串\n</span><span class=\"c1\"></span>        <span class=\"c1\">// indexOf：当存在串时返回&gt;0；不存串时返回-1\n</span><span class=\"c1\"></span>        <span class=\"c1\">// 只要不存在串，就缩减串的规模，再进行查找\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">prefix</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"k\">return</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">prefix</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路 2： 竖向扫描法</h2><p>若是一个很短的串在数组尾部。在上面的方法中，仍需要比较<b>S</b>次。一种优化的方法是按照竖向扫描。在移动到下一列之前，从上到下比较同一列的字符。</p><h2>代码 2:</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 获得第一行i列的字符\n</span><span class=\"c1\"></span>            <span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">].</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 依次比较剩余行相同列的字符\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\n                <span class=\"c1\">// 若j行i列的字符与第一行i列的字符不同，代表最长公共前缀判定结束\n</span><span class=\"c1\"></span>                <span class=\"c1\">// 若第一行新i列已经超出了剩余行的最大列出，也代表最长公共前缀判定结束\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">].</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">].</span><span class=\"na\">subhttps</span><span class=\"o\">:</span><span class=\"c1\">//leetcode.com/problems/longest-common-prefix/solution/string(0, i);\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": [
                {
                    "userName": "石嘉楠", 
                    "userLink": "https://www.zhihu.com/people/0a2e1ea145ec018f8be1ed79a0bf6d20", 
                    "content": "<p>竖向扫描法最后 return 的时候应当是：<i><code>return strs[0].substring(0, i);</code></i> </p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47510044", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "罗马数字转整数", 
            "content": "<h2>题目</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">字符</span>          <span class=\"n\">数值</span>\n<span class=\"n\">I</span>             <span class=\"n\">1</span>\n<span class=\"n\">V</span>             <span class=\"n\">5</span>\n<span class=\"n\">X</span>             <span class=\"n\">10</span>\n<span class=\"n\">L</span>             <span class=\"n\">50</span>\n<span class=\"n\">C</span>             <span class=\"n\">100</span>\n<span class=\"n\">D</span>             <span class=\"n\">500</span>\n<span class=\"n\">M</span>             <span class=\"n\">1000</span></code></pre></div><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><h2>示例 1：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;III&#34;\n输出: 3</code></pre></div><h2>示例 2：</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nl\">输入:</span> <span class=\"s\">&#34;IV&#34;</span><span class=\"nl\">\n</span><span class=\"nl\">输出:</span> <span class=\"n\">4</span></code></pre></div><h2>示例 3：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;IX&#34;\n输出: 9</code></pre></div><h2>示例 4：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;LVIII&#34;\n输出: 58\n解释: L = 50, V= 5, III = 3.</code></pre></div><h2>示例 5：</h2><div class=\"highlight\"><pre><code class=\"language-text\">输入: &#34;MCMXCIV&#34;\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.</code></pre></div><h2>思路</h2><ul><li>先初始化一个长度和字符个数相等的整形数组</li><li>遍历每一个字符解析到对应的数值</li><li>重新遍历一次，如果前面的比后面的小，就将前面的和减去后面的值否则相加</li></ul><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">romanToInt</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//存放每个罗马字母对应的数值\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;M&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1000</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;D&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">500</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">100</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;L&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">50</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;X&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;V&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">5</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">&#39;I&#39;</span><span class=\"o\">:</span>\n                    <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span><span class=\"nl\">\n</span><span class=\"nl\">                default:</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "字符", 
                    "tagLink": "https://api.zhihu.com/topics/19833387"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "Google Interview", 
                    "tagLink": "https://api.zhihu.com/topics/19587350"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47509890", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "两数之和", 
            "content": "<h2>题目</h2><p>  给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p><h2>示例</h2><div class=\"highlight\"><pre><code class=\"language-text\">给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]</code></pre></div><h2>思路</h2><p>这道题给了我们一个数组，还有一个目标数target，让我们找到两个数字，使其和为target，乍一看就感觉可以用暴力搜索，但是猜到OJ肯定不会允许用暴力搜索这么简单的方法，于是去试了一下，果然是Time Limit Exceeded，这个算法的时间复杂度是O(n^2)。那么只能想个O(n)的算法来实现，由于暴力搜索的方法是遍历所有的两个数字的组合，然后算其和，这样虽然节省了空间，但是时间复杂度高。一般来说，我们为了提高时间的复杂度，需要用空间来换，这算是一个trade off吧，我们只想用线性的时间复杂度来解决问题，那么就是说只能遍历一个数字，那么另一个数字呢，我们可以事先将其存储起来，使用一个HashMap，来建立数字和其坐标位置之间的映射，我们都知道HashMap是常数级的查找效率，这样，我们在遍历数组的时候，用target减去遍历到的数字，就是另一个需要的数字了，直接在HashMap中查找其是否存在即可，注意要判断查找到的数字不是第一个数字，比如target是4，遍历到了一个2，那么另外一个2不能是之前那个2，整个实现步骤为：先遍历一遍数组，建立HashMap映射，然后再遍历一遍，开始查找，找到则记录index。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">twoSum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">target</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">twoSum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": [
                {
                    "userName": "Icarus", 
                    "userLink": "https://www.zhihu.com/people/4d41c6ed6ca260db600a08ab3e7d1183", 
                    "content": "头尾收缩就可以了", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47509671", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "回文数", 
            "content": "<h2>题目</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右到左）读都是一样的整数。</p><h2>示例 1：</h2><p>输入：121</p><p>输出：true</p><h2>示例 2：</h2><p>输入：-121</p><p>输出：false</p><p>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><h2>示例 3：</h2><p>输入：10</p><p>输出：false</p><p>解释：从右向左读, 为 01 。因此它不是一个回文数。</p><h2>思路 1：反转比较法</h2><p>回文数有一个特性，就是它翻转后值是一样的。所以我们可以先将其反转，然后比较反转数和原数是否相等。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPalindrome</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">long</span> <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">&lt;</span><span class=\"n\">0</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">&gt;</span><span class=\"n\">0</span><span class=\"o\">){</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">*=</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">+=</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">original</span> <span class=\"o\">==</span> <span class=\"n\">reverse</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>思路2：诸位比较法</h2><p>反转比较有可能会溢出，但我们遍历每一位的时候其实并不用保存上一位的信息，只要和当前对应位相等就行了。所以我们可以遍历一遍先算出数的长度，再遍历一遍同时对比前后的对应位。</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPalindrome</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">0</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 计算当前数的位数，个位数不用计算，已经默认为1\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">9</span><span class=\"o\">){</span>\n            <span class=\"n\">digits</span> <span class=\"o\">*=</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 逐位比较\n</span><span class=\"c1\"></span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">){</span>\n            <span class=\"kt\">int</span> <span class=\"n\">msd</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">digits</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">lsd</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">msd</span> <span class=\"o\">!=</span> <span class=\"n\">lsd</span><span class=\"o\">){</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// 去除最高位和最低位\n</span><span class=\"c1\"></span>            <span class=\"n\">x</span> <span class=\"o\">-=</span> <span class=\"n\">msd</span> <span class=\"o\">*</span> <span class=\"n\">digits</span><span class=\"o\">;</span>\n            <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">digits</span> <span class=\"o\">/=</span> <span class=\"n\">100</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47509362", 
            "userName": "DailyProgrammer", 
            "userLink": "https://www.zhihu.com/people/adf108111034ebb6c3209ef903964269", 
            "upvote": 0, 
            "title": "翻转整数", 
            "content": "<h2>题目</h2><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p><h2>示例 1：</h2><p>$$ 输入: 123 输出: 321 $$</p><h2>示例 2：</h2><p>$$ 输入: -123 输出: -321 $$</p><h2>示例 3：</h2><p>$$ 输入: 120 输出: 21 $$</p><h2>注意</h2><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是<b>[−2^31,  2^31 − 1]</b>。根据这个假设，如果反转后的整数溢出，则返回 0。</p><h2>思路 ：求余数</h2><p>利用求余法一步一步反转整数。</p><p>在这两个方法中，都要注意的问题是：数字在反转过程中可能会发生<b>溢出</b>问题</p><h2>代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">reverse</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">*</span> <span class=\"n\">10</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">10</span><span class=\"o\">;</span> <span class=\"c1\">// 每一次都在原来结果的基础上变大10倍，再加上余数\n</span><span class=\"c1\"></span>            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">10</span><span class=\"o\">;</span> <span class=\"c1\">// 对x不停除10\n</span><span class=\"c1\"></span>        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/everydayCoding"
}
