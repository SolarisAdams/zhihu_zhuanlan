{
    "title": "汽车ECU软件设计", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/zhang-wei-30-82", 
        "https://www.zhihu.com/people/henry-35-66-85", 
        "https://www.zhihu.com/people/liu-er-tian", 
        "https://www.zhihu.com/people/xjsjms", 
        "https://www.zhihu.com/people/yue-wu-97-72", 
        "https://www.zhihu.com/people/mu-ying-40-32", 
        "https://www.zhihu.com/people/b-han", 
        "https://www.zhihu.com/people/han-yong-jie-46-81", 
        "https://www.zhihu.com/people/fahon-82", 
        "https://www.zhihu.com/people/felix-25-33", 
        "https://www.zhihu.com/people/freehou", 
        "https://www.zhihu.com/people/du-gu-wu-di-83-40", 
        "https://www.zhihu.com/people/ha-ha-40-2-38", 
        "https://www.zhihu.com/people/tan-chao-82-2", 
        "https://www.zhihu.com/people/yang-qi-gang-34", 
        "https://www.zhihu.com/people/si-ci-yuan-gu-zhe", 
        "https://www.zhihu.com/people/shan-ding-ye-ren", 
        "https://www.zhihu.com/people/dianye", 
        "https://www.zhihu.com/people/electrlife", 
        "https://www.zhihu.com/people/he-xi-lao-qiang-43", 
        "https://www.zhihu.com/people/ding-rong-hui", 
        "https://www.zhihu.com/people/stephen-28-72", 
        "https://www.zhihu.com/people/zhou-dazhi", 
        "https://www.zhihu.com/people/zhao-yang-67-9", 
        "https://www.zhihu.com/people/shang-cheng-zhi-11", 
        "https://www.zhihu.com/people/cha-xiao-hui-30-57", 
        "https://www.zhihu.com/people/faihung", 
        "https://www.zhihu.com/people/zhi-zhi-69-6", 
        "https://www.zhihu.com/people/yetingxiao", 
        "https://www.zhihu.com/people/song-ji-84-1", 
        "https://www.zhihu.com/people/mai-ke-feng-58-84", 
        "https://www.zhihu.com/people/wang-zhen-89-69", 
        "https://www.zhihu.com/people/lijuqqkiko", 
        "https://www.zhihu.com/people/hao-qi-hai-si-mao-46-61", 
        "https://www.zhihu.com/people/lin-lian-lian-7", 
        "https://www.zhihu.com/people/yao-xing-34-49", 
        "https://www.zhihu.com/people/zxs-95-52", 
        "https://www.zhihu.com/people/lan-se-gu-tou-92", 
        "https://www.zhihu.com/people/wang-peng-93-55", 
        "https://www.zhihu.com/people/li-jian-36-88", 
        "https://www.zhihu.com/people/zhan-mu-si-91", 
        "https://www.zhihu.com/people/will-48-78", 
        "https://www.zhihu.com/people/ethan-15-18", 
        "https://www.zhihu.com/people/shi-kong-lu-ren-6", 
        "https://www.zhihu.com/people/bran.zhang", 
        "https://www.zhihu.com/people/clockhunter", 
        "https://www.zhihu.com/people/chang-li-bo-94", 
        "https://www.zhihu.com/people/jeff-77-10", 
        "https://www.zhihu.com/people/atiqian", 
        "https://www.zhihu.com/people/stephen-wang-29", 
        "https://www.zhihu.com/people/ni-gou-38-11", 
        "https://www.zhihu.com/people/tuo-ba-tian-qing", 
        "https://www.zhihu.com/people/xixi-85-15", 
        "https://www.zhihu.com/people/gan-zhe-62", 
        "https://www.zhihu.com/people/yu-michael-21", 
        "https://www.zhihu.com/people/curry-89-76", 
        "https://www.zhihu.com/people/jiang-qi-86", 
        "https://www.zhihu.com/people/shengscript", 
        "https://www.zhihu.com/people/xiong-xiong-15-5-80", 
        "https://www.zhihu.com/people/gogo-91-76", 
        "https://www.zhihu.com/people/md0-15", 
        "https://www.zhihu.com/people/liu-xu-yang-20", 
        "https://www.zhihu.com/people/zuoguangsheng", 
        "https://www.zhihu.com/people/sinojoy", 
        "https://www.zhihu.com/people/zhou-bo-30-50", 
        "https://www.zhihu.com/people/wen-ma-14-22", 
        "https://www.zhihu.com/people/openes", 
        "https://www.zhihu.com/people/tie-xiao-tie-93", 
        "https://www.zhihu.com/people/xiao-ji-ji-31-72", 
        "https://www.zhihu.com/people/lao-li-71-65", 
        "https://www.zhihu.com/people/shi-an-yan-29-2-73", 
        "https://www.zhihu.com/people/huang-yan-wei-12", 
        "https://www.zhihu.com/people/xia-xiao-xin-25", 
        "https://www.zhihu.com/people/wei-lian-mu-77-97", 
        "https://www.zhihu.com/people/tian-ya-gong-ci-shi-15", 
        "https://www.zhihu.com/people/slong-yao-s", 
        "https://www.zhihu.com/people/shou-gui-xun", 
        "https://www.zhihu.com/people/wu-ming-20-37-89", 
        "https://www.zhihu.com/people/zzz-21-27", 
        "https://www.zhihu.com/people/sui-yue-wu-hen-51", 
        "https://www.zhihu.com/people/qing-feng-96-40-22", 
        "https://www.zhihu.com/people/liu-zhi-dong", 
        "https://www.zhihu.com/people/simon-41-67-26", 
        "https://www.zhihu.com/people/wang-jing-liang-63", 
        "https://www.zhihu.com/people/pan-pan-1-23-42", 
        "https://www.zhihu.com/people/che-liang-lin", 
        "https://www.zhihu.com/people/he-zheng-e"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/89880919", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 3, 
            "title": "软件定义汽车", 
            "content": "<p>软件定义汽车(Software Defined Vehicles，SDV)无疑就是软件在车辆中扮演的角色逐步放大，一方面是汽车电子占整车成本逐渐提高（如图1所示），另一方面随着车联网、自动驾驶技术的逐步发展，以及国家政策的逐渐推进<b>(</b>2017年4月，工信部联合国家发改委、科技部发布的《汽车产业中长期发划》指出，未来我国汽车强国建设路线上以智能网联汽车为重要突破口，引领整个产业转型升级。2018年1月国家发改委印发的《智能汽车创新发展战略》（征求意见稿）提出，到2020年智能汽车新车占比达到50%.2019年9月国务院发布《交通强国建设纲要》，指示加强智能网联汽车（智能汽车、自动驾驶、 车路协同） 研发，形成自主可控完整的产业链。<b>)</b>，车辆除了本身的驾驶属性外，服务属性逐渐增加，比如通过车联网实现内容的推送，通过OTA实现车辆的个性化定制等。根据摩根斯坦利研究中心的调查结果，到2020年，车辆的硬件价值占车身本来价格的比例为40%，软件占40%，车辆提供的内容占20%价值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6a7c99821b1dfce7a952d1c7f4127ec8_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"634\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-6a7c99821b1dfce7a952d1c7f4127ec8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;634&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"634\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-6a7c99821b1dfce7a952d1c7f4127ec8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6a7c99821b1dfce7a952d1c7f4127ec8_b.jpg\"/><figcaption>图1 汽车电子占汽车总成本比例</figcaption></figure><p>另外随着目前车用主控芯片的运算能力、主频、核心数的提高，以及ECU过多导致布线、升级扩展困难，整车电子电气架构逐步往集中式控制发展，这样既可以减少ECU的数量和整车线束的长度，也为后续OTA的软件管理提供便利。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e98c129bb8e8e0380a9fba2147e24011_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"451\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e98c129bb8e8e0380a9fba2147e24011_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;451&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"451\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e98c129bb8e8e0380a9fba2147e24011_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e98c129bb8e8e0380a9fba2147e24011_b.jpg\"/><figcaption>图2 博世对整车电子电器架构的阶段定义</figcaption></figure><p>以博世提出的的整车电子电器架构战略图为例(如图2所示)，它将整车电子电器架构发展分为6个阶段：模块化阶段、功能集成阶段、中央域控制器阶段、跨域融合阶段、车载中央电脑和区域控制器阶段、车载云计算阶段，目前来说，大多数厂商开始从模块化向功能集成阶段迈进，比如常见的将DCU、DCDC、OBC集成的多合一系统(如图3所示)等，而且绝大部分没有量产。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-3e87c5a7ea05e25d9c385ea88909d7ca_b.jpg\" data-size=\"small\" data-rawwidth=\"812\" data-rawheight=\"746\" class=\"origin_image zh-lightbox-thumb\" width=\"812\" data-original=\"https://pic3.zhimg.com/v2-3e87c5a7ea05e25d9c385ea88909d7ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;812&#39; height=&#39;746&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"812\" data-rawheight=\"746\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"812\" data-original=\"https://pic3.zhimg.com/v2-3e87c5a7ea05e25d9c385ea88909d7ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3e87c5a7ea05e25d9c385ea88909d7ca_b.jpg\"/><figcaption>图3 多合一示意图</figcaption></figure><p>而目前特斯拉model3的电子电器架构已经达到了车载中央电脑和区域控制器阶段，整个架构只有三大部分，分别是自动驾驶及娱乐控制模块(Autopilot&amp;Infotainment Control Module)、右车身控制器(BCM RH)、左车身控制器(BCM LH)。<br/>其中自动驾驶及娱乐控制模块运行的是Linux OS，对娱乐导航、autopilot、ADAS的任务进行统一的管理。右车身控制器BCM RH主要集成了自动泊车、热管理、扭矩控制等功能。左车身控制模块主要负责灯光控制等。</p><p>奥迪在A8、A7上将所有驾驶辅助系统相关的ECU集中于一个域控制器：中央驾驶辅助控制单元(zFAS)。zFAS有4个核心元件：Mobileye的EyeQ3，用于负责交通信号识别、行人检测、碰撞报警、车道识别和光线探测，英特尔的CycloneV负责目标识别融合、地图融合、自动泊车、预刹车、激光雷达传感器数据处理，英飞凌的AurixTC297负责检测辅助驾驶系统的运行状态和各ECU之间的通信，以及负责矩阵大灯；英伟达的Tegra K1负责驾驶员状态监控、360度全景影像以及所有与凸显相关的计算。</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1174298324521267200\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"Audi A8的zFAS系统介绍\" data-poster=\"https://pic1.zhimg.com/v2-d0ecf998203604b2416469f3eea43894.jpg\" data-lens-id=\"1174298324521267200\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-d0ecf998203604b2416469f3eea43894.jpg\"/><span class=\"content\"><span class=\"title\">Audi A8的zFAS系统介绍<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1174298324521267200</span></span></a><p>华为在这方面也有布局，华为对整车电子电器架构(如图4所示)分为智能座舱、整车控制、智能驾驶，其中整车控制主要通过华为自主的车用麒麟芯片集成BMS、OBC、VCU、DCU等功能。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bf037f9a097db9fef0325d5a890d50f0_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-bf037f9a097db9fef0325d5a890d50f0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;428&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-bf037f9a097db9fef0325d5a890d50f0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bf037f9a097db9fef0325d5a890d50f0_b.jpg\"/><figcaption>图4 华为整车电子电器架构</figcaption></figure><p>最后，聊聊自己的看法：</p><p>1、目前主机厂的部分ECU是直接从供应商采购，要自主实现相近功能的ECU进行功能集成，比如讲DCU、DCDC集成至一个控制，这个目前难度较大。另外从成本来看，不会有多大的成本优势。</p><p>2、目前主机厂的软件工程师偏少，就新能源三大件来说，主机厂仅负责算法和策略软件的开发和软件集成，底层基础软件（BSW）基本是委外开发。从当前的趋势来看，后续主机厂会逐步形成自己的软件团队，自主开发ASW和BSW，或者是与供应商合作白盒开发，逐步建立自己的开发能力。</p><p>3、目前传统主机厂基本是各个部件有自己的软件开发团队，现在随着底层软件的标准化，以及功能集成的需求，应该会形成一个统一的软件开发软件，提高效率，减少资源浪费和降低沟通成本。</p><p>公众号：<b>汽车ECU开发</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;525&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483930%26idx%3D1%26sn%3Dd695ea48ae8657369941a4855068bad6%26chksm%3Dcf9c4b93f8ebc285289de3531b753179d82b0bb95c6bea4d75add629f82f27bb1badaf3587b1%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-e8b79064211979f1220f6850848c5772_180x120.jpg\" data-image-width=\"598\" data-image-height=\"254\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">XCP协议介绍</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483915%26idx%3D1%26sn%3D3503e6e436734182d9c4a5fa3218d0ae%26chksm%3Dcf9c4b82f8ebc2940c04c32bfcefa4629b0f7e67af763609ba4a1cda44c7763dee7910309f12%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-eff3accbe7a4d62697d650e824103d92_180x120.jpg\" data-image-width=\"543\" data-image-height=\"230\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">汽车OTA介绍</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483851%26idx%3D1%26sn%3D3cc713016f2c02232e684b90bfeb5a5b%26chksm%3Dcf9c4842f8ebc154675a863c734c116c59d3fa25fc8d6d6daeeb14afb4d6f980199467dbd936%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b7dee37c445970c11404db547d6e7212_180x120.jpg\" data-image-width=\"1114\" data-image-height=\"476\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CAN总线错误处理机制</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483902%26idx%3D1%26sn%3D7cefa2a1e14cc64a8e511cf33895eb18%26chksm%3Dcf9c4877f8ebc1614116fe95d03a1adc3c705f44b2a444632c20ec68414522988e21dfef11aa%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-71f00b0ce3d3665c6cb516e36b49f1e6_180x120.jpg\" data-image-width=\"646\" data-image-height=\"276\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于CAN的刷写流程</a><p></p>", 
            "topic": [
                {
                    "tag": "汽车行业", 
                    "tagLink": "https://api.zhihu.com/topics/19585985"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "汽车设计", 
                    "tagLink": "https://api.zhihu.com/topics/19593808"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89844935", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "AUTOSAR Interface", 
            "content": "<p>公众号：<b>汽车ECU开发</b></p><p>随着汽车电子的更新速度加快，代码的复杂度逐渐增加，为了方便硬件平台的升级，减少开发周期。AUTOSAR架构中对各功能模块进行了封装，对模块与模块之间的接口进行了标准化。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-672f86558e701c4a762c9905760a6cf9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-672f86558e701c4a762c9905760a6cf9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;585&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-672f86558e701c4a762c9905760a6cf9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-672f86558e701c4a762c9905760a6cf9_b.jpg\"/></figure><p>AUTOSAR架构中有三种不同的接口类型，分别是AUTOSAR接口，标准AUTOSAR接口(AUTOSAR接口)，标准AUTOSAR接口(Standardized AUTOSAR Interface)，标准接口(Standardized Interface)。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fe4ab98385cd111666e421ade90ca3fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-fe4ab98385cd111666e421ade90ca3fa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;648&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-fe4ab98385cd111666e421ade90ca3fa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fe4ab98385cd111666e421ade90ca3fa_b.jpg\"/></figure><p><b>AUTOSAR Interface</b>AUTOSAR接口定义了模块之间的交互信息，通过这些端口模块之间可以彼此通信，另外该接口类型不指定编程语言，ECU，其实该类型是在arxml文件中进行定义。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-604d0930eb70b7b2fd256c3992b3e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"646\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-604d0930eb70b7b2fd256c3992b3e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;646&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"646\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-604d0930eb70b7b2fd256c3992b3e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-604d0930eb70b7b2fd256c3992b3e8fc_b.jpg\"/></figure><p><b>Standardized AUTOSAR Interface</b>标准AUTOSAR接口，首先它是一种AUTOSAR接口，其语法和语义都进行了制定，也就是说在arxml文件以及C文件(Classic AUTOSAR)都进行了定义。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b07de5905b4bac794d992ff85058fb29_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b07de5905b4bac794d992ff85058fb29_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;712&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b07de5905b4bac794d992ff85058fb29_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b07de5905b4bac794d992ff85058fb29_b.jpg\"/></figure><p><b>Standardized Interface</b>标准接口，是在编程语言层面对接口进行了标准化，在autosar的arxml文件中没有体现，软件模块之间通常使用标准接口。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5836febcb04df0545548b4cc9883e9bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-5836febcb04df0545548b4cc9883e9bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;556&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-5836febcb04df0545548b4cc9883e9bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5836febcb04df0545548b4cc9883e9bc_b.jpg\"/></figure><p>延伸阅读</p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483915%26idx%3D1%26sn%3D3503e6e436734182d9c4a5fa3218d0ae%26chksm%3Dcf9c4b82f8ebc2940c04c32bfcefa4629b0f7e67af763609ba4a1cda44c7763dee7910309f12%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-eff3accbe7a4d62697d650e824103d92_180x120.jpg\" data-image-width=\"543\" data-image-height=\"230\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">汽车OTA介绍</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483902%26idx%3D1%26sn%3D7cefa2a1e14cc64a8e511cf33895eb18%26chksm%3Dcf9c4877f8ebc1614116fe95d03a1adc3c705f44b2a444632c20ec68414522988e21dfef11aa%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-71f00b0ce3d3665c6cb516e36b49f1e6_180x120.jpg\" data-image-width=\"646\" data-image-height=\"276\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于CAN的刷写流程</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483704%26idx%3D1%26sn%3Dcf39d31f14177d96a0f8ba15c8937584%26chksm%3Dcf9c48b1f8ebc1a7d486778d3e7d664e1237ce255c19187154651932f9a19347cd989c3e4509%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f2d5542c4c3ae2384c2badd8e4dcf618_180x120.jpg\" data-image-width=\"770\" data-image-height=\"328\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">诊断Dem模块介绍</a><p></p>", 
            "topic": [
                {
                    "tag": "autosar", 
                    "tagLink": "https://api.zhihu.com/topics/20752678"
                }, 
                {
                    "tag": "汽车电子", 
                    "tagLink": "https://api.zhihu.com/topics/19697968"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88599510", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 0, 
            "title": "XCP协议介绍", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1f010052427c3cc3c3d3592556f658e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-1f010052427c3cc3c3d3592556f658e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-1f010052427c3cc3c3d3592556f658e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1f010052427c3cc3c3d3592556f658e7_b.jpg\"/></figure><p>关注公众号：<b>汽车ECU开发，第一时间获取更新文章。</b></p><p>标定贯穿整车开发的整个过程，是整车开发中的重要环节，从部件单体的台架软件参数的标定，到整车环境下的夏季标定、高原标定、冬季标定。</p><p>XCP全称Universal Calibration Protocol，是由ASAM (Association for Standardization of Automation and Measuring Systems,简称 ASAM)组织在2003年提出的可在不同的通信总线上进行标定的新型标定协议，这里的X代表不同的传输层上传输(CAN、Ethernet、FlexRay、SCI、SPI、USB)。XCP的应用场景：上传ECU数据，实现对ECU内部变量进行观测；在线对ECU内部变量进行标定；ECU刷写程序或数据。数据仿真，周期性下载数据至ECU，通常用于快速原型；其中通常使用的是对变量的观测、标定以及刷写ECU。标准介绍XCP标准主要分为五部分：Part 1 – Overview。XCP协议概述，包括XCP的特点描述以及XCP协议的基本原理。Part 2 – Protocol Layer Specification。对协议层进行详细的规范和说明，包括XCP数据包类型、格式以及各命令使用说明。Part 3 – Transport Layer Specification。该部分包含5份文档，分别对应5个不同的传输层（CAN，Ethernet/TCP_IP，FlexRay，SxI/SCI&amp;SPI，USB），规定不同总线下传输层的实现。Part 4 – Interface Specification。该部分对A2L描述文件、秘钥与种子加解密、数据校验功能说明。Part 5 – Example Communication Sequences。该部分描述了部分通信数据流，演示如何使用XCP协议的命令同ECU进行通讯。XCP通信协议方式XCP数据包主要有两种形式：传输控制命令的CTO(Command Transfer Object)和同步数据包DTO(Data Transfer Object)。主从节点间的XCP通信方式如图1所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c449ac6ded9fec14f4853156a1c22d62_b.jpg\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"694\" class=\"origin_image zh-lightbox-thumb\" width=\"886\" data-original=\"https://pic3.zhimg.com/v2-c449ac6ded9fec14f4853156a1c22d62_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;886&#39; height=&#39;694&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"886\" data-rawheight=\"694\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"886\" data-original=\"https://pic3.zhimg.com/v2-c449ac6ded9fec14f4853156a1c22d62_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c449ac6ded9fec14f4853156a1c22d62_b.jpg\"/><figcaption>图1 XCP主从机交互</figcaption></figure><p>CTO用于传输控制命令，包含五种形式：1.CMD(Protocol Command)，PID范围为0xC0~0xFF，主机向从机发送的命令请求，从机据此识别命令。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-176e47107d9f4cfae920c9496649b86a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"101\" class=\"origin_image zh-lightbox-thumb\" width=\"801\" data-original=\"https://pic3.zhimg.com/v2-176e47107d9f4cfae920c9496649b86a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;801&#39; height=&#39;101&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"101\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"801\" data-original=\"https://pic3.zhimg.com/v2-176e47107d9f4cfae920c9496649b86a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-176e47107d9f4cfae920c9496649b86a_b.jpg\"/></figure><p>2.RES(Transferring Command Responses)，PID值为0FF，从机在接收到主机的CMD后，当命令被执行成功时，从机向主机发送肯定响应数据包。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c11c60227e26329de9bfa1f4db2937fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"98\" class=\"origin_image zh-lightbox-thumb\" width=\"798\" data-original=\"https://pic1.zhimg.com/v2-c11c60227e26329de9bfa1f4db2937fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;798&#39; height=&#39;98&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"98\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"798\" data-original=\"https://pic1.zhimg.com/v2-c11c60227e26329de9bfa1f4db2937fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c11c60227e26329de9bfa1f4db2937fc_b.jpg\"/></figure><p>3.ERR(Error Packets)，PID值为0XFE，当命令执行发生错误时，从机反馈错误数据包。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-37b02a0d517bf0598c2ad488ca938a88_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"810\" data-rawheight=\"125\" class=\"origin_image zh-lightbox-thumb\" width=\"810\" data-original=\"https://pic1.zhimg.com/v2-37b02a0d517bf0598c2ad488ca938a88_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;810&#39; height=&#39;125&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"810\" data-rawheight=\"125\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"810\" data-original=\"https://pic1.zhimg.com/v2-37b02a0d517bf0598c2ad488ca938a88_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-37b02a0d517bf0598c2ad488ca938a88_b.jpg\"/></figure><p>4.EV(Event)，PID值为0xFD，当从机向主机报告一个异步的事件时，发送次数据包。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ab6ce84cc5c72a2a89f1c4b3d93424a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb\" width=\"813\" data-original=\"https://pic1.zhimg.com/v2-ab6ce84cc5c72a2a89f1c4b3d93424a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;813&#39; height=&#39;127&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"813\" data-original=\"https://pic1.zhimg.com/v2-ab6ce84cc5c72a2a89f1c4b3d93424a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ab6ce84cc5c72a2a89f1c4b3d93424a8_b.jpg\"/></figure><p>5.SERV(Service Request Packets)，PID值为0xFC，当从机需要主机做出某些动作时，从机向主机发送此数据包。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-84cd90d0ecf673c975469e482758791b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"126\" class=\"origin_image zh-lightbox-thumb\" width=\"812\" data-original=\"https://pic4.zhimg.com/v2-84cd90d0ecf673c975469e482758791b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;812&#39; height=&#39;126&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"126\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"812\" data-original=\"https://pic4.zhimg.com/v2-84cd90d0ecf673c975469e482758791b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-84cd90d0ecf673c975469e482758791b_b.jpg\"/></figure><p>DTO数据包传输同步数据包DAQ(Data Acquisition)和同步激励数据STIM(Data Stimulation packet)。在DAQ模式下，从机周期性上传数据，STIM模式正好相反，主机周期性的向从机下载数据。基于CAN总线的XCP报文格式</p><p>在汽车ECU的标定中，通常使用CAN总线。基于CAN的XCP报文帧结构如图2所示，其中PID用于标识XCP报文的类型，PID与任务的对应表如表1所示，FILL用于描述报文对齐信息，DAQ表示DAQ列表的标识符，TIMSTAMP为可选项，Data存放数据。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5d5af0cdab5f989d6eef38e5dffdee99_b.jpg\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"812\" data-original=\"https://pic2.zhimg.com/v2-5d5af0cdab5f989d6eef38e5dffdee99_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;812&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"812\" data-original=\"https://pic2.zhimg.com/v2-5d5af0cdab5f989d6eef38e5dffdee99_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5d5af0cdab5f989d6eef38e5dffdee99_b.jpg\"/><figcaption>图2 基于CAN的XCP帧格式</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3a4fdb773c3ccddd1f38a7345fa80925_b.jpg\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic2.zhimg.com/v2-3a4fdb773c3ccddd1f38a7345fa80925_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;175&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic2.zhimg.com/v2-3a4fdb773c3ccddd1f38a7345fa80925_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3a4fdb773c3ccddd1f38a7345fa80925_b.jpg\"/><figcaption>表1 PID与任务的对应关系</figcaption></figure><p>延伸阅读</p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483922%26idx%3D1%26sn%3Dd285ed9eceb0d1811e60f68f0b62d84b%26chksm%3Dcf9c4b9bf8ebc28d31db7d53ed6de380f10e26e724f98fe66f0d122f2cab4748e7a9396c0ff6%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-43dfdc29b43666a79e64e99f456abf44_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"509\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AUTOSAR Interface</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483902%26idx%3D1%26sn%3D7cefa2a1e14cc64a8e511cf33895eb18%26chksm%3Dcf9c4877f8ebc1614116fe95d03a1adc3c705f44b2a444632c20ec68414522988e21dfef11aa%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-71f00b0ce3d3665c6cb516e36b49f1e6_180x120.jpg\" data-image-width=\"646\" data-image-height=\"276\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于CAN的刷写流程</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483851%26idx%3D1%26sn%3D3cc713016f2c02232e684b90bfeb5a5b%26chksm%3Dcf9c4842f8ebc154675a863c734c116c59d3fa25fc8d6d6daeeb14afb4d6f980199467dbd936%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b7dee37c445970c11404db547d6e7212_180x120.jpg\" data-image-width=\"1114\" data-image-height=\"476\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CAN总线错误处理机制</a><p></p>", 
            "topic": [
                {
                    "tag": "汽车工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19697654"
                }, 
                {
                    "tag": "汽车行业", 
                    "tagLink": "https://api.zhihu.com/topics/19585985"
                }, 
                {
                    "tag": "汽车企业", 
                    "tagLink": "https://api.zhihu.com/topics/19648054"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86449761", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "汽车OTA介绍", 
            "content": "<p>关注公众号：<b>汽车ECU开发</b></p><p>OTA全称为Over-The-Air technology(空中下载技术)，通过移动通信的接口实现对软件进行远程管理，传统的做法到4S店通过整车OBD对相应的ECU进行软件升级。OTA技术最早2000年在出现日本，目前通过OTA方式升级软件广泛应用于智能手机。</p><p>对于汽车而言，OTA最早出现特斯拉2012年推出的Modes S车型上，其更新范围涉及自动驾驶、人机交互、动力、电池系统等领域，通过OTA的方式特斯拉完成钥匙卡漏洞、续航里程提升、提高最高速度、提升乘坐舒适度等功能或者漏洞的修复。</p><p>2016年11月，丰田宣布将采用OTA技术更新车辆ECU软件，并讨论了上市车辆通过OTA新增功能的可能性。</p><p>2017年5月福特首次通过OTA技术为搭载Sync 3车载系统的车型新增功能。</p><p>国内以小鹏、蔚来为代表的新造车势力也将整车OTA作为自身产品智能化的体现，传统造车企业也逐步在新车型上提供OTA功能。</p><p><b>汽车为什么要OTA</b><br/></p><p>随着汽车“电动化,网联化,智能化,共享化”新四化的推进，其电子化程序也越来越高，如图1所示，汽车电子成本占整车成本逐步提升，新能源车比传统车明显提升很多。“软件定义汽车”已成为汽车的发展趋势，汽车软件的复杂度也随之大增，软件故障的修复以及个性化定制需求的更新，仅通过4S升级难以给予用户最佳的体验。那OTA又可以带来哪些好处呢？</p><p>1、OTA远程为用户修复软件故障，大幅度缩短中间步骤的时间，使软件快速到达用户，减少汽车制造产商和用户的成本，包括汽车制造产商的召回成本，用户的时间成本；</p><p>2、OTA可以为车辆增加新功能，增加用户的新鲜感；</p><p>3、OTA拓宽了“服务”和“运营”的范畴，增加车辆的附加价值。</p><p>与此同时，OTA也带来了新的挑战，由于车载ECU众多，网络复杂，一旦车辆与外界建立通信，带来了原本封闭的网络受到入侵的可能性，怎么保证车辆安全，建立安全防护措施是OTA的重要课题。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ef211ea1d2f1209f6891e1980b1a2507_b.jpg\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"595\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-ef211ea1d2f1209f6891e1980b1a2507_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;545&#39; height=&#39;595&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"595\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-ef211ea1d2f1209f6891e1980b1a2507_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ef211ea1d2f1209f6891e1980b1a2507_b.jpg\"/><figcaption>图1 汽车电子成本占整车成本比例</figcaption></figure><p><b>OTA设计要求</b></p><p>OTA要求主要从安全、时间、版本管控、异常处理方面考虑，具体为：</p><p>1、软件升级时间最短，就是确保车辆无法行驶的时间最短，车载ECU通常是通过CAN或Ethernet刷写，在带宽允许的情况下，尽可能采取并行刷写模式，选取刷写时间最长的节点优先处理等设计原则。</p><p>2、版本管控版本管控对于OTA来说很重要，因为车辆上ECU众多，不同ECU有不同版本的软件，另外产商的车型众多，不同车型ECU的需求有不同，版本也存在差异。</p><p>3、异常处理方案。在OTA传输过程中，外界干扰或者其他因素导致刷写异常或者中断，车载ECU必须支持软件回滚、断点续传、丢失重传等处理机制。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-784301338af7fbe0bce81510b9be3a31_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"626\" data-original=\"https://pic2.zhimg.com/v2-784301338af7fbe0bce81510b9be3a31_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;626&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"626\" data-original=\"https://pic2.zhimg.com/v2-784301338af7fbe0bce81510b9be3a31_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-784301338af7fbe0bce81510b9be3a31_b.jpg\"/></figure><p>4、安全是OTA优先考虑的内容，保证车辆信息安全是当前OTA的一项挑战，必须从硬件、软件、云端几个方面，尤其是三者之间的传输应用来解决。</p><p>在数据传输链路上，通过遵守适当的传输协议保证其安全性。功能分区是降低风向的一种特别重要的技术，功能分区意味着对关键功能进行隔离，降低风险。车辆功能安全和冗余设计上的考虑主要是基于ISO26262标准，可以通过优化车载网络架构，将不同的域划分成不同的ASIL等级，将不同安全等级的ECU进行分隔，另外采用并行独立的OTA路径。信息安全上的考虑，包括网络安全、主机安全、数据库安全、数据传输安全等。</p><p><b>OTA架构</b></p><p>OTA整体架构包含OTA云端、OTA终端、OTA设计对象三部分，如下图2所示，OTA云端为OEM专属的云端服务器平台，OTA终端采用Tbox，网络架构按功能域划分，分为动力系统域、车身系统域、影音系统域、ADAS主动安全域，分为四个不同的功能安全等级。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a5322a3fb49f533312d80380e2740a83_b.jpg\" data-size=\"normal\" data-rawwidth=\"1001\" data-rawheight=\"749\" class=\"origin_image zh-lightbox-thumb\" width=\"1001\" data-original=\"https://pic4.zhimg.com/v2-a5322a3fb49f533312d80380e2740a83_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1001&#39; height=&#39;749&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1001\" data-rawheight=\"749\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1001\" data-original=\"https://pic4.zhimg.com/v2-a5322a3fb49f533312d80380e2740a83_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a5322a3fb49f533312d80380e2740a83_b.jpg\"/><figcaption>图2 OTA架构</figcaption></figure><p><b>OTA云端</b></p><p>OTA云端也称为OTA云服务平台，包含OEM支持OTA升级的ECU全部的完整的升级包。OTA云端的设计要求是独立的平台，支持多车型、多型号规格、多种类型ECU软件的升级。OTA云端的框架结构主要包括五部分：OTA管理平台、OTA升级服务、任务调度、文件服务、任务管理，如图3所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3ff569cf729a368fa333c903a0a3a226_b.jpg\" data-size=\"normal\" data-rawwidth=\"1038\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb\" width=\"1038\" data-original=\"https://pic3.zhimg.com/v2-3ff569cf729a368fa333c903a0a3a226_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1038&#39; height=&#39;541&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1038\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1038\" data-original=\"https://pic3.zhimg.com/v2-3ff569cf729a368fa333c903a0a3a226_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3ff569cf729a368fa333c903a0a3a226_b.jpg\"/><figcaption>图3 OTA云端架构</figcaption></figure><p><b>OTA终端</b></p><p>OTA终端主要包含OTA引擎和OTA适配器，其中OTA引擎是一个连接OTA终端与OTA云端的桥梁，实现云端同终端的安全通信，包括升级包下载、升级包解密、差分包重构等功能。OTA适配器是为兼容不同的软件或设备的不同更新逻辑或流程，根据统一的接口要求封装的不同实现。升级适配器由需要OTA升级的各个ECU软件实现提供。</p><p><b>OTA对象</b></p><p>汽车OTA对象主要包括影音系统，ADAS软件，以及车内嵌入式ECU。嵌入式ECU通常采用软件备份功能，如下表所示，即ECU内部用于两片区域，一部分用于存储当前运行的程序，一部分用于存储备份程序。除第一次安装或者设备下线时，ECU内部只有一份软件外，之后安装的软件都会与上一份共存。当前运行的是最新的软件，如果升级过程中发生错误或者刷写的程序不能运行，ECU内部自动回滚至上一版程序，防止车辆趴窝。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c113d106e852308c01a48bf73c0b5546_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic3.zhimg.com/v2-c113d106e852308c01a48bf73c0b5546_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;639&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"639\" data-original=\"https://pic3.zhimg.com/v2-c113d106e852308c01a48bf73c0b5546_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c113d106e852308c01a48bf73c0b5546_b.png\"/></figure><p>对于车企来说，OTA不仅仅是关乎技术，OTA还会影响汽车的研发流程，质量管控体系，另外OTA是互联网思维渗透到车企的体现。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b49bb7fc7db7ef8ed2fc686ca6be8039_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"796\" data-original=\"https://pic2.zhimg.com/v2-b49bb7fc7db7ef8ed2fc686ca6be8039_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;796&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"796\" data-original=\"https://pic2.zhimg.com/v2-b49bb7fc7db7ef8ed2fc686ca6be8039_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b49bb7fc7db7ef8ed2fc686ca6be8039_b.jpg\"/></figure><p><b>延伸阅读</b></p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483902%26idx%3D1%26sn%3D7cefa2a1e14cc64a8e511cf33895eb18%26chksm%3Dcf9c4877f8ebc1614116fe95d03a1adc3c705f44b2a444632c20ec68414522988e21dfef11aa%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-71f00b0ce3d3665c6cb516e36b49f1e6_180x120.jpg\" data-image-width=\"646\" data-image-height=\"276\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于CAN的刷写流程</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483851%26idx%3D1%26sn%3D3cc713016f2c02232e684b90bfeb5a5b%26chksm%3Dcf9c4842f8ebc154675a863c734c116c59d3fa25fc8d6d6daeeb14afb4d6f980199467dbd936%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b7dee37c445970c11404db547d6e7212_180x120.jpg\" data-image-width=\"1114\" data-image-height=\"476\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CAN总线错误处理机制</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483694%26idx%3D1%26sn%3D1ebfe6eda1068d861f8d4f7f2ae5fa15%26chksm%3Dcf9c48a7f8ebc1b1db866d024f31bca891109f0b3ce5d467ab067d3050ef00456ed930613e78%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DTC status介绍</a><p></p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "汽车电子", 
                    "tagLink": "https://api.zhihu.com/topics/19697968"
                }, 
                {
                    "tag": "汽车行业", 
                    "tagLink": "https://api.zhihu.com/topics/19585985"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85208500", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 2, 
            "title": "基于CAN的ECU刷写流程", 
            "content": "<p>​</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a5b23d0169f5d704c24c158c2f6af53a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"646\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"646\" data-original=\"https://pic3.zhimg.com/v2-a5b23d0169f5d704c24c158c2f6af53a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;646&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"646\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"646\" data-original=\"https://pic3.zhimg.com/v2-a5b23d0169f5d704c24c158c2f6af53a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a5b23d0169f5d704c24c158c2f6af53a_b.jpg\"/></figure><p>ECU软件分为bootloader和application。ECU上电后，先进入bootLoader确定application程序是否有问题，如果没有问题则跳转至application，如果application出现问题，程序会停留在bootloader中，等待刷写命令。软件刷写主要分为三部分：</p><p>1、pre-programming step</p><p>2、programming step</p><p>3、post-programming step</p><ul><li><b>pre-programming step</b></li></ul><p>从名字可以看出，该步骤主要是下载程序前的一些操作，包括唤醒ECU、读取特定的DID、通信管理等，详细的操作见图1。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-216b984b7a3e64ed45ce62d27eccc5d8_b.jpg\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"1151\" class=\"origin_image zh-lightbox-thumb\" width=\"784\" data-original=\"https://pic1.zhimg.com/v2-216b984b7a3e64ed45ce62d27eccc5d8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;784&#39; height=&#39;1151&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"1151\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"784\" data-original=\"https://pic1.zhimg.com/v2-216b984b7a3e64ed45ce62d27eccc5d8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-216b984b7a3e64ed45ce62d27eccc5d8_b.jpg\"/><figcaption>图1 pre-programming step</figcaption></figure><p>其中：</p><p>1、唤醒ECU，唤醒的方法和策略由汽车制造商制定；</p><p>2、为了关闭DTC存储和运行0x28服务关闭相关的通信，需运行0x10服务跳转至extendedDiagnosticSession，</p><p>3、进入extendedDiagnosticSession后，汽车制造商可以进一步进行特定数据链路的初始化；</p><p>4、运行0x31服务对刷写条件进行检查，例如低压电是否在正常范围内；</p><p>5、为了防止刷写过程中出现异常误触发DTC存储，运行0x85服务关闭DTC的存储；</p><p>6、该步骤提供给汽车制造商一个接口，可以通过0x31服务启动或关闭ECU的故障安全响应(failsafe reaction);</p><p>7、为了提高刷写速度，降低刷写程序时总线负载率，通过运行0x28服务关闭无关报文，比如应用报文和网络管理报文；</p><p>8、在关闭部分通信之后，通过0x22服务读取被刷ECU的状态(应用软件和数据)、软件指纹信息等；</p><p>9、为了减少刷写的时间，可以通过0x87服务提高CAN总线的波特率。</p><ul><li><b>programming step</b></li></ul><p>该步骤用于将软件或者数据下载到被刷ECU中，主要包括进入特定的安全等级、写入指纹信息、下载软件和数据等，如图2所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a794799bedbfc5176b9385e73d5a2564_b.jpg\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"823\" data-original=\"https://pic1.zhimg.com/v2-a794799bedbfc5176b9385e73d5a2564_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;823&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"823\" data-original=\"https://pic1.zhimg.com/v2-a794799bedbfc5176b9385e73d5a2564_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a794799bedbfc5176b9385e73d5a2564_b.jpg\"/><figcaption>图2 programming step</figcaption></figure><p>其中：</p><p>1、运行0x10服务进入programmingSession；</p><p>2、运行0x27服务进入特定的安全等级；</p><p>3、运行0x2E服务将指纹信息写入ECU；</p><p>4、运行0x34、0x36、0x37服务将永久存储区写入默认值；</p><p>5、运行0x31服务检查步骤4是否成功，另外一种方法是通过0x37的响应确定是否成功；</p><p>6、运行0x31服务对特定的Flash进行擦除；</p><p>7、分别运行0x34、0x36、0x37服务将Flash driver下载至内存中；</p><p>8、运行0x31服务检查Flash driver下载是否成功；</p><p>9、分别运行0x34、0x36、0x37服务将软件和数据下载至ECU的flash中；</p><p>10、运行0x31服务检查步骤9是否下载成功；</p><p>11、运行0x31服务验证程序是否能正常运行，例如checksum、标志位等；</p><p>12、在下载完软件和数据后，汽车制造产商需要一些特定的操作，比如写入VIN码等。</p><ul><li><b>post-programming step</b></li></ul><p>该步骤主要通过0x11服务对ECU进行复位或者通过0x10服务将session切换至defaultSession，如图3所示，如果在pre-programming step中调整了波特率，须通过特定的操作将波特率调整至正常值。通常操作是运行0x11服务使ECU复位，回到正常状态。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bd513450787bb2dd4ea01b53372621d5_b.jpg\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb\" width=\"434\" data-original=\"https://pic2.zhimg.com/v2-bd513450787bb2dd4ea01b53372621d5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;434&#39; height=&#39;348&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"434\" data-original=\"https://pic2.zhimg.com/v2-bd513450787bb2dd4ea01b53372621d5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bd513450787bb2dd4ea01b53372621d5_b.jpg\"/><figcaption>图3 post-programming step</figcaption></figure><p>该刷写流程是14229标准中提到的，不同的OEM有不同的标准，但是主体的步骤与14229应该还是相同的。</p><p><b>延伸阅读</b></p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483736%26idx%3D1%26sn%3D25a98f21bd8e214438e650ada8d7396a%26chksm%3Dcf9c48d1f8ebc1c715edf1fb275801ad9eb0580576a5d99329c30f88bbefc0fdfea2eafab92c%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-631432ee220bf7a2d952b0ae644d3c9d_180x120.jpg\" data-image-width=\"610\" data-image-height=\"260\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UDS诊断服务——诊断和通信管理单元</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483755%26idx%3D1%26sn%3Df618c24832325a031483acf32ffccef1%26chksm%3Dcf9c48e2f8ebc1f4768adbde246697c31b2725616880c2f67b4df5f5b2494d4e410e489e7006%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-548c070f4bb24f4c7e1f14c229e82d46_180x120.jpg\" data-image-width=\"950\" data-image-height=\"409\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UDS诊断服务——数据传输单元</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483793%26idx%3D1%26sn%3D0becddeb1ed76d9e8f28fc3cdf52b557%26chksm%3Dcf9c4818f8ebc10ebc48cef91877d8506c7c76727756ce4c0f7c4a33fa3202d1d877db36651b%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-d0743b7ab64a3576f2324a983880e1ef_180x120.jpg\" data-image-width=\"955\" data-image-height=\"405\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UDS诊断服务—上传下载单元、Routine单元</a><p>关注公众号：<b>汽车ECU开发</b>，第一时间阅读更新内容。</p>", 
            "topic": [
                {
                    "tag": "ECU", 
                    "tagLink": "https://api.zhihu.com/topics/19627740"
                }, 
                {
                    "tag": "软件", 
                    "tagLink": "https://api.zhihu.com/topics/19551718"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": [
                {
                    "userName": "申广", 
                    "userLink": "https://www.zhihu.com/people/cc48ead508a8472cfc1927ab222937ad", 
                    "content": "<p>步骤8和步骤10是对程序的完整性还是一致性检查呢？</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84751342", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 0, 
            "title": "2019劳德巴赫技术论坛之Trace32与Python", 
            "content": "<p>前几天有幸参加了2019劳德巴赫技术论坛，论坛上主要对以下三部分进行了介绍：<br/></p><p>1、劳德巴赫公司的介绍以及该公司产品线的介绍，原来劳德巴赫全球才100多员工，非常惊讶！！！</p><p>2、Trace32中常用功能的使用方法以及常见报错的排查思路的介绍。常用功能要包括DMA 测试，当有OS时的CPU复杂率测试，软件断点和硬件断点的区别，堆栈的使用测试等，常见问题主要包括调试口进入安全状态(Debug Port Secured)，总线错误(Bus errors generated by CPU)、多核调试等。</p><p>3、Trace32与Python之间的新特性介绍，目前劳德巴赫正在把trace32的API接口做成Python库，用户可通过调用库实现对trace32的操作，比之前的方法更加简单易懂，不需要单独学习cmm脚本的语法，降低了使用者的学习成本及上手难度。</p><p>针对第三点Trace32与Python，把论坛上的PPT精简了一下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-82458d7e79a96f991c0cc357e90bb32d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-82458d7e79a96f991c0cc357e90bb32d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-82458d7e79a96f991c0cc357e90bb32d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-82458d7e79a96f991c0cc357e90bb32d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2e6cf162a76dc474693e466e893f9599_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-2e6cf162a76dc474693e466e893f9599_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-2e6cf162a76dc474693e466e893f9599_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2e6cf162a76dc474693e466e893f9599_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b49cd9c396ce811f1bae478e84f1614f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-b49cd9c396ce811f1bae478e84f1614f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-b49cd9c396ce811f1bae478e84f1614f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b49cd9c396ce811f1bae478e84f1614f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-69992bdc354234b3348af0c4c986d5d5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-69992bdc354234b3348af0c4c986d5d5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-69992bdc354234b3348af0c4c986d5d5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-69992bdc354234b3348af0c4c986d5d5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3a5202f772badd14aa4be65acedcd36b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-3a5202f772badd14aa4be65acedcd36b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-3a5202f772badd14aa4be65acedcd36b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3a5202f772badd14aa4be65acedcd36b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-deac4178777c7bba82bdb62aff1f9471_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-deac4178777c7bba82bdb62aff1f9471_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-deac4178777c7bba82bdb62aff1f9471_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-deac4178777c7bba82bdb62aff1f9471_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bbc659e7627ee36e83580f4ca36565c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-bbc659e7627ee36e83580f4ca36565c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-bbc659e7627ee36e83580f4ca36565c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bbc659e7627ee36e83580f4ca36565c9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dd3e0037cec2bcaf3b62f01ed592a0fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-dd3e0037cec2bcaf3b62f01ed592a0fa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-dd3e0037cec2bcaf3b62f01ed592a0fa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dd3e0037cec2bcaf3b62f01ed592a0fa_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ca67415df8010eb3945a2e0220ccc994_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ca67415df8010eb3945a2e0220ccc994_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ca67415df8010eb3945a2e0220ccc994_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ca67415df8010eb3945a2e0220ccc994_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-aedeb5c2e937e56c855f0fcad5ff0238_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-aedeb5c2e937e56c855f0fcad5ff0238_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-aedeb5c2e937e56c855f0fcad5ff0238_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-aedeb5c2e937e56c855f0fcad5ff0238_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6b35749f95352b79b795aea3212e2d0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-6b35749f95352b79b795aea3212e2d0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-6b35749f95352b79b795aea3212e2d0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6b35749f95352b79b795aea3212e2d0f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d860d0df4cfe6cb0d77c8932202ac181_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d860d0df4cfe6cb0d77c8932202ac181_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d860d0df4cfe6cb0d77c8932202ac181_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d860d0df4cfe6cb0d77c8932202ac181_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2b9a11e7e24e29516cbf9ec4a145bbf4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-2b9a11e7e24e29516cbf9ec4a145bbf4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-2b9a11e7e24e29516cbf9ec4a145bbf4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2b9a11e7e24e29516cbf9ec4a145bbf4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b08575e39dfcdb1583ecc19a80c26de2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-b08575e39dfcdb1583ecc19a80c26de2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-b08575e39dfcdb1583ecc19a80c26de2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b08575e39dfcdb1583ecc19a80c26de2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-22c85b0342795796262638996f92eb49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-22c85b0342795796262638996f92eb49_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-22c85b0342795796262638996f92eb49_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-22c85b0342795796262638996f92eb49_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1ce74a6286e41b4e11713187f94f95dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-1ce74a6286e41b4e11713187f94f95dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-1ce74a6286e41b4e11713187f94f95dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1ce74a6286e41b4e11713187f94f95dd_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6841eaf8f7456af4d5cb2374e510a6da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-6841eaf8f7456af4d5cb2374e510a6da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-6841eaf8f7456af4d5cb2374e510a6da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6841eaf8f7456af4d5cb2374e510a6da_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-87581eea864dc360c6c1aa24960fb445_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-87581eea864dc360c6c1aa24960fb445_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-87581eea864dc360c6c1aa24960fb445_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-87581eea864dc360c6c1aa24960fb445_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-46d1008c804981495abecf92355d427c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-46d1008c804981495abecf92355d427c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-46d1008c804981495abecf92355d427c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-46d1008c804981495abecf92355d427c_b.jpg\"/></figure><p>关注公众号：汽车ECU开发</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;525&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "在线论坛", 
                    "tagLink": "https://api.zhihu.com/topics/19557139"
                }, 
                {
                    "tag": "技术论坛", 
                    "tagLink": "https://api.zhihu.com/topics/19571053"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84502498", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 0, 
            "title": "英飞凌TC27X启动需要做什么", 
            "content": "<p>首先需要介绍芯片上的HWCFG引脚，其中HWCFG[0:2]用于配置MCU的供电模式，HWCFG[3]是BMI的选择引脚，它决定启动配置从引脚HWCFG[4:5]选择，还是从Flash中BMI选择。为了节省引脚资源和避免安全漏洞，通常启动模式选择用Flash中的BMI。</p><p>BMI信息存放在BMHD寄存器中，共由9个字段组成，如图1所示，Flash中的BMHD寄存器总共有4个，如图2所示，其目的是为了做冗余设计，保证在一个或多个损坏时，芯片仍能正常启动​。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b1c5c3d087753fa3c800947d96073b03_b.jpg\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic4.zhimg.com/v2-b1c5c3d087753fa3c800947d96073b03_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;712&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic4.zhimg.com/v2-b1c5c3d087753fa3c800947d96073b03_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b1c5c3d087753fa3c800947d96073b03_b.jpg\"/><figcaption>图1 BMHD定义</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-289694d1bb6dc50e065b53dcafe3c1e5_b.jpg\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"164\" class=\"origin_image zh-lightbox-thumb\" width=\"596\" data-original=\"https://pic2.zhimg.com/v2-289694d1bb6dc50e065b53dcafe3c1e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;596&#39; height=&#39;164&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"164\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"596\" data-original=\"https://pic2.zhimg.com/v2-289694d1bb6dc50e065b53dcafe3c1e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-289694d1bb6dc50e065b53dcafe3c1e5_b.jpg\"/><figcaption>图2 BMHD</figcaption></figure><p>其中：</p><p>1、STADABM存放的是用户代码的入口地址；</p><p>2、BMI用于配置用户的启动模式，BMI.PINDIS用于配置是否屏蔽硬件HWCFG[3:5]引脚功能，如果该位置位，那么BMI.HWCFG用作启动配置；</p><p>3、LCL0LSEN、LCL1LSEN用于配置是否使能core0、core1的锁步功能；</p><p>4、BMHDID为固定值0xB359；</p><p>5、ChkStart、ChkEnd用于存放计算CRC的起始地址和末尾地址，CRCrange、分别是按照IEEE802.3中的CRC算法计算的CRC值；</p><p>6、CRChead是计算BMHD的00H~17H的CRC值。</p><p><b>TC27X的启动顺序</b></p><p>如图3所示，主要的初始化过程在CPU0上执行，如果初始化阶段要求锁步核校验，也可以切换至CPU1。其中Firmware固化在BootROM中的启动程序。对于冷复位，可以通过配置PROCOND寄存器选择性地初始化内存区。下面结合的图3介绍启动的主要步骤：</p><p>1、调用Cstart()函数初始化C运行环境；初始化堆栈指针和程序状态字(PSW)寄存器，A10寄存器用作堆栈指针，用户堆栈指针基地址和堆栈大小通过连接文件设置，启动代码应该测试和初始化用于堆栈的存储区，对齐堆栈边界；上下文存储区(CSA)初始化，PSW(CDC )寄存器中表示连续上下文切换的调用深度内容应该被重置，通过PCXI、LCX、FCX寄存器初始化CSA链表，通过连接文件配置CSA的大小；中断及陷阱向量表的基地址初始化，也就是BIV和BTV寄存器；​初始化PCON和DCON寄存器使能程序缓存、数据缓存，该寄存器的配置能有效缩短程序的运行时间；清除bss段的内存，复制data段的数据至内存中。</p><p>2、确认已发生的复位时间类型，并测试是否有电源故障和内存数据是否一致。如果复位类型为应用复位，且内存数据没有破坏，则不需要初始化内存、时钟、Flash模块，从而进入快速启动过程。</p><p>3、初始化驱动和外设至默认状态。例如将端口引脚初始化为所需要的初始电气状态。</p><p>4、进行安全测试和初始化。包括CPU测试、RAM测试、SMU警告检测和其他重要的安全启动测试。另外可以调用safeTlib程序。</p><p>5、完成安全测试之后，对应用需要的硬件模块驱动进行初始化，时钟初始化，Flash配置，GTM初始化等。</p><p>6、在驱动程序初始化后，此时硬件只启动了CPU0，其他核仍保持Halt状态，软件通过调用Startcore()、Cstart()函数启动和初始化相应的核，最后把控制权交给操作系统。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ab9ea75ac09c66f4e47f626c4012fec4_b.jpg\" data-size=\"normal\" data-rawwidth=\"874\" data-rawheight=\"1311\" class=\"origin_image zh-lightbox-thumb\" width=\"874\" data-original=\"https://pic1.zhimg.com/v2-ab9ea75ac09c66f4e47f626c4012fec4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;874&#39; height=&#39;1311&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"874\" data-rawheight=\"1311\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"874\" data-original=\"https://pic1.zhimg.com/v2-ab9ea75ac09c66f4e47f626c4012fec4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ab9ea75ac09c66f4e47f626c4012fec4_b.jpg\"/><figcaption>图3 启动步骤</figcaption></figure><p>关于图3中提到的各种不同的复位类型，最后一张图说明不同复位类型的区别。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5a53824e2a7ee7f6b92918c6b5a29657_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"925\" data-rawheight=\"1016\" class=\"origin_image zh-lightbox-thumb\" width=\"925\" data-original=\"https://pic4.zhimg.com/v2-5a53824e2a7ee7f6b92918c6b5a29657_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;925&#39; height=&#39;1016&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"925\" data-rawheight=\"1016\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"925\" data-original=\"https://pic4.zhimg.com/v2-5a53824e2a7ee7f6b92918c6b5a29657_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5a53824e2a7ee7f6b92918c6b5a29657_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "英飞凌", 
                    "tagLink": "https://api.zhihu.com/topics/20206970"
                }, 
                {
                    "tag": "汽车电子", 
                    "tagLink": "https://api.zhihu.com/topics/19697968"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81026123", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 0, 
            "title": "CAN总线错误处理机制", 
            "content": "<p>​CAN总线问题是一类比较普遍的问题，为了方便CAN总线问题的排查，对CAN总线的错误处理机制进行总结。</p><p><b><u>错误帧</u></b></p><p>当节点检测到错误时，节点会向总线上发送错误帧，通知其他节点当前总线有错误。错误帧由错误标志和错误界定符组成，如图1所示。并且分为主动错误状态下的错误帧和被动错误状态下的错误帧。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9cb7c66bf6a54190ba975ff63da31c07_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9cb7c66bf6a54190ba975ff63da31c07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;412&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9cb7c66bf6a54190ba975ff63da31c07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9cb7c66bf6a54190ba975ff63da31c07_b.jpg\"/><figcaption>图1 错误帧</figcaption></figure><p>其中：</p><p>        主动错误状态下错误帧的错误标志为6位连续的显性位，被动错误状态下错误帧的错误标志为6位连续的隐性位，错误界定符统一为8位连续的隐性位。<br/><b><u>错误检测</u></b></p><p>CAN总线的错误类型包括位错误、填充错误、格式错误、ACK错误、CRC错误五种，错误的作用域如图2所示。其中位错误、格式错误、ACK错误属于发送节点的错误，填充错误、格式错误、CRC错误属于接收节点的错误。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9467422b4cc47fdeb2f1c91a9fde1a6e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9467422b4cc47fdeb2f1c91a9fde1a6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9467422b4cc47fdeb2f1c91a9fde1a6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9467422b4cc47fdeb2f1c91a9fde1a6e_b.jpg\"/><figcaption>图2 错误的作用域</figcaption></figure><p><b>位错误</b></p><p>节点将发送至总线上的电平与从总线回读的电平进行比较，如果两者不同，例如发送的是隐性位，回读到确是显性位，则节点会检测出位错误，如图3所示。有以下三种例外情况不属于位错误：</p><p>1.仲裁区，节点发送隐性位，回读为显性位，这种情况表示仲裁失败。</p><p>2.ACK槽，节点发送隐性位，回读为显性位，这种情况表示当前节点发送的报文至少被一个接收节点正确接收。</p><p>3.该节点发送被动错误标志位，节点向总线发送被动错误标志，回读的不是六位连续的隐性位，这种情况是由于CAN总线是线与机制，被动错误标志被其他节点发送的显性位给覆盖，所以回读不是6位连续的隐性位。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-05dbf1eba31726fa7bfc195edd01fe41_b.jpg\" data-size=\"normal\" data-rawwidth=\"785\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"785\" data-original=\"https://pic2.zhimg.com/v2-05dbf1eba31726fa7bfc195edd01fe41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;785&#39; height=&#39;460&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"785\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"785\" data-original=\"https://pic2.zhimg.com/v2-05dbf1eba31726fa7bfc195edd01fe41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-05dbf1eba31726fa7bfc195edd01fe41_b.jpg\"/><figcaption>图3 位错误</figcaption></figure><p><b>填充错误</b></p><p>在使用位填充法（CAN协议中规定，当相同极性的电平持续五位时，则添加一个极性相反的位）进行编码的信息中，出现了6个连续相同的位电平，则检测为填充错误。</p><p><b>ACK错误</b><br/>节点在发送报文(数据帧或遥控帧)时，如果接收节点成功接收报文，那么接收节点会在ACK槽对应的时间段内向总线发送一个显性位，告知发送节点报文已正常接收，如图4所示。当发送节点在ACK槽时间内没有回读到显性位，则发送节点检测到ACK错误。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5097cfe4c867186e0b63d7179b99e8d2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"733\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5097cfe4c867186e0b63d7179b99e8d2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;733&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"733\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5097cfe4c867186e0b63d7179b99e8d2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5097cfe4c867186e0b63d7179b99e8d2_b.jpg\"/><figcaption>图4 ACK交互</figcaption></figure><p><b>CRC错误</b><br/>发送节点在发送CAN报文(数据帧或遥控帧)时，会对帧起始、仲裁段、控制段、数据段（如图5所示）进行CRC计算，并将计算的结果放置在CRC段。接收节点在接收报文时对相同的段执行相同的CRC算法，如果计算结果与CRC段的数据不同，则接收节点检测出CRC错误。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-af50017708dc59b41b0fbfa20318d68a_b.jpg\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-af50017708dc59b41b0fbfa20318d68a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;661&#39; height=&#39;127&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-af50017708dc59b41b0fbfa20318d68a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-af50017708dc59b41b0fbfa20318d68a_b.jpg\"/><figcaption>图5 CRC作用域</figcaption></figure><p><b>格式错误</b></p><p>报文中，固定形式的位场含有1个或多个非法位，包括数据帧或遥控帧的CRC界定符、ACK界定符、EOF、错误帧界定符、过载帧界定符，则节点检测为格式错误。</p><p><b><u>错误通知</u></b></p><p>总线上节点的状态机如图6所示，节点状态分为三种，分别是主动错误、被动错误、总线关闭。状态跳转依据的是TEC(发送错误计数器)和REC(接收错误计数器)的值，其中REC和TEC都小于127时为主动错误状态，该状态下节点能正常进行通信，当错误产生时，发送6个连续显性位组成的主动错误标志；当REC或者TEC大于127时，节点状态跳转至被动错误状态，该状态下节点能正常通信；当错误产生时，发送6个连续隐性位组成的被动错误标志；当TEC达到255时，节点进入BusOff状态，并且不能收发报文，总线上其他节点依然可以正常通信。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-da1b630d700f255af0405f48fa15fbb2_b.jpg\" data-size=\"normal\" data-rawwidth=\"524\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"524\" data-original=\"https://pic3.zhimg.com/v2-da1b630d700f255af0405f48fa15fbb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;524&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"524\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"524\" data-original=\"https://pic3.zhimg.com/v2-da1b630d700f255af0405f48fa15fbb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-da1b630d700f255af0405f48fa15fbb2_b.jpg\"/><figcaption>图6 节点状态机</figcaption></figure><p>TEC和REC计数器值的增减是根据表1规定进行的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0036e6f8ba8bafdbbd3ae3216a86a73a_b.jpg\" data-size=\"normal\" data-rawwidth=\"808\" data-rawheight=\"796\" class=\"origin_image zh-lightbox-thumb\" width=\"808\" data-original=\"https://pic3.zhimg.com/v2-0036e6f8ba8bafdbbd3ae3216a86a73a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;808&#39; height=&#39;796&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"808\" data-rawheight=\"796\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"808\" data-original=\"https://pic3.zhimg.com/v2-0036e6f8ba8bafdbbd3ae3216a86a73a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0036e6f8ba8bafdbbd3ae3216a86a73a_b.jpg\"/><figcaption>表1 错误规则</figcaption></figure><p><b>关注公众号：汽车ECU开发</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;525&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b307cf0c30f3b71e9643159e124c4511_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79646297", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 0, 
            "title": "AUTOSAR Dem 介绍", 
            "content": "<p>本文主要介绍Dem模块，针部分配置选项进行介绍。</p><p>Dem全称为Diagnostic Event Manager，负责故障事件的处理、故障数据的存储和管理。简单说其功能是故障事件确认前的故障debounce，故障事件确认时的故障数据存储，故障发生后的故障老化、故障替代（<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483656%26idx%3D1%26sn%3Dc53ce6e3a613dc9580975d0ff8b336e8%26chksm%3Dcf9c4881f8ebc197345357c61f4cc39e957f93d59f983642d3d40baab881a9f7e211b7e28b8e%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AUTOSAR的故障存储策略</a>）。</p><p>AUTOSAR标准中对Dem模块最上层分了两菜单栏（参见图1），分别是DemConfigSet，DemGeneral。其中DemConfigSet负责不同DTC、event等的配置，DemGeneral负责DTC、event的共用部分，包括冻结帧、扩展帧、使能条件等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e1e93e941fe02052c182fb46d46b6682_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e1e93e941fe02052c182fb46d46b6682_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;552&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e1e93e941fe02052c182fb46d46b6682_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e1e93e941fe02052c182fb46d46b6682_b.jpg\"/><figcaption>图1 Dem的上层架构</figcaption></figure><p>下面主要介绍上层菜单下的配置选项。</p><p><b>                                         ——DemConfigSet——</b></p><p>DemConfigSet下包含图2所示的配置项，下面针对常用的配置选项进行介绍。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-727c86aafb6f06321d28967a5f08ce99_b.jpg\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"493\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-727c86aafb6f06321d28967a5f08ce99_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;752&#39; height=&#39;493&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"493\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-727c86aafb6f06321d28967a5f08ce99_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-727c86aafb6f06321d28967a5f08ce99_b.jpg\"/><figcaption>图2 DemConfigSet配置项</figcaption></figure><p><b>1.</b> <b>DemComponent</b></p><p>DemComponent又名MonitorComponent，主要用于有关联的故障事件。比如传感本身发生故障，这时控制器读取的数据应该被视为无效。一个DemComponent是若干故障事件的集合，在DemComponent内部，故障事件有优先级，当最高优先级的故障事件状态为Failed导致其他故障事件状态也为Failed，或者父节点DemComponent的状态为Failed导致子节点DemComponent内的故障事件状态变成Failed，这种故障叫做连续错误（CONSECUTIVE FAULT），其他被认为是偶发错误（CAUSALFAULT）。另外如果DemComponent内部故障事件优先级被忽略，那么仅有当父节点DemComponent的状态为Failed导致子节点DemComponent内的故障事件状态变成Failed被称作是连续错误（CONSECUTIVE FAULT）。</p><p><b>2.</b> <b>DemDTCAttributes</b></p><p>DemDTCAttributes用于配置DTC的属性，包括老化周期、故障优先级、存储方式（立即存储还是下电存储）、快照数据需记录的最大组数以及参考的冻结帧数据快照数据、故障数据存储的memory等，其中快照数据、扩展数据等需要在DemGeneral中配置。</p><p><b>3.</b> <b>DemDTC</b></p><p>DemDTC用于配置故障的DTC值（诊断故障码）、DTC的严重程度以及参考的DTC属性、Obd属性等。</p><p><b>4.</b> <b>DemDebounceCounterBaseClass、DemDebounceTimeBaseClass</b></p><p>这两项主要用于为不同的故障事件配置不同的debounce策略，可以是基于计数器的debounce策略，也可以是基于时间的debounce策略，或者由SWC自定义。</p><p><b>5.</b> <b>DemObdDTC</b></p><p>DemObdDTC用于配置obd类故障事件是否支持Pto以及故障事件的DTC值等。</p><p><b>6.</b> <b>DemPidClass</b></p><p>用于配置Pid以及相关联的应用层信号。</p><p><b>7.</b> <b>DemEventParameter</b></p><p>DemEventParameter用于配置故障的类型（BSW or SWC）、故障需要多少个运行循环才能确认、是否支持预存储功能、故障事件的debounce策略以及参考的DTC属性、DemComponent、使能条件、运行循环等。</p><p>以上参数基本为DemConfigSet比较重要的配置项，其他未介绍的可以查看标准。</p><p><b>                                                 ——DemGeneral——</b></p><p>DemGeneral主要用于配置DemConfigSet中不同event、DTC共用的一些参数，所以相对来说比较杂，下面针对一些进行介绍。</p><p><b>1.</b> <b>DemDataElementClass</b></p><p>DemDataElementClass用于配置内部、外部元素，如表1所示，用于配置扩展数据和快照数据的数据源。其中内部元素如表2所示，外部元素主要分通过C/S或S/R接口获取应用层的数据。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-63245086e768378593a11ed1e796484f_b.jpg\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"832\" data-original=\"https://pic4.zhimg.com/v2-63245086e768378593a11ed1e796484f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;832&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"832\" data-original=\"https://pic4.zhimg.com/v2-63245086e768378593a11ed1e796484f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-63245086e768378593a11ed1e796484f_b.jpg\"/><figcaption>表1 DemDataElementClass中三种数据</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-eda6e9d2aaefef8061058a51a7454106_b.jpg\" data-size=\"normal\" data-rawwidth=\"893\" data-rawheight=\"765\" class=\"origin_image zh-lightbox-thumb\" width=\"893\" data-original=\"https://pic3.zhimg.com/v2-eda6e9d2aaefef8061058a51a7454106_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;893&#39; height=&#39;765&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"893\" data-rawheight=\"765\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"893\" data-original=\"https://pic3.zhimg.com/v2-eda6e9d2aaefef8061058a51a7454106_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-eda6e9d2aaefef8061058a51a7454106_b.jpg\"/><figcaption>表2 内部参数</figcaption></figure><p><b>2.</b> <b>DemDidClass</b></p><p>DemDidClass用于配置快照数据的Did 以及对应的DemDataElementClass。</p><p><b>3.</b> <b>DemExtendedDataRecordClass</b></p><p>该项用于配置扩展数据的id、扩展数据触发储存条件和参考的DemDataElementClass。</p><p><b>4.</b> <b>DemFreezeFrameRecordClass</b></p><p>该项主要用于配置快照数据的触发存储条件以及快照id。</p><p><b>5.</b> <b>DemFreezeFrameClass</b></p><p>该项用于配置快照数据包含的数据，数据来自DemDataElementClass。</p><p>至此，关于Dem模块就大致介绍到此，由于Dem信息很多，难以一一介绍，主要挑了一些主要的进行介绍。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果觉得有帮助，请关注公众号<b>“汽车ECU开发”</b></p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79633617", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 0, 
            "title": "AUTOSAR CanNM介绍", 
            "content": "<p>CanNm模块的作用是实现基于CAN总线的网络管理，使网络中各节点有序的休眠和唤醒，降低整车蓄电池馈电的频率。</p><p>CanNm模块的策略是基于网络上所有节点周期性广播网络管理报文，接收到网络管理报文意味着发送节点想保持网络。如果网络中任何节点准备进入Bus-Sleep Mode，会首先停发网络管理报文，但是只要接收到其他节点发送的网络管理报文，该节点会推迟切换至Bus-Sleep Mode，最后网络上所有的节点都停发网络管理报文，并且专用的计数器(WaitBusSleepTimer)超时，网络上所有的节点会同步休眠。AUTOSAR标准中网络管理的状态机如图1所示。状态机中包含Network Mode、Prepare Bus-Sleep Mode、Bus-SleepMode三种运行模式，另外Network Mode包含RepeatMessage State、Normal Operation State、Ready Sleep State三种状态。下面结合状态机对不同的状态和模式进行介绍。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2bfb20bfca68ffc76f5d080dd49cae74_b.jpg\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"817\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-2bfb20bfca68ffc76f5d080dd49cae74_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;817&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"817\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-2bfb20bfca68ffc76f5d080dd49cae74_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2bfb20bfca68ffc76f5d080dd49cae74_b.jpg\"/><figcaption>​图1 网络管理状态机</figcaption></figure><p><b>Repeat Message State</b></p><p>当节点在Bus-Sleep或Prepare Bus-Sleep模式下接收到网络管理报文（调用CanNm_RxIndication）或者收到网络请求(调用CanNm_NetworkRequest)，状态会切换到Repeat Message State，并且该节点会开始发送网络管理报文，网络管理报文的发送周期通过CANNM_REPEAT_MESSAGE_TIME配置。</p><p>另外在进入该状态时， AUTOSAR提供了一种快速发送多帧网络管理报文的机制(次数和周期一般由OEM来定)，为了快速唤醒该网络上的其他节点。发送完后网络管理报文再按正常周期发送。</p><p><b>Normal Operation State</b></p><p>当节点处在Repeat Message State时，RepeatMessageTimer超时且有网络请求，节点状态会切换到Normal Operation State。当节点在Ready Sleep状态重新收到网络请求(CanNm_NetWorkRequest函数被调用)，也会重新切换到Normal Operation State。</p><p>在Normal Operation State状态下时，控制器处于正常工作，网络管理报文和应用报文正常发送。</p><p><b>Ready Sleep State</b></p><p>该状态下节点停发网络管理报文，但应用报文还正常发送。进入该状态有以下两种情况：</p><p>当节点处于Normal Operation State，释放网络函数CanNm_NetworkRelease被调用，状态会立即切换到Ready Sleep State，此时如果网络请求函数CanNm_NetWorkRequest被调用，会重新切换至Normal Operation State。</p><p>当节点处在Repeat MessageState，RepeatMessageTimer还未超时，释放网络函数CanNm_NetworkRelease被调用，状态会切换到Ready Sleep State。</p><p><b>Prepare Bus-Sleep Mode</b></p><p>当节点处于Ready Sleep State状态，且一定时间内未接收到其他节点的网络管理报文，即NMTimeoutTimer超时，节点会切换到Prepare Bus-SleepMode，同时停发应用报文。</p><p>如果在Prepare Bus-Sleep Mode模式时，重新收到网络管理报文和网络请求，节点状态会切换到Repeat Message State。</p><p><b>Bus-Sleep Mode</b></p><p>该模式下节点硬件处于休眠状态，目的是在没有网络需求的时候，ECU处于低功耗状态，减少耗电量，并且激活CAN收发器的唤醒机制。</p><p>当节点处于Prepare Bus-Sleep Mode时，并且WaitBusSleepTimer超时，节点状态会切换到Bus-Sleep Mode。</p><p>最后介绍一下，网络管理报文的数据段（如图2所示）中有Byte1为Control Bit Vector（如图3所示），它可以作为状态机中不同状态的跳转判断条件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5746c59abb58e56c5098392d937e361c_b.jpg\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb\" width=\"780\" data-original=\"https://pic1.zhimg.com/v2-5746c59abb58e56c5098392d937e361c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;780&#39; height=&#39;193&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"780\" data-original=\"https://pic1.zhimg.com/v2-5746c59abb58e56c5098392d937e361c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5746c59abb58e56c5098392d937e361c_b.jpg\"/><figcaption>图2 NM PDU</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cd484e9042bbb2c75b707a8492c0e2d6_b.jpeg\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic3.zhimg.com/v2-cd484e9042bbb2c75b707a8492c0e2d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;777&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"777\" data-original=\"https://pic3.zhimg.com/v2-cd484e9042bbb2c75b707a8492c0e2d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cd484e9042bbb2c75b707a8492c0e2d6_b.jpeg\"/><figcaption>图3  Control Bit Vetor</figcaption></figure>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77602388", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "AUTOSAR BswM介绍", 
            "content": "<p>BswM模块属于模式管理的一部分，其主要功能为模式仲裁、模式控制。</p><p><b>模式仲裁</b></p><p>模式仲裁是接收来自SWC或其他BSW模块的模式请求和通知，根据简单的规则作出模式切换。其分为仲裁规则、模式条件和逻辑表达式和模式请求接口三部分</p><p>1、模式请求接口</p><p>模式请求接口用于确定模式的请求源、模式仲裁方式以及初始值。其中模式请求源是指模式通知的来源。</p><p>模式仲裁方式是指立即处理（Immediate）或推后仲裁(Deferred)，立即处理为当收到模式切换请求后立即进行模式仲裁，而推后仲裁则是在BswM的MainFunction中进行仲裁，类似于轮询的机制，其调用区别请参考图1。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c09471f11ec2a7e891d58fc414596a53_b.jpg\" data-size=\"normal\" data-rawwidth=\"758\" data-rawheight=\"942\" class=\"origin_image zh-lightbox-thumb\" width=\"758\" data-original=\"https://pic4.zhimg.com/v2-c09471f11ec2a7e891d58fc414596a53_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;758&#39; height=&#39;942&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"758\" data-rawheight=\"942\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"758\" data-original=\"https://pic4.zhimg.com/v2-c09471f11ec2a7e891d58fc414596a53_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c09471f11ec2a7e891d58fc414596a53_b.jpg\"/><figcaption>图1 Immediate和Deferred的区别</figcaption></figure><p>初始值的配置是在BswMModeInitValue选项，如果初始值没有配置，BswM中的模式控制中将其视为未定义，只有当SWC或其他BSW模块有模式请求时才会更新模式。</p><p>2、模式条件和逻辑表达式</p><p>模式条件是指模式请求是否EQUAL(等于)或NOT_EQUAL(不等于)某种预先设置的模式。逻辑表达式是将不同的模式条件通过逻辑标识符AND，OR，XOR，NAND组合起来。</p><p>如图2所示，Normal_Mode==True和Ifc1_Bus_Off==false是两个简单的模式条件，通过&amp;&amp;的方式组合成一个逻辑表达式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b52bd527a1771cdf35ef0cccaecaa760_b.jpg\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb\" width=\"595\" data-original=\"https://pic1.zhimg.com/v2-b52bd527a1771cdf35ef0cccaecaa760_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;595&#39; height=&#39;474&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"595\" data-original=\"https://pic1.zhimg.com/v2-b52bd527a1771cdf35ef0cccaecaa760_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b52bd527a1771cdf35ef0cccaecaa760_b.jpg\"/><figcaption> 图 2 简单的规则示例</figcaption></figure><p>3、仲裁规则</p><p>仲裁规则是将逻辑表达式与实际执行动作有序的组合在一起，如图1所示，当逻辑表达式为True时执行theTrue Action List,当为False时执行theFalse Action List。</p><p><b>模式控制</b></p><p>模式控制部分用于开发实际的执行动作，当模式仲裁完成后，会触发不同的动作序列（Action List），动作序列由不同的动作(Action)组成，如图3所示。对于动作有以下三种类型：</p><p>&lt;1、调用预设的动作，包括调用其他BSW模块或RTE；</p><p>&lt;2、链接到其他动作序列；</p><p>&lt;3、模式仲裁规则，当相关的动作序列运行，这些规则会被评估。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-14f550b11dc9ff7ea5387ad4319a7b66_b.jpg\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic3.zhimg.com/v2-14f550b11dc9ff7ea5387ad4319a7b66_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;501&#39; height=&#39;371&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"501\" data-original=\"https://pic3.zhimg.com/v2-14f550b11dc9ff7ea5387ad4319a7b66_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-14f550b11dc9ff7ea5387ad4319a7b66_b.jpg\"/><figcaption>图3 Action List和Action</figcaption></figure><p>另外对于动作序列的执行有Triggered和Conditional两种方式，其中Triggered表示只有当规则仲裁的结果发生改变才会执行该动作序列，Conditional则是每次规则仲裁完都执行该动作序列。</p><p>最后分享两张图，该图能很好的帮助理解BswM模块。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8d3006da6ef63bc3505bb833d8801958_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"926\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb\" width=\"926\" data-original=\"https://pic1.zhimg.com/v2-8d3006da6ef63bc3505bb833d8801958_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;926&#39; height=&#39;537&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"926\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"926\" data-original=\"https://pic1.zhimg.com/v2-8d3006da6ef63bc3505bb833d8801958_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8d3006da6ef63bc3505bb833d8801958_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ae9136bb30ca59839d39cd3b5064c988_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb\" width=\"930\" data-original=\"https://pic1.zhimg.com/v2-ae9136bb30ca59839d39cd3b5064c988_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;930&#39; height=&#39;525&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"930\" data-original=\"https://pic1.zhimg.com/v2-ae9136bb30ca59839d39cd3b5064c988_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ae9136bb30ca59839d39cd3b5064c988_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果大家觉得有帮助，麻烦关注下面的公众号：<b>汽车ECU开发</b>，或者扫码：</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\"/></figure><p><br/> </p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/76597702", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "AUTOSAR DCM介绍", 
            "content": "<p>AUTOSAR诊断协议栈包含DCM和DEM两个模块，其中DEM负责DTC相关的参数实现(<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483704%26idx%3D1%26sn%3Dcf39d31f14177d96a0f8ba15c8937584%26chksm%3Dcf9c48b1f8ebc1a7d486778d3e7d664e1237ce255c19187154651932f9a19347cd989c3e4509%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">诊断Dem模块介绍</a>)，而DCM模模块主要实现UDS和OBD的诊断服务，就是实现之前UDS文章提到的服务和OBD相关的服务。</p><p>DCM模块主要负责处理诊断数据流和管理诊断状态，包括诊断会话和安全状态，DCM模块能检查诊断服务的请求是否满足条件。DCM在AUTOSAR架构中的概略图如图1所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5a718d6dfcc7b6a39515ee8898a6b235_b.jpg\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb\" width=\"686\" data-original=\"https://pic2.zhimg.com/v2-5a718d6dfcc7b6a39515ee8898a6b235_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;686&#39; height=&#39;382&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"686\" data-original=\"https://pic2.zhimg.com/v2-5a718d6dfcc7b6a39515ee8898a6b235_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5a718d6dfcc7b6a39515ee8898a6b235_b.jpg\"/><figcaption>图1 DCM模块</figcaption></figure><p>DCM模块由三个子模块构成，分别是DSL(DiagnosticSession layer)、DSD(Diagnostic Service Dispatcher)、DSP(Diagnostic Service Processing)，其示意图如图2所示。</p><p>其中DSL用于确定诊断数据请求和响应的数据流；监控和确保诊断请求和响应的时序，管理诊断状态（特别是诊断会话和安全状态）。DSD用于处理诊断数据流。将接收到的诊断请求转发给数据处理器；当数据处理器触发时，通过PDUR传输诊断响应；DSP用于处理实际的诊断请求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3f83f39c340f1d865cb377bb22cf0dcc_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"402\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic1.zhimg.com/v2-3f83f39c340f1d865cb377bb22cf0dcc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;684&#39; height=&#39;402&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"402\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"684\" data-original=\"https://pic1.zhimg.com/v2-3f83f39c340f1d865cb377bb22cf0dcc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3f83f39c340f1d865cb377bb22cf0dcc_b.jpg\"/><figcaption>图2 DCM模块内部子模块</figcaption></figure><p>下面主要针对三个模块进行介绍。</p><p><b>DSL(Diagnostic Session layer)</b></p><p>DSL用于处理诊断数据请求和响应的数据流；监控和确保诊断请求和响应的时序。</p><p>1.处理诊断请求</p><p>当收到诊断请求时，PDUR调用Dcm_StartOfReception()和Dcm_CopyRxData()函数将收到的诊断请求数据放置在DCM模块的Buffer中，然后PDUR调用Dcm_TpTxConfirmation()函数通知Dcm模块接收到了新的诊断请求。</p><p>2. 处理诊断响应</p><p>当需要响应诊断请求时，DSL模块通过调用PduR_DcmTransimit()和Dcm_CopyTxData()将数据传递至PDUR模块，其中PduR_DcmTransimit()函数只是传递长度信息、地址信息，数据是通过Dcm_CopyTxData()函数传递至PDUR模块，当数据传输成功后，PDUR模块通过Dcm_TpTxConfirmation()函数告知DCM数据接收成功。</p><p>3. 管理安全等级</p><p>DSL提供Dcm_GetSecurityLevel()、DslInternal_SetSecurityLevel()两个函数分别用于获取当前的安全等级和设置安全等级。</p><p>对于配置层面而言，DSL菜单主要是配置诊断帧，包括物理寻址和功能寻址，单次通信的最大Buffer，以及时间参数，包括回复0x78的时间和为了防止诊断服务异常，允许0x78的最大次数等。</p><p><b>DSD(Diagnostic Service Dispatcher)</b></p><p>DSD模块负责检查诊断请求的有效性（诊断会话、安全访问级别、应用程序权限的验证），并跟踪服务请求执行的进度。</p><p>1.检查诊断服务</p><p>当DSL接收到新的诊断请求，DSL通过内部接口通知DSD，如图3所示。DSD调用Dcm_GetSesCtrlType()、Dcm_GetSecurityLevel()获取当前的Session和安全等级，DSD模块会在当前Session的“Service Identifier Table”检查诊断请求SID是否在其中，如果不在table中，DSD会发送NRC 0x7F，如果诊断服务支持，但当前Session不支持该子服务，DSD会发送NRC 0x7E；然后检查当前安全等级是否满足条件，如果当前安全等级不支持该诊断请求，DSD会发送NRC 0x33。最后检查数据的长度。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2490c92ad35d5fd7ffb6a2d45bddaf31_b.jpg\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb\" width=\"716\" data-original=\"https://pic2.zhimg.com/v2-2490c92ad35d5fd7ffb6a2d45bddaf31_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;716&#39; height=&#39;148&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"716\" data-original=\"https://pic2.zhimg.com/v2-2490c92ad35d5fd7ffb6a2d45bddaf31_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2490c92ad35d5fd7ffb6a2d45bddaf31_b.jpg\"/><figcaption>图3 DSL与DSD的交互</figcaption></figure><p>2.汇总响应数据</p><p>当DSP模块完成诊断请求处理后，DSD负责将整理响应数据。并发送至DSL。</p><p>DSD模块将服务标识符(SID)(如果是负反馈，则为0x7F)和响应的数据流添加至“Dcm_MsgContextType”。然后DSD将其传送至缓冲区，并在缓冲区的第一个字节添加SID。</p><p>对于配置而言，DSD主要是配置所需要实现的服务，以及服务所支持的session以及服执行的安全等级。</p><p><b>DSP(Diagnostic Service Processing)</b></p><p>DSP用于实现不同服务的处理，当接收到DSD请求处理诊断服务，DSP的处理过程如下：</p><p>1、分析接收的请求信息，调用不同的诊断服务实现函数；</p><p>2、检查格式以及是否支持所寻址的子功能；</p><p>3、获取数据或者调用DEM、SWC或者其他BSW模块的接口。如图4所示。比如0x22和0x2E服务需要调用SWC的数据接口进行读写；0x28需要调用BswM的逻辑实现关闭不同的CAN报文；0x19服务需要调用DEM模块获取快照数据和扩展数据。</p><p>4、汇总响应数据。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e467fd5cba1324a1f389536099e691d4_b.jpg\" data-size=\"normal\" data-rawwidth=\"628\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb\" width=\"628\" data-original=\"https://pic1.zhimg.com/v2-e467fd5cba1324a1f389536099e691d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;628&#39; height=&#39;466&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"628\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"628\" data-original=\"https://pic1.zhimg.com/v2-e467fd5cba1324a1f389536099e691d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e467fd5cba1324a1f389536099e691d4_b.jpg\"/><figcaption>图4 DSP对外的API</figcaption></figure><p>对于配置而言，DSP模块配置项比较杂，比如：</p><p>1.DID的实现，包括DcmDspData用于配置DID的数据类型，数据长度，以及接口类型；DcmDspDidInfo用于配置DID的读写功能；DcmDspDids用于汇总DcmDspDidInfo和DcmDspData，并且添加DID value。</p><p>2.安全等级的实现，包括种子和秘钥的位数、最大的错误访问次数，以及时间参数。</p><p>3.Session的配置，包括Session的等级，Session是否支持跳转至Boot，以及时间参数P2 ServeMax和P2* ServeMax。</p><p>总体来讲DCM模块主要是实现UDS和OBD诊断服务的实现，但是DCM跟其他模块的交互比较频繁，需要了解诊断服务的机制需要其他模块配合，比如BswM、DEM、EcuM以及SWC等。</p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/76438511", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "什么是V2X", 
            "content": "<p> V2X即Vehicle-to-Everything，是智能汽车和智能交通的支撑技术之一。如图1所示，V2X包含车辆与车辆V2V(Vehicle-to-Vehicle)、车辆与基础设施V2I（Vehicle-to-Infrastructure）、车辆与行人V2P(Vehicle-to-Pedestrian)、车辆与外部网络V2N（Vehicle-to-Network）等各种应用通信应用场景。目前而言，基于V2V通信车辆能实现前方碰撞预警、变道辅助、左转辅助、协同式自适应巡航控制等，基于V2I通信可以实现速度建议、交通优先权、路况预警、闯红灯预警、当前天气影响预警、停车位和充电桩寻位等应用；基于V2P通信，能实现弱势道路使用者的预警和防护，基于V2N通信可实现实时交通路线规划、地图更新等服务。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-74f3d4073f1f2f8bc46943abb5bffc53_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-74f3d4073f1f2f8bc46943abb5bffc53_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;447&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-74f3d4073f1f2f8bc46943abb5bffc53_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-74f3d4073f1f2f8bc46943abb5bffc53_b.jpg\"/><figcaption>图1 V2X示例</figcaption></figure><p>V2X的目的是减少交通事故，降低交通拥堵提高交通效率，减少汽车污染物的排放等。美国交通部研究表明，如果全国所有车辆具备基于V2V的交叉口移动辅助和左转辅助功能，每年能够减少40~60万的碰撞事故和19~27万的伤亡人数，挽救780~1080条生命，另外如果再加上其他的V2V和V2I应用，V2X系统最高能够减少80%的非酒精类汽车交通事故。此外V2X技术将使自适应协同驾驶成为可能，从而减少CO2、CO、铅及硫氧化合物等污染物的排放，欧洲eCoMove项目研究成果表明，具备V2X功能的车辆能减少4%~25%的油耗和污染物排放。同时V2X也是实现自动驾驶的重要手段，能够弥补摄像头、雷达等车载传感器视距不足的缺陷，并且提高车辆在交叉口、恶劣天气环境等特殊条件下的感知能力。</p><p><b>V2X技术方案</b></p><p>目前国际上主要有DSRC（专用短程通信）和C-V2X（基于蜂窝网络的V2X）两种技术方案。其中DSRC技术发展时间较久，早在1992年美国ASTM就开始发展DSRC技术，美国和日本已经形成了完善的标准体系和产业布局；C-V2X技术依靠移动网络的发展，正处于快速发展的阶段，得到中国、欧盟等国家的高度重视。</p><p><b>DSRC技术</b></p><p>DSRC由物理层标准IEEE 802.11P和网络层标准IEEE1609构成，信息内容和结构由SAE的SAEJ2735、SAE2945标准规范构成。DSRC是一种双向半双工中短距无线通信技术，通信距离一般在数十米（10m~30m）,可实现高速数据传输，带宽可达3~27Mb/s。能指定授权带宽，实现安全可靠的通信；能快速获取网络，实现主动安全相关应用的高速更新；通信延迟能达到毫秒级，满足车辆信息交互的时间要求；高可靠性满足车辆高速行驶下工作，并且性能不会受极端天气的影响，支持V2V和V2I通信，有助于普遍部署应用。</p><p>美国将DSRC视为V2X系统的主要实现手段。依托IEEE和SAE两大协会完成了标准协议框架的制定，如图2所示。早在1999年美国交通部便选定DSRC作为V2V通信方案，迄今为止已经投入了大约10亿美元进行开发测试。2011年8月启动的“轻型车辆驾驶员接受度诊所”项目，在美国6个地方设立不同的应用环境，用于评估用户对V2V安全应用的接受程度，得到了通用、福特、丰田、奔驰等车企的参与。结果表明58%的受访者愿意以200美元以下的价格购买V2V相关安全功能。美国高速公路安全管理局在2016年12月发布了V2V通信法规提案，计划从2021年起实施新的法规，要求所有新增轻型车必须搭载基于DSRC的V2V技术。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-41a056b02bab0b49d9eaf3ce3bf5f6b1_b.jpg\" data-size=\"normal\" data-rawwidth=\"449\" data-rawheight=\"265\" class=\"origin_image zh-lightbox-thumb\" width=\"449\" data-original=\"https://pic2.zhimg.com/v2-41a056b02bab0b49d9eaf3ce3bf5f6b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;449&#39; height=&#39;265&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"449\" data-rawheight=\"265\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"449\" data-original=\"https://pic2.zhimg.com/v2-41a056b02bab0b49d9eaf3ce3bf5f6b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-41a056b02bab0b49d9eaf3ce3bf5f6b1_b.jpg\"/><figcaption>图2 DSRC协议栈</figcaption></figure><p>尽管DSRC技术发展早，并且得到了广泛的实际验证和应用，但是也存在局限性：</p><p>1.DSRC采用载波监听多路访问协议，在高密度的交通情况下会出现数据包译码失败的可能；</p><p>2.DSRC物理成的正交频分复用技术限制了最大的传输功率和传输范围；</p><p>3.DSRC属于视距传输技术，障碍物较多的城市工况对其构成挑战；</p><p><b>C-V2X技术</b></p><p>针对DSRC技术可能存在的问题，通信产业提出了C-V2X解决方案。C-V2X是一项利用和提高现有的长期演进技术（Long Term Evolution，LTE）特点及网络要素的信息技术，是3GPP Realease-14规范的一部分，该初始标准侧重于V2V通信，并逐渐增强对其他V2X操作场景的支持。目前3GPP组织已经完成了LTE-V2X的业务需求、网络架构、无线接入技术和V2V/V2X业务方面的研究和标准化，并将LTE-V2X标准立项申请提交到国际标准化组织ISO。2018年11月针对智能交通系统中的LTE-V2X应用ISO/DIS17515-3标准已经进入最终的国际标准草案阶段。</p><p>相比于DSRC技术，C-V2X具有独有的优势和特点，如图3所示。首先C-V2X物理层采用频分复用技术，提高了链路预算增益，能比DSRC提供更长的预警时间和2倍的通信范围；其次5G技术的导入以及移动生态系统的完善将为C-V2X制定清晰的技术演变路线支持；另外利用移动蜂窝技术，能够快速的实现C-V2X系统的商业化，并且和车载远程信息处理服务相结合，进一步提高效率、降低成本。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3dc79f39e3d43c07956e87990cdce47c_b.jpg\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"468\" data-original=\"https://pic1.zhimg.com/v2-3dc79f39e3d43c07956e87990cdce47c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;468&#39; height=&#39;293&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"468\" data-original=\"https://pic1.zhimg.com/v2-3dc79f39e3d43c07956e87990cdce47c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3dc79f39e3d43c07956e87990cdce47c_b.jpg\"/><figcaption>图3 DSRC与C-V2X特点对比</figcaption></figure><p>然而目前C-V2X的基础技术LTE还存在不足：</p><p>1. 目前蜂窝网络难以达到毫秒级的低延迟；</p><p>2.  LTE采用增强型多媒体广播多波等技术进行单点到多点的接口管理，但是主要支持静态场景，对于车辆拥挤的情况可能无法提供所需的效能；</p><p>未来5G将充分考虑这方面的特殊场景，针对汽车使用场景，5G V2X将具备如下特点：</p><p>1 . 采用毫米波频谱提升频谱带宽，实现超高速数据传输；</p><p>2.  吞吐量达到1Gb/s以上，具有更好的网络覆盖均匀性；</p><p>3 . 实现毫秒级的端对端延迟；</p><p>4 . 实现穿透式增强现实，查看前方车辆反馈的视频，并发现弱势道路使用者；</p><p>目前全球正在加紧制定5G国际技术标准，中国已于2017年展开5G第二阶段测试，在2018年进行大规模组网实验，于今年6月正式发放5G牌照，标志中国5G由试运行转至商用。由于LTE的V2X平滑演进至5G，基于LTE的C-V2X能够与未来5G进行复用。</p><p>欧洲和亚洲是C-V2X的积极倡导者，并且结成了各种旨在开发、测试，推进C-V2X的伙伴关系，包括法国“驶向5G”战略合作、德国“汽车连接未来一切”等。中国将V2X作为智能网联车和智能交通的一部分，纳入“中国制造2025”“互联网+”等国家战略。目前国内积极在开展5G车辆网方面的部署，北京积极推动5G车辆网重点示范应用城市，并且2020年将在重点区域完成5G车联网建设；2019年7月14日国内首个自动驾驶5G车联网示范区在在广州黄埔区开建；南京铁塔、开沃汽车和大唐移动合作，共同推荐5G智能网联汽车业务的合作。另外由于美国在继续使用DSRC还是使用C-V2X上存在分歧，丰田公司搁置了原定2021在美国车型部署DSRC技术。</p><p> 如果觉得文章写的有帮助，麻烦关注下面公众号，谢谢。</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75422988", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "UDS诊断服务—上传下载单元、Routine单元", 
            "content": "<p>UDS诊断服务第四篇，介绍诊断服务的最后两单元：上传下载单元和Routine单元。其中上传下载单元包含图1所示的诊断服务，用于传输较大的数据，通常用于刷写程序。Routine单元仅包含31服务，通常用于实现用户的自定义功能，比如CRC校验。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cb2904da71c2ec9f6d9e75e0d80b9483_b.jpg\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb\" width=\"747\" data-original=\"https://pic4.zhimg.com/v2-cb2904da71c2ec9f6d9e75e0d80b9483_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;747&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"747\" data-original=\"https://pic4.zhimg.com/v2-cb2904da71c2ec9f6d9e75e0d80b9483_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cb2904da71c2ec9f6d9e75e0d80b9483_b.jpg\"/><figcaption>图1 上传下载单元</figcaption></figure><p><b>上传下载单元</b></p><p>该单元包含0x34、0x35、0x36、0x37、0x38五个诊断服务，分别从上至下对应图1中的解释，下面主要介绍前四个诊断服务，以及之间的相互关联。</p><p><b>RequestDownload 服务(0x34)</b></p><p>该服务用于请求服务端启动下载数据，客户端请求数据的格式如图2所示，其中：</p><p>Byte1：为服务号0x34；</p><p>Byte2：为DataFormatIdentifier，其中高四位用于表示compressionMethod，表示数据压缩的方法，第四位表示encrypting Method数据加密的方法，两者都为0x00时表示不使用数据加密和数据压缩，如果不为0x00，是需要厂商自定义；</p><p>Byte3：用于表示地址和数据长度占的字节数。低四位表示地址占的字节数，高四位表示数据长度占的字节数；</p><p>N：用于表示起始地址，N的大小由Byte2的低四位决定；</p><p>M：用于表示数据长度，M的大小由Byte2的高四位决定；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6b25249db1497fce6170a5a5ed216a7f_b.jpg\" data-size=\"normal\" data-rawwidth=\"928\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb\" width=\"928\" data-original=\"https://pic4.zhimg.com/v2-6b25249db1497fce6170a5a5ed216a7f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;928&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"928\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"928\" data-original=\"https://pic4.zhimg.com/v2-6b25249db1497fce6170a5a5ed216a7f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6b25249db1497fce6170a5a5ed216a7f_b.jpg\"/><figcaption>图2 0x34服务请求数据格式</figcaption></figure><p>服务端正响应的数据格式如图3所示，其中：</p><p>Byte1：服务正响应，该位为0x74；</p><p>Byte2：其中高四位表示最大的数据传输量该值占的字节数，即为N；</p><p>N：表示接下来数据传输一次传输的最大值，即0x36服务一次传输的最大数据量；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f110b9724b651784222266d3db5374c1_b.jpg\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic2.zhimg.com/v2-f110b9724b651784222266d3db5374c1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;864&#39; height=&#39;109&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"864\" data-original=\"https://pic2.zhimg.com/v2-f110b9724b651784222266d3db5374c1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f110b9724b651784222266d3db5374c1_b.jpg\"/><figcaption>图3 0x34服务正响应数据格式</figcaption></figure><p>该服务的消息示例如图4所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-feda53a18d4fc43a0a14ea2799c974d7_b.jpg\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb\" width=\"695\" data-original=\"https://pic4.zhimg.com/v2-feda53a18d4fc43a0a14ea2799c974d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;695&#39; height=&#39;373&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"695\" data-original=\"https://pic4.zhimg.com/v2-feda53a18d4fc43a0a14ea2799c974d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-feda53a18d4fc43a0a14ea2799c974d7_b.jpg\"/><figcaption>图4 0x34示例</figcaption></figure><p><b>RequestUpload服务(0x35)</b></p><p>该服务用于客户端请求服务端上传数据，其数据格式与0x34一样。简单再重复一下。其客户端请求数据格式如图5所示。</p><p>Byte0、Byte1、Byte2、Byte3、N、M与0x34请求数据格式中的含义是一样的，不过N、M用于指定的上传数据的起始地址和上传数据的长度。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7d77945a6ae613fd4206b65b556d76b0_b.jpg\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic1.zhimg.com/v2-7d77945a6ae613fd4206b65b556d76b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic1.zhimg.com/v2-7d77945a6ae613fd4206b65b556d76b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7d77945a6ae613fd4206b65b556d76b0_b.jpg\"/><figcaption>图5 0x35服务请求数据格式</figcaption></figure><p>服务端正响应数据格式如图6所示，与0x34的正响应是一样的。</p><p>Byte1：服务正响应，该位为0x75；</p><p>Byte2：其中高四位表示最大的数据传输量该值占的字节数，即为N；</p><p>Byte3：表示接下来数据传输一次传输的最大值，即0x36服务一次传输的最大数据量；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-281be4666ef9ad3689fc7b11b2895d38_b.jpg\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic1.zhimg.com/v2-281be4666ef9ad3689fc7b11b2895d38_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;550&#39; height=&#39;47&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic1.zhimg.com/v2-281be4666ef9ad3689fc7b11b2895d38_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-281be4666ef9ad3689fc7b11b2895d38_b.jpg\"/><figcaption>图6 0x35正响应数据格式</figcaption></figure><p><b>TransferData 服务(0x36)</b></p><p>该服务用于数据传输，包括客户端向服务端下载数据、服务端向客户端上传数据。数据数传的方向由上一个服务来定，如果上一个服务为0x34，则实现数据下载，如果为0x35，则实现数据上传。</p><p>客户端发送0x36的数据请求传输格式如图7所示，其中：</p><p>Byte1：表示服务号0x36；</p><p>Byte2：用于记录传输的数据块次数，也就是说36的调用次数。该值的初始值为0x01，当达到0xFF的时候，如果继续增加，则复位至0x00，然后继续依次增加；</p><p>N：对于下载来说，用于存放需要下载至服务端的数据。对于上传来说，可以用于存放必要的参数，这个由厂商自定义。通常该位不填；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3ab3a40a3817da760d692a9255c5b312_b.jpg\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"68\" class=\"origin_image zh-lightbox-thumb\" width=\"559\" data-original=\"https://pic3.zhimg.com/v2-3ab3a40a3817da760d692a9255c5b312_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;559&#39; height=&#39;68&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"68\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"559\" data-original=\"https://pic3.zhimg.com/v2-3ab3a40a3817da760d692a9255c5b312_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3ab3a40a3817da760d692a9255c5b312_b.jpg\"/><figcaption>图7 0x36请求数据格式</figcaption></figure><p>服务端正响应客户端请求的数据格式如图8所示，其中：</p><p>Byte1：服务正响应，该位为0x76；</p><p>Byte2：该位用于表示传输的次数，即请求时Byte2的值；</p><p>Byte3：对于下载来说，该位需要传输的数据由厂商自定义，可以是checksum，通常不填。对于上传而言，即响应服务端的上传数据请求，用于存放上传至客户端的数据；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e44c1db9842f47a2664425fe3712d185_b.jpg\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"69\" class=\"origin_image zh-lightbox-thumb\" width=\"561\" data-original=\"https://pic2.zhimg.com/v2-e44c1db9842f47a2664425fe3712d185_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;561&#39; height=&#39;69&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"69\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"561\" data-original=\"https://pic2.zhimg.com/v2-e44c1db9842f47a2664425fe3712d185_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e44c1db9842f47a2664425fe3712d185_b.jpg\"/><figcaption>图8 0x36正响应数据格式</figcaption></figure><p>该服务的消息示例如下图9所示。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-818685855f01358cd44bd7f7418afe4a_b.jpg\" data-size=\"small\" data-rawwidth=\"736\" data-rawheight=\"1636\" class=\"origin_image zh-lightbox-thumb\" width=\"736\" data-original=\"https://pic3.zhimg.com/v2-818685855f01358cd44bd7f7418afe4a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;736&#39; height=&#39;1636&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"736\" data-rawheight=\"1636\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"736\" data-original=\"https://pic3.zhimg.com/v2-818685855f01358cd44bd7f7418afe4a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-818685855f01358cd44bd7f7418afe4a_b.jpg\"/><figcaption>图9 0x36示例</figcaption></figure><p><b>RequestTransferExit服务(0x37)</b></p><p>该服务用于退出数据传输，其请求数据格式如图10所示。</p><p>N：该位开放给厂商自定义，长度不定，通常不用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-807951eb7d5c162025018067f8f8fbbe_b.jpg\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-807951eb7d5c162025018067f8f8fbbe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;48&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-807951eb7d5c162025018067f8f8fbbe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-807951eb7d5c162025018067f8f8fbbe_b.jpg\"/><figcaption>图10 0x37请求数据格式</figcaption></figure><p>服务端正响应数据格式如图11所示。</p><p>N：该位开放给厂商自定义，长度不定通常不用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1a9c9ec6ece5a8e9faf5b38b182282c2_b.jpg\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic3.zhimg.com/v2-1a9c9ec6ece5a8e9faf5b38b182282c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;475&#39; height=&#39;48&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"475\" data-original=\"https://pic3.zhimg.com/v2-1a9c9ec6ece5a8e9faf5b38b182282c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1a9c9ec6ece5a8e9faf5b38b182282c2_b.jpg\"/><figcaption>图11 0x37正响应数据格式</figcaption></figure><p>0x37服务的数据格式其实相对很简单，正响应仅有服务号，其数据示例参见图9。</p><p><b>Routine单元</b></p><p><b>RoutineControl服务 (0x31</b>)</p><p>该服务具有很大的灵活性，典型的用法就是用于CRC校验、StayInboot等。客户端通过运行例程控制服务来执行定义的步骤序列并获得相关结果。通常用于控制输出时，该服务用于较复杂的控制，而InputOutputControlByIdentifier用于相对简单的输出控制。</p><p>0x31服务有0x01、0x02、0x03三个子服务。其中0x01表示执行例程，0x02表示停止执行例程，0x03用于读取例程执行的结果。</p><p>客户端请求数据格式如图12所示，其中routineControlOptionRecord用于存放例程所需要的参数，通常由厂商自定义。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4c4e17f9d973c5017fc813b7ab9aaafb_b.jpg\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic4.zhimg.com/v2-4c4e17f9d973c5017fc813b7ab9aaafb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;573&#39; height=&#39;70&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"573\" data-original=\"https://pic4.zhimg.com/v2-4c4e17f9d973c5017fc813b7ab9aaafb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4c4e17f9d973c5017fc813b7ab9aaafb_b.jpg\"/><figcaption>图12 0x31请求数据格式</figcaption></figure><p>服务端正响应的数据格式如图13所示。Byte4为可选项，由厂商自定义，给厂商提供一种支持外部测试设备处理例程的机制。例程状态记录为可选项，通常用于服务端向客户端提供额外的状态信息，例如例程的执行时间。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-577cb192091a51691c9eb996d1de2850_b.jpg\" data-size=\"normal\" data-rawwidth=\"609\" data-rawheight=\"69\" class=\"origin_image zh-lightbox-thumb\" width=\"609\" data-original=\"https://pic1.zhimg.com/v2-577cb192091a51691c9eb996d1de2850_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;609&#39; height=&#39;69&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"609\" data-rawheight=\"69\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"609\" data-original=\"https://pic1.zhimg.com/v2-577cb192091a51691c9eb996d1de2850_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-577cb192091a51691c9eb996d1de2850_b.jpg\"/><figcaption>图13 0x31正响应数据格式</figcaption></figure><p>该服务的数据交互示例如图14所示。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-96e5757ced74cd96f3901b636e6c7f72_b.jpg\" data-size=\"small\" data-rawwidth=\"654\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"654\" data-original=\"https://pic3.zhimg.com/v2-96e5757ced74cd96f3901b636e6c7f72_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;654&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"654\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"654\" data-original=\"https://pic3.zhimg.com/v2-96e5757ced74cd96f3901b636e6c7f72_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-96e5757ced74cd96f3901b636e6c7f72_b.jpg\"/><figcaption>图14 0x31示例</figcaption></figure><p>下面是作者的公众号，如果觉得文章有帮助，可以关注一下，谢谢。</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\"/></figure><p></p><p></p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": [
                {
                    "userName": "这里没有鸡蛋", 
                    "userLink": "https://www.zhihu.com/people/e24853e2d7222eb2872e1cf393f9fff3", 
                    "content": "<p>楼主写的很好可惜没有人评论</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74572991", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "UDS诊断服务—已存数据传输单元、输入输出单元", 
            "content": "<p>UDS诊断服务第三篇，对已存数据传输单元、输入输出单元进行介绍。</p><p><b>​已存数据传输单元</b></p><p>已存数据传输单元仅包含0x14、0x19诊断服务，主要作用是对DTC的诊断信息进行操作，例如读取DTC的快照数据、扩展数据和DTC status（<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg4NjIxODk4Mg%3D%3D%26mid%3D2247483694%26idx%3D1%26sn%3D1ebfe6eda1068d861f8d4f7f2ae5fa15%26chksm%3Dcf9c48a7f8ebc1b1db866d024f31bca891109f0b3ce5d467ab067d3050ef00456ed930613e78%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DTC status介绍</a>）等或者清除DTC诊断信息。</p><p><b>ClearDiagnosticInformation 服务(0x14)</b></p><p>该服务用于清除所有DTC或者某个DTC组（可以分为车身、动力等种类的DTC组，其中 FF FF FF表示所有的DTC）的诊断信息，诊断信息主要包括DTC状态位、快照数据、扩展数据，另外该服务没有子服务。</p><p>0x14服务的数据格式含义如图1所示，其中…表示无效数据AA。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bd7aca501d3b74936f6d898379c019c0_b.jpg\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic1.zhimg.com/v2-bd7aca501d3b74936f6d898379c019c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic1.zhimg.com/v2-bd7aca501d3b74936f6d898379c019c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bd7aca501d3b74936f6d898379c019c0_b.jpg\"/><figcaption>图1 0x14服务数据格式</figcaption></figure><p>0x14服务的消息请求的格式如图2所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-94dcda7b346ceabbb3e9beddb0d081f1_b.jpg\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"819\" data-original=\"https://pic2.zhimg.com/v2-94dcda7b346ceabbb3e9beddb0d081f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;819&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"819\" data-original=\"https://pic2.zhimg.com/v2-94dcda7b346ceabbb3e9beddb0d081f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-94dcda7b346ceabbb3e9beddb0d081f1_b.jpg\"/><figcaption>图2 0x14服务示例</figcaption></figure><p><b>ReadDTCInformation 服务(0x19)</b></p><p>该服务用于读取ECU的DTC诊断信息，例如读取某一DTCstatus的DTC数量，读取某DTC的快照数据或者扩展数据等。该服务支持的子服务如图3所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-15333e7488b8544a2369685769d543bd_b.jpg\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb\" width=\"695\" data-original=\"https://pic2.zhimg.com/v2-15333e7488b8544a2369685769d543bd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;695&#39; height=&#39;165&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"695\" data-original=\"https://pic2.zhimg.com/v2-15333e7488b8544a2369685769d543bd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-15333e7488b8544a2369685769d543bd_b.jpg\"/><figcaption>图3 0x19子服务</figcaption></figure><p>0x19 务的数据格式含义如图4所示， 其中…表示由不同的子服务确定后续数据。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f0377a02dec17e54aef573201365e69e_b.jpg\" data-size=\"normal\" data-rawwidth=\"334\" data-rawheight=\"85\" class=\"content_image\" width=\"334\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;334&#39; height=&#39;85&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"334\" data-rawheight=\"85\" class=\"content_image lazy\" width=\"334\" data-actualsrc=\"https://pic3.zhimg.com/v2-f0377a02dec17e54aef573201365e69e_b.jpg\"/><figcaption>图4 0x19服务数据格式</figcaption></figure><p>0x19服务的消息请求格式如图5所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-76f22cc91694d50b97658368d90ca3fb_b.jpg\" data-size=\"normal\" data-rawwidth=\"505\" data-rawheight=\"402\" class=\"origin_image zh-lightbox-thumb\" width=\"505\" data-original=\"https://pic4.zhimg.com/v2-76f22cc91694d50b97658368d90ca3fb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;505&#39; height=&#39;402&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"505\" data-rawheight=\"402\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"505\" data-original=\"https://pic4.zhimg.com/v2-76f22cc91694d50b97658368d90ca3fb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-76f22cc91694d50b97658368d90ca3fb_b.jpg\"/><figcaption>图5 0x19数据示例</figcaption></figure><p><b>输入输出控制单元</b></p><p>输入输出控制单元仅包含一个诊断服务，即为0x2F。该服务用于对ECU的输入输出进行控制，比如通过2F服务控制高压主继电器的闭合，或者控制车玻璃的升降。</p><p><b>InputOutputControlByIdentifier 服务(0x2F)</b></p><p>0x2F服务的数据格式含义如图6所示，其中controlOptionRecord由inputOutputControlParameter和controlState组成，inputOutputControlParameter占1byte，表示客户端控制ECU的方式，有以下四种：</p><p>returnControlToECU 0x00：表示客户端不在控制ECU，将控制器还给ECU。</p><p>resetToDefault 0x01 ：表示将DID所引用的参数设置成默认值。</p><p>freezeCurrentState 0x02：表示将DID所引用的参数冻结。</p><p>shortTermAdjustment 0x03：表示将DID所引用的参数进行设置，相当于对ECU进行控制。</p><p>controlState表示将DID设置成该参数值。controlEnableMaskRecord是可选选项，用于某些DID为bit控制的，需要对其他的bit进行屏蔽。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-039b98e285025f934cdd934e3b79b719_b.jpg\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"91\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-039b98e285025f934cdd934e3b79b719_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;91&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"91\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-039b98e285025f934cdd934e3b79b719_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-039b98e285025f934cdd934e3b79b719_b.jpg\"/><figcaption>图6 0x2F数据格式</figcaption></figure><p>0x2F的消息请求的格式如图7所示，其中用于对进气门进行控制，进气门参数对应的DID为0x9B00，参数转换比例为decimal[%]。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-209c884ddb94f7f69f88c2242e82b588_b.jpg\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-209c884ddb94f7f69f88c2242e82b588_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-209c884ddb94f7f69f88c2242e82b588_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-209c884ddb94f7f69f88c2242e82b588_b.jpg\"/><figcaption>图7 0x2F示例</figcaption></figure><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><br/> </p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74434635", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "UDS诊断服务——数据传输单元", 
            "content": "<p>本文为UDS诊断服务的第二篇，主要介绍UDS诊断服务中数据传输单元。该部分所涉及的诊断服务如图1所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3cd54ca5e22647006204b09e53de9b0b_b.jpg\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic4.zhimg.com/v2-3cd54ca5e22647006204b09e53de9b0b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic4.zhimg.com/v2-3cd54ca5e22647006204b09e53de9b0b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3cd54ca5e22647006204b09e53de9b0b_b.jpg\"/><figcaption>图1 数据传输单元</figcaption></figure><p>老套路，针对经常使用的UDS诊断服务进行介绍。</p><p><b>ReadDataByIdentifier服务</b> <b>(0x22)</b></p><p>该服务用于读取一个或者多个被标识的数据记录值，通常是标识是DID(DataIdentifier)，该服务没有子服务。该服务的数据格式含义如图2所示，其中…表示可以为无效数据（AA），也可以是另外的多个DID，格式跟前面的一样。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-66c56802a3a5180bb5007f093d8a9e80_b.jpg\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"86\" class=\"origin_image zh-lightbox-thumb\" width=\"539\" data-original=\"https://pic1.zhimg.com/v2-66c56802a3a5180bb5007f093d8a9e80_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;539&#39; height=&#39;86&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"86\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"539\" data-original=\"https://pic1.zhimg.com/v2-66c56802a3a5180bb5007f093d8a9e80_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-66c56802a3a5180bb5007f093d8a9e80_b.jpg\"/><figcaption>图2 0x22服务数据格式</figcaption></figure><p>0x22服务的消息请求的格式如图3所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a24e149eb78ea9085d474aa9b5402850_b.jpg\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-a24e149eb78ea9085d474aa9b5402850_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;423&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-a24e149eb78ea9085d474aa9b5402850_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a24e149eb78ea9085d474aa9b5402850_b.jpg\"/><figcaption>图3 0x22服务数据示例</figcaption></figure><p><b>WriteDataByIdentifier服务(0x2E)</b></p><p>该服务用于写入一个被标识的数据记录值，通常是标识是DID(DataIdentifier)。作用刚好与0x22相反，该服务没有子服务。该服务的数据格式含义如图4所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9114180f4a3da1fd37572c2e53dc86d7_b.jpg\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"172\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-9114180f4a3da1fd37572c2e53dc86d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;172&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"172\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-9114180f4a3da1fd37572c2e53dc86d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9114180f4a3da1fd37572c2e53dc86d7_b.jpg\"/><figcaption>图4 0x2E服务数据格式</figcaption></figure><p>0x2E服务的消息请求的格式如图5所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-353d4dc46230d36d084356d501fedd4c_b.jpg\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-353d4dc46230d36d084356d501fedd4c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-353d4dc46230d36d084356d501fedd4c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-353d4dc46230d36d084356d501fedd4c_b.jpg\"/><figcaption>图5 0x2E服务数据示例</figcaption></figure><p><b>ReadMemoryByAddress服务（0x23）</b></p><p>该服务与0x22相似，用于读取ECU内部的数据，不同的是0x23服务用于读取指定地址的存储的数据。另外0x23服务也没有子服务。该服务的数据格式含义如图6所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d2fa3b3d87766e24995ea359c7374feb_b.jpg\" data-size=\"normal\" data-rawwidth=\"556\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb\" width=\"556\" data-original=\"https://pic4.zhimg.com/v2-d2fa3b3d87766e24995ea359c7374feb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;556&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"556\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"556\" data-original=\"https://pic4.zhimg.com/v2-d2fa3b3d87766e24995ea359c7374feb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d2fa3b3d87766e24995ea359c7374feb_b.jpg\"/><figcaption>图6 0x23服务数据格式</figcaption></figure><p>0x23服务的消息请求的格式如图7所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-738f08d2de0a31850823524aca578c80_b.jpg\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb\" width=\"564\" data-original=\"https://pic1.zhimg.com/v2-738f08d2de0a31850823524aca578c80_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;564&#39; height=&#39;382&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"564\" data-original=\"https://pic1.zhimg.com/v2-738f08d2de0a31850823524aca578c80_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-738f08d2de0a31850823524aca578c80_b.jpg\"/><figcaption>图7 0x23服务数据示例</figcaption></figure><p><b>WriteMemoryByAddress服务(0x3D)</b></p><p>该服务用于对固定的地址写数据，与0x23刚好相反。并且该服务也没有子服务。该服务的数据格式含义如图8所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8818a164529fcc8d4c3cb0d9b5cbb3cc_b.jpg\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-8818a164529fcc8d4c3cb0d9b5cbb3cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-8818a164529fcc8d4c3cb0d9b5cbb3cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8818a164529fcc8d4c3cb0d9b5cbb3cc_b.jpg\"/><figcaption>图8 0x3D服务数据格式</figcaption></figure><p>0x3D服务的消息请求的格式如图9所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c749f96c3935ba0750809482f014c1da_b.jpg\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic3.zhimg.com/v2-c749f96c3935ba0750809482f014c1da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;507&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic3.zhimg.com/v2-c749f96c3935ba0750809482f014c1da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c749f96c3935ba0750809482f014c1da_b.jpg\"/><figcaption>图9 0x3D服务数据示例</figcaption></figure><p>至此将数据传输单元常用的诊断服务介绍完毕，<u>下篇介绍已存数据传输单元</u>。</p>", 
            "topic": [
                {
                    "tag": "汽车设计", 
                    "tagLink": "https://api.zhihu.com/topics/19593808"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73541543", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "UDS诊断服务——诊断和通信管理单元", 
            "content": "<p>UDS诊断服务分为诊断和通信管理功能单元、数据传输功能单元、已存储数据传输功能单元、输入输出控制功能单元、Routine功能单元、上传下载功能单元。各个功能类中包含相关的诊断服务，首先介绍诊断和通信管理功能单元。</p><p>诊断与通信管理功能单元包含图1中的诊断服务。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5d1419e7e540a95e6a091ddc4020e11a_b.jpg\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb\" width=\"743\" data-original=\"https://pic3.zhimg.com/v2-5d1419e7e540a95e6a091ddc4020e11a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;743&#39; height=&#39;339&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"743\" data-original=\"https://pic3.zhimg.com/v2-5d1419e7e540a95e6a091ddc4020e11a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5d1419e7e540a95e6a091ddc4020e11a_b.jpg\"/><figcaption>图1 诊断与通信管理功能单元</figcaption></figure><p>下面针对诊断与通信管理功能单元中比较常用的诊断服务进行介绍。</p><p><b>DiagnosticSessionControl服务（0x10）</b></p><p>该服务用于使能不同的Session，其中不同的Session下支持特定的诊断服务，如图2所示DefaultSession模式下支持0x11、0x27、0x28服务，而在ExtendedSession下只支持0x11、0x28服务。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f98769a32ff6b825b0065aac1fda9584_b.jpg\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic1.zhimg.com/v2-f98769a32ff6b825b0065aac1fda9584_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;906&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"906\" data-original=\"https://pic1.zhimg.com/v2-f98769a32ff6b825b0065aac1fda9584_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f98769a32ff6b825b0065aac1fda9584_b.jpg\"/><figcaption>图2 不同Session下所支持的UDS服务示例</figcaption></figure><p>该服务支持的子服务如下图3所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-203a88c61aeee75865477aed1b4b07b8_b.jpg\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"907\" data-original=\"https://pic1.zhimg.com/v2-203a88c61aeee75865477aed1b4b07b8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;907&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"907\" data-original=\"https://pic1.zhimg.com/v2-203a88c61aeee75865477aed1b4b07b8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-203a88c61aeee75865477aed1b4b07b8_b.jpg\"/><figcaption>图3 0x10服务所支持的子服务</figcaption></figure><p>0x10 服务的消息格式如图4所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e2555a773356ab0b01400f734d606345_b.jpg\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"911\" data-original=\"https://pic2.zhimg.com/v2-e2555a773356ab0b01400f734d606345_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;911&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"911\" data-original=\"https://pic2.zhimg.com/v2-e2555a773356ab0b01400f734d606345_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e2555a773356ab0b01400f734d606345_b.jpg\"/><figcaption>图3 0x10服务的消息格式</figcaption></figure><p><b>EcuReset 服务（0x11）</b></p><p>该服务主要用于执行不同的复位，复位类型通过子服务来区分，如图4所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-261eb6bb938bc0a166b6d68aaf861eea_b.jpg\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"909\" data-original=\"https://pic3.zhimg.com/v2-261eb6bb938bc0a166b6d68aaf861eea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;909&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"909\" data-original=\"https://pic3.zhimg.com/v2-261eb6bb938bc0a166b6d68aaf861eea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-261eb6bb938bc0a166b6d68aaf861eea_b.jpg\"/><figcaption>图4 0x11服务所支持的子服务</figcaption></figure><p>0x11服务的消息格式如图5所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bc8832b8ec4eac655528dcc8fe27eeb5_b.jpg\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb\" width=\"912\" data-original=\"https://pic2.zhimg.com/v2-bc8832b8ec4eac655528dcc8fe27eeb5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;912&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"912\" data-original=\"https://pic2.zhimg.com/v2-bc8832b8ec4eac655528dcc8fe27eeb5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bc8832b8ec4eac655528dcc8fe27eeb5_b.jpg\"/><figcaption>图5 0x11服务的消息格式</figcaption></figure><p><b>SecurityAceess服务（0x27）</b></p><p>对于某些操作内存（比如0x2E）或者关闭软件的某些功能（比如0x2F）诊断服务不能随意操作，因为这些服务的执行会影响软件的正常运行，对ECU带来安全隐患，该服务用于安全校验，为这些影响软件安全的服务提供安全访问保护，必须通过0x27服务解锁后，才能正常执行相关的服务。</p><p>0x27服务的典型使用方法如下：</p><p>1、客户端（诊断设备）向服务端（ECU）请求一个seed。</p><p>2、服务端发送seed给客户端。</p><p>3、客户端根据seed算出一个key，并发送给服务端。</p><p>4、服务端自己根据之前发送的seed算出一个key与客户端反馈的key进行对比，如果相同，则通过安全校验。</p><p>其支持的子服务如下图6所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dbc3cb66f3a59031b317c3e7ddcd29a0_b.jpg\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic1.zhimg.com/v2-dbc3cb66f3a59031b317c3e7ddcd29a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;906&#39; height=&#39;321&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"906\" data-original=\"https://pic1.zhimg.com/v2-dbc3cb66f3a59031b317c3e7ddcd29a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dbc3cb66f3a59031b317c3e7ddcd29a0_b.jpg\"/><figcaption>图6 0x27服务所支持的子服务</figcaption></figure><p>0x27服务的消息请求的格式如图7所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0cab60f2a02b0d473b79f5fbe76710e5_b.jpg\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb\" width=\"913\" data-original=\"https://pic2.zhimg.com/v2-0cab60f2a02b0d473b79f5fbe76710e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;913&#39; height=&#39;452&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"913\" data-original=\"https://pic2.zhimg.com/v2-0cab60f2a02b0d473b79f5fbe76710e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0cab60f2a02b0d473b79f5fbe76710e5_b.jpg\"/><figcaption>图7 0x27服务的消息格式</figcaption></figure><p><b>CommunicationControl服务(0x28)</b></p><p>该服务用于开启和关闭通信消息的发送或者接收。其支持的子服务如图8所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1d82f1918f51ceb73e1060fdaa4542e0_b.jpg\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"909\" data-original=\"https://pic1.zhimg.com/v2-1d82f1918f51ceb73e1060fdaa4542e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;909&#39; height=&#39;390&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"909\" data-original=\"https://pic1.zhimg.com/v2-1d82f1918f51ceb73e1060fdaa4542e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1d82f1918f51ceb73e1060fdaa4542e0_b.jpg\"/><figcaption>图8 0x28服务支持的子服务</figcaption></figure><p>0x28服务的消息请求的格式如图9所示.对于关闭或者开启通信的功能，可以针对不同类型的报文进行处理，比如应用报文，网络管理报文。可以通过有效数据位的第三个byte表示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-31901bfdf864d387199a812048b04b3b_b.jpg\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"912\" data-original=\"https://pic4.zhimg.com/v2-31901bfdf864d387199a812048b04b3b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;912&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"912\" data-original=\"https://pic4.zhimg.com/v2-31901bfdf864d387199a812048b04b3b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-31901bfdf864d387199a812048b04b3b_b.jpg\"/><figcaption>图9 0x28服务的消息格式</figcaption></figure><p><b>ControlDTCSetting服务（0x85）</b></p><p>该服务用于控制DTC的存储，主要是全局的控制，不能针对单个DTC进行控制。该服务支持的子服务如图10所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4ee74791e591375ae331c5f87b3c45c1_b.jpg\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic2.zhimg.com/v2-4ee74791e591375ae331c5f87b3c45c1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;906&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"906\" data-original=\"https://pic2.zhimg.com/v2-4ee74791e591375ae331c5f87b3c45c1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4ee74791e591375ae331c5f87b3c45c1_b.jpg\"/><figcaption>图10 0x85服务支持的子服务</figcaption></figure><p>0x85服务的消息请求的格式如图11所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-86d2a1dd49afe3a70c4a89c248104609_b.jpg\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"218\" class=\"origin_image zh-lightbox-thumb\" width=\"913\" data-original=\"https://pic2.zhimg.com/v2-86d2a1dd49afe3a70c4a89c248104609_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;913&#39; height=&#39;218&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"218\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"913\" data-original=\"https://pic2.zhimg.com/v2-86d2a1dd49afe3a70c4a89c248104609_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-86d2a1dd49afe3a70c4a89c248104609_b.jpg\"/><figcaption>图11 0x85服务消息格式</figcaption></figure><p>最后介绍一下0x3E服务，该服务主要用于诊断设备告诉ECU，当前诊断设备在线，所以该服务一般都是周期性执行。</p><p>文章会同步在如下公众号上更新。</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;758&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"638\" data-rawheight=\"758\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9e9f203fb69df34db03012652a60c7db_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "汽车设计", 
                    "tagLink": "https://api.zhihu.com/topics/19593808"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/72543808", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 3, 
            "title": "UDS诊断帧", 
            "content": "<p>UDS诊断服务通常是通过CAN总线实现。对于CAN诊断帧有两种不同的分类方式，按照寻址方式可以分为物理寻址、功能寻址，按照帧类别可以分为单帧、首帧、流控帧、连续帧。</p><h2><b>寻址方式</b></h2><p>在总线上往往连着众多ECU设备(如图1所示)，作为诊断设备既可以单独与某一ECU进行通信，也可以同时与所有总线上的ECU设备通信。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-82c27490f85fb7d59e300d5a93ab484f_b.jpg\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb\" width=\"623\" data-original=\"https://pic4.zhimg.com/v2-82c27490f85fb7d59e300d5a93ab484f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;623&#39; height=&#39;223&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"623\" data-original=\"https://pic4.zhimg.com/v2-82c27490f85fb7d59e300d5a93ab484f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-82c27490f85fb7d59e300d5a93ab484f_b.jpg\"/><figcaption>图1 总线示意图</figcaption></figure><p><b>1. 物理寻址</b></p><p>物理寻址是指总线上始终只有一个ECU响应诊断设备发出的诊断命令，实现点对点通信，例如图1中总线上仅ECU A响应诊断设备的诊断命令。</p><p><b>2. 功能寻址</b><br/>功能寻址是指总线上的所有ECU对可以同时响应诊断设备发出的诊断命令，实现一对多的通信方式，例如图1中ECU A、ECU B、ECU C 、ECU D可以同时响应诊断设备的诊断命令。</p><h2><b>帧类别</b></h2><p>对于帧的类型，通过需要发送的数据长度来确定。在正常寻址模式下，当数据长度小于等于7byte，则用单帧的形式发送，当数据长度大于7byte，数据需要分多帧才能发送完成，则需要使用到首帧、流控帧、连续帧，不同帧的机制如图2所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e10b5334c58ea85419bfb2857a29af8b_b.jpg\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic4.zhimg.com/v2-e10b5334c58ea85419bfb2857a29af8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;496&#39; height=&#39;442&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"496\" data-original=\"https://pic4.zhimg.com/v2-e10b5334c58ea85419bfb2857a29af8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e10b5334c58ea85419bfb2857a29af8b_b.jpg\"/><figcaption>图2 不同帧的机制</figcaption></figure><p>首帧是指发送的第一帧，目的是把前7byte数据发送给接收方，并告知接收方数据没有发完，然后接收方会回一帧流控帧，告知发送方是否可以接着发送，并且告知接收方一次最多能接收的数据量，以及发送方接下来发送的数据帧(连续帧)之间的时间间隔要求。<br/></p><p>对于不同的帧，通过CAN消息的数据场中PCI（Protocol control information）来区分，图3、图4详细说明了不同帧的PCI的定义。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-41460b47286763611fc5778eb5a44509_b.jpg\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"907\" data-original=\"https://pic2.zhimg.com/v2-41460b47286763611fc5778eb5a44509_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;907&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"907\" data-original=\"https://pic2.zhimg.com/v2-41460b47286763611fc5778eb5a44509_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-41460b47286763611fc5778eb5a44509_b.jpg\"/><figcaption>图3  不同帧的数据场定义</figcaption></figure><p>以下是对PCI段的详细解释。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c0b8b41fed70bb06850e91f7dc642763_b.jpg\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic4.zhimg.com/v2-c0b8b41fed70bb06850e91f7dc642763_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;906&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"906\" data-original=\"https://pic4.zhimg.com/v2-c0b8b41fed70bb06850e91f7dc642763_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c0b8b41fed70bb06850e91f7dc642763_b.jpg\"/><figcaption>图4 PCI 定义</figcaption></figure><p>其中：</p><p>DL：有效数据的长度，不包括PCIbyte；</p><p>FS：表示是发送方否可以继续传输消息，0表示可以继续发送，1表示等待发送，2表示数据溢出，一次发送的数据大于接收方所能接收的量；</p><p>BS：接收方一次能接收的数据最大量；</p><p>STmin：表示两个连续帧之间的最小时间间隔，参照图1中的定义；</p><p>SN：连续帧的序列号；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_b.jpg\"/></figure><p><br/> </p>", 
            "topic": [
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70216826", 
            "userName": "天残", 
            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
            "upvote": 1, 
            "title": "AUTOSAR故障Debounce策略", 
            "content": "<p><b>—— 摘要 ——</b></p><p>本文针对Dem模块的故障debounce【1】策略进行讲解。</p><p>故障诊断是由Dem模块和SWC共同完成的，如下图1所示，SWC中的Monitor Function对故障条件进行实时监控，并实时将故障条件的判定结果反馈至Dem模块判断是否发生故障，如图2所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dc8c5f311b98ec8371163de0620c7747_b.jpg\" data-size=\"normal\" data-rawwidth=\"444\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb\" width=\"444\" data-original=\"https://pic4.zhimg.com/v2-dc8c5f311b98ec8371163de0620c7747_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;444&#39; height=&#39;735&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"444\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"444\" data-original=\"https://pic4.zhimg.com/v2-dc8c5f311b98ec8371163de0620c7747_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dc8c5f311b98ec8371163de0620c7747_b.jpg\"/><figcaption>图1 SWC与Dem模块</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a4036722605c340a3c0ba46a093ced86_b.jpg\" data-size=\"normal\" data-rawwidth=\"928\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb\" width=\"928\" data-original=\"https://pic3.zhimg.com/v2-a4036722605c340a3c0ba46a093ced86_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;928&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"928\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"928\" data-original=\"https://pic3.zhimg.com/v2-a4036722605c340a3c0ba46a093ced86_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a4036722605c340a3c0ba46a093ced86_b.jpg\"/><figcaption>图2 Dem_SetEventStatus调用示意图</figcaption></figure><p>故障诊断由SWC与Dem模块共同完成的，故故障的debounce策略即可在SWC中实现，也可在Dem模块中实现。如果在SWC中，Dem_SetEventStatus()函数传给Dem的状态为passed或failed，如果在Dem，Dem_SetEventStatus()函数传给Dem的状态为prepassed或prefailed。</p><p>下面主要介绍在Dem中实现的debounce策略。Dem中提供了两种debounce策略，分别为基于计数器的debounce策略和基于时间的debounce策略，如图3所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-914b516f820115d826dede4563e145f9_b.jpg\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb\" width=\"649\" data-original=\"https://pic2.zhimg.com/v2-914b516f820115d826dede4563e145f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;649&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"649\" data-original=\"https://pic2.zhimg.com/v2-914b516f820115d826dede4563e145f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-914b516f820115d826dede4563e145f9_b.jpg\"/><figcaption>图3 dem模块支持的debounce策略</figcaption></figure><p><b>—— 基于计数器的Debounce策略 ——</b></p><p>在这种策略下，Dem会提供一个计数器（fault detection counter）用来记录判断的结果，当Diagnostic Monitor上报至dem的状态为prefailed，计数器会按步长增加，当达到设定的限值时，故障状态变成failed。当上报状态为prepassed，计数器按步长减少，当达到设定的限值时，故障状态变成passed。当以下对改策略涉及的重要参数进行解释。</p><p>1、<b>FDC(fault detection counter)</b>：错误计数器，其范围为-128~127；</p><p>2、<b>DemDebounceCounterFailedThreshold</b>：故障从prefailed状态跳转至failed的限值；</p><p>3、<b>DemDebounceCounterPassedThreshold</b>：故障从prepassed状态跳转至passed状态的限值；</p><p>4、<b>DemDebounceCounterIncrementStepSize</b>：当DiagnosticMonitor上报Prefailed，错误计数器的增加量；</p><p>5、<b>DemDebounceCounterDecrementStepSize</b>：当DiagnosticMonitor上报Prepassed，错误计数器减少量；</p><p>6、<b>DemDebounceCounterJumpDown</b>：是否使能JumpDown功能。JumpDown功能是指当上一次Diagnostic Monitor上报的状态是prefailed，而当前上报的是prepassed，且当前计数器的值大于DemDebounceCounterJumpDownValue，错误计数器的值会重置为DemDebounceCounterJumpDownValue。如果JumpDown功能禁止，计数器按步长减少；</p><p>7、<b>DemDebounceCounterJumpDownValue</b>：当JumpDown功能使能，该变量定义了计数器的重置值；</p><p>8、<b>DemDebounceCounterJumpUp</b>：是否使能JumpUp功能。JumpUp功能是指当上一次Diagnostic Monitor上报的状态是prepassed，而这次上报的是prefailed，且当前计数器的值小于DemDebounceCounterJumpUpValue，错误计数器的值会重置为DemDebounceCounterJumpUpValue。如果JumpUp功能禁止，计数器按步长增加；</p><p>9：<b>DemDebounceCounterJumpUpValue</b>：当JumpUp功能使能，该变量定义了计数器的重置值；</p><p>下面用图4来讲解以上参数及基于计数器的debounde策略。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8896a8ac4f4593e8ecb508e9c197cdba_b.jpg\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb\" width=\"668\" data-original=\"https://pic3.zhimg.com/v2-8896a8ac4f4593e8ecb508e9c197cdba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;668&#39; height=&#39;624&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"668\" data-original=\"https://pic3.zhimg.com/v2-8896a8ac4f4593e8ecb508e9c197cdba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8896a8ac4f4593e8ecb508e9c197cdba_b.jpg\"/><figcaption>图 4 基于计数器的debounce策略图</figcaption></figure><p>其中：</p><p>1、5表示JumpDown功能；</p><p>3、4表示JumpUp功能；</p><p>2表示当前计数器小于DemDebounceCounterJumpDownValue ，所JumpDown功能没有激活；</p><p>6表示DemDebounceCounterJumpDownValue ；</p><p>7表示DemDebounceCounterJumpUpValue；</p><p>8表示DemDebounceCounterFailedThreshold ；</p><p>9表示DemDebounceCounterPassedThreshold ；</p><p>10、12表示故障确认，由于计数器的值达到了fail的限值；</p><p>11故障恢复，由于计数器的值达到pass的限值；</p><p>13表示Dem接收的状态为failed，所以故障直接置位；</p><p>14表示Dem接到的状态为passed，所以故障恢复；</p><p>15表示DemDebounceCounterIncrementStepSize；</p><p>16表示DemDebounceCounterDecrementStepSize；</p><p><b>—— 基于时间的Debounce策略 ——</b></p><p>在这种策略下，计数器的初始值为0，其范围为-128~127，当Dem接收到Diagnostic Monitor发送的状态值开始计数，计数器的增长方向由接收到的状态决定，当计数器的值在一定时间达到阈值，完成此次判断，如果在未达到阈值时，Dem接收的状态发生变化，计数器会重新开始计数，并且计数方向也发生转变。</p><p>对于基于时间debounce的策略主要配置以下几个参数：</p><p>1、<b>DebounceTimeBasedTaskTime</b>：该变量定义基本的检测周期；</p><p>2、<b>DemDebounceTimeFailedThreshold</b>：定义故障状态从prefailed跳转至failed需要多少个DebounceTimeBasedTaskTime周期；</p><p>3、<b>DemDebounceTimeFailedThreshold</b>：定义故障状态从prepassed跳转至passed需要多少个DebounceTimeBasedTaskTime周期；</p><p>下面用图5来讲解以上参数以及基于时间的debounce策略。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-60f5f25d33bf0bd857575c6be0a3c061_b.jpg\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic2.zhimg.com/v2-60f5f25d33bf0bd857575c6be0a3c061_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;631&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic2.zhimg.com/v2-60f5f25d33bf0bd857575c6be0a3c061_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-60f5f25d33bf0bd857575c6be0a3c061_b.jpg\"/><figcaption>图5 基于时间的debounce策略</figcaption></figure><p>其中：</p><p>t failed：表示故障failed需要的时间，该值等于DebounceTimeBasedTaskTime乘以DemDebounceTimeFailedThreshold；</p><p>t passed：表示故障passed需要的时间，该值等于DebounceTimeBasedTaskTime乘以DemDebounceTimePassedThreshold；</p><p>1、表示Diagnostic Monitor传至Dem的状态为prefailed；并经过t failed时间故障状态编程failed；</p><p>2、表示Diagnostic Monitor传至Dem的状态为prepassed；此时计数器重新开始计数;</p><p>3、由于2时刻开始计数未达到阈值时，Dem接收的状态发生变化，此时计数器开始重新计数，并计数方向发生变化，经过t failed时间后，故障状态编程failed。</p><p>4、Dem接收的状态为failed，所以故障直接置位了；</p><p>5、Dem接收的状态为passed，所以故障直接恢复了；</p><p>6、表示故障已发生；</p><p>7、表示故障未发生；</p><p>至此两种Debounce策略的逻辑已讲解完毕，主要对两种策略的原理进行抛砖引玉。如果有问题或写的不对的地方，欢迎留言讨论。</p><p><b>—— 参考 ——</b></p><p>【1】debounce：故障事件防抖，与按键防抖（软件需要延时确认按键不是误触发）的作用类似，目的是为了防止事件误触发采取的策略。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-642e1175c8ec3e16214a1217b17e9515_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "汽车电子", 
                    "tagLink": "https://api.zhihu.com/topics/19697968"
                }
            ], 
            "comments": [
                {
                    "userName": "你听得到", 
                    "userLink": "https://www.zhihu.com/people/6c4025bd2cdf480260c53fd21f8da215", 
                    "content": "<p>基于时间的debounce，看您的图上prefailed和prepassed也是瞬时单次的？跳了一次之后有归0了？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "天残", 
                            "userLink": "https://www.zhihu.com/people/9e41b9363120fe767000955f196b9111", 
                            "content": "<p>不是这样子的，在t fail的这个时间段都是处在prefailed状态，三个图结合看会更加清晰点。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "你听得到"
                        }
                    ]
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1125470277655711744"
}
