{
    "title": "Code++", 
    "description": "蒟蒻的OI梦", 
    "followers": [
        "https://www.zhihu.com/people/next-54-38", 
        "https://www.zhihu.com/people/HelloWorldCup", 
        "https://www.zhihu.com/people/shane_liu", 
        "https://www.zhihu.com/people/endlesscheng", 
        "https://www.zhihu.com/people/bei-chuan-bu-xia-xue", 
        "https://www.zhihu.com/people/tu-dou-96-84-83", 
        "https://www.zhihu.com/people/kakaFT", 
        "https://www.zhihu.com/people/zhao-bo-7-45-39", 
        "https://www.zhihu.com/people/jing-quan-xia-74", 
        "https://www.zhihu.com/people/han-jin-zhe-95", 
        "https://www.zhihu.com/people/wei-xiao-jiu-hao-19", 
        "https://www.zhihu.com/people/hui-dao-yuan-dian-33-60", 
        "https://www.zhihu.com/people/wu-yu-lun-bi-de-shuai-qi-55", 
        "https://www.zhihu.com/people/liu-wei-ming-37-41", 
        "https://www.zhihu.com/people/ke-ke-7-15-68", 
        "https://www.zhihu.com/people/a-ha-lei-41", 
        "https://www.zhihu.com/people/cycloid-81", 
        "https://www.zhihu.com/people/qwer-64-91", 
        "https://www.zhihu.com/people/jxy-68-68", 
        "https://www.zhihu.com/people/chen-tao-68-95", 
        "https://www.zhihu.com/people/mel-tor", 
        "https://www.zhihu.com/people/magellan360", 
        "https://www.zhihu.com/people/qin-kan-30", 
        "https://www.zhihu.com/people/yipiao-leng-shui", 
        "https://www.zhihu.com/people/wxe3a2b0b19e5e9b7c", 
        "https://www.zhihu.com/people/wei-guan-qun-zhong-48", 
        "https://www.zhihu.com/people/tian-cai-44-94", 
        "https://www.zhihu.com/people/vincent-shi-62", 
        "https://www.zhihu.com/people/1234567890-33-16-94", 
        "https://www.zhihu.com/people/wang-jie-44-97", 
        "https://www.zhihu.com/people/chen-xu-peng-46", 
        "https://www.zhihu.com/people/eureka-36-22", 
        "https://www.zhihu.com/people/aristotll", 
        "https://www.zhihu.com/people/kyire-2", 
        "https://www.zhihu.com/people/fang-tao-98", 
        "https://www.zhihu.com/people/ru-sheng-28-69", 
        "https://www.zhihu.com/people/yu-xu-17-83", 
        "https://www.zhihu.com/people/yibu-yibu-chang-da", 
        "https://www.zhihu.com/people/gong-san-80", 
        "https://www.zhihu.com/people/lu-hua-ji-29", 
        "https://www.zhihu.com/people/PolvoEstrella", 
        "https://www.zhihu.com/people/tzq-47", 
        "https://www.zhihu.com/people/bu-neng-ci-de-fan-tuan", 
        "https://www.zhihu.com/people/zhang-xiong-46-98", 
        "https://www.zhihu.com/people/yu-tong-lan", 
        "https://www.zhihu.com/people/seu1tyz", 
        "https://www.zhihu.com/people/chen-qiu-52-64", 
        "https://www.zhihu.com/people/wang-da-ke-53-61", 
        "https://www.zhihu.com/people/SsorryQaQ", 
        "https://www.zhihu.com/people/shi-zi-4-87-3", 
        "https://www.zhihu.com/people/yzj-89", 
        "https://www.zhihu.com/people/ji-qi-59-2", 
        "https://www.zhihu.com/people/pan-yi-ming-2", 
        "https://www.zhihu.com/people/yang-xa", 
        "https://www.zhihu.com/people/zheng-nan-79", 
        "https://www.zhihu.com/people/nian-you-shi-de-ling-meng-61", 
        "https://www.zhihu.com/people/chen-jun-li-90", 
        "https://www.zhihu.com/people/jin-zhuo-lin-14", 
        "https://www.zhihu.com/people/zhangsan-97-39", 
        "https://www.zhihu.com/people/qia-ba-la-qi-de-mao", 
        "https://www.zhihu.com/people/qi-ran-20-10", 
        "https://www.zhihu.com/people/omm-chdn", 
        "https://www.zhihu.com/people/chang-an-pin-cha", 
        "https://www.zhihu.com/people/zhong-da-lao-hao-qiang-a", 
        "https://www.zhihu.com/people/wloy", 
        "https://www.zhihu.com/people/chen-xiao-yi-96-77", 
        "https://www.zhihu.com/people/ou-zhou-bu-jin-ji-du-li", 
        "https://www.zhihu.com/people/10010001", 
        "https://www.zhihu.com/people/Yutao.Gu", 
        "https://www.zhihu.com/people/zi-qiu-28-19", 
        "https://www.zhihu.com/people/kui-12-84", 
        "https://www.zhihu.com/people/lin-jy-87-86", 
        "https://www.zhihu.com/people/yu-ming-58-91", 
        "https://www.zhihu.com/people/yang-jin-ze-5", 
        "https://www.zhihu.com/people/ha-ha-17-96-16", 
        "https://www.zhihu.com/people/spearous", 
        "https://www.zhihu.com/people/you-zou-zhe-83", 
        "https://www.zhihu.com/people/wang-yang-59-99", 
        "https://www.zhihu.com/people/ling-lin-21-32", 
        "https://www.zhihu.com/people/stratoes", 
        "https://www.zhihu.com/people/jeff-xu-66", 
        "https://www.zhihu.com/people/xie-zhi-qiu-21-2", 
        "https://www.zhihu.com/people/guo-yao-89", 
        "https://www.zhihu.com/people/wei-ya-mie", 
        "https://www.zhihu.com/people/wang-yu-95-21", 
        "https://www.zhihu.com/people/thing-no-60-73", 
        "https://www.zhihu.com/people/unknowncloud", 
        "https://www.zhihu.com/people/worhol", 
        "https://www.zhihu.com/people/xxfy", 
        "https://www.zhihu.com/people/liu-zhi-hu-94-11", 
        "https://www.zhihu.com/people/zhao-yiping-25", 
        "https://www.zhihu.com/people/li-zheng-xian-43", 
        "https://www.zhihu.com/people/xiao-jin-ku-39-62", 
        "https://www.zhihu.com/people/luyintv", 
        "https://www.zhihu.com/people/tu-xi-yiren", 
        "https://www.zhihu.com/people/vtan-89", 
        "https://www.zhihu.com/people/hunter-gu-94", 
        "https://www.zhihu.com/people/wemlion", 
        "https://www.zhihu.com/people/RoniZeng", 
        "https://www.zhihu.com/people/antinomy-67", 
        "https://www.zhihu.com/people/yu-liu-49-1", 
        "https://www.zhihu.com/people/alvin-cao-53", 
        "https://www.zhihu.com/people/gtxys", 
        "https://www.zhihu.com/people/kensuke-hinata", 
        "https://www.zhihu.com/people/ji-du-de-xu-rong-33", 
        "https://www.zhihu.com/people/qwer252525", 
        "https://www.zhihu.com/people/ding-feng-39-73", 
        "https://www.zhihu.com/people/moslandwez", 
        "https://www.zhihu.com/people/sen-mei-24", 
        "https://www.zhihu.com/people/kim-74-51", 
        "https://www.zhihu.com/people/waterking", 
        "https://www.zhihu.com/people/linux-73-20", 
        "https://www.zhihu.com/people/wei-jian-feng-49", 
        "https://www.zhihu.com/people/lydia-yuan-6", 
        "https://www.zhihu.com/people/su-qi-47-32", 
        "https://www.zhihu.com/people/sam-70-11-58", 
        "https://www.zhihu.com/people/chinese-citizen", 
        "https://www.zhihu.com/people/yang-gang-69-84", 
        "https://www.zhihu.com/people/aoi-51-44", 
        "https://www.zhihu.com/people/yi-feng-ting-yu-48", 
        "https://www.zhihu.com/people/jia-ji-ben-kun", 
        "https://www.zhihu.com/people/66dream", 
        "https://www.zhihu.com/people/yoshiyuki", 
        "https://www.zhihu.com/people/li-hao-qiang-55", 
        "https://www.zhihu.com/people/guo-jie-3", 
        "https://www.zhihu.com/people/stephen-chan-19", 
        "https://www.zhihu.com/people/xd-huo", 
        "https://www.zhihu.com/people/123456-36-71", 
        "https://www.zhihu.com/people/redky", 
        "https://www.zhihu.com/people/liu-zi-ling-83", 
        "https://www.zhihu.com/people/smart-js", 
        "https://www.zhihu.com/people/xia-mu-85-92", 
        "https://www.zhihu.com/people/vgsir", 
        "https://www.zhihu.com/people/luo-ji-yin-85", 
        "https://www.zhihu.com/people/ju-shang-38", 
        "https://www.zhihu.com/people/deng-xin-wei-10", 
        "https://www.zhihu.com/people/conzi-1", 
        "https://www.zhihu.com/people/huozhi", 
        "https://www.zhihu.com/people/BinacsLee", 
        "https://www.zhihu.com/people/li-jin-long-55-91", 
        "https://www.zhihu.com/people/chen-yang-85-34-1", 
        "https://www.zhihu.com/people/xing-ming-20-77", 
        "https://www.zhihu.com/people/caivvv666", 
        "https://www.zhihu.com/people/wywppkd", 
        "https://www.zhihu.com/people/zhao-finger", 
        "https://www.zhihu.com/people/vanadium-68", 
        "https://www.zhihu.com/people/li-ding-1993", 
        "https://www.zhihu.com/people/wu-zhi-gang-9-87", 
        "https://www.zhihu.com/people/fang-chen", 
        "https://www.zhihu.com/people/guo-hao-jie-92", 
        "https://www.zhihu.com/people/heyang-36", 
        "https://www.zhihu.com/people/wang-hong-jia", 
        "https://www.zhihu.com/people/ATXON", 
        "https://www.zhihu.com/people/BruceWDZ", 
        "https://www.zhihu.com/people/si-tu-zheng-mei", 
        "https://www.zhihu.com/people/cvl1986", 
        "https://www.zhihu.com/people/kevin.kang", 
        "https://www.zhihu.com/people/chen-bei-sheng-24", 
        "https://www.zhihu.com/people/hailws", 
        "https://www.zhihu.com/people/sunrui365", 
        "https://www.zhihu.com/people/americanlasagna", 
        "https://www.zhihu.com/people/sun-chang-qing-6", 
        "https://www.zhihu.com/people/yuexiwei", 
        "https://www.zhihu.com/people/lin-yin-nian-35", 
        "https://www.zhihu.com/people/jakeshea", 
        "https://www.zhihu.com/people/nce-84", 
        "https://www.zhihu.com/people/a-fei-xi-ya-65", 
        "https://www.zhihu.com/people/zhu-zhi-ting", 
        "https://www.zhihu.com/people/xle-zheng", 
        "https://www.zhihu.com/people/zhang-shuai-78-37", 
        "https://www.zhihu.com/people/zhang-ming-feng-91", 
        "https://www.zhihu.com/people/qiao-hai-jun", 
        "https://www.zhihu.com/people/bu-bai-zhi-lu", 
        "https://www.zhihu.com/people/17age", 
        "https://www.zhihu.com/people/li-bo-42-42", 
        "https://www.zhihu.com/people/misaka-no-12207", 
        "https://www.zhihu.com/people/vera-74-78", 
        "https://www.zhihu.com/people/userinfo", 
        "https://www.zhihu.com/people/23forever-4", 
        "https://www.zhihu.com/people/zhou-jie-hui-11", 
        "https://www.zhihu.com/people/xin-se-82", 
        "https://www.zhihu.com/people/peter-yang-38", 
        "https://www.zhihu.com/people/hzy-46-50", 
        "https://www.zhihu.com/people/prob-88", 
        "https://www.zhihu.com/people/zhao-cong-45-52", 
        "https://www.zhihu.com/people/qu-yuan-37-60", 
        "https://www.zhihu.com/people/shi-shen-72-65", 
        "https://www.zhihu.com/people/montaguecn", 
        "https://www.zhihu.com/people/2009888abc", 
        "https://www.zhihu.com/people/czyKingSann", 
        "https://www.zhihu.com/people/lim-817", 
        "https://www.zhihu.com/people/space-44", 
        "https://www.zhihu.com/people/wu-jian-lin-5", 
        "https://www.zhihu.com/people/qin-yu-zhe", 
        "https://www.zhihu.com/people/yitiao-zheng-xian-yu", 
        "https://www.zhihu.com/people/cai-bao-51-63", 
        "https://www.zhihu.com/people/mo-yu-75-41", 
        "https://www.zhihu.com/people/dong-yi-xin-53", 
        "https://www.zhihu.com/people/dan-wang-95-89", 
        "https://www.zhihu.com/people/rice-30-93", 
        "https://www.zhihu.com/people/chen-tian-yu-13-91", 
        "https://www.zhihu.com/people/xin-wen-xiao-bai-jia-you-ba", 
        "https://www.zhihu.com/people/tong-xiao-ting-94", 
        "https://www.zhihu.com/people/9223372036854775808", 
        "https://www.zhihu.com/people/yan-xin-yu-72", 
        "https://www.zhihu.com/people/liu-xiao-gang-19", 
        "https://www.zhihu.com/people/sineagle", 
        "https://www.zhihu.com/people/xie-jun-jie-30", 
        "https://www.zhihu.com/people/ban-bei-qing-cha-ban-li-chen-4", 
        "https://www.zhihu.com/people/jie-sen-de-bo-en-85", 
        "https://www.zhihu.com/people/codgician", 
        "https://www.zhihu.com/people/da-jiang-you-de-xiao-xue-sheng", 
        "https://www.zhihu.com/people/long-36-4", 
        "https://www.zhihu.com/people/jaufiwur8398jdsf", 
        "https://www.zhihu.com/people/xu-hong-bo-53", 
        "https://www.zhihu.com/people/book-book-90", 
        "https://www.zhihu.com/people/wolther47", 
        "https://www.zhihu.com/people/tang-long-30-1", 
        "https://www.zhihu.com/people/sq2001", 
        "https://www.zhihu.com/people/Roife", 
        "https://www.zhihu.com/people/zhang-ji-peng-42", 
        "https://www.zhihu.com/people/yishui520", 
        "https://www.zhihu.com/people/camusld", 
        "https://www.zhihu.com/people/dadwadads", 
        "https://www.zhihu.com/people/chen-tan-fang-49", 
        "https://www.zhihu.com/people/LzyRapx", 
        "https://www.zhihu.com/people/xiao-wan-dou-52-94", 
        "https://www.zhihu.com/people/rsysw", 
        "https://www.zhihu.com/people/yy-cc-63-54", 
        "https://www.zhihu.com/people/alextokc", 
        "https://www.zhihu.com/people/lei-ying-18-84", 
        "https://www.zhihu.com/people/wu-jun-ji-46", 
        "https://www.zhihu.com/people/tttttt-2", 
        "https://www.zhihu.com/people/yu-jian-26-96-97", 
        "https://www.zhihu.com/people/terrance-94", 
        "https://www.zhihu.com/people/zhang-tao-zhihu", 
        "https://www.zhihu.com/people/accp-27", 
        "https://www.zhihu.com/people/hei-an-jing-ji-qi-shi", 
        "https://www.zhihu.com/people/sun-869693715-16", 
        "https://www.zhihu.com/people/bobble1283", 
        "https://www.zhihu.com/people/zhao-rong-wen", 
        "https://www.zhihu.com/people/stardust-51-39", 
        "https://www.zhihu.com/people/zhang-jian-feng-15-43", 
        "https://www.zhihu.com/people/xu-zhe-nan", 
        "https://www.zhihu.com/people/1234341", 
        "https://www.zhihu.com/people/qugeshaminzine", 
        "https://www.zhihu.com/people/vcbu-keng-die", 
        "https://www.zhihu.com/people/cnzyh", 
        "https://www.zhihu.com/people/wu-chen-xiang-90"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/56145334", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "Codeforces Round 1003", 
            "content": "<p>暴力场。。。</p><p>A.桶维护出现次数</p><p>B.暴力构造</p><p>C.前缀和+暴力枚举区间</p><p>D.贪心</p><p>E.dfs</p><p>详情请看我的blog：<a href=\"https://link.zhihu.com/?target=https%3A//loliconautomaton.github.io/Codeforces%25201003%2520Brute%2520Force%2520Round/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">loliconautomaton.github.io</span><span class=\"invisible\">/Codeforces%201003%20Brute%20Force%20Round/</span><span class=\"ellipsis\"></span></a></p><p>（反作弊系统不要查杀我啊</p>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54236345", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 8, 
            "title": "使用Hexo搭建一个个人博客", 
            "content": "<h2>0000 先bb几句</h2><p>这有可能是这个专栏的最后一篇文章啦，因为之前直接宣传blog搬新家的文章被反作弊系统毙了，所以决定出一个搭建blog的教程，顺便通知blog搬家的消息</p><p>本来很多OIer/ACMer也是很想自己搭blog的嘛</p><p>由于搭建过程没有一一截图，所以描述地比较抽象</p><hr/><h2>0001 准备工作——Node.js和Hexo</h2><p>这个是hexo的中文网站：<a href=\"https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hexo</a></p><p>如果你已经装过了Node.js的话，就可以直接通过：</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install -g hexo-cli</code></pre></div><p>来安装hexo了。</p><p>如果没有安装过Node.js的旁友也不要伤心，直接到Node.js的官网选择自己系统的版本下载安装就可以啦（Mac和Windows不推荐官网的教程，本人macOS Mojave亲测，不管是用curl和wget安装还是brew install node在后续使用npm的时候均出现了一定程度的报错）</p><p>npm是一个Node.js的版本管理器，如果是采用curl+wget安装的话直接</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install stable</code></pre></div><p>就可以了，然后再用上面的命令安装hexo。</p><hr/><h2>0010 初始化你的blog</h2><p>安装好hexo以后，cd到你想存放blog本地文件夹的位置，然后：</p><div class=\"highlight\"><pre><code class=\"language-bash\">hexo init blog\n<span class=\"nb\">cd</span> blog\nnpm install</code></pre></div><p>这样一个blog的框架就搭好了，其中blog可以改成任何名称。这里你已经有了一个blog，默认的主题是landscape，你可以使用：</p><div class=\"highlight\"><pre><code class=\"language-bash\">hexo s</code></pre></div><p>并且在localhost:4000查看你的blog</p><p>既然hexo是github的blog搭建工具，那我们自然可以利用github的免费储存空间搭建自己的blog（nginx大佬忽视我的这句话）。首先你注册一个github账号，然后在你的repo里新建一个仓库，严格命名为用户名.<a href=\"https://link.zhihu.com/?target=http%3A//github.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.io</span><span class=\"invisible\"></span></a>。然后在blog文件夹执行</p><div class=\"highlight\"><pre><code class=\"language-bash\">hexo d</code></pre></div><p>的命令，就可以把blog传到<a href=\"https://link.zhihu.com/?target=http%3A//github.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.io</span><span class=\"invisible\"></span></a>上了，第一次需要输入用户名和密码。以后每次有更新blog也是用</p><div class=\"highlight\"><pre><code class=\"language-bash\">hexo clean\nhexo g\nhexo d</code></pre></div><p>上传。似乎可能会遇到连接不到git等代理错误，这个时候就用如下命令解决（似乎还有一个什么命令，我有点忘记了万一报了什么Run啥啥啥Error的扔到百度就行了）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install hexo-deployer-git --save\nnpm config <span class=\"nb\">set</span> registry http://registry.npmjs.org </code></pre></div><hr/><h2>0011 各种修补工作</h2><ul><li>修改标题：在站点的_config.yml里找到Header对应的地方进行修改</li><li>修改banner（标题图片）：在blog/themes/landscape/source/css/images里面添加图片，然后在上层目录（css）里的_variables.styl里把banner-url改成你新的图片就行了。和顶栏有关的设置都可以在这个文件以及同目录下_partial文件夹的header文件里修改（这种文件随便找个文本编辑器打开就行了）</li><li>对中文的支持：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/xiangming/landscape-plus\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">xiangming/landscape-plus</a>，下载这个主题，然后放到themes文件夹里，在站点的_config.yml里的theme项更改主题，然后把language项设成zh-CN即可。landscape-plus的一些设置具体参见readme文档，如果想把标题的底色去掉直接把那句话注释掉即可</li><li>对数学的支持：安装mathjax插件，把默认的渲染器marked删掉换成kramed，然后在_config.yml里写一行开启mathjax。不过好像landscape-plus自带了mathjax（具体教程百度一抓一大把）</li><li>增加目录分类：在/blog/source里hexo new一个归档文件夹（直接在blog目录里new就行），然后在里面的index.html设置一下归档的格式（加一加目录标签什么的），然后每次写文章开头加一下标签即可，具体也可以百度</li><li>开启readmore：先把默认的页面生成器从index改成index2，然后在/blog/themes/landscape-plus/layout/_partial/article.ejs里修改成下面这样：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;article-entry&#34; itemprop=&#34;articleBody&#34;&gt;\n      &lt;% if (post.excerpt &amp;&amp; index) { %&gt;\n        &lt;%- post.excerpt %&gt;\n        &lt;% if (theme.excerpt_link) { %&gt;\n          &lt;p class=&#34;article-more-link&#34;&gt;\n            &lt;a href=&#34;&lt;%- config.root %&gt;&lt;%- post.path %&gt;#more&#34;&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;\n          &lt;/p&gt;\n        &lt;% } %&gt;\n      &lt;% } else { %&gt;\n        &lt;% var br = post.content.indexOf(&#39;\\n&#39;) %&gt;\n        &lt;% if(br &lt; 0 || !index) { %&gt;\n          &lt;%- post.content %&gt;\n        &lt;% } else { %&gt;\n          &lt;%- post.content.substring(0, br) %&gt;\n          &lt;% if (theme.excerpt_link) { %&gt;\n            &lt;p class=&#34;article-more-link&#34;&gt;\n              &lt;a href=&#34;&lt;%- config.root %&gt;&lt;%- post.path %&gt;#more&#34;&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;\n            &lt;/p&gt;\n          &lt;% } %&gt;\n        &lt;% } %&gt;\n      &lt;% } %&gt;\n    &lt;/div&gt;</code></pre></div><p>添加音乐什么的就直接网易云搞一搞外链然后扔到同一个文件夹的sidebar.ejs里，在主题的_config.yml里加一个background_music: true就可以了</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;% if (theme.background_music){ %&gt;\n    &lt;div&gt;\n      &lt;iframe frameborder=&#34;1&#34; border=&#34;1&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=&#34;100%&#34; height=&#34;210&#34; src=&#34;//music.163.com/outchain/player?type=0&amp;id=2612224925&amp;auto=1&amp;height=220&#34;&gt;&lt;/iframe&gt;\n    &lt;/div&gt;\n  &lt;% } %&gt;</code></pre></div><ul><li>添加评论的话我用的是livere，去注册一个账号然后复制代码到_partial/post文件夹下，然后在article.ejs里修改代码变成下面这样：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">&lt;% if (!index &amp;&amp; post.comments){ %&gt;\n&lt;%- partial(&#39;post/livere&#39;, {\n  key: post.slug,\n  title: post.title,\n  url: config.url+url_for(post.path)\n}) %&gt;\n&lt;% } %&gt;</code></pre></div><p>然后在主题的_config.yml里设置一个livere: true即可</p><p>印象中大的改动就这些了，这里有一篇很好地blog：<a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/b7abbdb76c77\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hexo 官方主题 landscape-plus 优化</a></p><p>upd：</p><p>对了，统计访客信息的源变化了，详情请见：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//busuanzi.ibruce.info/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不蒜子 - 极简网页计数器</a></p><hr/><h2>0100 最后再bb几句</h2><a href=\"https://link.zhihu.com/?target=https%3A//loliconautomaton.github.io/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">loliconautomaton.github.io</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span></a><p>这个就是我现在的blog搭好的样子了，绕了挺多弯的。然后欢迎大家来访，以后会慢慢搬运文章的。然后希望这次反作弊系统不会毙了我的文章</p>", 
            "topic": [
                {
                    "tag": "个人博客", 
                    "tagLink": "https://api.zhihu.com/topics/19593765"
                }, 
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }
            ], 
            "comments": [
                {
                    "userName": "FeatherZHY", 
                    "userLink": "https://www.zhihu.com/people/f0e40be61f9be845e72ad35916d5d3e0", 
                    "content": "hexo最麻烦的地方就是在机房有冰点的情况下自己上传博文很麻烦啊", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "话说回来迁移blog能不能直接复制文件夹", 
                            "likes": 0, 
                            "replyToAuthor": "FeatherZHY"
                        }, 
                        {
                            "userName": "FeatherZHY", 
                            "userLink": "https://www.zhihu.com/people/f0e40be61f9be845e72ad35916d5d3e0", 
                            "content": "应该可以吧，但是之前我试不行，一定要用git建", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53856843", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 29, 
            "title": "GoodBye 2018(a.k.a Codeforces 1091) A~E", 
            "content": "<h2>0000 先bb几句</h2><p>几个大作业一写，各种网课一补，又是一个月没做题……cf换了新号，其实已经打了两场比赛了，但是由于时间的因素，就从2018年的最后一场比赛开始补题吧。1月17号LoliconAutomaton的期末考试就结束了，，，</p><hr/><h2>0001 <a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/contest/1091/problem/A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - A - Codeforces</a></h2><p>题意：给你黄蓝红三种颜色的材料，分别有 <img src=\"https://www.zhihu.com/equation?tex=y%2Cb%2Cr\" alt=\"y,b,r\" eeimg=\"1\"/> 个。要求最后选出来的颜色 <img src=\"https://www.zhihu.com/equation?tex=y%27%2B1%3Db%27\" alt=\"y&#39;+1=b&#39;\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=b%27%2B1%3Dr%27\" alt=\"b&#39;+1=r&#39;\" eeimg=\"1\"/> ，然后最大化 <img src=\"https://www.zhihu.com/equation?tex=y%27%2Bb%27%2Br%27\" alt=\"y&#39;+b&#39;+r&#39;\" eeimg=\"1\"/> </p><p>题解：打比赛的时候日常智熄想写非常多个if-else，直接导致别人一分钟过的sb题我八分钟才过……其实就是取min，然后判断一下就可以了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ret</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ret</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ret</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>0010 <a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/contest/1091/problem/B\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - B - Codeforces</a></h2><p>题意：没看懂，给一堆向量，然后干啥啥的</p><p>题解：虽然我没看懂题目，但是我注意到答案就是所有坐标和/n，然后……</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c090010de7d1fbf6a6e38e888e4b1550_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-c090010de7d1fbf6a6e38e888e4b1550_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-c090010de7d1fbf6a6e38e888e4b1550_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c090010de7d1fbf6a6e38e888e4b1550_b.jpg\"/></figure><p>居然活到了system test……我那个room的选手怕是都和我一样智熄了</p><p>在等rating change的时候翻看vfk的《一场cf的台前幕后》，看到了下面这段：</p><p>「</p><p>Codeforces出题人的自我修养：<br/>1. ...</p><p>....</p><p>17.如果需要long long，请确保不开long long的人不能pretest passed</p><p>」</p><p>觉得那个时候的cf真友好……后来听说只有这一种做法要开long long……早知道给自己改个和fst有关的名字了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000100\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\">#define pmod 998244353\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">ll</span> <span class=\"n\">sum_x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sum_y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n        <span class=\"n\">sum_x</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">sum_y</span> <span class=\"o\">+=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sum_x</span> <span class=\"o\">/=</span> <span class=\"p\">(</span><span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">sum_y</span> <span class=\"o\">/=</span> <span class=\"p\">(</span><span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">sum_x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">sum_y</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>0011 <a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/contest/1091/problem/C\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - C - Codeforces</a></h2><p>题意：给你一个环，现在以步长 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/> 在环上跳跃，得到 <img src=\"https://www.zhihu.com/equation?tex=1%5Cto1%2Bk%5Cto%5Ccdots%5Cto1\" alt=\"1\\to1+k\\to\\cdots\\to1\" eeimg=\"1\"/> ，然后把经过的所有的数加起来，得到一个和，最后输出所有不同的和</p><p>题解：能跳回 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> 的所有不同的步长肯定是 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 的约数（和别人py了一波BC，逃），然后我再次智熄，直接写了个模拟T了还以为是分解因数复杂度大了……因为是约数，所以肯定是恰好转一周回到 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> 的，那么用等差数列求和就行了……然后推公式推了10min……令人智熄的cf</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">ll</span><span class=\"o\">&gt;</span> <span class=\"n\">fact</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">fact</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t    <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">fact</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">fact</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t    <span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">fact</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">ans</span><span class=\"p\">)</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; &#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>0100 <a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/contest/1091/problem/D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - D - Codeforces</a></h2><p>题意：把 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 的所有排列按照字典序写在一起，问你有多少段长度是 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 的区间恰好是 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 的一个排列</p><p>题解：再次死于数学差……样例二就走眼了没数出来，后来对着 <img src=\"https://www.zhihu.com/equation?tex=n%3D3%2Cn%3D4\" alt=\"n=3,n=4\" eeimg=\"1\"/> 的表看了20min没找出规律，看了一眼题解提到一个递推公式 <img src=\"https://www.zhihu.com/equation?tex=d_n%3D%28d_%7Bn-1%7D%2B%28n-1%29%21-1%29n\" alt=\"d_n=(d_{n-1}+(n-1)!-1)n\" eeimg=\"1\"/> 很不幸的发现当时我一直没有凑出来的那一项是 <img src=\"https://www.zhihu.com/equation?tex=d_%7Bn-1%7D\" alt=\"d_{n-1}\" eeimg=\"1\"/> ，，，然后NWPU_zhaoyiping也打了一张表</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-58f85e13173aab13632925ea0083710c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1048\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-58f85e13173aab13632925ea0083710c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1048&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1048\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-58f85e13173aab13632925ea0083710c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-58f85e13173aab13632925ea0083710c_b.jpg\"/></figure><p>告诉我了一个很神奇的东西……另外xyz大爷也给出了他的公式（硬核啊……）：</p><p><img src=\"https://www.zhihu.com/equation?tex=n%21%2B%5Csum_%7Bi%3D1%7D%5E%7Bn-1%7D%28i%21-1%29%28n-i%29%21%5Cbinom%7Bn%7D%7Bi%7D\" alt=\"n!+\\sum_{i=1}^{n-1}(i!-1)(n-i)!\\binom{n}{i}\" eeimg=\"1\"/> </p><p>出题人给的公式是求了答案的补集： <img src=\"https://www.zhihu.com/equation?tex=n%5Ccdot+n%21-%5Csum_%7Bi%3D1%7D%5E%7Bn-1%7D%5Cfrac%7Bn%21%7D%7Bi%21%7D\" alt=\"n\\cdot n!-\\sum_{i=1}^{n-1}\\frac{n!}{i!}\" eeimg=\"1\"/> </p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000100\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\">#define pmod 998244353\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">ll</span> <span class=\"n\">minus</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">fact</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">fact</span> <span class=\"o\">=</span> <span class=\"n\">fact</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">pmod</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">minus</span> <span class=\"o\">=</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">minus</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">pmod</span><span class=\"p\">;</span>\n    <span class=\"n\">ll</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">fact</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">pmod</span> <span class=\"o\">-</span> <span class=\"n\">minus</span> <span class=\"o\">+</span> <span class=\"n\">pmod</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">pmod</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ret</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>0101 <a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/contest/1091/problem/E\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - E - Codeforces</a></h2><p>题意：有一张 <img src=\"https://www.zhihu.com/equation?tex=n%2B1\" alt=\"n+1\" eeimg=\"1\"/> 个点的图，给你另外 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 个点的度数，问你第 <img src=\"https://www.zhihu.com/equation?tex=n%2B1\" alt=\"n+1\" eeimg=\"1\"/> 个点度数所有可能的取值</p><p>题解：出题人把题解放进了题目里给的链接……</p><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Erd%25C5%2591s%25E2%2580%2593Gallai_theorem%23Stronger_version\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Erdős-Gallai theorem</a><p>核心是定理中的公式： <img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5E%7Bk%7Dd_i%5Cleq+k%28k-1%29%2B%5Csum_%7Bj%3Dk%2B1%7D%5E%7Bn%7Dmin%28d_j%2C+k%29\" alt=\"\\sum_{i=1}^{k}d_i\\leq k(k-1)+\\sum_{j=k+1}^{n}min(d_j, k)\" eeimg=\"1\"/> ，这个公式直接去计算是 <img src=\"https://www.zhihu.com/equation?tex=n%5E2\" alt=\"n^2\" eeimg=\"1\"/> 的，因此我们需要想个快速维护的方法</p><p>事实上我们注意到左边可以用前缀和快速维护，而右边的求和一定是后缀和加上一段连续的 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/> ，位置可以利用二分查找得到。然后那天_rqy在UOJ群里说了一下做法，大概就是枚举每一个位置，然后可以求出一个上下界，合并这些上下界，然后答案要么就全都是奇数要么就全都是偶数（定理内容），直接枚举就可以了。也就是：</p><p><img src=\"https://www.zhihu.com/equation?tex=low_i%3Dmax%28low_%7Bi-1%7D%2Cpre_i-i%28i-1%29-%5Csum_%7Bj%3Di%2B1%7D%5E%7Bn%7Dmin%28d_j%2Ci%29%29%5C%5C+high_i%3Dmin%28high_%7Bi%2B1%7D%2Ci%28i%2B1%29%2B%5Csum_%7Bj%3Di%2B1%7D%5E%7Bn%7Dmin%28d_j%2Ci%2B1%29-pre_i%29\" alt=\"low_i=max(low_{i-1},pre_i-i(i-1)-\\sum_{j=i+1}^{n}min(d_j,i))\\\\ high_i=min(high_{i+1},i(i+1)+\\sum_{j=i+1}^{n}min(d_j,i+1)-pre_i)\" eeimg=\"1\"/> </p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 500100\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\">#define pmod 998244353\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span><span class=\"p\">()(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">inc</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"n\">ll</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">suf</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">low</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">upper_bound</span><span class=\"p\">(</span><span class=\"n\">inc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">inc</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">inc</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"n\">suf</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">inc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">inc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">inc</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n    <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">suf</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">suf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">suf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">low</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">low</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">low</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"p\">,</span><span class=\"n\">low</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">deg</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">deg</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">deg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">candidate</span> <span class=\"o\">=</span> <span class=\"n\">deg</span><span class=\"p\">;</span> <span class=\"n\">candidate</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">candidate</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">upper_bound</span><span class=\"p\">(</span><span class=\"n\">inc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">inc</span><span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">candidate</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">inc</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">low</span><span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">candidate</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">high</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">candidate</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">candidate</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">ret</span><span class=\"p\">)</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; &#34;</span><span class=\"p\">;</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>看_rqy的题解好像还能处理地更精细一点</p><hr/><h2>0110 再bb几句</h2><p>后面几个题占坑待补吧，主要是F题没看懂出题人的贪心策略，然后听说G是个交互，之前UOJ Easy Round #8被那个交互题恶心到了……实在是不想做</p><p>感想的话就是 死 于 数 学 差，以及各种智熄</p>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "巨佬。。[捂脸]，我日常ab题", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "别担心，我也日常ab，E题是补的……", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "废柴少女skyline", 
                    "userLink": "https://www.zhihu.com/people/2a1acfa88795ce9768099f554788235f", 
                    "content": "<p>F就是个改版的加油站问题 是一样的</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "哦哦", 
                            "likes": 0, 
                            "replyToAuthor": "废柴少女skyline"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>求封面。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "王大可Wongdark", 
                    "userLink": "https://www.zhihu.com/people/eb0373022fb3f70ffd1a6ff469fff2b8", 
                    "content": "巨佬，补不动E的路过", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>E的结论在题目链接里啊qwq有了结论随便乱搞把那个式子从n^2降到nlogn就行了呢</p>", 
                            "likes": 0, 
                            "replyToAuthor": "王大可Wongdark"
                        }, 
                        {
                            "userName": "王大可Wongdark", 
                            "userLink": "https://www.zhihu.com/people/eb0373022fb3f70ffd1a6ff469fff2b8", 
                            "content": "tqltql", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>B题那张表情包是我做的（捂脸）</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>（雾</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52784722", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "TensorFlow - macOS上的安装", 
            "content": "<h2>0000 照例bb几句</h2><p>最近快学完线代了，也把之前看不懂的《深度学习》拿出来继续看了（虽然看得有点功利……）。在网上看到了一个识别手写数字的项目，然后就觉得“给我也整一个！”，但是看了一眼代码是python的，emm……然后翻来翻去找到一个比较优秀的C语言的项目，正在学习中。写着写着突然想到，如果真的整个科学计算库要自己手写的话得要入土……于是还是入坑python吧！</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><h2>0001 几个比较有名的框架</h2><ul><li>Theano：这个是深度学习的鼻祖框架，有业界大牛Bengio和Goodfellow开发，但是比较底层</li><li>Caffe：在计算机视觉方面比较专业</li><li>Torch：需要学习Lua</li><li>MXNet：不太了解</li><li>TensorFlow：出身于Google的名门贵族，可以看做是对Theano的封装</li></ul><p>考虑再三，我决定使用Google的TensorFlow</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><h2>0010 安装</h2><p>可以在：<a href=\"https://link.zhihu.com/?target=http%3A//www.tensorfly.cn/tfdoc/get_started/os_setup.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TensorFlow 官方文档中文版</a>找到TensorFlow在各大平台下的安装方法。注意，这里的python是2.7的版本。然后我就直接试了一发（既然是Google的东西，大家懂的都懂需要干什么）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ pip install https://storage.googleapis.com/tensorflow/mac/tensorflow-0.5.0-py2-none-any.whl</code></pre></div><p>结果报了一堆错，主要是下面几点：</p><ul><li>没有安装nose</li><li>没有安装tornado</li><li>不能升级系统自带的numpy-1.8</li></ul><p>前两个非常好解决，但是在pip install的过程中还是遇到了一些小问题，最后是采取在前面加上sudo解决的。最后一个在网上看了一下是权限的问题，有说重新启动然后command+R进入命令行的，也有说前面加sudo解决的，都不是很现实（后者没有用），特别是我做这个事情的时候已经凌晨了，告辞……</p><p>然后我发现有人在安装Theano的时候也遇到了这个问题，是使用pip的参数--ignore-installed来解决的，于是上面的安装代码愉快地变成了：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo pip install https://storage.googleapis.com/tensorflow/mac/tensorflow-0.5.0-py2-none-any.whl --ignore-installed numpy</code></pre></div><p>也就是说在安装的时候忽略掉系统自己的numpy。然后网络连接喜闻乐见地崩了……告辞……</p><p>刚刚又试了一发，终于成功了</p><p>然后就可以按照教程写出第一个TensorFlow的程序了：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"kn\">as</span> <span class=\"nn\">tf</span>\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello, TensorFlow!&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Sesson</span><span class=\"p\">()</span> <span class=\"c1\"># 这里似乎会报一个有关CPU核心的问题，不过好像问题不大</span>\n<span class=\"k\">print</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">)</span>\n<span class=\"c1\"># Hello, TensorFlow!</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"k\">print</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\"># 42</span></code></pre></div><p>非常愉快地写出了第一个TensorFlow程序</p><p>持续学习ing</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "TensorFlow", 
                    "tagLink": "https://api.zhihu.com/topics/20032249"
                }, 
                {
                    "tag": "macOS", 
                    "tagLink": "https://api.zhihu.com/topics/19550290"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52159227", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 7, 
            "title": "近况 && NOIP2018场外鏼题记", 
            "content": "<h2>0x00 照例先bb几句</h2><p>最近有点忙，没什么时间写文章，，，</p><hr/><h2>0x01 EC-Final</h2><p>打了一场ecfinal校内选拔赛，一手高精度把队伍抬进了ecfinal</p><p>然后就听说敝校办赛不利，在知乎上吵得沸沸扬扬，因为这件事三天没听课+没打Codeforces</p><p>一开始还觉得没什么，直到敝校具有ec资格的队都没有参加校内选拔赛，敝队不幸空欢喜一场以后才知道各位的感觉。不过敝队的水平参加了ecfinal估计也是闹笑话，还是从明年的邀请赛开始打吧</p><hr/><h2>0x02 “字节跳动”冬令营网络赛</h2><p>开场队友开始推A的规律，然后我继续看题，觉得可能F和G会比较好做（无语了。。。），看了一会儿也没看出名堂。然后就有很多队伍过了B，于是跟榜，发现题目是一个折纸的问题，看了一眼样例猜了一个逆序对的规律，交了一发WA……这个时候队友开始做A，也错得一塌糊涂。然后另一个队友剪了一张纸，开始手玩B，卒。。。赛后听说画图就可以发现转化成相邻两个数构成的区间不能相交，然后就被我手玩掉了……</p><p>第一次爆零。。。之前老的队名叫做“1A就回老家结婚”，英文名是“Always_Penalty”，这次比赛过后吓得我直接改队名了，新的名字是“Try a try, WA is OK”（试错法）</p><hr/><h2>0x03 大作业</h2><p>第一个大作业很不要脸地从专栏里抽了一篇文章上去，就是置顶的那一篇（植入广告2333）</p><p>第二个大作业既然不是Windows本也不好做什么可视化编程，懒得配Qt的环境。想起来以前在《环球科学》上看到可以用贝叶斯方法分类邮件，于是到网上找了一份看起来还不错的代码学习了一下。总体思路是把训练集和输入读进来，然后根据贝叶斯公式：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bequation%7D+P%28B_i%7CA%29%3D%5Cfrac%7BP%28B_i%29P%28A%7CB_i%29%7D%7B%5Csum_%7Bj%3D1%7D%5EnP%28B_j%29P%28A%7CB_j%29%7D+%5Cend%7Bequation%7D\" alt=\"\\begin{equation} P(B_i|A)=\\frac{P(B_i)P(A|B_i)}{\\sum_{j=1}^nP(B_j)P(A|B_j)} \\end{equation}\" eeimg=\"1\"/> </p><p>计算概率。不过网上的代码好像用了一点稍微不一样的公式，还取了对数，水了过去。看高中同学的大作业都已经写了游戏，无限ym。以后准备看看caffe，毕竟c++只能用这个深度学习框架</p><p>发现Windows没有dirent.h，还得自己写……</p><p>除了这些东西，还在手玩hustoj，明天要给连fabs都用不好的人讲题，害怕</p><hr/><h2>0x04 NOIP2018场外鏼题记</h2><p>因为敝人是敝高中信息竞赛的第一届，所以会比较关心一点，提高组我在相关问题下已经写得比较详细了</p><p>D1T1的话CCF：我抄我自己</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">delta</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">delta</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">delta</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">delta</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>D1T2：Claris说是B站的原题，我只知道洛谷上有一个奶牛题的货币系统是用完全背包做的，一个学弟求了n次完全背包，其实是没必要的。不过今年的机子快，分也挺高的……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 110\n</span><span class=\"cp\">#define SYS_MAX 25010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">sys</span><span class=\"p\">[</span><span class=\"n\">SYS_MAX</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">SYS_MAX</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">));</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">));</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">pnt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">pnt</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">pnt</span><span class=\"p\">];</span>\n                <span class=\"o\">++</span><span class=\"n\">pnt</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">ret</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">sys</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>D1T3：听Claris说又是B站原题，Orz.不会，调了半天没调出来，占坑待补</p><p>D2T1：把环断成链，然后和树上一样做，被卡了std::sort</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;bits/stdc++.h&gt;\n#define N 5050\nusing namespace std;\ntypedef pair&lt;int, int&gt; pi;\n\ninline char getc() {\n    static char buf[1000000], *p1 = buf, *p2 = buf;\n    return ((p1 == p2) &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2)) ? EOF : *p1++;\n}\n\ninline void read(int&amp; x) {\n    x = 0; char c = getc();\n    for (; !(c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;); c = getc());\n    for (; c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;; x = x * 10 + c - &#39;0&#39;, c = getc());\n}\n\nstruct Edge {\n    int to, nxt, no;\n    Edge() {}\n    Edge(const int&amp; to, const int&amp; nxt, const int&amp; no) : to(to), nxt(nxt), no(no) {}\n} e[N &lt;&lt; 1];\nint tot = 1, head[N];\ninline void AddEdge(const int&amp; u, const int&amp; v, const int&amp; no) {\n    e[tot] = Edge(v, head[u], no), head[u] = tot++;\n    e[tot] = Edge(u, head[v], no), head[v] = tot++;\n}\n\nint n, m, cnt, c, dfs_clock, dfn[N], low[N], bel[N], circle[N];\nbool mark[N];\npi edge[N];\n\nint st, s[N];\ninline void tarjan(int u, int pre) {\n    dfn[u] = low[u] = ++dfs_clock;\n    s[++st] = u;\n    for (int i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].to;\n        if (v == pre) continue;\n        if (!dfn[v]) {\n            tarjan(v, u);\n            low[u] = min(low[u], low[v]);\n        } else if (!bel[v])\n            low[u] = min(low[u], dfn[v]);\n    }\n    if (dfn[u] == low[u]) {\n        ++cnt;\n        for (;;) {\n            int x = s[st--];\n            bel[x] = cnt;\n            if (x == u) break;\n        }\n    }\n}\n\ninline void qsort(int *a, int l, int r) {\n    if (l &gt;= r) return;\n    int i = l, j = r, tmp = a[l];\n    while (i &lt; j) {\n        for (; i &lt; j &amp;&amp; a[j] &gt;= tmp; --j);\n        if (j &gt; i) a[i] = a[j];\n        for (; i &lt; j &amp;&amp; a[i] &lt;= tmp; ++i);\n        if (j &gt; i) a[j] = a[i];\n    }\n    a[i] = tmp;\n    qsort(a, l, i - 1);\n    qsort(a, i + 1, r);\n}\n\nint tp, tmp[N];\nint pnt[N];\nint pick[N][N];\n\ninline void dfs(int u, int fa) {\n    pnt[u] = 0, tmp[++tp] = u;\n    for (int i = head[u]; i; i = e[i].nxt) {\n        if (mark[e[i].no]) continue;\n        if (e[i].to == fa) continue;\n        pick[u][++pnt[u]] = e[i].to;\n    }\n    qsort(pick[u], 1, pnt[u]); // sort(pick[u] + 1, pick[u] + pnt[u] + 1);\n    for (int i = 1; i &lt;= pnt[u]; ++i)\n\t\tdfs(pick[u][i], u);\n}\n\nint ans[N];\nint main() {\n    read(n), read(m);\n    for (int i = 1, u, v; i &lt;= m; ++i) {\n        read(u), read(v);\n        AddEdge(u, v, i);\n        edge[i] = pi(u, v);\n    }\n    if (m == n - 1) {\n        dfs(1, 0);\n        for (int i = 1; i &lt;= n; ++i)\n            printf(&#34;%d%c&#34;, tmp[i], i == n ? &#39;\\n&#39; : &#39; &#39;);\n        return 0;\n    }\n    tarjan(1, 0);\n    for (int i = 1; i &lt;= m; ++i) {\n        if (bel[edge[i].first] == bel[edge[i].second])\n            circle[++c] = i;\n    }\n    for (int i = 1; i &lt;= n; ++i) ans[i] = n;\n        int ret = 0;\n        for (int i = 1; i &lt;= c; ++i) {\n        tp = 0;\n        mark[circle[i]] = 1;\n        dfs(1, 0);\n        mark[circle[i]] = 0;\n        bool flag = 0;\n        for (int j = 1; j &lt;= n; ++j) {\n            if (tmp[j] == ans[j]) continue;\n            if (tmp[j] &lt; ans[j]) flag = 1;\n            break;\n        }\n        if (flag)\n            for (int j = 1; j &lt;= n; ++j) ans[j] = tmp[j];\n    }\n    for (int i = 1; i &lt;= n; ++i)\n\t\tprintf(&#34;%d%c&#34;, ans[i], i == n ? &#39;\\n&#39; : &#39; &#39;);\n    return 0;\n}\n/*\n1 3 4 5 2 1\n*/</code></pre></div><p>D2T2：毒瘤计数题，没看懂。</p><p>D2T3：有44分是“没有上司的舞会”。一定要选的话ret += w[i], w[i] = 0;一定不选的话w[i] = INF;，然后做树形dp。听u裙大佬说有一个东西叫动态dp，去看了一眼确实挺板子的，还没学，占坑待补。另外，这个题出题人的做法再次惊艳了我</p><p class=\"ztext-empty-paragraph\"><br/></p><p>普及组T2：还没想过</p><p>普及组T3：不会捉，，，看了别人的记忆化搜索，还需要消化一段时间</p><p>普及组T4：把树拍成一个带权括号序列然后做回文串，马拉车或者PAM都可以，还没写完</p><hr/><h2>0x05 再bb几句</h2><p>明年就要正式开始打ACM了，加油吧。。。cf换了个新号，旧号徘徊在绿名上不去了……希望早日上橙把……我好菜啊QAQ</p><p>以及，要期末考了，我慌得一批……</p><p>大学就是p事比较多，或许我应该把文章转移到WordPress或者什么上，如果转移了，应该会在专栏里通知的</p>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "日常生活", 
                    "tagLink": "https://api.zhihu.com/topics/19554902"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48540022", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 1, 
            "title": "ACM-Training Record-Always_Penalty 二分答案", 
            "content": "<h2>0. 照例先bb几句</h2><p>思哲大佬讲课讲得很好啊，赞一个</p><p>最近黄金拼图上瘾啦</p><p>这片专栏：<a href=\"https://zhuanlan.zhihu.com/p/48467591\" class=\"internal\">Luogu P2115:[USACO2014 Mar] Sabotage</a>也是上课讲的题目，当时我的做法和大佬的产生了分歧</p><hr/><h2>1. Monthly Expense</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D3273\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3273 -- Monthly Expense</a><p>题意：把 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 个数分成 <img src=\"https://www.zhihu.com/equation?tex=m\" alt=\"m\" eeimg=\"1\"/> 块，求每一块和的最小值最大</p><p>题解：二分答案是求最小值最大的通用套路，我们二分这个最小值最大，然后去看能不能这样子分 <img src=\"https://www.zhihu.com/equation?tex=m\" alt=\"m\" eeimg=\"1\"/> 块即可</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">cnt</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">))</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>2. River Hopscotch</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D3258\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3258 -- River Hopscotch</a><p>题意：NOIP2015 Day2T1</p><p>题解：排序以后二分答案，如果当前距离比答案小，就把这块石头移走</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 50100\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">ok</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">pos</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">len</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"k\">return</span> <span class=\"n\">len</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>代码也是直接拿NOIP训练时候的代码改的，因此风格不太一样</p><hr/><h2>3. Dropping tests</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D2976\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2976 -- Dropping tests</a><p>题意：躶的01分数规划</p><p>题解：关于01分数规划，可以去看我的这篇专栏：<a href=\"https://zhuanlan.zhihu.com/p/30484385\" class=\"internal\">SDOI2017 新生舞会</a></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;functional&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 2010\n</span><span class=\"cp\">#define eps 1e-15\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"kt\">double</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">greater</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span> <span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n    <span class=\"kt\">double</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%Lf&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%Lf&#34;</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"kt\">long</span> <span class=\"kt\">double</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">eps</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">))</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%1.Lf</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">*</span> <span class=\"mf\">100.0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>数据范围读错了还以为是精度问题（所以到处都是long double），导致我WA了18发，嗯，Always_Penalty</p><hr/><h2>4. 宅男计划</h2><a href=\"https://link.zhihu.com/?target=https%3A//www.lydsy.com/JudgeOnline/problem.php%3Fid%3D3874\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem 3874. -- [Ahoi2014&amp;Jsoi2014]宅男计划</a><p>题意：（这个题竟然不是权限题）自己看吧，中文的</p><p>题解：很明显是贪心地买，先排序去掉没用的，然后贪心地买。但是直接贪心是会出现偏差的，看了网上的题解是二分套三分，购买数量和天数呈一个单峰函数，但是不会证，滚去激情模拟退火……调参WA了12发，嗯，Always_Penalty。关于模拟退火， <a class=\"member_mention\" href=\"https://www.zhihu.com/people/53a642c2d06d68a28a0b1550d1613bcc\" data-hash=\"53a642c2d06d68a28a0b1550d1613bcc\" data-hovercard=\"p$b$53a642c2d06d68a28a0b1550d1613bcc\">@g1n0st</a> 有一篇非常好的文章：<a href=\"https://zhuanlan.zhihu.com/p/21277465\" class=\"internal\">模拟退火算法 &amp; BZOJ3680</a></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdlib&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 210\n</span><span class=\"cp\">#define Alpha 0.95\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Food</span> <span class=\"p\">{</span>\n    <span class=\"n\">ll</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">cmp1</span> <span class=\"p\">{</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Food</span><span class=\"o\">&amp;</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Food</span><span class=\"o\">&amp;</span> <span class=\"n\">f2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">s</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> \n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">cmp2</span> <span class=\"p\">{</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Food</span><span class=\"o\">&amp;</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Food</span><span class=\"o\">&amp;</span> <span class=\"n\">f2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n<span class=\"n\">ll</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">),</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">EOF</span> <span class=\"p\">:</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">^</span> <span class=\"mi\">48</span><span class=\"p\">),</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">ll</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">^</span> <span class=\"mi\">48</span><span class=\"p\">),</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">bp</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">F</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">F</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp1</span><span class=\"p\">());</span>\n    <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">pick</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pick</span> <span class=\"o\">+</span> <span class=\"n\">tot</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp2</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">ll</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ll</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">tot</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ll</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">pre</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">cnt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">pre</span> <span class=\"o\">-=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"n\">cnt</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cnt</span> <span class=\"o\">&lt;=</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pre</span> <span class=\"o\">/</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">double</span> <span class=\"nf\">Rand</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">()</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">RAND_MAX</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">RAND_MAX</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">SA</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ll</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"n\">pick</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">ll</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">m</span> <span class=\"o\">/</span> <span class=\"n\">f</span><span class=\"p\">;</span> <span class=\"n\">T</span> <span class=\"o\">&gt;=</span> <span class=\"mf\">1.0</span><span class=\"p\">;</span> <span class=\"n\">T</span> <span class=\"o\">*=</span> <span class=\"n\">Alpha</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ll</span> <span class=\"n\">nxt_x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">rand</span><span class=\"p\">()</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span> <span class=\"o\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">Rand</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span><span class=\"p\">));</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">nxt_x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">nxt_x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">rand</span><span class=\"p\">()</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span> <span class=\"o\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">Rand</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span><span class=\"p\">));</span>\n        <span class=\"n\">ll</span> <span class=\"n\">nxt_ret</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">nxt_x</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nxt_ret</span> <span class=\"o\">&gt;</span> <span class=\"n\">ret</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">nxt_ret</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">nxt_x</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">bp</span><span class=\"p\">();</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld&#34;</span><span class=\"p\">,</span> <span class=\"n\">SA</span><span class=\"p\">());</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><p>纪念一下我的爆炸罚时：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8b803359d7d95febc31cf69286b4ac4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1292\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"1292\" data-original=\"https://pic2.zhimg.com/v2-8b803359d7d95febc31cf69286b4ac4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1292&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1292\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1292\" data-original=\"https://pic2.zhimg.com/v2-8b803359d7d95febc31cf69286b4ac4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8b803359d7d95febc31cf69286b4ac4d_b.jpg\"/></figure><p>明年的这个时候就要代表学校出战区域赛了，这个习惯还是得改……</p>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48467591", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "Luogu P2115:[USACO2014 Mar] Sabotage", 
            "content": "<p>丢链接跑：</p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problemnew/show/P2115\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P2115】[USACO14MAR]破坏Sabotage - 洛谷</a><hr/><h2>0. 先bb几句</h2><p>iG牛逼！爱iG真的太好了！（雾</p><h2>1. 二分答案</h2><p>二分答案是分治法的一种具体应用，它的思路是确定答案所在的上下界 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2Cr%5D\" alt=\"[l,r]\" eeimg=\"1\"/> ，然后在这个区间内不断地二分 <img src=\"https://www.zhihu.com/equation?tex=m%3D%5Cfrac%7Bl%2Br%7D%7B2%7D\" alt=\"m=\\frac{l+r}{2}\" eeimg=\"1\"/> ，然后通过一个特殊的函数 <img src=\"https://www.zhihu.com/equation?tex=check%28m%29\" alt=\"check(m)\" eeimg=\"1\"/> 来更新答案所在的区间。这里就要求首先答案是有界的，然后答案是单调的，否则 <img src=\"https://www.zhihu.com/equation?tex=check%28m%29\" alt=\"check(m)\" eeimg=\"1\"/> 之后就没有办法更新区间。下面给出二分的一般过程（以整数二分为例）：</p><div class=\"highlight\"><pre><code class=\"language-text\">//二分答案一种可能的形式\ndo while r &gt;= l\n   m &lt;- (l + r) / 2\n   if check(m) then l &lt;- m + 1\n   else r &lt;- m - 1</code></pre></div><hr/><h2>2. 用处</h2><p>二分答案有很多用武之地，比较经典的有：</p><ul><li>求方程的根</li><li>求最大值最小/最小值最大</li><li>一类和平均数有关的问题</li><li>分数规划问题</li></ul><hr/><h2>3. 题解</h2><p>本题和平均数相关，而平均数是单调的。因此考虑二分答案</p><p>首先介绍一下一种平均数的处理方式：</p><blockquote>假设当前的平均数是 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> ，那么就会有 <img src=\"https://www.zhihu.com/equation?tex=%5Csum+%28a_i-x%29%3D0\" alt=\"\\sum (a_i-x)=0\" eeimg=\"1\"/> </blockquote><p>因此我们二分这个平均数，每次check的时候就把所有的 <img src=\"https://www.zhihu.com/equation?tex=a_i-x\" alt=\"a_i-x\" eeimg=\"1\"/> ，然后考虑应该破坏哪一段。这个地方可以贪心地认为我们应该删掉操作后的数里的连续最大和 <img src=\"https://www.zhihu.com/equation?tex=max\" alt=\"max\" eeimg=\"1\"/> ，如果 <img src=\"https://www.zhihu.com/equation?tex=sum-n%5Ccdot+x-max\" alt=\"sum-n\\cdot x-max\" eeimg=\"1\"/> ，那么就是可行的。由于这道题要求最小值，因此这里应该更新右边界</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"kt\">double</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">double</span> <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tmp</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">mx</span><span class=\"p\">,</span> <span class=\"n\">tmp</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">mx</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"kt\">double</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">double</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">))</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">eps</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">eps</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%.3f&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48126580", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 10, 
            "title": "ACM-Training Record Always_Penalty 搜索", 
            "content": "<h2>0. 照例先bb几句</h2><p>不会搜索题……好毒瘤啊……这种时候就应该甩锅给队友</p><p>调了一部分题目做（全做完实在是做不动），后面的Max-Min搜索以及它的Alpha-beta剪枝不会</p><hr/><h2>A. 棋盘问题</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D1321\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">1321 -- 棋盘问题</a><p>题意：有障碍的类八皇后问题</p><p>题解：无脑回溯，记得把障碍也标记出来即可</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#define maxn 10\nusing namespace std;\n\nchar board[maxn][maxn];\nint vis[maxn];\nint n, k, ans;\n\ninline void dfs(int cur, int step)\n{\n\tif(step == k){\n\t\tans++;\n\t\treturn ;\n\t}\n\tif(cur &gt; n) return ;\n\tfor(int i = 1; i &lt;= n; i++){\n\t\tif(board[cur][i] == &#39;#&#39; &amp;&amp; !vis[i]){\n\t\t\tvis[i] = 1;\n\t\t\tdfs(cur+1, step+1);\n\t\t\tvis[i] = 0;\n\t\t}\n\t}\n\tdfs(cur+1, step);\n\treturn;\n}\n\nint main()\n{\n\twhile(scanf(&#34;%d%d&#34;, &amp;n, &amp;k) == 2 &amp;&amp; n != -1 &amp;&amp; k != -1){\n\t\tfor(int i = 1; i &lt;= n; i++)\n\t\t\tfor(int j = 1; j &lt;= n; j++)\n\t\t\t\tscanf(&#34; %c&#34;, &amp;board[i][j]);\n\t\tans = 0;\n\t\tmemset(vis, 0, sizeof(vis));\n\t\tdfs(1, 0);\n\t\tprintf(&#34;%d\\n&#34;, ans);\n\t}\n\treturn 0;\n}</code></pre></div><hr/><h2>B. Catch That Cow</h2><a href=\"https://link.zhihu.com/?target=http%3A//acm.hdu.edu.cn/showproblem.php%3Fpid%3D2717\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 2717</a><p>题意：从数轴上一点走到另一点，每次可以走到 <img src=\"https://www.zhihu.com/equation?tex=%5C%7Bx%2B1%2Cx-1%2C2x%5C%7D\" alt=\"\\{x+1,x-1,2x\\}\" eeimg=\"1\"/> ，问最少需要几步</p><p>题解：一开始敲了一个dfs，然后喜闻乐见地死循环了，然后考虑建图做最短路，发现还不如直接bfs</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">bfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span> <span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n    <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"mi\">200000</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">k</span><span class=\"p\">);</span>\n    <span class=\"c1\">//if (n &gt; k) swap(n, k);\n</span><span class=\"c1\"></span>    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>WA了8次，嗯，Always_Penalty</p><hr/><h2>C. Fliptile</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D3279\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3279 -- Fliptile</a><p>题意：把 <img src=\"https://www.zhihu.com/equation?tex=%28r%2Cc%29\" alt=\"(r,c)\" eeimg=\"1\"/> 翻转以后它周围的四个（如果有）位置会一起翻转，问把原状态翻转成全部为0最少需要几步</p><p>题解：先枚举第一行的状态，然后计算剩下的。一个位置是1，当且仅当周围的格子的和是奇数</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 18\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Grid</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"p\">}</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"n\">Grid</span><span class=\"o\">&amp;</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">Grid</span><span class=\"o\">&amp;</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> \n            <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> \n            <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"n\">Grid</span><span class=\"o\">&amp;</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">Grid</span><span class=\"o\">&amp;</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">))</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)))</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span> <span class=\"o\">&lt;</span> <span class=\"n\">ret</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                    <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"n\">INF</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;IMPOSSIBLE&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%c&#34;</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">n</span> <span class=\"o\">?</span> <span class=\"sc\">&#39;\\n&#39;</span> <span class=\"o\">:</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>D. Find The Multiple</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D1426\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">1426 -- Find The Multiple</a><p>题意：找一个仅有0和1组成的正整数，使得它是n的倍数</p><p>题解：经过dfs发现其实最小的答案并不会很大，所以就像二叉树那样来枚举二进制</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"n\">ll</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>E. Dungeon Master</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D2251\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2251 -- Dungeon Master</a><p>（小声bb）题目名字好评（ah♂Thank you sir）</p><p>题意：Van様有一个地♂牢，而他是这个地牢的主人。现在反抗♂的平家boy想要逃出这个地牢</p><p>题解：三维的话也就是再加一个 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Bz%7D\" alt=\"\\vec{z}\" eeimg=\"1\"/> 轴上的增量</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 50\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dx</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dy</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dz</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Point</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">;</span>\n    <span class=\"n\">Point</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n    <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Point</span><span class=\"o\">&amp;</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">z</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ed</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">char</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">bfs</span><span class=\"p\">(</span><span class=\"n\">Point</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">Point</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sx</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">;</span>\n    <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">sx</span><span class=\"p\">][</span><span class=\"n\">sy</span><span class=\"p\">][</span><span class=\"n\">sz</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">Point</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">z</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">dx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">dy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">nz</span> <span class=\"o\">=</span> <span class=\"n\">z</span> <span class=\"o\">+</span> <span class=\"n\">dz</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nx</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nz</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nz</span> <span class=\"o\">&lt;=</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">][</span><span class=\"n\">nz</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">][</span><span class=\"n\">nz</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">INF</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">][</span><span class=\"n\">nz</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">Point</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">nz</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">][</span><span class=\"n\">nz</span><span class=\"p\">];</span>\n                <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">R</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;#&#39;</span><span class=\"p\">)</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;S&#39;</span><span class=\"p\">)</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;E&#39;</span><span class=\"p\">)</span> <span class=\"n\">ed</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">bfs</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ed</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"s\">&#34;Trapped!&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Escaped in %d minute(s).</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>F. Pots</h2><a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D3414\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3414 -- Pots</a><p>题意：两个没有刻度的杯子可以互相倒水，问能不能量出给定的体积</p><p>题解：bfs，两个杯子各自的水量作为状态。记录路径的话记录一下fa结点就行了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stack&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 110\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n    <span class=\"n\">string</span> <span class=\"n\">opt</span><span class=\"p\">;</span>\n    <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">fa</span><span class=\"p\">;</span>\n    <span class=\"n\">Node</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">d</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fa</span><span class=\"p\">;</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fa</span><span class=\"p\">)</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">();</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">bfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">*&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">();</span>\n    <span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;&#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">c</span> <span class=\"o\">||</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;FILL(1)&#34;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;FILL(2)&#34;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;DROP(1)&#34;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;DROP(2)&#34;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;POUR(1,2)&#34;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n                    <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"s\">&#34;POUR(2,1)&#34;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">-&gt;</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">bfs</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ret</span><span class=\"p\">)</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;impossible&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>G. Fire!</h2><a href=\"https://link.zhihu.com/?target=https%3A//vjudge.net/problem/UVA-11624\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Fire! - UVA 11624 - Virtual Judge</a><p>题意：逃出火场</p><p>题解：先对火bfs一次，然后再从人开始bfs，，，这道题不止一个火</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">pt</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dx</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dy</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">char</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"n\">pt</span> <span class=\"n\">J</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">bfs1</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"n\">pt</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span> <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">fire</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">fire</span><span class=\"p\">));</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;F&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">pt</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">dx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">dy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">nx</span> <span class=\"o\">&gt;</span> <span class=\"n\">R</span> <span class=\"o\">||</span> <span class=\"n\">ny</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">ny</span> <span class=\"o\">&gt;</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;#&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">bfs2</span><span class=\"p\">(</span><span class=\"n\">pt</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"n\">pt</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>  <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span>\n    <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">][</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">pt</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">R</span> <span class=\"o\">||</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">dx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">dy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">nx</span> <span class=\"o\">&gt;</span> <span class=\"n\">R</span> <span class=\"o\">||</span> <span class=\"n\">ny</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">ny</span> <span class=\"o\">&gt;</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;#&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">fire</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">C</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> \n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;J&#39;</span><span class=\"p\">)</span> <span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">);</span>\n        <span class=\"n\">bfs1</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">bfs2</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"s\">&#34;IMPOSSIBLE&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>V. 找环</h2><a href=\"https://link.zhihu.com/?target=https%3A//vjudge.net/contest/261338%23problem/V\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-47afe2e36353982cbd9da95773bb4338_ipico.jpg\" data-image-width=\"256\" data-image-height=\"256\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[NWPU2018]萌新第二次上课作业-简单搜索 - Virtual Judge</a><p>我也不知道这是UVa的第几题</p><p>题意：找环，一个环的定义是环里的每个点都至少在两个方向上和环里的其他点相邻</p><p>题解：无脑dfs</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 110\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dx</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dy</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">char</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">prex</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">prey</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">dx</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">dy</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nx</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;.&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">==</span> <span class=\"n\">prex</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">==</span> <span class=\"n\">prey</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">;</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;.&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>1. 后记</h2><p>偷懒了……好菜啊……</p>", 
            "topic": [
                {
                    "tag": "算法竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19758328"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48055369", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 6, 
            "title": "NOI2018 归程【Dijkstra+Kruskal重构树+瓶颈路】", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=http%3A//uoj.ac/problem/393\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Universal Online Judge</a><p>当时同步赛的时候一看到这个积水就觉得要传递一下两点之间的最小值最大……结果……传递完了……接下来应该怎么做啊……结果成功爆0</p><p>因为最后还是要求路程的，所以还是先用Dijkstra求一遍最短路，然后算出起点到每个点的路程，记录在 <img src=\"https://www.zhihu.com/equation?tex=mincost_i\" alt=\"mincost_i\" eeimg=\"1\"/> 里</p><p>然后之前有提到过ACM/ICPC World Finals 2010的一道叫做“下雨”的题目，里面提到了如果一条路径是有积水的，那么当前的水位应该超过了这两点之间路径的最小值最大，也就是一个瓶颈路问题，之前考虑的是用Dijkstra来传递，但是就很难维护题目要求的路程，因此还是得像NOIP2013货车运输一样，考虑用生成树+倍增</p><p>两点之间的最小值最大一定是在原图的最大生成树上的，我们把生成树建出来以后，就是在从两点倍增到LCA的过程中不断维护最小值就行了，这个题目比较特殊，其中一个点是 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> ，因此直接把 <img src=\"https://www.zhihu.com/equation?tex=v\" alt=\"v\" eeimg=\"1\"/> 逐级上提就可以了。这里有一个把最短路径树利用Kruskal重构的过程，称为Kruskal重构树，它把树的结点变成 <img src=\"https://www.zhihu.com/equation?tex=2n-1\" alt=\"2n-1\" eeimg=\"1\"/> 个，然后所有的叶子结点表示原树的结点，剩下的结点代表一条边的权值</p><p>P.S这道题Extra Test的最大值超过了0x3f3f3f3f，，，还好UOJ可以看测试点结果。。。</p><p>（话说规定一个常数为最大层数的倍增和每次去计算最大层数的倍增到底那个快啊。。。我试了一下怎么直接用20来做反而比每次计算_log要快）</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 200100\n</span><span class=\"cp\">#define M 400100\n</span><span class=\"cp\">#define INF 2147483647\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">pi</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Graph</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n        <span class=\"n\">Edge</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n        <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">),</span> <span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span> <span class=\"n\">e</span><span class=\"p\">[(</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">MST</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n        <span class=\"n\">MST</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n        <span class=\"n\">MST</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span> <span class=\"n\">r</span><span class=\"p\">[(</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> \n        <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MST</span><span class=\"o\">&amp;</span> <span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MST</span><span class=\"o\">&amp;</span> <span class=\"n\">m2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">m1</span><span class=\"p\">.</span><span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">m2</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">],</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">],</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">],</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">][</span><span class=\"mi\">21</span><span class=\"p\">];</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">];</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">));</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MST</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dijkstra</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//memset(d, 0x3f, sizeof(d));\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n        <span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"n\">pi</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n        <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">));</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">pi</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">l</span><span class=\"p\">;</span>\n                    <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">));</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">//for (int i = 1; i &lt;= n; ++i) printf(&#34;%d%c&#34;, d[i], i == n ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">LCA_init</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n                <span class=\"c1\">//printf(&#34;i:%d j:%d anc:%d\\n&#34;, i, j, anc[i][j]);\n</span><span class=\"c1\"></span>            <span class=\"p\">}</span>\n        <span class=\"cm\">/*\n</span><span class=\"cm\">        for (int i = 1; i &lt;= n + m; ++i)\n</span><span class=\"cm\">            for (int j = 1; j &lt;= 20; ++j)\n</span><span class=\"cm\">                printf(&#34;%d%c&#34;, anc[i][j], j == 20 ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"cm\">        */</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">&gt;</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"c1\">//printf(&#34;%d\\n&#34;, mincost[x]);\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]);</span> <span class=\"p\">}</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">kruskal</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n        <span class=\"c1\">//for (int i = 1; i &lt;= m; ++i) printf(&#34;%d%c&#34;, r[i].w, i == m ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n            <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]);</span>\n            <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">//for (int i = 1; i &lt;= n + m; ++i) printf(&#34;%d%c&#34;, v[i], i == n + m ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"c1\"></span>        <span class=\"c1\">//for (int i = 1; i &lt;= n + m; ++i) printf(&#34;%d%c&#34;, mincost[i], i == n + m ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"c1\"></span>        <span class=\"cm\">/*\n</span><span class=\"cm\">        for (int i = 1; i &lt;= n + m; ++i)\n</span><span class=\"cm\">                printf(&#34;%d%c&#34;, anc[i][0], i == n + m ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"cm\">        */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">g</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">),</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">EOF</span> <span class=\"p\">:</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lstans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">();</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n            <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">//for (int i = 1; i &lt;= m; ++i) printf(&#34;%d%c&#34;, g.r[i].w, i == m ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"c1\"></span>        <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">dijkstra</span><span class=\"p\">();</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">kruskal</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">);</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">LCA_init</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">);</span>\n        <span class=\"cm\">/*\n</span><span class=\"cm\">        for (int i = 1; i &lt;= n + m; ++i)\n</span><span class=\"cm\">            for (int j = 1; j &lt;= 20; ++j)\n</span><span class=\"cm\">                printf(&#34;%d%c&#34;, g.anc[i][j], j == 20 ? &#39;\\n&#39; : &#39; &#39;);\n</span><span class=\"cm\">        */</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">p0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">q</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">v0</span> <span class=\"o\">+</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">lstans</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p0</span> <span class=\"o\">+</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">lstans</span> <span class=\"o\">*</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"c1\">//printf(&#34;%d %d\\n&#34;, v, p);\n</span><span class=\"c1\"></span>            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">lstans</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "NOI（全国青少年信息学奥林匹克竞赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636864"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47405064", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 13, 
            "title": "字符串匹配——Brute-Force、Sunday以及KMP算法", 
            "content": "<h2>0. 先bb几句</h2><p>在学习C程序设计刷NOJ的题目的时候，突然有人问LoliconAutomaton应该怎么在一个字符串里找另一个字符串，鉴于LoliconAutomaton自己也不太会，决定滚来写一写</p><hr/><h2>1. 符号和术语</h2><ul><li>用大写字母表示一个字符串</li><li>用小写字母或者大写字母加下标表示一个字符</li><li>用小写字母或者希腊字母表示一个状态或者一个函数</li><li>用大写字母的绝对值表示该字符串的长度</li><li>大 <img src=\"https://www.zhihu.com/equation?tex=O\" alt=\"O\" eeimg=\"1\"/> 表示渐进时间复杂度</li></ul><hr/><h2>2. 字符串匹配问题与Brute-Force算法</h2><p>给定文本 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 和模板 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> ，询问 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 是否在 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 中出现过</p><p>拿到这提问题，感觉很愉快啊，直接无脑在 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 里枚举就行了，也就是我们说的最纯粹的Brute-Force算法，该算法分为下面几步：</p><ul><li>在枚举字符<img src=\"https://www.zhihu.com/equation?tex=ch%5Cin+S\" alt=\"ch\\in S\" eeimg=\"1\"/> </li><li>从 <img src=\"https://www.zhihu.com/equation?tex=ch\" alt=\"ch\" eeimg=\"1\"/> 的下标 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 开始对连续的 <img src=\"https://www.zhihu.com/equation?tex=%7CT%7C\" alt=\"|T|\" eeimg=\"1\"/> 个字符进行检查</li><li>如果刚好和 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 相等，那么就找到了，否则，继续找下去</li></ul><p>看起来像这样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-668b9c59980507655ca3a7eafa4ae5ef_b.jpg\" data-rawwidth=\"212\" data-rawheight=\"250\" data-size=\"normal\" class=\"content_image\" width=\"212\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;212&#39; height=&#39;250&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"212\" data-rawheight=\"250\" data-size=\"normal\" class=\"content_image lazy\" width=\"212\" data-actualsrc=\"https://pic4.zhimg.com/v2-668b9c59980507655ca3a7eafa4ae5ef_b.jpg\"/><figcaption>图1</figcaption></figure><div class=\"highlight\"><pre><code class=\"language-text\">n &lt;- S.length, m &lt;- T.length\nfor p &lt;- 0 to n - m\n    if T[1..m] equal to S[(p + 1)..(p + m)] then\n        print &#34;Find!&#34;</code></pre></div><p>这个算法的正确性是显然的</p><p>我们来分析一下这个算法，外层的循环消耗的时间是 <img src=\"https://www.zhihu.com/equation?tex=O%28n%29\" alt=\"O(n)\" eeimg=\"1\"/> 的，内层循环消耗的时间是 <img src=\"https://www.zhihu.com/equation?tex=O%28m%29\" alt=\"O(m)\" eeimg=\"1\"/> 的，因此总时间复杂度是 <img src=\"https://www.zhihu.com/equation?tex=O%28nm%29\" alt=\"O(nm)\" eeimg=\"1\"/> 的。当然，你可以这样说，这是一个非常不错的算法，实现非常简洁易懂，也很可靠，并且在后面我们会看到，当字符串是完全随机的时候，这个算法将拥有很不错的表现。但毕竟这个算法随规模的增长太快了，是不可能适用于工业生产的，因此我们需要更好的算法</p><hr/><h2>3. Sunday算法</h2><p>Sunday算法可以看做是Brute-Force算法的改进。还记得Brute-Force是怎么做的吗？</p><blockquote>if T[1..m] equal to S[(p + 1)..(p+m)] then</blockquote><p>Sunday算法关注了一个量：</p><ul><li><img src=\"https://www.zhihu.com/equation?tex=S_%7Bp+%2B+m+%2B+1%7D\" alt=\"S_{p + m + 1}\" eeimg=\"1\"/> </li></ul><p>为什么要关注这个量呢？我们考虑这个字符与模板的关系，如果这个字符不在模板里，我们还需要理会它吗？不需要了。Sunday算法正是基于这个事实工作的</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-60554e0fca36dc91be798d41ec8c34e2_b.jpg\" data-rawwidth=\"202\" data-rawheight=\"146\" data-size=\"normal\" class=\"content_image\" width=\"202\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;202&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"202\" data-rawheight=\"146\" data-size=\"normal\" class=\"content_image lazy\" width=\"202\" data-actualsrc=\"https://pic3.zhimg.com/v2-60554e0fca36dc91be798d41ec8c34e2_b.jpg\"/><figcaption>图2</figcaption></figure><p>我们先把模板和文本左对齐，假设现在 <img src=\"https://www.zhihu.com/equation?tex=T_1%3DS_p\" alt=\"T_1=S_p\" eeimg=\"1\"/> ，那么我们关注 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bp%2B%7CT%7C%2B1%7D\" alt=\"S_{p+|T|+1}\" eeimg=\"1\"/> ，也就是 <img src=\"https://www.zhihu.com/equation?tex=S_4%3Dd\" alt=\"S_4=d\" eeimg=\"1\"/> ，它并不在模板中，因此我们应该跳过这一段，从第五位开始，这个时候 <img src=\"https://www.zhihu.com/equation?tex=S_8%3Dc\" alt=\"S_8=c\" eeimg=\"1\"/> 在模板中出现的位置是最后一位，因此我们把模板向右移动一位，匹配成功</p><p>因此我们需要计算一个所谓的“失配函数” <img src=\"https://www.zhihu.com/equation?tex=fail_%7Bch%7D\" alt=\"fail_{ch}\" eeimg=\"1\"/> ，表示一旦这个字符不匹配了，我应该跳到哪个位置继续匹配考虑到对于每个字母，我们应该找到他出现得最晚的地方，才会不漏掉所有可能的解，所以我们得到了表达式: <img src=\"https://www.zhihu.com/equation?tex=last_%7Bch%7D%3D+%5Cbegin%7Bcases%7D+max%5C%7Bm-p%2B1%5C%7D%2CT_p%3Dch%5C%5C+m%2B1%2Cotherwise+%5Cend%7Bcases%7D+\" alt=\"last_{ch}= \\begin{cases} max\\{m-p+1\\},T_p=ch\\\\ m+1,otherwise \\end{cases} \" eeimg=\"1\"/> </p><div class=\"highlight\"><pre><code class=\"language-text\">n &lt;- S.length, m &lt;- T.length\nfor i &lt;- 0 to 25\n    fail[i] &lt;- m + 1\nfor i &lt;- m - 1 down to 1\n    if not calculate fail[T[i]] yet then \n        fail[T[i]] &lt;- i\nwhile p &lt;= n - m do\n    j &lt;- 1\n    while S[p + j + 1] equal to T[j] do\n        j &lt;- j + 1\n        if j == m then \n            print &#34;Find!&#34;\n    p &lt;- p + fail[S[p + m + 1]]</code></pre></div><p>相较之下，虽然渐进时间复杂度并没有发生改变，但由于每次跳跃的距离非常大，因此效率是很可观的。比如，Brute-Force用了7次才匹配完成的模板（图1），Sunday仅用了4次就得到了答案（图2）</p><hr/><h2>4. KMP</h2><p>“感觉Brute-Force写起来好麻烦啊（雾，还有没有其他做法？”</p><p>“当然是有的，比如说，你可以标记一下模板的第一个字符在文本中的所有位置，然后把它们组织成一条链，当这个位置不匹配的时候直接跳到下一个位置……”LoliconAutomaton口胡了一个做法，“事实上，有一种非常类似的算法叫做KMP(Knuth-Morris-Pratt算法)，比这个还要强。”</p><p>回顾Sunday算法（图2），我们求了一个失配函数 <img src=\"https://www.zhihu.com/equation?tex=fail_%7Bch%7D\" alt=\"fail_{ch}\" eeimg=\"1\"/> ，并且关注了 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bp%2Bm%2B1%7D\" alt=\"S_{p+m+1}\" eeimg=\"1\"/> 位置的字符与模板的关系。但在这些信息里，依然后很多信息是不必要的</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5a6cc637496627c54e385656cf8733fd_b.jpg\" data-rawwidth=\"306\" data-rawheight=\"190\" data-size=\"normal\" class=\"content_image\" width=\"306\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;306&#39; height=&#39;190&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"306\" data-rawheight=\"190\" data-size=\"normal\" class=\"content_image lazy\" width=\"306\" data-actualsrc=\"https://pic2.zhimg.com/v2-5a6cc637496627c54e385656cf8733fd_b.jpg\"/><figcaption>图3</figcaption></figure><p>如图3，前q个字符是匹配的，而很显然 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bp%2Bm%2B1%7D\" alt=\"S_{p+m+1}\" eeimg=\"1\"/> 是无效的，但是从 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bp%2Bm%2B2%7D\" alt=\"S_{p+m+2}\" eeimg=\"1\"/> 开始却和模板中的前三个字符一样，因此这个移动是有效的，和Sunday一样，我们需要一个失配函数来计算偏移量</p><ul><li>字符串的前缀：对于字符串 <img src=\"https://www.zhihu.com/equation?tex=S%5B1..n%5D\" alt=\"S[1..n]\" eeimg=\"1\"/> ，所有的 <img src=\"https://www.zhihu.com/equation?tex=S%5B1..i%5D%2Ci%5Cle+n\" alt=\"S[1..i],i\\le n\" eeimg=\"1\"/> 或者空串称为 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 的前缀</li><li>字符串的后缀：和前缀一样，我们定义所有 <img src=\"https://www.zhihu.com/equation?tex=S%5Bj..n%5D%2Cj%5Cge1\" alt=\"S[j..n],j\\ge1\" eeimg=\"1\"/> 或者空串为 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 的后缀</li><li><img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 的后缀函数 <img src=\"https://www.zhihu.com/equation?tex=%5Csigma%28x%29\" alt=\"\\sigma(x)\" eeimg=\"1\"/> ：对于一个状态 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=%5Csigma%28x%29\" alt=\"\\sigma(x)\" eeimg=\"1\"/> 表示了 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> 的后缀 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 的最长前缀长度，算导上的这个名词说起来非常拗口，我的理解就是对于给出的状态 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> ，枚举它的后缀，然后在 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 里面求一个最长的前缀和这个后缀相等，例如， <img src=\"https://www.zhihu.com/equation?tex=T%3Dab%2Cx%3Dacab%2C%5Csigma%28x%29%3D2\" alt=\"T=ab,x=acab,\\sigma(x)=2\" eeimg=\"1\"/> .我们可以用如下方法计算后缀函数：<br/> <img src=\"https://www.zhihu.com/equation?tex=%5Csigma%28x%29%3Dmax%5C%7Bk%7CT_k%5Cspace+is%5Cspace+a%5Cspace+suffix%5Cspace+of%5Cspace+x%5C%7D%5Ctag%7B1%7D\" alt=\"\\sigma(x)=max\\{k|T_k\\space is\\space a\\space suffix\\space of\\space x\\}\\tag{1}\" eeimg=\"1\"/> <br/>对于一个串 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 显然它所有后缀的 <img src=\"https://www.zhihu.com/equation?tex=%5Csigma\" alt=\"\\sigma\" eeimg=\"1\"/> 小于等于它自己的，我们规定空串的 <img src=\"https://www.zhihu.com/equation?tex=%5Csigma%3D0\" alt=\"\\sigma=0\" eeimg=\"1\"/> </li></ul><p>转移函数 <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta%28q%2C+a%29\" alt=\"\\delta(q, a)\" eeimg=\"1\"/> ：匹配的时候在状态 <img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"q\" eeimg=\"1\"/> ，也就是图3中第二行的 <img src=\"https://www.zhihu.com/equation?tex=ababa\" alt=\"ababa\" eeimg=\"1\"/> ，读入了一个字符 <img src=\"https://www.zhihu.com/equation?tex=a\" alt=\"a\" eeimg=\"1\"/> ，然后我们的匹配过程从状态 <img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"q\" eeimg=\"1\"/> 变成了 <img src=\"https://www.zhihu.com/equation?tex=k%3D%5Cdelta%28q%2Ca%29\" alt=\"k=\\delta(q,a)\" eeimg=\"1\"/> ，也就是图3中的 <img src=\"https://www.zhihu.com/equation?tex=aba\" alt=\"aba\" eeimg=\"1\"/> .我们可以利用 <img src=\"https://www.zhihu.com/equation?tex=%281%29\" alt=\"(1)\" eeimg=\"1\"/> 定义转移函数：<br/> <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta%28q%2Ca%29%3D%5Csigma%28T_qa%29%5Ctag%7B2%7D\" alt=\"\\delta(q,a)=\\sigma(T_qa)\\tag{2}\" eeimg=\"1\"/> <br/>有了 <img src=\"https://www.zhihu.com/equation?tex=%282%29\" alt=\"(2)\" eeimg=\"1\"/> ，我们就可以记录 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 与 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 的最长前缀。我们考虑 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 的某个以<img src=\"https://www.zhihu.com/equation?tex=T%5Bj%5D\" alt=\"T[j]\" eeimg=\"1\"/> 结尾的前缀 <img src=\"https://www.zhihu.com/equation?tex=T_j\" alt=\"T_j\" eeimg=\"1\"/> ，如果它能和 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 中某一个以 <img src=\"https://www.zhihu.com/equation?tex=S%5Bi%5D\" alt=\"S[i]\" eeimg=\"1\"/> 结尾的子串匹配，那么 <img src=\"https://www.zhihu.com/equation?tex=T_j\" alt=\"T_j\" eeimg=\"1\"/> 一定是 <img src=\"https://www.zhihu.com/equation?tex=S_i\" alt=\"S_i\" eeimg=\"1\"/> 的一个后缀。当新读进的字符 <img src=\"https://www.zhihu.com/equation?tex=a\" alt=\"a\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bi%2B1%7D\" alt=\"S_{i+1}\" eeimg=\"1\"/> 相匹配的时候，就转移到 <img src=\"https://www.zhihu.com/equation?tex=q%2B1\" alt=\"q+1\" eeimg=\"1\"/> ，否则，就找一个更小的既是 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 的前缀也是 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 的后缀的状态继续进行匹配，也就是下面这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">n &lt;- S.length, m &lt;- T.length\nq &lt;- 0\nfor i &lt;- 1 to n\n    q &lt;- delta(q, S[i])\n    if q equal to m then \n        print &#34;Find!&#34;\n//这样计算delta，从min{m, q + 1}开始递减\nm &lt;- T.length\nfor q &lt;- 0 to m\n    for each character a in Alphabet\n        k &lt;- min{m + 1, q + 2}\n        repeat\n            k &lt;- k - 1\n        until T[k] if a suffix of T[k]a\n    return k</code></pre></div><ul><li>辅助函数 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28q%29\" alt=\"\\pi(q)\" eeimg=\"1\"/> ：通过这个函数我们可以快速地计算出 <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta%28q%2Ca%29\" alt=\"\\delta(q,a)\" eeimg=\"1\"/> ，说的简单一点这个函数的功能就是找一个既是 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 的前缀又是 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 的后缀的最长前缀的长度。<br/>回顾图3，我们已经匹配了5个字符，第6个字符不匹配了，这时我们没有选择跳到 <img src=\"https://www.zhihu.com/equation?tex=p%2Bq%2B1\" alt=\"p+q+1\" eeimg=\"1\"/> ，而是直接跳到了 <img src=\"https://www.zhihu.com/equation?tex=p%27%3Dp%2Bq%2B2\" alt=\"p&#39;=p+q+2\" eeimg=\"1\"/> 开始继续匹配因为 <img src=\"https://www.zhihu.com/equation?tex=T_3\" alt=\"T_3\" eeimg=\"1\"/> 是 <img src=\"https://www.zhihu.com/equation?tex=T_5\" alt=\"T_5\" eeimg=\"1\"/> 的后缀中最长的前缀，也就是 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%285%29%3D3\" alt=\"\\pi(5)=3\" eeimg=\"1\"/> ，假设我们在 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 出现了失配，此时已经匹配了 <img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"q\" eeimg=\"1\"/> 的长度，我们可以直接跳到 ：<br/><img src=\"https://www.zhihu.com/equation?tex=p%27%3Dp%2B%28q-%5Cpi%28q%29%29%5Ctag%7B3%7D\" alt=\"p&#39;=p+(q-\\pi(q))\\tag{3}\" eeimg=\"1\"/> <br/>进行匹配和前面的 <img src=\"https://www.zhihu.com/equation?tex=%5Csigma%28x%29\" alt=\"\\sigma(x)\" eeimg=\"1\"/> 类似，我们通过 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28q%29%3Dmax%5C%7Bk%7CT%5Bk%5D%5Cspace+is%5Cspace+a%5Cspace+suffix%5Cspace+of%5Cspace+T%5Bq%5D%5C%7D\" alt=\"\\pi(q)=max\\{k|T[k]\\space is\\space a\\space suffix\\space of\\space T[q]\\}\" eeimg=\"1\"/> 来计算出 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28q%29\" alt=\"\\pi(q)\" eeimg=\"1\"/> 的值，下面给出了图3中模板 <img src=\"https://www.zhihu.com/equation?tex=T%3Dababaca\" alt=\"T=ababaca\" eeimg=\"1\"/> 的 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"/> .其中，第一位的 <img src=\"https://www.zhihu.com/equation?tex=a\" alt=\"a\" eeimg=\"1\"/> 前缀是空串，而第二位的 <img src=\"https://www.zhihu.com/equation?tex=b\" alt=\"b\" eeimg=\"1\"/> 的前缀是 <img src=\"https://www.zhihu.com/equation?tex=a\" alt=\"a\" eeimg=\"1\"/>：</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5475b30a67320bbdf47f098b12791e0c_b.jpg\" data-rawwidth=\"266\" data-rawheight=\"112\" data-size=\"normal\" class=\"content_image\" width=\"266\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;266&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"266\" data-rawheight=\"112\" data-size=\"normal\" class=\"content_image lazy\" width=\"266\" data-actualsrc=\"https://pic1.zhimg.com/v2-5475b30a67320bbdf47f098b12791e0c_b.jpg\"/><figcaption>图4</figcaption></figure><p>有了这个函数，我们就可以飞快地实现字符串匹配了：</p><div class=\"highlight\"><pre><code class=\"language-text\">n &lt;- S.length, m &lt;- T.length\ncalculate pi\nq &lt;- 0\nfor i &lt;- 1 to n\n    while q &gt; 0 and T[q + 1] not equal to S[i] do\n        q &lt;- pi[q]\n    if T[q + 1] equal to T[i] then\n        q &lt;- q + 1\n    if q equal to m then\n        print &#34;Find!&#34;\n        q &lt;- pi[q] //寻找下一个匹配\n//下面的伪代码阐述了calculate是怎么工作的\nm &lt;- T.length\npi[1] &lt;- 0, k &lt;- 0\nfor q &lt;- 2 to m\n    while k &gt; 0 and T[k + 1] not equal to T[q] do\n        k &lt;- pi[k]\n    if T[k + 1] equal to T[q]\n        k &lt;- k + 1\n    pi[q] = k\nreturn pi</code></pre></div><p>你非常惊奇地发现calculate几乎和匹配的过程是一模一样的！这也并不奇怪，因为calcute的过程可以被看作是对字符串本身的一次匹配</p><p>下面是关于 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"/> 数组的一个简单易懂的解释：</p><blockquote>对于字符串 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 的前 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> 个字符构成的子串，既是它的后缀又是它的前缀的字符串中（它本身除外），最长的长度记作 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28i%29\" alt=\"\\pi(i)\" eeimg=\"1\"/> </blockquote><p>引用自NOI2014《动物园》的题面</p><h2>5. 模板</h2><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problemnew/show/P3375\" data-image=\"https://pic4.zhimg.com/v2-80197f68659f64a3842ee29851b4f847_120x160.jpg\" data-image-width=\"236\" data-image-height=\"328\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P3375】【模板】KMP字符串匹配 - 洛谷</a><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 1000100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">char</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">get_fail</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">KMP</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">);</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">),</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">);</span>\n    <span class=\"n\">get_fail</span><span class=\"p\">();</span> <span class=\"n\">KMP</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%c&#34;</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">m</span> <span class=\"o\">?</span> <span class=\"sc\">&#39;\\n&#39;</span> <span class=\"o\">:</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>6. 例题</h2><div class=\"highlight\"><pre><code class=\"language-text\">//这里本来是应该有例题的，但是LoliconAutomaton实在是太蒻啦，找不到什么会做的KMP题目\n//占坑待补（似乎之前FFT的坑都还没补）</code></pre></div><hr/><h2>7. 后话</h2><p>其实KMP算法仅仅只是在一个模板的情况下表现得非常优秀而已，实际运用KMP还是很吃力的。但是LoliconAutomaton太蒻了，因此也不太会其他字符串匹配的数据结构啦</p><hr/><h2>8. Acknowledgement</h2><p>关于Sunday的部分参考了百度百科：<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/sunday%2520%25E7%25AE%2597%25E6%25B3%2595/1816405%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">sunday 算法_百度百科</a></p><p>关于KMP的部分参考了《算法导论（第三版）》中文版（机械工业出版社）P577~590</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }
            ], 
            "comments": [
                {
                    "userName": "Y楊先生", 
                    "userLink": "https://www.zhihu.com/people/af602e149d27eca1e35a8db856ea97ba", 
                    "content": "<p>貌似还有shift-and/shift-or算法也很有趣</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "布吉岛（汗", 
                            "likes": 0, 
                            "replyToAuthor": "Y楊先生"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47021042", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 22, 
            "title": "快速傅里叶变换", 
            "content": "<h2>0. 先bb几句</h2><p>被数学教做人……顺便帮我补了一波线性代数……</p><p>快速傅里叶变换是工程中非常有价值的一类算法，它可以将时域和频域的信号相互转化，在这里仅介绍它对多项式乘法的加速作用</p><hr/><h2>1. 多项式</h2><p>1.1 先看几个概念</p><ul><li>数域：一个数域是一个包含了至少一个非零数的数集 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BK%7D\" alt=\"\\mathbb{K}\" eeimg=\"1\"/> ，如果 <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+a%2Cb%5Cin%5Cmathbb%7BK%7D\" alt=\"\\forall a,b\\in\\mathbb{K}\" eeimg=\"1\"/> ，有 <img src=\"https://www.zhihu.com/equation?tex=a%2Bb%2Ca-b%2Ca%5Ctimes+b%2C+a%5Cdiv+b+%5Cin%5Cmathbb%7BK%7D\" alt=\"a+b,a-b,a\\times b, a\\div b \\in\\mathbb{K}\" eeimg=\"1\"/> ，那么我们称 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BK%7D\" alt=\"\\mathbb{K}\" eeimg=\"1\"/> 为一个数域。说个题外话，有理数域 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BQ%7D\" alt=\"\\mathbb{Q}\" eeimg=\"1\"/> 是最小的数域。后面的讨论将围绕复数域 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BC%7D\" alt=\"\\mathbb{C}\" eeimg=\"1\"/> 展开</li><li>多项式：我们把定义在数域 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BF%7D\" alt=\"\\mathbb{F}\" eeimg=\"1\"/> 上，将函数 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%3D%5Csum_%7Bj%3D0%7D%5E%7Bn-1%7Da_jx%5Ej\" alt=\"A(x)=\\sum_{j=0}^{n-1}a_jx^j\" eeimg=\"1\"/> 称为关于 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> 的 <img src=\"https://www.zhihu.com/equation?tex=n-1\" alt=\"n-1\" eeimg=\"1\"/> 次多项式</li><li>多项式的系数：我们把所有的 <img src=\"https://www.zhihu.com/equation?tex=a_0%2Ca_1%2Ca_2%2C...%2Ca_%7Bn-1%7D\" alt=\"a_0,a_1,a_2,...,a_{n-1}\" eeimg=\"1\"/> 称为多项式的系数</li><li>次数和次数界：如果多项式 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29\" alt=\"A(x)\" eeimg=\"1\"/> 的最高次的非零系数称为 <img src=\"https://www.zhihu.com/equation?tex=a_k\" alt=\"a_k\" eeimg=\"1\"/> ，那么 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/> 就是这个多项式的次数，记 <img src=\"https://www.zhihu.com/equation?tex=degree%28A%29%3Dk\" alt=\"degree(A)=k\" eeimg=\"1\"/> ，任何严格大于 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/> 的整数都可以说是这个多项式的次数界</li></ul><p>1.2 接下来我们看一下多项式加法：</p><ul><li>给出多项式 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%2CB%28x%29\" alt=\"A(x),B(x)\" eeimg=\"1\"/> ，求 <img src=\"https://www.zhihu.com/equation?tex=C%28x%29%3DA%28x%29%2BB%28x%29\" alt=\"C(x)=A(x)+B(x)\" eeimg=\"1\"/> </li></ul><p>不难发现 <img src=\"https://www.zhihu.com/equation?tex=degree%28C%29%3Dmax%5C%7Bdegree%28A%29%2C+degree%28B%29%5C%7D\" alt=\"degree(C)=max\\{degree(A), degree(B)\\}\" eeimg=\"1\"/> ，而且有 <img src=\"https://www.zhihu.com/equation?tex=c_j%3Da_j%2Bb_j\" alt=\"c_j=a_j+b_j\" eeimg=\"1\"/> ，其中 <img src=\"https://www.zhihu.com/equation?tex=a_j%2Cb_j\" alt=\"a_j,b_j\" eeimg=\"1\"/> 分别为两个多项式中 <img src=\"https://www.zhihu.com/equation?tex=x_j\" alt=\"x_j\" eeimg=\"1\"/> 的系数（可以是零）</p><p>非常显然，我们可以在 <img src=\"https://www.zhihu.com/equation?tex=O%28max%5C%7Bdegree%28A%29%2Cdegree%28B%29%5C%7D%29\" alt=\"O(max\\{degree(A),degree(B)\\})\" eeimg=\"1\"/> 的时间里计算完毕，并且得到相等规模的多项式</p><p>1.3 多项式乘法</p><p>假设 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%2CB%28x%29\" alt=\"A(x),B(x)\" eeimg=\"1\"/> 都是次数为 <img src=\"https://www.zhihu.com/equation?tex=n-1\" alt=\"n-1\" eeimg=\"1\"/> 的多项式，他们的乘积 <img src=\"https://www.zhihu.com/equation?tex=C%28x%29\" alt=\"C(x)\" eeimg=\"1\"/> 是一个次数界为 <img src=\"https://www.zhihu.com/equation?tex=2n-1\" alt=\"2n-1\" eeimg=\"1\"/> 的多项式，方法是把 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29\" alt=\"A(x)\" eeimg=\"1\"/> 中的每一项和 <img src=\"https://www.zhihu.com/equation?tex=B%28x%29\" alt=\"B(x)\" eeimg=\"1\"/> 中的每一项相乘，然后合并同类项：</p><ul><li><img src=\"https://www.zhihu.com/equation?tex=C%28x%29%3D%5Csum_%7Bj%3D0%7D%5E%7B2n-2%7Dc_jx%5Ej%2Cc_j%3D%5Csum_%7Bk%3D0%7D%5E%7Bj%7Da_kb_%7Bj-k%7D\" alt=\"C(x)=\\sum_{j=0}^{2n-2}c_jx^j,c_j=\\sum_{k=0}^{j}a_kb_{j-k}\" eeimg=\"1\"/> </li></ul><p>在这里， <img src=\"https://www.zhihu.com/equation?tex=degree%28C%29%3Ddegree%28A%29%2Bdegree%28B%29\" alt=\"degree(C)=degree(A)+degree(B)\" eeimg=\"1\"/> ，直接地，我们需要花费 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E2%29\" alt=\"O(n^2)\" eeimg=\"1\"/> 的时间计算结果</p><p>1.4 多项式的几种表达方法</p><ul><li>系数表达：我们令向量 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D%5Cin%5Cmathbb%7BR%5E%7Bn%5Ctimes+1%7D%7D\" alt=\"\\vec{a}\\in\\mathbb{R^{n\\times 1}}\" eeimg=\"1\"/> 为多项式 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29\" alt=\"A(x)\" eeimg=\"1\"/> 所有的系数： <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D%3D%28a_0%2C+a_1%2C+a_2%2C...%2Ca_%7Bn-1%7D%29\" alt=\"\\vec{a}=(a_0, a_1, a_2,...,a_{n-1})\" eeimg=\"1\"/> ，把这个列向量称为 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29\" alt=\"A(x)\" eeimg=\"1\"/> 的系数表达</li><li>秦九韶算法：在1.3的讨论中看到，对于给定的 <img src=\"https://www.zhihu.com/equation?tex=x_0\" alt=\"x_0\" eeimg=\"1\"/> ，计算 <img src=\"https://www.zhihu.com/equation?tex=A%28x_0%29\" alt=\"A(x_0)\" eeimg=\"1\"/> 是非常麻烦的，需要 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E2%29\" alt=\"O(n^2)\" eeimg=\"1\"/> 次乘法运算。在计算机中，这样的运算规模显然过于庞大。在这里不加证明地给出（~~因为我不会证明~~）秦九韶定理： <img src=\"https://www.zhihu.com/equation?tex=A%28x_0%29%3Da_0%2Bx_0%28a_1%2Bx_0%28a_2%2B...%2Bx_0%28a_%7Bn-1%7D%29%29...%29%29\" alt=\"A(x_0)=a_0+x_0(a_1+x_0(a_2+...+x_0(a_{n-1}))...))\" eeimg=\"1\"/> ，通过这个定理，我们可以发现只需要进行 <img src=\"https://www.zhihu.com/equation?tex=O%28n%29\" alt=\"O(n)\" eeimg=\"1\"/> 的运算，就可以求得答案。因此，系数表达十分适合多项式求值</li><li>卷积：我们把1.3中推导出多项式乘法的系数 向量<img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Bc%7D\" alt=\"\\vec{c}\" eeimg=\"1\"/> 的表达式称为多项式 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%2CB%28x%29\" alt=\"A(x),B(x)\" eeimg=\"1\"/> 的系数向量 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D%2C%5Cvec%7Bb%7D\" alt=\"\\vec{a},\\vec{b}\" eeimg=\"1\"/> 的卷积，记作 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Bc%7D+%3D%5Cvec%7Ba%7D+%5Cotimes+%5Cvec%7Bb%7D+\" alt=\"\\vec{c} =\\vec{a} \\otimes \\vec{b} \" eeimg=\"1\"/> ，和1.3中的结论一样，利用系数表达来求卷积显得十分繁复</li><li>点值表达：假设我们有一组点 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Bx%7D%3D%28x_0%2C+x_1%2C+x_2%2C+...%2C+x_%7Bn-1%7D%2C%5Cforall+%28i%2Cj%29%2Cx_i%5Cnot%3Dx_j%29\" alt=\"\\vec{x}=(x_0, x_1, x_2, ..., x_{n-1},\\forall (i,j),x_i\\not=x_j)\" eeimg=\"1\"/> ，通过多项式可以得到对应的值 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7By%7D+%3D%28y_0%2C+y_1%2C+y_2%2C+...%2C+y_%7Bn-1%7D%2Cy_i%3DA%28x_i%29%29\" alt=\"\\vec{y} =(y_0, y_1, y_2, ..., y_{n-1},y_i=A(x_i))\" eeimg=\"1\"/> ，那么，和函数中的点值表达法类似，我们可以通过这些点对来描述这个多项式： <img src=\"https://www.zhihu.com/equation?tex=%5C%7B%28x_0%2Cy_0%29%2C%28x_1%2Cy_1%29%2C...%2C%28x_%7Bn-1%7D%2Cy_%7Bn-1%7D%29%5C%7D\" alt=\"\\{(x_0,y_0),(x_1,y_1),...,(x_{n-1},y_{n-1})\\}\" eeimg=\"1\"/> ，这个集合称为 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29\" alt=\"A(x)\" eeimg=\"1\"/> 的点值表达。对于同一个多项式，可以有很多不同的点值表达。其中， <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Bx%7D\" alt=\"\\vec{x}\" eeimg=\"1\"/> 称为点值表示的“基”。显然，求出点集的时间为 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E2%29\" alt=\"O(n^2)\" eeimg=\"1\"/> （根据秦九韶定理，一个点需要 <img src=\"https://www.zhihu.com/equation?tex=O%28n%29\" alt=\"O(n)\" eeimg=\"1\"/> 的时间），根据《算法导论》的描述，通过“巧妙”的选基，我们可以在 <img src=\"https://www.zhihu.com/equation?tex=O%28nlogn%29\" alt=\"O(nlogn)\" eeimg=\"1\"/> 的时间里得到答案</li></ul><p>1.5 Vandermonde矩阵与多项式插值</p><ul><li>Vandermonde矩阵：我们把形如：<br/> <img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+1%26x_0%26x_0%5E2%26+...%26+x_0%5E%7Bn-1%7D%5C%5C+1%26x_1%26x_1%5E2%26...%26x_1%5E%7Bn-1%7D%5C%5C+%5Ccdot%26%5Ccdot%26%5Ccdot%26...%26%5Ccdot%5C%5C+%5Ccdot%26%5Ccdot%26%5Ccdot%26...%26%5Ccdot%5C%5C+%5Ccdot%26%5Ccdot%26%5Ccdot%26...%26%5Ccdot%5C%5C+1%26x_%7Bn-1%7D%26x_%7Bn-1%7D%5E2%26...%26x_%7Bn-1%7D%5E%7Bn-1%7D+%5Cend%7Bbmatrix%7D+%5Ctag%7BV%7D\" alt=\"\\begin{bmatrix} 1&amp;x_0&amp;x_0^2&amp; ...&amp; x_0^{n-1}\\\\ 1&amp;x_1&amp;x_1^2&amp;...&amp;x_1^{n-1}\\\\ \\cdot&amp;\\cdot&amp;\\cdot&amp;...&amp;\\cdot\\\\ \\cdot&amp;\\cdot&amp;\\cdot&amp;...&amp;\\cdot\\\\ \\cdot&amp;\\cdot&amp;\\cdot&amp;...&amp;\\cdot\\\\ 1&amp;x_{n-1}&amp;x_{n-1}^2&amp;...&amp;x_{n-1}^{n-1} \\end{bmatrix} \\tag{V}\" eeimg=\"1\"/> <br/>的矩阵称为Vandermonde矩阵，记作 <img src=\"https://www.zhihu.com/equation?tex=V%28%5Cvec%7Bx%7D+%29\" alt=\"V(\\vec{x} )\" eeimg=\"1\"/> ，其中，：<img src=\"https://www.zhihu.com/equation?tex=det+V%3D%5Cprod_%7B0%5Cle+j%3Ck%5Cle+n-1%7D%28x_k-x_j%29%2C%28n%5Cge2%29+%5Ctag%7B%2A%7D\" alt=\"det V=\\prod_{0\\le j&lt;k\\le n-1}(x_k-x_j),(n\\ge2) \\tag{*}\" eeimg=\"1\"/> <br/>证明过程如下 <img src=\"https://www.zhihu.com/equation?tex=%28D%3DV%5ET%29\" alt=\"(D=V^T)\" eeimg=\"1\"/> ：<br/>（1） <img src=\"https://www.zhihu.com/equation?tex=D_2%3D+%5Cleft%7C+%5Cbegin%7Bmatrix%7D+1%261%5C%5C+x_1%26x_2+%5Cend%7Bmatrix%7D+%5Cright%7C+%3Dx_2-x_1%3D%5Cprod_%7B1%5Cle+j%3Ck%5Cle+2%7D%28x_k-x_j%29\" alt=\"D_2= \\left| \\begin{matrix} 1&amp;1\\\\ x_1&amp;x_2 \\end{matrix} \\right| =x_2-x_1=\\prod_{1\\le j&lt;k\\le 2}(x_k-x_j)\" eeimg=\"1\"/> <br/>（2）假设结论对 <img src=\"https://www.zhihu.com/equation?tex=n-1\" alt=\"n-1\" eeimg=\"1\"/> 阶的Vandermonde行列式成立，将 <img src=\"https://www.zhihu.com/equation?tex=r_i-x_nr_%7Bi-1%7D\" alt=\"r_i-x_nr_{i-1}\" eeimg=\"1\"/> ，有：<br/> <img src=\"https://www.zhihu.com/equation?tex=D_n%3D+%5Cleft%7C+%5Cbegin%7Bmatrix%7D+1%261%26...%261%261%5C%5C+x_1-x_n%26x_2-x_n%26...%26x_%7Bn-1%7D-x_n%260%5C%5C+%5Ccdot%26%5Ccdot%26...%26%5Ccdot%26%5Ccdot%5C%5C+%5Ccdot%26%5Ccdot%26...%26%5Ccdot%26%5Ccdot%5C%5C+%5Ccdot%26%5Ccdot%26...%26%5Ccdot%26%5Ccdot%5C%5C+x_1%5E%7Bn-1%7D%28x_1-x_n%29%26x_2%5E%7Bn-1%7D%28x_2-x_n%29%26...%26x_%7Bn-1%7D%5E%7Bn-2%7D%28x_%7Bn-1%7D-x_n%29%260+%5Cend%7Bmatrix%7D+%5Cright%7C\" alt=\"D_n= \\left| \\begin{matrix} 1&amp;1&amp;...&amp;1&amp;1\\\\ x_1-x_n&amp;x_2-x_n&amp;...&amp;x_{n-1}-x_n&amp;0\\\\ \\cdot&amp;\\cdot&amp;...&amp;\\cdot&amp;\\cdot\\\\ \\cdot&amp;\\cdot&amp;...&amp;\\cdot&amp;\\cdot\\\\ \\cdot&amp;\\cdot&amp;...&amp;\\cdot&amp;\\cdot\\\\ x_1^{n-1}(x_1-x_n)&amp;x_2^{n-1}(x_2-x_n)&amp;...&amp;x_{n-1}^{n-2}(x_{n-1}-x_n)&amp;0 \\end{matrix} \\right|\" eeimg=\"1\"/> ，按照 <img src=\"https://www.zhihu.com/equation?tex=c_n\" alt=\"c_n\" eeimg=\"1\"/> 展开，可以得到 <img src=\"https://www.zhihu.com/equation?tex=D_n%3D%28-1%29%5E%7B%28n%2B1%29%7D%28x_1-x_n%29%28x_2-x_n%29%5Ccdots%28x_%7Bn-1%7D-x_n%29D_%7Bn-1%7D\" alt=\"D_n=(-1)^{(n+1)}(x_1-x_n)(x_2-x_n)\\cdots(x_{n-1}-x_n)D_{n-1}\" eeimg=\"1\"/> ，也就是 <img src=\"https://www.zhihu.com/equation?tex=%28%2A%29\" alt=\"(*)\" eeimg=\"1\"/> <br/>根据数学归纳法，命题得证</li><li>考虑线性变换 <img src=\"https://www.zhihu.com/equation?tex=V%28%5Cvec%7Bx%7D+%29%5Cvec%7Ba%7D+%3D%5Cvec%7By%7D\" alt=\"V(\\vec{x} )\\vec{a} =\\vec{y}\" eeimg=\"1\"/> ，稍有线性代数基础便可以得到 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D+%3D+V%28%5Cvec%7Bx%7D+%29%5E%7B-1%7D%5Cvec%7By%7D\" alt=\"\\vec{a} = V(\\vec{x} )^{-1}\\vec{y}\" eeimg=\"1\"/> ，这里要求 <img src=\"https://www.zhihu.com/equation?tex=V%28%5Cvec%7Bx%7D+%29\" alt=\"V(\\vec{x} )\" eeimg=\"1\"/> 是可逆的，也是我们在一开始规定基底时任两个数值不相等的原因，否则， <img src=\"https://www.zhihu.com/equation?tex=detV%3D0\" alt=\"detV=0\" eeimg=\"1\"/> ，矩阵不可逆根据上述公式，我们可以在 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E3%29\" alt=\"O(n^3)\" eeimg=\"1\"/> 的时间内根据点值表达得到唯一的系数表达</li><li>拉格朗日插值公式(Lagrange interpolation formula)： <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%3D%5Csum_%7Bk%3D0%7D%5E%7Bn-1%7D%5Cfrac%7B%5Cprod_%7Bj%5Cnot%3Dk%7D%28x-x_j%29%7D%7B%5Cprod_%7Bj%5Cnot%3Dk%7D%28x_k-x_j%29%7D\" alt=\"A(x)=\\sum_{k=0}^{n-1}\\frac{\\prod_{j\\not=k}(x-x_j)}{\\prod_{j\\not=k}(x_k-x_j)}\" eeimg=\"1\"/> ，你一定非常熟悉这个公式，因为当 <img src=\"https://www.zhihu.com/equation?tex=n%3D2\" alt=\"n=2\" eeimg=\"1\"/>的时候，这就是一次函数的两点表示法。通过这个公式，我们可以在 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E2%29\" alt=\"O(n^2)\" eeimg=\"1\"/> 的时间下获得系数表达</li><li>由于多项式乘法以后次数界是两个多项式的和，假设我们有两个次数界为 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 的多项式（在实际的实现中，两个多项式次数界不一样也是没有关系的），我们补 <img src=\"https://www.zhihu.com/equation?tex=0\" alt=\"0\" eeimg=\"1\"/> 补到多项式的长度是 <img src=\"https://www.zhihu.com/equation?tex=2n\" alt=\"2n\" eeimg=\"1\"/> ，根据点值表达分别写出:<br/> <img src=\"https://www.zhihu.com/equation?tex=%5C%7B%28x_0%2Cy_0%29%2C%28x_1%2Cy_1%29%2C...%2C%28x_%7B2n-1%7D%2Cy_%7B2n-1%7D%29%5C%7D\" alt=\"\\{(x_0,y_0),(x_1,y_1),...,(x_{2n-1},y_{2n-1})\\}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=%5C%7B%28x_0%2Cy_0%27%29%2C%28x_1%2Cy_1%27%29%2C...%2C%28x_%7B2n-1%7D%2Cy_%7B2n-1%7D%27%29%5C%7D\" alt=\"\\{(x_0,y_0&#39;),(x_1,y_1&#39;),...,(x_{2n-1},y_{2n-1}&#39;)\\}\" eeimg=\"1\"/> <br/>他们的卷积就是 <img src=\"https://www.zhihu.com/equation?tex=%5C%7B%28x_0%2Cy_0y_0%27%29%2C%28x_1%2Cy_1y_1%27%29%2C...%2C%28x_%7B2n-1%7D%2Cy_%7B2n-1%7Dy_%7B2n-1%7D%27%29%5C%7D\" alt=\"\\{(x_0,y_0y_0&#39;),(x_1,y_1y_1&#39;),...,(x_{2n-1},y_{2n-1}y_{2n-1}&#39;)\\}\" eeimg=\"1\"/> <br/>我们惊喜地发现进行 <img src=\"https://www.zhihu.com/equation?tex=O%28n%29\" alt=\"O(n)\" eeimg=\"1\"/> 次运算就可以得到想要的结果，比系数表达快多了！而现在我们要做的，就是找一种快速的方法，快速地在两种表达方法之间转化。我们把系数表达到点值表达的快速变换称为“离散傅里叶变换(discrete Fourier transform, DFT)”，它的方法是把多项式项数加倍以后，精心挑选“ <img src=\"https://www.zhihu.com/equation?tex=2n\" alt=\"2n\" eeimg=\"1\"/> 次单位复数根”作为基底，使得整个过程在 <img src=\"https://www.zhihu.com/equation?tex=O%28nlogn%29\" alt=\"O(nlogn)\" eeimg=\"1\"/> 的时间内得以完成（关于这一点的证明会在稍后给出）：<br/>（1）加倍 （2）多项式分别求值 （3）逐点相乘 （4）插值并计算逆DFT（也就是根据点值表示求系数表示）</li></ul><hr/><h2>2. 和复数有关的知识</h2><p>（其实我还没有开始学复变函数，所以可能表达上会有疏漏）</p><ul><li><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 次单位复数根是指满足 <img src=\"https://www.zhihu.com/equation?tex=%5Comega%5En%3D1\" alt=\"\\omega^n=1\" eeimg=\"1\"/> 的复数 <img src=\"https://www.zhihu.com/equation?tex=%5Comega\" alt=\"\\omega\" eeimg=\"1\"/> ，它恰好有 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 个，可以利用复数的指数定义式来研究它们： <img src=\"https://www.zhihu.com/equation?tex=e%5E%7Biu%7D%3Dcosu%2Bisinu\" alt=\"e^{iu}=cosu+isinu\" eeimg=\"1\"/> ，其中 <img src=\"https://www.zhihu.com/equation?tex=e%3D2.71828...%2Ci%3D%5Csqrt%7B-1%7D\" alt=\"e=2.71828...,i=\\sqrt{-1}\" eeimg=\"1\"/> .这就相当于我们取值的点恰好是复平面上以原点为圆心的单位圆中的一个内接正 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 边形。其中， <img src=\"https://www.zhihu.com/equation?tex=%5Comega_n%3De%5E%7B%5Cfrac%7B2%5Cpi+i%7D%7Bn%7D%7D+%5Ctag%7B1%7D\" alt=\"\\omega_n=e^{\\frac{2\\pi i}{n}} \\tag{1}\" eeimg=\"1\"/> <br/>被称为“主 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 次单位根”，其他的 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 次单位复数根都是它的倍数，其中， <img src=\"https://www.zhihu.com/equation?tex=%5Comega_n%5E0...%5Comega_n%5E%7Bn-1%7D\" alt=\"\\omega_n^0...\\omega_n^{n-1}\" eeimg=\"1\"/> 构成一个群，类似于模剩余系，下面是一些引理</li><li>消去引理： <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+n%2Ck%5Cin%5Cmathbb%7BN%7D%2Cd%3E0\" alt=\"\\forall n,k\\in\\mathbb{N},d&gt;0\" eeimg=\"1\"/> ，有 <img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7Bdn%7D%5E%7Bdk%7D%3D%5Comega_n%5Ek\" alt=\"\\omega_{dn}^{dk}=\\omega_n^k\" eeimg=\"1\"/> <br/>证明：把 <img src=\"https://www.zhihu.com/equation?tex=%281%29\" alt=\"(1)\" eeimg=\"1\"/> 代入得到 <img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7Bdn%7D%5E%7Bdk%7D%3D%28e%5E%5Cfrac%7B2%5Cpi+i%7D%7Bdn%7D%29%5E%7Bdk%7D%3De%5E%5Cfrac%7B2%5Cpi+idk%7D%7Bdn%7D%3De%5E%5Cfrac%7B2%5Cpi+ik%7D%7Bn%7D%3D%5Comega_n%5Ek\" alt=\"\\omega_{dn}^{dk}=(e^\\frac{2\\pi i}{dn})^{dk}=e^\\frac{2\\pi idk}{dn}=e^\\frac{2\\pi ik}{n}=\\omega_n^k\" eeimg=\"1\"/> <br/>特殊地， <img src=\"https://www.zhihu.com/equation?tex=%5Comega_n%5E%5Cfrac%7Bn%7D%7B2%7D%3D%5Comega_2%3D-1\" alt=\"\\omega_n^\\frac{n}{2}=\\omega_2=-1\" eeimg=\"1\"/> </li><li>折半引理： <img src=\"https://www.zhihu.com/equation?tex=n%3E0%2Cn%5Cequiv+0%5Cpmod%7B2%7D\" alt=\"n&gt;0,n\\equiv 0\\pmod{2}\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 个 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 次单位复数根的平方的集合就是 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bn%7D%7B2%7D\" alt=\"\\frac{n}{2}\" eeimg=\"1\"/> 个 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bn%7D%7B2%7D\" alt=\"\\frac{n}{2}\" eeimg=\"1\"/> 次单位复数根的集合<br/>证明： <img src=\"https://www.zhihu.com/equation?tex=%5Cbecause+%28%5Comega_n%5Ek%29%5E2%3D%5Comega_%5Cfrac%7Bn%7D%7B2%7D%5Ek\" alt=\"\\because (\\omega_n^k)^2=\\omega_\\frac{n}{2}^k\" eeimg=\"1\"/> ，获得每个<img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bn%7D%7B2%7D\" alt=\"\\frac{n}{2}\" eeimg=\"1\"/> 次单位复数根正好两次，因为：<img src=\"https://www.zhihu.com/equation?tex=+%28%5Comega_n%5E%7Bk%2B%5Cfrac%7Bn%7D%7B2%7D%7D%29%5E2%3D%5Comega_n%5E%7B2k%2Bn%7D%3D%5Comega_n%5E%7B2k%7D%5Comega_n%5En%3D%28%5Comega_n%5Ek%29%5E2\" alt=\" (\\omega_n^{k+\\frac{n}{2}})^2=\\omega_n^{2k+n}=\\omega_n^{2k}\\omega_n^n=(\\omega_n^k)^2\" eeimg=\"1\"/> <br/>这个结论非常重要，在后面的实现中它将证明在递归的过程中，产生的子问题恰好是原问题的一半大小</li><li>求和引理： <img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bj%3D0%7D%5E%7Bn-1%7D%28%5Comega_n%5Ek%29%5Ej%3D0\" alt=\"\\sum_{j=0}^{n-1}(\\omega_n^k)^j=0\" eeimg=\"1\"/> <br/>证明：对于几何级数，有： <img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bk%3D0%7D%5Enx%5Ek%3D%5Cfrac%7Bx%5E%7Bk%2B1%7D-1%7D%7Bx-1%7D\" alt=\"\\sum_{k=0}^nx^k=\\frac{x^{k+1}-1}{x-1}\" eeimg=\"1\"/> ，它对复数域也成立，代入得证</li></ul><hr/><h2>3. 离散傅里叶变换与快速傅里叶变换</h2><p>3.1 离散傅里叶变换</p><p>在1和2的讨论中，我们希望能够快速计算多项式：<br/> <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%3D%5Csum_%7Bj%3D0%7D%5E%7Bn-1%7Da_jx%5Ej\" alt=\"A(x)=\\sum_{j=0}^{n-1}a_jx^j\" eeimg=\"1\"/> 在 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7B%5Comega_n%7D++%3D%28%5Comega_n%5E0%2C+%5Comega_n%5E1%2C%5Comega_n%5E2%2C...%2C%5Comega_n%5E%7Bn-1%7D%29\" alt=\"\\vec{\\omega_n}  =(\\omega_n^0, \\omega_n^1,\\omega_n^2,...,\\omega_n^{n-1})\" eeimg=\"1\"/> 的值，</p><p>从而得到对应的 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7By%7D+%3D+%28A%28%5Comega_n%5E0%29%2C+A%28%5Comega_n%5E1%29%2C...%2CA%28%5Comega_n%5E%7Bn-1%7D%29%29\" alt=\"\\vec{y} = (A(\\omega_n^0), A(\\omega_n^1),...,A(\\omega_n^{n-1}))\" eeimg=\"1\"/> ，也就是原多项式系数向量 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D+\" alt=\"\\vec{a} \" eeimg=\"1\"/> 的离散傅里叶变换，记作 <img src=\"https://www.zhihu.com/equation?tex=y%3DDFT_n%28%5Cvec%7Ba%7D%29\" alt=\"y=DFT_n(\\vec{a})\" eeimg=\"1\"/> </p><p>3.2 快速傅里叶变换</p><p>快速傅里叶变换(FFT)是用来快速求离散傅里叶变换的一种方法，在接下来的讨论中，都默认 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 是 <img src=\"https://www.zhihu.com/equation?tex=2\" alt=\"2\" eeimg=\"1\"/> 的整数幂（不是的话就补 <img src=\"https://www.zhihu.com/equation?tex=0\" alt=\"0\" eeimg=\"1\"/> ）</p><p>FFT使用了分治策略求解DFT，首先我们把多项式按照下标的奇偶性分开讨论（再晚一点的时候我们会看到这里有一个非常优美的性质），得到两个新的次数界是 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bn%7D%7B2%7D\" alt=\"\\frac{n}{2}\" eeimg=\"1\"/> 的多项式：</p><p><img src=\"https://www.zhihu.com/equation?tex=A%5E%7B%5B0%5D%7D%3Da_0%2Ba_2x%2Ba_4x%5E2%2B%5Ccdots%2Ba_%7Bn-2%7Dx%5E%7B%5Cfrac%7Bn%7D%7B2%7D-1%7D%5C%5C+A%5E%7B%5B1%5D%7D%3Da_1%2Ba_3x%2Ba_5x%5E2%2B%5Ccdots%2Ba_%7Bn-1%7Dx%5E%7B%5Cfrac%7Bn%7D%7B2%7D-1%7D\" alt=\"A^{[0]}=a_0+a_2x+a_4x^2+\\cdots+a_{n-2}x^{\\frac{n}{2}-1}\\\\ A^{[1]}=a_1+a_3x+a_5x^2+\\cdots+a_{n-1}x^{\\frac{n}{2}-1}\" eeimg=\"1\"/> </p><p>根据 <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%3D%28a_0%2Ba_2x%5E2%2B%5Ccdots%2Ba_%7Bn-2%7Dx%5E%7Bn-2%7D%29%2B%28a_1x%2Ba_3x%5E3%2B%5Ccdots%2Ba_%7Bn-1%7Dx%5E%7Bn-1%7D%29\" alt=\"A(x)=(a_0+a_2x^2+\\cdots+a_{n-2}x^{n-2})+(a_1x+a_3x^3+\\cdots+a_{n-1}x^{n-1})\" eeimg=\"1\"/> ，我们可以得到： <img src=\"https://www.zhihu.com/equation?tex=A%28x%29%3DA%5E%7B%5B0%5D%7D%28x%5E2%29%2BxA%5E%7B%5B1%5D%7D%28x%5E2%29\" alt=\"A(x)=A^{[0]}(x^2)+xA^{[1]}(x^2)\" eeimg=\"1\"/> ，于是问题转化为求次数界是 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bn%7D%7B2%7D\" alt=\"\\frac{n}{2}\" eeimg=\"1\"/> 的多项式 <img src=\"https://www.zhihu.com/equation?tex=A%5E%7B%5B0%5D%7D\" alt=\"A^{[0]}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=A%5E%7B%5B1%5D%7D\" alt=\"A^{[1]}\" eeimg=\"1\"/> 在基底 <img src=\"https://www.zhihu.com/equation?tex=%28%5Cvec%7B%5Comega_n%7D%29%5E2\" alt=\"(\\vec{\\omega_n})^2\" eeimg=\"1\"/> 下的值，于是，我们成功把规模减小了一半（可以回顾一下折半引理）</p><p>我们也确实可以很快地口胡出下面这段伪代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">n &lt;- a.length\nif n = 1 then return a\nwn &lt;- e ^ (2 * pi * i / n), w &lt;- 1\na0 &lt;- (a[0], a[2], ..., a[n-2])\na1 &lt;- (a[1], a[3], ..., a[n-1])\ny0 &lt;- FFT(a0), y1 &lt;- FFT(a1)\nfor k &lt;- 0 to n / 2 - 1\n    y[k] &lt;- y0[k] + w * y1[k]\n    y[k + n / 2] &lt;- y0[k] - w * y1[k]\n    w &lt;- w * wn\nreturn y</code></pre></div><p>其中， <img src=\"https://www.zhihu.com/equation?tex=%5Comega_n%5Ek\" alt=\"\\omega_n^k\" eeimg=\"1\"/> 被称为旋转因子（一边加一边减），而这段代码的时间复杂度是：</p><p><img src=\"https://www.zhihu.com/equation?tex=T%28n%29%3D2T%28%5Cfrac%7Bn%7D%7B2%7D%29%2BO%28n%29%3DO%28nlogn%29\" alt=\"T(n)=2T(\\frac{n}{2})+O(n)=O(nlogn)\" eeimg=\"1\"/> </p><p>3.3 逆快速傅里叶变换</p><p>在前面的讨论中我们还提到了通过点值求系数的逆离散傅里叶变换(IDFT)，它的公式是：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D+%3D+V%28%5Cvec%7Bx%7D+%29%5E%7B-1%7D%5Cvec%7By%7D\" alt=\"\\vec{a} = V(\\vec{x} )^{-1}\\vec{y}\" eeimg=\"1\"/> ，我们取 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Bx%7D++%3D+%5Cvec%7B%5Comega_n+%7D++\" alt=\"\\vec{x}  = \\vec{\\omega_n }  \" eeimg=\"1\"/> ，就可以得到IDFT了： <img src=\"https://www.zhihu.com/equation?tex=a_j%3D%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bk%3D0%7D%5E%7Bn-1%7Dy_k%5Comega_n%5E%7B-kj%7D\" alt=\"a_j=\\frac{1}{n}\\sum_{k=0}^{n-1}y_k\\omega_n^{-kj}\" eeimg=\"1\"/> ，这里用到了一个结论： <img src=\"https://www.zhihu.com/equation?tex=%5BV%5E%7B-1%7D%28%5Cvec%7B%5Comega%7D%29%5D_%7Bij%7D%3D%5Cfrac%7B%5Comega_n%5E%7B-ij%7D%7D%7Bn%7D\" alt=\"[V^{-1}(\\vec{\\omega})]_{ij}=\\frac{\\omega_n^{-ij}}{n}\" eeimg=\"1\"/> ，这里用到了 <img src=\"https://www.zhihu.com/equation?tex=A%5E%7B-1%7D%3D%5Cfrac%7B1%7D%7BdetA%7DA%5E%2A\" alt=\"A^{-1}=\\frac{1}{detA}A^*\" eeimg=\"1\"/> ，其中 <img src=\"https://www.zhihu.com/equation?tex=A%5E%2A\" alt=\"A^*\" eeimg=\"1\"/> 是原矩阵的伴随矩阵</p><ul><li>卷积定理： <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D+%5Cotimes%5Cvec%7Bb%7D+%3D+DFT_%7B2n%7D%5E%7B-1%7D%28DFT_%7B2n%7D%28%5Cvec%7Ba%7D+%29%5Ccdot+DFT_%7B2n%7D%28%5Cvec%7Bb%7D%29%29\" alt=\"\\vec{a} \\otimes\\vec{b} = DFT_{2n}^{-1}(DFT_{2n}(\\vec{a} )\\cdot DFT_{2n}(\\vec{b}))\" eeimg=\"1\"/> </li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>这就是算法的全过程了，分别对 <img src=\"https://www.zhihu.com/equation?tex=%5Cvec%7Ba%7D%2C+%5Cvec%7Bb%7D\" alt=\"\\vec{a}, \\vec{b}\" eeimg=\"1\"/> 进行一次FFT，然后将结果逐点相乘以后进行一次逆FFT，就完成了点值与系数的相互转化</p><hr/><h2>4. 基于迭代的FFT实现</h2><p>4.1 蝴蝶操作</p><p>回顾3.2中的代码的for循环，我们发现 <img src=\"https://www.zhihu.com/equation?tex=w_n%5Eky%5E1_k\" alt=\"w_n^ky^1_k\" eeimg=\"1\"/> 被计算了两次，我们先进行一个优化：</p><div class=\"highlight\"><pre><code class=\"language-text\">for k &lt;- 0 to n / 2 - 1\n    t &lt;- w * y1[k]\n    y[k] &lt;- y0[k] + t\n    y[k + n / 2] &lt;- y0[k] - t\n    w &lt;- w * wn</code></pre></div><p>这个操作被称为“蝴蝶操作（bufferfly operation）”（图片来源：《算法导论（第三版）》中文版P536，机械工业出版社）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c98e628f5307a30dd30f8b1a1cc6d32f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"662\" data-original=\"https://pic4.zhimg.com/v2-c98e628f5307a30dd30f8b1a1cc6d32f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;662&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"662\" data-original=\"https://pic4.zhimg.com/v2-c98e628f5307a30dd30f8b1a1cc6d32f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c98e628f5307a30dd30f8b1a1cc6d32f_b.jpg\"/></figure><p>4.2 分类计算</p><p>在3.2的讨论中我们发现奇偶下标是可以分开讨论的，我们画出递归树（图片来源：《算法导论（第三版）》中文版P537，机械工业出版社）：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5ef6b121e65529aeddc56aa7935914dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic2.zhimg.com/v2-5ef6b121e65529aeddc56aa7935914dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;204&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic2.zhimg.com/v2-5ef6b121e65529aeddc56aa7935914dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5ef6b121e65529aeddc56aa7935914dd_b.jpg\"/></figure><p>我们按照 <img src=\"https://www.zhihu.com/equation?tex=0%2C2%2C4%2C6%2C1%2C3%2C5%2C7\" alt=\"0,2,4,6,1,3,5,7\" eeimg=\"1\"/> 的顺序来排列元素，就模拟出了递归的过程，每次取出一对元素通过蝴蝶操作进行合并，经过 <img src=\"https://www.zhihu.com/equation?tex=logn\" alt=\"logn\" eeimg=\"1\"/> 次合并以后，就可以得到答案，我们可以利用下面这段伪代码进行重排序（参考了刘汝佳老师《算法竞赛入门经典——训练指南》的代码仓库，这段代码并不像很多主流写法一样开一个rev数组）：</p><div class=\"highlight\"><pre><code class=\"language-text\">n &lt;- a.length, j &lt;- 0\nfor i &lt;- 0 to n - 1\n    if j &gt; i then swap(a[i], a[j])\n    k &lt;- n\n    while j &amp; k / 2 do j &lt;- j &amp; ~k, k &lt;- k / 2\n    j &lt;- j | k</code></pre></div><p>可以自行验证代码的正确性</p><p>接下来就是迭代的过程：</p><div class=\"highlight\"><pre><code class=\"language-text\">reverse(a), n &lt;- a.length\nfor s &lt;- 1 to logn\n    m &lt;- 2 ^ s\n    wm &lt;- e ^ (2 * pi * i / m)\n    for k &lt;- 0 to n - 1 step m\n        w &lt;- 1\n        for j &lt;- 0 to m / 2 - 1\n            t &lt;- w * a[k + j + m / 2]\n            a[k + j + m / 2] &lt;- A[k + j] - t\n            a[k + j] &lt;- a[k + j] + t\n            w &lt;- w * wm\nreturn a</code></pre></div><hr/><h2>5. Cooley-Tukey FFT</h2><a href=\"https://link.zhihu.com/?target=http%3A//uoj.ac/problem/34\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Universal Online Judge</a><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;complex&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000100\n</span><span class=\"cp\">#define PI acos(-1)\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">complex</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">cd</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">cd</span><span class=\"o\">&gt;</span> <span class=\"n\">VC</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">FFT</span><span class=\"p\">(</span><span class=\"n\">VC</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">inv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">j</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">j</span> <span class=\"o\">&amp;=</span> <span class=\"o\">~</span><span class=\"n\">k</span><span class=\"p\">);</span>\n        <span class=\"n\">j</span> <span class=\"o\">|=</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">double</span> <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">inv</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"nl\">PI</span> <span class=\"p\">:</span> <span class=\"n\">PI</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">step</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">step</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">double</span> <span class=\"n\">alp</span> <span class=\"o\">=</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">step</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">step</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">cd</span> <span class=\"n\">wk</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">cd</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">alp</span> <span class=\"o\">*</span> <span class=\"n\">k</span><span class=\"p\">));</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">e</span> <span class=\"o\">+=</span> <span class=\"n\">step</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">e</span> <span class=\"o\">+</span> <span class=\"n\">step</span><span class=\"p\">;</span>\n                <span class=\"n\">cd</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">wk</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n                <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n                <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">/=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">VC</span> <span class=\"k\">operator</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">VC</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">VC</span><span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">VC</span> <span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">FFT</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">FFT</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">FFT</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">VC</span> <span class=\"nf\">ret</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">real</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">VC</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">VC</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%.0f &#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">real</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这里也用了刘汝佳老师在《算法竞赛入门经典——训练指南》代码仓库里的模板，处于神奇的原因我在调试的时候发现会出现输出&#34;-0&#34;的情况，因此在求卷积的时候取了绝对值，希望有大神能够指出</p><p>本人对FFT的很多数学知识可能还不甚理解，表述也可能存在谬误，甚至看起来会像是把《算法导论》上相关的内容直接搬了过来（但确实有自己的理解在里面），目前只有一个板子题和另外一道题的代码，多做几道题之后会整理一个专栏，本篇文章仅介绍理论和模板。事实上在算法竞赛中FFT一个很常见的用途就是加速大数乘法，我们把数字拆成 ：</p><p><img src=\"https://www.zhihu.com/equation?tex=A%28x%29%3Da_0%2Ba_1%5Ctimes10%2B...%2Ba_%7Bn-1%7D%5Ctimes10%5E%7Bn-1%7D\" alt=\"A(x)=a_0+a_1\\times10+...+a_{n-1}\\times10^{n-1}\" eeimg=\"1\"/> </p><p>就可以利用FFT求值了</p><hr/><h2>6. 参考文献</h2><p>《算法导论（第三版）》中文版P527~538，机械工业出版社</p><p>《算法竞赛入门经典——训练指南》P428~429</p><p>《算法竞赛入门经典——训练指南》代码仓库UVa 12298代码</p>", 
            "topic": [
                {
                    "tag": "傅里叶变换（Fourier Transform）", 
                    "tagLink": "https://api.zhihu.com/topics/19600515"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": [
                {
                    "userName": "三三白白", 
                    "userLink": "https://www.zhihu.com/people/166a88d3abd351fcbac727909b0572fe", 
                    "content": "补充一下数论变换就舒服了", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "谢谢建议", 
                            "likes": 0, 
                            "replyToAuthor": "三三白白"
                        }
                    ]
                }, 
                {
                    "userName": "zeromaker", 
                    "userLink": "https://www.zhihu.com/people/b078e82aada178d20c2a5a837c3f45b7", 
                    "content": "厉害！感觉跟我们信息类学的fft算法看起来好像不是一个东西", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "毕竟算法竞赛不可能输入一段音频吧😂", 
                            "likes": 0, 
                            "replyToAuthor": "zeromaker"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/46904707", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 18, 
            "title": "ACM Training Record - Always_Penalty", 
            "content": "<p></p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//vjudge.net/contest/261416\" data-image=\"https://pic1.zhimg.com/v2-47afe2e36353982cbd9da95773bb4338_ipico.jpg\" data-image-width=\"256\" data-image-height=\"256\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[NWPU2018]萌新第一次上课作业 - Virtual Judge</a><h2>0. 综述</h2><p>这次的题目以贪心、枚举为主</p><h2>A. Clean Shift</h2><p>题意：给出若干个闭区间 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2C+r%5D\" alt=\"[l, r]\" eeimg=\"1\"/> ，从中选出最少的区间数完整覆盖闭区间 <img src=\"https://www.zhihu.com/equation?tex=%5B0%2C+L%5D\" alt=\"[0, L]\" eeimg=\"1\"/> </p><p>题解：非常经典的区间覆盖问题，按照左端点排序，然后对于同一个左端点，取能取到的最长的区间，如果只能取有重叠的区间，那就取开头最大的</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 25100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Interval</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"n\">Interval</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Interval</span><span class=\"o\">&amp;</span> <span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Interval</span><span class=\"o\">&amp;</span> <span class=\"n\">i2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">l</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">l</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">&gt;</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"kt\">int</span> <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ey</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">),</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"n\">ey</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ex</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">ey</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">lst</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">lst</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">op</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">mx</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">lst</span><span class=\"p\">].</span><span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mx</span> <span class=\"o\">!=</span> <span class=\"n\">op</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">mx</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>B. 今年暑假不AC</h2><p>题意：给出若干闭区间 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2C+r%5D\" alt=\"[l, r]\" eeimg=\"1\"/> ，选出尽可能多的不相交的区间。区间端点可以重复</p><p>题解：也是经典的区间覆盖问题。按照右端点排序，然后对于每个右端点，选择左端点尽可能大的</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 110\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Interval</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"n\">Interval</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Interval</span><span class=\"o\">&amp;</span> <span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Interval</span><span class=\"o\">&amp;</span> <span class=\"n\">i2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">),</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">l</span> <span class=\"o\">&gt;=</span> <span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">r</span><span class=\"p\">;</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>C. Highway</h2><p>题意：给出若干段闭区间 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2C+r%5D\" alt=\"[l, r]\" eeimg=\"1\"/> ，在数轴上标出最少的点，使得每个区间内至少有一个点</p><p>题解：还是紫书里经典的区间覆盖问题。我们考察将每段区间最大利用，这个点肯定是在右端点上的。因此先把所有区间按照右端点排序，右端点相同时左端点靠后的优先。只要找到一个没选点的区间，就把它的右端点上标一个点。其中，区间由下面的方法获得：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-caf6552a4c67a7c47c1de0005e032ebb_b.jpg\" data-rawwidth=\"594\" data-rawheight=\"566\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic4.zhimg.com/v2-caf6552a4c67a7c47c1de0005e032ebb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;594&#39; height=&#39;566&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"594\" data-rawheight=\"566\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"594\" data-original=\"https://pic4.zhimg.com/v2-caf6552a4c67a7c47c1de0005e032ebb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-caf6552a4c67a7c47c1de0005e032ebb_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 10010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">T</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"n\">Interval</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"n\">Interval</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">T</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> \n    <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Interval</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Interval</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">i2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i1</span><span class=\"p\">.</span><span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">i2</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"n\">Interval</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">);</span>\n            <span class=\"kt\">double</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">d</span> <span class=\"o\">*</span> <span class=\"n\">d</span> <span class=\"o\">-</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">d</span> <span class=\"o\">*</span> <span class=\"n\">d</span> <span class=\"o\">-</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n            <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Interval</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"kt\">double</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">r</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lst</span> <span class=\"o\">&lt;</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">r</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>写了一个区间的template</p><hr/><h2>D. Subsequence</h2><p>题意：给出若干个数 <img src=\"https://www.zhihu.com/equation?tex=a_i\" alt=\"a_i\" eeimg=\"1\"/> ，选一段和不小于 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 的最短子区间</p><p>题解：因为保证是正整数，所以前缀和是单调增的。这样每次枚举 右端点<img src=\"https://www.zhihu.com/equation?tex=j\" alt=\"j\" eeimg=\"1\"/>，在前缀和里二分查找左端点 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> ，并且更新答案</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 100100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">sum</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">sum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">upper_bound</span><span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这道题似乎还可以用尺取法，时间复杂度会少一个 <img src=\"https://www.zhihu.com/equation?tex=logn\" alt=\"logn\" eeimg=\"1\"/></p><hr/><h2>E. 4 Values whose Sum is 0</h2><p>题意：给出四个整数集 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BA%7D%2C%5Cmathbb%7BB%7D%2C%5Cmathbb%7BC%7D%2C%5Cmathbb%7BD%7D\" alt=\"\\mathbb{A},\\mathbb{B},\\mathbb{C},\\mathbb{D}\" eeimg=\"1\"/> ，从每个集合中各选出一个数 <img src=\"https://www.zhihu.com/equation?tex=a%2Cb%2Cc%2Cd\" alt=\"a,b,c,d\" eeimg=\"1\"/> ，使得 <img src=\"https://www.zhihu.com/equation?tex=a%2Bb%2Bc%2Bd%3D0\" alt=\"a+b+c+d=0\" eeimg=\"1\"/> </p><p>题解： <img src=\"https://www.zhihu.com/equation?tex=n%5E4\" alt=\"n^4\" eeimg=\"1\"/> 的枚举是最好想的，但是在 <img src=\"https://www.zhihu.com/equation?tex=n%3D4000\" alt=\"n=4000\" eeimg=\"1\"/> 的数据范围下显然力不从心。我们把式子移项得到 <img src=\"https://www.zhihu.com/equation?tex=a%2Bb%3D-%28c%2Bd%29\" alt=\"a+b=-(c+d)\" eeimg=\"1\"/> ，那么我们可以考虑维护 <img src=\"https://www.zhihu.com/equation?tex=a%2Bb%2C+c%2Bd\" alt=\"a+b, c+d\" eeimg=\"1\"/> ，然后枚举 <img src=\"https://www.zhihu.com/equation?tex=n%5E2\" alt=\"n^2\" eeimg=\"1\"/> 个 <img src=\"https://www.zhihu.com/equation?tex=a%2Bb\" alt=\"a+b\" eeimg=\"1\"/> 的值，在另外 <img src=\"https://www.zhihu.com/equation?tex=n%5E2\" alt=\"n^2\" eeimg=\"1\"/> 个 <img src=\"https://www.zhihu.com/equation?tex=c%2Bd\" alt=\"c+d\" eeimg=\"1\"/> 里二分查找，答案就是 <img src=\"https://www.zhihu.com/equation?tex=upper%5C_bound-lower%5C_bound\" alt=\"upper\\_bound-lower\\_bound\" eeimg=\"1\"/> ，复杂度是 <img src=\"https://www.zhihu.com/equation?tex=n%5E2logn\" alt=\"n^2logn\" eeimg=\"1\"/> 的</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdlib&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 4050\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">S1</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">*</span> <span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">S2</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">*</span> <span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">A</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">B</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">C</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">D</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">S1</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">S2</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">S2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">S2</span> <span class=\"o\">+</span> <span class=\"n\">cnt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">cnt</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">S1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">upper_bound</span><span class=\"p\">(</span><span class=\"n\">S2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">S2</span> <span class=\"o\">+</span> <span class=\"n\">cnt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">S2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">S2</span> <span class=\"o\">+</span> <span class=\"n\">cnt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>一开始暴力写了一发Treap，发现超时了，突然发现建树的时候复杂度很大……</p><hr/><h2>F. 校门外的树</h2><p>题意：太经典了，不说了</p><p>题解：这里给出一种差分的做法。维护一个差分数组 <img src=\"https://www.zhihu.com/equation?tex=rt_i\" alt=\"rt_i\" eeimg=\"1\"/> ，每次对于一个区间 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2C+r%5D\" alt=\"[l, r]\" eeimg=\"1\"/> ，在 <img src=\"https://www.zhihu.com/equation?tex=rt_l\" alt=\"rt_l\" eeimg=\"1\"/> 的地方打一个 <img src=\"https://www.zhihu.com/equation?tex=%2B1\" alt=\"+1\" eeimg=\"1\"/> 的标记，在 <img src=\"https://www.zhihu.com/equation?tex=rt_%7Br%2B1%7D\" alt=\"rt_{r+1}\" eeimg=\"1\"/> 的地方打一个 <img src=\"https://www.zhihu.com/equation?tex=-1\" alt=\"-1\" eeimg=\"1\"/> 的标记，然后前缀和一下，最后为零的位置就是有树的</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 10010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">rt</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">M</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span> <span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">),</span> <span class=\"o\">++</span><span class=\"n\">rt</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"o\">--</span><span class=\"n\">rt</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">rt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">rt</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">rt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>如果数据范围改成 <img src=\"https://www.zhihu.com/equation?tex=10%5E9\" alt=\"10^9\" eeimg=\"1\"/> ，那么就需要把区间的两个端点一起离散化掉，然后一整段一整段统计答案</p><hr/><h2>G. Overlapping Squares</h2><p>题意：有一个 <img src=\"https://www.zhihu.com/equation?tex=4%5Ctimes4\" alt=\"4\\times4\" eeimg=\"1\"/> 的网格，你可以用不超过 <img src=\"https://www.zhihu.com/equation?tex=6\" alt=\"6\" eeimg=\"1\"/> 张 <img src=\"https://www.zhihu.com/equation?tex=2%5Ctimes2\" alt=\"2\\times2\" eeimg=\"1\"/> 的正方形纸片在上面摆放图案。现在给你一张图，可以看见的正方形的边缘用黑线标了出来，问合不合法</p><p>题解：丧病题。。。网上的题解大多都很草率，我在这里详细讲一下。把输入看成是一张 <img src=\"https://www.zhihu.com/equation?tex=5%5Ctimes9\" alt=\"5\\times9\" eeimg=\"1\"/> （对于竖列，我们把网格线和空格分开）的网格，正方形纸片用&#39;|&#39;、&#39;_&#39;和&#39; &#39;表示，那么我们看看一个正方形纸片能怎么摆：</p><ul><li>对于&#39;|&#39;，一定只能摆在 <img src=\"https://www.zhihu.com/equation?tex=0%EF%BC%8C2%EF%BC%8C4%EF%BC%8C6%EF%BC%8C8\" alt=\"0，2，4，6，8\" eeimg=\"1\"/> 的竖网格线上</li><li>对于&#39;和&#39;_&#39;，一定只能摆在 <img src=\"https://www.zhihu.com/equation?tex=1%2C+3%2C+5%2C+7\" alt=\"1, 3, 5, 7\" eeimg=\"1\"/> 的横网格线上</li><li>对于&#39; &#39;，一定只能放在空格里</li></ul><p>那么我们在摆一个正方形的时候，枚举奇数列 <img src=\"https://www.zhihu.com/equation?tex=%28r%2C+c%29\" alt=\"(r, c)\" eeimg=\"1\"/> ：</p><ul><li><img src=\"https://www.zhihu.com/equation?tex=%28r+-+1%2C+c-1%29%2C%28r%2Cc%2B3%29%2C%28r%2B1%2Cc-1%29%2C%28r%2B1%2Cc%2B3%29\" alt=\"(r - 1, c-1),(r,c+3),(r+1,c-1),(r+1,c+3)\" eeimg=\"1\"/> 放&#39;|&#39;</li><li><img src=\"https://www.zhihu.com/equation?tex=%28r-1%2Cc%29%2C%28r-1%2Cc%2B2%29%2C%28r%2B1%2Cc%29%2C%28r%2B1%2Cc%2B2%29\" alt=\"(r-1,c),(r-1,c+2),(r+1,c),(r+1,c+2)\" eeimg=\"1\"/> 放&#39;_&#39;</li><li><img src=\"https://www.zhihu.com/equation?tex=%28r%2Cc%29%2C%28r%2Cc%2B1%29%2C%28r%2Cc%2B2%29%2C%28r%2B1%2Cc%2B1%29\" alt=\"(r,c),(r,c+1),(r,c+2),(r+1,c+1)\" eeimg=\"1\"/> 放&#39; &#39;</li></ul><p>下面是比较直观的图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e198461b72906dd23b4c72411107d852_b.jpg\" data-rawwidth=\"156\" data-rawheight=\"216\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"156\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;156&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"156\" data-rawheight=\"216\" data-size=\"normal\" data-caption=\"\" class=\"content_image lazy\" width=\"156\" data-actualsrc=\"https://pic3.zhimg.com/v2-e198461b72906dd23b4c72411107d852_b.jpg\"/></figure><p>这里有一个点就是为什么空格摆成了一个“T”型，那是因为注意到我们刚刚的约定，那两个位置是留给&#39;_&#39;的，然后就可以愉快地dfs了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 10\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">kase</span><span class=\"p\">;</span>\n<span class=\"n\">string</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">src</span><span class=\"p\">[],</span> <span class=\"n\">string</span> <span class=\"n\">std</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">std</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">cur</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">TAT</span><span class=\"p\">,</span> <span class=\"n\">QAQ</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">&gt;</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">string</span> <span class=\"n\">cpy</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">cpy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">d</span> <span class=\"o\">/</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;|&#39;</span><span class=\"p\">;</span>\n        <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;_&#39;</span><span class=\"p\">;</span>\n        <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> \n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cpy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span> <span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"n\">TAT</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">;</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Case %d: %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">kase</span><span class=\"p\">,</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"s\">&#34;Yes&#34;</span> <span class=\"o\">:</span> <span class=\"s\">&#34;No&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>现在才知道getline只包含在头文件&lt;string&gt;里，难怪去年NOIP用这个被炸成0分</p><hr/><p>H. Weak Key</p><p>题意：找 <img src=\"https://www.zhihu.com/equation?tex=1%5Cle+p%5Cle+q%5Cle+r%5Cle+s%5Cle+k\" alt=\"1\\le p\\le q\\le r\\le s\\le k\" eeimg=\"1\"/> ，使得 <img src=\"https://www.zhihu.com/equation?tex=N_q%3EN_s%3EN_p%3EN_r\" alt=\"N_q&gt;N_s&gt;N_p&gt;N_r\" eeimg=\"1\"/> 或 <img src=\"https://www.zhihu.com/equation?tex=N_q%3CN_s%3CN_p%3CN_r\" alt=\"N_q&lt;N_s&lt;N_p&lt;N_r\" eeimg=\"1\"/> </p><p>题解：只考虑前一个关系的做法，后一个关系只需要把数组flip一下就可以了。显然想到枚举，但是直接枚举也是不行的。考虑到 <img src=\"https://www.zhihu.com/equation?tex=p%2Cr\" alt=\"p,r\" eeimg=\"1\"/> 是相间的，因此我们枚举 <img src=\"https://www.zhihu.com/equation?tex=p%2Cr\" alt=\"p,r\" eeimg=\"1\"/> ，然后在开区间 <img src=\"https://www.zhihu.com/equation?tex=%28p%2Cr%29\" alt=\"(p,r)\" eeimg=\"1\"/> 里找最大的 <img src=\"https://www.zhihu.com/equation?tex=N_q\" alt=\"N_q\" eeimg=\"1\"/> ，然后在开区间 <img src=\"https://www.zhihu.com/equation?tex=%28r%2Ck%29\" alt=\"(r,k)\" eeimg=\"1\"/> 里找一个比 <img src=\"https://www.zhihu.com/equation?tex=N_p\" alt=\"N_p\" eeimg=\"1\"/> 大的 <img src=\"https://www.zhihu.com/equation?tex=N_s\" alt=\"N_s\" eeimg=\"1\"/> .下面是对于这两个信息的维护：</p><ul><li>对于第一个信息，直接RMQ就可以了，快得一批</li><li>对于第二个信息，维护每个数之后有多少数比它大，然后二分查找</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 5050\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">RMQ</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"mi\">15</span><span class=\"p\">];</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n            <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"kt\">int</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">q</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">it</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">end</span><span class=\"p\">())</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">&lt;</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">solver</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">solver</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">solver</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;YES</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;NO</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>I. Unique Snowflakes</h2><p>题意：唯一的雪花</p><p>题解：维护一个滑动窗口，当出现重复的时候更新一次答案，然后把左端点向后移动，用std::set&lt;int&gt;维护就可以了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;set&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000100\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"n\">set</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]))</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n            <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>J. Moving Tables</h2><p>题意：如图所示在一条走廊的两侧各有200个房间，现在给定一些成对的房间相互交换桌子，但是走廊每次只能通过一组搬运，也就是说如果两个搬运过程有交叉是不能同时搬运的，要依次来，一次搬运10min，问完成所有的搬运的最少用时</p><p>题解：找交叉最多的路</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 220\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">T</span><span class=\"o\">&gt;</span> <span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"kt\">int</span> <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">));</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ed</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ed</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">&gt;</span> <span class=\"n\">ed</span><span class=\"p\">)</span> <span class=\"n\">op</span> <span class=\"o\">^=</span> <span class=\"n\">ed</span><span class=\"p\">,</span> <span class=\"n\">ed</span> <span class=\"o\">^=</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">op</span> <span class=\"o\">^=</span> <span class=\"n\">ed</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">ed</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">200</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">mx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">mx</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">mx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">mx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>K. FatMouse&#39; Trade</h2><p>题意：和USACO的买牛奶差不多</p><p>题解：和USACO的买牛奶差不多</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Trade</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"n\">Trade</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Trade</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> \n    <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Trade</span><span class=\"o\">&amp;</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Trade</span><span class=\"o\">&amp;</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> \n        <span class=\"k\">return</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">j</span> <span class=\"o\">/</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">f</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">j</span> <span class=\"o\">/</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">;</span> \n    <span class=\"p\">}</span> \n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">m</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Trade</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">);</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n        <span class=\"kt\">double</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"n\">m</span> <span class=\"o\">-=</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">f</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">j</span> <span class=\"o\">/</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%.3f</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>话说这题我在HDU三位一体特长生测试的时候碰到了……</p><hr/><h2>L. 田忌赛马</h2><p>题意：田忌赛马</p><p>题解：挺坑的一道题，直接排一遍序一一做是错的，输的话必须要用这只马去输齐王最厉害的马，参考了黄学长hzwer的blog</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 10010\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">j</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">QwQ</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">QAQ</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">QwQ</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">QAQ</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">QAQ</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">QwQ</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">QwQ</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span><span class=\"p\">;)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">QwQ</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">])</span> <span class=\"n\">ret</span><span class=\"o\">+=</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">l</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">QwQ</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">])</span> <span class=\"n\">ret</span> <span class=\"o\">-=</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">QwQ</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">])</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">r</span><span class=\"p\">;</span>\n                <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">QAQ</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">QwQ</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">])</span> <span class=\"n\">ret</span> <span class=\"o\">-=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n                    <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">l</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>M. DotA</h2><p>题意：你有一个血量无限的大哥，dps是 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> .然后有若干血量是 <img src=\"https://www.zhihu.com/equation?tex=h\" alt=\"h\" eeimg=\"1\"/> ，dps是 <img src=\"https://www.zhihu.com/equation?tex=d\" alt=\"d\" eeimg=\"1\"/> 的英雄，问你把他们全部击杀最少受到的攻击是多少</p><p>题解：尝试按照各种方法排序以后发现是要优先处理血量少攻击大的英雄</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 220\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">DotA</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">hp</span><span class=\"p\">,</span> <span class=\"n\">dps</span><span class=\"p\">;</span>\n    <span class=\"n\">DotA</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">DotA</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">hp</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">dps</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">hp</span><span class=\"p\">(</span><span class=\"n\">hp</span><span class=\"p\">),</span> <span class=\"n\">dps</span><span class=\"p\">(</span><span class=\"n\">dps</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> \n    <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">DotA</span><span class=\"o\">&amp;</span> <span class=\"n\">h1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">DotA</span><span class=\"o\">&amp;</span> <span class=\"n\">h2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> \n        <span class=\"k\">return</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">h1</span><span class=\"p\">.</span><span class=\"n\">dps</span> <span class=\"o\">/</span> <span class=\"n\">h1</span><span class=\"p\">.</span><span class=\"n\">hp</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">h2</span><span class=\"p\">.</span><span class=\"n\">dps</span> <span class=\"o\">/</span> <span class=\"n\">h2</span><span class=\"p\">.</span><span class=\"n\">hp</span><span class=\"p\">;</span> \n    <span class=\"p\">}</span> \n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">atk</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">hp</span><span class=\"p\">,</span> <span class=\"n\">dps</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">dps</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">hp</span><span class=\"p\">),</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">DotA</span><span class=\"p\">(</span><span class=\"n\">hp</span><span class=\"p\">,</span> <span class=\"n\">dps</span><span class=\"p\">),</span> <span class=\"n\">atk</span> <span class=\"o\">+=</span> <span class=\"n\">dps</span><span class=\"p\">;;</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">());</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">hp</span> <span class=\"o\">*</span> <span class=\"n\">atk</span><span class=\"p\">,</span> <span class=\"n\">atk</span> <span class=\"o\">-=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">dps</span><span class=\"p\">;</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>一个 <img src=\"https://www.zhihu.com/equation?tex=h_2\" alt=\"h_2\" eeimg=\"1\"/> 写成了 <img src=\"https://www.zhihu.com/equation?tex=h_1\" alt=\"h_1\" eeimg=\"1\"/> WA了八发，不愧是罚时队的队员……</p><hr/><h2>N. 过河</h2><p>题意：《一本通》上经典的过河问题</p><p>题解：好难啊p_q，样例都看不懂……看了网上的解释是要考虑最快的人和第二快的人那个方法更优……贪心果然像数学归纳法一样玄学</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1010\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>O. Wooden Sticks</h2><p>题意：有若干木棍，对于木棍 <img src=\"https://www.zhihu.com/equation?tex=i%2Ci%2B1\" alt=\"i,i+1\" eeimg=\"1\"/> ，如果后者的长度和质量都大于前者，两根木棍可以一起切。切一根木棍要花费一个单位时间，问最少的时间</p><p>题解：把木棍从小到大排序，对于每一根木棍 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> ，把能和它一起切的找到，否则就把它加进需要切割的木棍里</p><p>upd：代码放错了，白天再补</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1010\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>P. NOIP2012国王游戏</h2><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problemnew/show/P1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P1080】国王游戏 - 洛谷</a><p>这个题通过尝试以后是按照 <img src=\"https://www.zhihu.com/equation?tex=a_i%5Ctimes+b_i\" alt=\"a_i\\times b_i\" eeimg=\"1\"/> 从小到大排序。听说要写高精度，就没做了（逃</p>", 
            "topic": [
                {
                    "tag": "算法竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19758328"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45516362", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 6, 
            "title": "ACM/ICPC 2018亚洲区预选赛北京赛站网络赛", 
            "content": "<p>当时一看到最后一题0AC，再定睛一看，“Rikka with Polygon”，秃然明白了什么……然后点开一看，果然……2333如果我没猜错的话这题是个多边形的布尔运算？</p><h2>A. Saving Tang Monk II</h2><p>题面好评！这道题是一个比较明显的bfs，策略如下：</p><ul><li>遇到了&#39;#&#39;，检查身上有没有氧气瓶，有的话就可以通过，时间+2</li><li>遇到了&#39;B&#39;，只要还装得下，就装一个，时间+1</li><li>遇到了&#39;P&#39;，不花时间</li><li>遇到了&#39;T&#39;，输出答案</li><li>遇到了空格，时间+1</li></ul><p>有一个特殊情况就是&#39;S&#39;也算作空格。</p><p>又考虑到在这道题里如果使用std::queue的话“最小值”很难确定，因此可以采取类似于Dijkstra的优化的方法，使用std::priority_queue来进行搜索，这样可以保证你走到这一点走的是最短路</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 110\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">dirx</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">diry</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">o2</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n  <span class=\"n\">Node</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">o2</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">o2</span><span class=\"p\">(</span><span class=\"n\">o2</span><span class=\"p\">),</span> <span class=\"n\">d</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">cmp</span> <span class=\"p\">{</span> <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"p\">()(</span><span class=\"k\">const</span> <span class=\"n\">Node</span><span class=\"o\">&amp;</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Node</span><span class=\"o\">&amp;</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">n1</span><span class=\"p\">.</span><span class=\"n\">d</span> <span class=\"o\">&gt;</span> <span class=\"n\">n2</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">bfs</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n  <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sx</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">;</span>\n  <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">));</span>\n  <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">();)</span> <span class=\"p\">{</span>\n    <span class=\"n\">Node</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">dirx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">diry</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nx</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ny</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;#&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span> <span class=\"o\">==</span> <span class=\"mi\">5</span> <span class=\"o\">?</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"nl\">o2</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;P&#39;</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;.&#39;</span> <span class=\"o\">||</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;S&#39;</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">o2</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"p\">][</span><span class=\"n\">ny</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;T&#39;</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>  <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span> <span class=\"n\">getchar</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;S&#39;</span><span class=\"p\">)</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">make_pair</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>（数组开小了，爆了十一发才FA♂现……）</p><h2>B. Tomb Raider</h2><p>有点♂fantasies，占坑待补</p><h2>D. 80 Days</h2><p>因为一定是要走过n的长度的，因此我们把环复制一份然后就直接划成一段一段就行了。有一个小小的优化是尺取法，一旦你发现走不了了，就把开头的城市往后移</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">];</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>（把while写成了if，爆了N发才发现）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>另外，NOIP2018就要开始了，祝大家（特别是衢州华茂外国语学校的选手）RP++，1=捧回家！</p>", 
            "topic": [
                {
                    "tag": "ACM 竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19644215"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }
            ], 
            "comments": [
                {
                    "userName": "海豹狙击手", 
                    "userLink": "https://www.zhihu.com/people/622fc0cf32fd5f7910c1b65296fd1cb5", 
                    "content": "<p>这位英雄，看不懂可以点赞吗。。。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "emm", 
                            "likes": 0, 
                            "replyToAuthor": "海豹狙击手"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45154243", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "CQOI2014 危桥", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problemnew/show/P3163\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P3163】[CQOI2014]危桥 - 洛谷</a><p>题目里给出的这个概念很容易让人联想到图论中的“桥”啊，一开始还以为只有&#34;O&#34;或者&#34;X&#34;，还以为是什么二分图的奇淫技巧，最后发现就是一个最大流，因为往返一次可以看做是走两次</p><p>首先建图，根据i和j的连通性可以分三种情况：</p><ul><li>&#39;X&#39;：不予理睬</li><li>&#39;O&#39;：危桥，连一条容量是2的边</li><li>‘N&#39;：普通桥，连一条容量是INF的边</li></ul><p>然后考虑链接源和汇，因为起点和终点分别是 <img src=\"https://www.zhihu.com/equation?tex=a_1%2Cb_1%2Ca_2%2Cb_2\" alt=\"a_1,b_1,a_2,b_2\" eeimg=\"1\"/> ，因此从 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 向 <img src=\"https://www.zhihu.com/equation?tex=a_1%2Cb_1\" alt=\"a_1,b_1\" eeimg=\"1\"/> 分别连一条容量是 <img src=\"https://www.zhihu.com/equation?tex=2%5Ctimes+a_n\" alt=\"2\\times a_n\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=2%5Ctimes+b_n\" alt=\"2\\times b_n\" eeimg=\"1\"/> 的边，然后从 <img src=\"https://www.zhihu.com/equation?tex=a_2%2Cb_2\" alt=\"a_2,b_2\" eeimg=\"1\"/> 分别向 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 连一条容量同上的边，然后跑最大流。最后的流量如果是满的，那么就可以通过了</p><p>当然，这里会有一个问题就是可能会出现从 <img src=\"https://www.zhihu.com/equation?tex=a_1\" alt=\"a_1\" eeimg=\"1\"/> 流到 <img src=\"https://www.zhihu.com/equation?tex=b_2\" alt=\"b_2\" eeimg=\"1\"/> 的二逼情况，因此我们要把起点终点交叉一下再建一张图跑一遍，只有在两张图上的流量都跑满了，才是可以的</p><p>ISAP果然快啊，还有，输入差评……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 30007\n</span><span class=\"cp\">#define INF 0x3f3f3f3f\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Graph</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">cap</span><span class=\"p\">;</span>\n        <span class=\"n\">Edge</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n        <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">cap</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">),</span> <span class=\"n\">cap</span><span class=\"p\">(</span><span class=\"n\">cap</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">gap</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"k\">this</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span> <span class=\"k\">this</span> <span class=\"o\">-&gt;</span> <span class=\"n\">t</span>  <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">));</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"p\">));</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">bfs</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">gap</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">gap</span><span class=\"p\">));</span>\n        <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">gap</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">emplace</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"o\">~</span><span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"o\">++</span><span class=\"n\">gap</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]];</span>\n                    <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">emplace</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">ISAP</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"p\">));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">flow</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n        <span class=\"n\">bfs</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">t</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]].</span><span class=\"n\">to</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">&gt;</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]].</span><span class=\"n\">cap</span><span class=\"p\">)</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">[(</span><span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">)]].</span><span class=\"n\">cap</span><span class=\"p\">;</span>\n                <span class=\"n\">flow</span> <span class=\"o\">+=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">t</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]].</span><span class=\"n\">to</span><span class=\"p\">)</span>\n                    <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]].</span><span class=\"n\">cap</span> <span class=\"o\">-=</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">cap</span> <span class=\"o\">+=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"o\">~</span><span class=\"n\">c</span><span class=\"p\">;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">cap</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n                <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n                <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">gap</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"kt\">int</span> <span class=\"n\">mn</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"o\">~</span><span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">cap</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">mn</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">mn</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span>\n                        <span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mn</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"o\">++</span><span class=\"n\">gap</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]];</span>\n                <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">flow</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">an</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">bn</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d%d%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">an</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">bn</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">getchar</span><span class=\"p\">();</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">clear</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">clear</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getchar</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span> <span class=\"o\">||</span> <span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;X&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;O&#39;</span><span class=\"p\">)</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;N&#39;</span><span class=\"p\">)</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">INF</span><span class=\"p\">),</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">INF</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">getchar</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">an</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">bn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">an</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">an</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">bn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">an</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">ISAP</span><span class=\"p\">(),</span> <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">ISAP</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">f1</span> <span class=\"o\">==</span> <span class=\"p\">((</span><span class=\"n\">an</span> <span class=\"o\">+</span> <span class=\"n\">bn</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">f2</span> <span class=\"o\">==</span> <span class=\"p\">((</span><span class=\"n\">an</span> <span class=\"o\">+</span> <span class=\"n\">bn</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Yes</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;No</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "ACM 竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19644215"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "网络流算法", 
                    "tagLink": "https://api.zhihu.com/topics/19969608"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45153196", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "SDOI2016 排列计数", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problemnew/show/P4071\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P4071】[SDOI2016]排列计数 - 洛谷</a><p>昨天晚上被Codeforces Math Round暴虐，今天又被洛谷随机了一道数学题……</p><p>不过这道数学题还是很友好的，毕竟结论一眼就出来了</p><p>我们观察题目的要求：</p><blockquote>所有1~n的排列A中恰好有m个 <img src=\"https://www.zhihu.com/equation?tex=A_i%3Di\" alt=\"A_i=i\" eeimg=\"1\"/> 的排列的个数</blockquote><p>那么我们假设一开始的排列就是 <img src=\"https://www.zhihu.com/equation?tex=1%2C2%2C...%2Cn\" alt=\"1,2,...,n\" eeimg=\"1\"/> ，然后考虑从中选出m个数不动，剩下的n-m个数进行排列组合</p><p>一开始我天真地以为把剩下的数全排列即可，后来发现不对，会有很多不合法的情况出现，还要把全排列中可能出现的 <img src=\"https://www.zhihu.com/equation?tex=A_j%3Dj\" alt=\"A_j=j\" eeimg=\"1\"/> 的情况给容斥掉</p><p>这里涉及到“错排问题”：</p><blockquote>错排问题：把n个数1..n投进n个位置1..n，使得每个数都不在自己对应的位置上，请问有几种投法</blockquote><p>假设 <img src=\"https://www.zhihu.com/equation?tex=D_i\" alt=\"D_i\" eeimg=\"1\"/> 表示问题的答案，非常显然，有 <img src=\"https://www.zhihu.com/equation?tex=D_1%3D0%2CD_2%3D1\" alt=\"D_1=0,D_2=1\" eeimg=\"1\"/> ，加下来推导 <img src=\"https://www.zhihu.com/equation?tex=n%5Cge3\" alt=\"n\\ge3\" eeimg=\"1\"/> 的情况，这种情况可以分为两方面：</p><ul><li>把这个数放到位置n，这样剩下的数有n-2个位置可以放</li><li>不把这个数放到n，这样剩下的数有n-1个位置可以放</li></ul><p>又因为把一个数放到某一个位置里有n-1种方法（不能放在它自己对应的那个位置），因此我们得到递推式： <img src=\"https://www.zhihu.com/equation?tex=D_i%3D%28i-1%29%5Ctimes+%28D_%7Bi-2%7D%2BD_%7Bi-1%7D%29\" alt=\"D_i=(i-1)\\times (D_{i-2}+D_{i-1})\" eeimg=\"1\"/> </p><p>最后根据分步计数的乘法原理，我们可以得到答案为 <img src=\"https://www.zhihu.com/equation?tex=C%5Em_n%5Ctimes+D_%7Bn-m%7D\" alt=\"C^m_n\\times D_{n-m}\" eeimg=\"1\"/> ，注意特殊情况需要特判，乘法逆元搞一搞就好了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 1000100\n</span><span class=\"cp\">#define p 1000000007\n</span><span class=\"cp\"></span>\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"nf\">pow_mod</span><span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">a</span> <span class=\"o\">%=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;0</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]);</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;1</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">1LL</span> <span class=\"o\">*</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">pow_mod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">m</span><span class=\"p\">],</span> <span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">pow_mod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">],</span> <span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">m</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "计数", 
                    "tagLink": "https://api.zhihu.com/topics/19680219"
                }, 
                {
                    "tag": "ACM 竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19644215"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39396146", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "COI2007 Patrik 音乐会的等待", 
            "content": "<p>既然是要处理区间内最高的问题，当然是用单调栈了。然后一开始手玩了一下样例感觉就是维护一下每个身高最高的范围，然后如果 <img src=\"https://www.zhihu.com/equation?tex=r_i-l_i%5Cge3\" alt=\"r_i-l_i\\ge3\" eeimg=\"1\"/> 就表示有一对可以看见的，结果理所当然地WA了……</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d9b7c2880c7168e2f8e5333e84c659c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1480\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb\" width=\"1480\" data-original=\"https://pic3.zhimg.com/v2-d9b7c2880c7168e2f8e5333e84c659c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1480&#39; height=&#39;872&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1480\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1480\" data-original=\"https://pic3.zhimg.com/v2-d9b7c2880c7168e2f8e5333e84c659c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d9b7c2880c7168e2f8e5333e84c659c2_b.jpg\"/></figure><p>我们维护一个pair&lt;身高, 人数&gt;的单调减的栈，如果加进来的人身高大于等于栈顶，就一直出栈并且把答案加上人数。如果是和栈顶一样高的，就把答案加1（其他人是看不到的）并且累计人数。最后如果栈不为空，说明另有高明是这个人的熟人，把答案加1，然后请这位高人入栈</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 500100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">fri</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"n\">fri</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">h</span><span class=\"p\">);</span> <span class=\"n\">fri</span> <span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">h</span> <span class=\"o\">&gt;=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">first</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">second</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">first</span><span class=\"p\">)</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">second</span><span class=\"p\">;</span>\n            <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"o\">++</span><span class=\"n\">ret</span><span class=\"p\">;</span>\n        <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "栈（数据结构）", 
                    "tagLink": "https://api.zhihu.com/topics/20183311"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38715468", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "Luogu P1433吃奶酪", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problemnew/show/P1433\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P1433】吃奶酪 - 洛谷</a></p><p>类似单向TSP，直接状压DP水之，不知道比搜索快到哪里去了</p><p>设 <img src=\"https://www.zhihu.com/equation?tex=f_%7Bi%2CS%7D\" alt=\"f_{i,S}\" eeimg=\"1\"/> 表示走到点i，当前状态为S的最短路，那么显然有：</p><p><img src=\"https://www.zhihu.com/equation?tex=f_%7Bi%2C2%5Ei%7D%3D0%2Cf_%7Bi%2CS%7D%3DINF%28S%5Cnot%3D2%5Ei%29\" alt=\"f_{i,2^i}=0,f_{i,S}=INF(S\\not=2^i)\" eeimg=\"1\"/> </p><p>然后考虑转移，因为可以从除了i以外的任一点走到i，因此转移方程是：</p><p><img src=\"https://www.zhihu.com/equation?tex=f_%7Bi%2CS%7D%3Dmin%5C%7Bf_%7Bi%2CS%7D%2Cf_%7Bj%2CS-2%5Ei%7D%2Bdist%28i%2Cj%29%7Ci%2Cj%5Cin+S%5C%7D\" alt=\"f_{i,S}=min\\{f_{i,S},f_{j,S-2^i}+dist(i,j)|i,j\\in S\\}\" eeimg=\"1\"/> </p><p>表示利用从j走到i更新距离，复杂度是 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E2%5Ctimes2%5En%29\" alt=\"O(n^2\\times2^n)\" eeimg=\"1\"/> </p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 20\n</span><span class=\"cp\">#define INF 1e18\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">Cor</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"n\">Cor</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Cor</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"n\">Cor</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">double</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">double</span> <span class=\"nf\">dist</span><span class=\"p\">(</span><span class=\"n\">Cor</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">Cor</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#ifndef ONLINE_JUDGE\n</span><span class=\"cp\"></span>    <span class=\"n\">freopen</span><span class=\"p\">(</span><span class=\"s\">&#34;test.in&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;r&#34;</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf%lf&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">second</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">S</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">S</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">S</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">S</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span> <span class=\"k\">continue</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">))</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">S</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">S</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">S</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">dist</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]));</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"kt\">double</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">double</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">dist</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%.2lf&#34;</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "动态规划", 
                    "tagLink": "https://api.zhihu.com/topics/19660018"
                }
            ], 
            "comments": [
                {
                    "userName": "Owl.ARY", 
                    "userLink": "https://www.zhihu.com/people/c245b73d2c1258643dd38ff832b75b19", 
                    "content": "题解放知乎..666", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "不想搬运以前的题解了", 
                            "likes": 0, 
                            "replyToAuthor": "Owl.ARY"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35498361", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 40, 
            "title": "在Mac上使用LaTeX", 
            "content": "<h2><b>0000 写在前面</b></h2><p>已经配好LaTeX的dalao请无视这篇文章。</p><p>因为网上很多教程介绍的东西很花，比如说MacTeX+Sublime+Skim（我才不会说是我笨配不来呢）；而Atom的插件似乎在下载会有困难，因此写这个参考</p><h2><b>0001 你需要什么</b></h2><p>首先你需要一个LaTeX的环境，在Windows上使用CTEX就可以了，在MacOS上，一个解决方案是MacTeX。网上大部分文章都会建议安装完整版的，但是完整版的很大，而且TeXShop的图标也确实丑，并且你在写完一部分以后没办法很方便地预览生成的pdf。</p><p>我个人使用的是小得多的BasicTeX，编辑器是TeXStudio。这里强烈推荐这款编辑器，因为它很简洁，而且有即时预览功能，是一个非常务实高效的解决方案。</p><h2><b>0010 安装这个有什么很麻烦的步骤吗</b></h2><p>据我所知，没有。直接在<a href=\"https://link.zhihu.com/?target=http%3A//tug.org/mactex/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MacTeX - TeX Users Group</a>上下载BasicTeX（也就是下面的那个“Smaller Install”，大概75MB的样子），按照安装器的提示安装就行了。安装好以后，在这个链接<a href=\"https://link.zhihu.com/?target=https%3A//sourceforge.net/projects/texstudio/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TeXstudio - A LaTeX Editor</a>下载安装TeXStudio（我这边官网的似乎下不动？），然后就可以开心地在Mac上使用LaTeX了</p><h2><b>0011 在TeXStudio中使用中文</b></h2><p>首先，你需要在TeXStudio-&gt;Preferences-&gt;Build里面把Default Compiler改成XeLaTeX，然后光这样是不行的，你会发现生成pdf的时候会不支持中文自动换行，因此你还需要使用xeCJK宏包。</p><p>在.tex文件的开头加上\\usepackage{xeCJK}，使用\\setCJKmainfont{...}来设置中文字体，使用\\setmainfont{...}来设置英文字体就可以了。具体的字体名称在字体册里都有，比如宋体是STSong。</p><h2><b>0100 愉快地使用LaTeX吧！</b></h2><p>完结撒花</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>UPD：</h2><p>鉴于很多人现在还会看这篇文章，笔者现在已经不使用TeXStudio了，并且安装了完整版的MacTeX.</p><p>另外，笔者在使用了一段时间的TeXShop以后果断投入了VSCode的怀抱。只需要安装扩展：LaTeX Workshop中在&#34;latex-workshop.latex.recipes&#34;和&#34;latex-workshop.latex.tools&#34;里加入下面这几行xelatex的配置即可：</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"err\">//</span> <span class=\"err\">latex-workshop.latex.recipes</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;xelatex&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;tools&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&#34;xelatex&#34;</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"err\">//latex-workshop.latex.tools</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;xelatex&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;command&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;xelatex&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;args&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&#34;-synctex=1&#34;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&#34;-interaction=nonstopmode&#34;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&#34;-file-line-error&#34;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&#34;-pdf&#34;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&#34;%DOC%&#34;</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n<span class=\"err\">}</span></code></pre></div><p>体验非常好</p>", 
            "topic": [
                {
                    "tag": "LaTeX", 
                    "tagLink": "https://api.zhihu.com/topics/19568710"
                }, 
                {
                    "tag": "Mac OS X 使用技巧", 
                    "tagLink": "https://api.zhihu.com/topics/19591970"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "Texpad最好", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>没钱……</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>经常用的话还是值得的</p>", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>\\documentclass[openany]{book} </p><p>\\usepackage{amsmath} </p><p>\\usepackage[UTF8]{ctex}</p><p>\\begin{document}</p><p>\\title{知乎}  </p><p>\\author{知乎} </p><p>\\date{2018-8-6} </p><p>\\maketitle  </p><p>\\tableofcontents </p><p>\\part{elementary}</p><p><br></p><p>\\chapter{introduction1}</p><p>知乎知乎</p><p>\\section{first section}</p><p>知乎</p><p>\\subsection{I like LaTeX}</p><p>\\end{document}</p><p><br></p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "霜之韵逸", 
                            "userLink": "https://www.zhihu.com/people/813ca6e9756cef17cc2345abe9240421", 
                            "content": "<p>E: /usr/local/texlive/2018/texmf-dist/tex/latex/ctex/fontset/ctex-fontset-mac.defFile: ctex-fontset-mac.def:47    ..............................................  </p><p>请问下这个代码报这个错误怎么解决呢？</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>对了ctex好像是额外装的，不是自带的</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>thx</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "在哪里装的啊", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>ctex大礼包普遍不建议安装，而且现在也不更新了，都装texlive就好。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>先容我吐槽一下这个大图，233</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "无茗", 
                    "userLink": "https://www.zhihu.com/people/2d5da822a142dad3f2901d7c4e434447", 
                    "content": "<p>请问这两个下载之后如何配置呢？mac小白。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "你是指哪两个啊", 
                            "likes": 0, 
                            "replyToAuthor": "无茗"
                        }
                    ]
                }, 
                {
                    "userName": "我不知道我在干嘛", 
                    "userLink": "https://www.zhihu.com/people/b7b40af7bc4b7530479405a6a291f3b7", 
                    "content": "收图，评论，跑路", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "wisdompanda", 
                    "userLink": "https://www.zhihu.com/people/54d613ec6868c159546df80215b6dccc", 
                    "content": "请问VScode如何实时预览LaTeX呢[好奇]", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>LaTeX Workshop好像是可以的，编译好了以后右上角有预览的</p>", 
                            "likes": 1, 
                            "replyToAuthor": "wisdompanda"
                        }, 
                        {
                            "userName": "wisdompanda", 
                            "userLink": "https://www.zhihu.com/people/54d613ec6868c159546df80215b6dccc", 
                            "content": "谢谢[赞同]，找到解决办法了，command+s，VScode好像不能实时预览，只有手动刷新", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "ykz", 
                    "userLink": "https://www.zhihu.com/people/1bcdf75717c318f14091b3123cd42958", 
                    "content": "为什么我的xecjk说找不到呀", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "xeCJK吧，或者试试ctex，这个比较新", 
                            "likes": 0, 
                            "replyToAuthor": "ykz"
                        }, 
                        {
                            "userName": "ykz", 
                            "userLink": "https://www.zhihu.com/people/1bcdf75717c318f14091b3123cd42958", 
                            "content": "已经解决，谢谢谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>想问下为啥mac版texshop里没有pdflatex</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "没研究过2333", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "没事，谢谢啦", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "斑马", 
                    "userLink": "https://www.zhihu.com/people/8cf751ba153e7180104c53d73786defa", 
                    "content": "<p>我都开始下texstudio了。。。翻到下面发现你弃了。。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36219751", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 6, 
            "title": "NOIP模拟赛（十）出锅申明", 
            "content": "<p>首先申明，作为二中校内赛历史上最菜的出题人，A的数据出锅我很抱歉，当时觉得1e18的范围没法拍，然后也没多想，觉得公式对了做法对了也就没什么问题了，仔细想想程序也没什么问题，不知道哪里写丑了，非常抱歉，比赛已经作unrated处理。现在想想，小数据范围递推还是可拍的</p><p>然后，比赛的时候A全部都是猜上来的假结论，连个写50分递推的都没有，导致我在比赛的时候也不知道数据到底有没有出锅，本来觉得这道题目最难的地方是解递推关系，出上来不是很合适，但是觉得另一个结论是好猜的，就放上来了，这个A是真的不好</p><p>结果今天一看，A被差评就算了，比赛被差评是什么意思啊，B的n的范围题目里说的清清楚楚两位由大小写字符组成的字符串52乘以52=2704都不会算的是吧，连这个都不会算，然后把部分分的数据范围当成所有数据范围，写挂了，还好意思说题目没说清楚。这道题本来是改编自World Finals 2010的一道题目的，比那题不知道简单多少，那道题目需要你自己从题面里发掘的信息更多，是非常综合的好题，然后你们就因为一个这么简单的排列组合算不出来就觉得题目差？！就算你算不来这个排列组合，用vector&lt;int&gt; G(n);开n个vector不会用的吗？</p><p>C题本来出的是统计x、y之间路径上点权为v的点有几个，开成1e9，然后要用块状链表做，LCT是维护不了的，但是考虑到这样子做没什么意思，纯粹就是毒瘤数据结构，而且由于块状链表的时间复杂度当时算出来不是很科学，感觉可能跑得还没暴力快，打起来也很毒瘤，就把题目改成了现在这样的，给的标算是并查集+线段树+树链剖分，自己菜没往LCT上面想，把题目都给验题人的时候验题人大概觉得没必要用LCT，也是给出并查集+线段树+树链剖分的做法。早知道就改回原来的题面然后强制在线，大家都不会做，还没有板子题的骂名。。。</p><p>还是自己菜了，非常抱歉</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>UPD</h2><p>今天重构了一遍代码，和对拍一致了，似乎是一个奇奇怪怪的地方少取了一次模。。。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cm\">/*written by LoliconAutomaton*/</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define mod 1000000007\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">exgcd</span><span class=\"p\">(</span><span class=\"n\">ll</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">ll</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">ll</span><span class=\"o\">&amp;</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">ll</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ll</span><span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"n\">exgcd</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span> <span class=\"n\">y</span> <span class=\"o\">-=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">mul_mod</span><span class=\"p\">(</span><span class=\"n\">ll</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">ll</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">a</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">pow_mod</span><span class=\"p\">(</span><span class=\"n\">ll</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">ll</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">a</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">mul_mod</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">mul_mod</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">inv</span><span class=\"p\">(</span><span class=\"n\">ll</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t<span class=\"n\">exgcd</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">mod</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">mod</span> <span class=\"o\">+</span> <span class=\"n\">mod</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"nl\">mod</span> <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ll</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld%lld&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t<span class=\"n\">ll</span> <span class=\"n\">ret1</span> <span class=\"o\">=</span> <span class=\"n\">pow_mod</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">ret2</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">t</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"c1\">//之前这个ret2似乎没有取模 \n</span><span class=\"c1\"></span>\t<span class=\"n\">ll</span> <span class=\"n\">ret3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ret1</span> <span class=\"o\">+</span> <span class=\"n\">ret2</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld&#34;</span><span class=\"p\">,</span> <span class=\"n\">mul_mod</span><span class=\"p\">(</span><span class=\"n\">ret3</span><span class=\"p\">,</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)));</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>暑假里可能会搭一个华高OJ，届时欢迎各位dalao前来虐场</p><p>接下来是题解：</p><p>A.不难发现经过t轮后一共有 <img src=\"https://www.zhihu.com/equation?tex=%28n-1%29%5Et\" alt=\"(n-1)^t\" eeimg=\"1\"/> 种传球方式。令 <img src=\"https://www.zhihu.com/equation?tex=a_t\" alt=\"a_t\" eeimg=\"1\"/> 表示经过t轮后回到第一个人的方法数，那么有 <img src=\"https://www.zhihu.com/equation?tex=a_%7Bt%2B1%7D%3Da_t%2B%28n-1%29%5Et\" alt=\"a_{t+1}=a_t+(n-1)^t\" eeimg=\"1\"/> ，解这个递推关系，可以得到答案（怎么解看这里：<a href=\"https://link.zhihu.com/?target=https%3A//wenku.baidu.com/view/e0283f06964bcf84b9d57b81.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一类传球问题的推广及解法公式_论文_百度文库</a>）是： <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%28n-1%29%5Et%2B%28-1%29%5Et%5Ctimes%28n-1%29%7D%7Bn%7D\" alt=\"\\frac{(n-1)^t+(-1)^t\\times(n-1)}{n}\" eeimg=\"1\"/> ，然后快速乘快速幂以及乘法逆元乱搞一下就可以了（P.S.我以后再也不出数学题了）</p><p>B.首先要计算n的范围（这是一个考点），由于是由一个两位大小写字母组成的名字，因此n最大是52*52=2704，当然，熟悉STL的同学也可以先scanf(&#34;%d&#34;, &amp;n);然后vector&lt;int&gt; G(n ＋10);之类的语句来开vector。然后花 <img src=\"https://www.zhihu.com/equation?tex=n%5E2\" alt=\"n^2\" eeimg=\"1\"/> 的时间扫一遍园，相交或者相切就是0，否则的话距离就是圆心距-半径和。然后跑一遍 <img src=\"https://www.zhihu.com/equation?tex=n%5E2\" alt=\"n^2\" eeimg=\"1\"/> 的Dijkstra传递一下最大值最小就行了，写生成树+倍增可能会被卡常数。数据造得有点水，因此有一个90分的二分答案……</p><div class=\"highlight\"><pre><code class=\"language-text\">/*written by LoliconAutomaton*/\n#include &lt;bits/stdc++.h&gt;\n#define N 3030\nusing namespace std;\n\nstruct Circle {\n\tdouble x, y, r;\n} c[N];\n\nint n; \ndouble d[N], w[N][N];\nbool vis[N];\nstring name, op, ed;\nmap&lt;string, int&gt; ms;\n\ninline void read()\n{\n\tscanf(&#34;%d&#34;, &amp;n); ms.clear();\n\tfor (int i = 1; i &lt;= n; ++i) {\n\t\tcin &gt;&gt; name;\n\t\tif (!ms.count(name)) ms[name] = i;\n\t\tscanf(&#34;%lf%lf%lf&#34;, &amp;c[i].x, &amp;c[i].y, &amp;c[i].r);\n\t}\n\tcin &gt;&gt; op &gt;&gt; ed;\n}\n\ninline pair&lt;bool, double&gt; check(Circle a, Circle b)\n{\n\tdouble d = sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n\treturn make_pair(d &lt;= (a.r + b.r), d);\n}\n\ninline void create(int n)\n{\n\tfor (int i = 1; i &lt;= n; ++i)\n\t\tfor (int j = 1; j &lt;= n; ++j) {\n\t\t\tif (i == j) continue;\n\t\t\tpair&lt;bool, double&gt; p = check(c[i], c[j]);\n\t\t\tif (p.first == true) w[i][j] = w[j][i] = 0;\n\t\t\telse w[i][j] = w[j][i] = p.second - c[i].r - c[j].r;\n\t\t}\n\tmemset(vis, false, sizeof(vis));\n}\n\ninline double dijkstra(string op, string ed)\n{\n\tmemset(d, 0x7f, sizeof(d)); d[ms[op]] = 0.0;\n\tfor (int i = 1; i &lt;= n; ++i) {\n\t\tint x; double m = 1e9 + 7;\n\t\tfor (int y = 1; y &lt;= n; ++y) if (!vis[y] &amp;&amp; d[y] &lt;= m) m = d[x = y];\n\t\tvis[x] = true;\n\t\tfor (int y = 1; y &lt;= n; ++y) d[y] = min(d[y], max(d[x], w[x][y]));\n\t}\n\treturn d[ms[ed]];\n}\n\nint main()\n{\n\tfreopen(&#34;minecraft.in&#34;, &#34;r&#34;, stdin);\n\tfreopen(&#34;minecraft.out&#34;, &#34;w&#34;, stdout);\n\tread();\n\tcreate(n);\n\tprintf(&#34;%.6lf&#34;, dijkstra(op, ed));\n\tfclose(stdin); fclose(stdout);\n\treturn 0;\n}</code></pre></div><p>C.原来这是LCT的板子题……不过话说LCT如果不考板子那得有多难……首先这是一道NOIP模拟题，其次这本来是准备给华高高二做的，因此不可能考LCT。关于操作一，维护方法是先离线建树，用一个并查集判断点与点之间的连通性，这样可以把没用的操作一操作二都判掉，森林建好以后顺着再做一遍操作，合法的操作一就相当于改两次点权；关于操作二，其实就是一个树上两点之间信息维护的问题，而这正是树链剖分和线段树的拿手好戏，用线段树维护一个颜色集合就行了，然后从两点提到lca，并且进行信息访问。其实当时搞出来的时候觉得是个不错的idea……至于时限为什么给5秒，因为写标程的人大量使用了STL……然后反正暴力要跑80几秒……就让大家的比赛体验好一点算了（其实好像并不好……）……</p><div class=\"highlight\"><pre><code class=\"language-text\">/*written by g1n0st*/\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair&lt;int, int&gt; PI;\ntypedef pair&lt;int, PI&gt; PII;\n\nconst int V = 300010;\nconst int N = 100010;\n\nint __count__(LL x) {\n\tint r = 0;\n\tfor (; x; x -= x &amp; -x) {\n\t\tr++;\n\t}\n\treturn r;\n}\n\nchar get() {\n\tstatic char buf[V], *p1 = buf, *p2 = buf;\n\tif (p1 == p2) {\n\t\tp2 = (p1 = buf) + fread(buf, 1, V, stdin);\n\t\tif (p1 == p2) return EOF;\n\t}\n\treturn *p1++;\n}\nvoid Read(int &amp;x) {\n\tx = 0; static char c;\n\tfor (; !isdigit(c); c = get());\n\tfor (; isdigit(c); x = x * 10 + c - &#39;0&#39;, c = get());\n}\n\nnamespace SGT {\n\tLL val[N &lt;&lt; 2];\n\tvoid modify(int o, int l, int r, int p, int v) {\n\t\tif (l == r) {\n\t\t\tval[o] = 1LL &lt;&lt; v; return;\n\t\t}\n\t\tint mid = (l + r) &gt;&gt; 1;\n\t\tif (p &lt;= mid) modify(o &lt;&lt; 1, l, mid, p, v);\n\t\telse modify(o &lt;&lt; 1 | 1, mid + 1, r, p, v);\n\t\tval[o] = val[o &lt;&lt; 1] | val[o &lt;&lt; 1 | 1];\n\t}\n\tLL query(int o, int l, int r, int L, int R) {\n\t\tif (l == L &amp;&amp; r == R) return val[o];\n\t\tint mid = (l + r) &gt;&gt; 1;\n\t\tif (R &lt;= mid) return query(o &lt;&lt; 1, l, mid, L, R);\n\t\tif (mid &lt; L) return query(o &lt;&lt; 1 | 1, mid + 1, r, L, R);\n\t\treturn query(o &lt;&lt; 1, l, mid, L, mid) |\n\t\t\tquery(o &lt;&lt; 1 | 1, mid + 1, r, mid + 1, R);\n\t}\n}\n\nnamespace LS {\n\tint fa[V];\n\tvoid init(int n) {\n\t\tfor (int i = 1; i &lt;= n; i++) fa[i] = i;\n\t}\n\tint getf(int x) {\n\t\treturn x == fa[x] ? x : fa[x] = getf(fa[x]);\n\t}\n\tvoid merge(int x, int y) {\n\t\tx = getf(x); y = getf(y);\n\t\tif (x == y) return;\n\t\tfa[x] = y;\n\t}\n}\n\nvector&lt;int&gt; G[V];\n\nvector&lt;PII&gt; qr;\n\nint fa[V], dep[V], siz[V], pos[V], top[V], pT;\nvoid dfs1(int u) {\n\tsiz[u] = 1;\n\tfor (auto v : G[u]) {\n\t\tif (v == fa[u]) continue;\n\t\tfa[v] = u; dep[v] = dep[u] + 1;\n\t\tdfs1(v); siz[u] += siz[v];\n\t}\n}\nvoid dfs2(int u, int path) {\n\ttop[u] = path; pos[u] = ++pT;\n\tint k = 0;\n\tfor (auto v : G[u])\n\t\tif (dep[v] &gt; dep[u] &amp;&amp; siz[v] &gt; siz[k]) k = v;\n\tif (!k) return; dfs2(k, path);\n\tfor (auto v : G[u])\n\t\tif (dep[v] &gt; dep[u] &amp;&amp; v != k) dfs2(v, v);\n}\n\nint n, Q, a[V];\n\nLL query(int x, int y) {\n\tLL r = 0;\n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] &gt; dep[top[y]]) swap(x, y);\n\t\tr |= SGT::query(1, 1, n, pos[top[y]], pos[y]);\n\t\ty = fa[top[y]];\n\t}\n\tif (dep[x] &gt; dep[y]) swap(x, y);\n\tr |= SGT::query(1, 1, n, pos[x], pos[y]);\n\treturn r;\n}\n\nint main() {\n\tfreopen(&#34;rewrite.in&#34;, &#34;r&#34;, stdin);\n\tfreopen(&#34;rewrite.out&#34;, &#34;w&#34;, stdout);\n\n\tRead(n); Read(Q);\n\tLS::init(n);\n\n\tfor (int i = 1; i &lt;= n; i++) Read(a[i]);\n\n\tint op, x, y;\n\tfor (int i = 1; i &lt;= Q; i++) {\n\t\tRead(op); Read(x); Read(y);\n\t\tif (op &amp; 1) {\n\t\t\tif (LS::getf(x) == LS::getf(y)) continue;\n\t\t\tLS::merge(x, y);\n\t\t\tG[x].emplace_back(y);\n\t\t\tG[y].emplace_back(x);\n\t\t}\n\t\tqr.emplace_back(PII(op, PI(x, y)));\n\t}\n\n\tfor (int i = 1; i &lt;= n; i++) {\n\t\tif (pos[i]) continue;\n\t\tdfs1(i); dfs2(i, i);\n\t}\n\tfor (int i = 1; i &lt;= n; i++) SGT::modify(1, 1, n, pos[i], a[i]);\n\n\tLS::init(n);\n\tfor (auto q : qr) {\n\t\tint op = q.first, x = q.second.first, y = q.second.second;\n\t\tif (op &amp; 1) {\n\t\t\tif (LS::getf(x) == LS::getf(y)) continue;\n\t\t\tLS::merge(x, y);\n\t\t\tint val = (a[x] + a[y]) / 2;\n\t\t\ta[x] = a[y] = val;\n\t\t\tSGT::modify(1, 1, n, pos[x], val);\n\t\t\tSGT::modify(1, 1, n, pos[y], val);\n\t\t}\n\t\telse {\n\t\t\tif (LS::getf(x) != LS::getf(y)) {\n\t\t\t\tputs(&#34;-1&#34;);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprintf(&#34;%d\\n&#34;,\n\t\t\t\t__count__(query(x, y))\n\t\t\t);\n\t\t}\n\t}\n\treturn 0;\n}</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "NOI（全国青少年信息学奥林匹克竞赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636864"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>dalao出的题真的都很好！！！不过T2二分withBFScheck卡时过了是什么鬼</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "因为我这个题的数据不知道该怎么造比较好，然后就造了一堆网格然后再随机造几个圆，有更强的数据可以联系臣翔啊", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我好弱啊，您真强</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33917896", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "WC2018 即时战略", 
            "content": "<p>AFO以后第一次更新（炮姐好萌啊QAQ史上最萌电容器）</p><p>题目链接在这里：<a href=\"https://link.zhihu.com/?target=http%3A//uoj.ac/problem/349\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Universal Online Judge</a></p><p>神奇的wys出了一道神奇的题目</p><h2><b>题目大意</b></h2><p>给你一棵树，一开始你只知道结点1。每次你可以知道这个已知点的一个儿子结点。请操作不超过若干次使整个树变为已知。</p><h2><b>做法一</b></h2><p>很容易想到的一个做法是不断询问重心，由于探索到一个新结点以后会有加点的操作，因此需要用紫荆花之恋里的做法，也就是动态点分治，但是……写起来有点烦啊……</p><h2><b>做法二</b></h2><p>神奇的 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/53a642c2d06d68a28a0b1550d1613bcc\" data-hash=\"53a642c2d06d68a28a0b1550d1613bcc\" data-hovercard=\"p$b$53a642c2d06d68a28a0b1550d1613bcc\">@g1n0st</a> 告诉我做法一就相当于Link-Cut Tree的一个access操作，感觉有理有据，非常巧妙。每次探索一个结点，然从已知点走到这个点，边走边探索就行了，具体的走法就是在splay上二分，需要记录一下每条链底端的结点。dataType=3需要特判一下，一开始天真地以为链就是(1,2)(2,3)...结果一发WA……链上的做法就是从两边靠近。因为提供的库函数都是int型的，LCT就不写指针了……</p><h2><b>吐槽</b></h2><p>哪位大佬能告诉我我的代码还有什么可改进的地方……UOJ的Extra Test#3过不掉啊/(ㄒoㄒ)/~~</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;rts.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 300100\n</span><span class=\"cp\"></span><span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">L_Bottom</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">R_Bottom</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"n\">tree</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">dir</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">isroot</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">maintain</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">L_Bottom</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R_Bottom</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">L_Bottom</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L_Bottom</span><span class=\"p\">[</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]];</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">R_Bottom</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R_Bottom</span><span class=\"p\">[</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isroot</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">][</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">d</span> <span class=\"o\">^</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t<span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">d</span> <span class=\"o\">^</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">;</span>\n\t<span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">splay</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">isroot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isroot</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">access</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n\t\t<span class=\"n\">splay</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">play</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">dataType</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dataType</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">;</span>\n\t\t\t\t\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">l</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"p\">;)</span> <span class=\"p\">{</span>\n\t\t\t\t\t\t<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t\t\t\t<span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t\t\t\t<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">;</span>\n\t\t\t\t\t<span class=\"p\">}</span>\n\t\t\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"p\">;)</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t\t\t<span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">L_Bottom</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R_Bottom</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">splay</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t\t\t\t<span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n\t\t\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">==</span> <span class=\"n\">R_Bottom</span><span class=\"p\">[</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]])</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t\t\t\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">==</span> <span class=\"n\">L_Bottom</span><span class=\"p\">[</span><span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]])</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">lct</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t\t\t\t\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">])</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t\t\t\t\t\t<span class=\"k\">else</span> <span class=\"n\">splay</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">);</span>\n\t\t\t\t\t\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">;</span>\n\t\t\t\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t\t\t\t<span class=\"p\">}</span>\n\t\t\t\t\t<span class=\"p\">}</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t\t<span class=\"n\">access</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": [
                {
                    "userName": "Kelin", 
                    "userLink": "https://www.zhihu.com/people/10d72b6591b08aaa1449214d66ea61c2", 
                    "content": "<p>LCT全部都被Hack了啊,只能写动态点分治了</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31174087", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 10, 
            "title": "AFO", 
            "content": "<p><b>致my first but last NOIP tg</b></p><h2>Day 1</h2><p>A. woc……这什么啊……推不出来啊，打个扩欧试一试！然而并没有发现什么规律，幸好最后在两个多小时的时候把结论猜出来了，然而忘记乘法溢出了……我考试的时候在干什么啊+1……这题直接影响了我的Day1状态。讲真，六分之一的分数给一个结论真的不支持</p><p>B. 有毒啊，还以为以后都不会考这种题目了呢，感觉细节这么多我肯定会写挂，写个50分好了……woc有毒啊，保存O(n^w)的w的时候少开了一位变成30分了……我考试的时候在干什么啊+2</p><p>C. 看错了题目，看成了没有环……然后就觉得十分可做（虽然也确实十分可做），然后还因为自己没有取模伤心了很久，最后发现根本就是错的……Dijkstra，dp什么的都想到了……</p><p>总体上说Day1的题目我不是很擅长，个人也不是很喜欢，AB没有什么营养。然而弱的人是没有发言权的。</p><h2>Day 2</h2><p>A. 好简单的题目，比较躶的计算几何。然后我就像个SB一样直接n^2枚举点了，100分写成30分……我考试的时候在干什么啊+3</p><p>B. 一看题目要求连通就感觉是一个有理有据的生成树，然后就强行枚举起点做最小生成树了……对着大样例调了半天都没发现自己上了一个假算法……</p><p>UPD：根据 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/1b9e0cd01b4e60d843b4381cced7bbf7\" data-hash=\"1b9e0cd01b4e60d843b4381cced7bbf7\" data-hovercard=\"p$b$1b9e0cd01b4e60d843b4381cced7bbf7\">@oscar</a> 的说法生成树可以过大样例，不过是prim。我还是想知道利用枚举的起点来更新每条边的边权之后再做Kruskal有什么问题……</p><p>C. 一开始感觉是一个平衡树的问题，然而考试之前并没有背平衡树的板子，写了一个30分暴力回去调第二题了。后来第二题调不出来回来再看的时候就有一点思路了，应该是一个比较躶的数据结构题，打个移动标记然后统计一下就好了，线段树或者树状数组都可以做，然后我只剩下10分钟了……我考试的时候在干什么啊+4</p><h2>AFO</h2><p>还是自己太弱了吧，只能省三AFO，耻辱退役。然而，我还是会在这条路上坚定不移地继续走下去的，bu%Wangchu&amp;Xin!!!</p>", 
            "topic": [
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": [
                {
                    "userName": "Clover", 
                    "userLink": "https://www.zhihu.com/people/4b6f688b4de09f4282f0d1a95283a15d", 
                    "content": "您不是才初中的吗？还是高一？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我高三了啊QAQ</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Clover"
                        }, 
                        {
                            "userName": "Clover", 
                            "userLink": "https://www.zhihu.com/people/4b6f688b4de09f4282f0d1a95283a15d", 
                            "content": "唉..好吧，看您从noip题刷到省选题cf题还以为您是高一刚开始学，还是祝高考成功啦，同是高考狗", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "itdevwu", 
                    "userLink": "https://www.zhihu.com/people/dd0297c7f6406d97932b4cf5bc3c436d", 
                    "content": "d2t2同调了大半天假的最小生成树", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "oscar", 
                    "userLink": "https://www.zhihu.com/people/1b9e0cd01b4e60d843b4381cced7bbf7", 
                    "content": "d2t2最小生成树是能过大样例的！考场上写prim并坚定不移地认为算法正确的选手已报警", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>写了一个kruskal……我是用了一个Floyed算出来两个点之间有多少点，然后每次Kruskal的时候就根据这个起点更新一下边权</p>", 
                            "likes": 0, 
                            "replyToAuthor": "oscar"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "d2t2 写mst是什么情况😳", 
                            "likes": 0, 
                            "replyToAuthor": "oscar"
                        }
                    ]
                }, 
                {
                    "userName": "炽翼幻灵", 
                    "userLink": "https://www.zhihu.com/people/3a58e47fbb9ed13e7dc0bb216fc8f57f", 
                    "content": "<p>同高三，然而D2T2完全没有得分。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Kalia", 
                    "userLink": "https://www.zhihu.com/people/39957d93da7750288706f7b246bb4f71", 
                    "content": "同高三 加油吧", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "飒咖翼", 
                    "userLink": "https://www.zhihu.com/people/fbd6ed286fa6126e4b2f310444043644", 
                    "content": "<p>咦，你们都知道分了啊，是自己测的吗......同高三，同不知道自己考试时在干嘛orz</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gogogo", 
                    "userLink": "https://www.zhihu.com/people/677c4736e0d3e3fc45f38f7263589e0c", 
                    "content": "<p>和你一样d1t2 50分写成30，d2t1 100分写成30。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30484385", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "SDOI2017 新生舞会", 
            "content": "<h2><b>0000 题目大意</b></h2><p>你要安排一场有n个男生和n个女生参与的舞会，他们两两有一个 <img src=\"https://www.zhihu.com/equation?tex=a_%7Bi%2Cj%7D\" alt=\"a_{i,j}\" eeimg=\"1\"/> 和一个 <img src=\"https://www.zhihu.com/equation?tex=b_%7Bi%2Cj%7D\" alt=\"b_{i,j}\" eeimg=\"1\"/> ，现在假设每一对舞伴有一个 <img src=\"https://www.zhihu.com/equation?tex=a%27_%7Bi%7D\" alt=\"a&#39;_{i}\" eeimg=\"1\"/> 和一个 <img src=\"https://www.zhihu.com/equation?tex=b%27_%7Bi%7D\" alt=\"b&#39;_{i}\" eeimg=\"1\"/> ，你要让 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7Ba%27_%7Bi%7D%7D%7D%7B%5Csum_%7Bj%3D1%7D%5E%7Bn%7D%7Bb%27_%7Bj%7D%7D%7D\" alt=\"\\frac{\\sum_{i=1}^{n}{a&#39;_{i}}}{\\sum_{j=1}^{n}{b&#39;_{j}}}\" eeimg=\"1\"/> 最大</p><h2><b>0001 口胡</b></h2><p>我们看参加舞会的人员只有男生和女生（在这里题目并没有申明有扶她之类的人参加），因此这是一个非常典型的二分图。由于题目中有非常明显的权值，因此这是一个二分图最大权匹配，直接跑一次KM算法就可以了（orz会费用流的大佬）</p><h2><b>0010 程序实现(1)——二分图权值的确定</b></h2><p>像我这种数学渣就是死也想不到的，然后就学习到了“01分数规划”这个思想：</p><ul><li>01分数规划问题：你有n个物品，其中每个物品有两个权值 <img src=\"https://www.zhihu.com/equation?tex=a_%7Bi%7D\" alt=\"a_{i}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=b_%7Bi%7D\" alt=\"b_{i}\" eeimg=\"1\"/> ，你要选出一些物品，使得他们的 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Csum_%7B%7D%5E%7B%7D%7Ba_%7Bi%7D%7D%7D%7B%5Csum_%7B%7D%5E%7B%7D%7Bb_%7Bi%7D%7D%7D\" alt=\"\\frac{\\sum_{}^{}{a_{i}}}{\\sum_{}^{}{b_{i}}}\" eeimg=\"1\"/> 最大</li></ul><p>首先这个地方肯定是要想到二分答案的（类似的还有最大/小值最小/大、平均数最小/大问题），然后我们令 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Csum_%7B%7D%5E%7B%7D%7Ba_%7Bi%7D%7D%7D%7B%5Csum_%7B%7D%5E%7B%7D%7Bb_%7Bi%7D%7D%7D%5Cgeq+x\" alt=\"\\frac{\\sum_{}^{}{a_{i}}}{\\sum_{}^{}{b_{i}}}\\geq x\" eeimg=\"1\"/> ，那么数学老师告诉我们当 <img src=\"https://www.zhihu.com/equation?tex=b_%7Bi%7D%5Cnot%3D0\" alt=\"b_{i}\\not=0\" eeimg=\"1\"/> 的时候，我们可以等价地把这个方程转化为 <img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7B%7D%5E%7B%7D%7Ba_%7Bi%7D%7D-x%5Ctimes+%5Csum_%7B%7D%5E%7B%7D%7Bb_%7Bi%7D%7D%5Cgeq0\" alt=\"\\sum_{}^{}{a_{i}}-x\\times \\sum_{}^{}{b_{i}}\\geq0\" eeimg=\"1\"/> ，这个地方就是去分母以后移一下项得到的，这个也是二分法的check函数的写法</p><h2><b>0011 程序实现(2)——二分答案</b></h2><p>不知道KM算法的出门右转lrj蓝书，不过事实上我也是大概知道一个适用场合然后把它当做一个STL背了下来（其实还没有背下来QAQ）</p><p>现在我们建立二分图，令 <img src=\"https://www.zhihu.com/equation?tex=lx_%7Bi%7D\" alt=\"lx_{i}\" eeimg=\"1\"/> 表示每个女生的顶标， <img src=\"https://www.zhihu.com/equation?tex=ly_%7Bi%7D\" alt=\"ly_{i}\" eeimg=\"1\"/> 表示每一个男生的顶标， <img src=\"https://www.zhihu.com/equation?tex=W_%7Bx%2Cy%7D\" alt=\"W_{x,y}\" eeimg=\"1\"/> 表示两个人之间的权值</p><p>那么根据上面的介绍，在每一次check(m)的时候我们需要更新一次 <img src=\"https://www.zhihu.com/equation?tex=W_%7Bx%2Cy%7D%3Da_%7Bi%2Cj%7D-m%5Ctimes+b_%7Bi%2Cj%7D\" alt=\"W_{x,y}=a_{i,j}-m\\times b_{i,j}\" eeimg=\"1\"/> </p><p>然后跑一次KM检测一下当前的最大匹配成不成功就可以了，KM的时间复杂度是 <img src=\"https://www.zhihu.com/equation?tex=O%28n%5E%7B3%7D%29\" alt=\"O(n^{3})\" eeimg=\"1\"/> 的，由于权值最大就是 1e4，因此总时间复杂度也就相当于 <img src=\"https://www.zhihu.com/equation?tex=n%5E%7B3%7D\" alt=\"n^{3}\" eeimg=\"1\"/> 乘上一个常数，写起来简单，跑起来也飞快</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-59bd3ffa82b9516feb62373e4966e57e_b.jpg\" data-caption=\"\" data-rawwidth=\"296\" data-rawheight=\"769\" class=\"content_image\" width=\"296\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;296&#39; height=&#39;769&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"296\" data-rawheight=\"769\" class=\"content_image lazy\" width=\"296\" data-actualsrc=\"https://pic3.zhimg.com/v2-59bd3ffa82b9516feb62373e4966e57e_b.jpg\"/></figure><p>恩，第一份是我的，下面是费用流大佬在鄙视我（最后一个应该也是KM吧）……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 110\n</span><span class=\"cp\">#define INF 1000000007\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">double</span> <span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">ly</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">visx</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">visy</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">visx</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visy</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">ly</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">visy</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">KM</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">ly</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ly</span><span class=\"p\">));</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">));</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visx</span><span class=\"p\">));</span>\n\t\t\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visy</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visy</span><span class=\"p\">));</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t<span class=\"kt\">double</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">x</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visx</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n\t\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">y</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visy</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">])</span>\n\t\t\t\t\t<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">ly</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"n\">INF</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">x</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visx</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n\t\t\t\t<span class=\"n\">lx</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">y</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visy</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">])</span>\n\t\t\t\t<span class=\"n\">ly</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"kt\">double</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">res</span> <span class=\"o\">+=</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"k\">return</span> <span class=\"n\">res</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">m</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n\t<span class=\"kt\">double</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mf\">1e4</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">&gt;=</span> <span class=\"mf\">1e-8</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">KM</span><span class=\"p\">())</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%.6lf&#34;</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>完结撒花……话说《此花亭奇谭》里女主的尾巴我给1000分</p><p></p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": [
                {
                    "userName": "Clover", 
                    "userLink": "https://www.zhihu.com/people/4b6f688b4de09f4282f0d1a95283a15d", 
                    "content": "dalao这个题用牛迭特别快，而且你费用流或km的本质其实是个01分数规划啊", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "EntropyIncreaser", 
                            "userLink": "https://www.zhihu.com/people/95dfa54934a2d8e0bde528f78bf9eeaf", 
                            "content": "牛顿迭代法不是要求导吗，这个问题怎么牛顿法", 
                            "likes": 0, 
                            "replyToAuthor": "Clover"
                        }, 
                        {
                            "userName": "Clover", 
                            "userLink": "https://www.zhihu.com/people/4b6f688b4de09f4282f0d1a95283a15d", 
                            "content": "就是把二分法换成牛顿迭代法来逼近答案，这样比二分法的逼近速度要快，当时考场上很多人都被卡常了，题解pdf上也是用的牛顿迭代法", 
                            "likes": 0, 
                            "replyToAuthor": "EntropyIncreaser"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29885683", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 20, 
            "title": "Flag", 
            "content": "<p>学考选考 + NOIP2017，可以体验连续滚粗的快感</p><h2><b>UPD1</b></h2><p>CF Round #438(Div.1 Div.2 Combined)一开始打出了AB，C也有想法，美滋滋，以为妥妥地涨分，结果C没打出来，B被Hack了，A最终fst……掉了108分，好慌啊</p><h2><b>UPD2 Day0</b></h2><p>听说11.20我们学校期中考试，连续滚粗三场了啊……</p><p>明天就是Day1了，然而还有很多不会的……QAQ</p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "高考", 
                    "tagLink": "https://api.zhihu.com/topics/19567664"
                }
            ], 
            "comments": [
                {
                    "userName": "Shawn Zhou", 
                    "userLink": "https://www.zhihu.com/people/a7d48d67b6e2eeeaf9e44902caa3042a", 
                    "content": "dalao RP++", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>您不要乱怼人啊QAQ我cf绿油油的啊</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Shawn Zhou"
                        }
                    ]
                }, 
                {
                    "userName": "SuperFashi", 
                    "userLink": "https://www.zhihu.com/people/6f4c4c8a524d39855ce4dfefe72e7728", 
                    "content": "图盗走了（", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29831022", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 18, 
            "title": "NOIP2014 D1T3 飞扬的小鸟", 
            "content": "<p><b>UPD：这就是一篇老师布置的作业啊QAQ……神犇们就忽视我的存在吧（我真的不是在装弱啊QAQ我目前位置就参加过一年pj还是3=）</b></p><p>感觉自己晚生了这么几年……</p><p>第一次看题目的时候一脸懵逼——卧槽，这个怎么看怎么像是搜索啊，怎么数据范围这么大啊……</p><p>然后感觉如果拿来搜的话不是很有思路，因此还是往DP的方向去考虑</p><p>整理题意，我们可以发现以下两点：</p><ul><li>上升的时候在一个单位时间里面可以上升多次</li><li>下降的时候一个单位时间内只能下降一次</li></ul><p>现在让我们来回顾一下完全背包和01背包的定义（摘自《背包九讲》）：</p><ul><li>完全背包：有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </li><li>01背包：有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </li></ul><p>再仔细看一看，是不是感觉两者很像呢？于是我们得到了：</p><ul><li>上升的过程等价于一个完全背包，你需要确定出如果这个单位时间选择上升，那么最少需要的点击次数</li><li>下降过程等价于一个01背包，你需要确定出这个单位时间是否选择下降</li></ul><p>为了避免出现先下降后上升的2B局面，我们先做完全背包，再做01背包，当不能继续上升的时候，需要单独考虑。</p><p>但是，如果只是简单地把两个背包的板子打出来，我们会发现时间上吃不消，原因就是朴素的完全背包时间复杂度比较大，是 <img src=\"https://www.zhihu.com/equation?tex=O%28NM%5E%7B2%7D%29\" alt=\"O(NM^{2})\" eeimg=\"1\"/> 的。而二进制拆项在本题中似乎也不适用（如果有神犇觉得可以拆项，请无视这一句话），因为对于不同的高度你可以上升的次数是不同的，转化成背包问题，就是这一步可以选择的物品数量是会变化的。因此，我在网上翻看题解的时候接触到了下面这种优化方式：</p><ul><li>在dp[i][j]中选择k个情况，等价于在dp[i][j-w[i]]中选择k-1个情况（其中w[i]表示体积）。</li></ul><p>这个结论实际上是基于完全背包的朴素算法有很多计算上的重复而得来的。有了这样的优化以后，我们看一下状态的定义以及转移：</p><ul><li>定义状态f[i][j]表示飞到(i, j)这个点最少需要的点击次数</li><li>对于上升的情况，f[i][j] = min{f[i][j], min{f[i][j-x[i]], f[i-1][j-x[i]]} + 1}，这一步等价于完全背包</li><li>对于下降的情况，f[i][j] = min{f[i][j], f[i-1][j+y[i]]}，这一步等价于01背包</li><li>对于无法上升的情况，由于在m-x[i] ~ m这一段区域内的小鸟点击一次都可以到达顶端，所以循环做一次更新：f[i][m] = min{f[i][m], min{f[i][j], f[i-1][j]} + 1}，其中，max{1, m-x[i]}≤j≤m</li><li>其余的情况dp[i][j] = INF</li></ul><p>首先初始化每一列，然后读入的时候按照横坐标更新每一根管道的信息，这样可以省去排序工作。</p><p>在进行DP的时候，每飞过一根管道，就把tot+1，然后在所有的f[now][j]中更新一个最小的ans。如果最后ans = INF，那么就说明飞不过去了，能飞过的管道数量就是tot-1；否则，在最后输出ans。</p><p>最后，整个问题得以在 <img src=\"https://www.zhihu.com/equation?tex=O%28NM%29\" alt=\"O(NM)\" eeimg=\"1\"/> 的时间内得到解决。</p><p>P.S.这里有一个小技巧，可以根据i的奇偶性把f数组的第一维滚动掉，以节省空间。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 10100\n</span><span class=\"cp\">#define maxm 1010\n</span><span class=\"cp\">#define INF 1000000007\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">),</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">EOF</span> <span class=\"p\">:</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Pipe</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">;</span>\n\t<span class=\"kt\">bool</span> <span class=\"n\">existence</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">maxm</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"c1\">//freopen(&#34;in.txt&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Pipe</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">existence</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">nw</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> \n\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">j</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">h</span> <span class=\"o\">==</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">m</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">m</span><span class=\"p\">],</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">l</span> <span class=\"o\">||</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tube</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">existence</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">==</span> <span class=\"n\">INF</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;0</span><span class=\"se\">\\n</span><span class=\"s\">%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">tot</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;1</span><span class=\"se\">\\n</span><span class=\"s\">%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>最后：</p><p>国庆快乐！中秋快乐！</p><p>区间DP，树形DP，数位DP，概率DP，分数规划，线性规划，教你规划人生；平衡树，划分树，归并树，k-d树，主席树，树套树，替罪羊树，让你运筹帷幄。BFS，DFS，A*，记忆化，使你在大千世界里寻找难觅幸福；Bellman-Ford，Johnson，Floyd，Dijkstra，让你在匆匆人生中走上成功捷径。高斯消元，约当消元，帮你拨云见雾；AC自动机，后缀自动机，有限状态自动机，助您理清头绪。RMQ，LCA，让您节节高升；二项式反演，莫比乌斯反演，子集反演，快速傅里叶变换，帮您简化生活。Robert Tarjan、Burnside William、Donald Ervin Knuth、Alan Turing、David.A.Huffman、Arthur Cayley等名宿祝您在羊年风调雨顺，心想事成，早早进队，泡到妹(han)子！</p><p>最后，NOIP2017加油。</p><p>（复制于Hello, Luogu群用户：小哈里）</p>", 
            "topic": [
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "动态规划", 
                    "tagLink": "https://api.zhihu.com/topics/19660018"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28955853", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 3, 
            "title": "NOIP2016 Day2T3 愤怒的小鸟", 
            "content": "<p>愤怒的DP……</p><p>据说这道题目爆搜+剪枝可以过，然而我并不会写，所以只能考虑DP了……</p><p>和TSP问题还是有一点像的，我们要使用二进制来表示状态，dp[s]表示达到状态s最少需要几只小鸟，接下来考虑状态怎么定义，以下事实显而易见：</p><ul><li>对于第i只小鸟，他只有选和不选两种状态，因此我们可以用二进制保存</li><li>子集可以用二进制来枚举，其中如果某一位为1，表示选择了这个点</li></ul><p>我们用一个n位的二进制表示状态，如果某一位为1就表示这一只猪被打掉了。首先预处理出每两只猪构成的抛物线会经过哪些猪，然后就可以进行转移了：假设pre[i][j]表示把i、j两只猪连起来的抛物线可以经过哪些猪，然后枚举一个符合条件的最小的i（这和TSP是一样的），然后先用s ^ (1 &lt;&lt; i)更新s，接下来枚举其他符合要求的j，用s ^ (s &amp; pre[i][j])来更新s。</p><p>UOJ Extra Test WA了，LuoguOJ上AC。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define S 20\n</span><span class=\"cp\">#define eps 1e-6\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Point</span> <span class=\"p\">{</span>\n    <span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">S</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">S</span><span class=\"p\">][</span><span class=\"n\">S</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">S</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">pre_calc</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">double</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">));</span>\n                <span class=\"kt\">double</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">));</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">eps</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">eps</span><span class=\"p\">)</span>\n                            <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">|=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">));</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d %d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf %lf&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">);</span>\n        <span class=\"n\">pre_calc</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> \n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">!=</span> <span class=\"n\">i</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">))</span>\n                    <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&amp;</span> <span class=\"n\">pre</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">[(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28403887", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 1, 
            "title": "黑书计划 - ICPC2002 WF Balloons in a Box", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//icpcarchive.ecs.baylor.edu/index.php%3Foption%3Dcom_onlinejudge%26Itemid%3D8%26page%3Dshow_problem%26problem%3D475\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM-ICPC Live Archive</a></p><p>题目大意：一个盒子里有n(n≤6)个点，在每个点上放一个气球，气球会开始膨胀，问按照什么顺序放最后气球的体积最大。</p><p>思路：黑书的第一题。就是普通的枚举，6的排列最多只有720种，一个一个试就好了。每次检查一下是否膨胀到边缘或者是和其他气球接触，找到最大的半径，然后放一个气球。听上去很简单，然而我好像在不知所以的地方写渣被卡精度WA了30余发……后来重构代码，AC了……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;  </span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span> \n<span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">);</span>  \n\n<span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">];</span>  \n<span class=\"kt\">double</span> <span class=\"n\">X1</span><span class=\"p\">,</span> <span class=\"n\">Y1</span><span class=\"p\">,</span> <span class=\"n\">Z1</span><span class=\"p\">,</span> <span class=\"n\">X2</span><span class=\"p\">,</span> <span class=\"n\">Y2</span><span class=\"p\">,</span> <span class=\"n\">Z2</span><span class=\"p\">,</span> <span class=\"n\">maxV</span><span class=\"p\">;</span>  \n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">];</span>  \n<span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">];</span>   \n\n<span class=\"kr\">inline</span> <span class=\"kt\">double</span> <span class=\"nf\">getR</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">X1</span><span class=\"p\">),</span> <span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">X2</span><span class=\"p\">)),</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">Y1</span><span class=\"p\">),</span> <span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">Y2</span><span class=\"p\">)),</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">Z1</span><span class=\"p\">),</span> <span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">Z2</span><span class=\"p\">))));</span>  \n<span class=\"p\">}</span>  \n\n<span class=\"kr\">inline</span> <span class=\"kt\">double</span> <span class=\"nf\">dist</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">return</span> <span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">]));</span>  \n<span class=\"p\">}</span>  \n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">getV</span><span class=\"p\">()</span>  \n<span class=\"p\">{</span>  \n    <span class=\"kt\">double</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">getR</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>  \n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>  \n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">dist</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]);</span>  \n        <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"p\">;</span>  \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>  \n        <span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"mf\">4.0</span> <span class=\"o\">/</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]);</span>  \n    <span class=\"p\">}</span>  \n    <span class=\"n\">maxV</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxV</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>  \n<span class=\"p\">}</span>  \n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">cur</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">getV</span><span class=\"p\">();</span>  \n    <span class=\"k\">else</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>  \n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span> \n                <span class=\"n\">ty</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>  \n                <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  \n                <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>  \n                <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n            <span class=\"p\">}</span>  \n<span class=\"p\">}</span>  \n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>  \n<span class=\"p\">{</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">kase</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf%lf%lf&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">X1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Y1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Z1</span><span class=\"p\">);</span>  \n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf%lf%lf&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">X2</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Y2</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Z2</span><span class=\"p\">);</span>  \n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>  \n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf%lf%lf&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>  \n        <span class=\"n\">maxV</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>  \n        <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>  \n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Box %d: %.0lf</span><span class=\"se\">\\n\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">kase</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"n\">fabs</span><span class=\"p\">((</span><span class=\"n\">X1</span> <span class=\"o\">-</span> <span class=\"n\">X2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">Y1</span> <span class=\"o\">-</span> <span class=\"n\">Y2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">Z1</span> <span class=\"o\">-</span> <span class=\"n\">Z2</span><span class=\"p\">)))</span> <span class=\"o\">-</span> <span class=\"n\">maxV</span><span class=\"p\">));</span>  \n\n    <span class=\"p\">}</span>  \n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n<span class=\"p\">}</span>  \n</code></pre></div>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28289613", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "Beijing2006 狼抓兔子", 
            "content": "<p>好吧这是什么烂题目和烂描述……</p><p>看到的第一眼：最小割！！！我太强了一眼出题解！！！然后……嗯？数据范围不太对啊？？？不会捉……</p><p>然后看到了一种最小割转最短路的做法，表示很劲啊：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//wenku.baidu.com/view/8f1fde586edb6f1aff001f7d.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最大最小定理(平面图最小割 对偶图)周冬</a></p><p>然后就是给每个三角形区域缩点建图，统一用左上角的顶点进行编号（这一步贼烦），然后连边，建出来的对偶图是这样的：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-735ff52265d5cbdeadf9f217dbee928b_b.png\" data-rawwidth=\"1152\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"1152\" data-original=\"https://pic4.zhimg.com/v2-735ff52265d5cbdeadf9f217dbee928b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1152&#39; height=&#39;648&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1152\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1152\" data-original=\"https://pic4.zhimg.com/v2-735ff52265d5cbdeadf9f217dbee928b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-735ff52265d5cbdeadf9f217dbee928b_b.png\"/></figure><p>不要问我为什么这么鬼畜……然后我跑了一遍Dijkstra，？？？跑不出最短路？？？于是换成了SPFA……虽然不知道为什么Dijkstra会失效……可能是我打炸了吧……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 5000100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">SSSP</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n    <span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"n\">SSSP</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Edge</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">},</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Edge</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">},</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">SPFA</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">Q</span><span class=\"p\">;</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"mh\">0x3f</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n        <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n            <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                        <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">opt</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">o</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">SPFA</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": [
                {
                    "userName": "高级联", 
                    "userLink": "https://www.zhihu.com/people/58e747e47dcbad2643afba280bf791c6", 
                    "content": "<p>为什么右下角是m,n？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>什么意思</p>", 
                            "likes": 0, 
                            "replyToAuthor": "高级联"
                        }, 
                        {
                            "userName": "高级联", 
                            "userLink": "https://www.zhihu.com/people/58e747e47dcbad2643afba280bf791c6", 
                            "content": "<p>题目描述说</p><p>网格</p><p>左上角是1'1</p><p><br></p><p>右下角是m,n</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28147517", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 15, 
            "title": "差分约束", 
            "content": "<h2><b>0000 </b>概念</h2><p>过两天要讲了，先来看一波。。。</p><p>好吧，感觉思想不难理解，但是据说挺丧心病狂的……</p><p>我们首先来看什么叫做差分（好像是微积分的概念？？？）：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cleft%5C%7B%5Cbegin%7Bmatrix%7DX1+-+X2+%5Cleq+D1+%5C%5C+X2+-+X4+%5Cleq+D2+%5C%5C+X1+-+X5+%5Cleq+D3+%5C%5C+X4+-+X3+%5Cleq+D4+%5C%5C+...+%5Cend%7Bmatrix%7D%5Cright.\" alt=\"\\left\\{\\begin{matrix}X1 - X2 \\leq D1 \\\\ X2 - X4 \\leq D2 \\\\ X1 - X5 \\leq D3 \\\\ X4 - X3 \\leq D4 \\\\ ... \\end{matrix}\\right.\" eeimg=\"1\"/></p><ul><li><b>形如上述不等式组，均是两个未知数的差小于等于一个常数的不等式组称为差分约束系统（和线性规划好像有点像）</b></li></ul><p>该系统的解有两种情况：</p><ul><li><b>无解</b></li><li><b>有无数组解（同时加减常数）</b></li></ul><p>现在我们考虑如何解这个不等式组，大概的思想是利用图论里面的最短路径进行求解。</p><p>我们建一张图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-4777bccfc59c1bc86282f9a810d3696c_b.png\" data-rawwidth=\"391\" data-rawheight=\"406\" class=\"content_image\" width=\"391\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;391&#39; height=&#39;406&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"391\" data-rawheight=\"406\" class=\"content_image lazy\" width=\"391\" data-actualsrc=\"https://pic1.zhimg.com/v2-4777bccfc59c1bc86282f9a810d3696c_b.png\"/></figure><p>这个图就是上面给出的不等式组所建成的图，但是，源点不确定，最短路应该怎么跑呢？</p><ul><li><b>增加超级源</b></li></ul><p>我们增加一个源点0，从0向其他结点引一条权值为k的边（在通常情况下不妨令k = 0），然后在新图中跑一次最短路，这样，d[1]~d[n]就是原差分约束系统的一组解。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-89c091486e649f8b36a5b6439444df6e_b.png\" data-rawwidth=\"391\" data-rawheight=\"406\" class=\"content_image\" width=\"391\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;391&#39; height=&#39;406&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"391\" data-rawheight=\"406\" class=\"content_image lazy\" width=\"391\" data-actualsrc=\"https://pic3.zhimg.com/v2-89c091486e649f8b36a5b6439444df6e_b.png\"/></figure><p>大概很多人（包括我）都会奇怪这样的做法为什么是对的，这是因为最短路的基本公式：</p><ul><li><b>三角形不等式：d(v) &lt;= d(u) + dist&lt;u, v&gt;</b></li></ul><p>这个关系在我们建的图中同时也适用于解不等式。这样，最短路算法就在不同的情况下适用了。</p><h2><b>0001</b> 举个栗子：SCOI2011 糖果</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codevs.cn/problem/2404/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">(●-●) |2404 糖果 | CODEVS, 算法爱好者社区</a></p><p>小孩子的内心真是可怕……</p><p>这道题考虑差分约束，对于给出的五种关系，我们做出这样的处理：</p><ul><li>若A = B，则A-&gt;B = B-&gt;A = 0</li><li>若A &lt; B，则A-&gt;B = 1</li><li>若A ≤ B，则A-&gt;B = 0</li><li>若A &gt; B，则B-&gt;A = 1</li><li>若A ≥ B，则B-&gt;A = 0</li></ul><p>其中，2、4两种情况要求A ≠ B，因为不可能自己和自己有差值。</p><p>另外，因为不允许同时满足A &lt; B和A &gt; B，所以不能存在边权不为0的环（但是边权为0的环是允许的）。</p><p>然后从0向1~N引一条边权为1的边（每个小朋友都要有糖果），然后求最长路（就是初中数学解不等式组中的“大大取大”原则）即可。这里没有负权边，但是依然用SPFA，因为可以判断有没有环。</p><p>不过让人郁闷的是，为什么第六个点从1-&gt;N加边会超时，反过来就AC了……我卡了好久……求大佬解释。</p><p>上代码：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdlib&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 100100\n</span><span class=\"cp\"></span>\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">100000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">),</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">EOF</span> <span class=\"p\">:</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">),</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Differ</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"kt\">bool</span> <span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\t<span class=\"n\">Differ</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">diff</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">diff</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">SPFA</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">rear</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">front</span> <span class=\"o\">!=</span> <span class=\"n\">rear</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">front</span><span class=\"o\">++</span><span class=\"p\">];</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">front</span> <span class=\"o\">==</span> <span class=\"n\">maxn</span><span class=\"p\">)</span> <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">);</span>\n\t\t\t\t\t\t<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t\t\t\t\t<span class=\"p\">}</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t\t\t<span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t\t\t\t\t<span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">rear</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rear</span> <span class=\"o\">==</span> <span class=\"n\">maxn</span><span class=\"p\">)</span> <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t\t<span class=\"p\">}</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">opt</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">K</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">case</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">case</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">==</span> <span class=\"n\">B</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">case</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">case</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">==</span> <span class=\"n\">B</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">case</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">SPFA</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": [
                {
                    "userName": "BotHibiki", 
                    "userLink": "https://www.zhihu.com/people/c2d614d4cb52af229834ce9bc040a138", 
                    "content": "这图好丑啊（", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "monkeyxt", 
                            "userLink": "https://www.zhihu.com/people/32ea385d1308a39d92a488d9ed55b06e", 
                            "content": "<p>这已经不是丑了。。。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "BotHibiki"
                        }
                    ]
                }, 
                {
                    "userName": "马含章", 
                    "userLink": "https://www.zhihu.com/people/50bd622d5591d60f5db8193e852d947b", 
                    "content": "<p>写的海星，就是灵魂画图...希望可以更新一波图片</p><a class=\"comment_sticker\" href=\"https://pic3.zhimg.com/v2-744accde1bb3117fc74e1af0e0ac496e.gif\" data-width=\"\" data-height=\"\">[小建议]</a>", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28008184", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "旷野大AK题解", 
            "content": "<h2>旷野大WA……好像无人AK……题目还是很有意思的……下面是题解，祝大家食用愉快！</h2><figure><noscript><img src=\"https://pic2.zhimg.com/v2-9245109133c0c07b4b5e37ce4681baf1_b.png\" data-rawwidth=\"1542\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1542\" data-original=\"https://pic2.zhimg.com/v2-9245109133c0c07b4b5e37ce4681baf1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1542&#39; height=&#39;794&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1542\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1542\" data-original=\"https://pic2.zhimg.com/v2-9245109133c0c07b4b5e37ce4681baf1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9245109133c0c07b4b5e37ce4681baf1_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>A.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/437/A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 437A - Codeforces</a></p><p>题目是vfk出的，题解也是vfk写的</p><blockquote>We enumerate each choice <i>i</i>, and then enumerate another choice <i>j</i> (<i>j</i> ≠ <i>i</i>), let <i>cnt</i> = 0 at first, if choice <i>j</i> is twice longer than <i>i</i> let <i>cnt</i> = <i>cnt</i> + 1, if choice <i>j</i> is twice shorter than <i>i</i> let <i>cnt</i> = <i>cnt</i> - 1. So <i>i</i> is great if and only if <i>cnt</i> = 3 or <i>cnt</i> =  - 3. If there is exactly one great choice, output it, otherwise output C.</blockquote><h2>B.</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//icpcarchive.ecs.baylor.edu/index.php%3Foption%3Dcom_onlinejudge%26Itemid%3D8%26page%3Dshow_problem%26problem%3D3187\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM-ICPC Live Archive</a></p><p>好像这题巨坑……</p><blockquote>可以先Floyed传递一次闭包，然后构建一张新图，当且仅当G[u][v] = G[v][u] = 1的时候才在u和v之间连一条边，之后直接dfs求一次连通分量</blockquote><h2>C.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/811/C\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 811C - Codeforces</a></p><p>这题好像被水了……旷野大开黑。这道题你们找最小和最大的fst、lst时候为什么不用min和max……看代码看得我……这道题上代码好了……</p><blockquote>Let&#39;s precalc for each <i>x</i> it&#39;s <i>fr[x]</i> and <i>ls[x]</i> — it&#39;s leftmost and rightmost occurrences in the array respectively. Now for each range [<i>l</i>, <i>r</i>] we can check, if it can be a separate train carriage, just checking for each <i>ai</i> (<i>l</i> ≤ <i>i</i> ≤ <i>r</i>), that <i>fr[ai]</i> and <i>ls[ai]</i> are also in this range. Now let&#39;s define <i>dpi</i> as the answer to the problem for <i>i</i> first people. To update <i>dp</i> we can make two transitions: Assume, that there was such train carriage, that finished at position <i>i</i>. Then iterate it&#39;s start from right to left, also maintaining maximal <i>ls</i>, minimal <i>fr</i>and xor of distinct codes <i>cur</i>. If current range [<i>j</i>, <i>i</i>] is ok for forming the train carriage, update <i>dp[i]</i> with value <i>dp[j</i> - 1] + <i>cur</i>. If there wasn&#39;t such train carriage, then last element didn&#39;t belong to any train carriage, so we can update <i>dp[i]</i> with value <i>dp[i</i> - 1.]</blockquote><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 5010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]])</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]])</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]],</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]];</span> <span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n\t\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]),</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]])</span> <span class=\"n\">cur</span> <span class=\"o\">^=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">R</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">cur</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>D.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/811/D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 811D - Codeforces</a></p><p>直接bfs一条可行解出来，然后根据反馈判断就行了，出题人的题解：</p><blockquote>It&#39;s clear, that to reach finish without stepping into dangerous cells we have to know, whether our buttons are broken. Firstly, let&#39;s find any route to the finish using bfs / dfs. At the first moment of this route, when we have to go down, we would find out, if our button is broken, because we are still at the first row of the matrix and if the button is broken, we just won&#39;t move anywhere. Similarly for left and right pair of buttons. After that we found out, that button was broken, we can change in our route moves to opposite ones.</blockquote><h2>E.</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//icpcarchive.ecs.baylor.edu/index.php%3Foption%3Dcom_onlinejudge%26Itemid%3D8%26page%3Dshow_problem%26problem%3D1939\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM-ICPC Live Archive</a></p><p>分治算法：最大连续和要么完全在左半区间，要么完全在右半区间，要么跨越终点。</p><p>但是即使是每一段区间都分治一次，时间上也无法承受。因此考虑数据结构维护。</p><p>线段树。我们让每个结点都维护三个量：</p><ul><li>max_sub：满足题意的(x, y)</li><li>max_pre：前缀最大和的终点</li><li>max_suf：后缀最大和的起点</li></ul><p>然后利用前缀和建树，每次更新的时候：</p><p>max_sub(a,b)=max(max_sub(a,m),max(max_sub(m+1,b),max_suffix(a,m)+max_preffix(m+1,b)));</p><p>max_pre(a,b)=max(max_preffix(a,m),max_preffix(m+1,b)+sum[m]-sum[a-1]);</p><p>max_suf(a,b)=max(max_suffix(m+1,b),max_suffix(a,m)+sum[b]-sum[m]);</p><p>好像没人A这题，放个代码吧（原题有多组输入，代码只能回答一组输入并且各式不同）：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 500100 \n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ll</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">interval</span><span class=\"p\">;</span>\n\n<span class=\"n\">ll</span> <span class=\"n\">pre_sum</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">sigma</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">pre_sum</span><span class=\"p\">[</span><span class=\"n\">R</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">pre_sum</span><span class=\"p\">[</span><span class=\"n\">L</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">ll</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">interval</span> <span class=\"n\">inter</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">sigma</span><span class=\"p\">(</span><span class=\"n\">inter</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">inter</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"n\">interval</span> <span class=\"nf\">relax</span><span class=\"p\">(</span><span class=\"n\">interval</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">interval</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">Segment_Tree</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">Seg_Node</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">max_pre</span><span class=\"p\">,</span> <span class=\"n\">max_suf</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">interval</span> <span class=\"n\">max_sub</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">maintain</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"c1\">//max_pre\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">ll</span> <span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">sigma</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">),</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">sigma</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_pre</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">==</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">&gt;</span> <span class=\"n\">v2</span> <span class=\"o\">?</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"nl\">max_pre</span> <span class=\"p\">:</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">);</span>\n\t\t<span class=\"c1\">//max_suf\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">sigma</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">),</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">sigma</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_suf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">==</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">&gt;</span> <span class=\"n\">v2</span> <span class=\"o\">?</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"nl\">max_suf</span> <span class=\"p\">:</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">);</span>\n\t\t<span class=\"c1\">//max_sub\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_sub</span> <span class=\"o\">=</span> <span class=\"n\">relax</span><span class=\"p\">(</span><span class=\"n\">relax</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_sub</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_sub</span><span class=\"p\">),</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_pre</span> <span class=\"o\">=</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_suf</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_sub</span> <span class=\"o\">=</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"n\">interval</span> <span class=\"nf\">query_pre</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_pre</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">);</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query_pre</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">interval</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">query_pre</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">relax</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">].</span><span class=\"n\">max_pre</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"n\">interval</span> <span class=\"nf\">query_suf</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_suf</span> <span class=\"o\">&gt;=</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query_suf</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">interval</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">query_suf</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">relax</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">].</span><span class=\"n\">max_suf</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"n\">interval</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">max_sub</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">interval</span> <span class=\"n\">tmp1</span> <span class=\"o\">=</span> <span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"n\">query_suf</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">).</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">query_pre</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">).</span><span class=\"n\">second</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">interval</span> <span class=\"n\">tmp2</span> <span class=\"o\">=</span> <span class=\"n\">relax</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">),</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">));</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">relax</span><span class=\"p\">(</span><span class=\"n\">tmp1</span><span class=\"p\">,</span> <span class=\"n\">tmp2</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Segment_Tree</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ai</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Q</span><span class=\"p\">);</span>\n\t<span class=\"n\">pre_sum</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ai</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">pre_sum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pre_sum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">ai</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">Q</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">interval</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": [
                {
                    "userName": "北溟有鱼", 
                    "userLink": "https://www.zhihu.com/people/077b2773b51130ed5c2bf931a9a3f224", 
                    "content": "<p>题交不上啊- -，一直跟我说密码错误。。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "我也不知道为什么会这样啊QAQ我很早就改成公开了啊", 
                            "likes": 0, 
                            "replyToAuthor": "北溟有鱼"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27963926", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 4, 
            "title": "ZJUT姗姗杯 Round 5 搬运题解记", 
            "content": "<p><a class=\"member_mention\" href=\"https://www.zhihu.com/people/cf6411aafb3223ddbe2034db84e68f81\" data-hash=\"cf6411aafb3223ddbe2034db84e68f81\" data-hovercard=\"p$b$cf6411aafb3223ddbe2034db84e68f81\">@姑苏燕</a> 之前在打Round 2题解的时候给我安利了这个比赛，然后去看了一眼R2的题，惨不忍睹，BFS专场，各种板子题……这一场的题目质量高了许多，还是很资瓷的。不过下次能不能有中文题面……还有这种都是CF上的题第一眼做不来平时自己做题会仔细想，但是比赛的时候就是冲着屠榜去的心态完全不一样好吗……直接变成题解搬运工了……</p><h2>A.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/217/A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 217A - Codeforces</a></p><p>题目大意：加最少的点使得原图强连通</p><p>题解：直接求一遍连通分量个数，然后-1即可，这里用的是并查集</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 110\n</span><span class=\"cp\"></span>\n<span class=\"k\">struct</span> <span class=\"n\">Pos</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"mi\">1010</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">||</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">cnt</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>B.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/356/A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 356A - Codeforces</a></p><p>题意：告诉你在某个区间内的数除了x都会被删除，然后问你每个数被删除的时候哪个数是没被删除的，最后留下的数输出0</p><p>题解：最容易想到的是n^2的暴力，然后就想到用std::set去维护，这样就可以二分查找把复杂度降到nlogn了，成功水过……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;set&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 300100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"n\">set</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"n\">set</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">,</span> <span class=\"n\">del</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">it</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">it</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">del</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">tot</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">del</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%c&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"sc\">&#39;\\n&#39;</span> <span class=\"o\">:</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>C.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/514/D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 514D - Codeforces</a></p><p>题意：一个n*m的矩阵，你可以选择一个数-1，问你最少减几次可以把一段最大连续的区间变成0</p><p>题解：这道题真的没有想法，去问 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/53a642c2d06d68a28a0b1550d1613bcc\" data-hash=\"53a642c2d06d68a28a0b1550d1613bcc\" data-hovercard=\"p$b$53a642c2d06d68a28a0b1550d1613bcc\">@g1n0st</a> ，结果他老人家在同学家里浪根本没时间看题，于是去看出题人的题解，大概的意思是每一段的答案就是所有cnt[j][i]里的最大值，然后用两个指针和一个队列维护，mn的，听起来是类似单调队列的东西，但是想了想并打不来，然后百度一波，发现原来我国选手都是用二分答案+线段树/RMQ做的，于是也打了一个二分+RMQ，%%%出题人</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 400100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">process</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">RMQ</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">L</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">R</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">tmp</span> <span class=\"o\">+=</span> <span class=\"n\">RMQ</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">M</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"n\">process</span><span class=\"p\">();</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">))</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%c&#34;</span><span class=\"p\">,</span> <span class=\"n\">RMQ</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">res</span><span class=\"p\">],</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">res</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"sc\">&#39;\\n&#39;</span> <span class=\"o\">:</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>D.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/698/B\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 698B - Codeforces</a></p><p>题意：给你一张图，你可以改变一些结点的前驱结点，问你至少改几次可以把原图改成一棵树</p><p>题解：又是一道没想法的题目，去万能的uoj群里（%%%vfk）问，某大佬一秒钟口胡出题解——kruskal，惊呆了。其实也不完全是Kruskal，但还是并查集，把环拆掉，找到单独的结点，然后并查集合并一下就可以了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 200100\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%c&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"sc\">&#39;\\n&#39;</span> <span class=\"o\">:</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>E.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/734/E\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 734E - Codeforces</a></p><p>题意：给你一棵二染色的树，你可以把一个点相邻的所有颜色相同的点改成另一种颜色，问你最少改几次可以全部变成相同颜色</p><p>题解：题解搬运工又来了。首先自己想到了把相同的颜色缩点，这个是必然的，但是之后要怎么做却完全没有头绪。然后出题人表示（动手实践一下）就能发现是直径/2，呵呵……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 200100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">col</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">bel</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">cur</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">col</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bel</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">dfs1</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">cur</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">fa</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">mx1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mx2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">dfs2</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">mx2</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">mx2</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mx2</span> <span class=\"o\">&gt;</span> <span class=\"n\">mx1</span><span class=\"p\">)</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">mx1</span><span class=\"p\">,</span> <span class=\"n\">mx2</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mx1</span><span class=\"p\">;</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">mx1</span> <span class=\"o\">+</span> <span class=\"n\">mx2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">col</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">dfs1</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">++</span><span class=\"n\">cc</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bel</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">bel</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">bel</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">bel</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"n\">dfs2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>F.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/552/D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 552D - Codeforces</a></p><p>题意：给你若干个点，问你可以构成多少三角形</p><p>题解：肯定是组合数+容斥啊，好烦啊不想打……诶，n只有300，打个n^3暴力吧！就这样水过了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 3010\n</span><span class=\"cp\"></span>\n<span class=\"k\">struct</span> <span class=\"n\">Point</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\t\t\t\t\t<span class=\"o\">++</span><span class=\"n\">ans</span><span class=\"p\">;</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>G.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/547/B\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 547B - Codeforces</a></p><p>题意：给n个数，问连续区间长度为1,2,3,4,....n 所对应的区间长度最小值中的最大值是多少</p><p>题解：跟着出题人涨姿势了，不是说不会单调栈，但是真的没想到用</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stack&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 200100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">st</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%c&#34;</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"sc\">&#39;\\n&#39;</span> <span class=\"o\">:</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>H.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//acm.hdu.edu.cn/showproblem.php%3Fpid%3D1698\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 1698</a></p><p>题意：线段树区间set</p><p>题解：线段树区间set</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 1000100\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">);</span>\n\t<span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">tag</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">tag</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">l</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">R</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">tagv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">kase</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"c1\">//freopen(&#34;test.txt&#34;, &#34;w&#34;, stdout);\n</span><span class=\"c1\"></span>\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Case %d: The total value of the hook is %d.</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">kase</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>I.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//acm.hdu.edu.cn/showproblem.php%3Fpid%3D5443\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 5443</a></p><p>题意：RMQ</p><p>题解：RMQ，我说怎么一上来就有人爆了I抢了我的全场First Blood……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 1010\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">15</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">process</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">RMQ</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">L</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">R</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span>\n\t\t<span class=\"n\">process</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">RMQ</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">));</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>J.</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/723/E\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 723E - Codeforces</a></p><p>题意：n个点m条边的无向连通图，没有自环没有重边，我们要把所有点都定向，希望使得尽可能多的点拥有相同的入度与出度，让你输出满足这个条件的最大点数和每条边最后的定向 </p><p>题解：个人认为本场比赛质量最高的题，第一想法是度数是奇数的点不考虑，然后欧拉回路一波，交一发结果wa了。然后发现叫你规划路线怎么能不考虑啊……加个超级汇t&#39;，让所有度数是奇数的点指向t&#39;，这样他们的度数就是偶数了，再跑欧拉回路就行了，注意别输出自己加的边。然后跟着ljh长了一发姿势，直接度数是奇数的点跑一遍欧拉回路，然后剩下的点跑一遍欧拉回路，就可以了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 210\n</span><span class=\"cp\">#define maxm 40100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">from</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"p\">],</span> <span class=\"n\">to</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">from</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t\t\t<span class=\"o\">--</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"o\">--</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"c1\">//freopen(&#34;test.txt&#34;, &#34;w&#34;, stdout);\n</span><span class=\"c1\"></span>\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">));</span> <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">));</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">][</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"o\">++</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"o\">++</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">--</span><span class=\"n\">ans</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">tot</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">from</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">to</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>纪念一下屠（搬）榜（运）经（题）历（解）：</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-056d00b01d060e5f83fe46b1bdac9b10_b.png\" data-rawwidth=\"1181\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pic1.zhimg.com/v2-056d00b01d060e5f83fe46b1bdac9b10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1181&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1181\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1181\" data-original=\"https://pic1.zhimg.com/v2-056d00b01d060e5f83fe46b1bdac9b10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-056d00b01d060e5f83fe46b1bdac9b10_b.png\"/></figure><p>感觉大部分题还是没有一眼出题解，然后打比赛就不想想了直接搜题解……这样不好不好……听说一血要讲题，然而都被我抢了……下次我这种蒟蒻再也不干这样的事了……</p><p>不如我自己创一个“旷野大AK”的比赛来补偿一下好了……</p>", 
            "topic": [
                {
                    "tag": "ACM", 
                    "tagLink": "https://api.zhihu.com/topics/20061313"
                }, 
                {
                    "tag": "游记", 
                    "tagLink": "https://api.zhihu.com/topics/19553456"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": [
                {
                    "userName": "chendl111", 
                    "userLink": "https://www.zhihu.com/people/a9377efe96634f129061694ec4a3691e", 
                    "content": "ljh！", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "看了他的博客", 
                            "likes": 0, 
                            "replyToAuthor": "chendl111"
                        }
                    ]
                }, 
                {
                    "userName": "Mike He", 
                    "userLink": "https://www.zhihu.com/people/1e72de124ee0fe8fd83bd121ce0f7b00", 
                    "content": "B题代码....貌似是A题的？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "我的锅……", 
                            "likes": 0, 
                            "replyToAuthor": "Mike He"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>已更正</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Mike He"
                        }
                    ]
                }, 
                {
                    "userName": "北溟有鱼", 
                    "userLink": "https://www.zhihu.com/people/077b2773b51130ed5c2bf931a9a3f224", 
                    "content": "场场ak岂不是区预赛稳银？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "我哪有场场ak啊QAQ我高中啊QAQ", 
                            "likes": 0, 
                            "replyToAuthor": "北溟有鱼"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27843042", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 13, 
            "title": "NOIP2015 运输计划 【LCA + 二分 + 树上差分】", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=http%3A//uoj.ac/problem/150\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Universal Online Judge</a></p><p>这道题是要计算距离的，这当然直接想到LCA。接下来要求的是最小值最大，自然而然就会想到二分。那么问题来了：二分以后应该怎么判断呢？</p><p>路径求交。非常容易想到的结论是，我们修改的边应该在路径的交上。那么，应该怎么求这个交呢？这里就要用到差分的思想。开一个差分数组，每次把cnt[s]+1, cnt[t]-1, cnt[lca(s, t)]+2, 然后用类似于懒标记传递的方式向上维护，最后次数是m的就是交了。</p><p>二分的时候枚举所有比二分值大的距离，然后求交，就可以了。</p><p>时间复杂度的话倍增预处理nlogn，查询logn，二分logn，差分n，因此是O((n+m)logn)的。在uoj（听说包括NOIP2015用这种方法的）被卡成95分，但是在bzoj上过了。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 300100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">maxv</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">),</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">EOF</span> <span class=\"p\">:</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Plan</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">lca</span><span class=\"p\">,</span> <span class=\"n\">dis</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">),</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Graph</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">top</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">20</span><span class=\"p\">];</span>\n\t<span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">+</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">pa</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">pa</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">top</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">process</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t\t\t\t\t<span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">LCA</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">_log</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_log</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span> <span class=\"o\">++</span><span class=\"n\">_log</span><span class=\"p\">);</span>\n\t\t<span class=\"o\">--</span><span class=\"n\">_log</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">_log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">_log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n\t\t\t\t<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">differ</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">son</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">son</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">differ</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">opt</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dec</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">dis</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"o\">++</span><span class=\"n\">_log</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">dec</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dec</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">dis</span> <span class=\"o\">-</span> <span class=\"n\">M</span><span class=\"p\">);</span>\n\t\t\t<span class=\"o\">++</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">],</span> <span class=\"o\">++</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">t</span><span class=\"p\">],</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lca</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">differ</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_log</span> <span class=\"o\">==</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]].</span><span class=\"n\">w</span> <span class=\"o\">&gt;=</span> <span class=\"n\">dec</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">),</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">process</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lca</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">LCA</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">dis</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lca</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">maxv</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxv</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">dis</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">maxv</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">))</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }
            ], 
            "comments": [
                {
                    "userName": "李狗蛋", 
                    "userLink": "https://www.zhihu.com/people/70a53bfc9bbffb83aa137f20d859f87b", 
                    "content": "现在题解写在知乎里了？", 
                    "likes": 3, 
                    "childComments": []
                }, 
                {
                    "userName": "zcysky", 
                    "userLink": "https://www.zhihu.com/people/0e44ad6ebf6645644db7c5a55a4c196a", 
                    "content": "这题我当时写的树剖2333", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "老哥小李", 
                    "userLink": "https://www.zhihu.com/people/7f25d138f4f21021f1d28f3ed9e3b387", 
                    "content": "<p>破乎成了一个奇怪的地方。</p><p></p>", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "nancheng58", 
                    "userLink": "https://www.zhihu.com/people/98fedfbd647bbccb50b10c5243cdcae4", 
                    "content": "有创意哎，把题解写在知乎里还是第一次见.", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "本来是写数据结构和算法的，后来懒得去开其他博客了，干脆一起写知乎里了", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>知乎博客 /斜眼</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "John", 
                    "userLink": "https://www.zhihu.com/people/ec366ee4f02360e62a90a2b9f77597f6", 
                    "content": "还有这种操作", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27791420", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 1, 
            "title": "LA 6145 Version Controlled IDE", 
            "content": "<p>这道题目其实是可持久化Treap的题目，不知道的可以去看我这篇专栏：<a href=\"https://zhuanlan.zhihu.com/p/26003598\" class=\"internal\">Treap以及名次树 - 知乎专栏</a></p><p>但是打起来很烦啊，而且还要多写copy啊count啊等新操作，懒。。。然后就发现STL扩展里的丧心病狂的容器——rope，基于可持久化平衡树的块状链表，然后就变成裸题了……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ext/rope&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">__gnu_cxx</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">opt</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"mi\">210</span><span class=\"p\">];</span>\n<span class=\"n\">crope</span> <span class=\"n\">ro</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">[</span><span class=\"mi\">50100</span><span class=\"p\">],</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">opt</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">opt</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%s&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">p</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">ro</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">version</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ro</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">opt</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">p</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">ro</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">version</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ro</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">v</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">-=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">version</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">].</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">d</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"sc\">&#39;c&#39;</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">tmp</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "ACM 竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19644215"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27364504", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 1, 
            "title": "qwb与学姐", 
            "content": "<a href=\"https://link.zhihu.com/?target=http%3A//115.231.222.240%3A8081/JudgeOnline/problem.php%3Fcid%3D1005%26pid%3D7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qwb与学姐</a><p>之前和<a href=\"https://www.zhihu.com/people/cf6411aafb3223ddbe2034db84e68f81\" data-hash=\"cf6411aafb3223ddbe2034db84e68f81\" class=\"member_mention\" data-editable=\"true\" data-title=\"@姑苏燕\" data-hovercard=\"p$b$cf6411aafb3223ddbe2034db84e68f81\">@姑苏燕</a>讨论过一下，感觉你的写法还是有一些复杂，并没有看出来有logn的倍增（虽然不知道为什么跑起来还挺快的）。</p><p>这是一道Uva的原题啊，MST+LCA求瓶颈路。只不过换成了最大生成树而已。预处理两个数组anc和mincost，表示i的2^j级祖先以及i和2^j级祖先之间的最小花费。然后倍增展开，一边展开一边更新即可。</p><p>AC代码（624ms）：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 50100\n</span><span class=\"cp\">#define maxm 200100\n</span><span class=\"cp\">#define INF 1000000007\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">_to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">_nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">_w</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">_to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">_nxt</span><span class=\"p\">),</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">_w</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">LCA</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">20</span><span class=\"p\">];</span>\n\t<span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t<span class=\"n\">LCA</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">pa</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">pa</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">process</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t<span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">ance</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t\t\t\t<span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">ance</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t\t\t\t<span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">ance</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">,</span> <span class=\"n\">_log</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_log</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span> <span class=\"o\">++</span><span class=\"n\">_log</span><span class=\"p\">);</span>\n\t\t<span class=\"o\">--</span><span class=\"n\">_log</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">_log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t\t<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">_log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]);</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">mincost</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]);</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]);</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">solver</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"p\">],</span> <span class=\"n\">pa</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">maxm</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">pa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">pa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">pa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">cmp</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">kruskal</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">pa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">+</span><span class=\"n\">m</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]),</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">pa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]),</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"n\">kruskal</span><span class=\"p\">();</span>\n\t<span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> \n\t<span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">process</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>我那个方法应该是建了个最大生成树，控制树高，不用倍增法直接暴力lca ，因为并查集是安秩合并，所以跑起来还挺快的。但是看上去代码比较乱，还是你的写法好，思路清晰 </p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>对的，我也想过你的方法了。不过感觉还是用倍增打起来清晰一点，而且思维上也比较简单</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27241297", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 13, 
            "title": "树状数组&&线段树", 
            "content": "<h2><b>一个问题</b></h2><p>请你设计一个数据结构，支持：<br/></p><ul><li>修改A[p] = v</li><li>计算sum{A[L], A[L+1], ..., A[R]}</li></ul><br/>最直接的思想当然是直接上数组，O(1)的修改，O(n)的查询。但是，如果每次查询都是n，那时间上肯定是吃不消的。因此我们考虑优化。<ul><li><b>前缀和（prefix sum）：对于i，i的前缀指的是1...i。那么i的前缀和指的就是前i项的和</b></li></ul><br/>因此，有了前缀和，我们可以快速维护区间和了。举个例子，对于数列，它的求和公式就是前缀和，因此Sn - Sn-1 = An。而对于上面的问题，[l, r]的和事实上等价于Sr - Sl-1（如果是减去Sl的话Al这一项不见了）。有了这个性质，我们可以快速得到区间和。但是因为有修改操作，我们仍然不能直接维护前缀和，因此，需要找一个方法。<h2><b>树状数组（Binary Indexed Tree）</b></h2><p>我们可以发现，对于任何点，根据前缀和的定义，修改它只会影响它的后缀。因此我们只要想方法维护后缀就行了。</p><ul><li>lowbit(x)，表示x的二进制形式最右边的1所对应的权值。</li><li>在计算机反码补码的规定中，x和-x（相反数）的最右边的1的位置是一样的，因此，lowbit(x) = x &amp; -x</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">lowbit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>有了lowbit之后，我们可以开一个辅助数组C，Ci维护Ai-lowbit(i)+1 ~ Ai这一段前缀。列出C的结构，我们发现了下标和实际表示的数据构成了如下形式：</p><p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-50d87959bb9c9b20dec60c6713301800_b.jpg\" data-rawwidth=\"490\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic1.zhimg.com/v2-50d87959bb9c9b20dec60c6713301800_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;490&#39; height=&#39;374&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"490\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"490\" data-original=\"https://pic1.zhimg.com/v2-50d87959bb9c9b20dec60c6713301800_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-50d87959bb9c9b20dec60c6713301800_b.jpg\"/></figure>其中，纵轴是lowbit，分别为0、1、2、4、8（部分），横轴是原始数组的下标。也可以看刘汝佳老师蓝书上的图片。</p><p>根据定义，维护后缀就是把x加上lowbit(x)，查询前缀就是x减去lowbit(x)。<br/></p><ul><li>单点修改</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>区间和查询</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">];</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>恩，就这样结束了。。。树状数组的每个操作都是O(logn)的，建树需要更新n次，因此总时间复杂度是O(nlogn)的。</p><ul><li>最后，再强调一遍，只有在满足区间减法的时候才能用树状数组啊！！！<br/></li></ul><br/><h2><b>另一个问题</b></h2><p>请设计一种数据结构，支持：</p><ul><li>修改A[p] = v</li><li>查询min{A[L], A[L+1], ..., A[R]}</li></ul><br/>mengbier...<p>这个东西树状数组就不可用了啊……因为区间最值不仅可能在后缀里，也有可能在前缀里。因此我们需要能同时维护这两者的数据结构。</p><h2><b>线段树（Segment Tree, a.k.a Interval Tree)</b></h2><p>假设我们有线段[1, n]，那么我们可以把它分成[1, mid]以及[mid+1, n]两部分，不断划分下去我们可以得到每个点的信息。看起来是这样的：<figure><noscript><img src=\"https://pic4.zhimg.com/v2-181930750aa3e51ac7823ac8a77cac3b_b.jpg\" data-rawwidth=\"492\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic4.zhimg.com/v2-181930750aa3e51ac7823ac8a77cac3b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;297&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"492\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic4.zhimg.com/v2-181930750aa3e51ac7823ac8a77cac3b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-181930750aa3e51ac7823ac8a77cac3b_b.jpg\"/></figure></p><p>我们让minv[o]表示某一段的最小值，那么就可以通过拆分合并区间来维护了。<br/></p><ul><li>可以证明任意区间可以分解成不超过2h个不相交区间的并，其中h是线段树的高度。<br/></li></ul><br/><p>这里因为我是用刘汝佳老师的模板的，听说常数偏大。。。</p><ul><li>单点修改</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"c1\">//修改A[p] = v\n</span><span class=\"c1\"></span><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"c1\">// 叶结点，直接更新minv\n</span><span class=\"c1\"></span>\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// 先递归更新左子树或右子树\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"c1\">// 然后计算本结点的minv\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>区间查询</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qR</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">R</span> <span class=\"o\">&lt;=</span> <span class=\"n\">qR</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span> <span class=\"c1\">// 当前结点完全包含在查询区间内\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">));</span> <span class=\"c1\">// 往左走\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">M</span> <span class=\"o\">&lt;</span> <span class=\"n\">qR</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">));</span> <span class=\"c1\">// 往右走\n</span><span class=\"c1\"></span>\t<span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>建树？直接把单点修改变成一个build就可以了。</p><h2><b>另另一个问题</b></h2><p>请设计一种数据结构，支持：</p><br/><ul><li>把A[L] ~ A[R]增加v</li><li>查询sum{A[L], A[L+1], ..., A[R]}</li><li>min{A[L], A[L+1], ..., A[R]}, max{A[L], A[L+1], ..., A[R]}</li></ul><br/>诶！！！看起来好像树状数组！！！可惜因为是修改区间，所以要维护前缀和的前缀和，那将会是两个树状数组套起来，过分复杂。有没有简单一点的呢？有的。还是线段树。但是对于每个点，我们要打个add标记，表示执行过区间加法。因此需要维护节点信息。每个节点需要维护sumv、minv、maxv，还要考虑add操作，因此维护操作看起来是这样的：<ul><li>维护结点信息<br/></li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">maintain</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">//根据需要设置不同的值\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">&gt;</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">],</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">],</span> <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>注意，这里的sumv[o]表示的是仅仅只执行o结点以及它的子孙结点的add操作后的区间和。上面讲的拆分区间的结论仍然适用。比如执行两个操作add(1, 7, 5)和add(3, 6, 2)后，区间[5, 6]等价于执行了一个add(7)的操作。这里没有采用懒标记传递，而是开一个addv数组进行标记。<ul><li>区间add<br/></li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">qR</span> <span class=\"o\">&gt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 递归边界\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"c1\">// 累加边界的add值\n</span><span class=\"c1\"></span>\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">qR</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span> <span class=\"c1\">// 递归结束前重新计算本结点的附加信息\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p>查询的时候也很简单，如果待查询的区间完整地包含了当前区间，就直接更新，否则，就递归更新。</p><ul><li>区间查询<br/></li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">qR</span> <span class=\"o\">&gt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 递归边界：用边界区间的附加信息更新答案\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">_sum</span> <span class=\"o\">+=</span> <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">add</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">R</span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">_min</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"p\">,</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">add</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">_max</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">_max</span><span class=\"p\">,</span> <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">add</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"c1\">// 递归统计，累加参数add\n</span><span class=\"c1\"></span>\t\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"o\">+</span><span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">qR</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"o\">+</span><span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在查询的时候执行一次query(1, 1, n, queryL, queryR, 0)就可以了。</p><h2><b>已经绕晕了？</b></h2><p>请设计一种数据结构，支持：</p><ul><li>把A[L] ~ A[R]全部置为v</li><li>查询sum{A[L], A[L+1], ..., A[R]}</li><li>min{A[L], A[L+1], ..., A[R]}, max{A[L], A[L+1], ..., A[R]}</li></ul><br/>容易想到把set操作分解。但是有一个问题，set操作和add操作不同，执行先后对结果是有影响的。换句话说，我们必须要规定set操作按顺序执行。因此我们需要进行标记传递，使得任意两个操作不存在子孙后代关系。<ul><li>维护</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">maintain</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">&gt;</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n        <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">];</span>  \n        <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">],</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]);</span>  \n        <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">],</span> <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]);</span>  \n    <span class=\"p\">}</span>  \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n        <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span> \n        <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span> \n</code></pre></div><ul><li>懒标记传递<br/></li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">pushdown</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//有标记再传递\n</span><span class=\"c1\"></span>        <span class=\"n\">srtv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n        <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>有了这个传递函数以后，就可以写新的update操作了</p><ul><li>区间set<br/></li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">qR</span> <span class=\"o\">&gt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 标记修改  \n</span><span class=\"c1\"></span>        <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">;</span>  \n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>  \n        <span class=\"n\">pushdown</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span>  \n        <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>  \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span> <span class=\"k\">else</span> <span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">lc</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">);</span>  \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qR</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span> <span class=\"k\">else</span> <span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>  \n    <span class=\"p\">}</span>  \n    <span class=\"n\">maintain</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">);</span>  \n<span class=\"p\">}</span>  \n</code></pre></div><p>在查询的时候碰到set操作先处理set，然后再分别处理。</p><ul><li>区间查询<br/></li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">qR</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 递归边界1：有set标记  \n</span><span class=\"c1\"></span>        <span class=\"n\">_sum</span> <span class=\"o\">+=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>  \n        <span class=\"n\">_min</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"p\">,</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]);</span>  \n        <span class=\"n\">_max</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">_max</span><span class=\"p\">,</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]);</span>  \n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">qR</span> <span class=\"o\">&gt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 递归边界2：边界区间  \n</span><span class=\"c1\"></span>        <span class=\"n\">_sum</span> <span class=\"o\">+=</span> <span class=\"n\">sumv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span> <span class=\"c1\">// 此边界区间没有被任何set操作影响  \n</span><span class=\"c1\"></span>        <span class=\"n\">_min</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"p\">,</span> <span class=\"n\">minv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]);</span>  \n        <span class=\"n\">_max</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">_max</span><span class=\"p\">,</span> <span class=\"n\">maxv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]);</span>  \n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"c1\">// 递归统计  \n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">);</span>  \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">qL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">);</span>  \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">qR</span> <span class=\"o\">&gt;</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">qL</span><span class=\"p\">,</span> <span class=\"n\">qR</span><span class=\"p\">);</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>  \n</code></pre></div><p>初始的时候把setv[1]置0，这样就可以啦！注意如果既出现了区间add又出现了区间set，只需要修改一下懒标记传递，先传set再传add就行了。</p><ul><li>懒标记传递plus</li></ul><br/><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">pushdown</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">o</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n        <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">setv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n        <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">lc</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n        <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">rc</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n        <span class=\"n\">addv</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>完结撒花。。。线段树的时间复杂度是O(nlogn)的，通常来讲需要4n个辅助空间，所以空间复杂度是O(n)的。</p><p>对了，线段树的常数挺大的……有一个代替方法是用堆来储存，直接差分约束非递归，和树状数组差不多，叫zkw线段树（%%%zkw），但是递归版线段树更具有普遍性（如果有大佬能无视这句话就尽量无视这句话把……）……</p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }, 
                {
                    "tag": "树（数据结构）", 
                    "tagLink": "https://api.zhihu.com/topics/19680489"
                }
            ], 
            "comments": [
                {
                    "userName": "菜包", 
                    "userLink": "https://www.zhihu.com/people/6c64e2d7025daf757d683d901f698a4f", 
                    "content": "大佬，我看了俩小时，还是不会，可能不适合ACM吧🙃", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>大概是我太菜了没写清楚吧</p>", 
                            "likes": 0, 
                            "replyToAuthor": "菜包"
                        }, 
                        {
                            "userName": "菜包", 
                            "userLink": "https://www.zhihu.com/people/6c64e2d7025daf757d683d901f698a4f", 
                            "content": "也许我太菜😂", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27194533", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "Codeforces Round #416 Div.2 A~D", 
            "content": "比赛的时候打完A题B题被带跑了想了很久，后来想到正解时间复杂度算错结果打了一个mnlogn的被hack掉了……不过是第一场比赛，rating涨得还是很快的。<h2><b>A.Vladik and Courtesy</b></h2><p>直接模拟即可</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"s\">&#34;Vladik&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"s\">&#34;Valera&#34;</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">turn</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">step</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">turn</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;=</span> <span class=\"n\">step</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">a</span> <span class=\"o\">-=</span> <span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">turn</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">step</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">turn</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;=</span> <span class=\"n\">step</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">b</span><span class=\"o\">-=</span> <span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>B.Vladik and Complicated Book</b></h2><p>当时机房里有人说了一声莫队，然后我们就都往复杂里想了，号掉了很多时间。其实只要统计一下x之前比它大的、之后比它小的看一下是不是相等的就行了。当时把这个mn算成了mn^2，没打，无奈……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 10100\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">l</span> <span class=\"o\">||</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Yes</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">continue</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span> <span class=\"o\">--</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">cnt</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Yes</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;No</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>C.Vladik and Memorable Trip</b></h2><p>这道题是dp啊，没时间打了，不过其实是不难想的。这里吐槽一下<a href=\"https://www.zhihu.com/people/53a642c2d06d68a28a0b1550d1613bcc\" data-hash=\"53a642c2d06d68a28a0b1550d1613bcc\" class=\"member_mention\" data-editable=\"true\" data-title=\"@g1n0st\" data-hovercard=\"p$b$53a642c2d06d68a28a0b1550d1613bcc\">@g1n0st</a>十分不亲民的代码，题解正常多了……统计一个fst数组和一个lst数组，分别表示每个数最早出现和最晚出现的位置，然后枚举区间[j, i]。设dp[i]表示分成i段最大的权值，那么我们可以用dp[i-1]来更新dp[i]。每次枚举区间的时候计算出这一段的权值cur，dp[i] = max{dp[i], dp[j-1]+cur}。一开始在第12个点wa掉了，后来发现要维护最小的fst和最大的lst。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 5010\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]])</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]])</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]],</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]];</span> <span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n\t\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">fst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]),</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]])</span> <span class=\"n\">cur</span> <span class=\"o\">^=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">R</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">cur</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>D.Vladik and Favorite Game</b><br/></h2><p>思维题。直接BFS找一个可行解出来，然后就按照可行解走，如果走完后和预测是一样的，就说明按键没有被破坏。如果有不一样的情况，就反回去走。一开始没看清楚题目里的按键顺序狂wa，之后又是读优写傻了scanf没有加取地址符号……</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;queue&gt;\n#define maxn 110\nusing namespace std;\n\nstruct node {\n\tint x, y;\n\tnode(void) {}\n\tnode(int _x, int _y) : x(_x), y(_y) {}\n};\n\nconst int dx[] = {0, 0, -1, 1};\nconst int dy[] = {-1, 1, 0, 0};\n\nint n, m, cnt;\nchar a[maxn][maxn], dir[] = {&#39;L&#39;, &#39;R&#39;, &#39;U&#39;, &#39;D&#39;};\nnode cur, nxt, path[maxn*maxn*3], pre[maxn][maxn];\n\ninline bool BFS()\n{\n\tqueue&lt;node&gt; Q; bool vis[maxn][maxn] = {0};\n\tcur = node(1, 1); Q.push(cur);\n\tpre[1][1] = node(1, 1); vis[1][1] = true;\n\twhile (!Q.empty()) {\n\t\tcur = Q.front(); Q.pop();\n\t\tif (a[cur.x][cur.y] == &#39;F&#39;) break;\n\t\tfor (register int i = 0; i &lt; 4; ++i) {\n\t\t\tnxt = node(cur.x+dx[i], cur.y+dy[i]);\n\t\t\tif (nxt.x &gt;= 1 &amp;&amp; nxt.x &lt;= n &amp;&amp; nxt.y &gt;= 1 &amp;&amp; nxt.y &lt;= m &amp;&amp; a[nxt.x][nxt.y] != &#39;*&#39;) \n\t\t\t\tif (!vis[nxt.x][nxt.y]) {\n\t\t\t\t\tvis[nxt.x][nxt.y] = true;\n\t\t\t\t\tpre[nxt.x][nxt.y] = cur;\n\t\t\t\t\tQ.push(nxt);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\ninline bool record()\n{\n\tnode destination;\n\tfor (register int i = 1; i &lt;= n; ++i) \n\t\tfor (register int j = 1; j &lt;= m; ++j) \n\t\t\tif (a[i][j] == &#39;F&#39;) destination = node(i, j);\n\tfor (;;) {\n\t\tpath[cnt] = destination;\n\t\tnode tmp = destination;\n\t\tdestination = pre[tmp.x][tmp.y];\n\t\t++cnt;\n\t\tif (destination.x == 1 &amp;&amp; destination.y == 1) {\n\t\t\tpath[cnt] = node(1, 1);\n\t\t\t++cnt;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(&#34;%d%d&#34;, &amp;n, &amp;m);\n\tfor (register int i = 1; i &lt;= n; ++i)\n\t\tscanf(&#34;%s&#34;, a[i]+1);\n\tBFS(); record();\n\tint now = cnt - 1;\n\tfor (; now;) {\n\t\tint step = -1;\n\t\tfor (register int i = 0; i &lt; 4; ++i) {\n\t\t\tnode tmp = node(path[now].x+dx[i], path[now].y+dy[i]);\n\t\t\tif (tmp.x == path[now-1].x &amp;&amp; tmp.y == path[now-1].y) step = i;\n\t\t}\n\t\tprintf(&#34;%c\\n&#34;, dir[step]);\n\t\tfflush(stdout);\n\t\tnode nxt;\n\t\tscanf(&#34;%d%d&#34;, &amp;nxt.x, &amp;nxt.y);\n\t\tif (nxt.x == path[now-1].x &amp;&amp; nxt.y == path[now-1].y) --now;\n\t\telse {\n\t\t\tif (dir[step] == &#39;L&#39; || dir[step] == &#39;R&#39;) swap(dir[0], dir[1]);\n\t\t\telse swap(dir[2], dir[3]);\n\t\t}\n\t}\n\treturn 0;\n}\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "Codeforces", 
                    "tagLink": "https://api.zhihu.com/topics/20031206"
                }, 
                {
                    "tag": "OI（信息学奥林匹克）", 
                    "tagLink": "https://api.zhihu.com/topics/19621310"
                }, 
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27023939", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "衢州市市赛划水记", 
            "content": "<h2><b>Day 0</b></h2><p>背背板子，什么逆序对倍增LCA之类的，比较注重思维的题没怎么看。洛谷上有一场比赛，一直在淦B没有淦出来，好方啊……</p><h2><b>Day 1</b></h2><p>A题……恩，好像是个贪心？不能操作二就操作一？哇一秒解题我好牛逼（事实证明是好傻逼）！！！后来出考场和g1n0st讨论了一下，发现贪心是错的……gg了</p><p>B题……一开始就直接按照City Game的思路去做，结果输入很烦，处理了很久都没处理好，打了个神奇解法，估计又要爆0后来和g1n0st讨论了一下他告诉我就是一个单调栈……</p><p>C题……这是什么啊？感觉可以预处理一下？？？然后预处理失败只好打一个O(n^4)的暴力……g1n0st打了一个O(n^3)的暴力……然后Manchery告诉我这题是二分答案啊！！最小值最大你眼睛瞎了吗？！</p><p>D题……不会做……待更……我果然是太弱了</p><p>。。。60分Cu滚粗</p>", 
            "topic": [
                {
                    "tag": "游记", 
                    "tagLink": "https://api.zhihu.com/topics/19553456"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26973656", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "NOIP2016 换教室", 
            "content": "一开始怕是失了智，这题居然觉得不会做……<p>好吧，就是floyed+期望dp。设f[i][j][0]表示时间段i不申请第j个教室消耗体力期望的最小值，f[i][j][1]表示申请的。那么根据期望的定义以及线性性质，可以得到：<br/></p><ul><li>f[i][j][0] = min(f[i-1][j][0] + dis[c[i-1]][c[i]], f[i-1][j][1] + k[i-1] * dis[d[i-1]][c[i]] + (1 - k[i-1]) * dis[c[i-1]][c[i]])，即上次也不申请和上次申请之间的最小值。</li><li>f[i][j][1] = min(f[i-1][j-1][0] + k[i] * dis[c[i-1]][d[i]] + (1 - k[i]) * dis[c[i-1]][c[i]], f[i-1][j-1][1] + k[i-1] * k[i] * dis[d[i-1]][d[i]] + (1 - k[i-1])＊k[i] * dis[c[i-1]][d[i]] + k[i-1] * (1 - k[i]) * dis[d[i-1]][c[i]] + (1 - k[i-1]) * (1 - k[i]) * dis[c[i-1]][c[i]])，即上次不申请和上次也申请之间的最小值。</li></ul><br/>由于期望的一些鬼畜定义，这个式子贼长……<div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 2010\n</span><span class=\"cp\">#define maxv 310\n</span><span class=\"cp\">#define INF 1000000007\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">double</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">maxv</span><span class=\"p\">][</span><span class=\"n\">maxv</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxv</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxv</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxn</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxn</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n    <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">floyed</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lf&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"n\">init</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">w</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">])</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">floyed</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]];</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]);</span>\n\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"kt\">double</span> <span class=\"n\">ans</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]));</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%.2lf&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "数学期望", 
                    "tagLink": "https://api.zhihu.com/topics/20038751"
                }, 
                {
                    "tag": "动态规划", 
                    "tagLink": "https://api.zhihu.com/topics/19660018"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26957911", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 2, 
            "title": "NOIP2016 天天爱跑步", 
            "content": "之前用Tarjan打过一次……然后后来的一次考试忘掉了板子，也只记得大致的做法。于是滚来再做一遍……这次用了朴素的倍增法。<p>考虑这个问题，不难想到把路径拆成两段：起点到lca，和lca到终点。需要注意的是如果退化成一条链，那么lca是被算了两次的，要减去。</p><p>为了方便，定义：</p><ul><li>dep[u]，结点u的深度</li><li>s，起点；t，终点</li><li>w[i]意义如题</li><li>dis，s和t之间的路径长度，dis = dep[s] + dep[t] - 2 * dep[lca]</li></ul><br/><p>考虑第一条路径，当且仅当dep[i] + w[i] = dep[s]时小孩才能在结点i被观察到。</p><p>考虑第二条路径，当且仅当dep[i] + dis = w[i] + dep[t]时小孩才能在结点i被观察到。</p><p>于是想到树链剖分，但是复杂度有问题啊，而且还会被卡常……所以考虑用桶来维护。</p><p>为两条路径分别开桶P、Q，入栈的时候加个P[dep[s] + w[s]]，出栈的时候减去。对Q的处理也是类似的。最后的答案就是P[dep[s] + w[s]] + Q[dep[s] - w[s]]再扣除重复部分。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 300100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">watch</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">I</span> <span class=\"p\">{</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"n\">getc</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">),</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">EOF</span> <span class=\"p\">:</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n\t    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n\t    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n\t    <span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">I</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">;</span>\n    <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">LCA</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">20</span><span class=\"p\">];</span>\n    <span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\n    <span class=\"n\">LCA</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">pa</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">pa</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">process</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> \n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"n\">_log</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_log</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span> <span class=\"o\">++</span><span class=\"n\">_log</span><span class=\"p\">);</span>\n        <span class=\"o\">--</span><span class=\"n\">_log</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">_log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">_log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">return</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">pa</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]];</span>\n    <span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span> <span class=\"o\">+</span> <span class=\"n\">maxn</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">pa</span><span class=\"p\">)</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">watch</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">-</span> <span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n        <span class=\"o\">--</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span> <span class=\"o\">--</span><span class=\"n\">watch</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"o\">--</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span> <span class=\"o\">+</span> <span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#ifndef ONLINE_JUDGE\n</span><span class=\"cp\"></span>    <span class=\"n\">freopen</span><span class=\"p\">(</span><span class=\"s\">&#34;test.txt&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;r&#34;</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n    <span class=\"n\">freopen</span><span class=\"p\">(</span><span class=\"s\">&#34;out.txt&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;w&#34;</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">process</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">st</span><span class=\"p\">,</span> <span class=\"n\">ed</span><span class=\"p\">;</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">ed</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lca</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">,</span> <span class=\"n\">ed</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">ed</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">lca</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">ed</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"o\">++</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">];</span>\n        <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">ed</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">lca</span><span class=\"p\">,</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">]),</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">lca</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d &#34;</span><span class=\"p\">,</span> <span class=\"n\">watch</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre></div><p>一开始突然制杖直接模拟了，然后TLE到怀疑人生……</p>", 
            "topic": [
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "NOIP（全国青少年信息学奥林匹克联赛）", 
                    "tagLink": "https://api.zhihu.com/topics/19636868"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26876130", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 1, 
            "title": "codeforces Round #411 Div.2 A~E", 
            "content": "F是期望不会做……<h2><b>A.Fake NP</b></h2><p>题意：找出区间[l, r]内所有数的因数中个数最多的</p><p>分析：如果l = r（因为可能不是2的倍数），那么就是本身否则就是2（每两个数就有一个是2的倍数）……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>B.3-palindrome</b></h2><p>题意：构造一个长度为n的字符串，其中不能有长度为3的回文子串</p><p>分析：一开始看成“不能有长度大于等于3的回文子串，直接吓傻了……就是构造啊……aabbaabbaabbaabbaabbaabb……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;ab&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;abb&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">char</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">200100</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">flag</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;b&#39;</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">putchar</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>C.Find Amir</b></h2><p>题意：给出一个n，对于所有的i, j∈[1, n]（i ≠ j），找出一种排列方式使得所有的(i + j) mod (n + 1)最小</p><p>分析：贪心。手算一下发现既然是模n+1，那么规划一下，1~n，2~n-1……一定是最优的</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>D.</b> <b>Minimum number of steps</b></h2><p>题意：给出一串由a和b组成的字符串，每次可以把一个&#34;ab&#34;换成一个&#34;bba&#34;，问最少换几次可以让原串中不含&#34;ab&#34;</p><p>分析：一开始没有什么思路，想用动态规划但是感觉表达不出状态……然后看以了一下网友题解发现也是贪心，从后往前贪，找到&#34;ab&#34;就换，这样一定次数最少。然后自己写了一个，WA了……主要是没想到怎么处理换完之后又出现&#34;ab&#34;的状态。然后又看一波题解，发现遇到一个a后边的b就会加倍，直接统计就好了（我真的是太弱了……）……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 1000100\n</span><span class=\"cp\">#define mod 1000000007\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"kt\">char</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;b&#39;</span><span class=\"p\">)</span> \n\t\t\t<span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">num</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">cnt</span> <span class=\"o\">+=</span> <span class=\"n\">num</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">cnt</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">num</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> \n\t\t<span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">num</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ans</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>E.Ice cream coloring</b></h2><p>题意：有一颗n个结点的树，每个结点有一组值，所有相同的值又连成一个子图。然后对这个图解答色数问题。</p><p>分析：图的色数不是O(3^n)的吗……怎么n这么大……然后看到大神说，由于相同的值连成一个子图，所以直接一次dfs染色就可以了……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 2000100\n</span><span class=\"cp\">#define OFAST __attribute__((optimize(&#34;O3&#34;)))\n</span><span class=\"cp\">#define ALIGNED __attribute__((aligned(64)))\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"n\">ALIGNED</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">kind</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">nxt</span><span class=\"p\">;</span>\n\t\n\t<span class=\"n\">kind</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\t<span class=\"n\">kind</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">ice_cream</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"n\">kind</span> <span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"n\">ALIGNED</span><span class=\"p\">;</span>\n\t\n\t<span class=\"n\">ice_cream</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t\n\t<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kind</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">ice</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">;</span>\n\t\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Graph</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\t<span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"n\">ALIGNED</span><span class=\"p\">;</span>\n\t\n\t<span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n\t\t<span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> \n\t\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">paint</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">+</span><span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">type</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">type</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">])</span> <span class=\"o\">++</span><span class=\"n\">col</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">col</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"n\">paint</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"n\">solver</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">));</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">t</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">ice</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">solver</span><span class=\"p\">.</span><span class=\"n\">paint</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">color</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d &#34;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>吐槽一下测试点数量……一开始一直TLE，强开O3+数据对齐都没有用……后来发现每次都把tag memset掉太不值得了……用fill比较好。。。这道题还有要注意的就是如果没有冰淇淋，仍然算一种</p>", 
            "topic": [
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }, 
                {
                    "tag": "Codeforces", 
                    "tagLink": "https://api.zhihu.com/topics/20031206"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": [
                {
                    "userName": "张一钊", 
                    "userLink": "https://www.zhihu.com/people/ea0ab6a59e9a8224983ef7fdf61ac229", 
                    "content": "这场我好像打过", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "喵星", 
                            "userLink": "https://www.zhihu.com/people/002f445102fcb582403fa01456302b86", 
                            "content": "因为很近吧", 
                            "likes": 0, 
                            "replyToAuthor": "张一钊"
                        }
                    ]
                }, 
                {
                    "userName": "岑肃廷", 
                    "userLink": "https://www.zhihu.com/people/a3f63c0029a21b2658bbb8721b5c85fa", 
                    "content": "F题分类讨论就好了呀", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26385138", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 17, 
            "title": "莫队算法", 
            "content": "莫队算法真是好啊！大神的莫队在这里：<a href=\"https://zhuanlan.zhihu.com/p/25017840\" class=\"internal\">莫队算法 (Mo&#39;s Algorithm) - 知乎专栏</a><br/><p>%%%羽裳</p><h2><b>0001 </b>一个小问题</h2><blockquote>给定N个数以及一些形如[L, R]的询问，求出[L, R]内不同的数有多少</blockquote><p>哇！！！大暴力！每段区间扫一遍，O(<img src=\"https://www.zhihu.com/equation?tex=N%5E2\" alt=\"N^2\" eeimg=\"1\"/>)，再加上O(松)的优化，说不定可以出奇迹哦！</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"c1\">//这里有一段n^2的暴力\n</span></code></pre></div><p>但是对于优秀算法的追求是不会止步的！于是我们可以想到线段树维护区间，然而这也不能在很短的时间内得到区间的情况。所以回归暴力，我们可以做一些改进：对于每组询问[L, R]，我们已知的区间是[l, r]，然后我们可以知道它附近的区间的状况，例如[l+1, r]（开个cnt数组加一加减一减就好了）。不断地把已知区间[l, r]移动，我们可以得到询问区间[L, R]。于是我们得到了一段优化过的O(<img src=\"https://www.zhihu.com/equation?tex=N%5E2\" alt=\"N^2\" eeimg=\"1\"/>)暴力。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"c1\">//这里有一段优化过的n^2的暴力\n</span></code></pre></div><p>不管怎么样，这段代码是O(<img src=\"https://www.zhihu.com/equation?tex=N%5E2\" alt=\"N^2\" eeimg=\"1\"/>)的，它不快。<br/></p><h2><b>0010</b> 莫队登场</h2><p>但是从上述代码中不难发现，我们可以优化一下。具体的优化方法是分块。对询问进行分块，然后重新组织，以某种顺序回答，可以达到更好的时间复杂度。对询问的L进行分块，假设有Q组询问，我们每<img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7BQ%7D+\" alt=\"\\sqrt{Q} \" eeimg=\"1\"/>组分一块并且排序（以L/<img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7BQ%7D+\" alt=\"\\sqrt{Q} \" eeimg=\"1\"/>为第一关键字，R为第二关键字）。然后在每一块内处理询问。根据一些分块的性质，时间复杂度会降成O((N+Q)<img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7BN%7D+\" alt=\"\\sqrt{N} \" eeimg=\"1\"/>)</p><p>其实这就是平面上有Q个点，如何用Q-1条边去连这Q个点使得这Q-1条边得曼哈顿距离和最小的问题。</p><ul><li>核心思想：合理地组织答案以获得更好的时间复杂度</li></ul><br/><h2><b>0011 </b>举个栗子</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problem/show%3Fpid%3D1972\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P1972】[SDOI2009]HH的项链 - 洛谷</a><br/></p><p>一道裸的莫队算法题。。。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cmath&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 50100\n</span><span class=\"cp\">#define OFAST __attribute__((optimize(&#34;Ofast&#34;)))\n</span><span class=\"cp\">#define ALIGNED __attribute__((aligned(64)))\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">){</span>\n        <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">EOF</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n    <span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">]</span> <span class=\"n\">ALIGNED</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">BLOCK_SIZE</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Query</span><span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">;</span>\n    <span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Query</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">{</span> \n        <span class=\"k\">return</span>  <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">BLOCK_SIZE</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">BLOCK_SIZE</span><span class=\"p\">))</span> <span class=\"o\">||</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">BLOCK_SIZE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">BLOCK_SIZE</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">OFAST</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">--</span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">),</span> <span class=\"n\">BLOCK_SIZE</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">);</span>\n        <span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">que</span><span class=\"o\">+</span><span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">l</span><span class=\"p\">);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">);</span>\n        <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">que</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"c1\">//fclose(stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>至此，暴力算法华丽地降了时间复杂度。当然，莫队算法一般来说是处理离线问题的，在线的可以看之前点出的大神专栏文章。</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": [
                {
                    "userName": "bobble", 
                    "userLink": "https://www.zhihu.com/people/9516c76f168ac741ae5c1376507eff43", 
                    "content": "<p>QwQ其实0001好像是叉姐的一道题，直接O(n)可做【逃</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我怕是姿势低了吧（雾</p>", 
                            "likes": 0, 
                            "replyToAuthor": "bobble"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>怎么O(n)啊，分段hash吗？求教</p>", 
                            "likes": 0, 
                            "replyToAuthor": "bobble"
                        }
                    ]
                }, 
                {
                    "userName": "bobble", 
                    "userLink": "https://www.zhihu.com/people/9516c76f168ac741ae5c1376507eff43", 
                    "content": "<p>如果只是判断的话，刚开始只想到rmq维护last</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bobble", 
                    "userLink": "https://www.zhihu.com/people/9516c76f168ac741ae5c1376507eff43", 
                    "content": "<p>虽然正解也差不多【逃】，但是很容易发现max(a[i]|1&lt;=i&lt;=r)=max(a[i]|l&lt;=i&lt;=r)于是直接维护前缀最大和就可以了</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>怎么通过前缀和最大来判断啊，还是维护last吗</p>", 
                            "likes": 0, 
                            "replyToAuthor": "bobble"
                        }
                    ]
                }, 
                {
                    "userName": "bobble", 
                    "userLink": "https://www.zhihu.com/people/9516c76f168ac741ae5c1376507eff43", 
                    "content": "<p>呸呸呸，是前缀最大值【手抖</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bobble", 
                    "userLink": "https://www.zhihu.com/people/9516c76f168ac741ae5c1376507eff43", 
                    "content": "<p>last[i]表示第i个数的(跟他值相同前一个数)的下标，然后当last[l..r]中最大没有&gt;=l就是没有重复的</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "懂了", 
                            "likes": 0, 
                            "replyToAuthor": "bobble"
                        }
                    ]
                }, 
                {
                    "userName": "白空谷", 
                    "userLink": "https://www.zhihu.com/people/4cca9c0b4d106510c968c461f0b158ba", 
                    "content": "不是记前驱然后主席树可以nlogn", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "大佬啊膜膜膜", 
                            "likes": 0, 
                            "replyToAuthor": "白空谷"
                        }
                    ]
                }, 
                {
                    "userName": "1111", 
                    "userLink": "https://www.zhihu.com/people/e282f382b2b020f89180b2eeb1713a28", 
                    "content": "想请问一下 莫队为什么要分块  不分块 直接按左端点为第一关键词 右端点为第二关键词 会TLE 不太懂", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "分块就是为了降复杂度吧", 
                            "likes": 0, 
                            "replyToAuthor": "1111"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26312578", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "ZJOI2006 物流运输", 
            "content": "最短路+DP<p>DP方程很好想的，f[i] = min{f[i], f[j] + cost[j+1][i] * (i - j) + k, 0 &lt;= j &lt; i}</p><p>最短路用了SPFA，当然肯定不如Dijkstra + Heap稳定，但是很好写……鉴于网上一再强调STL有多慢，而洛谷又不能程序内强开O2/O3优化，所以这里还是用了向前星+手写队列，而不是STL vector + queue。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define N 30\n</span><span class=\"cp\">#define maxn 110\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">EOF</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span><span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n    <span class=\"k\">for</span><span class=\"p\">(;</span> <span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n    <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n    <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">),</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Graph</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n    <span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1010</span><span class=\"p\">];</span>\n\n    <span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"n\">opt</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">SPFA</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">500</span><span class=\"p\">],</span> <span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">));</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">dis</span><span class=\"p\">,</span> <span class=\"mh\">0x3f</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">dis</span><span class=\"p\">));</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">inq</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">inq</span><span class=\"p\">));</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">front</span> <span class=\"o\">&lt;</span> <span class=\"n\">rear</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">front</span><span class=\"p\">]];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">front</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">front</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                    <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">rear</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n                    <span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">inq</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">front</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">front</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dis</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span>\n        <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">);</span>\n        <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">d</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n        <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">SPFA</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"p\">)</span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">k</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%lld&#34;</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]);</span>\n    <span class=\"c1\">//fclose(stdin);\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "习题解答", 
                    "tagLink": "https://api.zhihu.com/topics/20030384"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26272379", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "2017年4月技术选考滚粗记", 
            "content": "<h2>Day -1</h2><p>到机房看zkw线段树，刷了一道分块+Finwick树的题（然而并不是很懂），manchery大神觉得我很浪并且嘱咐我要好好考</p><h2>Day 0</h2><p>上机，突然想起来还有很多基础知识没复习，心态爆炸。</p><p>用VB码了一波快排和线段树……万一真的像度教说的那样考到可持久化仙人掌就gg了（拜托……这是学考选考……）</p><h2>Day 1</h2><p>诶，这些题目的知识点怎么这么偏啊……我一点都不知道……看起来好对啊！然后还提前十五分钟做好信心十足……然后考后讨论选考30分还是做得很不错的，学考70分炸了……错了7个选择题……学考拿C++（滑稽）滚粗了……还好二中那边的同学也基本上都翻了……十月再来……我真是浙江省技术最弱……</p>", 
            "topic": [
                {
                    "tag": "考试", 
                    "tagLink": "https://api.zhihu.com/topics/19556327"
                }, 
                {
                    "tag": "浙江", 
                    "tagLink": "https://api.zhihu.com/topics/19581316"
                }
            ], 
            "comments": [
                {
                    "userName": "FLYing", 
                    "userLink": "https://www.zhihu.com/people/8467ba3873901ac5f1c5825ac3f07b3c", 
                    "content": "<p>我就不赞了。。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>→_→</p>", 
                            "likes": 0, 
                            "replyToAuthor": "FLYing"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26003598", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 19, 
            "title": "Treap以及名次树", 
            "content": "<p>树堆（Tree + Heap，简称Treap）是一种非常好的平衡二叉树，对于算法竞赛，红黑树写起来很麻烦，代码量大（五种插入六种删除），还容易写错（STL set、STL map不开O2真的慢），在这种时候，如果对鲁棒性要求不高，就可以用Treap来代替红黑树了。不仅代码量小，还可以实现一种数据结构——名次树。</p><h2><b>0001 </b>介绍</h2><p>来自百度百科：树堆，是指有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为O(logn)。</p><p>说得很玄乎，其实就是在插入的时候给每个点一个rank，而这个rank是random，并且满足堆性质的。在代码实现里面，直接 r = rand() 就行了……</p><p>接下来我们定义一个结构体，用来储存Treap（为了方便，这里把名次树要用的信息也加上了。ch[0]表示左孩子结点，ch[1]表示右孩子结点，v是数据，r是名次，s是结点大小，w是数据出现的次数。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n\t<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Node</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">r</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">v</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>0010 </b>各种操作 </h2><ul><li>维护。每个节点都有信息s要维护。在维护的时候，先令s = w，然后对于每棵不为空的子树，加上它们的s，信息维护就结束了。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">maintain</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>旋转。当根据堆的定义，二叉树左孩子节点的任意数要小于右孩子结点。这个时候我们就要用到旋转操作。它分为左旋和右旋，下面这张图体现了这个操作：<br/>在下面的代码中，左旋和右旋写在了一起。<br/></li></ul><figure><noscript><img src=\"https://pic1.zhimg.com/v2-6c43ea3017e30b8783395bfba32024fc_b.png\" data-rawwidth=\"1152\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"1152\" data-original=\"https://pic1.zhimg.com/v2-6c43ea3017e30b8783395bfba32024fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1152&#39; height=&#39;648&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1152\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1152\" data-original=\"https://pic1.zhimg.com/v2-6c43ea3017e30b8783395bfba32024fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6c43ea3017e30b8783395bfba32024fc_b.png\"/></figure><p>law打成low了……</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">];</span>\n\t<span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t<span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>插入。插入结点，把结点赋一个优先值，如果破坏了堆的性质，就旋转。下面给的代码里，加入了名次树的操作：如果加入的数在名次树里已经有了，就把w+1.通常w是不在名次树中出现的，但是如果需要求排名之类的，就需要了。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">maintain</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>删除。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"c1\">//删除一个节点\n</span><span class=\"c1\"></span><span class=\"kt\">void</span> <span class=\"nf\">del</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">del</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"n\">del</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//删除整棵树\n</span><span class=\"c1\"></span><span class=\"kt\">void</span> <span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t<span class=\"k\">delete</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>查找某元素</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>求k大值。比较，如果小，肯定在左子树里，否则，就在右子树里。为此，我们需要一个新的cmp</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">cmp1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sz</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">kth</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp1</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">sz</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>求排名。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>求前驱。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>  \n<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">));</span>\n</code></pre></div><ul><li>求后继。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>  \n<span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  \n<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">));</span>\n</code></pre></div><ul><li>分裂与合并。这要涉及到Treap的可持久化，在这里不讨论了。而且如果要实现这两个操作，伸展树（Splay，orz Tarjan）更常用。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"c1\">//这里有一段分裂与合并的代码\n</span></code></pre></div><h2><b>0011 </b>板子</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problem/show%3Fpid%3D3369\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P3369】【模板】普通平衡树（Treap/SBT） - 洛谷</a></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdlib&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">Treap</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\n\t\t<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Node</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">r</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"kt\">int</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">v</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"kt\">int</span> <span class=\"n\">cmp1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sz</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">maintain</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">};</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">del</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"n\">del</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t\t\t<span class=\"k\">else</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"n\">del</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">kth</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp1</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">sz</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Treap</span><span class=\"p\">;</span>\n\n<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">root</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#ifndef ONLINE_JUDGE\n</span><span class=\"cp\"></span>\t<span class=\"n\">freopen</span><span class=\"p\">(</span><span class=\"s\">&#34;test.in&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;r&#34;</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">del</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">));</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">));</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">));</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#ifndef ONLINE_JUDGE\n</span><span class=\"cp\"></span>\t<span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>UPD：可持久化 —— 非旋转Treap</b></h2><p>在之前的操作中讲到了Treap可以像Splay一样快速地实现分裂与合并，但是并没有给出代码，在这里补上。</p><h2><b>0100 </b>各种操作</h2><ul><li>build(A)，把A转化成序列。由于这个操作可以用merge来实现，因此不给出代码了</li><li>merge(x, y)，把x和y合并</li><li>split(o, x, y, k)，把原序列o从位置k断开，并保存在x、y里</li><li>kth(k)，找第k小的元素</li><li>rank(v)，求v的排名</li><li>insert、delete</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>由于最精髓的操作就是split和merge，其余操作都很容易由split和merge得出，因此就只给出阐述，具体细节留给大家自己思考。</p><ul><li>merge：如果x或者y有一者为空，那就返回另一者；否则，比较x和y的优先级进行合并。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>split：如果x和y都为空，那么就返回空；否则，比较左子树与k的大小，如果大于等于k，那么在左子树里继续分裂，否则，到右子树里分裂。</li></ul><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">?</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"nl\">s</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><ul><li>kth：找到k-1的位置，分裂，那么分裂以后y的第一位就是答案</li><li>rank：与非持久化Treap类似，在左右子树里递归求解。核心代码：</li><li>return v &lt; x -&gt; v ? rank(x -&gt; ch[0], v) : rank(x -&gt; ch[1], v) + x -&gt; ch[0] -&gt; s + 1;</li><li>insert、delete：在该插入该删除的地方各种split和merge就行了</li></ul><h2><b>0101 </b>举个栗子</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.org/problem/show%3Fpid%3D3391\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【P3391】文艺平衡树 - 洛谷</a></p><p>这是一道Splay的板子题，但是用可持久化Treap也可以做，而且效率也很不错（不需要效率较低的旋转操作）。虽然应对此类题目Splay更常用，而且Splay还是Link_Cut Tree必不可少的辅助，但是这里想说的是，Treap以及可持久化Treap（比Treap更稳定）真的是很不错的数据结构！</p><p>AC代码（550ms）：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdlib&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 100100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">Persistent_Treap</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">bool</span> <span class=\"n\">rev</span><span class=\"p\">;</span>\n\t\t\n\t\t<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">();</span>\n\t\t\t<span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t\n\t\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">maintain</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t\n\t\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">pushdown</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span> <span class=\"o\">^=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span> <span class=\"o\">^=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">};</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">?</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"nl\">s</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t\t<span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t\t<span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">maintain</span><span class=\"p\">();</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span><span class=\"p\">)</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pushdown</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d &#34;</span><span class=\"p\">,</span> <span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Persistent_Treap</span><span class=\"p\">;</span>\n<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">root</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">register</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d%d&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">t3</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">t3</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">-</span><span class=\"n\">l</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">t2</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rev</span> <span class=\"o\">^=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">t3</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>应该说，Treap是兼顾了编码复杂度与时间复杂度的最佳平衡树了吧。（如果有神犇可以无视这句话的请无视这句话）</p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }
            ], 
            "comments": [
                {
                    "userName": "张慕晖", 
                    "userLink": "https://www.zhihu.com/people/4f9f099f054bd29d932bcd69bb0f401c", 
                    "content": "<p>LZ，插入操作里的“if(o -&gt; ch[d] &gt; o)”这句判断有点问题，并不是调用Node类的重载运算符，而是变成判断两个指针大小了。虽然并未影响正确性（这一点我还没想通为啥），但是代码会变得比较缓慢，大概是因为旋转操作大大变多了……</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "秋风画扇", 
                    "userLink": "https://www.zhihu.com/people/5379a0ee75b9c89e8e28bf384447fa40", 
                    "content": "还有删除那里，直接比较的是两个指针。是不是手误写错了？<br>if (o -&gt; ch[0] &gt; o -&gt; ch[1]) d2 = 1;", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "逍遥行", 
                    "userLink": "https://www.zhihu.com/people/2ce7800688141a3e758ca98d18c652f4", 
                    "content": "<p>前驱后继可以优化下，整合到一次递归操作中，降低常数</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25912929", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 14, 
            "title": "LCA专题", 
            "content": "LCA(Least Common Ancestor)是指有根树上点对(u, v)的最近公共祖先。由于这是个很有意思而且在算法竞赛里常考的问题，所以在这里一边学习一边记录。<h2><b>0001 </b>倍增法</h2><p>这是个真的很朴素的算法……跑一遍dfs求出x的父亲fa[x]以及x的深度d[x]，然后根据fa[x]和cost[x]（表示和父亲的费用）预处理出ance[x][j]（x的第2^j级祖先），在询问的时候，如果d[u] &lt; d[v]，就交换，然后把u提到v同一级上，接着把u和v一起逐级上提，一直到LCA。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">preprocess</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"n\">maxcost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">log</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span> <span class=\"n\">log</span><span class=\"o\">++</span><span class=\"p\">);</span>\n\t<span class=\"n\">log</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span> <span class=\"c1\">// LCA为p\n</span><span class=\"c1\"></span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t    <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">anc</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span> <span class=\"c1\">// LCA为fa[p]（它也等于fa[q]）\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><h2><b>0010 </b>LCA转为RMQ</h2><p>首先介绍一下<b>欧拉序列</b>：在dfs的时候记录每个点的深度，可以得到这棵树的欧拉序列。<figure><noscript><img src=\"https://pic3.zhimg.com/v2-ae0ccc030a4ac17e5ec482a24761b6fa_b.png\" data-rawwidth=\"294\" data-rawheight=\"298\" class=\"content_image\" width=\"294\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;294&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"294\" data-rawheight=\"298\" class=\"content_image lazy\" width=\"294\" data-actualsrc=\"https://pic3.zhimg.com/v2-ae0ccc030a4ac17e5ec482a24761b6fa_b.png\"/></figure></p><p>比如对于这棵树，它的欧拉序列就是 1,2,3,2,4,2,1,5,6,5,7,5,1</p><p>有了欧拉序列，LCA问题实际上就转化为RMQ问题了！</p><p>比如上面这棵树，它的节点编号序列应该是V：1,2,4,2,5,2,1,3,6,3,7,3,1，而它对应的欧拉序列为D：1,2,3,2,4,2,1,5,6,5,7,5,1，那么LCA(u, v)事实上转化为了V[RMQ(D, V[u], V[v])]</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">DFS</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">fa</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dfs_clock</span><span class=\"p\">;</span>  \n    <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">dfs_clock</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>  \n    <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">dfs_clock</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">;</span>  \n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">next</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>  \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>  \n        <span class=\"n\">DFS</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>  \n        <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">dfs_clock</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n        <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">dfs_clock</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">;</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span> \n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">RMQ_init</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>  \n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>  \n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>  \n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>  \n        <span class=\"p\">{</span>  \n            <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>  \n            <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>  \n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span>  \n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span>  \n            <span class=\"k\">else</span>  \n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>  \n        <span class=\"p\">}</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>  \n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n \n    <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n    <span class=\"k\">while</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">;</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">L</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">];</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">];</span>  \n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span>  \n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>  \n    <span class=\"k\">else</span>  \n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"p\">;</span>  \n<span class=\"p\">}</span> \n \n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">LCA</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> \n    <span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span>  \n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">y</span><span class=\"p\">)</span>  \n        <span class=\"k\">return</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)];</span>  \n    <span class=\"k\">else</span>  \n        <span class=\"k\">return</span> <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)];</span>  \n<span class=\"p\">}</span> \n</code></pre></div><h2><b>0011 </b>树链剖分法</h2><p>这里又有新概念了：<br/></p><ul><li>树的轻重路径：对于一个节点u，若v是u的儿子最多的子节点，那么(u, v)即是重边。</li><li>路径剖分最重要的定理如下：若v是u的子结点，(u,v)是轻边，则size(v)&lt;size(u)/2，其中size(u)表示以u为根的子树中的结点总数。<br/></li></ul><br/>这样，只需要一遍dfs，统计fa、size、son、depth，就可以完成树链剖分了，而在求LCA的时候，比如，对于以下的树，假如两条加粗的路径AA’，BB’为重链，则求A、B的LCA时，只需取链顶深度较大的B’并将B跳到B’的父节点C，C在链AA’上，于是就能很快得到A、B的LCA为C，而不需要一次次往上寻找。 <figure><noscript><img src=\"https://pic3.zhimg.com/v2-405528f11065c6435f2cb4dd8d603fa2_b.png\" data-rawwidth=\"232\" data-rawheight=\"285\" class=\"content_image\" width=\"232\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;232&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"232\" data-rawheight=\"285\" class=\"content_image lazy\" width=\"232\" data-actualsrc=\"https://pic3.zhimg.com/v2-405528f11065c6435f2cb4dd8d603fa2_b.png\"/></figure>当然，也有下面这种2B情况：<figure><noscript><img src=\"https://pic1.zhimg.com/v2-8a9f9e3af316697c6dd3a64d411c2b08_b.png\" data-rawwidth=\"227\" data-rawheight=\"278\" class=\"content_image\" width=\"227\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;227&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"227\" data-rawheight=\"278\" class=\"content_image lazy\" width=\"227\" data-actualsrc=\"https://pic1.zhimg.com/v2-8a9f9e3af316697c6dd3a64d411c2b08_b.png\"/></figure><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#define INLINE __attribute__((optimize(&#34;O3&#34;))) inline\n</span><span class=\"cp\"></span>\n<span class=\"k\">struct</span> <span class=\"n\">Edge</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\t<span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">nxt</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">),</span> <span class=\"n\">nxt</span><span class=\"p\">(</span><span class=\"n\">nxt</span><span class=\"p\">),</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Graph</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n\t<span class=\"n\">Edge</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">aligned</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)));</span>\n\t<span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">INLINE</span> <span class=\"kt\">void</span> <span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">e</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">),</span> <span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tot</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"n\">opt</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"n\">INLINE</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> \n\t<span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">v</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">val</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">w</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">dfs1</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span>\n\t\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">INLINE</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]])</span> <span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]];</span>\n\t<span class=\"k\">else</span> <span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">nxt</span><span class=\"p\">)</span> \n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"n\">dfs2</span><span class=\"p\">(</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">to</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">INLINE</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">for</span><span class=\"p\">(;</span> <span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">];</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">&gt;</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]]</span> <span class=\"o\">?</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]]</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">ance</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]])</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nl\">u</span> <span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>另外，树链剖分以后，(u, v)之间的距离其实就变成了dist[u] + dist[v] - 2 * dist[lca(u, v)]，其中dist[i]表示在欧拉序列里i到根的距离。这样，我们用树状数组或者线段树什么的乱搞维护一下就可以啦！！！（然而CCF貌似很喜欢卡线段树的常数呢！）这真是个好方法啊！</p><h2><b>0100 </b>Tarjan算法（离线）</h2><p>如果题目没有强制要求在线算法，离线的Tarjan算法也是不错的选择，可以在线性时间内求出LCA。（Orz Tarjan大神……）这个算法要用到并查集。</p><br/>Tarjan算法基于dfs的框架,对于新搜到的一个结点,首先创建由这个结点构成的集合,再对当前结点的每个子树进行搜索; 每搜索完一棵子树,则可确定子树内的LCA询问都已解决,其他的LCA询问的结果必然在这个子树之外; 这时把子树所形成的集合与当前结点的集合合并,并将当前结点设为这个集合的祖先; 之后继续搜索下一棵子树,直到当前结点的所有子树搜完; 这时把当前结点也设为已被检查过的,同时可以处理有关当前结点的LCA询问; 如果有一个从当前结点到结点v的询问,且v已经被检查过; 则由于进行的是dfs,当前结点与v的最近公共祖先一定还没有被检查; 而这个最近公共祖先的包含v的子树一定已经搜索过了,那么这个最近公共祖先一定是v所在集合的祖先; <br/> 算法步骤: <br/> 对于每一个结点: <br/>(1)建立以u为代表元素的集合; <br/>(2)遍历与u相连的结点v,如果没有被访问过,对于v使用Tarjan_LCA算法,结束后将v的集合并入u的集合; <br/>(3)对于与u有关的询问(u,v),如果v被访问过,则结果就是v所在集合的代表元素; <div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n    <span class=\"n\">retrun</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]);</span>  \n<span class=\"p\">}</span>  \n  \n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">tarjan</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">){</span>  \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ques</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>  \n            <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">+=</span> <span class=\"n\">ques</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>  \n    <span class=\"p\">}</span>  \n    <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>  \n    <span class=\"n\">vis</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>  \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n        <span class=\"n\">tarjan</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]);</span>  \n        <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span> \n</code></pre></div><h2><b>0101</b> 我的神奇算法</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"c1\">//此算法还没有被发明出来\n</span></code></pre></div><br/><h2><b>0110 </b>小结</h2><p>其实LCA问题我个人做的不是很多，上面给了这么多代码，其实我真正打过的也就只有倍增法和Tarjan算法，其他的还有待实践。希望有朝一日自己能够纯熟掌握。The way so far.</p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "信息学竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/20030658"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25622534", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 6, 
            "title": "主席树与POJ2104", 
            "content": "<p>orz fotile主席</p><h2><b>2.7 </b>引入</h2><p>直接甩题：<a href=\"https://link.zhihu.com/?target=http%3A//poj.org/problem%3Fid%3D2104\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2104 -- K-th Number</a></p><p>这是一道模板题，一看就知道这是划分树（其实树套树打上瘾的我本来是想用线段树+Treap做的）。不过上次打完线段树后在<a href=\"https://www.zhihu.com/people/53a642c2d06d68a28a0b1550d1613bcc\" data-hash=\"53a642c2d06d68a28a0b1550d1613bcc\" class=\"member_mention\" data-title=\"@g1n0st\" data-editable=\"true\" data-hovercard=\"p$b$53a642c2d06d68a28a0b1550d1613bcc\">@g1n0st</a>的安利之下我去了解了一下主席树这个东西，于是乎，这道题又变成了主席树的模板题。</p><p>划分树在这里就不多介绍了，大概是把树划成左右两边，左边的任意元素都比右边小。接下来介绍主席树。</p><p>主席树是一种<i><u><b>可持久化数据结构</b></u></i>。它的每个节点对应一棵线段树。它利用函数式编程的思想使得可以访问历史版本，并且减少时间和空间消耗。</p><p>方便起见，我们定义如下变量：</p><ul><li>L，左孩子结点</li><li>R，右孩子结点</li><li>sum，节点总数</li><li>sz，数据域的大小</li></ul><br/><p>对于一个长度为n的序列，主席树以每个点的前缀[1...i]的区间建立一棵线段树，统计[L, R]在[1...i]中的节点数。对于区间[l, r]，节点o.sum[r] - o.sum[l-1]就是[l, r]内所有的节点数。</p><h2><b>2.71 </b>操作</h2><ol><li>建树。啊！我们先建立一棵空树。然后根据离散值将数据依次插入位置。</li><li>更新。根据自己的离散值寻找位置，sz+1，由于更新一个叶节点只会影响根节点到该叶节点的一条路径，故只需修改该路径上的信息域sz。每个主席树的节点即每棵线段树的结构完全相同，只是对应信息域sz不同。此时可以利用历史版本，即利用相邻的上一棵线段树的信息。相邻两颗线段树只有当前待处理的元素不同，其余位置完全一样（前缀）。因此，如果待处理的元素进入线段树的左子树的话，右子树是完全一样的，可以共用，即直接让当前线段树节点的右子树指针指向相邻的上一棵线段树的右子树；若进入右子树，同上。</li><li>查询。如果两个线段树的左子树节点数之差大于k，那么就直接到左子树里查找，否则，就把k减去sz之差，到右子树里查找。</li><li>时间复杂度分析：建树的时间复杂度是O(nlogn)，更新和查询的时间复杂度都是O(logn)，总时间复杂度是O(nolgn)</li></ol><br/><h2><b>2.718 </b>代码</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define maxn 100100\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">EOF</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span><span class=\"p\">(;</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">())</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(;</span> <span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">());</span>\n\t<span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">putchar</span><span class=\"p\">(</span><span class=\"sc\">&#39;-&#39;</span><span class=\"p\">),</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n\t<span class=\"n\">putchar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">chairtree</span><span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n\t<span class=\"n\">chairtree</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"o\">*</span><span class=\"mi\">20</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">ID</span><span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n\t<span class=\"kt\">bool</span> <span class=\"k\">operator</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ID</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">rank</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">T</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">sz</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">sz</span><span class=\"p\">;</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">sum</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">rank</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">rank</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">].</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">rank</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">L</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">].</span><span class=\"n\">L</span><span class=\"p\">].</span><span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">L</span><span class=\"p\">].</span><span class=\"n\">sum</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">L</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">].</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">].</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">tmp</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">rank</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"c1\">//freopen(&#34;test.in&#34;, &#34;r&#34;, stdin);\n</span><span class=\"c1\"></span>\t<span class=\"c1\">//freopen(&#34;test.out&#34;, &#34;w&#34;, stdout);\n</span><span class=\"c1\"></span>\t<span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">rank</span><span class=\"p\">[</span><span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">rank</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">--</span><span class=\"p\">){</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">[</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"p\">)].</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">putchar</span><span class=\"p\">(</span><span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"c1\">//fclose(stdin); fclose(stdout);\n</span><span class=\"c1\"></span>\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "POJ", 
                    "tagLink": "https://api.zhihu.com/topics/19599690"
                }
            ], 
            "comments": [
                {
                    "userName": "nimphy", 
                    "userLink": "https://www.zhihu.com/people/e8801b2b48eecaa9af2dc64dd9e19587", 
                    "content": "树套树好像爆内存", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25463944", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 37, 
            "title": "回文自动机", 
            "content": "<h2><b>2.7 </b>引入</h2>我们先来看一道题：<br/><p><a href=\"https://link.zhihu.com/?target=http%3A//uoj.ac/problem/103\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Universal Online Judge</a><br/></p><p>这道题是APIO2014的A题，如果不知道<a href=\"https://link.zhihu.com/?target=http%3A//baike.baidu.com/link%3Furl%3DVbW3hZoPCnN9rh2y_T0ckeA_69vkOjl9O7r4omVqZHOUoIxAtxusrKe4O0X2NG2ecwoPSKD3X03pfcr2_UTtEtykKoEp-D472jbLAZxQJVMEfoVkRAUny8vVS94ennS5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Manacher</a>算法的话大概就只能暴力乱搞了，毕竟这种题目KMP和AC自动机肯定是不能胜任的。然而就算知道Manacher算法，这道题也要用后缀数组实现啊（也有用后缀自动机过掉的）！应用到这道题上，动辄100+行的代码，在寒假里鏼鏼发抖的我肯定是不想打的，感觉太烦了（好了，其实是我看不懂）……于是我开始寻找一些简便的做法。然后，一个2014年新提出的新数据结构吸引了我——回文自动机（Palindromic Tree，亦称回文树）。这个数据结构用起来很方便，代码量也很小。作者的链接在这里啦，俄罗斯的神犇：<a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/profile/MikhailRubinchik\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MikhailRubinchik - Codeforces</a></p><h2><b>2.71 </b>介绍</h2>顾名思义，回文自动机嘛，就是拿来解决回文串问题的，方便起见，我们定义如下变量：<ul><li>len[i]，表示节点i所代表的回文串的长度<br/></li><li>next[i][ch]，表示在节点i所代表的回文串两边添加字符ch后形成的新回文串编号</li><li>fail[i]，保存失配边，表示节点i失配以后跳转不等于自身的节点i表示的回文串的最长后缀回文串（熟悉AC自动机的应该很熟悉这个数组啦）</li><li>cnt[i]，表示互不相同的回文串的个数</li><li>last，表示添加一个字母后最长回文串的节点</li><li>s[i]表示新添加的字符</li><li>size表示节点个数</li><li>n表示字符个数</li><li>----------------------更新----------------------</li><li>今天又看了一下网上大神的博客，发现还有个num[i]，表示以节点i表示的最长回文串的最右端点为回文串结尾的回文串个数。</li></ul><br/>那么回文自动机具体可以干那些事呢？<ul><li>求字符串S前缀0~i内不同回文串的个数</li><li>统计不同回文串出现的次数</li><li>统计回文串的个数</li><li>求以i结尾的回文串的个数</li></ul><br/>一开始的时候，回文自动机里有两个节点：0表示长度为偶数的回文串，1代表长度为奇数的回文串（貌似也有说一个是空串，一个是root的呢）。回文自动机也同时拥有两种边：字母边和后缀边（失配边）。如果节点i和节点j之间有一条字母边x相连，则表示在i的两边加上x可以变成j。如果变成后缀边，那么就表示j是i的最大后缀回文串，大概像下面这样。请注意，回文树的节点中并不存储回文串。<figure><noscript><img src=\"https://pic4.zhimg.com/v2-9fc6d3fb065500c07c4bec01c4505a93_b.png\" data-rawwidth=\"760\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic4.zhimg.com/v2-9fc6d3fb065500c07c4bec01c4505a93_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;310&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"760\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic4.zhimg.com/v2-9fc6d3fb065500c07c4bec01c4505a93_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9fc6d3fb065500c07c4bec01c4505a93_b.png\"/></figure><h2><b>2.718</b> 构造</h2><p>好了，下面我们来构造回文自动机吧！上文说了：</p><blockquote>一开始的时候，回文自动机里有两个节点：0表示长度为偶数的回文串，1代表长度为奇数的回文串<br/></blockquote><p>因此，一开始的时候，len[0] = 0, len[1] = -1, last = 0, s[0] = -1, n = 0, p = 2</p><p>接下来我们从第一个字母开始构造，假设我们已经有了一个字符串S0的回文自动机，ch是待插入字符，last此时正指向上一个构造好的回文串节点。现在我们在串的最后加上x，如果串首也是x那么我们可以继续了——这是一个新的回文串。如果不是，就沿着后缀边走，直到形成一个回文串为止。</p><p>如果我们找到的回文串的中间（去掉开头和结尾的x）已经有字母边x了，那就说明这个串已经出现过了，不用再处理了。如果没有，那么意味着这是一个新的回文串，我们为它加一条字母边x。加一条字母边的方法还是容易想到的，而后缀边的话重复上个步骤，设置一下然后更新last就行了。注意到在上一个步骤中我们找到的这个回文串如果是已经出现过的，就不用进行这一步了，可以往下递归。</p><p>比如说我们添加字符ch，s[++n] = ch，然后判断s[n-len[last]-1]是否等于是s[n]，如果等于，那么这是一个新的回文串，否则last = fail[last]。如果next[last][ch]没有后继，我们就新建一个节点（++p），让now = 新节点编号，len[now] = len[last] + 2，fail[now] = next[get_fail(fail[last])][ch]，其中get_fail是失配函数（相信熟悉匹配算法的对这个函数也不陌生），next[last][ch] = now。最后我们令last = next[last][ch]，cnt[last]++。</p><p>于是通过这种递归，我们就可以构造出一个回文自动机了。回文自动机的时间复杂度是O(n*|Alphabet|)，空间复杂度是O(n*log(|Alphabet|))，效率很不错，很妙妙啊！作者的论文链接：<a href=\"https://link.zhihu.com/?target=http%3A//codeforces.com/blog/entry/13959\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Palindromic tree: behind the scenes - Codeforces</a></p><h2><b>2.7182 </b>代码</h2><p>下面是我的引入中例题的AC代码，只有60行不到，很便捷。其中回文自动机我并没有模板化。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#define ri register int\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">maxn</span> <span class=\"o\">=</span> <span class=\"mi\">300010</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">tot</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">len</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">fail</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"mi\">27</span><span class=\"p\">],</span> <span class=\"n\">cur</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">new_node</span><span class=\"p\">(</span><span class=\"n\">ri</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">len</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">tot</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">tot</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">get_fail</span><span class=\"p\">(</span><span class=\"n\">ri</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ri</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">fail</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">];</span>\n\t<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">new_node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"n\">new_node</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">fail</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n\t<span class=\"n\">putchar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">init</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">ri</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">ri</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">get_fail</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]){</span>\n\t\t\t<span class=\"n\">ri</span> <span class=\"n\">nw</span> <span class=\"o\">=</span> <span class=\"n\">new_node</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">fail</span><span class=\"p\">[</span><span class=\"n\">nw</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">get_fail</span><span class=\"p\">(</span><span class=\"n\">fail</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">],</span><span class=\"n\">i</span><span class=\"p\">)][</span><span class=\"n\">x</span><span class=\"p\">];</span>\n\t\t\t<span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nw</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">son</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">last</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">tot</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">fail</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">tot</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">long</span><span class=\"p\">)</span><span class=\"n\">len</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": [
                {
                    "userName": "Prim", 
                    "userLink": "https://www.zhihu.com/people/9b90383536fadfdb1b6eaa146076062f", 
                    "content": "新姿势，学习一个", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25022790", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 10, 
            "title": "高斯消元", 
            "content": "致伟大的高斯：<b><i><u>数学家们都相信上帝有一本证明了所有命题的书，而上帝相信这本书在高斯手里。</u></i></b><h2><b>2.7 </b>开端</h2><p>对！没错！就是那个在老师布置了1+2+3+...+100后一会儿就算出来并且发现了这个数列前n项和Sn = ((n+1)×n)÷2 的高斯，他发明了一种解线性方程组的方法。不过貌似《九章算术》里早有记载，只不过那个时候没有“矩阵”的概念而已。前排orz古人。。。<figure><noscript><img src=\"https://pic4.zhimg.com/v2-b9ce476683f5195016199745f1aced3b_b.jpg\" data-rawwidth=\"86\" data-rawheight=\"86\" class=\"content_image\" width=\"86\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;86&#39; height=&#39;86&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"86\" data-rawheight=\"86\" class=\"content_image lazy\" width=\"86\" data-actualsrc=\"https://pic4.zhimg.com/v2-b9ce476683f5195016199745f1aced3b_b.jpg\"/></figure></p><blockquote>方程章第一题：“今有上禾(指上等稻子)三秉(指捆)中禾二秉，下禾一秉，实(指谷子)三十九斗；上禾二秉，中禾三秉，下禾一秉，实三十四斗；上禾一秉，中禾二秉，下禾三秉，实二十六斗．问上、中、下禾实一秉各几何”<br/></blockquote><br/><p>这个问题抽象成现代数学术语就是：<br/></p><blockquote>3x+2y+x=39<br/>2x+3y+z=34<br/>x+2y+3z=26</blockquote><p>求解x、y、z。</p><br/><h2><b>2.71</b> 发展</h2><p>对于这个小小的三元一次方程组，当然很容易解出来，但如果是一个一百元一次方程组，甚至是一千元一次方程组呢？嘿，你下半辈子都得用来还买草稿纸欠的债了。</p><p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-2885e7e8d966abf84c884c5889005b13_b.jpg\" data-rawwidth=\"450\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2885e7e8d966abf84c884c5889005b13_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;473&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"450\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2885e7e8d966abf84c884c5889005b13_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2885e7e8d966abf84c884c5889005b13_b.jpg\"/></figure>我们来看这个一般的线性方程组：</p><blockquote>a11x1+a12x1+...+a1nx1 = b1<br/>a21x2+a22x2+...+a2nx2 = b2<br/>...<br/>an1xn+an2xn+...+annxn = bn</blockquote><p>我们其实可以把它写成矩阵形式 AX = B：</p><p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-2fd646ca819b5623cbfca54df7a92366_b.jpg\" data-rawwidth=\"208\" data-rawheight=\"111\" class=\"content_image\" width=\"208\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;208&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"208\" data-rawheight=\"111\" class=\"content_image lazy\" width=\"208\" data-actualsrc=\"https://pic3.zhimg.com/v2-2fd646ca819b5623cbfca54df7a92366_b.jpg\"/></figure><figure><noscript><img src=\"https://pic3.zhimg.com/v2-630dd2c3df25192cdae720fbda1f338e_b.jpg\" data-rawwidth=\"33\" data-rawheight=\"111\" class=\"content_image\" width=\"33\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;33&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"33\" data-rawheight=\"111\" class=\"content_image lazy\" width=\"33\" data-actualsrc=\"https://pic3.zhimg.com/v2-630dd2c3df25192cdae720fbda1f338e_b.jpg\"/></figure><figure><noscript><img src=\"https://pic4.zhimg.com/v2-271666b3ec093936112b2253b6d53e8b_b.jpg\" data-rawwidth=\"33\" data-rawheight=\"111\" class=\"content_image\" width=\"33\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;33&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"33\" data-rawheight=\"111\" class=\"content_image lazy\" width=\"33\" data-actualsrc=\"https://pic4.zhimg.com/v2-271666b3ec093936112b2253b6d53e8b_b.jpg\"/></figure>上面三个矩阵依次表示A、X、B。</p><p>我们将上述矩阵变为增广矩阵：</p><p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-ff42f31d1c191b7c4b36ad156a8e98cf_b.jpg\" data-rawwidth=\"241\" data-rawheight=\"111\" class=\"content_image\" width=\"241\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;241&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"241\" data-rawheight=\"111\" class=\"content_image lazy\" width=\"241\" data-actualsrc=\"https://pic4.zhimg.com/v2-ff42f31d1c191b7c4b36ad156a8e98cf_b.jpg\"/></figure>然后运用初等行变换，第一次用2~n式减1式乘以一个常数消第一项，第二次用3~n式减2式乘以一个常数消第二项，以此类推，得到增广矩阵的上三角矩阵。其中由最后一行可得kann*xn = tbn（其中k、t为常数），直接得到xn，逐层回代就可以解出所有x1~xn啦！下面就是一个例子：</p><p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-9ca379fd4bb7156de42408fa535ee7d3_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9ca379fd4bb7156de42408fa535ee7d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9ca379fd4bb7156de42408fa535ee7d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9ca379fd4bb7156de42408fa535ee7d3_b.jpg\"/></figure>真是个好方法呀！之后的数学考试要是碰到一百元一次方程组就用它了（此话却似放屁）！</p><br/><h2><b>2.718 </b>高潮</h2><p>话说前几天杜教啊jiry_2啊等神犇貌似就在我隔壁机房给省选班的人讲课（没有NOIP成绩的我ZJOI2017已经gg了呢！），本该去膜一下的……<figure><noscript><img src=\"https://pic1.zhimg.com/v2-ebddfbd3978ddbedb3f70f9a46fffd64_b.jpg\" data-rawwidth=\"580\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic1.zhimg.com/v2-ebddfbd3978ddbedb3f70f9a46fffd64_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"580\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic1.zhimg.com/v2-ebddfbd3978ddbedb3f70f9a46fffd64_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ebddfbd3978ddbedb3f70f9a46fffd64_b.jpg\"/></figure></p><p>闲话少说……聊正题：那么，高斯消元的算法模板是怎么样的呢？我们用二维数组A[i][j]来表示矩阵，那么如果我们要用第i个方程消去第k个方程的第i列，那么第k列的所有元素A[k][j]都应该减去A[i][j]的A[k][i]/A[i][i]倍。代码如下：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">typedef</span> <span class=\"kt\">double</span> <span class=\"n\">Matrix</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n\n<span class=\"c1\">//A为增广矩阵，第n列为bi，运行后A[i][n]为xi的值\n</span><span class=\"c1\"></span><span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">Gauss</span><span class=\"p\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"c1\">//选一行r与i交换\n</span><span class=\"c1\"></span>        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]))</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n        <span class=\"c1\">//与i+1~n行进行消元\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">k</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">){</span>\n            <span class=\"kt\">double</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/*如果精度要求比较高，可以用如下方法消元\n</span><span class=\"cm\">    for(j=n;j&gt;=i;j--)\n</span><span class=\"cm\">        for(k=i+1;k&lt;n;++k)\n</span><span class=\"cm\">            A[k][j] -= A[k][i] / A[i][i] * A[i][j];\n</span><span class=\"cm\">    */</span>\n    <span class=\"c1\">//回代\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n        <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">/=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br/><br/><h2><b>2.7182 </b>结局</h2><p>其实还有一种更加便捷的消元法，叫高斯-约当消元法，是对高斯消元的改进，在这里不做叙述。</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-a26e685f2ce2c05995891a4466fa3139_b.jpg\" data-rawwidth=\"466\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"466\" data-original=\"https://pic2.zhimg.com/v2-a26e685f2ce2c05995891a4466fa3139_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;466&#39; height=&#39;350&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"466\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"466\" data-original=\"https://pic2.zhimg.com/v2-a26e685f2ce2c05995891a4466fa3139_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a26e685f2ce2c05995891a4466fa3139_b.jpg\"/></figure><h2><b>2.71828</b> 例题</h2><p>唉，据我所知，本人太懒了，懒得找例题……<br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-711fa8259f7bec5d360fe396ebbe6883_b.jpg\" data-rawwidth=\"440\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"440\" data-original=\"https://pic4.zhimg.com/v2-711fa8259f7bec5d360fe396ebbe6883_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;440&#39; height=&#39;440&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"440\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"440\" data-original=\"https://pic4.zhimg.com/v2-711fa8259f7bec5d360fe396ebbe6883_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-711fa8259f7bec5d360fe396ebbe6883_b.jpg\"/></figure><h2><b>2.718281</b> 还有一件事……</h2><p>聪明的你一定发现了，标题的编号是按照自然常数e编号的呢！<figure><noscript><img src=\"https://pic4.zhimg.com/v2-a6a1ed556e9f77fd811fd7c02ebadcfb_b.jpg\" data-rawwidth=\"297\" data-rawheight=\"300\" class=\"content_image\" width=\"297\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;297&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"297\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"297\" data-actualsrc=\"https://pic4.zhimg.com/v2-a6a1ed556e9f77fd811fd7c02ebadcfb_b.jpg\"/></figure></p>", 
            "topic": [
                {
                    "tag": "数论", 
                    "tagLink": "https://api.zhihu.com/topics/19558748"
                }, 
                {
                    "tag": "线性代数", 
                    "tagLink": "https://api.zhihu.com/topics/19577698"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "初等行变换是什么？？？突然看不懂了(⋟﹏⋞)", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>（1）用一非零的数乘以某一方程</p><p>（2）把一个方程的倍数加到另一个方程</p><p>（3）互换两个方程的位置</p><p>来自百科</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "好...我再研究研究", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25011351", 
            "userName": "LoliconAutomaton", 
            "userLink": "https://www.zhihu.com/people/bc1acec765826580b2401815ee366ef2", 
            "upvote": 0, 
            "title": "经典DP：POJ 1088", 
            "content": "想当年普及的时候DP是我最弱的一块……（我才不会告诉你现在也是呢！）自然要好好补一补。某日翻着POJ（UOJ上那些高大上的DP题不会捉），突然看见一道还没A掉的中文题！于是快来A掉吧！<p>题目描述：</p><p>Michael喜欢滑雪百这并不奇怪， 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael想知道载一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子 <br/></p><div class=\"highlight\"><pre><code class=\"language-text\">1  2  3  4 5\n\n16 17 18 19 6\n\n15 24 25 20 7\n\n14 23 22 21 8\n\n13 12 11 10 9</code></pre></div><p><br/>一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。</p><p><br/>分析：这是一道典型的DP，我们用f[i][j]表示滑到f[i][j]是的最大高度，用a[i][j]来保存高度。那么很容易就得出了当四个方向中某个方向上的高度比a[i][j]小时，f[i][j] = max{f[i][j], f[i-1][j], f[i+1][j], f[i][j-1], f[i][j+1]} + 1。然而身为蒟蒻的我并不知道如何用递推法来算，只能用递归来写了呢！代码还是挺low的，用了四个if……后来想想，好像对于a[i][j]，如果四个方向上某个方向是可以继续往下滑的，就连一条有向边，然后就转化成萌萌哒DAG上的最长路问题了！然而还没有想过是不是会构造出有环图。AC代码如下（不要在意我的输入优化）：<br/></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">maxn</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">maxn</span><span class=\"p\">][</span><span class=\"n\">maxn</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">;</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">char</span> <span class=\"nf\">getc</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1000000</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">EOF</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">getc</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span><span class=\"p\">(;</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"o\">&gt;=</span><span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span><span class=\"o\">&lt;=</span><span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span><span class=\"n\">ch</span><span class=\"o\">=</span><span class=\"n\">getc</span><span class=\"p\">())</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(;(</span><span class=\"n\">ch</span><span class=\"o\">&gt;=</span><span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;=</span><span class=\"sc\">&#39;9&#39;</span><span class=\"p\">);</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"n\">ch</span><span class=\"o\">-</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"n\">ch</span><span class=\"o\">=</span><span class=\"n\">getc</span><span class=\"p\">());</span>\n\t<span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"nf\">dp</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxx</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">C</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxx</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxx</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxx</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"n\">maxx</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">);</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]),</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">maxx</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)));</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">maxx</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>", 
            "topic": [
                {
                    "tag": "动态规划", 
                    "tagLink": "https://api.zhihu.com/topics/19660018"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/galahad"
}
