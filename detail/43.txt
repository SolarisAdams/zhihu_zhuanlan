{
    "title": "前端开发之路", 
    "description": "前端开发知识分享", 
    "followers": [
        "https://www.zhihu.com/people/raznov", 
        "https://www.zhihu.com/people/ying-luo-85-35", 
        "https://www.zhihu.com/people/kevin-92-18-83-81", 
        "https://www.zhihu.com/people/jin-ge-17-75", 
        "https://www.zhihu.com/people/hei-tou-fa-de-xiao-qiang", 
        "https://www.zhihu.com/people/xiong-guo-4", 
        "https://www.zhihu.com/people/la-la-la-77-18-89", 
        "https://www.zhihu.com/people/bao-feng-xi-ru", 
        "https://www.zhihu.com/people/zhang-biao-biao-57", 
        "https://www.zhihu.com/people/ice-10-16", 
        "https://www.zhihu.com/people/cha-cha-cha-7-60", 
        "https://www.zhihu.com/people/jiangxiuyu-4", 
        "https://www.zhihu.com/people/sono-64", 
        "https://www.zhihu.com/people/jian-yi-96-53", 
        "https://www.zhihu.com/people/mr-lin-82-68", 
        "https://www.zhihu.com/people/mu-qi-53", 
        "https://www.zhihu.com/people/er-gen-de-tu-di", 
        "https://www.zhihu.com/people/longe-93", 
        "https://www.zhihu.com/people/moer-99-7", 
        "https://www.zhihu.com/people/vccf-19", 
        "https://www.zhihu.com/people/yu-chun-8-66", 
        "https://www.zhihu.com/people/qiao-di-ya", 
        "https://www.zhihu.com/people/wuterry_visionsense", 
        "https://www.zhihu.com/people/cbyu-97", 
        "https://www.zhihu.com/people/huang-zi-nan-59", 
        "https://www.zhihu.com/people/mei-xiao-xi-88", 
        "https://www.zhihu.com/people/deng-dai-shi-xi-shui-chang-liu-14", 
        "https://www.zhihu.com/people/raffe-fan", 
        "https://www.zhihu.com/people/idseir", 
        "https://www.zhihu.com/people/wen-rou-yu-san-man", 
        "https://www.zhihu.com/people/yang-thomas-81", 
        "https://www.zhihu.com/people/qing-shi-shan-ren", 
        "https://www.zhihu.com/people/yu-zhi-bo-hua-ge", 
        "https://www.zhihu.com/people/meng-zhen-56-57", 
        "https://www.zhihu.com/people/tian-ya-she-qu", 
        "https://www.zhihu.com/people/young-31-48", 
        "https://www.zhihu.com/people/zhang-xiong-20-78", 
        "https://www.zhihu.com/people/ji-zhi-de-er-ha-48", 
        "https://www.zhihu.com/people/ci-shi-29", 
        "https://www.zhihu.com/people/eric-91-47", 
        "https://www.zhihu.com/people/zhong-rui-777", 
        "https://www.zhihu.com/people/damonko", 
        "https://www.zhihu.com/people/stztc", 
        "https://www.zhihu.com/people/suds-1", 
        "https://www.zhihu.com/people/willxu", 
        "https://www.zhihu.com/people/jimmy-liu-39", 
        "https://www.zhihu.com/people/seulserly", 
        "https://www.zhihu.com/people/johnson-36-33", 
        "https://www.zhihu.com/people/xiao-yi-mi-92", 
        "https://www.zhihu.com/people/neverstudy", 
        "https://www.zhihu.com/people/xue-zhi-95-53", 
        "https://www.zhihu.com/people/li-tao-20-72", 
        "https://www.zhihu.com/people/zgltxhhz", 
        "https://www.zhihu.com/people/joycjay", 
        "https://www.zhihu.com/people/lazhi-guang", 
        "https://www.zhihu.com/people/cubesugarZhang", 
        "https://www.zhihu.com/people/jiu-meng-84-81", 
        "https://www.zhihu.com/people/xie-luo-zhi-qiu-20-85-96", 
        "https://www.zhihu.com/people/ocean-39-23", 
        "https://www.zhihu.com/people/lichuang", 
        "https://www.zhihu.com/people/gei-wo-yi-bei-ka-fei", 
        "https://www.zhihu.com/people/solitude-92-20", 
        "https://www.zhihu.com/people/tian-kong-mei-you-yun-32", 
        "https://www.zhihu.com/people/li-can-bin-81", 
        "https://www.zhihu.com/people/du-meng-long-56", 
        "https://www.zhihu.com/people/li-ning-38-5", 
        "https://www.zhihu.com/people/da-xiong-37-98", 
        "https://www.zhihu.com/people/pelinxiao", 
        "https://www.zhihu.com/people/qi-qi-15-74-99", 
        "https://www.zhihu.com/people/hadoli", 
        "https://www.zhihu.com/people/alpha-23-46", 
        "https://www.zhihu.com/people/zuoxue", 
        "https://www.zhihu.com/people/kan-kan-liao-kan-kan", 
        "https://www.zhihu.com/people/fa-xian-liao-zen-yao", 
        "https://www.zhihu.com/people/prayinc", 
        "https://www.zhihu.com/people/frost-44", 
        "https://www.zhihu.com/people/xiao-han-33-40-56", 
        "https://www.zhihu.com/people/tang-xiao-lu-3-25", 
        "https://www.zhihu.com/people/jin-pi-pi-41", 
        "https://www.zhihu.com/people/login-16", 
        "https://www.zhihu.com/people/yang-hai-tao-59-29", 
        "https://www.zhihu.com/people/pan-yu-xi-31", 
        "https://www.zhihu.com/people/li-zeng-wang-87", 
        "https://www.zhihu.com/people/beginedc", 
        "https://www.zhihu.com/people/zhang-huan-73-68", 
        "https://www.zhihu.com/people/yang-li-13-24", 
        "https://www.zhihu.com/people/zhao-ying-li-57", 
        "https://www.zhihu.com/people/maochongxin", 
        "https://www.zhihu.com/people/bu-shan-yan-ci-94-61", 
        "https://www.zhihu.com/people/wang-shi-da-21-90", 
        "https://www.zhihu.com/people/Lucius-Ni", 
        "https://www.zhihu.com/people/long-long-25-86", 
        "https://www.zhihu.com/people/jorden-chang", 
        "https://www.zhihu.com/people/feng-feng-feng-dian-dian-de-xiao-qing-xu", 
        "https://www.zhihu.com/people/xi-ba-33-88", 
        "https://www.zhihu.com/people/lan-tian-chen-36", 
        "https://www.zhihu.com/people/he-jing-52-25", 
        "https://www.zhihu.com/people/shi-chuang-75", 
        "https://www.zhihu.com/people/xiao-wo-2-79", 
        "https://www.zhihu.com/people/qiu-cheng-jiu-gou", 
        "https://www.zhihu.com/people/min-guo-31-16", 
        "https://www.zhihu.com/people/jiu-sang-29-21", 
        "https://www.zhihu.com/people/mengdedede", 
        "https://www.zhihu.com/people/dementia-dang", 
        "https://www.zhihu.com/people/hua-bai-62-27", 
        "https://www.zhihu.com/people/whl-38-5", 
        "https://www.zhihu.com/people/yan-zhi-jian-50", 
        "https://www.zhihu.com/people/design-sea", 
        "https://www.zhihu.com/people/yan-chang-chun-24", 
        "https://www.zhihu.com/people/pi-feng-6-43", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/xu5175", 
        "https://www.zhihu.com/people/ni-de-zhen-shi-xing-ming-79-96", 
        "https://www.zhihu.com/people/liuyong-56", 
        "https://www.zhihu.com/people/ye-meng-46", 
        "https://www.zhihu.com/people/cai-guo-qing-96", 
        "https://www.zhihu.com/people/reafagon", 
        "https://www.zhihu.com/people/mmm-90-25", 
        "https://www.zhihu.com/people/liu-qian-qian-40-94", 
        "https://www.zhihu.com/people/ci-ci-62-96", 
        "https://www.zhihu.com/people/wu-xin-ren-91", 
        "https://www.zhihu.com/people/gao-ding-gan-34", 
        "https://www.zhihu.com/people/wang-hao-feng-87-31", 
        "https://www.zhihu.com/people/2245637389", 
        "https://www.zhihu.com/people/zhi-tiao-lao-hu", 
        "https://www.zhihu.com/people/anguoi", 
        "https://www.zhihu.com/people/xupengfei61", 
        "https://www.zhihu.com/people/chen-hao-liang-2", 
        "https://www.zhihu.com/people/guo-dong-72-91", 
        "https://www.zhihu.com/people/huang-hun-20", 
        "https://www.zhihu.com/people/e-e-66-86-25", 
        "https://www.zhihu.com/people/yige-xiao-tou-ming-31", 
        "https://www.zhihu.com/people/dumin-57", 
        "https://www.zhihu.com/people/jin-xiao-68-69", 
        "https://www.zhihu.com/people/ben-pao-ba-mai-di", 
        "https://www.zhihu.com/people/zizhe-ruan", 
        "https://www.zhihu.com/people/xie-zi-jun-91", 
        "https://www.zhihu.com/people/kaiwensun", 
        "https://www.zhihu.com/people/lipskye", 
        "https://www.zhihu.com/people/curtainr", 
        "https://www.zhihu.com/people/jing--67", 
        "https://www.zhihu.com/people/qwqxiao-yu", 
        "https://www.zhihu.com/people/SecondaryMarquis", 
        "https://www.zhihu.com/people/ybtk", 
        "https://www.zhihu.com/people/mcsomeon", 
        "https://www.zhihu.com/people/charlex-18", 
        "https://www.zhihu.com/people/fen-xiang-79-49", 
        "https://www.zhihu.com/people/liu-yang-49-92-94", 
        "https://www.zhihu.com/people/zhang-huan-huan-51", 
        "https://www.zhihu.com/people/f5soft", 
        "https://www.zhihu.com/people/lin-yi-qing-ta-da-ye", 
        "https://www.zhihu.com/people/ariesz", 
        "https://www.zhihu.com/people/yi-tian-wan-li-xu-chang-jian-86", 
        "https://www.zhihu.com/people/yang-zhi-zhao-cai-mao", 
        "https://www.zhihu.com/people/huang-fu-bin-12", 
        "https://www.zhihu.com/people/s22464580s", 
        "https://www.zhihu.com/people/must-36-73", 
        "https://www.zhihu.com/people/xiao-wen-55-60", 
        "https://www.zhihu.com/people/oddish", 
        "https://www.zhihu.com/people/wu-zhi-zhe-64-1", 
        "https://www.zhihu.com/people/kevin-yeh-37", 
        "https://www.zhihu.com/people/li-sheng-52-20", 
        "https://www.zhihu.com/people/xuan-shao-94-84", 
        "https://www.zhihu.com/people/mou-xian-ya", 
        "https://www.zhihu.com/people/xu-lei-11-64", 
        "https://www.zhihu.com/people/wei-feng-bu-zao-24-39", 
        "https://www.zhihu.com/people/ynwai-en", 
        "https://www.zhihu.com/people/dreamsline", 
        "https://www.zhihu.com/people/cancer-61", 
        "https://www.zhihu.com/people/liu-qiang-34-59", 
        "https://www.zhihu.com/people/xing-kong-91-28", 
        "https://www.zhihu.com/people/cao-yi-ming-27", 
        "https://www.zhihu.com/people/mai-zi-3-18-51", 
        "https://www.zhihu.com/people/shi-you-68-94", 
        "https://www.zhihu.com/people/da-xian-yu-er", 
        "https://www.zhihu.com/people/hun-yuan-pi-li-shou-lei-feng-27", 
        "https://www.zhihu.com/people/yzw-23-48", 
        "https://www.zhihu.com/people/liu-xin-yu-78-37", 
        "https://www.zhihu.com/people/huang-ren-xun-15", 
        "https://www.zhihu.com/people/barbara-zhou", 
        "https://www.zhihu.com/people/zuo-xin-zhong-de-zi-ji", 
        "https://www.zhihu.com/people/mrthinker", 
        "https://www.zhihu.com/people/wu-you-26-94", 
        "https://www.zhihu.com/people/guo-ke-52-16-46", 
        "https://www.zhihu.com/people/jessie-lin-4", 
        "https://www.zhihu.com/people/ye-xiao-er-50", 
        "https://www.zhihu.com/people/OceanaChen", 
        "https://www.zhihu.com/people/lao-pang-23", 
        "https://www.zhihu.com/people/rui-la-91-54", 
        "https://www.zhihu.com/people/li-zhi-wen-2-43", 
        "https://www.zhihu.com/people/searzhang", 
        "https://www.zhihu.com/people/pang-li-zi", 
        "https://www.zhihu.com/people/chen-xi-92-24", 
        "https://www.zhihu.com/people/xiao-ming-16-22", 
        "https://www.zhihu.com/people/lucky-59-98-52", 
        "https://www.zhihu.com/people/AdminPro", 
        "https://www.zhihu.com/people/xu-qing-jia-yi", 
        "https://www.zhihu.com/people/jiang-wen-46-85", 
        "https://www.zhihu.com/people/yi-lun-77-52", 
        "https://www.zhihu.com/people/ju-ji-shou-3-55", 
        "https://www.zhihu.com/people/wu-yan-81-62", 
        "https://www.zhihu.com/people/youngboy-41", 
        "https://www.zhihu.com/people/alex-39-22", 
        "https://www.zhihu.com/people/zhou-chen-cheng-94", 
        "https://www.zhihu.com/people/qin-si-yuan-13-51", 
        "https://www.zhihu.com/people/a-si-la-46", 
        "https://www.zhihu.com/people/wen-mo-chu-61", 
        "https://www.zhihu.com/people/chen-qi-cheng-35", 
        "https://www.zhihu.com/people/wang-wen-rui-30-73", 
        "https://www.zhihu.com/people/jiu-chi-73-35", 
        "https://www.zhihu.com/people/yuan-yi-ming-75", 
        "https://www.zhihu.com/people/271788203", 
        "https://www.zhihu.com/people/huang-lan-lan-59", 
        "https://www.zhihu.com/people/lgz666", 
        "https://www.zhihu.com/people/rioooo-he", 
        "https://www.zhihu.com/people/betty-zhang", 
        "https://www.zhihu.com/people/wu-zhi-xian-57-44", 
        "https://www.zhihu.com/people/han-jing-39-98", 
        "https://www.zhihu.com/people/gu-ruan-13", 
        "https://www.zhihu.com/people/li-zi-jiang-1994", 
        "https://www.zhihu.com/people/song2000-47", 
        "https://www.zhihu.com/people/li-jian-78-55", 
        "https://www.zhihu.com/people/miao-miao-27-48", 
        "https://www.zhihu.com/people/wang-hao-43-3", 
        "https://www.zhihu.com/people/tang-xiao-fang-76", 
        "https://www.zhihu.com/people/bao-er-ge-62", 
        "https://www.zhihu.com/people/li-kai-64-64", 
        "https://www.zhihu.com/people/he-xiang-68-55", 
        "https://www.zhihu.com/people/lions-17-6", 
        "https://www.zhihu.com/people/wang-zi-an-56-38", 
        "https://www.zhihu.com/people/shi-tou-93-15", 
        "https://www.zhihu.com/people/yang-yang-81-6", 
        "https://www.zhihu.com/people/ju-ju-ju-zi-jiang-i", 
        "https://www.zhihu.com/people/evazhang-69", 
        "https://www.zhihu.com/people/chen-cheng-49-88", 
        "https://www.zhihu.com/people/li-zheng-yu-71-41", 
        "https://www.zhihu.com/people/xi-gua-da-ren-53", 
        "https://www.zhihu.com/people/xliujun", 
        "https://www.zhihu.com/people/hao-tian-93-26", 
        "https://www.zhihu.com/people/lewis-2-87", 
        "https://www.zhihu.com/people/li-ya-fan-12", 
        "https://www.zhihu.com/people/duan-zi-yu-51-78", 
        "https://www.zhihu.com/people/yi-wen-7-31", 
        "https://www.zhihu.com/people/huang-mao-jie-37"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/62315025", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 3, 
            "title": "JavaScript 怎么学 - 执行上下文, 执行栈, 事件循环", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在这一篇文章中, 我希望能够用最简单明了的语言去解释 JavaScript 代码是如何执行的.</p><h2># 基础概念解析</h2><h3>## 编译原理</h3><p>首先我们要知道, 我们写的代码是给人看的, 机器是看不懂的. 为了让代码可以被机器执行, 需要将代码转换为机器语言. &#34;编译型语言&#34; 是先将所有代码编译完成之后, 才开始执行. <b>JavaScript 是 &#34;解释型语言&#34;</b>, 它会在程序的运行过程中进行编译. 在代码执行前极短的时间内将其转换成机器语言.</p><p>JavaScript 的编译过程分为两个阶段：<b>编译期</b> &amp; <b>执行期</b>。</p><p>在 &#34;编译期&#34; 阶段, 由解释器完成, 它主要分为下面几个步骤:</p><ol><li><b>词法分析</b>: 将由代码分解成（对编程语言来说）有意义的代码块，这些代码块被称为 &#34;词法单元&#34;. 例如，<code>var a = 2</code>; 这段程序通常会被分解成为下面这些词法单元： <code>var</code>, <code>a</code>, <code>=</code>, <code>2</code>, <code>;</code>.</li><li><b>语法分析</b>: 将 &#34;词法单元&#34; 转换为一代表了程序语法结构的树结构, 被称为 &#34;抽象语法树&#34; .</li><li><b>生成可执行代码</b>: 将抽象语法树转换成机器可以执行的代码.</li></ol><p>在 &#34;执行期&#34; 阶段, 由 JavaScript 引擎完成, 主要分成以下步骤:</p><ol><li><b>创建执行上下文</b>: 执行上下文用以描述代码执行时所处的环境. 在后文我会详细讲述;</li><li><b>执行代码</b>: 执行上下文创建完之后, 处于内部的代码会被引擎逐句执行;</li></ol><hr/><h3>## 作用域</h3><p>作用域可以理解为一套规则, 它<b>定义了变量和函数的可访问范围，控制着变量和函数的可见性与生命周期</b>.</p><p>作用域可分为, 静态作用域, 或者动态作用域. JavaScript 采用词法作用域 (lexical scoping), 也就是静态作用域。</p><ul><li><b>静态 (词法) 作用域</b>: 静态作用域在代码的 &#34;词法分析&#34; 阶段就确定了. 变量的可访问范围取决于源代码, 与程序的执行流程没关系. 作用域的确定不需要程序运行, 只通过静态分析就可以.</li><li><b>动态作用域</b>: 动态作用域是根据程序的运行动态确定的. 动态作用域并不关心变量和函数是如何声明以及在何处声明的, 它只关心他们是在何处被调用的.</li></ul><hr/><h3>## 执行上下文</h3><p>执行上下文 (execution context), 是一个抽象概念, <b>用于描述代码执行时所处的作用域环境</b>. 它定义代码语句对变量或函数的访问权. </p><p>在代码的 &#34;执行期&#34;, JavaScript 引擎会创建执行上下文. 在 JavaScript 中, 它表现为一个内部对象. 每当 Javascript 代码在运行的时候，它都是在执行上下文中运行。</p><p>JavaScript 中有三种执行上下文:</p><ul><li><b>全局执行上下文</b>: 默认的代码运行环境，一旦代码被载入执行，引擎最先创建的就是这个环境. 不写在函数内的代码, 被执行时处于全局执行上下文.</li><li><b>函数执行上下文</b>: 写在函数内的代码运行时, 处于函数执行上下文.</li><li><b>eval 执行上下文</b>: 作为 eval 函数参数的代码, 运行时处于 eval 执行上下文. 这里略过不讲.</li></ul><p>在函数被调用之前, 函数的执行上下文会被创建. 在创建过程中, 主要做如下三件事:</p><ol><li>创建变量对象</li><li>创建作用域链;</li><li>确定 <code>this</code> 指向;</li></ol><p>在下文里, 我会逐一介绍.</p><hr/><h3>## 调用栈 (执行环境栈)</h3><p>JavaScript 引擎<b>用以追踪函数执行流的一种机制</b>。</p><p>当执行环境中调用了多个函数时，通过这种机制，我们能够追踪到哪个函数正在执行，执行的函数体中又调用了哪个函数。</p><p>它遵循 &#34;先进后出&#34; 的栈结构. 第一个被创建, 并推入栈的一定为 &#34;全局执行上下文&#34;.  之后, 当一个函数要被调用之前， JavaScript 引擎会为它创建 &#34;函数执行上下文&#34;,  然后压入调用栈中。</p><p>当函数执行完毕, 函数的执行环境被从栈中弹出销毁, 把控制权交给之前的执行环境. 即使是同一个函数, 它每次被调用时, 都会创建一个单独的执行上下文.</p><p>到最后, 全部代码执行结束, &#34;全局执行上下文&#34; 被弹出栈销毁.</p><p>举例说明:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;Hello World!&#34;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">first</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;1&#34;</span><span class=\"p\">);</span>\n  <span class=\"nx\">second</span><span class=\"p\">();</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;1 again&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">second</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;2&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">first</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 结果: 1 -&gt; 2 -&gt; 1 again -&gt; 0\n</span></code></pre></div><p>上面代码里, 执行上下文在执行栈中被推入和销毁顺序为:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-807e63284e50df2a6f632165d2416b71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"954\" data-original=\"https://pic2.zhimg.com/v2-807e63284e50df2a6f632165d2416b71_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;954&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"954\" data-original=\"https://pic2.zhimg.com/v2-807e63284e50df2a6f632165d2416b71_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-807e63284e50df2a6f632165d2416b71_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h3>## 变量对象 / 活动对象</h3><h3>### 变量对象 (Variable Object)</h3><p>在创建执行上下文的时候, 变量对象会被创建. 执行上下文中的所有变量声明, 函数声明都会被扫描出来, 然后在变量对象上创建同名属性. 如果是在函数执行上下文中的话, 变量对象里还包括了函数的形参集合. </p><p>通过变量对象, 执行上下文就可以知道自己有哪些数据. 这个对象是给 JavaScript 引擎用的, 开发者不可以访问到.</p><p>函数执行上下文中, 变量对象的创建，依次经历了以下几个过程:</p><ol><li>创建 <code>arguments</code> 对象. 检测函数调用时所处上下文传入的参数, 在该对象下创建属性, 和初始化属性值;</li><li> 扫描函数内的所有函数声明:<br/> </li><li> 为每一个函数声明,在变量对象上创建一个同名属性, 属性值为函数在内存中的引用;<br/> </li><li> 如果已有同名属性存在, 则属性值被重写覆盖为新函数的引用;<br/> </li><li> 扫描函数内的变量声明:<br/> </li><li> 为每一个变量声明, 在变量对象创建一个同名属性, 属性值初始化为 <code>undefined</code>;<br/> </li><li>如果已有同名属性存在, 为防止同名函数被重写为 <code>undefined</code>. 变量声明会被跳过, 原属性值不会被修改;</li></ol><p>等函数中的代码被 JavaScript 引擎执行时, 具体的变量赋值才会进行.</p><p>举例说明:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">a</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// function b() {}\n</span><span class=\"c1\"></span>\n  <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">b</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 123\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n\n<span class=\"nx\">a</span><span class=\"p\">();</span>\n</code></pre></div><p>在执行 <code>b = 123</code> 这句赋值语句之前, 变量对象中的 <code>b</code> 属性的值为函数. 但赋值语句让 <code>b</code> 属性的值被改写成了 <code>123</code>. 在创建变量对象阶段里, <code>fucntion b</code> 声明被先处理, <code>var b</code> 声明被跳过. 请一定要分清执行上下文的创建阶段, 和代码执行阶段.</p><h3>### 活动对象 (Activation Object)</h3><p>前文说, 执行上下文被创建完后, 会被推入执行栈的顶部, 然后 JavaScript 引擎开始逐行执行里面的代码. </p><p>活动对象, 和变量对象其实指的都是同一个对象, 但只有在执行栈顶部的执行上下文中的变量对象里的属性才可以被访问, 它也就被称为 &#34;活动对象&#34;.</p><h3>### 变量提升</h3><p>在了解了变量对象的创建流程之后, 变量提升就很容易被理解啦. 因为在代码被执行之前, 变量声明, 函数声明已经先被扫描出来, 并在变量对象中创建同名属性了. 所以在代码执行阶段, 即使在变量声明之前去获取变量也是可以的. 只不过那个时候, 变量赋值还没被执行, 变量的值为 <code>undefined</code>.</p><hr/><h3>## 作用域链</h3><p>作用域链, 由当前执行上下文和它上层的执行上下文的 &#34;变量对象&#34; 组成, 它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p><p>在创建函数执行上下文的时候, 作用域链会被建立.</p><p>举例说明:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">fun</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">innerFun</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span> <span class=\"o\">+</span> <span class=\"nx\">c</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">innerFun</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">fun</span><span class=\"p\">();</span>\n</code></pre></div><p>上面的代码运行时, 全局执行上下文, fun 函数执行上下文, innerFun 执行上下文被依次创建, 推入执行栈. 设定他们的变量对象分别为 VO(global)，VO(fun), VO(innerFun). 那么 innerFun 的作用域链, 同时包含这三个变量对象.</p><p>我们可以直接用一个数组来表示 innerFun 的作用域链:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">[</span><span class=\"nx\">VO</span><span class=\"p\">(</span><span class=\"nx\">innerFun</span><span class=\"p\">),</span> <span class=\"nx\">VO</span><span class=\"p\">(</span><span class=\"nx\">fun</span><span class=\"p\">),</span> <span class=\"nx\">VO</span><span class=\"p\">(</span><span class=\"nx\">global</span><span class=\"p\">)];</span>\n</code></pre></div><p>作用域链会保存在函数的内部属性 <code>[[Scope]]</code> 上. 内部属性供 JavaScript 引擎使用, 开发者是访问不到这个属性的.</p><hr/><h3>## this</h3><p><b><code>this</code> 指向是函数执行时所在的环境对象</b>. 在函数被调用前, 创建执行上下文的过程中被确定. 之后在函数执行的过程中, <code>this</code> 的指向已经被确定，就不可更改了.</p><h3>### 全局中的 this</h3><p>在全局执行上下文中, <code>this</code> 指向它自身, 也就是全局对象. 在浏览器中为 <code>window</code> 对象, 在 Node 中为 <code>global</code> 对象</p><h3>### 函数中的 this</h3><p>前面说, <code>this</code> 指向是函数执行时所在的环境对象. 简单来说, <b>函数的 <code>this</code> 指向它的调用者</b>. 如果函数被一个对象所拥有, 该函数被对象调用时, <code>this</code> 指向该对象. 如果函数独立调用, <code>this</code> 的值为 <code>undefined</code>. 非严格模式下, 当 <code>this</code> 的值为 <code>undefined</code> 时, 它会被自动指向全局对象.</p><p>举例说明:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">fn</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">fn_2</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">;</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">();</span> <span class=\"c1\">// 1, this 指向 obj\n</span><span class=\"c1\"></span><span class=\"nx\">fn_2</span><span class=\"p\">();</span> <span class=\"c1\">// 0, this 指向 window\n</span></code></pre></div><p>上例中, 即使 <code>fn_2</code> 和 <code>fn</code> 指向同一个函数. 但是 <code>fn_2</code> 为独立调用, <code>this</code> 的值为 <code>undefined</code>, 在非严格模式下, 指向 <code>window</code>.</p><h3>### 显式改变 this 指向</h3><p>通过 <code>call</code>, <code>apply</code>, <code>bind</code>, 我们可以显式的执行函数执行上下文的 <code>this</code> 指向.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">fn</span><span class=\"p\">();</span> <span class=\"c1\">// 0\n</span><span class=\"c1\"></span><span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">);</span> <span class=\"c1\">// 1\n</span></code></pre></div><p>这里就不再赘述各种方法的使用细节了, 大家可以自行查阅文档.</p><h3>### 构造函数 &amp; 原型方法的 this</h3><p>前面所说的 <code>this</code> 绑定都是在直接调用函数的情况下. 当使用 <code>new</code> 操作符调用构造函数创建对象实例的时候, <code>this</code> 绑定又是怎么样的呢? 构造函数的原型方法中的 <code>this</code> 又指向何处呢?</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">Animal</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">sound</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sound</span> <span class=\"o\">=</span> <span class=\"nx\">sound</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Animal</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">yell</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sound</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">Cat</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Animal</span><span class=\"p\">(</span><span class=\"s2\">&#34;猫&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;喵喵&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Cat</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span> <span class=\"c1\">// 猫\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Cat</span><span class=\"p\">.</span><span class=\"nx\">yell</span><span class=\"p\">());</span> <span class=\"c1\">// 喵喵\n</span></code></pre></div><p>在通过 <code>new</code> 操作符调用构造函数时, 会经历以下四个阶段:</p><ol><li>创建一个新的对象;</li><li>构造函数的 <code>this</code> 指向新对象;</li><li>为这个新对象添加构造函数中的属性和方法;</li><li>返回新对象</li></ol><p>也就是说, 构造函数中的 <code>this</code> 指向这个新创建的实例对象.</p><p>而原型方法做为一个函数, 它被实例对象调用, 那它的 <code>this</code> 也就指向这个实例对象.</p><hr/><h2># 事件循环</h2><blockquote> 下面所讲的是浏览器当中的事件循环</blockquote><h3>## 单线程</h3><p>首先我们要知道,<b> JavaScript 的最大特点就是 &#34;单线程&#34;.</b> 也就是说同一时间只能处理一个操作.</p><p>那么为什么要这样设计呢? JavaScript 作为浏览器的脚本语言, 主要用途是来处理用户交互, 以及操作 DOM. 这使得多线程的设计会导致很复杂的同步问题. 举例说, 如果 JavaScript 可以同时操纵两个线程. 一个线程添加在某个 DOM 节点上添加内容, 另一个线程在这个 DOM 节点下删除内容. 那么浏览器, 该听谁的呢? 所以 JavaScript 被设计成了单线程的.</p><hr/><h3>## 同步任务 &amp; 异步任务</h3><p>单线程就意味着任务必须要排队, 一个一个得等待被执行. 那很明显的一个问题是, 如果有一个任务耗时过长, 那后面的任务就必须要等待. 如果是任务的计算量太大, 设备 CPU 处理能力不够, 必须耗时很长, 那还可以理解. 但如果任务是从网络中读取数据, 因为网速慢, 或其他原因导致等待响应时间过长, 那必然会导致程序运行效率, 和 CPU 利用率非常低下.</p><p>所以 <b>JavaScript 的另一个特点就是 &#34;非阻塞 I/O&#34;</b>, 也称 &#34;异步式 I/O&#34;. 当主线程遇到 I/O 操作时 (磁盘读写, 网络通信)，不会以阻塞的方式等待 I/O 操作的完成, 或数据的返回. 而只是将 I/O 操作交给浏览器，然后自己继续执行下一条语句。 当浏览器完成 I/O 操作时，会将用以处理 I/O 操作结果的处理函数推入到一个任务队列, 等待主线程后续进行处理.</p><p>于是任务就分成, &#34;同步任务&#34;, 和 &#34;异步任务&#34; 两种.</p><ul><li><b>同步任务</b>: 在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务;</li><li><b>异步任务</b>: 主线程交给浏览器去执行. 执行完毕后, 将用以处理异步操作结果的处理函数, 推入 &#34;任务队列&#34;, 等待主线程处理.</li></ul><hr/><h3>## 任务队列 &amp; 事件循环</h3><p>前面说过执行上下文创建完, 会被推入调用栈. JavaScript 引擎会逐句执行最顶部的执行上下文中的代码. </p><p>在执行过程中, 同步任务逐句被执行. 当遇到了异步任务, JavaScript 引擎会将它们交给浏览器上对应的 Web API 去处理. 比如 Ajax 请求, 会被交给 Network 模块. 浏览器处理完毕之后, 会将用以处理结果的处理函数 (回调函数), 推入到任务队列中.</p><p>当调用栈中只剩全局执行上下文的时候, 主线程就会去查询任务队列了. 任务队列中的任务会被逐一取出放入调用栈执行. 当处理任务的时候, 又遇到了新的异步任务, 则会重复之前的操作. 也就是, 调用对应 Web API, 处理完毕后, 回调函数添加到任务队列末尾.</p><p>上面的步骤会一直重复, 直到任务队列完全清空了, 至此程序执行完毕. 而这个循环过程就被叫做 &#34;事件循环&#34;.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-112be5f598cefc90dff310b74a4639ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-112be5f598cefc90dff310b74a4639ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-112be5f598cefc90dff310b74a4639ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-112be5f598cefc90dff310b74a4639ee_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h3>## 宏任务 &amp; 微任务</h3><p>上面只是笼统的说了下 &#34;异步任务&#34; 和 &#34;任务队列&#34; 的概念. 在浏览器中, <b>异步任务分成 &#34;宏任务&#34; (macro-task) 和 &#34;微任务&#34; (micro-task) 两种</b>. 这两种任务也都各自有一条任务队列.</p><ul><li><b>宏任务</b>: 包括 script(整体代码), setTimeout, setInterval, setImmediate,requestAnimationFrame, I/O, UI rendering.</li><li><b>微任务</b>: 包括 process.nextTick, Promise, Object.observe, MutationObserver</li></ul><p> 第一次事件循环从宏任务 (macro-task) 开始. 我们看到整体的 script 代码也算是一个宏任务. 那么从读取整体 script 代码开始算第一次循环. </p><p>之后全局执行上下文被创建, 推入执行栈. 直到最后执行栈只剩全局执行上下文时, 线程然后执行所有的 micro-task 队列中的任务. 清空后, 线程从 macro-task 队列首部取一个任务, 然后到最后再清空 micro-task 队列. </p><p>之后再去 macro-task 队列去下一个任务. 这样一直循环, 直到 macro-task, micro-taks 队列都清空了,  全局执行上下文出栈, 程序结束.</p><p>举例说明:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 同步任务\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 宏任务\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;1&#34;</span><span class=\"p\">);</span>\n\n  <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 同步任务\n</span><span class=\"c1\"></span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;2&#34;</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n  <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 微任务\n</span><span class=\"c1\"></span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;3&#34;</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 同步任务\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;4&#34;</span><span class=\"p\">);</span>\n  <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 微任务\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;5&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 同步任务\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;6&#34;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 最后结果: 0, 4, 6, 5, 1, 2, 3\n</span></code></pre></div><hr/><h2># 参考</h2><ul><li>你不知道的 JavaScript (上卷)</li><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5caaad5ce51d452b270ec317\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">掘金 - polkYu - 浅析 JavaScript 的事件循环机制</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_27626333/article/details/78463565\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JavaScript 作用域、上下文、执行期上下文、作用域链、闭包</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5ba32171f265da0ab719a6d7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">掘金 - 子非 - [译] 理解 JavaScript 中的执行上下文和执行栈</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000009041008\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入理解 JavaScript 执行上下文、函数堆栈、提升的概念</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/entry/57f5d492bf22ec006475238f\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入了解 JavaScript，从作用域链开始（1）</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000012646221\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">九死蚕传人 bo - 前端基础进阶（四）：详细图解作用域链与闭包</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000012646373\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">九死蚕传人 bo - 前端基础进阶（十二）：深入核心，详解事件循环机制</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/baidu_24024601/article/details/51861792\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RuGuo_09 - 为什么 javascript 是单线程？</a></li></ul>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": [
                {
                    "userName": "发现了怎么", 
                    "userLink": "https://www.zhihu.com/people/2d87443b730d52bd12b14bbd7cbf8bb0", 
                    "content": "<p>終於有js了，開森！！</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>最近在面试, 没什么时间写东西, 抱歉.</p>", 
                            "likes": 0, 
                            "replyToAuthor": "发现了怎么"
                        }
                    ]
                }, 
                {
                    "userName": "花前月下", 
                    "userLink": "https://www.zhihu.com/people/93f8bd622cff3e86a9178af8effb3de5", 
                    "content": "支持支持", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/58307272", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 51, 
            "title": "学 Vue 看这个就够了 - 什么是 Vue.js", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在这个系列里我希望能从零开始讲解所有关于 Vue.js 的知识, 并结合实战项目和源码分析, 来让读者可以在最后做到全面的掌握 Vue.js 框架.  </p><p>在整个系列的第一篇, 我要先讲解一下到底什么是 Vue, 我们要学的到底是个什么东西. </p><p>在讲解之前, 首先结论先行: <b>Vue 是一个采用 MVVM 架构, 通过数据驱动视图的形式来构建用户界面的渐进式框架.  </b></p><p>看不懂没关系, 我后面会一个词一个词的讲解其概念.  </p><p>让我们开始吧 😝</p><hr/><h2><b># &#34;渐进式框架&#34; &amp; &#34;自底向上逐层应用&#34;</b></h2><p>Vue 是一套用于构建用户界面的<b>渐进式框架</b>。Vue 被设计为可以<b>自底向上逐层应用</b>。</p><p>&#34;渐进式&#34; 的意思就是从少到多, 从弱到强, Vue 框架并不强制开发者一下子就使用它的全部.  </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-38a0186b07de31d2e4e8205dd5ba5ac1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"777\" class=\"origin_image zh-lightbox-thumb\" width=\"663\" data-original=\"https://pic2.zhimg.com/v2-38a0186b07de31d2e4e8205dd5ba5ac1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;663&#39; height=&#39;777&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"777\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"663\" data-original=\"https://pic2.zhimg.com/v2-38a0186b07de31d2e4e8205dd5ba5ac1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-38a0186b07de31d2e4e8205dd5ba5ac1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Vue 从设计角度来讲，可以分成上图的这几大部分，但是开发者并不需要把所有的东西都学会, 或者都用上.  &#34;声明式渲染&#34; 和 &#34;组件系统&#34; 是 Vue 核心库所包含内容，而 &#34;客户端路由&#34;、&#34;状态管理&#34;、&#34;构建工具&#34; 都有其他各自专门的解决方案。这些解决方案相互独立，<b>Vue 将框架做了分层设计, 你可以在 Vue 核心库的基础上灵活地在不同层上使用其他方案, 而不是说一定要用 Vue 提供的</b>.</p><hr/><h2><b># 数据驱动视图</b></h2><p><b>Vue 是数据驱动视图的框架, 采用了 MVVM 架构.  其核心库只关注视图层, 视图与数据状态保持同步</b>.</p><h2><b>## 什么是 MVC 架构?</b></h2><p>一个清晰合理的架构是一个复杂程序所必备的.  MVVM 是一种软件的架构模式.  但在讲它之前, 要先了解一下 MVC 架构.</p><p>在 MVC 架构下, 软件可以分成三个部分: </p><ul><li>视图 (View): 用户界面</li><li>控制器 (Controller): 业务逻辑</li><li>模型 (Model): 数据保存</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-79f50afc32adb90b2e72fd9daeefa679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb\" width=\"429\" data-original=\"https://pic2.zhimg.com/v2-79f50afc32adb90b2e72fd9daeefa679_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;429&#39; height=&#39;249&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"429\" data-original=\"https://pic2.zhimg.com/v2-79f50afc32adb90b2e72fd9daeefa679_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-79f50afc32adb90b2e72fd9daeefa679_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>它们各个部分之间的通信方式如上图:</p><ul><li>用户在 View 上进行操作, 触发相应事件;</li><li>Controller 接到事件, 执行相应业务逻辑, 调用 Model 的接口修改数据状态;</li><li>Model 中新的数据发送到 View, 视图更新, 用户得到反馈;</li></ul><p>当然上述所讲为一般而言的 MVC 模式.  在不同的项目中, MVC 的实现方法可能都不尽相同.  比如, 网页开发中, 某些项目除了允许用户在页面上触发 DOM 事件, 从而让相关事件处理函数得到执行外.  用户还可以通过在 URL 后加上不同的 # 锚点来触发 <code>hashChange</code> 事件, 从而让相关业务逻辑得到执行.</p><h2><b>## 什么是 MVVM 架构?</b></h2><p>在 MVVM 架构中, Controller 被替换成了 ViewModel.  它作为 View 与 Model 沟通的桥梁, 负责监听 Model 或 View 的修改.  由此实现了 View 和 Model 的 &#34;双向绑定&#34;.  意思就是说, 当 Model 层数据进行修改时, ViewModel 层检测到了变化, 然后通知 View 层进行相应的视图修改.  反之, 当 View 层做了修改时, Model 层的数据也会得到相应的修改.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5b14308d0ead769756f1f608f40c0808_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"235\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"235\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic1.zhimg.com/v2-5b14308d0ead769756f1f608f40c0808_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 响应式的双向数据绑定</b></h2><p>在页面中, <b>DOM 状态其实就是数据状态的一种映射</b>.  我们的业务逻辑应该关注于对于数据状态的操作.  当数据发生改变的时候, 框架应当帮助我们自动更新视图, 而不需要我们再手动获取 DOM 元素, 然后再对它进行修改了.  </p><p><b>Vue 的核心是一个 &#34;响应式的数据绑定系统&#34;</b>.  数据和视图建立绑定之后, DOM 将与数据保持同步.  当数据被修改了, DOM 便相应的更新; 同样, 用户在视图上的操作也会自动更新相关的数据.  所有关于 DOM 的操作都被 Vue 在背后帮我们执行了, 我们只需关注于数据就好了.  这种思想也被称为 &#34;数据驱动&#34;</p><p>简化地表示 &#34;数据&#34; 与 &#34;视图&#34; 的关系就如下图:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-74ba142b0982f23654a74080075c74f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic2.zhimg.com/v2-74ba142b0982f23654a74080075c74f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;305&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic2.zhimg.com/v2-74ba142b0982f23654a74080075c74f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-74ba142b0982f23654a74080075c74f9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 声明式渲染 &amp;&amp; 虚拟 DOM</b></h2><p><b>Vue 提供一套基于 HTML 的模板语法, 允许开发者声明式地将真实 DOM 与 Vue 实例的数据绑定在一起</b>。</p><p>首先, &#34;声明式&#34; 的意思就是: 开发者告诉 Vue 框架想要什么结果, 而如何达成由 Vue 自己去做, 开发者不用管.  例如下面这段模板代码声明式地让 Vue 将 <code>name</code> 的数据和 <code>&lt;p&gt;</code> 标签绑定在一起:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello {{ name }}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><p>Vue 会把这些模板编译成一个渲染函数。该函数被调用后会渲染并且返回一个虚拟的 DOM 树.  这个 &#34;树&#34; 的职责就是描述当前视图应处的状态。之后再通过一个 Patch 函数，将这些虚拟 DOM 创建成真实的 DOM 元素。在这个过程中, Vue 有一个 &#34;依赖追踪系统&#34; 会侦测在渲染过程中所依赖到的数据来源.  当数据源发生变动时, 就可以根据需要重新渲染虚拟 DOM 树。当一个新的虚拟树被渲染出来之后, Vue 会将其与老树进行对比，并最终得出应施加到真实 DOM 上的改动, 然后通过 Patch 函数施加改动。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-154e641889ac7b48fee3c037b09d4c4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb\" width=\"980\" data-original=\"https://pic3.zhimg.com/v2-154e641889ac7b48fee3c037b09d4c4a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;980&#39; height=&#39;571&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"980\" data-original=\"https://pic3.zhimg.com/v2-154e641889ac7b48fee3c037b09d4c4a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-154e641889ac7b48fee3c037b09d4c4a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>同时, Vue 也允许用户直接跳过写模板这一层去手写渲染函数.  模板和渲染函数都各有利弊, 首先模板更贴近 HTML，有着良好的可读性的同时, 可以让我们更直观地思考语义结构，更好地结合 CSS 的书写。而直接写渲染函数，因为写的是真正的 JavaScript 代码，函数内可以进行更复杂的逻辑判断，可以选择性地返回最终要返回的 DOM 结构，从而实现一些在模板的语法限制下，很难做到的一些事情。但虽然两个都是可以选择的。在绝大部分情况下还是推荐使用模板，只有在需要复杂逻辑的情况下，才使用渲染函数。</p><hr/><p>😆 好啦，今天的分享就告一段落啦。</p><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "罐装汽水Garrik", 
                    "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                    "content": "<p>立个 FLAG, 我要开启高产模式!</p>", 
                    "likes": 4, 
                    "childComments": []
                }, 
                {
                    "userName": "ffuu", 
                    "userLink": "https://www.zhihu.com/people/1a16acc82354b3a4cbbe86e8b811047a", 
                    "content": "<p>vue看官网就差不多了吧</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "官网很多地方讲的只是浅尝辄止，并没有很深入", 
                            "likes": 0, 
                            "replyToAuthor": "ffuu"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>总结的很具体</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "000000", 
                    "userLink": "https://www.zhihu.com/people/01371831fb36479a501f91653442aca8", 
                    "content": "高产FLAG。。。。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "flag倒了已经[捂脸]", 
                            "likes": 0, 
                            "replyToAuthor": "000000"
                        }
                    ]
                }, 
                {
                    "userName": "我感觉很烦恼", 
                    "userLink": "https://www.zhihu.com/people/60eb5ad16e742e549346eb54cf0c6bd8", 
                    "content": "<p>这个系列还更吗</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "更，别急哦，最近上班了，太忙了[大哭]", 
                            "likes": 1, 
                            "replyToAuthor": "我感觉很烦恼"
                        }
                    ]
                }, 
                {
                    "userName": "亲切的青牛", 
                    "userLink": "https://www.zhihu.com/people/929b7fc617c9589a2564119a5a558bb5", 
                    "content": "<p>写的真好，为你点赞（手动拇指）</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "十一", 
                    "userLink": "https://www.zhihu.com/people/cedca5461ec1a3b4b9fd0f4b506813d5", 
                    "content": "<p>还会继续更新嘛？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "会的，但是估计要九月了，上个月入职字节实习。也算是步入一个新人生阶段了，最近确实没有时间写文章了，抱歉", 
                            "likes": 0, 
                            "replyToAuthor": "十一"
                        }, 
                        {
                            "userName": "十一", 
                            "userLink": "https://www.zhihu.com/people/cedca5461ec1a3b4b9fd0f4b506813d5", 
                            "content": "<p>你的所有文章我都看了一遍，写的非常好，很喜欢这样的讲述方法，期待后期的文章，特别是VUE的！</p>", 
                            "likes": 0, 
                            "replyToAuthor": "罐装汽水Garrik"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52728922", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 1, 
            "title": "Node.js 系列 - [实战] TODO 单页面程序", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在前面我们已经介绍过了 Node.js 的基本知识.  在这一篇, 让我们来试着用 Node.js, EJS 模板引擎 和 MongoDB 来搭建一个 TODO List 单页面应用.  </p><p>最终效果如下:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4f379b6d12f64f898bde0931036afd35_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"356\" data-thumbnail=\"https://pic2.zhimg.com/v2-4f379b6d12f64f898bde0931036afd35_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic2.zhimg.com/v2-4f379b6d12f64f898bde0931036afd35_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;586&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"356\" data-thumbnail=\"https://pic2.zhimg.com/v2-4f379b6d12f64f898bde0931036afd35_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"586\" data-original=\"https://pic2.zhimg.com/v2-4f379b6d12f64f898bde0931036afd35_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4f379b6d12f64f898bde0931036afd35_b.gif\"/></figure><h2><b># 项目分析</b></h2><p>首先, 我们分析一下这个 APP 有什么功能.<br/> 1. 展示已有任务 2. 添加新任务 3. 删除已有任务</p><p>然后我们来设计数据结构.  在这个项目里, 我们使用 MongoDB 数据库. 在其中, &#34;文档&#34; 作为基本数据单位, 由 &#34;键值对&#34; 组成.  在分析完应用所应有的功能之后, 我决定让一个 TODO 任务对应一个文档, 其包含两个键: 一个是作为唯一标识的 <code>&#34;id&#34;</code>; 一个是储存任务信息的 <code>&#34;taskDetail&#34;</code></p><p>下面是一个数据示例:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span> \n    <span class=\"nt\">&#34;id&#34;</span><span class=\"p\">:</span> <span class=\"err\">ObjectID(</span><span class=\"s2\">&#34;000001&#34;</span><span class=\"err\">)</span><span class=\"p\">,</span> <span class=\"err\">//</span> <span class=\"err\">类型:</span> <span class=\"err\">ObjectID</span>\n    <span class=\"nt\">&#34;taskDetail&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;任务信息&#34;</span>   <span class=\"err\">//</span>  <span class=\"err\">类型</span><span class=\"p\">:</span> <span class=\"err\">String</span>\n<span class=\"p\">}</span></code></pre></div><p>之后, 在 HTTP 路由上我们设计用以下接口来对应实现以上功能:   <i><code>/</code> (GET - 展现页面) </i> <code>/addTask</code> (GET - 添加任务) * <code>/deleteTask</code> (GET - 删除) </p><h2>搭建服务器骨架</h2><p>接下来让我们开始写服务器代码的基本结构.  </p><p>在项目目录下新建 <code>app.js</code> 文件, 具体代码如下:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 引入模块\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 创建 HTTP 服务器\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 解析请求 URL\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 路由\n</span><span class=\"c1\"></span>    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;&#34;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 展示已有任务\n</span><span class=\"c1\"></span>            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/addTask&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 添加新任务\n</span><span class=\"c1\"></span>            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/deleteTask&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 删除已有任务\n</span><span class=\"c1\"></span>            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 返回 404 - Not Found\n</span><span class=\"c1\"></span>            <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 监听请求\n</span><span class=\"c1\"></span><span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;服务器启动, 监听 8080 端口:&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">})</span>\n</code></pre></div><h2></h2><hr/><h2><b># 编写视图</b></h2><p>在项目目录下新建 <code>views</code> 目录, 用来存放 EJS 模板文件.  在这个项目中我们需要 <code>index.ejs</code> 和 <code>404.ejs</code> 两个模板, 一个用来显示应用界面, 一个用来显示 404 错误信息.</p><div class=\"highlight\"><pre><code class=\"language-bash\">.\n├── app.js\n└── views\n    ├── <span class=\"m\">404</span>.ejs\n    └── index.ejs</code></pre></div><p><code>index.ejs</code> 的代码如下:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>TODO LIST<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;/addTask&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;GET&#34;</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;taskDetail&#34;</span> <span class=\"na\">placeholder</span><span class=\"o\">=</span><span class=\"s\">&#34;请输入任务...&#34;</span> <span class=\"p\">/&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;submit&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;提交&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n            <span class=\"err\">&lt;</span>% for(var i = 0; i <span class=\"p\">&lt;</span> <span class=\"nt\">tasks.length</span><span class=\"err\">;</span> <span class=\"na\">i</span><span class=\"err\">++)</span> <span class=\"err\">{</span> <span class=\"err\">%</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span><span class=\"err\">&lt;</span>%= tasks[i].taskDetail %&gt;<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;/deleteTask?id=&lt;%= tasks[i]._id %&gt;&#34;</span><span class=\"p\">&gt;</span>删除<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n            <span class=\"err\">&lt;</span>% } %&gt;\n        <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>通过一个 <code>&lt;form&gt;</code> 来向服务器的 <code>/addTask</code> 路径提交请求来添加新任务.  </p><p>在 <code>&lt;ul&gt;</code> 标签中, 用从服务器传来的 <code>tasks</code> 数组来遍历渲染出已有的任务.  每个任务上有一个删除链接, 用来向服务器的 <code>/deleteTask</code> 路径发送请求来删除任务.  通过查询字符串中的 <code>id</code> 字段来指明具体要删除哪个任务.</p><p><code>404.ejs</code> 的代码如下:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>404<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><hr/><h2><b># 编写 <code>&#34;/&#34;</code> 路由代码</b></h2><p>客户端访问这个路由时, 服务器要先去数据库获取已有的任务数据, 并保存在数组中, 然后把数据传入模板来渲染出视图并响应给客户端.</p><p>那么首先, 我们用 NPM 安装 <code>mongodb</code> 和 <code>ejs</code> 模块.</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm init\nnpm install ejs mongodb -save</code></pre></div><p>之后编写 Node.js 代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 引入模块\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ejs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;ejs&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">MongoClient</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mongodb&#39;</span><span class=\"p\">).</span><span class=\"nx\">MongoClient</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 数据库服务器地址\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">mongoServerUrl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mongodb://localhost:27017&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;&#34;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// MongoDB 客户端连接到 MongoDB 服务器\n</span><span class=\"c1\"></span>            <span class=\"nx\">MongoClient</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mongoServerUrl</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n                <span class=\"c1\">// 连接到 &#39;todoDB&#39; 数据库 (你的数据库名字不需要和我一样)\n</span><span class=\"c1\"></span>                <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"s1\">&#39;todoDb&#39;</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">// 获取 &#39;todos&#39; 集合实例 (你的数据库名字不需要和我一样)\n</span><span class=\"c1\"></span>                <span class=\"kd\">var</span> <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;todos&#39;</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">// 查找集合下所有的文档, 并以数组的形式返回\n</span><span class=\"c1\"></span>                <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({}).</span><span class=\"nx\">toArray</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n                    <span class=\"c1\">// 渲染视图并响应给客户端\n</span><span class=\"c1\"></span>                    <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./views/index.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"nx\">result</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n                        <span class=\"c1\">// MongoDB 客户端与服务器的链接断开, \n</span><span class=\"c1\"></span>                        <span class=\"c1\">// 之后在其回调函数中发送响应\n</span><span class=\"c1\"></span>                        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;text/html;charset=utf-8&#39;</span> <span class=\"p\">});</span>\n                            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n                            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n                        <span class=\"p\">});</span>\n\n                    <span class=\"p\">});</span>\n                <span class=\"p\">})</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"c1\">// 代码省略...\n</span></code></pre></div><hr/><h2><b># 编写 <code>&#34;/addTask&#34;</code> 路由代码</b></h2><p>当客户端向 <code>/addTask</code> 提交表单时, 服务器获取它查询对象里 <code>taskDetail</code> 的值, 作为用户输入的任务详情.  之后在在 MongoDB 数据库中插入新文档. </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 代码省略...\n</span><span class=\"c1\"></span><span class=\"k\">case</span> <span class=\"s2\">&#34;/addTask&#34;</span><span class=\"o\">:</span>\n    <span class=\"c1\">// 获取任务详情 \n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">taskDetail</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">taskDetail</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">MongoClient</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mongoServerUrl</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"s1\">&#39;todoDb&#39;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;todos&#39;</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 插入新文档\n</span><span class=\"c1\"></span>        <span class=\"c1\">// 因为 MongoDB 自动为文档添加类型为 ObjectID 的 _id 主键\n</span><span class=\"c1\"></span>        <span class=\"c1\">// 所以我就不自己为每个任务创建 id 了\n</span><span class=\"c1\"></span>        <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">insertOne</span><span class=\"p\">({</span> <span class=\"nx\">taskDetail</span><span class=\"o\">:</span> <span class=\"nx\">taskDetail</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// 插入完文档, 断开 MongoDB 连接,\n</span><span class=\"c1\"></span>            <span class=\"c1\">// 让请求重定向到 &#39;/&#39; 路径下, 以来重新显示已有任务\n</span><span class=\"c1\"></span>            <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">302</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;Location&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"p\">});</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"c1\">// 代码省略...\n</span></code></pre></div><hr/><h2><b># 编写 <code>&#34;/deleteTask&#34;</code> 路由代码</b></h2><p>当客户端向 <code>/deleteTask</code> 路径发送请求, 服务器获取查询对象中 <code>id</code> 的值.  之后去 MongoDB 数据库找到匹配的文档, 并删除. </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 引入 mongodb 模块中的 ObjectID 函数.  \n</span><span class=\"c1\">// 稍后用其来生成 ObjectID 类型的值\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">ObjectID</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mongodb&#39;</span><span class=\"p\">).</span><span class=\"nx\">ObjectID</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 代码省略...\n</span><span class=\"c1\"></span>\n<span class=\"k\">case</span> <span class=\"s2\">&#34;/deleteTask&#34;</span><span class=\"o\">:</span>\n    <span class=\"c1\">// 获取查询对象中的 id 值\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">targetId</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 刚刚获取的 id 值的类型为 String\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 我们还需要用其来生成对应的 ObjectID 值\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">targetObjectId</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ObjectID</span><span class=\"p\">(</span><span class=\"nx\">targetId</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">MongoClient</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mongoServerUrl</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"s1\">&#39;todoDb&#39;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;todos&#39;</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 删除对应的文档\n</span><span class=\"c1\"></span>        <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">deleteOne</span><span class=\"p\">({</span> <span class=\"nx\">_id</span><span class=\"o\">:</span> <span class=\"nx\">targetObjectId</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n            <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">302</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;Location&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"p\">});</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"c1\">// 代码省略...\n</span></code></pre></div><hr/><h2><b># 处理错误请求</b></h2><p>最后别忘了补全用以返回 404 错误信息的代码.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">default</span><span class=\"o\">:</span>\n    <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./views/404.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;text/html;charset=utf-8&#39;</span> <span class=\"p\">});</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">break</span><span class=\"p\">;</span>\n</code></pre></div><p>至此所有的代码编写完毕.  试着运行一下吧!<br/> 对了, 别忘了运行之前先启动 MongoDB 服务器, 并创建好数据库!</p><p> 我的代码保存在 Github, 可以作为参考 - </p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Garrik-Liu/MyTutorials/tree/master/%255BNode-EJS-MongoDB%255D-TODO_01\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-d7d64aa8390895c5cce930ee52753f70_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">传送门 - TODO 代码</a><hr/><p>😆 好啦，今天的分享就告一段落啦。</p><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "1010top", 
                    "userLink": "https://www.zhihu.com/people/a26f5840fb07c1c57bde8369fe524fc9", 
                    "content": "终于更新了……<a href=\"https://pic4.zhimg.com/v2-ba306425d0a7aee2c7260381f1bf7b97.gif\" class=\"comment_sticker\" data-width=\"0\" data-height=\"0\" data-sticker-id=\"990581350222589952\">[欢呼]</a>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>刚考完试, 之后会陆陆续续更新的, 放心!!!</p>", 
                            "likes": 0, 
                            "replyToAuthor": "1010top"
                        }, 
                        {
                            "userName": "1010top", 
                            "userLink": "https://www.zhihu.com/people/a26f5840fb07c1c57bde8369fe524fc9", 
                            "content": "更完nodejs，会考虑写Vue或者React的文章吗？感觉你文章写得不错，行文逻辑很清晰[赞]", 
                            "likes": 0, 
                            "replyToAuthor": "罐装汽水Garrik"
                        }
                    ]
                }, 
                {
                    "userName": "1010top", 
                    "userLink": "https://www.zhihu.com/people/a26f5840fb07c1c57bde8369fe524fc9", 
                    "content": "<p>发现个小小的错误，在app.js中，你监听的是8080端口，但回调函数的输出文字却是3000端口...</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52726571", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 1, 
            "title": "Node.js 系列 - 使用 MongoDB 数据库", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在这一节让我们开始学着在 Node.js 中使用 MongoDB 数据库.</p><h2><b># 什么是 MongoDB</b></h2><p>『 MongoDB 』 是由 C++ 语言编写的, 基于分布式文件存储的数据库. 属于 NoSql (非关系型数据库) 的一种, 旨在为 WEB 应用提供可扩展的高性能数据存储解决方案.  </p><p>MongoDB 将数据存储为一个文档，<b>数据结构由键值对 <code>key:value</code> 组成.  MongoDB 文档类似于 JSON 对象.</b>  字段值可以包含其他文档，数组及文档数组.</p><p>下面就是一个 MongoDB 文档 (document) 示例:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;Garrik&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;age&#34;</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;gender&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;Male&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;job&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;Frontend Developer&#34;</span>\n<span class=\"p\">}</span></code></pre></div><h2><b>## 关系型数据库 &amp; 非关系型数据库</b></h2><p>前面说到 MongoDB 是属于非关系型数据库的一种, 那么什么是关系型? 什么是非关系型?</p><p>『 <b>关系型数据库</b> 』以 &#34;行&#34; 和 &#34;列&#34; 组成的 &#34;二维表格&#34; 形式来存储数据, 二维表格简称为称为表, 表又组成了数据库.  之所以称之为关系型数据库, 因为表与表之间采用了现实世界中实体 (entitiy) 与实体 (entitiy) 之间的关系模型.  表中存储格式化结构的数据，每个 &#34;元组&#34;（可以理解为二维表中的一行）的字段组成都是一样的.  即使不是每个元组都需要所有的字段，但数据库会为每个元组都分配所有的字段，这样的结构可以便于表与表之间进行连接等操作.  比较常见的关系型数据库有 Oracle, MySQL 等.</p><p>『 <b>非关系数据库</b> 』以 &#34;键值对&#34; 存储，它的结构不固定，每一个元组可以有不一样的字段，可以根据需要增加或减少一些自己的键值对，不会局限于固定的结构.  数据之间的关联性不强制, 使用起来要比关系型数据库更加灵活, 性能也有提升.  比较常见的非关系型数据库有  MongoDB, Redis 等</p><hr/><h2><b># MongoDB 基础概念</b></h2><p>在具体讲如何使用 MongoDB 之前, 我要先介绍一些基本概念.</p><h2><b>## 文档 (document)</b></h2><p>『 <b>文档</b> 』是一组 &#34;键值对&#34; 的有序集合.  是 MongoDB 的核心概念.  文档的数据结构被称为 BSON, 是一种类似于 JSON 的二进制形式的存储格式.  下面是一个文档示例:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;Garrik&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;age&#34;</span><span class=\"p\">:</span> <span class=\"mi\">21</span>\n<span class=\"p\">}</span></code></pre></div><p><code>&#34;name&#34;</code> 和 <code>&#34;age&#34;</code> 是这个文档的 &#34;键&#34; (key), <code>&#34;Garrik&#34;</code> 和 <code>21</code> 是 &#34;值&#34; (value)</p><p>文档中的值可以是多种不同的数据类型. 在一个集合中各个文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型.</p><p>MongoDB 区分类型和大小写. 例如，下面的两个文档是不同的：</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span><span class=\"nt\">&#34;foo&#34;</span> <span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"nt\">&#34;Foo&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;3&#34;</span><span class=\"p\">}</span></code></pre></div><p>在给文档的 &#34;键&#34; 命名时还需要注意: <i> 文档的键必须是字符串 </i> 键不能含有 <code>\\0</code> (空字符)。这个字符用来表示键的结尾  <i><code>.</code> 和 <code>$</code> 有特别的意义，只有在特定环境下才能使用 </i> 以下划线 <code>_</code>开头的键是保留的 (不是严格要求的) * 一个文档内不能有重复的键</p><h2><b>## 集合 (collection)</b></h2><p>『 <b>集合</b> 』就是一组文档，如果将 MongoDB 中的一个文档比喻为关系型数据库中的一行，那么一个集合就相当于一张表.  集合存在于数据库中，当第一个文档插入时，集合就会被创建.  集合没有固定的结构，一个集合里面的文档可以是各式各样的，这被称为 『 动态模式 』</p><p>下面是一个集合示例:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n    <span class=\"nt\">&#34;site&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;www.baidu.com&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;百度&#34;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">&#34;site&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;www.google.com&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;Google&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;query&#34;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&#34;search&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;前端开发&#34;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">&#34;site&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;www.zhihu.com&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;知乎&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;username&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;罐装汽水_Garrik&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p>虽然 MongoDB 对集合中的文档类型没有要求, 但通常情况下我们插入集合的数据都会有一定的关联性.  这样会降低查询特定文档的复杂度, 并且提升查询速度.</p><p>集合命名时需要注意: <i> 集合名不能是空字符串。 </i> 集合名不能含有 <code>\\0</code>（空字符)，这个字符表示集合名的结尾。 <i> 集合名不能以 <code>system.</code> 开头，这是为系统集合保留的前缀。 </i> 用户创建的集合名字不能含有保留字符 <code>$</code>。</p><h2><b>## 数据库 (database)</b></h2><p>『 <b>数据库</b> 』由多个集合组成.  在 MongoDB 中可以建立多个数据库。每个数据库都有独立的权限，即便是在磁盘上，不同的数据库也放置在不同的文件中。按照经验，我们将有关一个应用程序的所有数据都存储在同一个数据库中。要想在同一个 MongoDB 服务器上存放多个应用程序或者用户的数据，就需要使用不同的数据库。</p><p>MongoDB 的默认数据库为 <code>&#34;db&#34;</code>，该数据库存储在 <code>data</code> 目录中。</p><p>数据库名可以是满足以下条件的任意 UTF-8 字符串: <i> 不是空字符串 </i> 不得含有 <code>空格</code>、<code>.</code>、<code>$</code>、<code>/</code>、<code>\\</code> 和 <code>\\0</code> (空字符) <i> 数据库名区分大小写, 推荐全部小写 </i> 最多 64 字节</p><p>数据库最终会变成文件系统里的文件，而数据库名就是相应的文件名</p><p>文档, 表单, 数据库之间的关系如下图:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a1447aa76f8b74214f54747cbb2838a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"963\" data-rawheight=\"569\" class=\"origin_image zh-lightbox-thumb\" width=\"963\" data-original=\"https://pic3.zhimg.com/v2-a1447aa76f8b74214f54747cbb2838a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;963&#39; height=&#39;569&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"963\" data-rawheight=\"569\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"963\" data-original=\"https://pic3.zhimg.com/v2-a1447aa76f8b74214f54747cbb2838a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a1447aa76f8b74214f54747cbb2838a2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b># 安装 MongoDB &amp; 可视化工具</b></h2><p>这篇文章我不想过多讲安装步骤, 大家可以自行去查阅方法.</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/mongodb/mongodb-window-install.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-c91833c9d038e7124d6eb454aea48e6f_180x120.jpg\" data-image-width=\"1081\" data-image-height=\"598\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Windows 平台安装 MongoDB</a><a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/mongodb/mongodb-osx-install.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-e023284388003896aa6b2369275405d7_180x120.jpg\" data-image-width=\"1051\" data-image-height=\"425\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mac OSX 平台安装 MongoDB</a><p>为了更方便的管理 MongoDB 数据库, 我推荐使用 Studio 3T 可视化工具.</p><a href=\"https://link.zhihu.com/?target=https%3A//studio3t.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-133e070b81ae14b4c6db523fecde6975_180x120.jpg\" data-image-width=\"640\" data-image-height=\"360\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The MongoDB GUI, IDE &amp; Client for Professional Devs - Studio 3T</a><p>使用方法可参照下面链接内容:</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/weixin_39999535/article/details/81383196\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-2f4cc345c744b81fe4cd2f7d6484c876_180x120.jpg\" data-image-width=\"1270\" data-image-height=\"796\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MongoDB可视化工具Studio 3T的使用</a><hr/><h2><b># 在 Node.js 中使用 MongoDB</b></h2><a href=\"https://link.zhihu.com/?target=http%3A//mongodb.github.io/node-mongodb-native/3.1/api/index.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MongoDB Driver API for Node.js</a><p>想要在 Node.js 中使用 MongoDB, 要先安装 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/mongodb\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mongodb 模块</a>, 具体步骤不赘述.  在 Node.js 中使用之前, 还需要先在命令行中用 <code>mongod</code> 指令运行 MongoDB 服务器. </p><blockquote> 以下代码适用于 mongodb 模块 3.x 版本<br/> </blockquote><h2><b>## 连接数据库</b></h2><p>要想连接 MongoDB 数据库, 我们要先创建一个 MongoDB 客户端并且连接上 MongoDB 服务器.  之后在此连接之上创建数据库实例.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 引入模块\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">MongoClient</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mongodb&#39;</span><span class=\"p\">).</span><span class=\"nx\">MongoClient</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// MongoDB 服务器的地址\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mongodb://localhost:27017&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 目标数据库的名字\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">dbname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mydb&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 创建 MongoDB 客户端\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MongoClient</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 让客户端连接上服务器\n</span><span class=\"c1\"></span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;成功连接到 MongoDB 服务器!&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 创建数据库实例\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"nx\">dbname</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 断开连接 \n</span><span class=\"c1\"></span>    <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2><b>## 插入文档</b></h2><p>要想向一个特定的集合插入文档, 首先我们用 <code>db.collection</code> 方法去获取目标集合的实例对象.  该方法第一个参数为集合的名字.  如果用这个名字的集合之前不存在, 它会自动帮你创建.</p><p>之后我们用刚刚获得的集合实例的 <code>insertMany</code> 或 <code>insertOne</code> 方法来向集合插入文档.  </p><p>区别是:  <i><code>insertOne</code> 用以插入单个文档, 第一个参数为文档对象 </i> <code>insertMany</code> 用以插入多个文档, 第一个参数为由文档对象组成的数组</p><p>这两个方法的最后一个参数都为回调函数.  回调函数的第一个参数为错误信息, 第二个为处理结果</p><p>假如说我们现在要向 <code>usersInfo</code> 集合插入用户信息, 代码如下:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"nx\">dbname</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 获取 &#39;usersInfo&#39; 集合的实例对象.\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;usersInfo&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 插入单个用户的信息\n</span><span class=\"c1\"></span>    <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">insertOne</span><span class=\"p\">({</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&#34;Garrik&#34;</span><span class=\"p\">,</span>\n        <span class=\"nx\">date_of_birth</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"s2\">&#34;1997-06-04&#34;</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2><b>## 查询全部文档</b></h2><p>如果我们想查询一个集合下的全部文档, 我们可以使用集合实例的 <code>find</code> 方法.  该方法的第一个参数为查询条件对象, 如果传入一个空对象 <code>{}</code> 则表示查询全部文档.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"nx\">dbname</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 获取 &#39;usersInfo&#39; 集合的实例对象.\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;usersInfo&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 查询集合下的所有文档, 然后用 toArray 转换成数组\n</span><span class=\"c1\"></span>    <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({}).</span><span class=\"nx\">toArray</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2><b>## 查询特定文档</b></h2><p>前面说集合实例的 <code>find</code> 方法的第一个参数为查询条件对象.  想要查找特定文档的前提是知道怎么写查询条件对象.  </p><p>首先, 平时最常用的查询是找到有特定 &#34;键值对&#34; 的文档.  比如找到 &#34;文档中有 <code>name</code> 键, 且它的值为 <code>小明</code>&#34;.  这个查询写成查询条件对象是: <code>{&#39;name&#39;:&#39;小明&#39;}</code>.  假如要查询的文档在 <code>usersInfo</code> 集合下, 在 Node.js 的代码就为:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 客户端连接上服务器\n</span><span class=\"c1\"></span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;成功连接到 MongoDB 服务器!&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 创建数据库实例\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"nx\">dbname</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">//查询 &#39;name&#39; 等于 &#39;小明&#39; 的文档\n</span><span class=\"c1\"></span>    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;usersInfo&#39;</span><span class=\"p\">).</span><span class=\"nx\">find</span><span class=\"p\">({</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;小明&#39;</span> <span class=\"p\">}).</span><span class=\"nx\">toArray</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">array</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 打印出匹配到的文档\n</span><span class=\"c1\"></span>        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 关闭客户端\n</span><span class=\"c1\"></span>        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>如果再想加一条 <code>gender</code> 键的值 等于 <code>male</code>.  那查询条件对象就为 <code>{&#39;name&#39;:&#39;小明&#39;, &#39;gender&#39;:&#39;male&#39;}</code>  查询条件对象中各个条件是 AND 的关系.  也就是只匹配 <code>name</code> 键的值等于 <code>小明</code>, 且 <code>gender</code> 键的值为 <code>male</code> 的文档.</p><p>假如集合中的文档有如下:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span> <span class=\"nt\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"err\">ObjectId(</span><span class=\"s2\">&#34;5bd1e7df8a5c0550f4722b01&#34;</span><span class=\"err\">)</span><span class=\"p\">,</span> <span class=\"nt\">&#34;name&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;小明&#34;</span><span class=\"p\">,</span> <span class=\"nt\">&#34;gender&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;male&#34;</span> <span class=\"p\">}</span>\n<span class=\"p\">{</span> <span class=\"nt\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"err\">ObjectId(</span><span class=\"s2\">&#34;5bd1e7e28a5c0550f4722b02&#34;</span><span class=\"err\">)</span><span class=\"p\">,</span> <span class=\"nt\">&#34;name&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;小明&#34;</span><span class=\"p\">,</span> <span class=\"nt\">&#34;gender&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;female&#34;</span> <span class=\"p\">}</span>\n<span class=\"p\">{</span> <span class=\"nt\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"err\">ObjectId(</span><span class=\"s2\">&#34;5bd1e7e88a5c0550f4722b03&#34;</span><span class=\"err\">)</span><span class=\"p\">,</span> <span class=\"nt\">&#34;name&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;小红&#34;</span><span class=\"p\">,</span> <span class=\"nt\">&#34;gender&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;female&#34;</span> <span class=\"p\">}</span>\n<span class=\"p\">{</span> <span class=\"nt\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"err\">ObjectId(</span><span class=\"s2\">&#34;5bd1e7f48a5c0550f4722b04&#34;</span><span class=\"err\">)</span><span class=\"p\">,</span> <span class=\"nt\">&#34;name&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;小王&#34;</span><span class=\"p\">,</span> <span class=\"nt\">&#34;gender&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;male&#34;</span> <span class=\"p\">}</span></code></pre></div><p>那么执行上面代码匹配到的为:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span> <span class=\"nt\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"err\">ObjectId(</span><span class=\"s2\">&#34;5bd1e7df8a5c0550f4722b01&#34;</span><span class=\"err\">)</span><span class=\"p\">,</span> <span class=\"nt\">&#34;name&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;小明&#34;</span><span class=\"p\">,</span> <span class=\"nt\">&#34;gender&#34;</span> <span class=\"p\">:</span> <span class=\"s2\">&#34;male&#34;</span> <span class=\"p\">}</span></code></pre></div><h2><b>## 数值比较</b></h2><p>上面的查询条件都是精确匹配, 也就是匹配文档中某个键的值是否等于多少.  平时常用的另一个查询是范围比较.  也就是 <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>!=</code>.  它们对应的 MongoDB 关键字为 <code>$lt</code>, <code>$gt</code>, <code>$lte</code>, <code>$gte</code>.  </p><p>比如要匹配 <code>age</code> 键的值小于 60, 那么查询条件对象为 <code>{&#39;age&#39;: {$lt:60}}</code>.</p><p>如果在小于 60 的同时还要大于 18, 那就是 <code>{&#39;age&#39;: {$lt:60, $gt:18}}</code>.</p><h2><b>## OR 查询</b></h2><p>MongoDB 中有两种方式进行 OR 查询:  <i><code>$in</code> 关键字可以查询一个键的多个值 </i> <code>$or</code> 可以用于多个键值对.  </p><p>比如我们要查 <code>name</code> 键的值为 <code>小明</code> 或者 <code>小红</code> 的文档. 用 <code>$in</code> 的话, 文档查询对象为 <code>{&#39;name&#39;: {$in: [&#39;小明&#39;, &#39;小红&#39;]}}</code>;  用 <code>$or</code> 的话, 文档查询对象为 <code>{$or:[{&#39;name&#39;:&#39;小明&#39;}, {&#39;name&#39;:&#39;小红&#39;}]}</code></p><p>但如果我们要查 <code>name</code> 键的值为 <code>小明</code> 或 <code>小红</code>, 或者 <code>gender</code> 键的值为 <code>male</code> 的文档的话, <code>$in</code> 和 <code>$or</code> 结合使用会很方便.  其文档查询对象为 <code>{$or:[{&#39;name&#39;:{$in:[&#39;小明&#39;,&#39;小红&#39;]}}, {&#39;gender&#39;:&#39;male&#39;}]}</code> </p><h2><b>## 更新文档</b></h2><p>使用集合实例的 <code>updateOne</code> 和 <code>updateMany</code> 方法可以更新文档.  它们的第一个参数为查询对象, 用来匹配到需要更新的文档.  第二个参数为更新对象, 也就是要应用于文档上的更新内容.  最后一个参数为回调函数, 回调函数第一个参数为错误信息, 第二个为操作结果.  这两个方法的区别是 <code>updateOne</code> 只更新匹配到的第一个文档, <code>updateMany</code> 更新所有匹配到的文档.  </p><p>比如我们要更新 <code>name</code> 键的值为 <code>小明</code> 的文档的 <code>age</code> 键为 22.  Node.js 代码如下: (注意更新对象里面的 <code>$set</code> 关键字)</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 客户端连接上服务器\n</span><span class=\"c1\"></span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;成功连接到 MongoDB 服务器!&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 创建数据库实例\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"nx\">dbname</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">//查询 &#39;name&#39; 等于 &#39;小明&#39; 的文档, 然后更新 `age` 键\n</span><span class=\"c1\"></span>    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;usersInfo&#39;</span><span class=\"p\">).</span><span class=\"nx\">updateOne</span><span class=\"p\">({</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;小明&#39;</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">$set</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"o\">:</span> <span class=\"mi\">22</span> <span class=\"p\">}</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 关闭客户端\n</span><span class=\"c1\"></span>        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2><b>## 删除文档</b></h2><p>想要删除一个文档可以用 <code>deleteOne</code> 和 <code>deleteMany</code> 方法.  第一参数为查询对象, 最后一个参数为回调函数.</p><p>比如我们要删除 <code>name</code> 为 <code>小明</code> 的第一个文档. Node.js 代码如下:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 客户端连接上服务器\n</span><span class=\"c1\"></span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;成功连接到 MongoDB 服务器!&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 创建数据库实例\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"nx\">dbname</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">//删除 &#39;name&#39; 等于 &#39;小明&#39; 的第一条文档\n</span><span class=\"c1\"></span>    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">&#39;usersInfo&#39;</span><span class=\"p\">).</span><span class=\"nx\">deleteOne</span><span class=\"p\">({</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;小明&#39;</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 关闭客户端\n</span><span class=\"c1\"></span>        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div><hr/><p class=\"ztext-empty-paragraph\"><br/></p><p>😆 好啦，今天的分享就告一段落啦。在下一期我会手把手演示<b>如何实现一个连接了 MongoDB 数据库的 Todo List 页面程序</b>.</p><a href=\"https://zhuanlan.zhihu.com/p/52728922\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-fb8fe6d8a4cdb2a75f549c340e86a34f_180x120.jpg\" data-image-width=\"900\" data-image-height=\"500\" class=\"internal\">罐装汽水Garrik：Node.js 系列 - [实战] TODO 单页面程序</a><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "Mr.Panda", 
                    "userLink": "https://www.zhihu.com/people/435684abe540168f34173bf66b4f659b", 
                    "content": "用await写吧，比较通俗易懂，await .find()", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52722144", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 2, 
            "title": "Node.js 系列 - 使用 EJS 模板引擎", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在这一节, 我们尝试用 EJS 模板引擎让 Node.js 渲染动态页面</p><h2><b># 什么是模板引擎? 为什么要用?</b></h2><p>在说什么是『 模板引擎 』之前请先思考一个问题: 我们之前响应给客户端的都是静态 HTML 页面, 也就是内容都是写死的.  但是平时我们看到的网页大多内容都是变动的, 根据数据的不同内容也随之改变.  很明显不能靠人力去实时更改 HTML 文件.  那么该怎么让 HTML 页面去动态改变内容呢?</p><p>你应该能想到在前端用 JavaScript 代码去根据数据动态生成页面内容.  这的确是个好办法, 但也有两个明显缺陷是: <i> 因为浏览器先加载了一个内容不完全的页面, 然后用 JavaScript 获取数据渲染页面内容.  这样的话, 当搜索引擎想抓取页面解析 HTML 内容的时候, JavaScript 代码还未被调用, 页面内容还没被生成. 这会影响到 SEO </i> 页面在刚刚加载之后, 用户还要等一个 JavaScript 代码执行时间, 一个数据请求时间, 一个 DOM 渲染时间, 这增加的等待时间, 可能让用户体验打折扣.</p><p><b>『 模板引擎 』让表现层 (HTML 文档) 和业务数据分离.  通过特定的语法, 来动态地用数据渲染出 HTML 文档</b>.</p><p>通过使用模板引擎就可以解决刚刚提到的问题.  HTML 文档在服务器用模板引擎根据数据动态地渲染好.  然后直接将渲染完整的页面响应给客户端.  浏览器加载完页面内容可以立即展示, 也可以减少显示页面所花的时间.</p><h2><b># EJS 模板引擎介绍</b></h2><p><a href=\"https://link.zhihu.com/?target=http%3A//ejs.co/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EJS 文档</a></p><p>在这一篇里, 我要介绍的是 『 EJS 模板引擎 』它是 &#34;Embedded JavaScript&#34; 的缩写, 通过在 HTML 文件内使用 JavaScript 代码语法来进行 HTML 模板渲染。 </p><p>Node.js 支持模板引擎有非常多, 之所以选择讲 EJS, 是因为个人觉得它上手最快, 可以让你在不破坏 HTML 文档结构的情况下, 直接在标签内书写 JavaScript 代码.  对于前端开发人员来说学习成本很低.</p><hr/><h2><b>## EJS 模板语法</b></h2><p>简单来说, EJS 用起来非常简单, 你只要像之前写 HTML 代码一样去写就好了.  只要最后文件后缀名改成 <code>.ejs</code> 那这就是一个 EJS 模板文件了.  在模板中,   <i><code>&lt;% %&gt;</code> 括起来的内容会作为 Javascript 代码来编译 </i> <code>&lt;%= %&gt;</code> 和 <code>&lt;%- %&gt;</code>将括起来的变量中的数据渲染到模板   * <code>&lt;%=...%&gt;</code>, 变量值若包含 <code>&#39;&lt;&#39;</code> <code>&#39;&gt;&#39;</code> <code>&#39;&amp;&#39;</code> 等字符会被转义   * <code>&lt;%-...%&gt;</code>, 变量值是什么就输出什么</p><p>当然除了上面讲的标签之外还有其他的, 但这里我就不多做介绍了, 大家可以自行查阅<a href=\"https://link.zhihu.com/?target=http%3A//ejs.co/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a>.</p><p>光说文字, 大家理解的不清晰, 我先给两个示例:</p><p>下面的模板会将 <code>users</code> 数组中的值用 <code>for</code> 循环一个个地渲染到 <code>&lt;li&gt;</code> 元素里.  </p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% for(var i = 0; i <span class=\"p\">&lt;</span> <span class=\"nt\">users.length</span><span class=\"err\">;</span> <span class=\"na\">i</span><span class=\"err\">++)</span> <span class=\"err\">{</span> <span class=\"err\">%</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% var user = users[i]; %&gt;\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"err\">&lt;</span>%= user %&gt;<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% } %&gt;\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>假如说 <code>users = [&#39;郭建国&#39;, &#39;刘幸福&#39;, &#39;张富强&#39;, &#39;王大宝&#39;, &#39;李钢蛋&#39;]</code> 那么渲染出来的结果应该如下:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-84834a6c95a62fb7e3a46a167f7edc28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"279\" class=\"content_image\" width=\"314\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;314&#39; height=&#39;279&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"279\" class=\"content_image lazy\" width=\"314\" data-actualsrc=\"https://pic1.zhimg.com/v2-84834a6c95a62fb7e3a46a167f7edc28_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>让我们再来看另一个例子:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% if (state === &#39;danger&#39;) { %&gt;\n     <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>危险区域, 请勿进入<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% } else if (state === &#39;warning&#39;) { %&gt;\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>警告, 你即将进入危险区域<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% } else { %&gt;\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>状态安全<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"err\">&lt;</span>% } %&gt;\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>如果我传入变量 <code>state = &#39;danger&#39;</code>, 页面应该如下图:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-951a5846262b2f6160f689e6e9f7b3e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"172\" class=\"content_image\" width=\"290\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;290&#39; height=&#39;172&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"172\" class=\"content_image lazy\" width=\"290\" data-actualsrc=\"https://pic2.zhimg.com/v2-951a5846262b2f6160f689e6e9f7b3e1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 在 Node.js 中渲染页面</b></h2><p>前面我们写了 EJS 的模板代码, 但我们还需要让服务器根据传入数据渲染出 HTML 页面.  </p><p>首先, 还是要安装 ejs 模块:</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install ejs --save</code></pre></div><p>之后我们根据数据和模板来渲染页面.  ejs 模块提供多种方法实现, 但是我们这里先只介绍 <code>ejs.renderFile</code> 函数.  其余的大家可以自行查阅文档.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"nx\">filename</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">){});</span>\n</code></pre></div><ul><li><code>filename</code> 参数是目标文件路径</li><li><code>data</code> 是你要传进模板的数据对象</li><li><code>option</code> 是配置选项, 可以省略, 具体内容查看文档</li><li><code>function(err, str){}</code> 是回调函数.  </li><li><code>err</code> 是错误信息, 没有错误时为 <code>null</code>.  </li><li><code>str</code> 是模板生成的 HTML 内容.</li></ul><p>前面的第一个 EJS 模板例子在服务器的调用代码为:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 搭建 HTTP 服务器\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;郭建国&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;刘幸福&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;张富强&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;王大宝&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;李钢蛋&#39;</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./index.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">users</span><span class=\"o\">:</span> <span class=\"nx\">users</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;text/html&#39;</span> <span class=\"p\">});</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2><b>## include 指令</b></h2><p>有很多时候一个网站的不同页面里有一些部分是相同的, 比如下面这些例子:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-779e1892f2918da99e8ffc916bda69ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1141\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"1141\" data-original=\"https://pic1.zhimg.com/v2-779e1892f2918da99e8ffc916bda69ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1141&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1141\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1141\" data-original=\"https://pic1.zhimg.com/v2-779e1892f2918da99e8ffc916bda69ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-779e1892f2918da99e8ffc916bda69ec_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-60cb9f5b3366a17c8a698e36649c9b0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1232\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"1232\" data-original=\"https://pic1.zhimg.com/v2-60cb9f5b3366a17c8a698e36649c9b0c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1232&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1232\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1232\" data-original=\"https://pic1.zhimg.com/v2-60cb9f5b3366a17c8a698e36649c9b0c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-60cb9f5b3366a17c8a698e36649c9b0c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e85bb6119a007e689b28b06f7c2f1a47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1053\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"1053\" data-original=\"https://pic4.zhimg.com/v2-e85bb6119a007e689b28b06f7c2f1a47_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1053&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1053\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1053\" data-original=\"https://pic4.zhimg.com/v2-e85bb6119a007e689b28b06f7c2f1a47_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e85bb6119a007e689b28b06f7c2f1a47_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这些内容在网站中的不同页面里重复出现.  如果在每一个 HTML 文件里都重新写一遍, 很明显是低效率地 &#34;笨&#34; 行为.  而且如果日后需要更改内容, 你总不能一个文件一个文件地去改吧.</p><p>我们可以将这些通用的组件提炼出来作为 &#34;模板片段&#34;.</p><p>在 EJS 模板中, 通过 <code>include</code> 指令可以将其他的模板片段引入到当前模板.</p><p>例如，如果我有 <code>&#34;./index.ejs&#34;</code> 和 <code>&#34;./header.ejs&#34;</code> 两个模板文件，我可以通过 <code>&lt;%- include(&#39;./header&#39;); %&gt;</code> 代码让 <code>header.ejs</code> 被 <code>index.ejs</code> 引入.</p><p>大多数情况下, 我们需要使用能够输出<b>原始内容</b>的标签 <code>&lt;%-</code> 在 <code>include</code> 指令上，避免对输出的 HTML 代码做转义处理。</p><h2><b># 来个实例</b></h2><p>现在来让我们看一个实例.  假如我要做一个个人介绍网页, 它包含: <b>关于我</b>, <b>项目介绍</b>, <b>个人博客</b>, 三个页面.</p><p>每个页面都包含一个代码相同的 <code>header</code> 元素:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">header</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;/&#34;</span><span class=\"p\">&gt;</span>我的网站<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">nav</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;aboutme&#34;</span><span class=\"p\">&gt;</span>关于我<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;projects&#34;</span><span class=\"p\">&gt;</span>项目介绍<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;blog&#34;</span><span class=\"p\">&gt;</span>个人博客<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">nav</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">header</span><span class=\"p\">&gt;</span></code></pre></div><p>那么我们就可以把这段代码提取出来, 单独作为一个模板片段, 取名 <code>common-header.ejs</code></p><p>之后在各个页面中引入:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"err\">&lt;</span>%- include(&#39;./templates/common-header.ejs&#39;); %&gt;\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>关于我<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>为了管理方便, 我把所有的 EJS 模板放在了 <code>views</code> 目录, 把模板片段放在了 <code>views</code> 目录下的 <code>templates</code> 目录:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-65a2d6e77ae81096a98845111d15acd5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"202\" data-rawheight=\"157\" class=\"content_image\" width=\"202\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;202&#39; height=&#39;157&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"202\" data-rawheight=\"157\" class=\"content_image lazy\" width=\"202\" data-actualsrc=\"https://pic2.zhimg.com/v2-65a2d6e77ae81096a98845111d15acd5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>HTTP 服务器路由代码如下:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 搭建 HTTP 服务器\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">pathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">pathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s1\">&#39;/aboutme&#39;</span><span class=\"o\">:</span>\n            <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./views/aboutme.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/html&#34;</span> <span class=\"p\">});</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"p\">});</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s1\">&#39;/blog&#39;</span><span class=\"o\">:</span>\n            <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./views/blog.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/html&#34;</span> <span class=\"p\">});</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"p\">});</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s1\">&#39;/projects&#39;</span><span class=\"o\">:</span>\n            <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./views/projects.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/html&#34;</span> <span class=\"p\">});</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"p\">});</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"nx\">ejs</span><span class=\"p\">.</span><span class=\"nx\">renderFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./views/404.ejs&#39;</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/html&#34;</span> <span class=\"p\">});</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n                <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"p\">});</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>服务器运行起来, 在浏览器里访问网站, 效果如下:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fba9d84dfa4fcc3fbf60c997c70dcf24_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"313\" data-thumbnail=\"https://pic1.zhimg.com/v2-fba9d84dfa4fcc3fbf60c997c70dcf24_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-fba9d84dfa4fcc3fbf60c997c70dcf24_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"313\" data-thumbnail=\"https://pic1.zhimg.com/v2-fba9d84dfa4fcc3fbf60c997c70dcf24_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-fba9d84dfa4fcc3fbf60c997c70dcf24_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fba9d84dfa4fcc3fbf60c997c70dcf24_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在每个页面上, <code>common-header.ejs</code> 模板片段都被引入了.  代码的复用性, 简洁性都得到了提高.</p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><p>😆 好啦，今天的分享就告一段落啦。在下一篇, 我会介绍如何使用 MongoDB 数据库.</p><a href=\"https://zhuanlan.zhihu.com/p/52726571\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-85327b35c739e0c0d3d95d167aa16823_180x120.jpg\" data-image-width=\"900\" data-image-height=\"500\" class=\"internal\">罐装汽水Garrik：Node.js 系列 - 使用 MongoDB 数据库</a><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "1010top", 
                    "userLink": "https://www.zhihu.com/people/a26f5840fb07c1c57bde8369fe524fc9", 
                    "content": "<p>default后面还要break吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "imhowie", 
                    "userLink": "https://www.zhihu.com/people/21fd287b84b4e8802d214b29ec6fab1a", 
                    "content": "扫盲帖[赞同][赞同][赞同]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47799753", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 2, 
            "title": "Node.js 系列 - 搭建路由 & 处理表单提交", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>之前, 我们搭建了静态文件服务器.  用户通过在浏览器搜索栏输入 URL 来请求保存在服务器的指定文件.  但是除了提供静态文件, 服务器能做的还有很多很多.  在这一篇, 我们要学会<b>用 Node.js 处理从前端页面的 HTML 表单中提交的信息</b>.</p><h2><b># 搭建路由</b></h2><p>在日常, 我们访问一个站点的不同地址时, 通常页面内容也随之改变.  这是因为服务器为了实现更多的功能, 其会根据请求 URL 的不同而做出不同的处理, 这被称作 &#34;路由&#34;</p><p>『 路由 』简单来说就是 <b>请求 &amp; 请求处理代码 之间的映射关系</b>.  当服务器为一个特定 URL 挂载了请求处理代码时, 所有针对于这个特定 URL 的请求都会交由其处理.</p><p>假设我们要做一个用于自我介绍的个人网页, 其包含: &#34;主页&#34;. &#34;项目介绍页面&#34;, &#34;关于我页面&#34;.  </p><p>那么我们可以像下面代码中那样来搭建路由规则:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 引入相关模块\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 搭建 HTTP 服务器\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 获取请求 URL, 根据 URL 中的 pathname 来匹配对应的处理方法.\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">urlPathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/main&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 因为返回内容中有中文, 所以别忘了指定编码方式\n</span><span class=\"c1\"></span>            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain; charset=utf-8&#34;</span> <span class=\"p\">});</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;主页页面&#34;</span><span class=\"p\">);</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/aboutme&#34;</span><span class=\"o\">:</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain; charset=utf-8&#34;</span> <span class=\"p\">});</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;关于我页面&#34;</span><span class=\"p\">);</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/projects&#34;</span><span class=\"o\">:</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain; charset=utf-8&#34;</span> <span class=\"p\">});</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;项目介绍页面&#34;</span><span class=\"p\">);</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 如果都不匹配就返回 404 \n</span><span class=\"c1\"></span>        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain; charset=utf-8&#34;</span> <span class=\"p\">});</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;404 - Not Found&#34;</span><span class=\"p\">);</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 在 3000 端口监听请求\n</span><span class=\"c1\"></span><span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;服务器运行中.&#34;</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;正在监听 3000 端口:&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>上面代码根据请求 URL 的不同, 而将请求交给不同的处理代码.  你可以尝试运行服务器, 然后用浏览器去请求相应的 URL, 来看看得到的响应是什么.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4628d98aacd28565a36edd302b0f2861_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"514\" data-rawheight=\"216\" data-thumbnail=\"https://pic2.zhimg.com/v2-4628d98aacd28565a36edd302b0f2861_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"514\" data-original=\"https://pic2.zhimg.com/v2-4628d98aacd28565a36edd302b0f2861_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;514&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"514\" data-rawheight=\"216\" data-thumbnail=\"https://pic2.zhimg.com/v2-4628d98aacd28565a36edd302b0f2861_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"514\" data-original=\"https://pic2.zhimg.com/v2-4628d98aacd28565a36edd302b0f2861_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4628d98aacd28565a36edd302b0f2861_b.gif\"/></figure><hr/><h2><b># 获取 GET 表单提交</b></h2><p>在学习了路由相关知识之后, 我们再来了解一下如何获取从客户端发过来的 <b>表单提交</b>.  </p><p>我们先介绍用 GET 方法提交的表单.  通过 GET 提交的表单内容会组装成『 查询字符串 』嵌入在请求 URL 里.  例如下面这段:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"err\">https://www.zhihu.com/search?type=content&amp;q=罐装汽水Garrik</span></code></pre></div><p>从 <code>?</code> 问号开始就是这段 URL 的查询字符串; 参数之间用 <code>&amp;</code> 分开; <code>=</code> 等号前面的是参数名, 后面的是参数值.</p><p>上面这段 URL 的查询字符串如何解析成 JSON 的话就是:</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n    <span class=\"nt\">&#34;type&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;content&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;q&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;罐装汽水Garrik&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p>那么再简单了解了基础知识之后呢, 就让我们赶快来写代码吧!</p><p>首先让我们来写一个有 HTML 表单的页面, 然后命名为 login.html (当然你也可以按照你的想法写代码和命名) </p><p>这个表单我想用来提交登录信息, <code>form</code> 元素的 <code>action</code> 属性我定义为 <code>login</code>, 意思是将请求发送到 <code>login</code> 这段路径下.  <code>method</code> 属性我定义为 <code>get</code>, 意思是以 GET 方法提交表单.</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;login&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;get&#34;</span><span class=\"p\">&gt;</span>\n        账户: <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;username&#34;</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span> \n        密码: <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;password&#34;</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;submit&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;提交&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>之后再让我们来写服务器代码.  通过前面的介绍, 你知道我们需要解析 URL 的查询字符串.  做到这点很简单, 只需要在调用 <code>url.parse</code> 函数解析请求 URL 时为其传入第二个参数 <code>true</code>.  这个函数就会自动帮你把 URL 的查询字符串解析成一个 JavaScript 对象了, 保存在函数返回对象的 <code>query</code> 属性中.  如果没有查询的话属性值就是 <code>null</code></p><p>我们可以用路由去匹配路径, 当请求 URL 的路径和表单发送的路径相匹配时, 将请求交给特定代码去处理.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 解析请求 URL\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 获取请求 URL 的路径\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 获取请求 URL 的查询字符串解析成的对象\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">queryObj</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">;</span>\n    \n    <span class=\"c1\">// 路由\n</span><span class=\"c1\"></span>    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">urlPathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 响应 login 页面\n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"s2\">&#34;/&#34;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 我用了静态服务器那篇的模块, 不了解的地方可以去那篇参考\n</span><span class=\"c1\"></span>            <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"s2\">&#34;./login.html&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 响应查询对象的 JSON 形式到浏览器 \n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"s2\">&#34;/login&#34;</span><span class=\"o\">:</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain&#34;</span> <span class=\"p\">});</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">queryObj</span><span class=\"p\">));</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 错误处理\n</span><span class=\"c1\"></span>        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"s2\">&#34;./404.html&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>当运行起服务器之后, 访问 login 页面, 提交表单你看到的应该像是下面这样:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a80b774dac7ef561dff711dbe43a2f72_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"237\" data-rawheight=\"119\" class=\"content_image\" width=\"237\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;237&#39; height=&#39;119&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"237\" data-rawheight=\"119\" class=\"content_image lazy\" width=\"237\" data-actualsrc=\"https://pic3.zhimg.com/v2-a80b774dac7ef561dff711dbe43a2f72_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d7907b456be49c8616eab40774a59ed5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"578\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb\" width=\"578\" data-original=\"https://pic2.zhimg.com/v2-d7907b456be49c8616eab40774a59ed5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;578&#39; height=&#39;190&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"578\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"578\" data-original=\"https://pic2.zhimg.com/v2-d7907b456be49c8616eab40774a59ed5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d7907b456be49c8616eab40774a59ed5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b># 获取 POST 表单提交</b></h2><p>说完 GET, 我们再来说说用 POST 方法提交表单.  不同于用 GET 方法时, 提交的内容都包含在 URL 里.  POST 提交的内容全部的都在请求体中.</p><p>我们 HTTP 服务器 <code>http.createServer</code> 接收的请求对象 <code>req</code> 并没有一个属性内容为请求体.  原因是 POST 请求体可能体积非常大, 如果每次接收请求都包含请求体的话会很耗时.  而且万一遇到了恶意 POST 请求攻击, 服务器的资源就被大大地浪费了.  </p><p>为了获取 POST 请求体, 我们需要手动来操作.  因为 POST 请求数据量可能很大, 所以它被拆分成了很多个小数据块 ( chunk ) 我们通过在服务器监听请求对象 <code>req</code> 的 <code>&#39;data&#39;</code> 事件来一个个地接收这些数据块, 并将其拼接在一起.  </p><p>当请求传输完毕, 会触发请求对象 <code>req</code> 的 <code>&#39;end&#39;</code> 事件.  我们需要监听它, 事件触发后, 在其事件处理函数中解析 POST 的请求体.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">urlPathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/&#34;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;&#34;</span><span class=\"o\">:</span>\n            <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"s2\">&#34;./login.html&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/login&#34;</span><span class=\"o\">:</span>\n            <span class=\"c1\">// 当请求方法为 POST 时触发\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 用于保存拼接后的请求体\n</span><span class=\"c1\"></span>                <span class=\"kd\">var</span> <span class=\"nx\">post</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n                <span class=\"c1\">// &#39;data&#39; 事件触发, 将接受的数据块 chunk 拼接到 post 变量上\n</span><span class=\"c1\"></span>                <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">post</span> <span class=\"o\">+=</span> <span class=\"nx\">chunk</span><span class=\"p\">;</span>\n                <span class=\"p\">});</span>\n                <span class=\"c1\">// 请求完毕, &#39;end&#39; 事件触发\n</span><span class=\"c1\"></span>                <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                    <span class=\"c1\">// querystring 是 Node.js 自带模块, parse 方法用于将查询字符串解析成对象\n</span><span class=\"c1\"></span>                    <span class=\"kd\">var</span> <span class=\"nx\">queryObj</span> <span class=\"o\">=</span> <span class=\"nx\">querystring</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">post</span><span class=\"p\">);</span>\n                    <span class=\"c1\">// 将接收的 POST 请求体以 JSON 格式响应回客户端\n</span><span class=\"c1\"></span>                    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain&#34;</span> <span class=\"p\">});</span>\n                    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">queryObj</span><span class=\"p\">));</span>\n                    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n                <span class=\"p\">});</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"s2\">&#34;./404.html&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>对了, 最重要的一点, 别忘了将 login.html 文件中的表单提交方法从 <code>get</code> 改成 <code>post</code></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;login&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;post&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"c\">&lt;!-- 省略了 --&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>现在运行服务器, 提交表单, 看看结果是什么.  应该效果像下图所示:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a80b774dac7ef561dff711dbe43a2f72_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"237\" data-rawheight=\"119\" class=\"content_image\" width=\"237\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;237&#39; height=&#39;119&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"237\" data-rawheight=\"119\" class=\"content_image lazy\" width=\"237\" data-actualsrc=\"https://pic3.zhimg.com/v2-a80b774dac7ef561dff711dbe43a2f72_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b31af4886652d119067d62fae3efd0dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"436\" data-original=\"https://pic2.zhimg.com/v2-b31af4886652d119067d62fae3efd0dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;436&#39; height=&#39;196&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"436\" data-original=\"https://pic2.zhimg.com/v2-b31af4886652d119067d62fae3efd0dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b31af4886652d119067d62fae3efd0dd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b># POST 文件上传</b></h2><p>文件上传我们可以很方便的用第三方模块 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/formidable\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">formidable</a> 来实现.  </p><p>首先用 npm 来安装模块:</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install formidable --save</code></pre></div><p>formidable 是用于是表单数据解析的模块, 非常适合用于文件上传的处理.  使用该模块时, 先要调用它的 <code>IncomingForm</code> 构造函数初始模块.  该函数返回一个 <code>IncomingForm</code> 实例用于解处理表单提交数据.  之后通过调用该实例的 <code>parse</code> 方法来解析数据.  </p><p>当用户使用表单提交数据时，表单中可能会包含两类数据: 普通表单数据, 文件数据.  <code>parse</code> 方法解析时，会将这两种数据分别放到<code>fields</code> 和 <code>files</code> 这两个回调参数中.</p><p>那么不多废话直接上代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 模块引入\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">formidable</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;formidable&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">urlPathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;/&#34;</span><span class=\"o\">:</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&#34;&#34;</span><span class=\"o\">:</span>\n            <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"s2\">&#34;./upload.html&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 路由为 &#39;/upload&#39;\n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"s2\">&#34;/upload&#34;</span><span class=\"o\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 初始化 formidable 的 IncomingForm 实例\n</span><span class=\"c1\"></span>                <span class=\"kd\">var</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">formidable</span><span class=\"p\">.</span><span class=\"nx\">IncomingForm</span><span class=\"p\">();</span>\n\n                <span class=\"c1\">// uploadDir 设置上传文件时临时文件存放的位置\n</span><span class=\"c1\"></span>                <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">uploadDir</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;./uploads&#34;</span><span class=\"p\">;</span>\n                <span class=\"c1\">// keepExtensions 属性设置是否保留上传文件的扩展名, 默认为 false\n</span><span class=\"c1\"></span>                <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">keepExtensions</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                \n                <span class=\"c1\">// 开始解析\n</span><span class=\"c1\"></span>                <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">fields</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"kd\">var</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;文件解析失败&#34;</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                        <span class=\"kd\">var</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;文件上传成功&#34;</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain;charset=utf-8&#34;</span> <span class=\"p\">});</span>\n                    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n                    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n                <span class=\"p\">})</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"s2\">&#34;./404.html&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>服务器代码写完后, 让我们写 upload.html 文件:</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;upload&#34;</span> <span class=\"na\">enctype</span><span class=\"o\">=</span><span class=\"s\">&#34;multipart/form-data&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;post&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;upload&#34;</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;submit&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;提交&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p>注意要设置的表单的编码方式 <code>enctype</code> 为 <code>&#34;multipart/form-data&#34;</code> </p><p>表单数据默认的编码方式为 <code>&#34;application/x-www-form-urlencoded&#34;</code> 不可用于文件上传.  </p><p>在使用包含文件上传控件的表单时，必须使用 <code>&#34;multipart/form-data&#34;</code> 这个值.</p><p>写好后, 运行服务器, 上传一张你喜欢的照片, 看看结果是什么.  以下是我的操作:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3ec0d386d2c117de2179fb8782bf900c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"199\" data-rawheight=\"128\" class=\"content_image\" width=\"199\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;199&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"199\" data-rawheight=\"128\" class=\"content_image lazy\" width=\"199\" data-actualsrc=\"https://pic1.zhimg.com/v2-3ec0d386d2c117de2179fb8782bf900c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-299e787bb9ef24b893db253c39182979_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"865\" class=\"origin_image zh-lightbox-thumb\" width=\"1153\" data-original=\"https://pic2.zhimg.com/v2-299e787bb9ef24b893db253c39182979_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1153&#39; height=&#39;865&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"865\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1153\" data-original=\"https://pic2.zhimg.com/v2-299e787bb9ef24b893db253c39182979_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-299e787bb9ef24b893db253c39182979_b.jpg\"/></figure><p>可以看到照片已经上传到了 uploads 目录下.</p><h2><b># GET vs POST</b></h2><p>前面分别用 GET 和 POST 方法提交了表单, 那么这两种方法到底区别是什么呢?</p><p>先来看看 MDN 对这两个方法的定义: <i>  『 HTTP GET 方法 』: 请求指定的资源.  使用 GET 的请求应该只用于获取数据 </i> 『 HTTP POST 方法 』: 发送数据给服务器</p><p>上面说的已经很简洁, 当你想要请求服务器上的资源时用 GET 方法.  发送数据时用 POST 方法.  像我之前用 GET 方法提交登录信息, 是不符合规范的.  实际开发中, 这种行为不允许出现.</p><p>说完定义, 让我们再来看看这两种方法在表现上有什么不同.</p><ul><li> 善于观察的你一定已经发现, GET 提交的表单数据显式地添加在了请求 URL 的查询字符串中.  而 POST 把提交的数据放置在了请求体中.  这也体现出为什么 GET 不能用于传输数据, 你总不希望你的账号和密码这么明显地暴露在 URL 里吧.<br/> </li><li> 因为浏览器对 URL 的长度都有限制, 所以 GET 方式提交的数据是有大小限制的, 一般不超过 1024 字节.  理论上讲， POST 提交数据时没有大小限制的.  但出于性能考虑, 服务器接收时可能对 POST 传输的数据大小进行限制.<br/> </li></ul><hr/><p>😆 好啦，今天的分享就告一段落啦。下一篇中，我会介绍 &#34;模板引擎&#34;</p><a href=\"https://zhuanlan.zhihu.com/p/52722144\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-592fd14f04fc78263d219051dd52e281_180x120.jpg\" data-image-width=\"900\" data-image-height=\"500\" class=\"internal\">罐装汽水Garrik：Node.js 系列 - 使用 EJS 模板引擎</a><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": [
                {
                    "userName": "1010top", 
                    "userLink": "https://www.zhihu.com/people/a26f5840fb07c1c57bde8369fe524fc9", 
                    "content": "写得通俗易懂[赞]，求速更", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "很快就续更了，最近毕业考试，理解一下", 
                            "likes": 0, 
                            "replyToAuthor": "1010top"
                        }, 
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "后面的都已经整理完了，等考完试我就陆续更新，大概下下周左右", 
                            "likes": 0, 
                            "replyToAuthor": "1010top"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47789809", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 2, 
            "title": "Node.js 系列 - 搭建静态资源服务器", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在上一章, 我们搭建了一个非常简单的 &#34;Hello World&#34; 服务器.  在这一章里, 我们要继续上一章所学的知识, 进一步尝试搭建, 提供静态资源的服务器.</p><h2><b># 什么是静态资源服务器?</b></h2><p>那先说什么是 <b>静态资源</b>, 它指的是<b>不会被服务器的动态运行所改变或者生成的文件</b>.  它最初在服务器运行之前是什么样子, 到服务器结束运行时, 它还是那个样子.  比如平时写的 <code>js</code>, <code>css</code>, <code>html</code> 文件, 都可以算是静态资源.  那么很容易理解, 静态资源服务器的功能就是向客户端提供静态资源.  </p><p>话不多说, 开始写代码:</p><p>首先我们知道, 它先是一个 &#34;服务器&#34;.  那根据上一章的所学, 我们要先用 <code>http</code> 模块创建一个 HTTP 服务器.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// 业务逻辑, 等会儿再写.\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;静态资源服务器运行中.&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;正在监听 3000 端口:&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div><h2><b># url 模块</b></h2><p><a href=\"https://link.zhihu.com/?target=http%3A//nodejs.cn/api/url.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">url 模块 - 文档</a></p><p>有了 HTTP 服务器之后, 我们就可以获取从客户端发过来的 HTTP 请求了.  </p><p>请求报文中包含着请求 URL. 前文说过, URL 用于定位网络上的资源.  客户端通过 URL 来指明想要的服务器上资源.  那么服务器为了搞清楚客户端到底想要什么, 我们需要处理和解析 URL.  在 Node.js 中, 我们使用 <code>url</code> 模块来完成这类操作.</p><p>我们知道 URL 字符串是具有结构的字符串，包含多个意义不同的组成部分。 通过 <code>url.parse()</code> 函数, URL 字符串可以被解析为一个 URL 对象，其属性对应于字符串的各组成部分。如下图所示.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-acd1f7c357300e5fc47785803af890c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1263\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"1263\" data-original=\"https://pic3.zhimg.com/v2-acd1f7c357300e5fc47785803af890c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1263&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1263\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1263\" data-original=\"https://pic3.zhimg.com/v2-acd1f7c357300e5fc47785803af890c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-acd1f7c357300e5fc47785803af890c2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>那么回到我们的静态文件服务器代码.:</p><p>先在 <code>http.createServer</code> 函数被调用之前, 引入 <code>url</code> 模块:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>然后在 HTTP 服务器里解析请求 URL.  客户端发来的请求 URL 作为属性存放在 <code>http.createServer</code> 的回调函数参数所接收的请求对象里, 属性名为 <code>url</code>.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2><b># path 模块</b></h2><p><a href=\"https://link.zhihu.com/?target=https%3A//nodejs.org/api/path.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">path 模块 - 文档</a></p><p>接下来从解析后的 URL 对象 <code>urlObj</code> 里取得请求 URL 中的路径名(pathname).  路径名保存在 <code>pathname</code> 属性里.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>但是光有 URL 对象里面的路径名是不够的.  我们还需要获得目标文件在服务器中所在目录的目录名(dirname).</p><p>假如说我们的项目结构是下面这样的:</p><div class=\"highlight\"><pre><code class=\"language-bash\">.\n├── public\n│   ├── index.css\n│   └── index.html\n└── server.js</code></pre></div><p>我们的服务器代码写在 <code>server.js</code> 文件里.  客户端想要请求保存在 <code>public</code> 目录里的 <code>index.html</code> 文件.  用户在浏览器中输入 URL 的时候, 他只知道他想要的文件叫 <code>index.html</code>, 但这个文件在 HTTP 服务器所在的设备中的 『 绝对位置 』是不被知道的.  所以我们需要让 HTTP 服务器自己去处理这部分操作.</p><p>在这里就需要使用 Node.js 自带的 <code>path</code> 模块.  其提供了一些工具函数，用于处理文件与目录的路径.<br/> 使用起来很简单, 首先还是在 <code>http.createServer</code> 函数被调用之前, 引入 <code>path</code> 模块:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>之后我们用 <code>path.join</code> 这个方法来把 目标文件所在目录的目录名和请求 URL 中的路径名合并起来.  在这个例子中, 客户端可以访问的静态文件全部在 <code>public</code> 这个目录中, 而 <code>public</code> 目录又在 <code>server.js</code> 文件所在的目录中.  <code>server.js</code> 中保存的是我们的服务器代码.  </p><p>想要获得 <code>server.js</code> 所在目录的在整个设备中的绝对路径, 我们可以在服务器代码中调用变量 <code>__dirname</code>, 它是当前文件在被模块包装器包装时传入的变量, 保存了当前模块的目录名。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">filePathname</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s2\">&#34;/public&#34;</span><span class=\"p\">,</span> <span class=\"nx\">urlPathname</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>如果你想的话, 你可以用 <code>console.log(filePathname)</code> 来看看服务器运行后, 从客户端收到的请求 URL 会被转换成什么样.</p><h2><b># fs 模块</b></h2><p><a href=\"https://link.zhihu.com/?target=http%3A//nodejs.cn/api/fs.html%23fs_file_system\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">fs 模块 - 文档</a></p><p>现在来到了最重要的一步, 读取目标文件, 并且返回文件给客户端.  </p><p>我们需要用 Node.js 自带的 <code>fs</code> 模块中的 <code>fs.write</code> 方法来实现这一步.  该方法第一个参数为目标文件的路径, 最后一个参数为一个回调函数, 回调有两个参数 (err, data)，其中 <code>data</code> 是文件的内容, 如果发生错误的话 <code>err</code> 保存错误信息.  <code>fs.write</code> 方法可以在第二个参数中指定字符编码, 如果未指定则返回原始的 buffer.  在这个例子中, 我们不考虑这一项.</p><p>那么具体代码如下:</p><p>首先引入 <code>fs</code> 模块, 我就不赘述了, 参照前面就可以了.  下面是读取文件的代码.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">filePathname</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s2\">&#34;/public&#34;</span><span class=\"p\">,</span> <span class=\"nx\">urlPathname</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"nx\">filePathname</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 如果有问题返回 404\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">);</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;404 - File is not found!&#34;</span><span class=\"p\">);</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n    <span class=\"c1\">// 没问题返回文件内容\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>现在我们就实现了一个基本的『 静态文件服务器 』可以在允许客户端请求保存在服务器中公开的静态文件了.  你可以尝试启动服务器, 然后让浏览器中访问 <code>http://localhost:3000/index.html</code>.  我的效果如下:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-49b4598ff08eb366428c922c8d9c90c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"185\" class=\"content_image\" width=\"373\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;373&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"185\" class=\"content_image lazy\" width=\"373\" data-actualsrc=\"https://pic1.zhimg.com/v2-49b4598ff08eb366428c922c8d9c90c0_b.jpg\"/></figure><hr/><h2><b># 设置 MIME 类型</b></h2><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types%23%25E8%25AE%25BE%25E7%25BD%25AE%25E6%25AD%25A3%25E7%25A1%25AE%25E7%259A%2584MIME%25E7%25B1%25BB%25E5%259E%258B%25E7%259A%2584%25E9%2587%258D%25E8%25A6%2581%25E6%2580%25A7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MIME 文档 - MDN</a> <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Content-Type 文档 - MDN</a></p><p>多用途 Internet 邮件扩展（MIME）类型是用一种标准化的方式来表示文档的 &#34;性质&#34; 和 &#34;格式&#34;。 简单说, 浏览器通过 MIME 类型来确定如何处理文档.  因此在响应对象的头部设置正确 MIME 类型是非常重要的.</p><p>MIME 的组成结构非常简单: 由类型与子类型两个字符串中间用 <code>&#39;/&#39;</code> 分隔而组成, 其中没有空格.  MIME 类型对大小写不敏感，但是传统写法都是小写.  </p><p>例如:   <i><code>text/plain</code> : 是文本文件默认值。意思是 未知的文本文件 ，浏览器认为是可以直接展示的. </i> <code>text/html</code> : 是所有的HTML内容都应该使用这种类型. * <code>image/png</code> : 是 PNG 格式图片的 MIME 类型.</p><p>在服务器中, 我们通过设置 <code>Content-Type</code> 这个响应头部的值, 来指示响应回去的资源的 MIME 类型.  在 Node.js 中, 可以很方便的用响应对象的 <code>writeHead</code> 方法来设置响应状态码和响应头部.  </p><p>假如我们要响应给客户端一个 HTML 文件, 那么我们应该使用下面这条代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span><span class=\"s2\">&#34;text/html&#34;</span><span class=\"p\">});</span>\n</code></pre></div><p>你会发现我在上面的静态资源服务器的代码中, 没有设置响应资源的 MIME 类型.  但如果你试着运行服务器的话, 你会发现静态资源也以正确方式被展示到了浏览器.  </p><p>之所以会这样的原因是在缺失 MIME 类型或客户端认为文件设置了错误的 MIME 类型时，浏览器可能会通过查看资源来进行猜测 MIME 类型, 叫做 『 MIME 嗅探 』.  不同的浏览器在不同的情况下可能会执行不同的操作。所以为了保证资源在每一个浏览器下的行为一致性, 我们需要手动设置 MIME 类型.</p><p>那么首先我们需要获取到准备响应给客户端的文件的 <b>后缀名</b>.  </p><p>要做到这一步我们需要使用 <code>path</code> 模块的 <code>parse</code> 方法.  这个方法可以将一段路径解析成一个对象, 其中的属性对应路径的各个部位.</p><p>继续再刚才静态文件服务器案例的代码上添加:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">filePathname</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s2\">&#34;/public&#34;</span><span class=\"p\">,</span> <span class=\"nx\">urlPathname</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 解析后对象的 ext 属性中保存着目标文件的后缀名\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">ext</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">urlPathname</span><span class=\"p\">).</span><span class=\"nx\">ext</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 读取文件的代码...\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div><p>获取了文件后缀之后, 我们需要查找其对应的 <b>MIME 类型</b>了.  这一步可以很轻松的使用第三方模块 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/mime\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MIME</a> 来实现.  你可以自行去 NPM 上去查阅它的使用文档.  </p><p>对于我们目前的需求来说, 只需要用到 MIME 模块的 <code>getType()</code> 方法.  这个方法接收一个字符串参数 (后缀名), 返回其对应的 MIME 类型, 如果没有就返回 <code>null</code>.</p><p>使用的话, 首先要用 npm 安装 MIME 模块 ( 如果你还没创建 package.json 文件的话, 别忘了先执行 <code>npm init</code> )</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install mime --save</code></pre></div><p>安装完毕. 引入模块到服务器代码中, 然后我们就直接用刚刚获得的后缀去找到其对应的 MIME 类型</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">mime</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mime&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">filePathname</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s2\">&#34;/public&#34;</span><span class=\"p\">,</span> <span class=\"nx\">urlPathname</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 解析后对象的 ext 属性中保存着目标文件的后缀名\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">ext</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">urlPathname</span><span class=\"p\">).</span><span class=\"nx\">ext</span><span class=\"p\">;</span>\n<span class=\"c1\">// 获取后缀对应的 MIME 类型\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">mimeType</span> <span class=\"o\">=</span> <span class=\"nx\">mime</span><span class=\"p\">.</span><span class=\"nx\">getType</span><span class=\"p\">(</span><span class=\"nx\">ext</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 读取文件的代码...\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div><p>好了, 现在最重要的东西 MIME 类型我们已经得到了.  接下来只要在响应对象的 <code>writeHead</code> 方法里设置好 <code>Content-Type</code> 就行了.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// 代码省略...\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">mimeType</span> <span class=\"o\">=</span> <span class=\"nx\">mime</span><span class=\"p\">.</span><span class=\"nx\">getType</span><span class=\"p\">(</span><span class=\"nx\">ext</span><span class=\"p\">);</span>\n\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"nx\">filePathname</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"c1\">// 如果有问题返回 404\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain&#34;</span> <span class=\"p\">});</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;404 - File is not found!&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n<span class=\"c1\">// 没问题返回文件内容\n</span><span class=\"c1\"></span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n<span class=\"c1\">// 设置好响应头\n</span><span class=\"c1\"></span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"nx\">mimeType</span> <span class=\"p\">});</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"p\">});</span>\n</code></pre></div><p>阶段性胜利 ✌️ 现在运行服务器, 在浏览器里访问一下 <code>localhost:3000/index.html</code> 试试吧!</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-128c21dd26079587178e866ab13fec0b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"245\" class=\"origin_image zh-lightbox-thumb\" width=\"435\" data-original=\"https://pic4.zhimg.com/v2-128c21dd26079587178e866ab13fec0b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;435&#39; height=&#39;245&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"245\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"435\" data-original=\"https://pic4.zhimg.com/v2-128c21dd26079587178e866ab13fec0b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-128c21dd26079587178e866ab13fec0b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>可以看到现在 <code>Content-Type</code> 已经被正确设置了!</p><hr/><h2><b># 重构代码</b></h2><p>现在来看看你的代码, 是不是开始感觉有点乱糟糟的.  我想聪明的你已经发现, 整个静态文件服务器的代码就是在做一件事: 响应回客户端想要的静态文件.  这段代码职责单一, 且复用频率很高.  那么我们有理由将其封装成一个模块.</p><p>具体的过程我就不赘述了. 以下是我的模块代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// readStaticFile.js\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 引入依赖的模块\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">mime</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mime&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">filePathname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">var</span> <span class=\"nx\">ext</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">filePathname</span><span class=\"p\">).</span><span class=\"nx\">ext</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">mimeType</span> <span class=\"o\">=</span> <span class=\"nx\">mime</span><span class=\"p\">.</span><span class=\"nx\">getType</span><span class=\"p\">(</span><span class=\"nx\">ext</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// 判断路径是否有后缀, 有的话则说明客户端要请求的是一个文件 \n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">ext</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 根据传入的目标文件路径来读取对应文件\n</span><span class=\"c1\"></span>    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"nx\">filePathname</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 错误处理\n</span><span class=\"c1\"></span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;text/plain&#34;</span> <span class=\"p\">});</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;404 - NOT FOUND&#34;</span><span class=\"p\">);</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"o\">:</span> <span class=\"nx\">mimeType</span> <span class=\"p\">});</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n   <span class=\"c1\">// 返回 false 表示, 客户端想要的 是 静态文件\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 返回 false 表示, 客户端想要的 不是 静态文件\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 导出函数\n</span><span class=\"c1\"></span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">readStaticFile</span><span class=\"p\">;</span>\n</code></pre></div><p>用于读取静态文件的模块 <code>readStaticFile</code> 封装好了之后.  我们可以在项目目录里新建一个 modules 目录, 用于存放模块.  以下是我目前的项目结构.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ceb5fc400924e06fe6d99015d1c6be2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"548\" data-original=\"https://pic3.zhimg.com/v2-ceb5fc400924e06fe6d99015d1c6be2e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;548&#39; height=&#39;428&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"548\" data-original=\"https://pic3.zhimg.com/v2-ceb5fc400924e06fe6d99015d1c6be2e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ceb5fc400924e06fe6d99015d1c6be2e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>封装好了模块之后, 我们就可以删去服务器代码里那段读取文件的代码了, 直接引用模块就行了.  以下是我修改后的 server.js 代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// server.js \n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 引入相关模块\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">readStaticFile</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./modules/readStaticFile&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 搭建 HTTP 服务器\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlObj</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">urlPathname</span> <span class=\"o\">=</span> <span class=\"nx\">urlObj</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">filePathname</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s2\">&#34;/public&#34;</span><span class=\"p\">,</span> <span class=\"nx\">urlPathname</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// 读取静态文件\n</span><span class=\"c1\"></span>  <span class=\"nx\">readStaticFile</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">filePathname</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 在 3000 端口监听请求\n</span><span class=\"c1\"></span><span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;服务器运行中.&#34;</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;正在监听 3000 端口:&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div><hr/><p>😆 好啦，今天的分享就告一段落啦。下一篇中，我会介绍 &#34;如何搭建服务器路由&#34; 和 &#34;处理浏览器表单提交&#34;</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/47799753\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-af698c3f0027f02063b6db40c4689e3a_180x120.jpg\" data-image-width=\"900\" data-image-height=\"500\" class=\"internal\">罐装汽水Garrik：Node.js 系列 - 搭建路由 &amp; 处理表单提交</a><p class=\"ztext-empty-paragraph\"><br/></p><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47787413", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 1, 
            "title": "Node.js 系列 - 搭建 \"Hello World\" HTTP 服务器", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在这一节, 我会先介绍 &#34;客户端&#34; 和 &#34;服务器&#34; 的概念.</p><p>然后我会简单介绍一下 &#34;HTTP 协议&#34;.  </p><p>最后, 我们要试着搭建一个最简易的 HTTP 服务器.  当浏览器去向这个服务器发送请求的时候, 服务器会返回 &#34;Hello World&#34; 文本.  </p><h2><b># 客户端 &amp; 服务器</b></h2><p>先思考, 平时我们在浏览器地址栏中, 输入网址按下回车之后, 网页是如何呈现在我们面前的?</p><p>很显然, 我们想要访问的网页不是原本就保存在我们的电脑里的.  我们在浏览器中输入网址, 去网页文件所在的网络设备中去请求网页.  拥有网页的网络设别同意了我们的请求, 把网页返回给了浏览器.  之后浏览器再解析渲染网页文件, 使网页最终能呈现在我们面前.</p><p>像浏览器这样, 请求访问文本或图像等资源的一端称为<b>客户端</b>，而提供资源响应的一端称为<b>服务端</b>。</p><h2><b># 什么是 HTTP 协议</b></h2><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MDN HTTP 文档</a></p><p>客户端和服务器之间是怎么交流信息, 传递数据的呢?  </p><p>网络之间的各种网络设备, 就像 &#34;学校里说不同方言的同学&#34;, 大家想要交流就必须使用 &#34;普通话&#34;.  各种网络设别之间想要通信也需要一套大家都认可的通信标准.</p><p><b>HTTP 协议</b> (Hyper Text Transfer Protocol 超文本传输协议）就是 服务器 和 客户端 之间的<b>通信规则</b>.</p><p>在应用 HTTP 协议时，必定是一端担任客户端角色，另一端担任服务器端角色</p><p>使用 HTTP 协议传输的信息叫做 <b>HTTP 报文</b>. 请求端（客户端）的 HTTP 报文叫做<b>请求报文</b>，响应端（服务器端）的叫做<b>响应报文</b>。 HTTP 报文可分为 <b>报文首部</b> 和 <b>报文主体</b> 两块, 中间由一个空行分开.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-de2c7696373f22e5d2da410f87b58425_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic2.zhimg.com/v2-de2c7696373f22e5d2da410f87b58425_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;658&#39; height=&#39;315&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"658\" data-original=\"https://pic2.zhimg.com/v2-de2c7696373f22e5d2da410f87b58425_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-de2c7696373f22e5d2da410f87b58425_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 请求报文 &amp; 响应报文</b></h2><p><b>『 请求报文组成 』</b>: 请求方法 + 请求 URI + HTTP 协议版本 + (可选的请求首部字段 和 内容实体)</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f5de240795295f033be0686a3df956fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-f5de240795295f033be0686a3df956fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;835&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-f5de240795295f033be0686a3df956fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f5de240795295f033be0686a3df956fc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>『 响应报文组成 』</b>: HTTP 协议版本 + 状态码（表示请求成功或失败的数字代码）+ 用以解释状态码的原因短语 + (可选的响应首部字段 以及 实体主体)</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-afaea0e86a94d48f5b00d94ba80d95b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"717\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb\" width=\"717\" data-original=\"https://pic4.zhimg.com/v2-afaea0e86a94d48f5b00d94ba80d95b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;717&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"717\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"717\" data-original=\"https://pic4.zhimg.com/v2-afaea0e86a94d48f5b00d94ba80d95b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-afaea0e86a94d48f5b00d94ba80d95b7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>『 请求方法 』</b>:</p><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MDN - HTTP 请求方法 文档</a></p><p>HTTP 定义了一组请求方法, 以表明要对给定资源执行的操作。</p><p>常用的有:  <i><code>GET</code>: 用来请求服务器端指定的资源。使用 GET 的请求应该只用于获取数据。 </i> <code>POST</code>: 用来发送数据给服务器. 虽然用 GET 方法也可以传输主体.  但一般不用 GET 方法进行传输，而是用 POST 方法。 <i><code>PUT</code>: 用于新增资源.  PUT 与 POST 方法的区别在于，PUT 方法调用一次与连续调用多次是等价的，而连续调用多次 POST 方法可能会有副作用，比如将一个订单重复提交多次。 </i> <code>DELETE</code>: 用于删除指定的资源。</p><p>除上面这些之外, 还有其他请求方法, 想了解可以自行查阅文档.</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>『 URI 』</b>:</p><p>HTTP 协议使用 <b>URI 定位互联网上的资源</b>。也就是我们常说的 &#34;网址&#34;.  多数情况下 URL 和 URI 说的是一回事.  这里不做过多论述.</p><p>下图是 URI 的各个组成部分</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e4fb3eb06088bdc4419c5892ecad2d5e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-e4fb3eb06088bdc4419c5892ecad2d5e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-e4fb3eb06088bdc4419c5892ecad2d5e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e4fb3eb06088bdc4419c5892ecad2d5e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>『 状态码 』</b>:</p><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> MDN - HTTP 状态码 - 文档</a></p><p>状态码的职责是当客户端向服务器端发送请求时，描述服务器返回的请求结果。</p><p>借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。</p><p>状态码由 3 位数字 和 原因短语 组成。</p><p>数字中的第一位指定了响应类别，后两位无分类。响应类别有以下 5 种:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-673d597b20628d793fb238be7cd49447_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"603\" data-original=\"https://pic4.zhimg.com/v2-673d597b20628d793fb238be7cd49447_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;603&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"603\" data-original=\"https://pic4.zhimg.com/v2-673d597b20628d793fb238be7cd49447_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-673d597b20628d793fb238be7cd49447_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>最常见的两个就是:</p><ul><li><code>200 OK</code>: 表示从客户端发来的请求在服务器端被正常处理了。</li><li><code>404 Not Found</code>: 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</li></ul><p>其余的状态码, 大家可以查阅文档, 这里就不介绍了.</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>『 首部字段 』</b>:</p><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MDN - HTTP 首部字段 - 文档</a></p><p>首部字段, 为客户端和服务器, 处理请求和响应, 提供了所需要的信息。</p><p>HTTP 首部字段是由 首部字段名 和 字段值 构成的，中间用 <code>:</code> 分隔。</p><p>例如: </p><p>在 HTTP 首部中以 Content-Type 这个字段来表示报文主体的类型。 <code>Content-Type: text/html</code> 就是说, 报文主体的类型为 HTML.</p><p>更多首部字段我就不再这里介绍了, 大家可以根据需要查阅文档.</p><hr/><h2><b># 使用 HTTP 模块 实现一个 &#34;Hello World&#34; 服务器</b></h2><p><a href=\"https://link.zhihu.com/?target=http%3A//nodejs.cn/api/http.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTTP 模块 - 文档</a></p><p>Node.js 自身提供的 <code>http</code> 模块, 提供了 HTTP 服务器和客户端接口, 可以很便捷地应用 HTTP 协议.</p><p>下面我就介绍如何用 <code>http</code> 模块实现一个响应 &#34;Hello World&#34; 给客户端的 Web 服务器:</p><p>首先, 新建一个 JavaScript 文件, 取名 <code>myServer.js</code> , 当然你可以叫别的.</p><p>在文件开头先引用 <code>http</code> 模块.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>然后调用 <code>http.createServer</code> 函数创建并返回一个 HTTP 服务器.  这个函数接收一个回调函数作为参数.  服务器每次收到客户端发过来的 HTTP 请求会交给这个回调函数处理.  回调函数会受到两个参数, &#34;请求对象&#34; 和 &#34;响应对象&#34;, 一般简写为 <code>req</code> 和 <code>res</code>.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// 处理请求, 送出响应\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div><p>服务器每次收到新的请求, 都会创建新的请求对象和响应对象.  从客户端发过来的请求报文会被解析, 然后作为请求对象的一部分.  在回调函数的内部, 你需要根据业务逻辑处理请求, 然后送出响应给客户端, 结束此次请求.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在本练习中, 我们要返回给客户端一个写有 &#34;Hello World&#34; 的纯文本.  在回调函数中我们需要用到三个响应对象上的函数:</p><ul><li><code><b>res.writeHead(statusCode[, statusMessage][, headers])</b></code>: 该方法会发送一个响应头给客户端.  第一个参数作为状态码, 最后一个参数 <code>headers</code> 是响应头对象。 第二个参数 <code>statusMessage</code> 是可选的状态描述。</li><li><code><b>res.write(chunk[, encoding][, callback])</b></code>: 该方法会发送一块响应主体。 它可被多次调用，以便提供连续的响应主体片段。第一个参数是一个字符串或一个 Buffer 字节流, 如果是字符串的话, 第二个参数指定如何将它编码成一个字节流 (默认为 utf-8).  最后一个参数这里先不考虑.</li><li><code><b>res.end([data][, encoding][, callback])</b></code>: 该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。每次响应都必须调用这个方法来结束请求, 否则请求会被一直挂起.  如果传入 data 参数, 相当于调用 <code>res.write(data, encoding)</code>.</li></ul><p>那么根据需求我们知道: <i> 响应成功, 状态码为 200. </i> 响应回去的为纯文本, 需要设定响应头 <code>Content-Type</code> 的值为 <code>text/plain</code>. 响应回去的主体是一个字符串 &#34;Hello World&#34;.</p><p>根据这两个信息, 我们就可以很轻松的写出请求处理函数内的代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span><span class=\"s1\">&#39;text/plain&#39;</span><span class=\"p\">});</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;Hello World&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>最后, 我们需要给 Web 服务器绑定一个端口.  为了让服务器可以提供多种服务, 不同请求会被发送到不同的端口.  只有发送到我们指定端口的 HTTP 请求会被上面的代码所处理. </p><p>我们使用 <code>server.listen</code> 函数, 第一个参数为端口号, 最后一个参数是一个回调函数, 监听成功后调用.</p><p>在这里我用 <code>3000</code> 作为端口号, 当然你也可以改成你喜欢的.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;服务器启动成功!&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;正在监听 3000 端口:&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>全部写完后代码为:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;text/plain&#39;</span> <span class=\"p\">});</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">&#34;Hello World&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;服务器启动成功!&#34;</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;正在监听 3000 端口:&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>在命令行中输入 <code>node myServer.js</code> ( 注意你的路径和文件名 )</p><p>服务器运行后, 可以在命令行看见</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8ec66f71cbcca3a9c14e5373a341f603_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"160\" class=\"content_image\" width=\"411\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;411&#39; height=&#39;160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"411\" data-rawheight=\"160\" class=\"content_image lazy\" width=\"411\" data-actualsrc=\"https://pic4.zhimg.com/v2-8ec66f71cbcca3a9c14e5373a341f603_b.jpg\"/></figure><p>然后在浏览器中登录 <code>localhost:3000</code>, 你就可以看见服务器响应给你的 &#34;Hello World&#34; 了.</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5e96011f9bcf67fe2fe85c563b0f8459_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"337\" data-rawheight=\"198\" class=\"content_image\" width=\"337\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;337&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"337\" data-rawheight=\"198\" class=\"content_image lazy\" width=\"337\" data-actualsrc=\"https://pic2.zhimg.com/v2-5e96011f9bcf67fe2fe85c563b0f8459_b.jpg\"/></figure><p>现在你成功的返回了一条纯文本内容给客户端.  接下来, 你可以试着返回一个 HTML 文本吗?</p><p><b>Tip:</b> <code>Content-Type</code> 的值应改成什么?</p><hr/><p>😆 好啦，今天的分享就告一段落啦。下一篇中，我会介绍如何实现一个 &#34;HTTP 静态文件服务器&#34;。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/47789809\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">Node.js 系列 - 搭建静态资源服务器</a><p class=\"ztext-empty-paragraph\"><br/></p><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47780170", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 1, 
            "title": "Node.js 系列 - 模块机制", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><h2><b># 什么是模块?</b></h2><p>以编程角度来说, &#34;模块&#34; 指的是能够提供一定功能或数据的程序语句集合.  模块具备和外部联系的接口 (其他模块或程序调用该模块的方式)</p><p>在 Node.js 中, 每个文件就被视为一个模块.  这个文件可能是 JavaScript 编写的文件、JSON 或者用 C/C++ 编译的二进制文件.  通过对外接口来向外部暴露功能或者数据, 模块之间可以互相调用.  </p><h2><b># 为什么要用模块?</b></h2><p>随着开发复杂度的提升, 将代码都写在一处的传统开发方式, 显现出了很多问题:</p><ul><li><b>很容易出现代码重复</b>.  开发人员很容易将一个功能的代码重复地写了好多遍.  这导致了如果日后功能需求出现了变更, 就要有多处代码需要被更改.  随着应用规模的增大, 代码会变得难以维护. </li><li><b>难以确保代码质量</b>.  所有代码都混在一起, 实现不同功能的代码全都被写在一个文件中, 使得对于单个功能的独立测试变得困难.  </li><li><b>难以查错</b>.  所有代码都混在一起, 程序运行出现 BUG 了, 很难快速定位.  </li><li><b>性能浪费</b>.  因为代码都写在一个文件中, 在只调用文件中一段代码的时候, 也会导致整个文件都加载一遍.  这会使很多根本用不到的代码对性能造成浪费.</li><li><b>难以多人写协作</b>.  所有代码都放在一个文件中, 使得多人协作变得困难.  开发人员难以确认其他人做了什么修改, 添加了什么东西.  很容易一个人出了错误, 导致整个程序崩溃.</li><li><b>等等</b>...</li></ul><h2><b># 模块化开发</b></h2><p>通过使用模块机制, 我们可以把一个复杂程序的各个功能拆分, 分别封装到不同的模块.  每个模块职责单一 (各管一件事, 之间没交集) 通过开发新模块, 和对已有模块的复用来实现各种功能.  这种开发方式被称为 &#34;模块化开发&#34;.</p><p>应用模块化开发, 使得各个功能都封装在独立的文件中, 分而治之, 互不干扰.  使得代码易于维护和复用.  同时每个模块中的变量也不会污染全局作用域, 避免了命名冲突.</p><h2><b># CommonJS</b></h2><p>Node.js 参照 CommonJS 标准实现了模块机制.  CommonJS 是一套代码规范, 目的是为了构建 JavaScript 在浏览器之外的生态系统 (服务器端, 桌面端).  JavaScript 诞生之初只是为了写网页小脚本, 并不作为开发大型复杂应用的语言, 其自身有很多不足.  并且, 官方规范 (ECMAScript) 制定的时间较早, 涵盖范围较小, 对于后端开发而言, 例如文件系统, I/O 流, 模块系统, 等等方面都没有相应的标准.  基于种种的不足, CommonJS 规范致力于弥补 JavaScript 没有标准的缺陷, 让 JavaScript 有能力去开发复杂应用, 同时具备跨平台能力. </p><p>下面是一个 Node.js 的模块使用示例:</p><p>在代码中, 开头通过 <code>require</code> 方法引入了 Node.js 自带的 <code>http</code> 模块.  并用此模块实现了一个 HTTP 服务器.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myNodeServer</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Content-type&#39;</span><span class=\"o\">:</span><span class=\"s1\">&#39;text/plain&#39;</span><span class=\"p\">});</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">);</span> \n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">myNodeServer</span><span class=\"p\">).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span> <span class=\"c1\">//监听 3000 端口\n</span><span class=\"c1\"></span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Server is running!&#39;</span><span class=\"p\">);</span>\n</code></pre></div><hr/><h2><b># 模块分类</b></h2><p>前文说, 在 Node.js 中, 每个文件就被视为一个模块.  这个文件可能是 JavaScript 编写的文件、JSON 或者用 C/C++ 编译的二进制文件.  </p><p>模块可以分成三类:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6a1239077f18f051bda990cbf8de09a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"607\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"607\" data-original=\"https://pic2.zhimg.com/v2-6a1239077f18f051bda990cbf8de09a5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;607&#39; height=&#39;267&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"607\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"607\" data-original=\"https://pic2.zhimg.com/v2-6a1239077f18f051bda990cbf8de09a5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6a1239077f18f051bda990cbf8de09a5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>『 <b>核心模块</b> 』: Node.js 自带的原生模块.  比如, <code>http</code>, <code>fs</code>, <code>url</code>.  其分为 C/C++ 编写的和 JavaScript 编写的两部分.  C/C++ 模块存放在 Node.js 源代码目录的 <code>src/</code> 目录下.  JavaScript 模块存放在 <code>lib/</code> 目录下.  </li><li>『 <b>文件模块</b> 』: 开发人员在本地写的模块.  加载时通过相对路径, 绝对路径来定位模块所在位置.</li><li>『 <b>第三方模块</b> 』: 别人编写的模块, 通过包管理工具, 比如 npm, yarn, 可以将其从网络上引入到本地项目, 供己使用.</li></ul><h2><b>## NPM 包管理器</b></h2><p>NPM 是随同 Node.js 一起安装的 &#34;包管理工具&#34;.  通过它, 全世界开发者们可以简单方便地互相分享和借鉴各自的 Node.js 模块.  其让整个 Node.js 社区生态变得繁荣热闹.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2dcf402d00bb45b590c4f7a0bc9d24ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1400\" data-rawheight=\"545\" class=\"origin_image zh-lightbox-thumb\" width=\"1400\" data-original=\"https://pic4.zhimg.com/v2-2dcf402d00bb45b590c4f7a0bc9d24ab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1400&#39; height=&#39;545&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1400\" data-rawheight=\"545\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1400\" data-original=\"https://pic4.zhimg.com/v2-2dcf402d00bb45b590c4f7a0bc9d24ab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2dcf402d00bb45b590c4f7a0bc9d24ab_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>NPM 常见的使用场景有以下几种：</p><ul><li>允许用户从 NPM 服务器下载别人编写的第三方模块到本地使用。</li><li>允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的模块或命令行程序上传到NPM服务器供别人使用。</li></ul><p>具体的使用方法网上有很多教程, 这里就不赘述了.  不想自行查阅的话, 可以直接参考下面的链接:</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com.cn/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">npm 中文文档 | npm 中文网</a><a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/nodejs/nodejs-npm.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NPM 使用介绍 | 菜鸟教程</a><hr/><h2><b># 使用模块</b></h2><p>在了解了什么是模块之后, 让我们来看看如何在 Node.js 中实际应用模块机制.  在使用上, 可以很简单的分为三个步骤: <b>创建, 导出, 引入</b>.  先创建一个模块, 然后导出功能或数据, 模块之间可以互相引入导出的内容.  </p><p>Node.js 提供了 <code>exports</code> 和 <code>require</code> 两个对象，其中 <code>exports</code> 用于导出模块, <code>require</code> 用于从外部引入另一个模块, 即获取模块的 <code>exports</code> 对象.</p><h2><b>## 创建 &amp; 导出模块</b></h2><p>先让我们来看看如何创建并把模块的内容导出.  在 Node.js 中, 一个文件就是一个模块.  创建模块的方法就是创建一个文件.  </p><p>通过 <code>exports</code> 对象来指定一个模块的导出内容. </p><p>示例: </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 文件名: nameModule.js\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">setName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">newName</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">getName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"k\">return</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在以上示例中, nameModule.js 文件通过 <code>exports</code> 对象将 <code>setName</code> 和 <code>getName</code> 作为模块的访问接口.  其他的模块可以引入导出的 <code>exports</code> 对象, 直接访问 <code>exports</code> 对象的成员函数.</p><h2><b>## 引入模块</b></h2><p>在 Node.js 中, 通过 <code>require</code> 函数来引入外界模块导出的内容.  <code>require</code> 函数接受一个字符串作为路径参数, 函数根据这个字符串参数来进行模块查找. 找到后会返回目标模块导出的 <code>exports</code> 对象.</p><p>示例: </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 文件名: showNameModule.js\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">nameModule</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./nameModule.js&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">nameModule</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">());</span> \n<span class=\"c1\">// 显示: Garrik\n</span><span class=\"c1\"></span>\n<span class=\"nx\">nameModule</span><span class=\"p\">.</span><span class=\"nx\">setName</span><span class=\"p\">(</span><span class=\"s1\">&#39;Xiang&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">nameModule</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">());</span>\n<span class=\"c1\">// 显示: Xiang\n</span></code></pre></div><p>上面示例中, 通过 <code>require</code> 引入了当前目录下 nameModule.js 导出的 <code>exports</code> 对象, 并让一个本地变量指向引入模块的 <code>exports</code> 对象.  之后在 showNameModule.js 文件中就可以使用 <code>getName</code> 和 <code>setName</code> 这两个方法了.</p><h2><b>## module.exports 和 exports 的区别</b></h2><p>在使用 <code>exports</code> 对象导出内容时, 所有作为对外访问接口的属性和方法都是定义在 <code>exports</code> 属性上的.  上面的例子中 <code>setName</code> 和 <code>getName</code> 方法都直接定义在 <code>exports</code> 对象上.  那如果想直接导出一个对象, 或者基础类型值可不可以呢?</p><p>可能有人会想可不可以这样写:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n</code></pre></div><p>如果你试一下的话会发现, 最后引入的是一个空对象, 而不是你定义在 <code>exports</code> 上的东西.</p><p>在使用 <code>exports</code> 的时候只能往这个对象里<b>添加新的属性和方法, 而不能对其直接赋值</b>.  如果想直接导出一个对象, 或者基础类型值要使用 <code>module.exports</code> 对象.  例如上面例子就可以改写成:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 文件名: nameModule.js\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">setName</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">newName</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span> \n  <span class=\"nx\">getName</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这样写的话, 就导出了一整个对象, <code>setName</code> 和 <code>getName</code> 方法是这个对象的成员函数.  而不是之前的 <code>exports</code> 对象了.</p><p>除此之外 <code>module.exports</code> 还可以直接导出基础类型值:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 文件名: numMoule.js\n</span><span class=\"c1\"></span>\n<span class=\"kd\">var</span> <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">123456</span><span class=\"p\">;</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n<span class=\"c1\">// 文件名: showNum.js\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">getNum</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./numModule.js&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// showNum.js 和 numModule.js 在同一目录下\n</span><span class=\"c1\"></span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getNum</span><span class=\"p\">);</span> <span class=\"c1\">// 结果: 123456\n</span></code></pre></div><p>这种方式下, 导出的就直接是基础类型的值.</p><p>可能还是很多人在疑惑 <code>exports</code> 和 <code>module.exports</code> 区别和关系.</p><p>上面我说, 一个文件被另一个模块引入时, 会被做一些处理.  文件中代码并不被 Node 执行, 而是被打包进一个函数中, 然后 Node 执行这个函数.  打包函数会被传入 <code>exports</code>，<code>require</code>，<code>module</code>，<code>__filename</code>，<code>__dirname</code> 这五个参数.  所有的这些参数都在 Node.js 执行函数时赋值, 并且只在当前的函数作用域中有效.  打包函数执行到最后, 返回 <code>module.exports</code> 对象.</p><p>其中, <b><code>exports</code> 是 <code>module.exports</code> 的引用</b>, <code>module</code> 对象代表被打包进去的代码本身.  <code>module</code> 的 <code>exports</code> 对象用于指定一个模块的导出内容.  </p><p>在模块中定义外部可访问接口的时候, 有两个方法:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">};</span>\n</code></pre></div><p>在使用 <code>exports</code> 的时候只能往这个对象里添加新的属性和方法, 而不能对其直接赋值.  因为直接赋值会打破其对 <code>module.exports</code> 的引用.  </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 这是可以的:\n</span><span class=\"c1\"></span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">gender</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Male&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 这是不可以的:\n</span><span class=\"c1\"></span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">,</span> <span class=\"nx\">gender</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Male&#39;</span><span class=\"p\">};</span>\n\n<span class=\"c1\">// 应该用 module.exports:\n</span><span class=\"c1\"></span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Garrik&#39;</span><span class=\"p\">,</span> <span class=\"nx\">gender</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Male&#39;</span><span class=\"p\">}</span>\n</code></pre></div><p>如果想直接导出一个对象, 或基本类型值, 应该使用 <code>module.exports</code>.</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 导出函数\n</span><span class=\"c1\"></span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 导出基本类型值\n</span><span class=\"c1\"></span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n</code></pre></div><h2><b>## require 的路径参数</b></h2><p>在用 <code>require</code> 引入模块时, 路径参数可能有下面三种形式: <i> 相对路径: <code>./</code> 开头 或 <code>../</code> 开头 </i> 绝对路径: <code>/</code> 开头 * 模块名 (例如: <code>http</code>, <code>fs</code>, <code>url</code>)</p><p>根据参数不同, 加载方式也有区别.</p><h2><b>### 绝对路径, 或相对路径</b></h2><p>在指定了模块路径的情况下, Node.js 会去指定的位置加载模块.  但因为用 <code>require</code> 来加载模块时可以省略文件后缀, 在省略的情况下, Node.js 会去猜测文件的类型.</p><p>比方说我要去  <code>./modules/</code> 目录下加载一个 <code>haha</code> 模块. </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">haha</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./modules/haha&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>因为 <code>haha</code> 没写文件后缀, Node.js 将执行的操作顺序为: <i> 按 js 文件来执行（先找对应路径当中是否有 haha.js 文件, 有就加载） </i> 按 json 文件来解析（若上面的 js 文件找不到时，则找对应路径当中的 haha.json 文件来加载） <i> 按照预编译好的 C++ 模块来执行（还没有, 寻找对应路径当中的 haha.node 文件来加载） </i> 若参数字符串为一个目录的路径, 就是说 <code>haha</code> 为一个目录, 则先查找该文件夹下的 package.json 文件，然后再加载该文件当中 <code>main</code> 字段所指定的入口文件.  若 package.json 文件当中没有 <code>main</code> 字段，或者根本没有 package.json 文件，则再默认查找该文件夹下的 index.js 文件, 并作为模块来载入. * 要是还没有就拉倒吧!</p><h2><b>### 无路径, 直接模块名</b></h2><p>在没有路径, 参数值直接为一个模块名的情况下:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">haha</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;haha&#39;</span><span class=\"p\">);</span>\n</code></pre></div><ul><li>如果 <code>haha</code> 是 Node.js 核心模块就直接加载.</li><li>如果是第三方模块, 则依次从当前目录中的 node_modules 目录, 父级目录中的 node_modules 目录, 一直到根目录下的 node_modules 目录下去查找 <code>haha</code> 的所在.  若有两个同名文件，则遵循就近原则。优先引入目录顺序靠前的模块.</li><li>如果找到的 <code>haha</code> 为一个目录, 则先查找该文件夹下的 package.json 文件，然后再加载该文件当中 <code>main</code> 字段所指定的入口文件.  若 package.json 文件当中没有 <code>main</code> 字段，或者根本没有 package.json 文件，则再默认查找该文件夹下的 index.js 文件, 并作为模块来载入.</li><li>要是还没有就拉倒吧!</li></ul><hr/><p>😆 好啦，今天的分享就告一段落啦。下一篇中，我会介绍如何实现一个 &#34;Hello World&#34; HTTP 服务器。</p><a href=\"https://zhuanlan.zhihu.com/p/47787413\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-281e62146aa0a550fb7580f183f83b7d_180x120.jpg\" data-image-width=\"900\" data-image-height=\"500\" class=\"internal\">罐装汽水Garrik：Node.js 系列 - 搭建 &#34;Hello World&#34; HTTP 服务器</a><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/46702376", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 6, 
            "title": "Node.js 系列 - 基础概念", 
            "content": "<h2><b># 前言</b></h2><p><b>作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在 Node.js 系列的第一节里, 我会先介绍 Node.js 的一些基本概念. 让你在看完这篇文章时, 能对 &#34;什么是 Node.js?&#34;, &#34;为什么用 Node.js?&#34; 这两个问题有个基本的概念.  并且尝试写下第一句 Node.js 代码.</p><h2><b># 什么是 Node.js?</b></h2><p>先来看看 <a href=\"https://link.zhihu.com/?target=http%3A//nodejs.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Node 官网</a> 给的答案:</p><blockquote> Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</blockquote><p>基本上, 很多人第一次看到上面这段定义的时候, 完全搞不懂它在说什么...</p><p>下面我就来逐步解释 Node.js 的这段定义.</p><h2><b>## 基于 Chrome V8 引擎的 JavaScript 运行环境</b></h2><p>看到这句话后, 你可能第一个疑问是 🤔 &#34;什么是 Chrome V8 引擎?&#34;</p><p>在解答这个问题之前, 回到我们熟悉的前端领域, 我先问另一个问题 🤔 <b>&#34;JavaScript 代码是如何在浏览器中运行的?&amp;</b>amp;amp;amp;quot;</p><p>简单来说, 我们所写的 JavaScript 源代码, 是为了给人看的, 浏览器加载 JavaScript 代码后, 它是看不懂的, 需要翻译成机器码, 也就是 &#34;机器的语言&#34;, 才可以让机器执行.  在浏览器中, JavaScript 引擎负责进行代码的解释.  V8 引擎是 Chrome 浏览器在用的 JavaScript 引擎.  V8 引擎由 C++ 实现, 支持跨平台, 就是说可以在各种操作系统上使用, Node.js 基于 V8 引擎, 意味着它可以让 JavaScript 代码脱离浏览器的束缚, 在各种各样不同的操作系统上运行.</p><p>那么一句话总结, <b>Node.js 不是一门语言, 是一个可以让 JavaScript 代码在各种各样的平台上得到执行的运行环境.  之所以支持 JavaScript 语法是因为基于 V8 引擎</b>.</p><h2><b>## 非阻塞式 I/O</b></h2><p>&#34;非阻塞式 I/O&#34;, 我知道这几个字看起来让人有点懵.  别着急, 那让我换个说法, &#34;<b>不会阻塞 JavaScript 程序执行的 Input/Output 操作</b>&#34;, 这样会不会清楚一点? 可能你还是不太懂, 那下面我就逐字地解释.</p><p>在说 &#34;非阻塞&#34; 之前, 先了解什么是 &#34;阻塞&#34;.  从字面上理解, &#34;阻塞&#34; 就是堵住了, 通不过的意思.  在计算机中, 程序在线程内按顺序被执行, 后面的操作必须等前面的操作结束才能被执行.  如果前一个操作耗时很长, 后面的操作就要一直等着, 直到前面的操作完成.  这个等待的状态, 叫做 &#34;阻塞&#34;.  </p><blockquote><b>线程</b>: 程序执行流的最小单元。程序代码在其中被 CPU 依次处理.  在一条线程中, 同一时间, 只有一段代码被被执行, 或等待被执行.</blockquote><p>现在再来说说什么是 &#34;Input/Output 操作&#34;.  从字面上翻译就是 &#34;输入/输出&#34;, 那输的是什么呢?  简单说就是 &#34;信息&#34;.  <b>在程序执行过程中如果需要操作系统进行 磁盘读写 或 网络通信, 我们就都统称为 &#34;I/O 操作&#34;</b>.  例如, 从服务器获取页面, 写入文件, 提交表单, 读取数据库都是属于这个范畴的.  凡是这一类操作, 直观感受是 &#34;花的时间较长&#34;.  那么在代码执行 I/O 操作时, 往往要让后面的操作等很长时间.  整条线程一直处于阻塞的状态, 这种 I/O 操作方式称为 &#34;阻塞式 I/O&#34;.  拿生活举例, 游戏没下载完, 我就只能干等着玩不了. </p><p>在程序设计中, 对于高并发的任务 (同时发生的任务) , 在线程阻塞的情况下, 整条线程不能执行程序, 这会导致任务处理速度极慢.  常见的方案是通过多线程来解决. 但每条线程的利用率并没有增加, 同时也会导致硬件成本高昂.  </p><blockquote><b>并发</b>: 在同一个时间段中, 几个任务同时进行.  但是在任意时间点, 有且只有一个任务在执行.  <br/> (可以想象成你在同时写五份作业, 每份只写几笔就换下一个, 然后再反回来接着写两笔.  虽然五份作业在一段时间内同时都被写了, 但是在任一时间点你只是在写其中的一份作业.)  </blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-40e6b04ad0815522d4ee1fdc96abfc36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"920\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb\" width=\"920\" data-original=\"https://pic3.zhimg.com/v2-40e6b04ad0815522d4ee1fdc96abfc36_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;920&#39; height=&#39;556&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"920\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"920\" data-original=\"https://pic3.zhimg.com/v2-40e6b04ad0815522d4ee1fdc96abfc36_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-40e6b04ad0815522d4ee1fdc96abfc36_b.jpg\"/></figure><p>在 Node.js 中, JavaScript 代码在一个<b>单一的主线程</b>中进行处理, 同一时间只能处理一项任务.  为了处理高并发, 采用了 &#34;<b>非阻塞式 I/O</b>&#34;, 也可以称为 &#34;异步式 I/O&#34;.  当线程遇到 I/O 操作时，不会以阻塞的方式去等待操作完成.  而是将 I/O 操作先放到另一个地方等待处理, 然后 Node.js 继续执行下一条代码.  等主线程代码全部执行完毕后, 再去处理 I/O 操作.  具体的过程, 在下一段介绍. </p><h2><b>## 事件驱动</b></h2><p>继续上一段的内容.  在 Node.js 中, 当主线程遇到 I/O 操作时，会<b>先把 I/O 操作封装成一个『 请求对象 』, 然后被推入到『 线程池 』中等待执行</b>.  然后异步调用的第一阶段结束, JavaScript 主线程继续执行后续操作, 直至所有非阻塞操作都处理完.  因为 I/O 操作在线程池中等到处理, 所以也不会阻塞主线程.</p><p><b>当线程池有空余线程时, 等待的 I/O 操作会被处理.  当 I/O 操作完成, 获取的结果保存在请求对象的 <code>result</code> 属性上.  操作系统会来检查线程池是否有处理完的请求, 如果有, 就把请求对象加入到 『 事件队列 』中</b>.</p><p>在主线程的所有非阻塞代码都处理完后, 『 <b>事件循环</b> 』<b>开始逐个处理事件队列中的事件.  保存在请求对象的 <code>result</code> 属性被取出, 作为与请求绑定的回调函数的参数.  然后执行回调来完成此 I/O 操作.</b></p><p><b>当队列中已经没有未处理的事件了, 程序结束</b>.  可以看出程序的结束与否, 取决于事件是否被全部处理完毕, 因此称 Node 是事件驱动的.</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-36260a0b1010415efe135eef8299433a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"919\" data-rawheight=\"620\" class=\"origin_image zh-lightbox-thumb\" width=\"919\" data-original=\"https://pic3.zhimg.com/v2-36260a0b1010415efe135eef8299433a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;919&#39; height=&#39;620&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"919\" data-rawheight=\"620\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"919\" data-original=\"https://pic3.zhimg.com/v2-36260a0b1010415efe135eef8299433a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-36260a0b1010415efe135eef8299433a_b.jpg\"/></figure><h2><b>## 做个比喻</b></h2><p>如果不好理解的话, 可以想象老王一个人去钓鱼.</p><ul><li>『 <b>单线程阻塞式 I/O</b> 』就像老王把鱼竿架好之后, 就在旁边等着, 等鱼漂抖动的时候就拉杆.  在等待的这段时间里, 他是什么也不干的.  当前一条鱼上钩后, 老王才能钓下一条鱼, 或者做其他事情.</li><li>『 <b>多线程阻塞式 I/O</b> 』过了几天, 老王觉得这样效率低, 就买了十把鱼竿同时架起来.  在同一段时间内, 这种方法钓的鱼的确多了, 但老王在一个时间点只能去操纵一个鱼竿, 单个鱼竿的效率很低, 老王仍旧一直守在鱼竿旁, 在等的时候不能做其他的事.  </li><li>『 <b>非阻塞式 I/O</b> 』又过了几天, 老王一个发明家朋友给了他一个 &#34;自动通知鱼竿&#34;, 鱼上钩后, 鱼竿会给老王发微信通知他过来收鱼.  这样老王就可以在等鱼上钩的时间里去干别的事情了.</li></ul><hr/><h2><b># 为什么用 Node.js?</b></h2><p>先来说 Node.js 的优点:  </p><ul><li><i><b>跨平台性</b>: Node.js 基于 V8 引擎, 使得其可以覆盖到日常所能见的大多数平台.</i></li><li><b>适合 &#34;数据密集型实时应用&#34;</b>: Node.js 采用非阻塞式 I/O 模型, 非常适用于处理涉及大量 I/O 操作的数据密集型应用.  比如, 聊天室, Web 服务器等.  </li><li><i><b>&#34;前端开发者&#34; 学习成本低</b>: Node.js 使用 JavaScript 语法, 对于前端开发人员来说, 学习成本非常低. </i> </li><li><b>&#34;第三方模块&#34; 丰富</b>: 繁荣的 Node.js 社区 提供了丰富的第三方模块供其使用.  通过这些模块, Node.js 可以拥有更多的应用场景.</li></ul><p>当然 Node.js 也是有缺点的:  </p><ul><li><i><b>不适合 &#34;CPU 密集型应用&#34;</b>:  Node.js 不适合处理涉及大量 CPU 计算的任务. 比如, 视频编码、人工智能等. </i> </li><li><b>不能充分的利用多核 CPU 服务器</b>: Node.js 是单线程的, 在多核设备上运行, 不能充分利用其性能.  但是 Node.js 其实也提供了支持多线程的方法.</li></ul><hr/><h2><b># 安装 Node.js</b></h2><p>根据计算机平台的不同, 安装方法也略有差异.  本文侧重于概念, 具体实操, 可能每位读者因偏好不同, 方法各异.  在此就不再赘述了.</p><p>最方便的方式是直接上官网去下载对应平台的源码或安装包, 或者通过包管理器直接安装.</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn/download/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载 Node.js 源码或预编译安装包</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn/download/package-manager/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">包管理器方式安装 Node.js</a></li></ul><h2><b>## Node.js 代码实例</b></h2><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myNodeServer</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Content-type&#39;</span><span class=\"o\">:</span><span class=\"s1\">&#39;text/plain&#39;</span><span class=\"p\">});</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">);</span> \n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">myNodeServer</span><span class=\"p\">).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span> <span class=\"c1\">//监听 3000 端口\n</span><span class=\"c1\"></span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Server is running!&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>创建一个空文件, 把上面代码复制到其中, 文件后缀改成 <code>.js</code>.  然后在命令行中, 用 <code>node</code> 命令执行刚刚的文件 ( 注意文件所在目录位置和文件名 ) .</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-307a308c71a339ef77c53cc7e3e35581_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1188\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb\" width=\"1188\" data-original=\"https://pic2.zhimg.com/v2-307a308c71a339ef77c53cc7e3e35581_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1188&#39; height=&#39;295&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1188\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1188\" data-original=\"https://pic2.zhimg.com/v2-307a308c71a339ef77c53cc7e3e35581_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-307a308c71a339ef77c53cc7e3e35581_b.jpg\"/></figure><p>如果运行成功你的命令行上会显示 &#34;Server is running!&#34; 这段话.  然后用浏览器访问 <code>http://localhost:3000/</code> 这个地址.  你会看到网页上显示 &#34;Hello World&#34;.  至此你就实现了一个简易 HTTP 服务器.</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0c9a68e30d4fb562ab88c29a4774b028_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"753\" data-original=\"https://pic1.zhimg.com/v2-0c9a68e30d4fb562ab88c29a4774b028_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;753&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"753\" data-original=\"https://pic1.zhimg.com/v2-0c9a68e30d4fb562ab88c29a4774b028_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0c9a68e30d4fb562ab88c29a4774b028_b.jpg\"/></figure><h2><b># Node.js 学习资源推荐</b></h2><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//nodejs.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Node.js 中文文档</a> </li><li><a href=\"https://link.zhihu.com/?target=https%3A//cnodejs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CNode 社区</a> </li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/youyudehexie/node123\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Node.js 中文资料导航</a> </li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/chyingp/nodejs-learning-guide\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">&#34;程序员小卡&#34; 的 Node.js 笔记</a> </li></ul><hr/><p>😆 好啦，今天的分享就告一段落啦。下一篇中，我会介绍 Node.js 的模块机制。</p><p>如果喜欢的话就点个关注吧！O(∩_∩)O 谢谢各位的支持❗️</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/47780170\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-20a803ceeea2578d65ab2126f83f340d_180x120.jpg\" data-image-width=\"900\" data-image-height=\"500\" class=\"internal\">罐装汽水Garrik：Node.js 系列 - 模块机制</a><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": [
                {
                    "userName": "龙风", 
                    "userLink": "https://www.zhihu.com/people/ee772de9c9c1ff11dae978677b7d77cd", 
                    "content": "嗯", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "你觉得怎么样", 
                            "likes": 0, 
                            "replyToAuthor": "龙风"
                        }
                    ]
                }, 
                {
                    "userName": "Alvin", 
                    "userLink": "https://www.zhihu.com/people/107982ac39545f30321c78da777da7db", 
                    "content": "抽象名词解释的很到位赞赞赞", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>谢谢支持, 我之后几周会陆续把后续内容传上来.  这个系列会从零基础开始一直到实战项目</p>", 
                            "likes": 1, 
                            "replyToAuthor": "Alvin"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34806399", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 4, 
            "title": "Git 实用攻略", 
            "content": "<p><b>(预计阅读时间：60分钟，推荐使用电脑阅读)</b></p><p>基本上每一个程序员在学习代码的主线剧情里，都会领到一个必做任务，那就是学会使用 Git。如果你现在正巧接到了这个任务，并且正在苦于在网上搜攻略。那么你不用再继续寻找了，按着下面的流程一步一步来，你就可以掌握 Git 的日常应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>话不多少，少年，请鼠标滚动下滑。<b>(注：如果想复习 Git 命令，可以直接前往倒数第二节）</b></p><hr/><h2><b>1. 什么是Git</b></h2><p>Git 是一个<b>开源的 分布式 版本控制系统</b>。</p><p>“</p><p>什么？分布式版本控制系统？？？ 不好意思，我不懂！”</p><p class=\"ztext-empty-paragraph\"><br/></p><p>没关系，我们先来说一说 Git 是干什么用的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>先试想下面几个场景。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>场景1： 小明是一个前端工程师，一天老板让小明写一个网页。小明忙活了半天辛辛苦苦地打了好几百行代码。让老板检查的时候，老板却说：“嗯。。。 和我想要的不一样，删了重做吧！” 小明为了下个月能吃饱饭，压制住了情绪，删了代码，重新写了一个新的网页。等老板再检查的时候， 他又和小明说：“其实我想了想，可能还是刚才的那个好一些。我们用之前那个吧！” 小明知道生活还要继续，故作笑脸，最起码他这次知道老板要的是什么了，但是刚刚的代码似乎已经被小明手快地删干净了。。。。。。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>场景2：小明这次学聪明了，他把每一次的修改都单独保存了一份：修改文件-1，修改文件-2，修改文件-3。。。 当小明辛苦工作了一周之后，小明发现他的修改文件编号已经到 251 了，而同时小明也发现，他似乎并不知道 136 号文件具体修改了什么内容。。。 但没什么能难倒机智的小明，他决定下次再修改的时候，在文件名后面加上修改备注。于是 252 号文件变成了 “修改252 - 添加导航栏”。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>场景3：作为一名前端工程师，小明不仅仅要写HTML文件，他还有一堆CSS文件，JS文件，和其他一些有的没的。小明突然发现一个新的问题出现了，他怎么能知道这些保存过的修改文件，到底哪个是和哪个对应的呢？于是他干脆每修改一个文件，就把整个项目的文件夹保存一份。很快他发现，自己硬盘不太够用了，小明只好删除了玩了十年的CF。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>场景4：由于小明的努力工作，老板挣的钱越来越多。终于老板招进来一名新的程序员。小明从此不再孤单，他使出久旱逢甘雨的工作热情，传授给了新同事自己保存项目文件夹的技术。看到自己也能传授新人工作经验了，小明欣慰的用右手食指向上顶了顶眼镜，露出了满意却又羞涩的笑。转天小明和新同事充满朝气地分别为网页添加了好多新功能。然而当他们想合并自己各自改的同一些文件的时候，小明不得不用眼睛一行一行的去检查各自的代码，然后手动合并。一天过去了，小明合并完了，感觉一天很充实。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>场景5：小明终于攒够了足够多的工作经验，一个哥们给他推荐了一个待遇更好的大企业。小明十米助跑，奋力起跳，纵深一跃来到了一个有30个程序员的大公司。进公司的第一天，小明的笑容突然落下了，他摸了摸渐疏的头发，怯懦地询问旁边的同事：“你们这么多人，写完代码都是怎么合并在一起的呀？” 同事说：“你不知道 Git 吗？”</p><p class=\"ztext-empty-paragraph\"><br/></p><p>简单来说，Git 做的就是把上面的<b>保存</b>，<b>加备注</b>，<b>合并代码</b>等等一系列的事情，自动帮你完成。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>再简单来说，Git 能帮你：</p><ol><li><b>方便地检索之前所做的文件修改。</b></li><li><b>方便地和多人共同在一个项目上合作。</b></li></ol><hr/><h2>1.2 版本控制 Version Control System (VCS)。</h2><p>“抱歉，我现在似乎知道了Git是干什么用的，那版本控制又是什么呢？ ? ? “</p><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><b>版本控制</b>是一种<b>记录</b>一个或若干文件<b>内容变化</b>，<b>以便</b>将来<b>查阅</b>特定版本<b>修订情况</b>的<b>系统</b>。 —— Git官网</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>简单来说，如果对一个项目（一大堆文件）使用版本控制，你就好像有了一个“撤销键“。你可以将项目回退到一个特定的时间点。也可以方便的知道每一次修改都是什么时间，由什么人做的。</p><hr/><h2>1.3 集中式 vs 分布式</h2><p>我们在上面说了“版本控制系统“是干什么用的，但是“分布式”又是什么意思呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在解释“分布式”之前，我们先说一说“集中式”，这个我们日常中更常见的管理方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-850b17b3add84bcf7de54be54c924883_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"1056\" data-original=\"https://pic4.zhimg.com/v2-850b17b3add84bcf7de54be54c924883_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1056&#39; height=&#39;353&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1056\" data-original=\"https://pic4.zhimg.com/v2-850b17b3add84bcf7de54be54c924883_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-850b17b3add84bcf7de54be54c924883_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>集中式：</b></p><p>简单来说 “集中式” 就是用单一的中央服务器，保存所有文件的修订版本，重要的数据和操作都集中在这一个中心节点里面。协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。如果拿日常生活举例的话，就好像图书馆，大家去借书还书，都在图书馆里面进行。所有记录，资料都保存在图书馆 。虽然这样的管理方式非常直观，也易于管理，但是却存在很多隐患。使用“集中式”管理的话，每个人都要通过网络来连接这台中央服务器，如果没有网络，那就没法工作，网速不快，也会影响效率。如果这个服务器死机了，那大家都不能工作了。如果不幸发生火灾地震，服务器被损坏了。那么就只能从头来过了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>分布式：</b></p><p>再说“分布式”，客户端不像之前提取最新版本的文件，而是把代码仓库完整地拷贝下来。因此每一个客户端都是一个独立的节点，在各自的节点上，即使没有联网，也可以进行操作。每个人的电脑上都有独立的一份完整的代码仓库。一个人修改了文件，这时只要把修改过的文件发送给别人，别人就也都能看的到了。这样做不但提高了效率，而且即使一个人的电脑出问题了，也可以直接从其他人那里复制一份。：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-50d83fda30e7ab2e5f98664e53a0bb6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb\" width=\"731\" data-original=\"https://pic1.zhimg.com/v2-50d83fda30e7ab2e5f98664e53a0bb6c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;731&#39; height=&#39;330&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"731\" data-original=\"https://pic1.zhimg.com/v2-50d83fda30e7ab2e5f98664e53a0bb6c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-50d83fda30e7ab2e5f98664e53a0bb6c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>解释的再简单一点的话就好像：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>集中式</b>是 小明，小红写完作业，交给老师，老师把作业丢了，那么作业就真的全丢了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>分布式</b>是 小明，小红写完作业，小明，小红分别抄一份对方的，之后再交给老师。如果老师把作业丢了，没关系小明，小红那里还有各有一份备份。</p><hr/><h2><b>2. 让我们开始吧！Git 基础操作</b></h2><h2>2.1 安装 Git &amp; 设置用户信息</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>请根据你所使用的操作系统来选择安装方式吧！</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Windows：</b></p><ol><li>首先下载 <a href=\"https://link.zhihu.com/?target=http%3A//msysgit.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Git安装包</a>，之后点击安装包，一路默认下一步。</li><li>安装完毕之后，在开始菜单里找到 “Git” -&gt; “Git Bash”，之后出现一个命令号窗口类似的东西，这就说明安装成功啦。?</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fbe23a640383eb22e3c076b573eb5299_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"404\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic2.zhimg.com/v2-fbe23a640383eb22e3c076b573eb5299_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;671&#39; height=&#39;404&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"404\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"671\" data-original=\"https://pic2.zhimg.com/v2-fbe23a640383eb22e3c076b573eb5299_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fbe23a640383eb22e3c076b573eb5299_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>MAC：</b></p><ol><li>有两种方式供你选择（任选其一）</li><li>下载<a href=\"https://link.zhihu.com/?target=http%3A//sourceforge.net/projects/git-osx-installer/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Git安装包</a></li><li>在 Terminal 打<code>brew install git</code>使用 brew 下载安装</li><li>在 Terminal 打<code>git --version</code>如果出现下图中类似结果，就说明安装成功了。这句指令用来查看 Git 版本号。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1c9a890cfe17d9e826ef94270083be46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic3.zhimg.com/v2-1c9a890cfe17d9e826ef94270083be46_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic3.zhimg.com/v2-1c9a890cfe17d9e826ef94270083be46_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1c9a890cfe17d9e826ef94270083be46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Linux：</b></p><p>如果你使用的是 Ubuntu 或者 Debian，可以在 Terminal 打<code>sudo apt-get install git</code></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果你使用的是 Fedora，可以用指令<code>sudo yum install git</code></p><p class=\"ztext-empty-paragraph\"><br/></p><p>之后可以用指令<code>git --version</code>来验证是否安装成功。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>设置用户信息：</b></p><p>现在我们已经安装好了Git，在运行之前我们最好还要设置一下用户信息，之后这些信息会写入你每次的 Git 提交。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>通过下面命令，设置 用户名 和 邮箱地址</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git config --global user.name &lt;&#34;用户名&#34;&gt;\n\n$ git config --global user.email &lt;&#34;邮箱地址&#34;&gt;</code></pre></div><p>上面代码使用了<code>--global</code>选项，代表为全局设置，之后如果不特定设置，Git 会默认使用这些信息。如果想针对特定项目做单独设定的时候，可以去掉<code>--global</code>选项 进行设置。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>设置好之后，可以通过<code>git config --list</code>命令来查看所有配置。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>也可以通过<code>git config [user.name]</code>命令来单独查看用户名配置。（同理适用于其他配置项）</p><hr/><h2>2.2 创建 Git 仓库（Repository）</h2><p>为了在我们项目中使用 Git，我们需要创建一个 Git 仓库（Repository），在仓库（Repository）中的文件都可以使用 Git 进行管理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们有两种方法创建 Git 仓库（Repository）：</p><ol><li>通过<code>git init</code>命令可以在现有目录中创建一个 Git 仓库（Repository）</li><li>通过<code>git init &lt;目录名&gt;</code>命令可以新建一个目录，并在内创建一个 Git 仓库（Repository）。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b96c11d5ba99532de7278b49ec92eb85_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"50\" class=\"origin_image zh-lightbox-thumb\" width=\"767\" data-original=\"https://pic2.zhimg.com/v2-b96c11d5ba99532de7278b49ec92eb85_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;767&#39; height=&#39;50&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"50\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"767\" data-original=\"https://pic2.zhimg.com/v2-b96c11d5ba99532de7278b49ec92eb85_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b96c11d5ba99532de7278b49ec92eb85_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我通过命令<code>git init git_learn</code>新建了一个名为 git_learn 的新目录，并在内创建了一个 Git 仓库（Repository）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>你也许发现了，在刚刚新建的 git_learn 目录下还多了一个名为 .git 的隐藏子目录。这个子目录包含这关于你 Git 仓库（Repository）的重要文件，不要动它，也不要管它，在以后的进阶教程里我们会再讲解。</p><hr/><h2>2.3 添加文件到 Git 仓库（Repository）</h2><p>现在让我们在刚刚的 git_learn 目录下新建一个 README.TXT 文件。并在文件内添加内容 “Hello World !”</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-491e3f978a8dbdefbe65d274b31fb982_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"87\" class=\"content_image\" width=\"312\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;312&#39; height=&#39;87&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"87\" class=\"content_image lazy\" width=\"312\" data-actualsrc=\"https://pic3.zhimg.com/v2-491e3f978a8dbdefbe65d274b31fb982_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>之后分两步把 README.TXT 文件添加到 Git 仓库（Repository）：</p><ul><li>第一步：用<code>git add</code>命令把文件<b>添加（add）</b>到 Git 仓库（Repository）：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git add README.TXT</code></pre></div><ul><li>第二步：用<code>git commit</code>命令把文件<b>提交（commit）</b>到 Git 仓库（Repository）：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">git commit -m &#34;Add a README file.&#34;</code></pre></div><p>这里的<code>-m</code>选项后面输入的是 提交注释（comment），在这里大概说明一下你提交了什么内容，以便之后可以方便查看改动记录。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-47107ae83ad3a8913a46abb1414810a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"66\" class=\"origin_image zh-lightbox-thumb\" width=\"595\" data-original=\"https://pic4.zhimg.com/v2-47107ae83ad3a8913a46abb1414810a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;595&#39; height=&#39;66&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"66\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"595\" data-original=\"https://pic4.zhimg.com/v2-47107ae83ad3a8913a46abb1414810a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-47107ae83ad3a8913a46abb1414810a7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>之后我们看到执行成功信息，“1 file changed, 1 insertion(+)”，告诉我们一个文件被改动（刚刚添加的README.TXT文件），插入了一行内容（“Hello World !&#34;）。你现在也可以试一试多创建几个文件，多添加几行内容，然后添加（add），提交（commit），看一看执行成功信息会有什么变化吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这个时候一个问题就出现了，为什么要用 添加（add） 和 提交（commit）两步呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在下一节我们就要讲解一下 Git 项目的 文件状态 和 工作区域 概念。</p><hr/><h2>2.4 文件状态 与 工作区域</h2><p>在 Git 中文件有两种状态：<b>已跟踪（tracked）</b> 和 <b>未跟踪（untracked）</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>其中 <b>已跟踪（tracked）</b>又分为：<b>已提交（committed）</b>、<b>已修改（modified）</b>和 <b>已暂存（staged）</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>并由此引入 Git 项目的三个工作区域：<b>Git 仓库（Repository）</b>、<b>工作区（Working Directory）</b> 和 <b>暂存区（Staging Area）</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>下面来通过一个实例来讲解一下：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、<b>未跟踪（untracked）&amp; 工作区（Working Directory）</b></p><p>在 git_learn 目录下新建一个文件 test1 。之后可以输入命令<code>git status</code>来查看文件状态。这个时候新建的文件 test1 就处于出现在<code>Untracked files</code>下面，表示为 <b>未跟踪（untracked）</b>状态，意味着这个文件并不归 Git 管。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>文件所在的 git_learn 目录就是 <b>工作区（Working Directory）。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ae08b4574b85dc04652cf9e562a08ff6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"852\" data-original=\"https://pic3.zhimg.com/v2-ae08b4574b85dc04652cf9e562a08ff6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;852&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"852\" data-original=\"https://pic3.zhimg.com/v2-ae08b4574b85dc04652cf9e562a08ff6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ae08b4574b85dc04652cf9e562a08ff6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2、<b>已暂存（staged）&amp; 暂存区（Staging Area）</b></p><p>输入命令<code>git add test1</code>来跟踪 test1 文件。这时 test1 状态为 <b>已暂存（staged）</b>，并且添加（add）到 <b>暂存区（Staging Area）</b>，等待最终提交（commit）。从<code>new file: test1</code>可以看出，test1 是第一次被跟踪。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>暂存区（Staging Area）</b>可以理解为一个从 工作区（Working Directory）到 Git 仓库（Repository）的过渡区域，这里面的文件等待着被最终提交（commit）到 Git 仓库（Repository）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0b29062d8ae2b52065cdb7f68c3792e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"517\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb\" width=\"517\" data-original=\"https://pic4.zhimg.com/v2-0b29062d8ae2b52065cdb7f68c3792e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;517&#39; height=&#39;148&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"517\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"517\" data-original=\"https://pic4.zhimg.com/v2-0b29062d8ae2b52065cdb7f68c3792e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0b29062d8ae2b52065cdb7f68c3792e3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>3、<b>已提交（committed）</b></p><p>输入命令<code>git commit -m &#34;new file&#34;</code>来把 test1 文件提交到 <b>Git 仓库（Repository）</b>。之后我们看到 test1 已经被提交，状态变成<b>已提交（committed）</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5501804292b51212576d3bd4cf4000aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"64\" class=\"origin_image zh-lightbox-thumb\" width=\"503\" data-original=\"https://pic3.zhimg.com/v2-5501804292b51212576d3bd4cf4000aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;503&#39; height=&#39;64&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"64\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"503\" data-original=\"https://pic3.zhimg.com/v2-5501804292b51212576d3bd4cf4000aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5501804292b51212576d3bd4cf4000aa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>4、<b>已修改（modified）</b></p><p>现在让我们在 test1 文件里添加一行文本 “I LOVE GIT“。之后在输的入<code>git status</code>我们发现一行红字<code>modified: test1</code>，这句话意思就是说 test1 文件已经是 <b>已跟踪（tracked）</b>状态，但还没有暂存，与之前提交的文件相比，出现了修改。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果想再次提交（commit），我们还是要向之前一样，先用<code>git add test1</code>把 test1 添加到 暂存区（Staging Area），之后用<code>git commit -m &#34;&lt;提交注释&gt;&#34;</code>把 test1 提交到 Git 仓库（Repository）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-737ade29cd44abe8f840c0aeecef1398_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"848\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"848\" data-original=\"https://pic1.zhimg.com/v2-737ade29cd44abe8f840c0aeecef1398_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;848&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"848\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"848\" data-original=\"https://pic1.zhimg.com/v2-737ade29cd44abe8f840c0aeecef1398_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-737ade29cd44abe8f840c0aeecef1398_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Tip:</b>也可以给 git commit 加上 -a 选项，Git 就会自动把所有<b>已跟踪的文件</b>暂存起来一并提交，从而跳过 git add 步骤。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-10fae608ad75fc35f49a6be9d0ea3233_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-10fae608ad75fc35f49a6be9d0ea3233_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;330&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-10fae608ad75fc35f49a6be9d0ea3233_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-10fae608ad75fc35f49a6be9d0ea3233_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>总的来说</b>，已跟踪（tracked）的文件是指那些被纳入了版本控制的文件，在Git仓库（repository）中有它们的记录，在工作一段时间后，它们的状态可能处于未修改（unmodified），已修改（modified）或已放入暂存区（staged）。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪（untracked）文件，它们既不存在于Git仓库（repository）中，也没有放入暂存区（staging area）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1f39d8213b0c005c004ba5066478de75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-1f39d8213b0c005c004ba5066478de75_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-1f39d8213b0c005c004ba5066478de75_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1f39d8213b0c005c004ba5066478de75_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Git 仓库（repository）目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。工作区（working directory）是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库（repository）的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。暂存区（staging area）保存了准备下次提交的文件列表信息。</p><hr/><h2>2.5 查看修改，撤销修改</h2><p>在之前，我们用<code>git status</code>命令可以看到 文件是否被修改，但是如果我们想知道究竟具体哪些地方被修改了可以输入<code>git diff</code>命令。</p><p>还是继续上一个例子，我们在之前的 test1 文件里在新的一行输入文本 “I LOVE GITHUB ALSO”。之后输入<code>git diff</code>命令。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dd5086a2522684c77535c8b6f7167fac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic1.zhimg.com/v2-dd5086a2522684c77535c8b6f7167fac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;458&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"458\" data-original=\"https://pic1.zhimg.com/v2-dd5086a2522684c77535c8b6f7167fac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dd5086a2522684c77535c8b6f7167fac_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下面绿色行显示的就是 尚未暂存的内容 与 上次提交的内容 之间的差别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>注意，git diff 命令只能比较 未暂存 与 上次提交 之间的改动，如果你暂存了更新后的文件，你就要使用<code>git diff --staged</code>命令了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么，如果这个时候你突然不想要这个修改了，你想撤回到修改之前该怎么办呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其实在之前使用<code>git status</code>命令的时候，就已经告诉我们答案了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1ca48437b5ec8b4052a4c4ce2acf9746_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb\" width=\"845\" data-original=\"https://pic3.zhimg.com/v2-1ca48437b5ec8b4052a4c4ce2acf9746_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;845&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"845\" data-original=\"https://pic3.zhimg.com/v2-1ca48437b5ec8b4052a4c4ce2acf9746_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1ca48437b5ec8b4052a4c4ce2acf9746_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>使用<code>git checkout -- &lt;文件名&gt;</code>命令可以丢弃<b>工作区（working directory）</b>的修改</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0c3f385f0f46b8ee7c49eb6bdd2b47d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"517\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb\" width=\"517\" data-original=\"https://pic2.zhimg.com/v2-0c3f385f0f46b8ee7c49eb6bdd2b47d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;517&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"517\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"517\" data-original=\"https://pic2.zhimg.com/v2-0c3f385f0f46b8ee7c49eb6bdd2b47d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0c3f385f0f46b8ee7c49eb6bdd2b47d1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>使用<code>git reset HEAD &lt;file&gt;</code>命令可以把 暂存区（staging area）的修改撤销掉，重新放回工作区</p><hr/><h2>2.6 版本回退</h2><p>到目前为止我们已经做了很多修改了，下面我们就要介绍如何去按“撤销键“了，也就是说回到之前的某一个版本。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先如果想回到之前某一个版本的话，我们要先学会查看提交历史。使用<code>git log</code>命令，会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验、作者用户名 和 电子邮件地址、提交时间 以及 提交注释。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-429f7eeddee971521c19bbcf65556325_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb\" width=\"723\" data-original=\"https://pic2.zhimg.com/v2-429f7eeddee971521c19bbcf65556325_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;723&#39; height=&#39;399&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"723\" data-original=\"https://pic2.zhimg.com/v2-429f7eeddee971521c19bbcf65556325_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-429f7eeddee971521c19bbcf65556325_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>图片中<code>commit</code>后面的一大串字符是 <b>提交</b>ID 是由 SHA-1 计算出来的，不会重复，所以每个人电脑上的都是不同的。之所以不用简单的 1，2，3，... 数字做递增，是因为 Git 是分布式版本控制系统，大多数时候会有很多人共同在一个 Git仓库（repository）合作，为了避免 提交ID 冲突，所以采用SHA-1进行计算。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>可以看到，我从前到后分别进行了 3 次提交，最近的是 &#34;test change&#34;，之前有 &#34;new file&#34;，最早的是 “Add a README file”。（你的提交注释可能和我的不一样）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在如果我想回到 “Add a README file” 那个版本，该怎么做呢 ？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>上图中的<code>HEAD</code>表示指向当前版本的指针。当我想回退版本的时候，只要改变<code>HEAD</code>指针的指向就可以了，同时这个过程也会顺便把 工作区（working directory）的文件更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用<code>git checkout 57a4c6</code>命令，就可以回到 “new file” 这个版本，<code>57a4c6</code>是 “Add a README file” 的 提交ID 的前 6 位，为了输入方便，我们只需要输入 提交ID 的前 6，7 位就可以。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-47da653858212014df48e1aa5a805d44_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"147\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic1.zhimg.com/v2-47da653858212014df48e1aa5a805d44_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;562&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"147\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"562\" data-original=\"https://pic1.zhimg.com/v2-47da653858212014df48e1aa5a805d44_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-47da653858212014df48e1aa5a805d44_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在我们就回到了 “Add a README file” 这个版本，test1 文件已经不见了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么如果还想回到之前 &#34;test change&#34; 这个版本，那么同样只需要使用<code>git checkout 03cc94</code>命令，就可以回去了。<code>03cc94</code>是 &#34;test change&#34; 这个版本的 提交ID，不过重要的是，你如果不知道这个 提交ID 是什么，这招就不管用了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这时你可以使用<code>git reflog</code>命令来查看你之前所执行过的 命令记录。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ae0557466416778ba41f3d219268eb74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1073\" data-rawheight=\"49\" class=\"origin_image zh-lightbox-thumb\" width=\"1073\" data-original=\"https://pic1.zhimg.com/v2-ae0557466416778ba41f3d219268eb74_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1073&#39; height=&#39;49&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1073\" data-rawheight=\"49\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1073\" data-original=\"https://pic1.zhimg.com/v2-ae0557466416778ba41f3d219268eb74_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ae0557466416778ba41f3d219268eb74_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>可以看到，我刚刚从<code>03cc94</code>转到了<code>57a4c8</code>。</p><hr/><h2>3. 分支管理</h2><p>使用分支我们可以同时在多条线上去管理我们的项目。我们每创建一条新分支，就好像所在的世界在下一刻分出了一个平行世界，它们有相同的过去，却可以有不同的未来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先让我们创建一个分支：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch testing</code></pre></div><p>这会在当前所在的提交对象上创建一个指针 testing 。还记得之前的 HEAD 指针 和 master 指针吗？master 指针，是我们执行<code>git init</code>时创建的主分支。HEAD 指针 则指向分支，表明当前所在位置。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fcd0643172efc4a5adb14caa4b6e3fe1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-fcd0643172efc4a5adb14caa4b6e3fe1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;467&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-fcd0643172efc4a5adb14caa4b6e3fe1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fcd0643172efc4a5adb14caa4b6e3fe1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在让我们切换到 testing 分支：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git checkout testing</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Tip:</b><code>git checkout -b testing</code>等于<code>git branch testing</code>+ <code>git checkout testing</code>。可以创建分支并同时切换到新分支。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在 HEAD 就指向 testing 分支了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4e0d5cf0a0c6766f7009e5ff4fa799f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-4e0d5cf0a0c6766f7009e5ff4fa799f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;460&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-4e0d5cf0a0c6766f7009e5ff4fa799f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4e0d5cf0a0c6766f7009e5ff4fa799f1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在 testing 分支上让我们执行一次提交吧：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ touch test2\n$ git add test2\n$ git commit -m &#39;add test2&#39;</code></pre></div><p>testing 分支向前移动了，但是 master 分支仍旧指向之前的位置。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-934facdd953fe0ed380b2e8fee52e043_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-934facdd953fe0ed380b2e8fee52e043_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-934facdd953fe0ed380b2e8fee52e043_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-934facdd953fe0ed380b2e8fee52e043_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在让我们切回 master 分支，并且也执行一次提交：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git checkout master\n$ touch test3\n$ git add test3\n$ git commit -m &#39;add test3&#39;</code></pre></div><p>可以看到这个项目的提交历史已经产生了分叉。你现在可以在两条分支上各自平行工作，当将来如果有需要，你也可以把它们在合并。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d4cf750ef8fbd1e0a6c03e6f4df2079a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-d4cf750ef8fbd1e0a6c03e6f4df2079a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;512&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-d4cf750ef8fbd1e0a6c03e6f4df2079a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d4cf750ef8fbd1e0a6c03e6f4df2079a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果想查看分叉历史的话可以用命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git log --oneline --decorate --graph --all</code></pre></div><p>它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-97ab2a577b03e4e3447febf6c4a40397_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"155\" class=\"origin_image zh-lightbox-thumb\" width=\"792\" data-original=\"https://pic4.zhimg.com/v2-97ab2a577b03e4e3447febf6c4a40397_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;792&#39; height=&#39;155&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"155\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"792\" data-original=\"https://pic4.zhimg.com/v2-97ab2a577b03e4e3447febf6c4a40397_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-97ab2a577b03e4e3447febf6c4a40397_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果我们想查看目前都有哪些分支，可以执行命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch</code></pre></div><p>不加任何参数运行它，会得到当前所有分支的一个列表</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b64ecf727d6916d83873f0d70295ed56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"68\" class=\"content_image\" width=\"403\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;403&#39; height=&#39;68&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"68\" class=\"content_image lazy\" width=\"403\" data-actualsrc=\"https://pic3.zhimg.com/v2-b64ecf727d6916d83873f0d70295ed56_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>分支名前面带 * 的表明这是目前所在分支。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果想删除 testing 分支可以执行命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch -d testing4</code></pre></div><hr/><h2>4. 合并分支</h2><p>好啦，我们之前创建了一个分支 testing，现在我想把 testing 分支 合并（merge）到 master 分支里改该怎么办呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>切换到 master 分支，之后使用<code>git merge</code>命令就可以了：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git checkout master\n$ git merge testing</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-087faee66a0e45fd469e876281a2e0fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic3.zhimg.com/v2-087faee66a0e45fd469e876281a2e0fa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;196&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic3.zhimg.com/v2-087faee66a0e45fd469e876281a2e0fa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-087faee66a0e45fd469e876281a2e0fa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>看起来很简单，但是这是在两个分支之间没有冲突的时候，如果两个分支都对同一个文件做了不同的修改，合并的时候文件内容发生了冲突，又该怎么办呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>继续上面的例子，现在我在 master 分支里面的 readme 文件输入文本 “Hello World”；在 testing 分支里面的 readme 文件输入文本 “Hello Git”。之后当我想要合并他们的时候，冲突出现了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-991fb3de113f7943ddad3b561af81688_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"90\" class=\"origin_image zh-lightbox-thumb\" width=\"747\" data-original=\"https://pic1.zhimg.com/v2-991fb3de113f7943ddad3b561af81688_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;747&#39; height=&#39;90&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"90\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"747\" data-original=\"https://pic1.zhimg.com/v2-991fb3de113f7943ddad3b561af81688_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-991fb3de113f7943ddad3b561af81688_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在再让我们看看 readme 文件里的文本变成了什么。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-af62f5ecc78b64cb41cf6701fb45ea98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"241\" data-rawheight=\"184\" class=\"content_image\" width=\"241\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;241&#39; height=&#39;184&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"241\" data-rawheight=\"184\" class=\"content_image lazy\" width=\"241\" data-actualsrc=\"https://pic1.zhimg.com/v2-af62f5ecc78b64cb41cf6701fb45ea98_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>与<code>=======</code>之间是 master 分支的内容，</p><p><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; testing</code>与<code>=======</code>之间是 testing 分支的内容。</p><p>我们可以手动去修改冲突，把想要的留下来，不想要的删去。之后再 提交（commit）就可以了。</p><hr/><h2>5. 使用 GitHub</h2><p>到目前为止，我们一直在本地电脑是使用 Git，但很明显大部分人看这个教程的目的是为了使用 GitHub。那么现在我们就来介绍如何使用 GitHub 吧！（当然这一节也适用于其他远程仓库）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>先设想一个场景，还是用之前写作业那个比喻，这次小明，小红，小王，在一起写作业。为了防止作业被弄丢，三个人写完之后要分别各自抄写备份一份对方的作业。但是突然这一天小王生病没来，没有办法把作业给另外两个人抄。小明，小红就只好等转天小王病好了，在继续同步作业了。为了增加效率，他们找妈妈买了手机，组了个微信群，之后每天写完作业把作业发（push）到群里面，这样抄（pull）起来就很方便了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其实 GitHub 就是帮我们完成上面这些事的。GitHub 是一个只支持 Git 作为唯一代码仓库（repository）格式的 远程仓库 托管平台。使用远程仓库 大家可以很方便地推送（push）自己的修改；也可以很方便地拉去（pull）最新的代码库。这让开源和多人协作都变的非常方便。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d991bb0b643e534eb2fcfef011be570e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"555\" class=\"origin_image zh-lightbox-thumb\" width=\"1039\" data-original=\"https://pic3.zhimg.com/v2-d991bb0b643e534eb2fcfef011be570e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1039&#39; height=&#39;555&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"555\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1039\" data-original=\"https://pic3.zhimg.com/v2-d991bb0b643e534eb2fcfef011be570e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d991bb0b643e534eb2fcfef011be570e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>不但如此 GitHub 还是一个“代码社交网络“，你可以在上面向整个世界分享你的代码，或者私密地把项目发给同事。其他的人可以看到你分享项目的修改历史，可以对你的代码添加评论，最棒的是其他人还可以向你提交他们所写的代码，来让你的项目变得更好。</p><hr/><h2>5.2 GitHub 基本使用</h2><p><b>1、注册账号</b></p><p>先去<a href=\"https://link.zhihu.com/?target=https%3A//github.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官网</a>注册一个账号，这个应该就不用详细说了吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2、创建远程仓库</b></p><p>点击 New repository 可以创建一个远程仓库，为仓库起一个好名字，如果愿意可以写 Description，其他设置默认，最后点击 Create repository 创新仓库。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cc248ad52feb1fe27b76a3377984d7f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"775\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb\" width=\"775\" data-original=\"https://pic3.zhimg.com/v2-cc248ad52feb1fe27b76a3377984d7f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;775&#39; height=&#39;585&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"775\" data-rawheight=\"585\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"775\" data-original=\"https://pic3.zhimg.com/v2-cc248ad52feb1fe27b76a3377984d7f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cc248ad52feb1fe27b76a3377984d7f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3、在本地获取远程库</b></p><p>点击 Create repository 后会给我一个仓库的 HTTPS 和 SSH 地址</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c0869b303077e12bdc7ee84b70c6b5b9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb\" width=\"1037\" data-original=\"https://pic2.zhimg.com/v2-c0869b303077e12bdc7ee84b70c6b5b9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1037&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1037\" data-original=\"https://pic2.zhimg.com/v2-c0869b303077e12bdc7ee84b70c6b5b9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c0869b303077e12bdc7ee84b70c6b5b9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在我们的远程仓库还是空的，要想在本地去操作远程仓库，我们有两种方法去实现：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>使用</b><code>git remote add</code><b>将 本地库 与 远程库 相关联：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">$ git remote add origin https://github.com/Garrik-Liu/git_learn.git</code></pre></div><p>（注意：这是我的仓库地址）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这种方法推荐在 远程库 没有任何内容的时候使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面命令中的<code>origin</code>就是远程库的名字，这是默认叫法，最好不要改动。通过命令<code>git remote</code>可以查看你的远程仓库的名字。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>之后使用 push 命令来把本地 master 分支推送到远程库：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git push -u origin master</code></pre></div><p>第一次推送需要加 -u 参数，这条命令可以把本地的 master 分支 推送（push）到远程库的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>使用</b><code>git clone</code><b>克隆（clone）一个本地库：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">$ git clone git@github.com:Garrik-Liu/git_learn.git</code></pre></div><p>在这一次我使用的是 SSH 地址，如果你也同样使用了 SSH，在第一次 clone 的时候，你会收到一个 SSH 警告。需要你确认 GitHub 的 Key 的指纹信息是否确实来自 GitHub 的服务器，输入 yes 回车直接连接就可以。之后 GitHub 的 Key 就会添加到本机的信任列表里了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e2ff8164e89d56161f146e8bee2425c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"901\" data-original=\"https://pic3.zhimg.com/v2-e2ff8164e89d56161f146e8bee2425c6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;901&#39; height=&#39;109&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"901\" data-original=\"https://pic3.zhimg.com/v2-e2ff8164e89d56161f146e8bee2425c6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e2ff8164e89d56161f146e8bee2425c6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4、推送（push）, 抓取（fetch）与 拉取（pull）</b></p><p>参照上一节所说的方法，你可以先把 本地库 与 空的远程库 相关联（remote add）并推送内容进去，之后在另外一个地方 克隆（clone）。这样你就模拟了一个 远程库 被 两个 本地库 操作的情况。你好像现实中很多人共同在一个项目上工作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在先让我们把最初的 本地库 叫做 A，后面克隆的叫做 B。在 本地库A 里面让我们新建文件 - hello.txt 并写入文本内容 “HELLO WORLD”</p><p class=\"ztext-empty-paragraph\"><br/></p><p>写好之后推送（push）到远程库：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git add hello\n$ git commit -m &#34;add hello file&#34;\n$ git push origin master</code></pre></div><p>（因为我之前已经把 本地master 和 远程master 关联起来了，所以这里直接打<code>git push</code>也行 ）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-744666a9757bd512150616dc09d54525_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1096\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"1096\" data-original=\"https://pic2.zhimg.com/v2-744666a9757bd512150616dc09d54525_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1096&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1096\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1096\" data-original=\"https://pic2.zhimg.com/v2-744666a9757bd512150616dc09d54525_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-744666a9757bd512150616dc09d54525_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在在 GitHub 上已经可以看到 hello 文件了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这个时候 远程库内容 已经改变了，但是 本地库B 还没有更新内容，下面让我们看一下如何获取 远程库最新内容。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>抓取（fetch）远程库内容：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">$ git fetch [remote-name]</code></pre></div><p>抓取（fetch）命令 会从远程库获取你还没有的内容，但是它并不会自动合并或修改你当前本地库的内容。你需要使用命令<code>git merge</code>进行合并。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为我们之前使用<code>clone</code>命令克隆的 本地库B，命令会自动默认把远程库命名为 “origin”，所以这里输入命令<code>git fetch origin</code>就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>拉取（pull）远程库内容</b></p><p>使用<code>git pull</code>命令本地库可以自动的抓取（fetch）然后合并（merge）远程分支到当前分支。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><code>git pull</code>=<code>git fetch</code>+<code>git merge</code></p><p class=\"ztext-empty-paragraph\"><br/></p><p>虽然这样看起来很方便，但是这样你失去了对合并的控制，出错率反而会升高。所以还是推荐先抓取（fetch）之后 手动合并（merge）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5、冲突处理</b></p><p>在上面 本地库A 做出修改，之后传到远程库；本地库B 从远程库更新数据，获得 A 做的修改。但是现实生活中可能一个文件同时被多个人更改，之后同时发到远程库。那这样文件内容出现冲突该怎么办？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>先在 本地库A 把 hello 文件里的 “HELLO WORLD” 改成 “HELLO WEB”；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>之后在 本地库B 把 hello 文件里的 “HELLO WORLD” 改成 “HELLO GIT”；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这样我们就创造了一个冲突情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我先把 本地库A 的修改推送到远程库，之后在 本地库B 尝试推送。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>命令输入完之后我们会收到一个错误提示：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5448d2119c6b069a9050441413975bad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic2.zhimg.com/v2-5448d2119c6b069a9050441413975bad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;903&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"903\" data-original=\"https://pic2.zhimg.com/v2-5448d2119c6b069a9050441413975bad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5448d2119c6b069a9050441413975bad_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面说，你的推送失败，因为 远程库 有一些新内容是你 本地库 里还没有了。这有可能是因为另一个其他的 本地库 刚刚推送了些新内容。现在你需要先把 远程库 的新内容合并到 你的本地库。可以使用<code>git fetch</code>+<code>git merge</code>，或者<code>git pull</code>命令。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当你更新完本地库之后你就会发现原来是 hello 文件出现了冲突，修改完冲突之后，就可以重新推送了。</p><hr/><h2>6. Git 命令速查</h2><p><b>创建Git仓库：</b></p><ul><li>在目录内创建一个新的 本地库</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git init</code></pre></div><ul><li>新建一个新目录，之后在目录内创建一个 本地库</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git init &lt;文件名&gt;</code></pre></div><ul><li>克隆一个已经存在的库</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git clone &lt;地址&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>本地改动：</b></p><ul><li>查看 工作区内文件状态</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git status</code></pre></div><ul><li>查看 已跟踪 未暂存文件 与上次提交之间具体改动</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git diff</code></pre></div><ul><li>查看 已暂存文件与上次提交之间具体改动</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git diff --staged</code></pre></div><ul><li>把指定文件添加到 暂存区</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git add &lt;文件名&gt;</code></pre></div><ul><li>把所有文件添加到 暂存区</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git add *</code></pre></div><ul><li>把 暂存区的文件提交到 Git仓库</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git commit -m &lt;&#34;提交注释&#34;&gt;</code></pre></div><ul><li>提交所有 已追踪 文件</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git commit -a -m &lt;&#34;提交注释&#34;&gt;</code></pre></div><ul><li>把 暂存区 的文件合并到上次提交</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git commit --amend</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>提交历史：</b></p><ul><li>查看所有的提交历史，从最近的一次开始</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git log</code></pre></div><ul><li>查看特定文件的改动历史</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git log -p &lt;文件名&gt;</code></pre></div><ul><li>查看特定文件的改动 提交人 和 改动时间</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git blame &lt;文件名&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>分支：</b></p><ul><li>查看所有分支</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch</code></pre></div><ul><li>切换到特定分支（改变HEAD指针指向）</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git checkout &lt;分支名&gt;</code></pre></div><ul><li>在当前位置创建一个新分支</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch &lt;新分支名&gt;</code></pre></div><ul><li>在当前位置创建一个新分支，并切换过去</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch -b &lt;新分支名&gt;</code></pre></div><ul><li>删除分支</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch -d &lt;分支名&gt;</code></pre></div><ul><li>删除远程库分支</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git branch -dr &lt;远程库名/分支名&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>合并：</b></p><ul><li>把 特定分支 合并到 HEAD指针位置</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git merge &lt;分支名&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>更新 和 发布：</b></p><ul><li>列出所有的 远程库信息</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git remote -v</code></pre></div><ul><li>添加 远程库</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git remote add &lt;远程库名&gt; &lt;url&gt;</code></pre></div><ul><li>抓取 远程库内容（不合并）</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git fetch &lt;远程库名&gt;</code></pre></div><ul><li>拉取 远程库内容（自动合并）</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git pull &lt;远程库名&gt;</code></pre></div><ul><li>推送 本地内容 到 远程库</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git pull &lt;远程库名&gt; &lt;分支名&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>撤销：</b></p><ul><li>丢弃 工作区 的所有改动</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git reset --hard HEAD</code></pre></div><ul><li>回到特定提交点（版本回退）</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git checkout &lt;commit id&gt;</code></pre></div><hr/><h2>7. 参考</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//git-scm.com/book/en/v2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Pro Git Book</a>      </p><p><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1kU5OCOB%23list/path%3D%252Fpub%252Fgit\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Git Cheat Sheet</a>  </p><p><a href=\"https://link.zhihu.com/?target=https%3A//teamtreehouse.com/library/git-basics\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Treehouse - Git Basic</a>  </p><p><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Git - 廖雪峰教程</a></p><hr/><p>好啦，今天的教程就告一段落啦。</p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>希望大家多多指正！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Git", 
                    "tagLink": "https://api.zhihu.com/topics/19557710"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33154528", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 3, 
            "title": "响应式设计（2）", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p><b>在阅读这一篇之前, 希望大家已经看过了以下内容:</b></p><a href=\"https://zhuanlan.zhihu.com/p/33102529\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-36167dfc3d4e932a7d111e3bead521fb_180x120.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">罐装汽水Garrik：响应式设计（1）</a><p>上一篇介绍了 <b>viewport</b>，在这一篇我会介绍 <b>Media Query 媒体查询</b></p><hr/><h2><b>什么是 Media Query 媒体查询 ？</b></h2><p>在如今的生活中，网页可能会被在任何电子设备中访问（电脑，手机，平板，电视，手表，等等）。</p><p>Media Query 媒体查询 可以让网页能够根据 设备属性的不同（例如，屏幕宽度，高度，方向，高宽比，等等）而应用不同的 CSS 样式。</p><p>这样我们就能让网页能够在各种设备中都表现出我们想要的样式。</p><hr/><h2><b>基本用法</b></h2><p>一个媒体查询 包含一个可选的 媒体类型 和 零个或多个 表达式，这些 表达式 描述了 媒体特征，最终会被解析为 <code>true</code> 或 <code>false</code>。如果显示网页的设备 符合 媒体类型，并且 表达式结果 都为 <code>true</code>。那么这个 媒体查询 所对应的 样式 就会被引入HTML文档。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. 引用media query</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在这里我介绍 两种 方式去添加 media query：<code>&lt;link&gt;</code>链接引入，<code>@media</code>代码嵌入</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><code>&lt;link&gt;</code>链接引入</b></p><p>在以往我们都是这样通过 <code>&lt;link&gt;</code> 标签直接引入 CSS样式。</p><p><code>&lt;link rel=&#34;stylesheet&#34; href=&#34;style.css&#34;&gt;</code></p><p>现在通过向<code>&lt;link&gt;</code>元素中添加 <code>media</code> 属性，我们就可以让 CSS样式 变得有选择的去引入。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;link rel=&#34;stylesheet&#34; media=&#34;screen and (min-width:600px)&#34; href=&#34;over600.css&#34;&gt;</code></pre></div><p>上面代码的意思就是，如果在电脑/手机/平板屏幕上显示网页，并且 viewport 的宽度大于等于 600px，那么样式表“over600.css”就会被引入。</p><p>在日常开发中，基本上我们只会用到 &#34;screen&#34; 这个媒体类型。</p><ul><li>screen：用于电脑屏幕，平板电脑，智能手机等。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b><code>@media</code>代码嵌入</b></p><p>你也可以直接在 CSS样式表中 通过 <code>@media</code> 嵌入 media query 代码。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n    <span class=\"nt\">body</span> <span class=\"p\">{</span><span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">yellow</span><span class=\"p\">;}</span>\n<span class=\"p\">}</span> </code></pre></div><p>上面代码意思是，如果在电脑/手机/平板屏幕上显示网页，并且 viewport 的宽度大于等于 600px，那么 <code>body</code>元素 的背景色就会被设置成黄色。</p><p>使用 <code>&lt;link&gt;</code>链接引入 会让<code>&lt;link&gt;</code>标签变多，HTTP 请求变多。</p><p>使用 <code>@media</code>代码嵌入 会让 CSS样式表 变大。</p><p>具体选择哪个，根据情况不同自己选择。在以后讲到性能的时候，我们再分析这些。现在你就随自己喜欢选择吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. 断点 breaking point</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在上面的代码中<code>min-width: 600px</code>，当 屏幕视口宽度 大于 600px 的时候，样式生效。那么 600px 就是一个 断点。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9f0fe8afd453778f5eaab27435990854_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"318\" data-thumbnail=\"https://pic1.zhimg.com/v2-9f0fe8afd453778f5eaab27435990854_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic1.zhimg.com/v2-9f0fe8afd453778f5eaab27435990854_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"318\" data-thumbnail=\"https://pic1.zhimg.com/v2-9f0fe8afd453778f5eaab27435990854_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic1.zhimg.com/v2-9f0fe8afd453778f5eaab27435990854_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9f0fe8afd453778f5eaab27435990854_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上图中随着 浏览器视口 宽度的变化，页面布局发生变化。</p><p><b>可见 断点 就是 页面布局 发生变化时 的 可见区域 视口宽度的值。</b></p><p>我们通过<code>min-width</code> 和 <code>max-width</code> 来定义。</p><ul><li><code>min-width</code> ：定义输出设备中的页面最小可见区域宽度。</li><li><code>max-width</code> ：定义输出设备中的页面最大可见区域宽度。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. 在哪里加断点 ？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d7ffa983d4e5d0301c4038536c7784c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"728\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-d7ffa983d4e5d0301c4038536c7784c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2000&#39; height=&#39;728&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"728\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-d7ffa983d4e5d0301c4038536c7784c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d7ffa983d4e5d0301c4038536c7784c7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>其实这张图就很清楚啦，根据显示设备的不同，我们在合适的位置打上断点。</p><ul><li>@media (max-width: 600px) { ... }：手机端</li><li>@media (min-width: 600px) and (max-width: 900px) { ... }：平板电脑</li><li>@media (min-width: 900px) and (max-width: 1200px) { ... }：中等屏幕台式电脑</li><li>@media (min-width: 1200px) { ... }：大屏幕台式电脑</li></ul><p>（当然这些数值，还是要看具体情况，具体设置的，并不绝对。）</p><hr/><h2><b>实际操作吧！</b></h2><p>最终结果： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7fc208c071a2e79be1b508baa0c2dd7f_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1856\" data-rawheight=\"1392\" data-thumbnail=\"https://pic4.zhimg.com/v2-7fc208c071a2e79be1b508baa0c2dd7f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1856\" data-original=\"https://pic4.zhimg.com/v2-7fc208c071a2e79be1b508baa0c2dd7f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1856&#39; height=&#39;1392&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1856\" data-rawheight=\"1392\" data-thumbnail=\"https://pic4.zhimg.com/v2-7fc208c071a2e79be1b508baa0c2dd7f_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1856\" data-original=\"https://pic4.zhimg.com/v2-7fc208c071a2e79be1b508baa0c2dd7f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7fc208c071a2e79be1b508baa0c2dd7f_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在移动端，我们要让 侧边栏 和 主栏 垂直排在同一列。</p><p>我们还要 导航栏<code>nav</code> 和 标题<code>h1</code> 在 <code>&lt;header&gt;</code> 垂直排在同一列。</p><p>首先我们 CSS样式里，写入</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{}</span>\n<span class=\"c\">/* 当视口宽度小于600px（移动端）应用上面样式 */</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{}</span>\n<span class=\"c\">/* 当视口宽度大于600px（桌面端）应用上面样式 */</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>之后，把之前的 主栏 和 侧边栏 的百分比布局样式</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">index-main</span> <span class=\"p\">{</span> \n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"kt\">%</span><span class=\"p\">;</span>     \n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">index-aside</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"kt\">%</span><span class=\"p\">;</span>    \n  <span class=\"k\">padding-left</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>挪到<code>@media screen and (min-width: 600px) {}</code></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n\t<span class=\"p\">.</span><span class=\"nc\">index-main</span> <span class=\"p\">{</span> \n\t\t<span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"kt\">%</span><span class=\"p\">;</span>     \n\t<span class=\"p\">}</span>\n\n\t<span class=\"p\">.</span><span class=\"nc\">index-aside</span> <span class=\"p\">{</span>\n\t    <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"kt\">%</span><span class=\"p\">;</span>    \n\t    <span class=\"k\">padding-left</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>也就是说，只有当 视口宽度 大于600px 的时候，才会按照上面样式排列。</p><p>之后，在<code>@media screen and (max-width: 600px)</code>中写入代码</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">.</span><span class=\"nc\">index-header</span> <span class=\"p\">{</span>\n    \t<span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c\">/* 标题 和 导航 垂直排列 */</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">index-container</span> <span class=\"p\">{</span>\n\t<span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 主栏 和 侧边栏 垂直排列 */</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">index-main</span> <span class=\"p\">{</span>\n        <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 垂直排列的时候占父元素100%宽度 */</span>\n    <span class=\"p\">}</span> \n\n    <span class=\"p\">.</span><span class=\"nc\">index-aside</span> <span class=\"p\">{</span>\n\t<span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 垂直排列的时候占父元素100%宽度 */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-52b0a68441129243388ceabcfd7d106d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb\" width=\"538\" data-original=\"https://pic2.zhimg.com/v2-52b0a68441129243388ceabcfd7d106d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;538&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"538\" data-original=\"https://pic2.zhimg.com/v2-52b0a68441129243388ceabcfd7d106d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-52b0a68441129243388ceabcfd7d106d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当时我们发现 导航栏 <code>nav</code> 和 标题 没对齐。</p><p>审查元素后发现 <code>&lt;nav&gt;</code> 中的 <code>&lt;ul&gt;</code> 前面有个 padding。下面把它去掉。</p><p>在<code>@media screen and (max-width: 600px)</code>添加：</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">index-header-nav</span> <span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p>之后我们就完成啦! 🎉🎉🎉</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=https%3A//htmlpreview.github.io/%3Fhttps%3A//github.com/Garrik-Liu/MyTutorials/blob/master/Beginner-Practices/Practice-04/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">预览页面</a>，我的代码保存在Github - <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Garrik-Liu/MyTutorials/blob/master/Beginner-Practices/Practice-04/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">练习4源代码</a>。如果遇到问题，大家可以当做参考。</p><hr/><p>好啦，今天的分享就告一段落啦。</p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33102529", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 9, 
            "title": "响应式设计（1）", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p><b>在阅读这一篇之前, 希望大家已经看过了以下内容:</b></p><a href=\"https://zhuanlan.zhihu.com/p/32990471\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-735dadd98ff34014c39fa2b9b19d8a06_180x120.jpg\" data-image-width=\"710\" data-image-height=\"283\" class=\"internal\">罐装汽水Garrik：HTML语义化 &amp; 网页布局</a><p>在这一篇我会介绍 <b>设备像素，CSS像素 和 viewport 视口</b></p><hr/><h2><b>为什么要响应式？</b></h2><p>在现如今，可以浏览器网页的设备不在局限于桌面电脑。手机，平板，各种不同分辨率，不同尺寸的设备层出不穷。作为前端开发人员，我们所写的网页不能再只着眼于桌面端，为大屏幕所设计的布局，在小屏幕的移动端设备上，可能会导致布局崩坏，或者内容太小看不清。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了解决页面在不同设备上都能有合理的布局，我们需要让页面布局根据设备屏幕尺寸的改变而适当改变。也就是所谓的 &#34;响应式设计&#34;。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但在具体介绍之前，我们先了解几个概念。</p><hr/><h2><b>“设备像素”，“CSS像素”，“设备独立像素”</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. “设备像素”（Device Pixel）DP</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>“设备像素” 又称 <b>“物理像素”（physical pixel）</b>，是设备 能控制显示的 最小单位，我们可以把这些 像素 看作成 显示器 上一个个的点。</p><p>一般我们在说 一个手机的分辨率 多大时，就是在谈论 它的 “设备像素” 的大小。</p><p>例如：iPhone 8 像素分辨率为（1334 x 750）326 PPI；iPhone X 像素分辨率为（2436 x 1125）458 PPI</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. “CSS像素” 和 “设备独立像素” (Device independent Pixel) DIP</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>“CSS像素”</b> 指的在 CSS样式 中使用的 <b>“逻辑像素”</b>，也就是说 我们在做网页时 用到的 CSS像素单位，是抽象的，不实际存在的。</p><p>例如我们在 CSS样式 中写 <code>width: 500px;</code>，在这里定义的就是 CSS像素。</p><p>在CSS规范中，长度单位可以分为两类：<b>绝对单位(absolute)</b> 和 <b>相对单位(relative)</b>。</p><p><b>“px”</b> 就是一个 与 <b>设备像素</b> 相对 的 <b>相对单位</b>。</p><p>绝对单位 就是指（“cm”，“dm”，“m”，等）这一类的单位。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>“设备独立像素”</b> 指的是一个可以由程序使用并控制的虚拟像素。其实 “CSS像素” 就属于这样的 虚拟像素。只不过是同一种东西的不同说法而已。</p><p>我们可以把 “CSS像素” 和 “设备独立像素” 看作为 <b>同一个东西。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>CSS像素 = 设备独立像素 = 逻辑像素</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. “设备像素”</b> 和 <b>“CSS像素”</b> 的关系：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在很久以前，移动设备 并不被用来浏览网页。前端开发 只关注于 桌面端。在桌面浏览器 中 1 个 “CSS像素” 往往都是对应着 电脑屏幕上的 1 个 “设备像素”。</p><p>但是我在前面说了，“CSS像素” 是 “逻辑像素” 是抽象单位，是相对的。在不同的 设备或环境中，CSS 中的 “1px” 所代表的 “设备像素” 是不同的。</p><p>在桌面端，一个 400px 宽的 块级元素，用 400 个 “设备像素” 去显示不会有什么问题。</p><p>但是在 移动端，现在手机 像素分辨率 都很高，可是手机屏幕尺寸 是远小于 桌面显示器的。假设 手机 和 桌面显示屏 的 设备像素 数量一样。手机的 单位空间像素数量（每英寸像素） 一定大大高于 桌面屏幕。</p><p>那么 400px 宽的 块级元素 在手机中，就会被缩的很小。</p><p>同理 如果 “CSS像素” 和 “设备像素” 是完全对应的话，桌面端 显示正常的网页，在 移动端 就会被缩的很小。</p><p><b>为了让 CSS样式中定义的尺寸 在任何设备上都会显示 一样的大小。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-65958ddcac0aa1a50a50cd355d011e30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-65958ddcac0aa1a50a50cd355d011e30_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-65958ddcac0aa1a50a50cd355d011e30_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-65958ddcac0aa1a50a50cd355d011e30_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（上图中，为了让图标显示相同尺寸，在 iphone 3gs 中 1个CSS像素 对应 1个设备像素；在 iphone 4s 中 1个CSS像素 对应 4个设备像素）</p><p>我们这个时候要让 “CSS像素” 和 “设备像素” 呈现 <b>相对</b> 的关系。</p><p><b>一个 CSS像素 在不同分辨率的设备上 对应不同数量的 设备像素。</b></p><ul><li>“设备像素” 的大小是固定的，是不可变的。</li><li>“CSS像素” 的大小是可以被 放大 或者 压缩 的。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f50807e9e2d2be41249bd5a7aeabd9fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1640\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb\" width=\"1640\" data-original=\"https://pic1.zhimg.com/v2-f50807e9e2d2be41249bd5a7aeabd9fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1640&#39; height=&#39;524&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1640\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1640\" data-original=\"https://pic1.zhimg.com/v2-f50807e9e2d2be41249bd5a7aeabd9fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f50807e9e2d2be41249bd5a7aeabd9fc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>一个 设备像素 可以对应一个 CSS像素；</li><li>一个设备像素 可以对应多个 CSS像素（缩小）；</li><li>一个 CSS像素 可以对应多个 设备像素（放大）；</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4. 那 设备像素（DP） 与 CSS像素 之间是如何转换的呢</b> ?</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在这里就要用到 <b>每英寸像素</b> 和 <b>设备像素比</b> 这两个单位。</p><p><b>每英寸像素(pixel per inch) PPI</b>：它是描述在水平的和垂直的方向上，每英寸距离的图像包含的像素（pixel）数目。PPI 数值越高，代表显示屏的像素密度越高，可以显示越清晰的图像。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f9a4a0072db76ac5d5ce87a9e7e7fcb6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"491\" data-original=\"https://pic3.zhimg.com/v2-f9a4a0072db76ac5d5ce87a9e7e7fcb6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;491&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"491\" data-original=\"https://pic3.zhimg.com/v2-f9a4a0072db76ac5d5ce87a9e7e7fcb6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f9a4a0072db76ac5d5ce87a9e7e7fcb6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>设备像素比(device pixel ratio) DPR</b>：</p><p><b>设备像素比 = 设备像素 / 设备独立像素（CSS像素）</b> （得到某一方向上的比率，水平 或 垂直）</p><p>手机公司 根据 PPI 的数值大小来分范围，以此定义 设备的默认缩放比例，即 默认设备像素比。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6b960913cd87ae355007794578fb8e90_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1312\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"1312\" data-original=\"https://pic1.zhimg.com/v2-6b960913cd87ae355007794578fb8e90_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1312&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1312\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1312\" data-original=\"https://pic1.zhimg.com/v2-6b960913cd87ae355007794578fb8e90_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6b960913cd87ae355007794578fb8e90_b.jpg\"/></figure><p>安卓手机中 PPI 在 120-160 之间的手机被归为 低密度，160-240 被归为 中密度，240-320 被归为 高密度，高于 320 被归为 超高密度，也就是 苹果手机中 所谓的 Retina 屏幕。</p><p>拿 iphone X 举例，这个手机的 PPI 为 458，那么它的 默认设备像素比（DPR）为 2.0。</p><p>也就是说 1 个 CSS像素 = 2 x 2 个 设备像素；2 个 CSS像素 = 2 x (2 x 2) 个 设备像素。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3ddae5377226f4e0682519c3a3333c33_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3ddae5377226f4e0682519c3a3333c33_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3ddae5377226f4e0682519c3a3333c33_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3ddae5377226f4e0682519c3a3333c33_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>（注意：下文我会用 “dip” 作为 CSS像素单位；“px” 作为 设备像素单位）</b></p><hr/><h2><b>视口 Viewport</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. 布局视口 Layout Viewport</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>布局视口 Layout Viewport 也就是显示<code>&lt;html&gt;</code>元素的地方。</p><p>因为 移动设备的屏幕 和 电脑的屏幕 相比要窄小很多。</p><p>如果把 为桌面端设计的网页 在 移动端 显示，网页的布局 就会因为屏幕宽度太小，而挤在一起，导致布局崩坏。</p><p>有的人说现在手机分辨率不都非常大吗，比如iPhone X 像素就有 2436 x 1125。这么大怎么会排不开？</p><p>其实这里要用到上文提到的概念。<b>1个CSS像素 不对应 1个设备像素</b>。如果那样的话，在屏幕尺寸有限的手机上，网页就会被缩的很小，以至于根本看不清。</p><p>手机上 1个 CSS像素 = 设备像素 x 设备像素比。</p><p>所以为了能在 移动设备 上 正常显示 那些 为桌面浏览器 设计的网站，移动设备 上的 浏览器 会把自己 默认的 viewport 设一个较宽的值。（一般默认为 980dip，数值为CSS像素，数值取决于浏览器）</p><p>但因为 屏幕可视区域尺寸 小于 布局视口 为了显示网页，浏览器 就会出现一个 横向的滚动条。屏幕 只能在一时间内 显示网页的一部分。</p><p>这样一个 默认的 大于移动设备屏幕尺寸 的视口 就被称为 <b>布局视口 Layout Viewport</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e313fdd7b8996d76499d7b5d3961fae7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"519\" class=\"content_image\" width=\"380\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;380&#39; height=&#39;519&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"519\" class=\"content_image lazy\" width=\"380\" data-actualsrc=\"https://pic4.zhimg.com/v2-e313fdd7b8996d76499d7b5d3961fae7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>具体尺寸数值可通过 JS代码 <code>document.documentElement.clientWidth/cilentHeight</code>获得。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. 可视视口 Visual Viewport</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>可视视口 Visual Viewport 可以理解为<b>移动设备屏幕的可视区域</b>（包括滚动栏）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3977700249b2f7900591adceee011092_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"519\" class=\"content_image\" width=\"380\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;380&#39; height=&#39;519&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"519\" class=\"content_image lazy\" width=\"380\" data-actualsrc=\"https://pic3.zhimg.com/v2-3977700249b2f7900591adceee011092_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>具体尺寸数值可通过 JS代码<code>window.innerWidth/innerHeight</code>获得。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f9feac78e0ea77b1f7eca7dea08cb6d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1372\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb\" width=\"1372\" data-original=\"https://pic1.zhimg.com/v2-f9feac78e0ea77b1f7eca7dea08cb6d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1372&#39; height=&#39;525&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1372\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1372\" data-original=\"https://pic1.zhimg.com/v2-f9feac78e0ea77b1f7eca7dea08cb6d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f9feac78e0ea77b1f7eca7dea08cb6d4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（上图很好的展示了二者的区别。）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. 理想视口 Ideal Viewport</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在实际使用中，大尺寸的网页因为有了 布局视口，在保持 桌面端布局 不变的情况下。用户往往需要 通过 “放大页面” 或者 “横向滚动” 来浏览页面内容。</p><p>为了能够让用户能够 在移动端 舒适 浏览页面（不需要放大，缩小，滚动）。我们就又多了一个 <b>理想视口 Ideal Viewport</b>，也就是 <b>宽度 等同于 移动设备屏幕宽度</b> 的 viewport。</p><p>例如：iphone 4, iphone 5 的 ideal viewport 宽度为 320dip，iphone 6，iphone 7 都为 375dip。</p><p>每个设备的 ideal viewport 可能都不一样，在这里可以查询。 <a href=\"https://link.zhihu.com/?target=http%3A//viewportsizes.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Viewport Sizes</a></p><p>所谓理想就是说，用户不需要 缩放 或 横向滚动 页面 就能正常查看网站所有内容；同时网页中的文字大小，在任何设备中都应该显示一样的大小。</p><p>我们把 通过把 layout viewport 设置成 ideal viewport 我们就可以在一个适合 移动端 的宽度中 安排布局。</p><hr/><h2><b>使用<code>&lt;meta&gt;</code> 标签控制 <code>viewport</code></b></h2><p>移动浏览器默认的 viewport 就是 <b>布局视口 layout viewport</b>（大多默认为960dip）。但是为了理想的显示，视口需要被改成 <b>理想视口 ideal viewport</b>。这个时候可以用 <b><code>&lt;meta&gt;</code></b> <b>标签</b> 来控制 viewport。</p><p>在 HTML文档 的 <b><code>&lt;head&gt;</code></b> <b>标签</b> 中加入下面这个 <code>&lt;meta&gt;</code>标签。来把当前的layout viewport 宽度 设置为 ideal viewport 的宽度</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;</code></pre></div><ul><li><b><code>width</code></b>：用来控制layout viewport（布局视口）的宽度。一般默认为 980px。device-width 为设备的宽度。可以指定的一个值，如 320px。</li><li><b><code>initial-scale</code></b>：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。</li></ul><p>其他的属性在这里就不列举了。具体可以参考 <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/css/css-rwd-viewport.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">响应式 Web 设计 - Viewport</a>。</p><hr/><h2><b>将 viewport 设置为 ideal viewport</b></h2><div class=\"highlight\"><pre><code class=\"language-text\">&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;</code></pre></div><p>这句代码可以将 viewport 设置为 ideal viewport。</p><p>但是其实如果我们只写</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;meta name=&#34;viewport&#34; content=&#34;initial-scale=1&#34;&gt;</code></pre></div><p>也可以把 viewport 宽度改成 ideal viewport 的宽度。</p><p>因为 “initial-scale” 是相对于 ideal viewport 的宽度进行缩放。<code>initial-scale=1</code>的意思就是说 相对于 “initial-scale” 进行 100% 缩放。</p><p><b>&#34;viewport&#34; = &#34;initial-scale&#34; / 100%</b></p><p>结果当然是 viewport 设置为 ideal viewport 了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那既然写这一句已经可以了，为什么还要写 <code>width=device-width</code> ?</p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为 iphone 手机 “横屏” 的时候，还是相对 “竖屏” 的宽度进行缩放的。为了预防这种问题发生，我们需要做两手准备。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;</code></pre></div><p>上面代码可以保证设备的 viewport 无论是 横屏 还是 竖屏，都会是 ideal viewport。</p><p>当 <code>width</code> 和 <code>initial-scale</code> 出现冲突。例如当 iphone 7 横屏的时候 <code>width=device-width</code> 想要把 viewport 宽度 设置为 667dip，而 <code>initial-scale=1</code> 相对于 竖屏的 ideal viewport 缩放，想设置为 375dip。</p><p>那么这个时候，667dip 大于 375dip。<b>哪个大听哪个</b>。</p><hr/><h2><b>练习时间到！</b></h2><p>下面让我们手把手的把 <a href=\"https://zhuanlan.zhihu.com/p/32990471\" class=\"internal\">前端系列教学(入门篇) - HTML语义化 &amp; 网页布局</a> 这节最后的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Garrik-Liu/MyTutorials/tree/master/Beginner-Practices/Practice-03\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">练习题</a> 的 viewport 改成 ideal viewport 吧！</p><p>（在下面我使用的是 Chrome浏览器，具体步骤可能因浏览器不同而有出入。）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. 首先在 桌面端浏览器 中模拟 移动端 显示</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-920795b6c5079a3202947ab8ad43c5a0_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"806\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"806\" data-original=\"https://pic1.zhimg.com/v2-920795b6c5079a3202947ab8ad43c5a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;806&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"806\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"806\" data-original=\"https://pic1.zhimg.com/v2-920795b6c5079a3202947ab8ad43c5a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-920795b6c5079a3202947ab8ad43c5a0_b.jpg\"/></figure><p>（在页面中点击鼠标右键，之后点击 Inspect 审查元素，调试网页）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-43cfa6dc9053f21756d90b7322a78186_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic3.zhimg.com/v2-43cfa6dc9053f21756d90b7322a78186_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;546&#39; height=&#39;348&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"546\" data-original=\"https://pic3.zhimg.com/v2-43cfa6dc9053f21756d90b7322a78186_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-43cfa6dc9053f21756d90b7322a78186_b.jpg\"/></figure><p>（之后点击这个 手机/平板 小图标）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-bd9b0b73d61c5edacc546367e78826a2_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"792\" data-rawheight=\"892\" class=\"origin_image zh-lightbox-thumb\" width=\"792\" data-original=\"https://pic3.zhimg.com/v2-bd9b0b73d61c5edacc546367e78826a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;792&#39; height=&#39;892&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"792\" data-rawheight=\"892\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"792\" data-original=\"https://pic3.zhimg.com/v2-bd9b0b73d61c5edacc546367e78826a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bd9b0b73d61c5edacc546367e78826a2_b.jpg\"/></figure><p>（之后我们可以模拟 移动端 显示了，你可以自定义 移动端设备，设备方向等）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. 将 <code>html</code> 和 <code>body</code>元素 的 <code>width</code> 改成 <code>100%</code></b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了让<code>html</code>元素的<code>width</code> 相对于 layout viewport 宽度。<code>body</code>元素的<code>width</code>相对于<code>html</code>元素宽度。</p><p>我们需要将其<code>width</code>属性值 改成 百分比。</p><p>在CSS样式添加</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">html</span> <span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>将 <code>body</code> 原来的 <code>min-width: 650px;</code> 改成 <code>width: 100%;</code>。</p><p>现在 <code>html</code> 的宽度 等于 layout viewport 的宽度，<code>body</code> 的宽度 等于 <code>html</code> 的宽度。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-42ae9bf2194d1fdbe02c58d2ca69ca27_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb\" width=\"772\" data-original=\"https://pic4.zhimg.com/v2-42ae9bf2194d1fdbe02c58d2ca69ca27_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;772&#39; height=&#39;926&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"772\" data-original=\"https://pic4.zhimg.com/v2-42ae9bf2194d1fdbe02c58d2ca69ca27_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-42ae9bf2194d1fdbe02c58d2ca69ca27_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在可以看见<code>body</code>的宽度已经为 “980px”。</p><ol><li>添加<code>&lt;meta&gt;</code> 标签</li></ol><p>在html文档的<code>head</code>标签中，添加代码</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;</code></pre></div><p>之后<code>head</code>标签内容为：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;head&gt;\n\t&lt;meta charset=&#34;utf-8&#34;&gt;\n    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;\n\t&lt;title&gt;Pratice&lt;/title&gt;\n\t&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./style.css&#34;&gt;\n&lt;/head&gt; </code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-159ea58859f53eda3cb6d8d3819e13e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"946\" class=\"origin_image zh-lightbox-thumb\" width=\"690\" data-original=\"https://pic2.zhimg.com/v2-159ea58859f53eda3cb6d8d3819e13e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;690&#39; height=&#39;946&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"946\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"690\" data-original=\"https://pic2.zhimg.com/v2-159ea58859f53eda3cb6d8d3819e13e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-159ea58859f53eda3cb6d8d3819e13e5_b.jpg\"/></figure><p>现在 layout viewport 已经设置成 ideal viewport。<code>&lt;body&gt;</code> 宽度已为 “375px”。</p><p>但是因为宽度太低，我们可以看到右边的布局已经崩坏，所有我们还需要设置<code>Media Queries</code>来使 样式 随 页面宽度 改变而改变。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在下一章，我会介绍 <b>Media Queries</b>，让页面真正的变得响应式。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/33154528\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-36167dfc3d4e932a7d111e3bead521fb_180x120.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">罐装汽水Garrik：前端系列教学(入门篇) - 响应式设计（2）</a><p class=\"ztext-empty-paragraph\"><br/></p><p>好啦，今天的分享就告一段落啦。</p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }
            ], 
            "comments": [
                {
                    "userName": "施主快快请起", 
                    "userLink": "https://www.zhihu.com/people/89def34c43b81a45d722bad5604f8b79", 
                    "content": "感谢作者，关注了，请问后面还有吗", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "会有的，最近真的太忙了，一直没更新，实在抱歉", 
                            "likes": 0, 
                            "replyToAuthor": "施主快快请起"
                        }
                    ]
                }, 
                {
                    "userName": "刘倩倩", 
                    "userLink": "https://www.zhihu.com/people/b47222bfb161392451aed2e1807da335", 
                    "content": "<p>2 个 CSS像素 = 2 x (2 x 2) 个 设备像素。这里应该</p><p>是（2*<b>2）*（2*2）吧</b></p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "刘倩倩", 
                    "userLink": "https://www.zhihu.com/people/b47222bfb161392451aed2e1807da335", 
                    "content": "<p>2 个 CSS像素 = 2 x (2 x 2) 个 设备像素。这里应该</p><p>是（2*<b>2）*（2*2）吧</b></p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "刘倩倩", 
                    "userLink": "https://www.zhihu.com/people/b47222bfb161392451aed2e1807da335", 
                    "content": "<p>在练习部分，这句话是啥意思为了让<code>html</code>元素的<code>width</code>相对于 layout viewport 宽度 </p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32990471", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 63, 
            "title": "HTML语义化 & 网页布局", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在阅读这一篇之前, 希望大家已经看过一下两篇:</p><a href=\"https://zhuanlan.zhihu.com/p/32946068\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-d01f636683fd094cf2939ecd87a03c13_180x120.jpg\" data-image-width=\"580\" data-image-height=\"357\" class=\"internal\">罐装汽水Garrik：FlexBox (&#34;弹性盒子&#34;) 介绍</a><a href=\"https://zhuanlan.zhihu.com/p/32957425\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-24b57264d62b42ac4799d89f9b2bae77_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"720\" class=\"internal\">罐装汽水Garrik：Grid 网格介绍</a><p>在这一篇我会介绍 <b>HTML语义化</b>，<b>基本布局方法，</b>以及<b> box-sizing 属性。</b></p><h2><b>HTML语义化</b></h2><h2>1. 什么是语义？</h2><blockquote>Semantics is the study of the meanings of words and phrases in a language. - <a href=\"https://link.zhihu.com/?target=http%3A//w3schools.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">w3schools.com</a></blockquote><p>说白了，让 HTML文本 语义化，就是让  <b>HTML元素</b> 能够表明其内部 <b>内容的意义</b>。</p><p>那这么做是为了什么呢？</p><p>简单来说，就是为了 <b>让机器能读懂你的网页</b> 。</p><p>人类在浏览一个网页的时候，是通过视觉，直接阅读文字，观察排版，图片，等等视觉信息，来理解网页想要传达的信息的。</p><p>但是机器并没有人类的理解力，通过让 HTML元素 自身具备意义，机器可以知道，每一块 HTML元素 在向浏览者传达什么信息。</p><h2>2. 语义化的好处</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-82c23808720acb7a07c6cb594279cca2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"378\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;378&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"378\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-82c23808720acb7a07c6cb594279cca2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>很多网页会以上面的结构来组织内容。</p><p>上面的图示分为：</p><ul><li><code>&lt;header&gt;</code>头部栏（如：Logo，标题）</li><li><code>&lt;nav&gt;</code>导航（如：各个部分的链接）</li><li><code>&lt;article&gt;</code>文章（如：独立的一篇文章）</li><li><code>&lt;figure&gt;</code>流内容（如：图像、图表、照片、代码）</li><li><code>&lt;aside&gt;</code>侧边栏（如：相关信息，广告）</li><li><code>&lt;footer&gt;</code>底部栏（如：作者信息，联系信息）</li></ul><p>非语义化HTML代码</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;header&#34;&gt;\n  &lt;div id=&#34;nav&#34;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=&#34;article&#34;&gt;\n  &lt;div id=&#34;figure&#34;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=&#34;aside&#34;&gt;&lt;/div&gt;\n&lt;div id=&#34;footer&#34;&gt;&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>语义化HTML代码</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;header&gt;\n  &lt;nav&gt;&lt;/nav&gt;\n&lt;/header&gt;\n&lt;article&gt;\n  &lt;figure&gt;&lt;/figure&gt;\n&lt;/article&gt;\n&lt;aside&gt;&lt;/aside&gt;\n&lt;footer&gt;&lt;/footer&gt; </code></pre></div><p>要实现上图的结构，我们可以用着两种方法去实现。一种是非语义化的，一种是语义化的。</p><p>你可能会说，上面那个代码在 <code>&lt;div&gt;</code>元素 里面，不也用 <code>id</code>属性 表明元素的作用了吗？</p><p>但是机器可是看不懂英文的呀，你可以给一个 <code>id</code>属性 定义上一个人类看得懂的单词，但是如果你随便写几个字母呢？机器不会管你 <code>id</code> 里写了什么，它只知道这是个没有任何特殊含义的 <code>div</code>块级元素。</p><p>所以这个时候我们需要用 HTML5 里面的 <b>语义元素</b> 去写网页结构。机器会根据 元素名 去了解里面要表达的内容。</p><p>（ 例如通过上面语义化代码，机器就会知道，一个 头部栏 里面包含一个 导航栏。而不是一个不知道干什么的 块状元素 包含 另一个 不清楚的 块状元素。）</p><p>这样做 <b>好处</b> 有：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. 有利于SEO</b> (Search engine optimization)</p><ul><ul><li>SEO 就是 搜索引擎优化 的意思。为的是让网页<b>内容更容易被搜索到</b>。并且在<b>搜索结果中排名更高</b>。</li><li>当你的网页内容被机器所理解，网页所包含的信息也就更容易被搜索引擎检索到。</li></ul></ul><p><b>2. 代码可读性更高</b></p><ul><ul><li>不光为了是机器可以理解，语义化的HTML文档，对程序员来说也更容易阅读。很多时候自定义的<code>class</code>，<code>id</code>属性，并不能保证每个人都明白所表达的意思。</li></ul></ul><p><b>3. 访问性更好</b></p><ul><ul><li>当 CSS 样式不能正常工作的时候，语义化的 HTML 文档在浏览器仍然会保持正常，可阅读的结构。不至于完全崩坏。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>3. 语义元素</h2><h2>3.1 <code>&lt;header&gt;</code>元素</h2><p><code>&lt;header&gt;</code>元素描述了文档的头部区域。不要把它和<code>&lt;h1&gt;-&lt;h6&gt;</code>弄混哦。</p><p>在<code>&lt;header&gt;</code>元素里，应该包含 <b>介绍性的内容</b>。</p><p>一般出现在<code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;body&gt;</code>的开头。</p><p>介绍的内容可能包括：Logo，公司名，导航栏，作者信息，等等。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c1da92e49941c58ab88012af3a8300d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"389\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"389\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-c1da92e49941c58ab88012af3a8300d6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>举例说，知乎网站中的这一部分就应该写在<code>&lt;header&gt;</code>元素里。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2f4c5028db7de9b2900afc8734b9a6de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1952\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb\" width=\"1952\" data-original=\"https://pic3.zhimg.com/v2-2f4c5028db7de9b2900afc8734b9a6de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1952&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1952\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1952\" data-original=\"https://pic3.zhimg.com/v2-2f4c5028db7de9b2900afc8734b9a6de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2f4c5028db7de9b2900afc8734b9a6de_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.2 <code>&lt;nav&gt;</code>元素</h2><p><code>&lt;nav&gt;</code>元素定义导航链接的部分。用户通过链接前往相关的页面。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8bac5d60e38f019fccef061bdbe2c3ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"393\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"393\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-8bac5d60e38f019fccef061bdbe2c3ff_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>举例说，下图中画橙色方框里的就是导航，应该写在<code>&lt;nav&gt;</code>元素里</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-04833b0b3ac15b4eba09309cfdf298ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"362\" data-rawheight=\"100\" class=\"content_image\" width=\"362\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;362&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"362\" data-rawheight=\"100\" class=\"content_image lazy\" width=\"362\" data-actualsrc=\"https://pic2.zhimg.com/v2-04833b0b3ac15b4eba09309cfdf298ed_b.jpg\"/></figure><h2>3.3 <code>&lt;footer&gt;</code>元素</h2><p><code>&lt;footer&gt;</code> 元素描述了文档的底部区域。一个页脚通常包含文档的作者，著作权信息，链接的使用条款，联系信息等。<code>&lt;footer&gt;</code>元素 和 <code>&lt;header&gt;</code>元素 基本上一样，只不过它是被放在 文章/网页 底部的。有的网页中也会把<code>&lt;nav&gt;</code>放到<code>&lt;footer&gt;</code>里。这些完全取决于你想怎么安排网页结构。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-df37d237e991a81a926cdf3c4b598518_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"386\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;386&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"386\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-df37d237e991a81a926cdf3c4b598518_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>继续拿知乎举例。在这个例子中，<code>&lt;footer&gt;</code>中就有一个<code>&lt;nav&gt;</code>。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7dd141b15e4e6b9874072f5d62bdf675_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1828\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"1828\" data-original=\"https://pic2.zhimg.com/v2-7dd141b15e4e6b9874072f5d62bdf675_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1828&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1828\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1828\" data-original=\"https://pic2.zhimg.com/v2-7dd141b15e4e6b9874072f5d62bdf675_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7dd141b15e4e6b9874072f5d62bdf675_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.4 <code>&lt;article&gt;</code>元素</h2><p><code>&lt;article&gt;</code> 元素定义网页中独立内容。每一个<code>&lt;article&gt;</code>元素就像一个个<b>独立</b>的页面。</p><p>通常有自己的<code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>。比如说在一个博客页面中，每一篇文章就应该被放在独立<code>&lt;article&gt;</code>中。</p><p>注意刚刚说，<code>&lt;article&gt;</code> 是<b>独立</b>的，意思是说，每一个 <code>&lt;article&gt;</code>元素 之间都是没关系的，同时和它所在的页面也是没关系的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8234a3487150c6ffbdc5d56e3cbc61b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"321\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;321&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"321\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-8234a3487150c6ffbdc5d56e3cbc61b2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>继续在知乎中找例子。下面每一个橙色框框都应该是一个<code>&lt;article&gt;</code>元素。上面所说的 <b>独立</b> 的意思在下图中就有体现。每一个橙色框里的内容删掉，都不会对其他橙色框造成影响。同时，对于知乎这个网站，也不会造成影响。知乎网站 和 其他文章 并不因为任何一篇文章的存在而存在。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cf4dacadf1194f51c167bf79f177aa45_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"518\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;518&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"518\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic2.zhimg.com/v2-cf4dacadf1194f51c167bf79f177aa45_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.5 <code>&lt;section&gt;</code> 元素</h2><p><code>&lt;section&gt;</code>标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</p><p>不同于<code>&lt;article&gt;</code>元素，<code>&lt;section&gt;</code>元素并不需要独立于所属文章/页面。</p><p>可以把它形容成 带语义的<code>&lt;div&gt;</code>。用来有意义的划分空间。同时，<code>&lt;section&gt;</code>中应该有标题<code>&lt;h1&gt; - &lt;h6&gt;</code> ，用来表明这个区块所包含的内容。</p><p>比如说划分文章中的章节；页面中用来区分内容板块（如：音乐，文章，新闻，图片）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c7d766a1cb47d287a438c2e0f89582a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"337\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"337\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-c7d766a1cb47d287a438c2e0f89582a7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在知乎专栏这个页面中</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8d73f250f4f6ce53032fe117ea8d6ea3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"398\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;398&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"398\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-8d73f250f4f6ce53032fe117ea8d6ea3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.6 <code>&lt;aside&gt;</code> 元素</h2><p><code>&lt;aside&gt;</code> 标签定义页面主区域内容之外的内容（比如侧边栏）。</p><p><code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>都是为了给 文章/页面 添加额外信息。但是有的时候有些信息是和 文章/页面 没什么关系的。这个时候 侧边栏<code>&lt;aside&gt;</code> 就是个好地方去这些无关内容。</p><p>比如在 文章<code>&lt;article&gt;</code> 中：放置主要内容的附属信息，比如与当前文章相关的资料、名词解释，等等。</p><p>在 页面 中可以放置 站点全局的附属信息 。最常见是侧边栏，其中的内容可以是 广告，友情链接，相关文章列表，等等。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-808a563e49276621a156771ba3493774_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"388\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;388&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"388\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-808a563e49276621a156771ba3493774_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在知乎中，你可以看到</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1c623b9b4cd06daf1b55927f91873fbc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"454\" data-original=\"https://pic1.zhimg.com/v2-1c623b9b4cd06daf1b55927f91873fbc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;454&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"454\" data-original=\"https://pic1.zhimg.com/v2-1c623b9b4cd06daf1b55927f91873fbc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1c623b9b4cd06daf1b55927f91873fbc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.7 那<code>&lt;div&gt;</code>还要继续用吗？</h2><p><b>当然要用！！！</b></p><p>在很多时候，为了排版和样式<code>&lt;div&gt;</code>可以作为一个很好的不带语义 <b>容器元素（“container element”）</b>。</p><p>比如说你要用<code>margin: 0 auto;</code> 水平居中页面内容部分</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;body&gt;\n  &lt;div class=&#34;wrap&#34;&gt;\n    &lt;header&gt;...&lt;/header&gt;\n    &lt;section&gt;...&lt;/section&gt;\n    &lt;footer&gt;...&lt;/footer&gt;\n  &lt;/div&gt;\n&lt;/body&gt; </code></pre></div><p>这个时候用一个<code>&lt;div&gt;</code>元素把页面内容包起来，然后在浏览器中居中，是个很好的选择。</p><p>而且在<code>FlexBox</code>或者 <code>Grid网格</code>中，我们都会经常用到<code>&lt;div&gt;</code>去进行布局。</p><p>记住，如果你不知道该不该用语义元素，或者不知道该用哪个。这个时候就干脆不要用了。</p><p>瞎用语义元素，比不用更麻烦。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.8 其他的语义元素</h2><p>在这一章，我并不想详细介绍所有的语义元素。那个应该是文档需要去做的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-20de7d11911b4986d42eb5c0f3836335_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1020\" data-rawheight=\"1128\" class=\"origin_image zh-lightbox-thumb\" width=\"1020\" data-original=\"https://pic2.zhimg.com/v2-20de7d11911b4986d42eb5c0f3836335_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1020&#39; height=&#39;1128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1020\" data-rawheight=\"1128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1020\" data-original=\"https://pic2.zhimg.com/v2-20de7d11911b4986d42eb5c0f3836335_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-20de7d11911b4986d42eb5c0f3836335_b.jpg\"/></figure><hr/><h2><b>网页布局</b></h2><h2>1. 一列定宽，一列宽度自适应</h2><p>比较常见的布局，一般是定宽的一侧为导航栏，自适应的一侧为内容栏。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3d0c10ceb2b15baa1c10e64f2e149259_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"330\" data-rawheight=\"200\" class=\"content_image\" width=\"330\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;330&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"330\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"330\" data-actualsrc=\"https://pic2.zhimg.com/v2-3d0c10ceb2b15baa1c10e64f2e149259_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div id=&#34;left&#34;&gt;&lt;/div&gt;   &lt;!- 定宽 --&gt;\n  &lt;div id=&#34;right&#34;&gt;&lt;/div&gt;  &lt;!- 自适应 --&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>         <span class=\"c\">/* 设置为 FlexBox 容器 */</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>        \n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>   <span class=\"c\">/* 简写属性，意思是flex-grow:1; flex-shrink:1; flex-basis:auto; container有剩余空间就扩大，没有就缩小 */</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Grid网格布局</b></p><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>   <span class=\"c\">/* 设置为 Grid 容器 */</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"nf\">minmax</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">auto</span><span class=\"p\">);</span> <span class=\"c\">/* 左列定宽50px, 右列宽度为剩余空间 */</span>\n  <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-gap</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><h2>2. 两侧定宽，中间自适应</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-558887e1bc435e04e3a913cea5005d54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-558887e1bc435e04e3a913cea5005d54_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-558887e1bc435e04e3a913cea5005d54_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-558887e1bc435e04e3a913cea5005d54_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div id=&#34;left&#34;&gt;&lt;/div&gt;\n  &lt;div id=&#34;center&#34;&gt;&lt;/div&gt;\n  &lt;div id=&#34;right&#34;&gt;&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span> <span class=\"c\">/* 设置为 FlexBox 容器 */</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">center</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">center</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Grid网格布局</b></p><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>  <span class=\"c\">/* 设置 Grid 容器 */</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"nf\">minmax</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">auto</span><span class=\"p\">)</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"c\">/* 三列，左右两列定宽50px，中间宽度为剩余空间 */</span>\n  <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-gap</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">center</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><h2>3. 两列不定宽</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a2dcf699f4de672e52f274513ed23a29_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"200\" class=\"content_image\" width=\"328\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;328&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"328\" data-actualsrc=\"https://pic2.zhimg.com/v2-a2dcf699f4de672e52f274513ed23a29_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div id=&#34;left&#34;&gt;我的宽度可能并不确定。。&lt;/div&gt;\n  &lt;div id=&#34;right&#34;&gt;我的宽度自适应。&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-82927441707d64769c999b711dd86a4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"200\" class=\"content_image\" width=\"360\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;360&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"360\" data-actualsrc=\"https://pic2.zhimg.com/v2-82927441707d64769c999b711dd86a4d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Grid网格布局</b></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>   <span class=\"c\">/* 设置为 Grid 容器 */</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"nf\">minmax</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">auto</span><span class=\"p\">)</span> <span class=\"nf\">minmax</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">auto</span><span class=\"p\">);</span> \n  <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-gap</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">left</span><span class=\"o\">,</span> <span class=\"p\">#</span><span class=\"nn\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><h2>4. 多列等分</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9b1947e66d01228e491a7a945eefac69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"200\" class=\"content_image\" width=\"385\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;385&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"385\" data-actualsrc=\"https://pic2.zhimg.com/v2-9b1947e66d01228e491a7a945eefac69_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>  <span class=\"c\">/* 宽度平均分 */</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Grid网格布局</b></p><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"n\">fr</span> <span class=\"mi\">1</span><span class=\"n\">fr</span> <span class=\"mi\">1</span><span class=\"n\">fr</span> <span class=\"mi\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span> <span class=\"c\">/* 四个项目等分剩余空间 */</span>\n  <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2>5. 九宫格布局</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9ab228e3d88be6e8cc0c6775683c3b7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"201\" data-rawheight=\"200\" class=\"content_image\" width=\"201\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;201&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"201\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"201\" data-actualsrc=\"https://pic4.zhimg.com/v2-9ab228e3d88be6e8cc0c6775683c3b7b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;row&#34;&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&#34;row&#34;&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&#34;row&#34;&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n  <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">row</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Grid网格布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-gap</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-gap</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><h2>6. 百分比布局</h2><p>我们也可以将宽度设置为百分比来进行布局。百分比是相对于父元素宽度而言的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ac941186f839e4673cd73d3b88127f95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"361\" data-rawheight=\"200\" class=\"content_image\" width=\"361\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;361&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"361\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"361\" data-actualsrc=\"https://pic2.zhimg.com/v2-ac941186f839e4673cd73d3b88127f95_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n  <span class=\"k\">flex-wrap</span><span class=\"p\">:</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">33.3</span><span class=\"kt\">%</span><span class=\"p\">;</span> <span class=\"c\">/* 一共三个item, 3 x 33.3% = 100% */</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><h2>7. 复杂布局</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-baf4e34629bd03f25a9e237282b72e51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"323\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"323\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic2.zhimg.com/v2-baf4e34629bd03f25a9e237282b72e51_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面这个布局我们可以先把右边的上下两块看成一列，这样它就转换成了一列定宽，一列自适应布局。之后我们再关注右边自适应列。用百分比分配高度来上下布局。</p><p><b>FlexBox布局</b></p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;left&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;right&#34;&gt;\n    &lt;div class=&#34;up&#34;&gt;&lt;/div&gt;\n    &lt;div class=&#34;down&#34;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">left</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">right</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">up</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">down</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">left</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">up</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">down</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p><b>Grid网格布局</b></p><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"nf\">minmax</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">auto</span><span class=\"p\">);</span>\n  <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">left</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">right</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">up</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">down</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">up</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">down</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p>当然 Grid网格布局 不局限于这一种写法，你能想出别的写法吗？</p><hr/><h2><b><code>box-sizing</code>属性</b></h2><p>你可能注意到了，我在前面的例子中用到了<code>box-sizing</code>这个属性，这个是干什么的呢?</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ab749d1554cbad2bba0946ac4e8b8577_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"256\" data-rawheight=\"229\" class=\"content_image\" width=\"256\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;256&#39; height=&#39;229&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"256\" data-rawheight=\"229\" class=\"content_image lazy\" width=\"256\" data-actualsrc=\"https://pic4.zhimg.com/v2-ab749d1554cbad2bba0946ac4e8b8577_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>让我先来看这张<b>盒模型</b>的图示。当我们定义一个元素的<code>width</code>和<code>height</code>属性的时候。</p><p>默认就是定义 &#34;content&#34; 的尺寸（图中蓝色区域）。</p><p>但是当我们为元素定义<code>padding</code>, <code>border</code>, <code>margin</code>属性之后，这个元素在页面中的尺寸也无形的增加了。</p><p>页面的布局可能就会因为这些多出来的尺寸而被破坏。</p><p>例如下面代码</p><p>HTML</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;left&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;right&#34;&gt;&lt;/div&gt;\n&lt;div&gt; </code></pre></div><p>CSS</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n  <span class=\"k\">flex-wrap</span><span class=\"p\">:</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">left</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">left</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>本来预期 40% + 60% = 100%, <code>.left</code> 占 <code>.container</code> 40% 的宽度； <code>.right</code> 占 <code>.container</code> 60% 的宽度，两个<code>&lt;div&gt;</code>元素水平排布开来。</p><p>但是结果却是</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c5a12870e4e55db63e3974c5ffc095d2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic3.zhimg.com/v2-c5a12870e4e55db63e3974c5ffc095d2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;568&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"568\" data-original=\"https://pic3.zhimg.com/v2-c5a12870e4e55db63e3974c5ffc095d2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c5a12870e4e55db63e3974c5ffc095d2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>原因就是，我们设定的<code>border: 1px solid red;</code>让每个<code>&lt;div&gt;</code>的宽度多了<code>2px</code>（左右各1px）。</p><p>那么实际宽度就是 40% + 60% + 2px + 2px &gt; 100%</p><p>所有一行就排不开了。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">left</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nc\">right</span> <span class=\"p\">{</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p>这个时候在CSS中加上<code>box-sizing: border-box;</code>。这样我们定义的尺寸就是 content + padding + border 的总和了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b363bddcdf6f5fa936ef69b946edb8c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb\" width=\"882\" data-original=\"https://pic4.zhimg.com/v2-b363bddcdf6f5fa936ef69b946edb8c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;882&#39; height=&#39;248&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"882\" data-original=\"https://pic4.zhimg.com/v2-b363bddcdf6f5fa936ef69b946edb8c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b363bddcdf6f5fa936ef69b946edb8c7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>两个<code>div</code>的排列合乎预期了。</p><p><code>box-sizing</code>属性值</p><ul><li><code>content-box</code>：默认值。<code>width</code> 和 <code>height</code> 属性只包含<code>content</code>。 <code>border</code> 和 <code>padding</code> 不包括。</li><li><code>border-box</code>：<code>width</code> 和 <code>height</code> 属性包含 <code>content</code>, <code>padding</code> 和 <code>border</code>。</li><li><code>inherit</code>：从父元素继承</li></ul><hr/><h2><b>练习时间到</b></h2><p>在这一篇我们了解了<b>HTML语义化 </b>和 <b>基本布局方法，</b>也顺便了解了<b>box-sizing属性。</b>接下来</p><p>请大家仿照 <a href=\"https://link.zhihu.com/?target=https%3A//htmlpreview.github.io/%3Fhttps%3A//github.com/Garrik-Liu/MyTutorials/blob/master/Beginner-Practices/Practice-03/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">我的样例</a>，用你喜欢的布局方式去搭建样例中的页面结构吧。</p><p>我的代码保存在Github - <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Garrik-Liu/MyTutorials/tree/master/Beginner-Practices/Practice-03\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">练习3源代码</a>。如果遇到问题，大家可以当做参考。</p><p>希望大家能多多开动脑筋，这个例子实现的方法不止一种。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在下一篇，我会介绍<b>响应式布局:</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/33102529/edit\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-36167dfc3d4e932a7d111e3bead521fb_180x120.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">罐装汽水Garrik：前端系列教学(入门篇) - 响应式设计（1）</a><p class=\"ztext-empty-paragraph\"><br/></p><p>好啦，今天的分享就告一段落啦。</p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }
            ], 
            "comments": [
                {
                    "userName": "不文不问", 
                    "userLink": "https://www.zhihu.com/people/88ed5bb9cd09321c57f445fa1b15ba5a", 
                    "content": "<p>学习了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Junhao", 
                    "userLink": "https://www.zhihu.com/people/6cf7b29c0f1397d8d6e648aa96640d56", 
                    "content": "不错", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "谢谢 其实个人感觉还不是很满意，还在整理资料中，之后还会继续改进的", 
                            "likes": 2, 
                            "replyToAuthor": "Junhao"
                        }
                    ]
                }, 
                {
                    "userName": "背起行囊走四方", 
                    "userLink": "https://www.zhihu.com/people/4998ada5dd5d65ddb1add2c675a19e0a", 
                    "content": "能把自己学的知识分享给大家，并且十分的具体和全面，对我很有帮助，谢谢你", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>唔，每次看到排版就会想到圣杯，不知道这东西有什么魔力吗？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "三列中间 上面一个header 下面一个 footer 就是圣杯，我是个人觉得没什么必要介绍，我在这一章介绍了基础布局方式 大家可以凭自己喜欢 自由搭配，", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "猴几", 
                    "userLink": "https://www.zhihu.com/people/986337fe148b7b2804b21228a0799728", 
                    "content": "帮大忙了，感谢。", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32957425", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 5, 
            "title": "Grid 网格介绍", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p><b>上一篇 </b><a href=\"https://zhuanlan.zhihu.com/p/32946068\" class=\"internal\">前端系列教学(入门篇) - FlexBox(&#34;弹性盒子&#34;)介绍</a></p><blockquote>在介绍CSS布局实例之前，在上一篇我介绍了FlexBox布局。在这一篇我要先向大家介绍Grid网格布局的基本属性，与使用方法。</blockquote><h2><b>什么是 “Grid网格布局”</b></h2><p>网格是一组相交的<b>水平线</b>和<b>垂直线</b>，它定义了网格的<b>列</b>和<b>行</b>。我们可以将网格元素放置在与这些行和列相关的位置上。</p><p>不同于上一章所讲的 <b>“FlexBox布局” 是 “一维布局模型”</b>，<b>“Grid网格布局” 是 “二维布局模型”</b>。</p><p>我们说 “flexbox” 是一维的布局，是因为一个 “flexbox container” 一次只能处理一个维度上的元素布局，一行或者一列。</p><p>相比较 “Grid网格布局”，可以同时处理行和列上的布局。</p><hr/><h2><b>基本概念</b></h2><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item item-1&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item item-2&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item item-3&#34;&gt;&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2>1. 网格容器 (&#34;grid container&#34;) 和 网格项目 (&#34;grid items&#34;)</h2><p>和 “FlexBox” 相似，我们通过在元素上声明<code>display：grid</code> 或 <code>display：inline-grid</code>来创建一个 <b>网格容器 (&#34;grid container&#34;)</b>。一旦我们这样做，这个元素的所有 <b>直系子元素</b> 将成为 <b>网格项目 (&#34;grid items&#34;)</b>。</p><p>注意，是 <b>直接子元素</b> ，不是所有的后代元素。这一点也同样适用于 “FlexBox”布局。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item item-1&#34;&gt;&lt;/div&gt;\n  &lt;div class=&#34;item item-2&#34;&gt;\n      &lt;div&gt;我不是Grid Item&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&#34;item item-3&#34;&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre></div><p>上面例子中 “container” 下的第二个<code>&lt;div&gt;</code>元素里面的<code>&lt;div&gt;</code>子元素就不是 “Grid Item”。</p><h2>2. 网格线 (“grid line”)</h2><p>一条条垂直的，水平的网格线组成了网格结构。其中垂直的线叫做 <b>列网格线</b> (“column grid lines”)，水平的线叫做 <b>行网格线</b>(“row grid lines”)。下图中的的黄线就是一条列网格线。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-df70da419aef9e7b3c3315d6f6e0c5da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image\" width=\"383\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;383&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image lazy\" width=\"383\" data-actualsrc=\"https://pic3.zhimg.com/v2-df70da419aef9e7b3c3315d6f6e0c5da_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3. 网格轨道(&#34;grid track&#34;)</h2><p>两条任意 <b>平行网格线</b> 之间的空间构成 <b>网格轨道</b>。你可以把它们想象成网格中的列或行。</p><p>下图中的 第二条 和 第三条 行网格线 之间就构成了一条 网格轨道。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-afdb90fe7ec9be672cb5e7f84ff149da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image\" width=\"383\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;383&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image lazy\" width=\"383\" data-actualsrc=\"https://pic3.zhimg.com/v2-afdb90fe7ec9be672cb5e7f84ff149da_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>4. 网格单元格(“grid cell”)</h2><p>两条相邻 <b>行网格线</b> 和 两条相邻 <b>列网格线</b> 之间的空间构成一个 <b>网格单元格</b>。单元格是网格区域的基本组成单位。</p><p>下图是 第一条 第二条 行网格线 和 第二条 第三条 列网格线 交汇构成的 网格单元格。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e50fdda1adb492d8e162e5c898144b46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image\" width=\"383\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;383&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image lazy\" width=\"383\" data-actualsrc=\"https://pic3.zhimg.com/v2-e50fdda1adb492d8e162e5c898144b46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>5. 网格区域(“grid area”)</h2><p>任意两条 <b>行网格线</b> 和 任意两条 <b>列网格线</b> 包围出一个 <b>网格区域</b> 。其可以由任意数量的 <b>网格单元格</b> 组成。但是你只能创造 <b>矩形区域</b>。“L”型的是不可以的。</p><p>下图是 第一条 第三条 行网格线 和 第一条 第三条 列网格线 之间的网格区域。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4f426be7d8f6b4138562016a40440921_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image\" width=\"383\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;383&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"219\" class=\"content_image lazy\" width=\"383\" data-actualsrc=\"https://pic2.zhimg.com/v2-4f426be7d8f6b4138562016a40440921_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b>使用方法</b></h2><h2>1. 行和列</h2><p>我们通过 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性来定义网格中的 行 和 列 。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item&#34;&gt;1&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;2&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;3&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;4&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;5&lt;/div&gt;\n  &lt;div class=&#34;item&#34;&gt;6&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>通过上面代码，我们可以得到一个由 三个100px宽的 列轨道；两个100px宽的 行轨道 组成的网格。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-73bec8cb536a0fe6ba2bba5ac3e6ebb5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"200\" class=\"content_image\" width=\"293\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;293&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"293\" data-actualsrc=\"https://pic2.zhimg.com/v2-73bec8cb536a0fe6ba2bba5ac3e6ebb5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>同样，如果我们把代码换成下面这样。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>网格则会随之改变。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3df91c6225ad9398bcaffd373f60a6eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"435\" data-original=\"https://pic4.zhimg.com/v2-3df91c6225ad9398bcaffd373f60a6eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;435&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"435\" data-original=\"https://pic4.zhimg.com/v2-3df91c6225ad9398bcaffd373f60a6eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3df91c6225ad9398bcaffd373f60a6eb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>1.1 <code>fr</code>单位</h2><p>我们可以用任何长度单位来为轨道定义大小。</p><p>但网格还引入了一个额外的长度单位来帮助我们创建灵活的网格轨道。</p><p><code>fr</code> 单位代表 <b>网格容器</b> 中 <b>剩余可用空间</b> 的 <b>一等份</b>。</p><div class=\"highlight\"><pre><code class=\"language-text\">display: grid;\ngrid-template-columns: 1fr 100px 100px;\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c6820942a08623d9e662d6d4aa58f5e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"449\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"449\" data-original=\"https://pic1.zhimg.com/v2-c6820942a08623d9e662d6d4aa58f5e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;449&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"449\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"449\" data-original=\"https://pic1.zhimg.com/v2-c6820942a08623d9e662d6d4aa58f5e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c6820942a08623d9e662d6d4aa58f5e8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在这个例子中，首先网格容器是个块级元素，那么独占一行。之后在这三列之中，后两列都是100px宽。那么剩余空间就是 网格容器宽度 - 100px - 100px。第一列宽度为 1fr， 那么它的宽度就是容器中全部的剩余空间的宽度。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">display</span><span class=\"o\">:</span> <span class=\"nt\">grid</span><span class=\"o\">;</span>\n<span class=\"nt\">grid-template-columns</span><span class=\"o\">:</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6cd144bf14df274c0e183abccc093db3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"476\" data-original=\"https://pic4.zhimg.com/v2-6cd144bf14df274c0e183abccc093db3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;476&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"476\" data-original=\"https://pic4.zhimg.com/v2-6cd144bf14df274c0e183abccc093db3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6cd144bf14df274c0e183abccc093db3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在这个例子三种，三列宽度都为 1fr。那么每一列宽度就是剩余空间的宽度 ÷ 3</p><h2>1.2  repeat()</h2><p>如果很多轨道尺寸都是一样的，那么可以使用<code>repeat()</code> 来定义重复部分的尺寸。</p><p>比如 <code>grid-template-columns: 1fr 1fr 1fr;</code> 就可以写成 <code>grid-template-columns: repeat(3, 1fr);</code></p><h2>2. 放置网格项目（“Grid Items”）</h2><p>在上面的例子里，每个 网格项目 都是按照顺序一个一个的放进 网格单元格 中的。那如果我们想让其中一个 网格项目 独占一行，该怎么设置呢？</p><p>首先我们要引用之前提到的 <b>网格线</b> 概念</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c2d102dc1b3aa93d915ed01d2fcb3995_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-c2d102dc1b3aa93d915ed01d2fcb3995_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;764&#39; height=&#39;456&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-c2d102dc1b3aa93d915ed01d2fcb3995_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c2d102dc1b3aa93d915ed01d2fcb3995_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当我们定义网格时，我们定义的是<b>网格轨道</b>，而不是网格线。网格会自动创建 <b>带编号的网格线</b> 来让我们来定位每一个 <b>网格项目</b>。 在上面这个三列两行的网格中，就拥有四条纵向的网格线。</p><p>在网格中，可以通过给 <b>网格项目</b> 的 <code>grid-column-start</code>, <code>grid-column-end</code>, <code>grid-row-start</code> 和 <code>grid-row-end</code> 属性赋值来定义其在网格中的位置。</p><p>其实看属性名字已经很明确了。</p><ul><li><code>grid-column-start</code>：定义网格项目从哪一 <b>列网格线</b> 开始</li><li><code>grid-column-end</code>：定义网格项目从哪一 <b>列网格线</b> 结束</li><li><code>grid-row-start</code>：定义网格项目从哪一 <b>行网格线</b> 开始</li><li><code>grid-row-end</code>：定义网格项目从哪一 <b>行网格线</b> 结束</li><li>如果不设定 结束位置 或者 开始位置 的话，默认在 开始网格线 之后的那条线结束。或者 结束位置 之前的那条线开始 也就是 默认 占 一条网格轨道。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item item1&#34;&gt;1&lt;/div&gt;\n  &lt;div class=&#34;item item2&#34;&gt;2&lt;/div&gt;\n  &lt;div class=&#34;item item3&#34;&gt;3&lt;/div&gt;\n  &lt;div class=&#34;item item4&#34;&gt;4&lt;/div&gt;\n  &lt;div class=&#34;item item5&#34;&gt;5&lt;/div&gt;\n  &lt;div class=&#34;item item6&#34;&gt;6&lt;/div&gt;\n  &lt;div class=&#34;item item7&#34;&gt;7&lt;/div&gt;\n  &lt;div class=&#34;item item8&#34;&gt;8&lt;/div&gt;\n  &lt;div class=&#34;item item9&#34;&gt;9&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">orange</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item1</span> <span class=\"p\">{</span>\n  <span class=\"k\">grid-column-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-end</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item2</span> <span class=\"p\">{</span>\n  <span class=\"k\">grid-column-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-end</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-start</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-end</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>在上面例子创建了一个 3x3 的网格。让第一个项目从 第一条 列网格线 开始，在 第四条 结束。也就是独占 第一行 网格轨道。让第二个项目 从 第一条 列网格线 开始，在 第三条 结束。第二条 行网格线 开始，第四条 结束。也就是 一个 2x2 的 网格区域。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f689c2b54b59c4b375cf5d11a75127d8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"337\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"337\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-f689c2b54b59c4b375cf5d11a75127d8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>等等，你说 item1 和 item2 要做的我明白，但是网格项目 5，6，7，8，9怎么都挤成那么小了？</p><p>这里其实就要涉及到另一个概念了 <b>隐式网格</b></p><h2>3. 隐式 和 显式网格</h2><p>我们使用<code>grid-template-columns</code> 和 <code>grid-template-rows</code> 来创建 <b>显式网格</b>。但是当我们的 网格项目数量 <b>超过</b> 了我们设定的 网格单元格 数量时，网格将会自动在 <b>隐式网格</b> 中创建行和列。按照默认，这些轨道将自动定义尺寸，所以会根据它里面的内容改变尺寸。</p><p>在隐式网格种，我们可以用 <code>grid-auto-rows</code> 和 <code>grid-auto-columns</code>属性来自定义一个自动生成轨道的尺寸。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">grid-auto-rows</span><span class=\"o\">:</span> <span class=\"nt\">100px</span><span class=\"o\">;</span> </code></pre></div><p>例如我们就可以把这行代码加到 <b>网格容器</b> 的样式表中。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c03254e95b4904fef64e52bd97384e24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"487\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;487&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"487\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-c03254e95b4904fef64e52bd97384e24_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>加过这行代码，之前被挤出来的 网格项目 行宽也是 100px 了。</p><h2>3.1  minmax()</h2><p>我们在设置一个显式的网格或者定义自动创建的行和列的大小的时候，我们也许想给网格一个最小的尺寸，但要确保他们能扩大到容纳他里面添加的内容。（举例说，我想让我的 行高 最小不会低于 200px, 但是如果网格单元里内容的 高度 超过了 200px，我也想让 行高 随内容高度增长而增长。）</p><p>这个时候我们可以用 <code>minmax()</code> 函数来解决这个问题。（注意是 函数，而不是 属性，函数可以计算出 属性值）</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"nf\">minmax</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">,</span> <span class=\"kc\">auto</span><span class=\"p\">)</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>在 <b>网格容器</b> 样式里加上了<code>grid-template-rows: minmax(100px, auto) 100px;</code> 这句话，那么 网格第一行 最小高度为 100px, 高度会随内容高度增加而增加。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-efd4dc039a3945f54536ee78c3cfa654_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"334\" data-rawheight=\"300\" class=\"content_image\" width=\"334\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;334&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"334\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"334\" data-actualsrc=\"https://pic1.zhimg.com/v2-efd4dc039a3945f54536ee78c3cfa654_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>4. 网格间距</h2><p>我们可以用 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 属性来为单元格之间设置间距。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">grid-column-gap</span><span class=\"o\">:</span> <span class=\"nt\">10px</span><span class=\"o\">;</span>\n<span class=\"nt\">grid-row-gap</span><span class=\"o\">:</span> <span class=\"nt\">20px</span><span class=\"o\">;</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dce99837634a71b55b0d89ea65ad40b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic1.zhimg.com/v2-dce99837634a71b55b0d89ea65ad40b8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;661&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"661\" data-original=\"https://pic1.zhimg.com/v2-dce99837634a71b55b0d89ea65ad40b8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dce99837634a71b55b0d89ea65ad40b8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们通过上面代码设置 行间距 为20px，列间距 为10px。</p><p>当然我们也可以简写成 <code>grid-gap</code> 属性</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">grid-column-gap</span><span class=\"o\">:</span> <span class=\"nt\">10px</span><span class=\"o\">;</span>\n<span class=\"nt\">grid-row-gap</span><span class=\"o\">:</span> <span class=\"nt\">20px</span><span class=\"o\">;</span> </code></pre></div><p>等同于</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">grid-gap</span><span class=\"o\">:</span> <span class=\"nt\">20px</span> <span class=\"nt\">10px</span><span class=\"o\">;</span> <span class=\"c\">/*第一个是row gap, 第二个是 column gap*/</span></code></pre></div><p><code>grid-gap</code> 后面第一个写的是 &#34;row gap&#34;，第二个是 &#34;column gap&#34;</p><h2>5. 嵌套网格</h2><p>网格项目 也可以 设置成 网格容器，它的子元素则会成为它的 网格项目。</p><p>每个 网格容器 只有它的 <b>直接子级元素</b> 是它的 网格项目</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item item1&#34;&gt;\n    &lt;div class=&#34;item1-subItem&#34;&gt;A&lt;/div&gt;\n    &lt;div class=&#34;item1-subItem&#34;&gt;B&lt;/div&gt;\n    &lt;div class=&#34;item1-subItem&#34;&gt;C&lt;/div&gt;\n    &lt;div class=&#34;item1-subItem&#34;&gt;D&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&#34;item item2&#34;&gt;2&lt;/div&gt;\n  &lt;div class=&#34;item item3&#34;&gt;3&lt;/div&gt;\n  &lt;div class=&#34;item item4&#34;&gt;4&lt;/div&gt;\n  &lt;div class=&#34;item item5&#34;&gt;5&lt;/div&gt;\n  &lt;div class=&#34;item item6&#34;&gt;6&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item1</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"k\">grid</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"n\">fr</span> <span class=\"mi\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3a57e72a1b0b4dd20a17453727e6f4c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic1.zhimg.com/v2-3a57e72a1b0b4dd20a17453727e6f4c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;660&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"660\" data-original=\"https://pic1.zhimg.com/v2-3a57e72a1b0b4dd20a17453727e6f4c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3a57e72a1b0b4dd20a17453727e6f4c0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在上面的例子里，item1 被设置为 网格容器，其内部的四个子元素，则变成了 item1 的网格项目。</p><h2>6. 使用z-index控制层级</h2><p>多个网格项目可以占用同一个网格单位。</p><p>我们可以更改 <code>z-index</code>属性 来控制网格项目重叠的顺序。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div class=&#34;container&#34;&gt;\n  &lt;div class=&#34;item item1&#34;&gt;1&lt;/div&gt;\n  &lt;div class=&#34;item item2&#34;&gt;2&lt;/div&gt;\n  &lt;div class=&#34;item item3&#34;&gt;3&lt;/div&gt;\n  &lt;div class=&#34;item item4&#34;&gt;4&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item1</span> <span class=\"p\">{</span>\n  <span class=\"k\">grid-column-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-end</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-end</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item2</span> <span class=\"p\">{</span>\n  <span class=\"k\">grid-column-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-start</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-end</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0f2ebbf7a5cd856acb48eec0e7073f6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"301\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;301&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"301\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic2.zhimg.com/v2-0f2ebbf7a5cd856acb48eec0e7073f6d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在例子中 item2 现在覆盖于 item1 之上，其覆盖顺序遵循文档流的原始顺序（后来居上）。</p><p>这个时候我们可以引入<code>z-index</code>属性。你可以把它想象成一个<b>垂直于屏幕</b>的轴。它让处于二维空间的HTML元素有了高低的概念。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item1</span> <span class=\"p\">{</span>\n  <span class=\"k\">grid-column-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-column-end</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-end</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"k\">z-index</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item2</span> <span class=\"p\">{</span>\n  <span class=\"k\">grid-column-start</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-start</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">grid-row-end</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"k\">z-index</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b077c27567df72d4b02677d97c52666d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"300\" class=\"content_image\" width=\"302\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;302&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"302\" data-actualsrc=\"https://pic2.zhimg.com/v2-b077c27567df72d4b02677d97c52666d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们给 item2 设定一个低于 item1 的 z-index 值的话，item2 将会显示在 item1 的下方。</p><hr/><p>好啦，今天的分享就告一段落啦。下一篇中，我会介绍如何用 <b>FlexBox布局</b> 和 <b>Grid网格布局</b> 实现 常用的网页布局方案。</p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }
            ], 
            "comments": [
                {
                    "userName": "刘倩倩", 
                    "userLink": "https://www.zhihu.com/people/b47222bfb161392451aed2e1807da335", 
                    "content": "支持楼主", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "刘倩倩"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32946068", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 12, 
            "title": "FlexBox (\"弹性盒子\") 介绍", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在阅读此篇之前，建议已读过前一篇 <a href=\"https://zhuanlan.zhihu.com/p/32919684\" class=\"internal\">前端系列教学(入门篇) - CSS初阶（2）</a></p><p class=\"ztext-empty-paragraph\"><br/></p><blockquote>在介绍CSS布局实例之前，我要先向大家介绍FlexBox布局的基本属性，与使用方法。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>在过去，网页布局的传统解决方案，基于&#34;盒子模型&#34;，依赖<code>display</code>，<code>float，position</code>属性去实现。这种方式往往并不方便直观。而且在现在也并不常用。在前一章我们已经介绍了“盒子模型”。在布局上，在这个教程系列中，我会直接以 “FlexBox” 和 “Grid” 作为开始。</p><hr/><h2><b>什么是FlexBox布局</b></h2><p>FlexBox 是 “Flexible Box” 的简称，翻译成中文就是 “弹性盒子”。应用了“FlexBox布局”的元素，有能力随空间的大小去调整其内部子元素的<code>width</code>，<code>height</code>和排列顺序。关于FlexBox的教程，其实我个人认为阮一峰的 <a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flex 布局教程：语法篇</a> 里面已经讲的很通俗易懂，并且透彻了。在这里我个人简单的把相关知识点做一下梳理吧。</p><hr/><h2><b>基本概念</b></h2><p>应用了 FlexBox 布局的元素，称为 Flex 容器（flex container）。Flex 容器内部的 子元素 称之 Flex 项目（flex items）（注意：是子元素，不是全部后代元素。）。在下面我会分别简称为 “container”, 和 “items” 。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3b36245858fe73d6f50396c2e773848c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-3b36245858fe73d6f50396c2e773848c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-3b36245858fe73d6f50396c2e773848c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3b36245858fe73d6f50396c2e773848c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>“container”</b> 默认存在两根轴：<b>主轴（main axis）和垂直的交叉轴（cross axis）</b>。主轴<b>默认</b>为<b>水平方向</b>。主轴开始的地方叫“main start”, 结束的地方叫“main end”。同理交叉轴开始于“cross start”，结束于“cross end”。</p><p>在 FlexBox 布局里 <b>“items”</b> 默认沿<b>主轴</b>水平排列。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">flex-container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">flex-container</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">inline</span><span class=\"o\">-</span><span class=\"kc\">flex</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>你可以通过把元素的<code>display</code>属性设定为<code>flex</code>，或者<code>inline-flex</code>来将元素转换为 &#34;container&#34;。</p><p>（定义为<code>inline-flex</code>可以让 “container” 表现的像行内元素。）</p><p>在下面我会将 FlexBox 布局里涉及的属性以 <b>“container”</b> 和 <b>“items”</b> 来分成两部分来讲。</p><hr/><h2><b>FlexBox Container 属性</b></h2><h2>1. flex-direction</h2><p>通过<code>flex-direction</code>属性可以定义<b>主轴的方向</b>。也就是 “items” 排列的方向。</p><p><code>flex-direction</code>属性有四个值：</p><ul><li><code>row</code>： 主轴为水平方向，从左边开始排列。</li><li><code>row-reverse</code>： 主轴为水平方向，从右边开始排列。（reverse 就是反转的意思）</li><li><code>column</code>： 主轴为垂直方向，从上往下排列。</li><li><code>column-reverse</code>： 主轴为垂直方向，从下往上排列。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0ac377493a33869f2829c4b1d3d70100_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb\" width=\"796\" data-original=\"https://pic1.zhimg.com/v2-0ac377493a33869f2829c4b1d3d70100_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;796&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"796\" data-original=\"https://pic1.zhimg.com/v2-0ac377493a33869f2829c4b1d3d70100_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0ac377493a33869f2829c4b1d3d70100_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>2. flex-wrap</h2><p>默认情况下，“items” 在 “container” 中按一条直线排列。但是如果一行排不开了，那要不要换行？如果换行的话按照什么方向？<code>flex-wrap</code>就可以解决这个问题。</p><p><code>flex-wrap</code>属性有三个值：</p><ul><li><code>nowrap</code>（默认）：<b>不换行</b>，沿主轴轴方向排列，如果排满了就缩小 “items” 的尺寸。</li><li><code>wrap</code>：沿交叉轴方向<b>换行</b>。</li><li><code>wrap-reverse</code>：沿交叉轴<b>相反</b>方向<b>换行</b>。</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">flex-wrap</span><span class=\"o\">:</span> <span class=\"nt\">nowrap</span><span class=\"o\">;</span> <span class=\"c\">/* 默认主轴为从左到右， */</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7e8a06a9347193bcb4a969962ebfa3aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-7e8a06a9347193bcb4a969962ebfa3aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-7e8a06a9347193bcb4a969962ebfa3aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7e8a06a9347193bcb4a969962ebfa3aa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">flex-wrap</span><span class=\"o\">:</span> <span class=\"nt\">wrap</span><span class=\"o\">;</span> <span class=\"c\">/* 默认主轴为从左到右，默认交叉轴为从上到下。 */</span><span class=\"nt\">css</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6215cf568af888a6442517b68a2825d8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-6215cf568af888a6442517b68a2825d8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-6215cf568af888a6442517b68a2825d8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6215cf568af888a6442517b68a2825d8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">flex-wrap</span><span class=\"o\">:</span> <span class=\"nt\">wrap-reverse</span><span class=\"o\">;</span> <span class=\"c\">/* 默认主轴为从左到右，默认交叉轴相反方向为从下到上。 */</span><span class=\"nt\">css</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4a8a486060e81a05895277c987af5c96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-4a8a486060e81a05895277c987af5c96_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-4a8a486060e81a05895277c987af5c96_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4a8a486060e81a05895277c987af5c96_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3. flex-flow</h2><p><code>flex-flow</code>是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写属性。</p><p>把<code>flex-direction</code>属性值和<code>flex-wrap</code>属性值，中间用空格隔开就好了。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">flex-flow</span><span class=\"o\">:</span> <span class=\"nt\">row</span> <span class=\"nt\">nowrap</span><span class=\"o\">;</span> <span class=\"c\">/* 默认值 */</span></code></pre></div><h2>4. justify-content</h2><p><code>justify-content</code>属性定义了 &#34;items&#34; 在 <b>主轴</b> 上的 <b>对齐方式</b>。</p><p><code>justify-content</code>的五个属性值：</p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，“items” 之间的间隔相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">justify-content</span><span class=\"o\">:</span> <span class=\"nt\">flex-start</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e3fabf2f3eb3638f875e3aec375ee8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-3e3fabf2f3eb3638f875e3aec375ee8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-3e3fabf2f3eb3638f875e3aec375ee8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e3fabf2f3eb3638f875e3aec375ee8b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">justify-content</span><span class=\"o\">:</span> <span class=\"nt\">flex-end</span><span class=\"o\">;</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5e0ba403f6addc44ffe94514aa25494d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-5e0ba403f6addc44ffe94514aa25494d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-5e0ba403f6addc44ffe94514aa25494d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5e0ba403f6addc44ffe94514aa25494d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">justify-content</span><span class=\"o\">:</span> <span class=\"nt\">center</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cf3a33597be1757322b08d9b724c3ee7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-cf3a33597be1757322b08d9b724c3ee7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-cf3a33597be1757322b08d9b724c3ee7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cf3a33597be1757322b08d9b724c3ee7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">justify-content</span><span class=\"p\">:</span><span class=\"nd\">space-between</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-26f4d0cb84d48c2c6f48123b27c48ee2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-26f4d0cb84d48c2c6f48123b27c48ee2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-26f4d0cb84d48c2c6f48123b27c48ee2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-26f4d0cb84d48c2c6f48123b27c48ee2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">justify-content</span><span class=\"o\">:</span> <span class=\"nt\">space-around</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-44ea4f6b251351862171cb430fa1ddd7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-44ea4f6b251351862171cb430fa1ddd7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-44ea4f6b251351862171cb430fa1ddd7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-44ea4f6b251351862171cb430fa1ddd7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>5. align-items</h2><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p><p><code>align-items</code>有五个属性值：</p><ul><li><code>flex-start</code>：在交叉轴的起点对齐。</li><li><code>flex-end</code>：在交叉轴的终点对齐。</li><li><code>center</code>：在交叉轴的中点对齐。</li><li><code>baseline</code>: 与 &#34;items&#34; 的第一行文字的基线对齐。</li><li><code>stretch</code>:（默认值）如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-items</span><span class=\"o\">:</span> <span class=\"nt\">stretch</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8cff2ec017354f5f352cea721c4d2b93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-8cff2ec017354f5f352cea721c4d2b93_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-8cff2ec017354f5f352cea721c4d2b93_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8cff2ec017354f5f352cea721c4d2b93_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-items</span><span class=\"o\">:</span> <span class=\"nt\">flex-start</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42e7cd420338f9daa6b7a304bf5edeb8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-42e7cd420338f9daa6b7a304bf5edeb8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-42e7cd420338f9daa6b7a304bf5edeb8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-42e7cd420338f9daa6b7a304bf5edeb8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-items</span><span class=\"o\">:</span> <span class=\"nt\">flex-end</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7dfbeffa2f1e31eed2a94a811fae9a65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-7dfbeffa2f1e31eed2a94a811fae9a65_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-7dfbeffa2f1e31eed2a94a811fae9a65_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7dfbeffa2f1e31eed2a94a811fae9a65_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-items</span><span class=\"o\">:</span> <span class=\"nt\">center</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9c9988eb19406e596d8836c61ec92843_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-9c9988eb19406e596d8836c61ec92843_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-9c9988eb19406e596d8836c61ec92843_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9c9988eb19406e596d8836c61ec92843_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-items</span><span class=\"o\">:</span> <span class=\"nt\">baseline</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0c6d32d71238ee84c7a9359ce3c9d2c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-0c6d32d71238ee84c7a9359ce3c9d2c4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-0c6d32d71238ee84c7a9359ce3c9d2c4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0c6d32d71238ee84c7a9359ce3c9d2c4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>6. align-content</h2><p><code>align-content</code>属性定义了<b>多根轴线</b>的对齐方式。也就是说 “items” 不止一行。如果项目只有一根轴线（只有一行），该属性不起作用。</p><p><code>align-content</code>有六个属性值：</p><ul><li><code>flex-start</code>：与交叉轴的 起点 对齐。</li><li><code>flex-end</code>：与交叉轴的 终点 对齐。</li><li><code>center</code>：与交叉轴的 中点 对齐。</li><li><code>space-between</code>：与交叉轴 两端对齐，主轴方向 “items” 每根轴之间间隔平均。</li><li><code>space-around</code>：每根主轴方向 “items” 两侧的间隔都相等。</li><li><code>stretch</code>（默认值）：每根 “items” 轴线扩展开占满整个交叉轴。</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-content</span><span class=\"o\">:</span> <span class=\"nt\">stretch</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0ace2ca4e1203be1efd0fe3a2b499e7e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-0ace2ca4e1203be1efd0fe3a2b499e7e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-0ace2ca4e1203be1efd0fe3a2b499e7e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0ace2ca4e1203be1efd0fe3a2b499e7e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-content</span><span class=\"o\">:</span> <span class=\"nt\">flex-start</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fb243e59663671068934acb954dcb1f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-fb243e59663671068934acb954dcb1f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-fb243e59663671068934acb954dcb1f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fb243e59663671068934acb954dcb1f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-content</span><span class=\"o\">:</span> <span class=\"nt\">flex-end</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9074160378e8d697d6e0aa18037e1569_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-9074160378e8d697d6e0aa18037e1569_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-9074160378e8d697d6e0aa18037e1569_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9074160378e8d697d6e0aa18037e1569_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-content</span><span class=\"o\">:</span> <span class=\"nt\">center</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-40b878c8567ee6c4180bbec6bd68ef1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-40b878c8567ee6c4180bbec6bd68ef1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-40b878c8567ee6c4180bbec6bd68ef1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-40b878c8567ee6c4180bbec6bd68ef1c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-content</span><span class=\"o\">:</span> <span class=\"nt\">space-between</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-28a37409c8424189887fbac3bda2586f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-28a37409c8424189887fbac3bda2586f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-28a37409c8424189887fbac3bda2586f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-28a37409c8424189887fbac3bda2586f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">align-content</span><span class=\"o\">:</span> <span class=\"nt\">space-around</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-798e1d824027c831bbf05131f81a1283_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-798e1d824027c831bbf05131f81a1283_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic4.zhimg.com/v2-798e1d824027c831bbf05131f81a1283_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-798e1d824027c831bbf05131f81a1283_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b>Flexbox items 属性</b></h2><h2>1. order</h2><p><code>order</code>属性定义单个 “item” 的排列位置。属性值值越小，排列越靠前，默认为0。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item-three</span> <span class=\"p\">{</span>\n    <span class=\"k\">order</span><span class=\"p\">:</span> <span class=\"mi\">-1</span><span class=\"p\">;</span> <span class=\"c\">/* 第三个item的 “order” 值为 “-1” 在其他items里面是最小的，所有排在第一位 */</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1fd9235c0e8edc1f6795506dec012145_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-1fd9235c0e8edc1f6795506dec012145_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-1fd9235c0e8edc1f6795506dec012145_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1fd9235c0e8edc1f6795506dec012145_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>2. flex-grow</h2><p><code>flex-grow</code>属性定义 “items” 的放大比例，默认为0，也就是如果存在剩余空间，也不放大。</p><p>如果每个 “item” 的<code>flex-grow</code>属性值都为 “1”，那么每个 “item” 等分剩余空间。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item</span> <span class=\"p\">{</span>\n    <span class=\"k\">flex-grow</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e916c98c1ca12019079ece938e60d01d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-e916c98c1ca12019079ece938e60d01d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic2.zhimg.com/v2-e916c98c1ca12019079ece938e60d01d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e916c98c1ca12019079ece938e60d01d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第二个 “item” 的<code>flex-grow</code>属性值为 “3”，其他的都为 “1”。那么它占据的剩余空间为其他的3倍。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item-two</span> <span class=\"p\">{</span>\n    <span class=\"k\">flex-grow</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bd2d4b92bb81fc7637aa6d180fd8ffac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-bd2d4b92bb81fc7637aa6d180fd8ffac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic1.zhimg.com/v2-bd2d4b92bb81fc7637aa6d180fd8ffac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bd2d4b92bb81fc7637aa6d180fd8ffac_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3. flex-shrink</h2><p>flex-shrink属性定义了 &#34;items&#34; 的缩小比例，默认为1，即如果空间不足，该 &#34;item&#34; 将缩小。</p><p>“items” 的<code>flex-shrink</code>属性默认为“1”，也就是当空间不足时，“items” 尺寸将等比例缩小。</p><p>当一个 “item” 的<code>flex-shrink</code>属性为“0”。当空间不足时，这个 “item” 不缩小。</p><p>同理如果设置为“2”, 则缩小比例为默认的2倍。</p><p>不可为负值。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item-two</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex-shrink</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d76f13365d976974201605303490e76a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-d76f13365d976974201605303490e76a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-d76f13365d976974201605303490e76a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d76f13365d976974201605303490e76a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>4. flex-basis</h2><p><code>flex-basis</code>属性定义了在分配多余空间之前，“item” 占据的主轴空间。浏览器可以根据这个属性，计算主轴是否还剩余空间。默认值为`auto``，即 “item” 的本来大小。</p><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值，则 “item” 将占据固定空间。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item-four</span> <span class=\"p\">{</span>\n  <span class=\"k\">flex-basis</span><span class=\"p\">:</span> <span class=\"mi\">350</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"c\">/* 第四个item，固定宽为350px */</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-36e7fa5cc44790aebab84c5cf28e7232_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-36e7fa5cc44790aebab84c5cf28e7232_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-36e7fa5cc44790aebab84c5cf28e7232_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-36e7fa5cc44790aebab84c5cf28e7232_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>5. flex</h2><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写属性，默认值为<code>0 1 auto</code>。后两个属性可选。</p><p>改属性有两个简写值：</p><ul><li><code>flex: auto;</code> 等同于 <code>flex: 1 1 auto;</code>。</li><li><code>flex: none;</code> 等同于 <code>flex: 0 0 auto;</code>。</li></ul><h2>6. align-self</h2><p><code>align-self</code>属性允许单个 “item” 可以和其他项目有不一样的对齐方式。</p><p>可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承 “container” 的<code>align-items</code>属性。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">item-three</span> <span class=\"p\">{</span>\n    <span class=\"k\">align-self</span><span class=\"p\">:</span> <span class=\"kc\">stretch</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">item-four</span> <span class=\"p\">{</span>\n    <span class=\"k\">align-self</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">end</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0e13202c26d143dce0a7ab0508347766_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-0e13202c26d143dce0a7ab0508347766_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1255&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1255\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1255\" data-original=\"https://pic3.zhimg.com/v2-0e13202c26d143dce0a7ab0508347766_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0e13202c26d143dce0a7ab0508347766_b.jpg\"/></figure><hr/><h2><b>练习时间到 </b></h2><p>在这一篇我们了解了FlexBox的属性，和基本使用方法。我建议大家可以结合 阮一峰老师的 <a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2015/07/flex-examples.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flex 布局教程：实例篇</a> 去在CodePen中进行练习FlexBox的实际用法。</p><p>如果遇到问题可以参考<a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/LandonSchropp/pen/KpzzGo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">练习Demo</a>。</p><hr/><p>好啦，今天的分享就告一段落啦。下一篇中，我会介绍Grid布局，再之后会介绍常用的网页布局方案。</p><p>传送门：<a href=\"https://zhuanlan.zhihu.com/p/32957425\" class=\"internal\">前端系列教学(入门篇) - Grid网格介绍</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }
            ], 
            "comments": [
                {
                    "userName": "谦信", 
                    "userLink": "https://www.zhihu.com/people/49d4d13fac0f50cba1ae09fce7c7aa33", 
                    "content": "<p>怎么最近还老有人写这样的文章啊，感觉如果不能超过阮一峰那两篇文章所讲的范围，就没必要发表了！！</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>因为写的是系列文，强迫症，不想落一个，所以再写一遍</p>", 
                            "likes": 1, 
                            "replyToAuthor": "谦信"
                        }
                    ]
                }, 
                {
                    "userName": "刘倩倩", 
                    "userLink": "https://www.zhihu.com/people/b47222bfb161392451aed2e1807da335", 
                    "content": "支持作者大大", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32919684", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 18, 
            "title": "CSS初阶（2）", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在阅读此篇之前，建议已读过前一篇 <a href=\"https://zhuanlan.zhihu.com/p/32918324\" class=\"internal\">前端系列教学(入门篇) - CSS初阶（1）</a></p><blockquote>在上一篇，我们学习了CSS的基本语法，以及常用的文本和背景样式属性。在这一篇里面，我们要继续了解CSS的盒模型，布局模型，和一些实用CSS小技巧。</blockquote><hr/><h2><b>元素分类</b></h2><p>在讲解盒模型之前，我们要先了解一在CSS中HTML元素的分类。</p><p>在CSS中，html中的标签元素大体被分为三种不同的类型：</p><ul><li>块状元素</li><li>内联元素(又叫行内元素)</li><li>内联块状元素</li></ul><h2>块状元素</h2><p>块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。</p><p>块级元素 特点：</p><p>1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（一个块级元素独占一行）</p><p>2、元素的高度、宽度、行高以及顶和底边距都<b>可设置</b>。</p><p>3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</p><p>常用的块状元素有：</p><p><code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;...&lt;h6&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;address&gt;</code>、<code>&lt;blockquote&gt;</code> 、<code>&lt;form&gt;</code></p><h2>内联元素(行内元素)</h2><p>行内元素只占据它对应标签的边框所包含的空间。</p><p>内联元素 特点：</p><p>1、和其他元素都在一行上。</p><p>2、元素的<b>高度、宽度</b>及顶部和底部<b>边距</b>不可设置。（左右边距可设置）</p><p>3、元素的宽度就是它包含的文字或图片的<b>宽</b>度，不可改变。(里面东西多大，元素就多大)</p><p>常用的内联元素有：</p><p><code>&lt;a&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;br&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;label&gt;</code>、<code>&lt;q&gt;</code>、<code>&lt;var&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;code&gt;</code></p><h2>内联块状元素</h2><p>内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点.</p><p>内联块状元素 特点：</p><p>1、和其他元素都在一行上。</p><p>2、元素的高度、宽度、行高以及顶和底边距都可设置。(与内联元素不同，它的大小可设置)</p><p>常用的内联块状元素有：</p><p><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code></p><h2>代码示例</h2><div class=\"highlight\"><pre><code class=\"language-text\">&lt;p&gt;我是块级元素&lt;/p&gt;\n&lt;p&gt;我是块级元素&lt;/p&gt;\n&lt;p&gt;我是块级元素&lt;/p&gt;\n&lt;span&gt;我是行内元素 &lt;/span&gt; &lt;span&gt;我是行内元素 &lt;/span&gt; &lt;span&gt;我是行内元素 &lt;/span&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-834504861e10af93be2ab4b720f4a4a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic1.zhimg.com/v2-834504861e10af93be2ab4b720f4a4a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic1.zhimg.com/v2-834504861e10af93be2ab4b720f4a4a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-834504861e10af93be2ab4b720f4a4a8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>从上面例子我们可以看到，每一个<code>&lt;p&gt;</code>元素都是独占一行，而<code>&lt;span&gt;</code>元素则是在一行上面。</p><h2>类型转换</h2><p>在CSS文档中我们可以通过设置元素的 <code>display</code>属性 来转换HTML元素的类型。</p><ul><li><code>display:block;</code> : 属性值为<code>block</code>时，元素为<b>块级元素</b></li><li><code>display:inline;</code> : 属性值为<code>inline</code>时，元素为<b>行内元素</b></li><li><code>display:inline-block;</code> : 属性值为<code>inline-block</code>时，元素为<b>行内块级元素</b></li></ul><div class=\"highlight\"><pre><code class=\"language-text\">&lt;p&gt;我变成了行内元素 &lt;/p&gt;\n&lt;p&gt;我变成了行内元素 &lt;/p&gt;\n&lt;p&gt;我变成了行内元素 &lt;/p&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span>\n    <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">inline</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-63c29d93e26e3f48ae0fdaf37466d452_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"92\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic3.zhimg.com/v2-63c29d93e26e3f48ae0fdaf37466d452_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;830&#39; height=&#39;92&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"92\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"830\" data-original=\"https://pic3.zhimg.com/v2-63c29d93e26e3f48ae0fdaf37466d452_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-63c29d93e26e3f48ae0fdaf37466d452_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过把 <code>&lt;p&gt;</code>元素 设置为行内元素，让段落全都在一行显示。</p><hr/><h2><b>盒模型</b></h2><p>在学习布局之前，我们要先了解什么是盒模型。</p><p>在HTML中，所有的元素可以看作盒子，当我们使用CSS进行布局的时候，实际上就是在操作各个HTML元素的盒模型。</p><p>就像大盒子套小盒子，一个盒模型由 Content（内容），Padding（内边距），Border（边框）和 Margin（外边距）一层套一层的组成。</p><p>下面就是一个盒子模型图示：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2537725d5fa341801f2da60e27320455_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"536\" data-original=\"https://pic2.zhimg.com/v2-2537725d5fa341801f2da60e27320455_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;536&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"536\" data-original=\"https://pic2.zhimg.com/v2-2537725d5fa341801f2da60e27320455_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2537725d5fa341801f2da60e27320455_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>Content（内容） : 内容框是 内容 (文本，图像) 显示的区域。</li><ul><li><code>width</code>属性 和 <code>height</code>属性 设置内容框（content box）的<b>宽度</b>和<b>高度</b>。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>Padding（内边距） : 这一层位于 内容框的外边缘 与 边界的内边缘 之间。</li><ul><li>可由 <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code> 和 <code>padding-left</code> 属性一次设置一个边。</li><li>也通过简写属性 <code>padding</code> 一次设置所有四个边。（上下左右）<code>padding: 10px 30px 50px 20px</code> （中间用空格隔开）</li><li><code>padding</code>区域指一个元素的内容和其边界之间的空间，该属性<b>不能为负值</b>。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>Border（边框） : 边界是一个分隔层，位于 内边距的外边缘 以及 外边距的内边缘 之间。</li><ul><li>边框的<b>默认大小为0</b>，默认为看不见。不过我们可以设置边界的<b>厚度、风格和颜色</b>让它出现。</li><li><code>border</code> 简写属性可以让我们一次设置所有四个边，例如  <code>border: 1px solid black</code>;</li><li><code>border-top</code>, <code>border-right</code>, <code>border-bottom</code>, <code>border-left</code>: 分别设置某一边的边界厚度／风格／颜色。</li><li><code>border-width</code>, <code>border-style</code>, <code>border-color</code>: 分别仅设置边界的厚度／风格／颜色，并应用到全部四边边界。</li><li><code>border-style</code>常用属性值：dashed（虚线）| dotted（点线）| solid（实线）</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>Margin（外边距） : 代表 CSS 边框周围的外部区域。</li><ul><li>写法与 <code>padding</code> 相似；简写属性为 <code>margin</code>，单个属性分别为 <code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code> 和 <code>margin-left</code>。</li><li>外边距<b>允许为负数</b> （之后的教程会讲解）</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>简写方法</h2><p>在为<code>padding</code> 和 <code>margin</code>四个边赋值的时候，为了方便有多种简写方法:</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"c\">/* 应用于四个边 */</span>\n<span class=\"nt\">padding</span><span class=\"o\">:</span> <span class=\"nt\">1px</span><span class=\"o\">;</span>                  <span class=\"c\">/* 上下左右padding都是1px */</span>\n\n<span class=\"c\">/* 垂直方向| 水平方向*/</span>        <span class=\"c\">/* 上下为5px，左右为10px */</span>\n<span class=\"nt\">padding</span><span class=\"o\">:</span> <span class=\"nt\">5px</span> <span class=\"nt\">10px</span><span class=\"o\">;</span>\n\n<span class=\"c\">/* 顶部| 水平方向| 底部*/</span>      <span class=\"c\">/* 上为1px，左右为2px，下为2px */</span>\n<span class=\"nt\">padding</span><span class=\"o\">:</span> <span class=\"nt\">1px</span> <span class=\"nt\">2px</span> <span class=\"nt\">2px</span><span class=\"o\">;</span> \n\n<span class=\"c\">/* 顶部| 右边| 底部| 左边*/</span>    <span class=\"c\">/* 上为2px，右为2px，底为0px，左为1px */</span> <span class=\"c\">/* 大小为 0 时，不用写单位 */</span>\n<span class=\"nt\">padding</span><span class=\"o\">:</span> <span class=\"nt\">2px</span> <span class=\"nt\">1px</span> <span class=\"nt\">0</span> <span class=\"nt\">1px</span><span class=\"o\">;</span> </code></pre></div><p>上面规则同样适用于<code>margin</code>属性。</p><hr/><h2><b>布局模型</b></h2><p>布局模型与盒模型一样都是 CSS 最基本，最核心的概念。我们之后所要学的<b>布局模板</b>全都是建立在<b>布局模型</b>上面的。</p><p>在网页中，元素有三种布局模型：</p><ol><li>流动模型（Flow）</li><li>浮动模型 (Float)</li><li>层模型（Layer）</li></ol><h2>流动模型（Flow）</h2><p>流动（Flow）是默认的网页布局模式。水往低处走，顾名思义，</p><p><b>流动布局模型</b> 特点：</p><ul><li><b>块状元素</b>都会在 所处的包含元素 内<b>自上而下</b>按顺序<b>垂直延伸分布</b>。</li><li><b>内联元素</b>都会在 所处的包含元素 内 <b>从左到右</b> <b>水平分布</b>显示。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6d540bfa33015cfb61f7124bc85d23a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"441\" data-original=\"https://pic3.zhimg.com/v2-6d540bfa33015cfb61f7124bc85d23a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;441&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"441\" data-original=\"https://pic3.zhimg.com/v2-6d540bfa33015cfb61f7124bc85d23a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6d540bfa33015cfb61f7124bc85d23a2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上图就很好的展示了<b>流动布局</b>的元素排列。（为了直观，我为元素加上了<code>padding</code>, <code>margin</code>, <code>border</code>，为了练习大家也可以自己写写试试哦。）</p><h2>浮动模型（Float）</h2><p>在流动模型里，块状元素独占一行。那如果我们想让两个块状元素并排显示，改怎么办呢。</p><p>我们可以为块级元素设置浮动，任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动。</p><p>代码如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;redDiv&#34;&gt;红方块&lt;/div&gt;\n&lt;div id=&#34;greenDiv&#34;&gt;绿方块&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">div</span> <span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">height</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">black</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n    <span class=\"k\">float</span><span class=\"p\">:</span><span class=\"kc\">left</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">redDiv</span> <span class=\"p\">{</span><span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;}</span>\n<span class=\"p\">#</span><span class=\"nn\">greenDiv</span> <span class=\"p\">{</span><span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">green</span><span class=\"p\">;}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-90de05ade3bf6287ecfea051d6564c2a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"200\" class=\"content_image\" width=\"390\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;390&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"390\" data-actualsrc=\"https://pic3.zhimg.com/v2-90de05ade3bf6287ecfea051d6564c2a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>大家可以理解为两个方块顺着瀑布，冲到了湖里，两个方块都浮在同一层水面。之后水向左边流，方块也就自然而然的向左边靠拢了。</p><p>同样<code>float</code>也可以设置为<code>right</code>，向右浮动。 <code>float: right;</code></p><p>不过要注意，向右浮动的时候还是<b>红方块</b>靠<b>最右边</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6c76db541c02059af2c71939bea340e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"200\" class=\"content_image\" width=\"392\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;392&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"392\" data-actualsrc=\"https://pic3.zhimg.com/v2-6c76db541c02059af2c71939bea340e2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>你只要记住，<b>流动模型</b>里，块级元素<b>从上到下</b>排列。<b>左浮动</b>时是<b>从左到右</b>。<b>右浮动</b>是<b>从右到左</b>。</p><p>当然，一个设置为向左边浮动，一个向右边浮动也是可以的。</p><div class=\"highlight\"><pre><code class=\"language-text\">div{\n    width:200px;\n    height:200px;\n    border:2px black solid;\n} </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">#</span><span class=\"nn\">redDiv</span><span class=\"p\">{</span><span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span> <span class=\"k\">float</span><span class=\"p\">:</span><span class=\"kc\">left</span><span class=\"p\">;}</span>\n<span class=\"p\">#</span><span class=\"nn\">greenDiv</span><span class=\"p\">{</span><span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">green</span><span class=\"p\">;</span> <span class=\"k\">float</span><span class=\"p\">:</span><span class=\"kc\">right</span><span class=\"p\">;}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9d7dc556a2faeec4a5f471e01811fa88_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"519\" data-original=\"https://pic1.zhimg.com/v2-9d7dc556a2faeec4a5f471e01811fa88_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;519&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"519\" data-original=\"https://pic1.zhimg.com/v2-9d7dc556a2faeec4a5f471e01811fa88_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9d7dc556a2faeec4a5f471e01811fa88_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>注意</b>：元素设置为浮动后，会自动转换成<b>行内块状元素</b> <code>display:inline-block</code></p><h2>清除浮动</h2><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;container&#34;&gt;\n  &lt;div id=&#34;bigDiv&#34;&gt;&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">#</span><span class=\"nn\">container</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">red</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">bigDiv</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">green</span><span class=\"p\">;</span>\n  <span class=\"k\">float</span><span class=\"p\">:</span> <span class=\"kc\">right</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-09fc8d841b12fa46931a16dd56cc352c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"202\" data-rawheight=\"200\" class=\"content_image\" width=\"202\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;202&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"202\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"202\" data-actualsrc=\"https://pic1.zhimg.com/v2-09fc8d841b12fa46931a16dd56cc352c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在这种情况下，“绿色<code>div</code>” 高度比它的包含元素还大，以至于它已经溢出去了。那这样改怎么办呢？</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;container&#34; class=&#34;.clearfix&#34;&gt;\n  &lt;div id=&#34;bigDiv&#34;&gt;&lt;/div&gt;\n&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">clearfix</span> <span class=\"p\">{</span>\n  <span class=\"k\">overflow</span><span class=\"p\">:</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e5f81d6f25f26a578d13910b80908040_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"200\" class=\"content_image\" width=\"379\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;379&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"379\" data-actualsrc=\"https://pic1.zhimg.com/v2-e5f81d6f25f26a578d13910b80908040_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在<b>包含元素</b>上加上<code>overflow: auto;</code>, 这样溢出来的部分就会被收回去啦。</p><p>但是为了兼顾到各种浏览器的兼容性。消除浮动的方法有很多种。在这里我们先介绍上面这一种，在以后的教程中，我们会深挖的。</p><h2>层模型（Layer）</h2><p>层模型就是让元素可以像<b>图层</b>一样<b>精准定位</b>在页面中。</p><p>层模型有四种形式：</p><ol><li>绝对定位(<code>position: absolute</code>)</li><li>相对定位(<code>position: relative</code>)</li><li>固定定位(<code>position: fixed</code>)</li><li>默认值(<code>position: static</code>)</li></ol><h2>绝对定位</h2><p><b>绝对定位</b>将元素从<b>流动模型</b>中拖出来，然后使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性相对于其<b>最接近</b>的一个<b>具有定位属性的父包含块</b>进行<b>绝对定位</b>。如果不存在这样的包含块，则相对于<code>body</code>元素，即相对于<b>浏览器窗口</b>。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;div1&#34;&gt;&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">#</span><span class=\"nn\">div1</span> <span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">height</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">red</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n    <span class=\"k\">position</span><span class=\"p\">:</span><span class=\"kc\">absolute</span><span class=\"p\">;</span>\n    <span class=\"k\">left</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">top</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8762f71a1512ccb8048513f1d3545012_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"445\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"445\" data-original=\"https://pic3.zhimg.com/v2-8762f71a1512ccb8048513f1d3545012_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;445&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"445\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"445\" data-original=\"https://pic3.zhimg.com/v2-8762f71a1512ccb8048513f1d3545012_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8762f71a1512ccb8048513f1d3545012_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面代码可以实现<code>div</code>元素相对于浏览器窗口向右移动50px，向下移动30px。( 因为是相对而言，所以移动方向和CSS代码是相反的。)</p><p><b>注意</b>：元素设置为绝对定位后，会自动转换成<b>行内块状元素</b> <code>display:inline-block</code></p><h2>相对定位</h2><p>通过<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性确定元素在<b>正常流动模型</b>中的偏移位置。相对定位元素相对于<b>以前的位置</b>移动，其他元素仍旧<b>保持移动前的位置</b>。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;div1&#34;&gt;盒子1&lt;/div&gt;\n&lt;div id=&#34;div2&#34;&gt;盒子2&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">red</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-783598c1032f9f0313fad4696ad2c140_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"266\" data-rawheight=\"200\" class=\"content_image\" width=\"266\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;266&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"266\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"266\" data-actualsrc=\"https://pic1.zhimg.com/v2-783598c1032f9f0313fad4696ad2c140_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>没定位之前，“盒子1” 与 “盒子2” 按照流动模型从上到下排列。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">#</span><span class=\"nn\">div1</span> <span class=\"p\">{</span>\n    <span class=\"k\">position</span><span class=\"p\">:</span><span class=\"kc\">relative</span><span class=\"p\">;</span>\n    <span class=\"k\">left</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">top</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f21b782621cef04f6d6259d682067f1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"200\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic3.zhimg.com/v2-f21b782621cef04f6d6259d682067f1e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>“盒子1” 相对原来向下移动10px, 向右移动60px。但是“盒子2” 依旧保持原来的位置没有变。</p><p>在绝对定位中，“盒子2” 会跑上去的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8326e836e044093beb78bbba6e25e974_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"166\" class=\"content_image\" width=\"328\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;328&#39; height=&#39;166&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"166\" class=\"content_image lazy\" width=\"328\" data-actualsrc=\"https://pic1.zhimg.com/v2-8326e836e044093beb78bbba6e25e974_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这是当，<code>position: absolute</code> 时，“盒子2” 的表现。</p><h2>固定定位</h2><p>它的相对移动的坐标是视图（屏幕内的网页窗口）本身。（也就是浏览者看的到的屏幕部分）</p><p>固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，不会随浏览器窗口的滚动条滚动而变化，这与<code>background-attachment:fixed</code>属性功能相同。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">#</span><span class=\"nn\">redDiv</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">position</span><span class=\"p\">:</span><span class=\"kc\">fixed</span><span class=\"p\">;</span>\n  <span class=\"k\">left</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">top</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>  \n<span class=\"p\">}</span> </code></pre></div><p>红色方块相对于浏览器视图向右移动20px，向下移动20px。并且拖动滚动条时位置固定不变。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-398bd67db2f63e734e784fd66cabcee1_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"447\" data-rawheight=\"200\" data-thumbnail=\"https://pic2.zhimg.com/v2-398bd67db2f63e734e784fd66cabcee1_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"447\" data-original=\"https://pic2.zhimg.com/v2-398bd67db2f63e734e784fd66cabcee1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;447&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"447\" data-rawheight=\"200\" data-thumbnail=\"https://pic2.zhimg.com/v2-398bd67db2f63e734e784fd66cabcee1_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"447\" data-original=\"https://pic2.zhimg.com/v2-398bd67db2f63e734e784fd66cabcee1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-398bd67db2f63e734e784fd66cabcee1_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>默认值：static</h2><p><code>position</code>属性默认值为<code>static</code>。任意 <code>position: static;</code> 的元素不会被特殊的定位。</p><hr/><h2><b>CSS实用技巧</b></h2><h2>水平居中(行内元素)</h2><p>水平居中是通过给父元素设置 <code>text-align:center</code> 来实现</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div&gt;\n  &lt;span&gt;我要水平居中&lt;/span&gt;\n&lt;/div&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f4608cfac5acad4c71819bc7b2f91d1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"934\" data-original=\"https://pic1.zhimg.com/v2-f4608cfac5acad4c71819bc7b2f91d1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;934&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"934\" data-original=\"https://pic1.zhimg.com/v2-f4608cfac5acad4c71819bc7b2f91d1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f4608cfac5acad4c71819bc7b2f91d1c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>水平居中(定宽块状元素)</h2><p>定宽的意思就是宽度<code>width</code>为一个确定的数值。</p><p>这个时候可以通过设置 “<b>左右margin</b>” 值为 “<b>auto</b>” 来实现居中的</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;body&gt;\n  &lt;div&gt;我要水平居中&lt;/div&gt;\n&lt;/body&gt;\ndiv {\n  border:1px solid red;\n  width:50px;\n  margin:0px auto; /* margin的上下值可以为任意 */\n}</code></pre></div><h2>水平居中(不定宽块状元素)</h2><p>不定宽也就是宽度没有一个固定的数值。</p><p>我们可以将块级元素的 <code>display</code>属性设置为 <code>inline</code> (行内元素)，然后使用 <code>text-align: center</code> 来实现居中效果。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3fed2cd6b5a084f5795e6ec3b5bfa0da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"841\" data-original=\"https://pic3.zhimg.com/v2-3fed2cd6b5a084f5795e6ec3b5bfa0da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;841&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"841\" data-original=\"https://pic3.zhimg.com/v2-3fed2cd6b5a084f5795e6ec3b5bfa0da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3fed2cd6b5a084f5795e6ec3b5bfa0da_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>垂直居中(父元素高度确定的单行文本)</h2><p>这种情况下通过设置父元素的 <code>height</code> 和 <code>line-height</code> 高度一致来实现的。</p><p>也就是说，单行文本和父元素一样高，那在视觉上当然就是垂直居中了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7e0cb8dabfadf3f0c163e9afd0c3a64d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"303\" data-rawheight=\"200\" class=\"content_image\" width=\"303\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;303&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"303\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"303\" data-actualsrc=\"https://pic2.zhimg.com/v2-7e0cb8dabfadf3f0c163e9afd0c3a64d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>对于<code>line-height</code>还不太明白的同学，可以参考这张图。</p><p><code>line-height</code> 与 <code>font-size</code> 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div&gt;我要垂直居中&lt;/div&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">div</span> <span class=\"p\">{</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n    <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">line-height</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-08042825fc3e76821309bbd556913562_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"421\" data-original=\"https://pic3.zhimg.com/v2-08042825fc3e76821309bbd556913562_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;421&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"421\" data-original=\"https://pic3.zhimg.com/v2-08042825fc3e76821309bbd556913562_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-08042825fc3e76821309bbd556913562_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>垂直居中(父元素高度确定的多行文本)</h2><p>在这里我不准备介绍过时的居中方法了。</p><p>在现在，我们可以用<code>flexbox</code>属性，很方便简单的实现居中。我会在后面讲弹性布局的时候介绍。</p><p>大家如果想知道更多居中方法可以参考<a href=\"https://link.zhihu.com/?target=https%3A//www.w3cplus.com/css/centering-css-complete-guide.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这篇文章</a>，<a href=\"https://link.zhihu.com/?target=https%3A//css-tricks.com/centering-css-complete-guide/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">英文原文链接</a></p><h2>去除<code>&lt;a&gt;</code>元素下划线</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d779b1a83f4d0cc34198b13898f5dcef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"250\" data-rawheight=\"64\" class=\"content_image\" width=\"250\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;250&#39; height=&#39;64&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"250\" data-rawheight=\"64\" class=\"content_image lazy\" width=\"250\" data-actualsrc=\"https://pic4.zhimg.com/v2-d779b1a83f4d0cc34198b13898f5dcef_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在不设置任何样式的情况下，<code>&lt;a&gt;</code>元素是有一条下划线的。</p><p>很多初学的小伙伴，并不知道怎么去除，其实我们在上一章就讲到相关知识点了。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"k\">text-decoration</span><span class=\"p\">:</span> <span class=\"kc\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>把<code>text-decoration</code> 设置为 <code>none</code>。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f11f1c8f412039a3ca36f6f415371a7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"252\" data-rawheight=\"92\" class=\"content_image\" width=\"252\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;252&#39; height=&#39;92&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"252\" data-rawheight=\"92\" class=\"content_image lazy\" width=\"252\" data-actualsrc=\"https://pic2.zhimg.com/v2-f11f1c8f412039a3ca36f6f415371a7d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>去除<code>&lt;li&gt;</code>前面的点。</h2><p>很多新手在使用列表的时候，总是苦恼不知道怎么去除前面的那个小点点。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4f6495f9eda10a03bf0fb8b05d7e8cbe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"166\" class=\"content_image\" width=\"292\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;292&#39; height=&#39;166&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"166\" class=\"content_image lazy\" width=\"292\" data-actualsrc=\"https://pic3.zhimg.com/v2-4f6495f9eda10a03bf0fb8b05d7e8cbe_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在CSS中，无论是无序列表还是有序列表，那个小点点都是靠 <code>&lt;li&gt;</code>元素 的 <code>list-style-type</code>属性 定义的。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">li</span> <span class=\"p\">{</span>\n  <span class=\"k\">list-style-type</span><span class=\"p\">:</span> <span class=\"kc\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">ul</span> <span class=\"p\">{</span>\n  <span class=\"k\">padding-left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p>我们只要把<code>&lt;li&gt;</code>元素的<code>list-style-type</code>属性设置为<code>none</code>。 之后把列表<code>ul</code>元素的<code>padding-left</code>设置为 <code>0</code> 就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4114c2af617b13be06b00be1242897b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"286\" data-rawheight=\"168\" class=\"content_image\" width=\"286\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;286&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"286\" data-rawheight=\"168\" class=\"content_image lazy\" width=\"286\" data-actualsrc=\"https://pic4.zhimg.com/v2-4114c2af617b13be06b00be1242897b3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b>练习时间到</b></h2><blockquote>在这一章里面，我们学习了元素类型，盒模型，也了解了布局模型。下面我们就要根据刚刚学到的CSS知识，去改写在 <a href=\"https://zhuanlan.zhihu.com/p/32877717\" class=\"internal\">HTML初阶</a> 这一章结尾所写的纯HTML页面。</blockquote><p>在这一次的练习中，大家可以试着去挑选一个自己喜欢的<b>编辑器</b>。我会在下面附上目前热门的编辑器相关链接。</p><p>大家可以参考 <a href=\"https://link.zhihu.com/?target=https%3A//htmlpreview.github.io/%3Fhttps%3A//github.com/Garrik-Liu/MyTutorials/blob/master/Beginner-Practices/Practice-02/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">预览页面</a> 来改写之前的页面。</p><p>源代码保存在我的Github - <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Garrik-Liu/MyTutorials/blob/master/Beginner-Practices/Practice-02/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">练习2源代码</a>。如果遇到问题，可以用我的代码作为参考。</p><hr/><h2><b>前端编辑器推荐</b></h2><p>因为每个人的使用习惯都有不同，我在这里也不着重推荐那个了。但是对于新手来说可能还是Sublime最容易上手吧。</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//www.sublimetext.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Sublime官网</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//atom.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Atom官网</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//code.visualstudio.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">VS Code官网</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.jetbrains.com/webstorm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WebStorm官网</a></li><li>等。。。。。。。。。。</li></ul><hr/><p>好啦，今天的分享就告一段落啦。下一篇中，我会介绍FlexBox布局。</p><p>传送门：<a href=\"https://zhuanlan.zhihu.com/p/32946068\" class=\"internal\">前端系列教学(入门篇) - FlexBox(&#34;弹性盒子&#34;)介绍</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p><p>如果有宝贵意见，也请大家多多留言！</p>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "1225", 
                    "userLink": "https://www.zhihu.com/people/c2952bc09abf30071f2e5b7309c01c77", 
                    "content": "楼主怎么不更新了啊", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>最近反过头来看原来写的内容，发现还是很差强人意的。这几天也在抽时间去做修改</p>", 
                            "likes": 1, 
                            "replyToAuthor": "1225"
                        }, 
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>因为最近几个月确实很忙，但同时也整理新内容，希望能写出更优质的文章。这个月开始终于闲下来了，会尽快开始更新，同时也可能会出视频内容。感谢支持</p>", 
                            "likes": 2, 
                            "replyToAuthor": "1225"
                        }
                    ]
                }, 
                {
                    "userName": "奔跑吧麦迪", 
                    "userLink": "https://www.zhihu.com/people/b524f0436ac78eab019bdf84ec7c8b7e", 
                    "content": "<p>楼主，你写的文章真的通俗易懂，都讲到点上去了，比很多视频讲的好多了，希望楼主经常更新文章，让大家都一起进步，楼主新年快乐</p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-ba306425d0a7aee2c7260381f1bf7b97.gif\" data-width=\"\" data-height=\"\">[欢呼]</a>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "谢谢支持 年后更新", 
                            "likes": 0, 
                            "replyToAuthor": "奔跑吧麦迪"
                        }
                    ]
                }, 
                {
                    "userName": "奔跑吧麦迪", 
                    "userLink": "https://www.zhihu.com/people/b524f0436ac78eab019bdf84ec7c8b7e", 
                    "content": "<p>真心希望楼主写一篇关于javascript的文章</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "文盲邵", 
                    "userLink": "https://www.zhihu.com/people/b924f6cfb4e3e0a100d455caf96c3512", 
                    "content": "<p>padding 四个写一起是上右下左 顺时针</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32918324", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 35, 
            "title": "CSS初阶（1）", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><p>在阅读此篇之前，建议已读过前一篇 <a href=\"https://zhuanlan.zhihu.com/p/32877717\" class=\"internal\">前端系列教学(入门篇) - HTML初阶</a></p><h2><b>CSS - “我是一个粉刷匠”</b></h2><blockquote>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。- 百度百科</blockquote><p>如果把前端开发比作盖房子，HTML是盖墙码砖打地基，那CSS就是刷墙吊顶铺地板了。</p><p>Web浏览器将CSS规则应用于文档以影响它们的显示方式。</p><h2><b>CSS实例</b></h2><p>CSS规则由两个主要的部分构成：选择器，以及一条或多条声明:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-265ba0133f9eb8cdf24d2eecd5d9ba1a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"1204\" data-original=\"https://pic3.zhimg.com/v2-265ba0133f9eb8cdf24d2eecd5d9ba1a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1204&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1204\" data-original=\"https://pic3.zhimg.com/v2-265ba0133f9eb8cdf24d2eecd5d9ba1a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-265ba0133f9eb8cdf24d2eecd5d9ba1a_b.jpg\"/></figure><ul><li>选择器：选择你想要把这些声明应用到哪个<b>元素</b>上面。</li><li>声明：有一个<b>属性</b>和一个<b>值</b>组成，中间用冒号(:)分开</li><li>CSS声明总是以分号(;)结束。</li><li>声明组以大括号({})括起来。</li><li>属性值与单位之间不要留空格。(例如：1px是对的，1 px不可以)</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">h1</span> <span class=\"p\">{</span>                          <span class=\"c\">/* 应用于&lt;h1&gt;元素 */</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">blue</span><span class=\"p\">;</span>                <span class=\"c\">/* 字体颜色设置为蓝色 */</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>   <span class=\"c\">/* 背景色设置为黄色 */</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">black</span><span class=\"p\">;</span>    <span class=\"c\">/* 设置边框为1像素，黑色，实体线条 */</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">p</span> <span class=\"p\">{</span>                           <span class=\"c\">/* 应用于&lt;p&gt;元素 */</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>                 <span class=\"c\">/* 字体颜色设置为红色 */</span>\n<span class=\"p\">}</span></code></pre></div><p>在Web浏览器中，上面的代码将产生以下输出：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b613d7e57e07df6bc60aa22a58a913be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-b613d7e57e07df6bc60aa22a58a913be_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;394&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-b613d7e57e07df6bc60aa22a58a913be_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b613d7e57e07df6bc60aa22a58a913be_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>CSS注释代码</b></h2><p>/* 注释语句 */</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span> <span class=\"c\">/* 把字体颜色设置为红色 */</span>   \n<span class=\"p\">}</span></code></pre></div><h2><b>什么是选择器？</b></h2><p>在前面部分我们已经知道CSS规则由 选择器 和 样式声明 组成。</p><div class=\"highlight\"><pre><code class=\"language-text\">选择器 {\n    样式;\n} </code></pre></div><p>“选择器” 指明了{}中的 “样式” 的作用对象，也就是 <b>“样式” 作用于网页中的哪些元素</b>。</p><h2>元素选择器</h2><p>在 CSS 文档中，元素选择器直接以标签名开头来定义。用来为以此类标签命名的元素修改样式。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span><span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">blue</span><span class=\"p\">;}</span> <span class=\"o\">&lt;!</span><span class=\"nt\">--</span> <span class=\"nt\">所有p元素的字体颜色设置为蓝色</span><span class=\"err\">。</span><span class=\"nt\">--</span><span class=\"o\">&gt;</span> </code></pre></div><h2>id 选择器</h2><p>id 选择器 可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>在HTML文档里，我们可以给HTML元素设置<code>id</code>属性。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"o\">&lt;</span><span class=\"nt\">p</span> <span class=\"nt\">id</span><span class=\"o\">=</span><span class=\"s2\">&#34;para&#34;</span><span class=\"o\">&gt;</span><span class=\"nt\">Hello</span> <span class=\"nt\">World</span><span class=\"o\">!&lt;/</span><span class=\"nt\">p</span><span class=\"o\">&gt;</span></code></pre></div><p>在CSS中，我们可以根据id属性来设置id选择器。</p><p>id 选择器以 &#34;#&#34; 开头来定义。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">#</span><span class=\"nn\">para</span> <span class=\"p\">{</span>              <span class=\"c\">/* 将下面的样式应用到以“para”为“id”的HTML元素上 */</span>\n  <span class=\"k\">text-align</span><span class=\"p\">:</span><span class=\"kc\">center</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><ul><li>ID属性<b>不要以数字开头</b>。</li><li>ID属性只能在每个 HTML 文档中<b>只能出现一次</b>。</li><li>每个元素只能有<b>一个</b>ID属性。<code>&lt;p id=&#34;para1&#34;, id=&#34;para2&#34;&gt;这是一个段落&lt;/p&gt; &lt;!-- 这是错误的 -- &gt;</code></li></ul><h2>class 选择器</h2><p>class 选择器用于描述一组元素的样式，class选择器有别于id选择器，<code>class</code>可以在多个元素中使用。</p><p>在HTML文档里，我们可以给HTML元素设置<code>class</code>属性。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;h1 class=&#34;center&#34;&gt;标题居中&lt;/h1&gt;  \n&lt;p class=&#34;center&#34;&gt;段落居中。&lt;/p&gt;  </code></pre></div><p>在 CSS 文档中，class选择器以一个点&#34;.&#34;号开头来定义。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">center</span> <span class=\"p\">{</span> <span class=\"k\">text-align</span><span class=\"p\">:</span><span class=\"kc\">center</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></div><p>一个元素可以同时具有多个class属性。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;p class=&#34;para1&#34;, class=&#34;para2&#34;&gt;这是一个段落&lt;/p&gt; </code></pre></div><h2>通用选择器</h2><p>它的作用是匹配html中<b>所有</b>标签元素。</p><p>使用星号( * )定义所有元素的样式。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"o\">*</span> <span class=\"p\">{</span><span class=\"err\">color：blue</span><span class=\"p\">;}</span> <span class=\"c\">/* 所有元素的字体颜色为蓝色。*/</span> </code></pre></div><h2>子选择器</h2><p>使用大于符号( &gt; )，可以选择指定标签元素的 <b>第一代 子元素</b>。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;ul class=&#34;fruit&#34;&gt;\n  &lt;li&gt;Apple&lt;/li&gt;\n  &lt;li&gt;Orange&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">fruit</span> <span class=\"o\">&gt;</span> <span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>  <span class=\"c\">/* class属性为&#34;fruit&#34;的子元素&#34;li&#34;的文字颜色设置为红色 */</span>\n<span class=\"p\">}</span></code></pre></div><p>上面这行代码会吧class属性为&#34;fruit&#34;的子元素&#34;li&#34;的文字颜色设置为红色。</p><h2>包含(后代)选择器</h2><p>包含选择器，即加入空格,用于选择指定标签元素下的<b>后辈元素</b>。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;body&gt;\n  &lt;span&gt;这里有一些字&lt;/span&gt;\n  &lt;p&gt; &lt;span&gt;一些字&lt;/span&gt; 这是一个段落&lt;/p&gt;\n&lt;/body&gt; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">body</span> <span class=\"nt\">span</span> <span class=\"p\">{</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>上面这行代码可以让<code>body</code>元素里面包含的所有<code>span</code>元素的字体颜色设置为红色。</p><p>与子选择器不同，子选择器仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于<b>所有子后代元素</b>。</p><h2>分组选择符</h2><p>分组选择符（ , ）可以让多个标签元素设置为同一样式。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">h1</span><span class=\"o\">,</span> <span class=\"nt\">p</span><span class=\"o\">,</span> <span class=\"nt\">span</span> <span class=\"p\">{</span>\n    <span class=\"err\">color</span> <span class=\"err\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><p>上面这行代码可以把<code>h1</code>元素，<code>p</code>元素，<code>span</code>元素的字体颜色都统一设置为红色。</p><h2><b>如何插入CSS样式表</b></h2><p>插入样式表的方法有三种:</p><ul><li>外部样式表</li><li>内部样式表</li><li>内联样式</li></ul><h2>外部样式表</h2><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。</p><p>每个页面使用 <code>&lt;link&gt;</code>标签链接到样式表。标签放在HTML文档的<code>&lt;head&gt;</code>标签之中。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;head&gt; \n    &lt;link rel=&#34;stylesheet&#34; href=&#34;mystyle.css&#34;&gt;\n&lt;/head&gt; </code></pre></div><p>在这个例子中，浏览器会从文件mystyle.css中读到样式声明，并根据它来格式文档。</p><p>在定义<code>&lt;link&gt;</code>元素时，如果要链接CSS文档，需要定义<code>rel</code>属性为<code>stylesheet</code>。<code>href</code>属性定义被连接文档位置。</p><p>外部样式表可以在任何文本编辑器中进行编辑。但注意CSS文档 需要保存在一个独立的扩展名为&#34; .css &#34;的文件中</p><h2>内部样式表</h2><p>使用内部样式表。你可以使用<code>&lt;style&gt;</code>标签在文档头部定义内部样式表，就像这样:</p><div class=\"highlight\"><pre><code class=\"language-abap\">&lt;head&gt;\n  &lt;style&gt;\n    hr {color:sienna;}\n    p {margin-left:20px;}\n    body {background-image:url(&#34;images/back40.gif&#34;);}\n  &lt;/style&gt;\n&lt;/head&gt; </code></pre></div><h2>内联样式</h2><p>使用内联样式，你需要在相关的标签内使用样式（style）属性。内联样式一次只能应用到一个元素上。样式声明为<code>style</code>属性的属性值。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"o\">&lt;</span><span class=\"nt\">p</span> <span class=\"nt\">style</span><span class=\"o\">=</span><span class=\"s2\">&#34;color:sienna; margin-left:20px&#34;</span><span class=\"o\">&gt;</span><span class=\"nt\">这是一个段落</span><span class=\"err\">。</span><span class=\"o\">&lt;/</span><span class=\"nt\">p</span><span class=\"o\">&gt;</span> </code></pre></div><p>内联样式在正式开发中不被推荐使用。因为如果以后要批量更改样式的话，开发者就需要一个一个的改，费力费时，不容维护。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>继承</h2><p>CSS的<b>某些样式</b>是具有继承性的，那么什么是继承呢？继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代。</p><p>意思就是说，<b>父元素</b>的样式可以传给<b>子元素。</b></p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;p&gt;\n  我是一个段落\n  &lt;span&gt;我是一段文字&lt;/span&gt;\n&lt;/p&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span><span class=\"p\">{</span><span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">red</span><span class=\"p\">;}</span></code></pre></div><p>在上面的例子中，如果不单独设置&lt;span&gt;元素字体颜色的情况下，&lt;span&gt;元素字体颜色继承父元素&lt;p&gt;，也是红色。</p><h2>权值</h2><p>如果我们为同一个元素设置了不同的CSS样式代码，那么元素会启用哪一个CSS样式呢?</p><p>比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;p class=&#34;para&#34;&gt;我是一个段落&lt;/p&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">red</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">para</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">green</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></div><p>在上面这个例子中，&lt;p&gt;元素被两次设置颜色。那么这个时候我们要根据 <b>权值 </b>来判断使用哪种css样式。</p><p>下面是权值的规则：</p><p><b>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。</b></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">red</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c\">/*权值为1*/</span>\n<span class=\"nt\">p</span> <span class=\"nt\">span</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">green</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c\">/*权值为1+1=2*/</span>\n<span class=\"p\">.</span><span class=\"nc\">para</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">blue</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c\">/*权值为10*/</span>\n<span class=\"nt\">p</span> <span class=\"nt\">span</span><span class=\"p\">.</span><span class=\"nc\">para</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">purple</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c\">/*权值为1+1+10=12*/</span>\n<span class=\"p\">#</span><span class=\"nn\">myNote</span> <span class=\"p\">.</span><span class=\"nc\">notePage</span> <span class=\"nt\">p</span> <span class=\"p\">{</span> <span class=\"k\">color</span><span class=\"p\">:</span><span class=\"kc\">yellow</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c\">/*权值为100+10+1=111*/</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>多重样式</h2><p>如果某些属性在不同的样式表中被同样的选择器定义，且权值相同，那么属性值改遵循哪一个呢？</p><p>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p><ol><li>浏览器默认样式</li><li>外部样式表</li><li>内部样式表（位于 head 标签内部）</li><li>内联样式（在 HTML 元素内部）</li></ol><p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，也可以理解为离HTML元素越近的样式，拥有越高的优先权。</p><h2>!important 规则例外</h2><p>当 <code>!important</code>规则被应用在一个样式声明中时，该样式声明会覆盖CSS中任何其他的声明，无论它处在声明列表中的哪里。<code>!important</code>规则还是与优先级毫无关系。但是使用<code>!important</code>不是一个好习惯，因为它改变了你样式表本来的级联规则，从而使其难以调试。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">p</span> <span class=\"p\">{</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span> <span class=\"cp\">!important</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><h2><b>文本样式 (“text”)</b></h2><p>通过CSS的Text属性，你可以改变页面中文本的颜色、字符间距、对齐文本、装饰文本、对文本进行缩进等等。</p><ul><li>font-family (字体)</li><ul><li>我们可以通过CSS为元素内文本设置字体</li><li>在这里需要注意，如果浏览者电脑里有你设置的字体，字体才能正常显示。如果没有就显示浏览器默认字体。</li><li>代码示例：<code>body{ font-family:&#34;微软雅黑&#34;; }</code> <code>body{ font-family:&#34;Microsoft Yahei&#34;; }</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>color （颜色）</li><ul><li>颜色属性被用来设置文字的颜色。</li><li>代码示例：<code>h1 { color: red; } /* h1字体颜色设置为红色 */</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>font-size (字体大小)</li><ul><li>代码示例：<code>p { font-size: 12px; } /* p字体大小设置为12px */</code> （CSS中使用的单位大小，会在后面介绍）</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>font-weight (粗体)</li><ul><li>使用<code>font-weight</code>属性，我们可以把字体加粗。</li><li>代码示例：<code>span { font-weight: bold; } /* 把span内的字体加粗 */</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>font-style (斜体)</li><ul><li>使用<code>font-weight</code>属性，我们可以把字体倾斜。</li><li>代码示例：<code>a { font-style: italic; }</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>text-decoration: underline (下划线)</li><ul><li>把元素的<code>text-decoration</code>属性设置为<code>underline</code>，我们可以给元素内文本加上下划线。</li><li><code>#underSpan { text-decoration: underline; } /* 为class属性为“underSpan”的元素内文本加上一条下划线 */</code></li></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d155d16c56d72dacc96471dd67472670_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"272\" data-rawheight=\"84\" class=\"content_image\" width=\"272\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;272&#39; height=&#39;84&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"272\" data-rawheight=\"84\" class=\"content_image lazy\" width=\"272\" data-actualsrc=\"https://pic1.zhimg.com/v2-d155d16c56d72dacc96471dd67472670_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>text-decoration: line-through (删除线)</li><ul><li>元素的<code>text-decoration</code>属性设置为<code>line-through</code>，我们可以给元素内文本加上删除线。</li><li>代码示例：<code>#deleteSpan { text-decoration: line-through; } /* 为class属性为“deleteSpan”的元素内文本加上一条删除线 */</code></li></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-035295653e5cf4a746db97dcc158ceea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"74\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;74&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"74\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic3.zhimg.com/v2-035295653e5cf4a746db97dcc158ceea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>text-indent (缩进)</li><ul><li>有的时候我们想在段落开始前加两个空格，用<code>text-indent</code>属性可以实现。</li><li>代码示例：<code>p {text-indent: 2em;}</code> ( 2em的意思就是文字的2倍大小。)</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>line-height (行间距 / 行高)</li><ul><li>通过<code>line-height</code>属性，我们可以为段落设置行间距。</li><li>代码示例：<code>p { ine-height: 1em; }</code> 这句代码意思就是说行高为文字大小1倍，也就是相同。那么行与行之间就没有间隙了。</li><li>代码示例：<code>p { line-height: 2em; }</code>这句代码意思就是说行高为文字大小2倍。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>letter-spacing (字间距 / 字母间距)</li><ul><li>通过<code>letter-spacing</code>属性，我们可以为字与字之间设置距离。</li><li>代码示例：<code>p { line-spacing: 10px; }</code> 这句代码意思是，每个字母或者文字之间距离为10px。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>text-align（文本排列）</li><ul><li><code>text-align</code>属性可以为块级元素中的文本、图片设置对齐方法。( 块级元素这个概念会在后面讲 )</li><li>文本可居中或对齐到左或右,两端对齐。( &#34;left&#34;, &#34;right&#34;, &#34;center&#34; )</li><li>代码示例：<code>h1{ text-align: center; }</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>文本简写属性</h2><p>我们可以讲上面这些属性全部简写到<code>font</code>属性里。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">body</span><span class=\"p\">{</span>\n    <span class=\"k\">font-style</span><span class=\"p\">:</span><span class=\"kc\">italic</span><span class=\"p\">;</span>\n    <span class=\"k\">font-weight</span><span class=\"p\">:</span><span class=\"kc\">bold</span><span class=\"p\">;</span> \n    <span class=\"k\">font-size</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"kt\">px</span><span class=\"p\">;</span> \n    <span class=\"k\">line-height</span><span class=\"p\">:</span><span class=\"mf\">1.5</span><span class=\"kt\">em</span><span class=\"p\">;</span> \n    <span class=\"k\">font-family</span><span class=\"p\">:</span><span class=\"s2\">&#34;宋体&#34;</span><span class=\"p\">,</span><span class=\"kc\">sans-serif</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>就可以缩写成：</p><p><code>body{ font:italic bold 12px/1.5em &#34;宋体&#34;,sans-serif; }</code></p><p>可以按顺序设置如下属性：</p><ul><li>font-style</li><li>font-variant</li><li>font-weight</li><li>font-size/line-height</li><li>font-family</li></ul><p>使用这一简写方式你至少要指定 font-size 和 font-family 属性</p><p>其他的属性(如 font-weight、font-style、font-variant、line-height)如未指定将自动使用默认值。</p><p>在缩写时 font-size 与 line-height 中间要加入“/”斜扛。</p><h2>小练习</h2><p>请在<a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CodePen</a>里面设置如下样式。</p><ol><li>开头一个<code>&lt;h1&gt;</code>元素，居中排列。</li><li><code>&lt;p&gt;</code>元素字体为 “微软雅黑”。</li><li><code>&lt;p&gt;</code>元素字体颜色为 “蓝色”。</li><li><code>&lt;p&gt;</code>元素字体大小为 “15px”。</li><li><code>&lt;p&gt;</code>元素段落开头“2em”缩进。</li><li><code>&lt;p&gt;</code>元素行高为“1.5em”。</li><li><code>&lt;p&gt;</code>元素字间距为“2px”。</li><li>其中包含一个<code>&lt;span&gt;</code>元素 设置为“加粗”字体。</li><li>其中包含一个<code>&lt;span&gt;</code>元素 设置为“斜体”字体。</li><li>其中包含一个<code>&lt;span&gt;</code>元素 文字有一条下划线。</li><li>其中包含一个<code>&lt;span&gt;</code>元素 文字有一条删除线。</li></ol><p>这是我的<a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/Garrik/pen/VyxBqw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">示例</a>，可以作为参考。</p><hr/><h2><b>背景样式 (&#34;background&#34;)</b></h2><p>CSS 背景属性用于定义HTML元素的背景。</p><ul><li>background-color : 设置元素的背景颜色。</li><li>background-image : 设置元素的背景图像。</li><li>background-repeat : 设置背景图像是否及如何重复。</li><li>background-position : 设置背景图像的起始位置。</li><li>background-attachment : 背景图像是否固定或者随着页面的其余部分滚动。</li></ul><p>那么下面我们结合实例分别来讲解一下每个属性的用法：</p><h2>background-color</h2><p>background-color 属性定义了元素的背景颜色。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">green</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">p</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#ffff00</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-941c05d61a9011eed8ca110892b10f3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"956\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"956\" data-original=\"https://pic3.zhimg.com/v2-941c05d61a9011eed8ca110892b10f3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;956&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"956\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"956\" data-original=\"https://pic3.zhimg.com/v2-941c05d61a9011eed8ca110892b10f3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-941c05d61a9011eed8ca110892b10f3e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>background-image</h2><p>background-image 属性描述了元素的背景图像。</p><p>默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体。</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">body</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-image</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s2\">&#34;http://p2fuh27b9.bkt.clouddn.com/18-1-13/17000740.jpg&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-08fa44920057f0efb7a8f6142693ff86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1520\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb\" width=\"1520\" data-original=\"https://pic3.zhimg.com/v2-08fa44920057f0efb7a8f6142693ff86_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1520&#39; height=&#39;1182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1520\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1520\" data-original=\"https://pic3.zhimg.com/v2-08fa44920057f0efb7a8f6142693ff86_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-08fa44920057f0efb7a8f6142693ff86_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>默认情况下图片会这样排列，很多时候我们是不希望这样的，所有就需要设置<code>background-repeat</code>属性</p><h2>background-repeat</h2><p>该属性的属性值说明如下：</p><ul><li>repeat：背景图像将向垂直和水平方向重复。这是默认</li><li>repeat-x：只有水平位置会重复背景图像</li><li>repeat-y：只有垂直位置会重复背景图像</li><li>no-repeat：background-image不会重复</li><li>inherit：指定background-repea属性设置应该从父元素继承</li></ul><p>大家可以在<a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CodePen</a>里面尝试一下每个属性值所带来的不同效果。</p><h2>background-position</h2><p>background-position 属性改变图像在背景中的位置</p><p>background-position 属性提供值有很多方法。</p><p>首先，可以使用一些关键字：top、bottom、left、right 和 center；</p><p>其次，可以使用长度值，如 100px 或 5cm；</p><p>最后也可以使用百分数值。不同类型的值对于背景图像的放置稍有差异。</p><ul><li>关键字</li><ul><li>图像放置关键字最容易理解的作用就像其名字的意义。</li><li>例如，top left 使图像放置在元素内边距区的左上角。</li><li>只要保证不超过两个关键字：一个对应水平方向，另一个对应垂直方向，那么你可以设置位置关键字以任何顺序出现。（关键字前后顺序无所谓）</li><li>如果只有一个关键字，则会默认另一个关键字为 center。（例：：“center\t= center center”，“top = top center 或 center top”）</li><li>如果希望每个段落的中部上方出现一个图像，只需声明 <code>background-position:top;</code>其中水平关键字默认为 center。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>百分数值</li><ul><li>百分数值的表现方式更为复杂。假设你希望用百分数值将图像在其元素中居中，你可以按照下面的代码进行设置<code>background-position:50% 50%;</code></li><li>图像中心与其元素的中心对齐，如果你想把一个图像放在水平方向 2/3、垂直方向 1/3 处，可以这样声明：<code>background-position:66% 33%;</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>长度值</li><ul><li>长度值解释的是图像左上角与元素内边距左上角的偏移距离。（内边距会在后面“盒模型”部分讲解）</li><li>比如，如果设置值为 50px 100px，图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>background-attachment</h2><p>background-attachment设置背景图像是否固定或者随着页面的其余部分滚动。</p><p>属性值:</p><ul><li>scroll：背景图片随页面的其余部分滚动。这是<b>默认</b></li><li>fixed：背景图像是固定的</li><li>inherit：指定background-attachment的设置应该从父元素继承</li><li>local：背景图片随滚动元素滚动</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">background-repeat</span><span class=\"p\">:</span><span class=\"nd\">no-repeat</span><span class=\"o\">;</span>\n<span class=\"nt\">background-attachment</span><span class=\"p\">:</span><span class=\"nd\">scroll</span><span class=\"o\">;</span> <span class=\"c\">/* 默认值，不设置的情况下就是这个值。背景图片随页面的其余部分滚动。*/</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8f0f9bd0ca386fe4c7272200d3afdb7c_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"626\" data-thumbnail=\"https://pic1.zhimg.com/v2-8f0f9bd0ca386fe4c7272200d3afdb7c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1044\" data-original=\"https://pic1.zhimg.com/v2-8f0f9bd0ca386fe4c7272200d3afdb7c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1044&#39; height=&#39;626&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"626\" data-thumbnail=\"https://pic1.zhimg.com/v2-8f0f9bd0ca386fe4c7272200d3afdb7c_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1044\" data-original=\"https://pic1.zhimg.com/v2-8f0f9bd0ca386fe4c7272200d3afdb7c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8f0f9bd0ca386fe4c7272200d3afdb7c_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">background-repeat</span><span class=\"p\">:</span><span class=\"nd\">no-repeat</span><span class=\"o\">;</span>\n<span class=\"nt\">background-attachment</span><span class=\"p\">:</span><span class=\"nd\">fixed</span><span class=\"o\">;</span><span class=\"err\">\\\\</span><span class=\"nt\">背景图像是固定的</span><span class=\"err\">。</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-524280ef7e5051b892bd5e346141e769_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"626\" data-thumbnail=\"https://pic2.zhimg.com/v2-524280ef7e5051b892bd5e346141e769_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1044\" data-original=\"https://pic2.zhimg.com/v2-524280ef7e5051b892bd5e346141e769_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1044&#39; height=&#39;626&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"626\" data-thumbnail=\"https://pic2.zhimg.com/v2-524280ef7e5051b892bd5e346141e769_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1044\" data-original=\"https://pic2.zhimg.com/v2-524280ef7e5051b892bd5e346141e769_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-524280ef7e5051b892bd5e346141e769_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>背景简写属性</h2><p>在以上实例中我们可以看到页面的背景样式可以通过很多不同属性来控制。</p><p>为了简化这些属性的代码，我们可以将这些属性合并在同一个属性中.</p><p>背景颜色的简写属性为 &#34;background&#34;:</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">body</span> <span class=\"p\">{</span> <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"mh\">#ffffff</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;img_tree.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">right</span> <span class=\"kc\">top</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></div><p>当使用简写属性时，属性值的顺序为：:</p><ol><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-attachment</li><li>background-position</li></ol><p>以上属性无需全部使用，你可以按照页面的实际需要使用。</p><h2>小练习</h2><p>请在<a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CodePen</a>中，试着做下列练习。</p><ol><li>把一个<code>&lt;p&gt;</code>元素 背景设置为<b>蓝色</b>。</li><li>在另一个<code>&lt;p&gt;</code>元素上，把一张<b>图片设置为背景</b>。</li><li>图片<b>不重复</b></li><li>图片<b>不随段落滚动而滚动</b>。</li><li>图片位于段落背景<b>中上部</b>。</li></ol><p>这是我的<a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/Garrik/pen/QaxJop\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">示例</a>，可以作为参考。</p><hr/><h2>颜色值</h2><p>大家可能注意到了，在前面写颜色属性值的时候，我用了几种不同的写法。</p><p>CSS中，颜色值通常以以下方式定义: （不区分大小写）</p><ul><li><b>颜色名称</b> : 这种是我们最熟悉的，就是想要什么颜色就写什么颜色的英文就好了。（例：“red”，“green”）</li><li><b>RGB颜色表示法</b> : 就是红(R:red),绿(G:green),蓝(B:blue),，这三原色混合后呈现出的颜色，其中每种颜色的取值为0~255。（例：“rgb(255,0,0)”，“rgb(0,255,0)”）</li><li><b>RGB百分比颜色表示法</b> ：就是利用百分比来表示RGB颜色，其中RGB中的0就代表百分比中的0%，RGB中的255就代表百分比中的100%。（例：“rgb(0%, 0%, 100%)”，“rgb(0%, 100%, 0%)”）</li><li><b>16进制颜色表示法</b> : 就是使用三对十六进制数分别表示RGB中的三原色。</li><ul><li>比如“#125AFF”，等价于rgb(18,90,255)。</li><li>16进制与十进制的对照关系（1到9和十进制一样，之后 A - 10, B - 11, C - 12, D - 13, E- 14, F - 15）。如果16进制数字为 “D3”， 那么它对应的十进制数字为 13 x 16 + 3 = 211。</li><li>当 16进制颜色表示法 中的两个表示颜色值的数字一样的时候可以简写，比如“color:#ff0000”，就可以<b>简写</b>为“color:#f00”。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>在这里 <a href=\"https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/cssref/css_colorsfull.asp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">16进制颜色对照表</a> 可以很方便查看你想要的颜色的16进制代码。</p><h2>长度值</h2><p>总结一下，目前比较常用到<b>px</b>（像素）、<b>em</b>、<b>%</b> 百分比，要注意其实这三种单位都是<b>相对单位</b>。</p><ul><li>像素</li></ul><p>像素为什么是相对单位呢？因为像素指的是显示器上的小点（CSS规范中假设“90像素=1英寸”）。实际情况是浏览器会使用显示器的实际像素值有关，在目前大多数的设计者都倾向于使用像素（px）作为单位。</p><ul><li>em</li></ul><p>就是元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；</p><p>但当给 font-size 设置单位为 em 时，此时计算的标准以其父元素的 font-size 为基础。</p><ul><li>百分比</li></ul><p><code>p { font-size:12px; line-height:130%; }</code></p><p>设置行高（行间距）为字体的 130%（12px * 1.3 = 15.6px）。</p><hr/><p>好啦，今天的分享就告一段落啦。下一篇中，我会介绍CSS的盒模型，布局，以及一些CSS实用小技巧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": [
                {
                    "userName": "微风不燥", 
                    "userLink": "https://www.zhihu.com/people/ceed6254b54ed01426c744d12c8d2b70", 
                    "content": "真心感谢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32877717", 
            "userName": "罐装汽水Garrik", 
            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
            "upvote": 78, 
            "title": "HTML基础", 
            "content": "<h2><b># 前言</b></h2><p><b>作为走在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！</b></p><hr/><h2><b># 什么是前端开发？</b></h2><p>简单来说，前端开发就是以HTML（结构）, CSS（表现）, JavaScript（行为）为基础，将PC端，移动端产品的UI设计最终在用户设备上进行实现。</p><p>用户通过前端工程师所做出来的网页，手机APP来直接与产品进行交互。基本来说所有在互联网上与视觉和交互相关的环节都是前端所专注的领域。现在你能看到这篇文章，就是得益于前端工程师的辛勤劳动。和他们的名字一样，前端开发者站在互联网的最前线。</p><p>简单一句话，前端开发就是互联网的门面。</p><hr/><h2><b># 前端到底难不难？</b></h2><p>先简后难。这是很多前端从业者的共鸣。如果只是简简单单的用HTML, CSS, JavaScript做出一个可以进行简单交互的网页并不难，如果学的快的话，一天工夫就可以从零开始学这做出一个像样的网页。</p><p>但是前端服务的对象是用户。该如何去加交互才能让网页更好用？用户数暴涨，服务器，数据库该怎么部署? 搜关键字总是搜不到网页怎么办？换了小屏幕网页排版错乱怎么办？黑客攻击网页该如何防御？等等这些延伸问题，都让前端开发变得更加高深。</p><p>这是网上的一张<b>不完全</b>前端学习内容思维导图。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-139547c4f925c889f77f3e5bd635c14a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2126\" data-rawheight=\"1687\" class=\"origin_image zh-lightbox-thumb\" width=\"2126\" data-original=\"https://pic3.zhimg.com/v2-139547c4f925c889f77f3e5bd635c14a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2126&#39; height=&#39;1687&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2126\" data-rawheight=\"1687\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2126\" data-original=\"https://pic3.zhimg.com/v2-139547c4f925c889f77f3e5bd635c14a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-139547c4f925c889f77f3e5bd635c14a_b.jpg\"/></figure><p>啊，怎么这么多东西呀！！！</p><p>嗯，前端最难的地方就是为了处理不同的情况，为了让开发更有效率，每天都有新东西出来，最流行的开发方法每天都变。而应对方式只有 <b>！！努力学习 ！！</b>。</p><p>听起来，会有点让人皱眉头吗？别怕，这些新技术其实也都是以HTML, CSS ,JavaScript为基础，把上面三个弄精通，新技术也不知过是在上一层楼而已。</p><p>相信我，当你自己做出来第一个像模像样的网页的时候，你会爱上前端的！</p><blockquote>那么让我们开始吧！</blockquote><hr/><h2><b># HTML - “建筑工人有力量”</b></h2><blockquote>HTML (HyperText Markup Language) 不是一种编程语言;它是一种标记语言，用于告诉您的浏览器如何构造您访问的网页。 -- MDN Web Docs</blockquote><p>一个房子是靠地基，墙壁，房顶组成的。如果把前端比喻成盖房的话，HTML就是施工阶段，作为标记语言，它用来描述网页的结构。你可以把它理解成是一套用于网页内容的排版规则。</p><hr/><h2><b># 一个HTML实例</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ac49f585ef3a12e28d1f8c9ccec927e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"273\" class=\"content_image\" width=\"338\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;338&#39; height=&#39;273&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"273\" class=\"content_image lazy\" width=\"338\" data-actualsrc=\"https://pic3.zhimg.com/v2-ac49f585ef3a12e28d1f8c9ccec927e6_b.jpg\"/></figure><p>从实际出发，我们就先来看看一个HTML文档到底长什么样子吧！</p><ul><li><code>&lt;!DOCTYPE html&gt;</code> 放在文档的第一行，用来声明文档类型。它不是HTML标签，只用来告诉浏览器，文档使用的HTML版本。( 实例中这一句的意思就是，文档采用HTML5。)</li><li><code>&lt;html&gt;&lt;/html&gt;</code> 这一对标签用来告诉浏览器这是一个HTML文档。整个HTML文档全部包含在这里面。</li><li><code>&lt;head&gt;&lt;/head&gt;</code> 用来定义文档的头部，在这里面定义了文档的各种属性和信息，里面的东西浏览者一般是看不到的。</li><li><code>&lt;title&gt;&lt;/title&gt;</code> 这一元素可以定义文档的标题。包含在<code>&lt;head&gt;</code>标签中。一般会在浏览器标题栏中显示，当把页面保存到收藏夹的时候，标题也会是该文档链接的默认名称。</li><li><code>&lt;body&gt;&lt;/body&gt;</code>在这个元素中定义了文档的主体内容。简单来说就是网页打开后浏览者看到的页面内容。</li><li><code>&lt;p&gt;&lt;/p&gt;</code> 这是段落元素，里面定义了一个段落。</li></ul><p>从上面的例子可以看出，HTML语言只是在描述网页的结构，并没有涉及任何计算，变量，指令，方程。这也就是为什么说HTML是标记语言，而不是编程语言。</p><p>把写HTML就想象成搭乐高积木，这并不会很难，加油看下去吧！</p><hr/><h2><b># HTML标签，HTML元素</b></h2><p><b>HTML标签</b>是HTML文档的最基本单位。</p><p>为了与普通文本区分开，它由一个尖括号<code>&lt;</code>开始，一个反尖括号<code>&gt;</code>结束。两个尖括号之间的是标签名。标签名大小写不敏感。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ffa38c6b6c708121161e860eabc36865_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"821\" data-original=\"https://pic2.zhimg.com/v2-ffa38c6b6c708121161e860eabc36865_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;821&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"821\" data-original=\"https://pic2.zhimg.com/v2-ffa38c6b6c708121161e860eabc36865_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ffa38c6b6c708121161e860eabc36865_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>HTML元素</b>是由 <b>HTML标签</b>，<b>HTML内容</b> 和 <b>HTML属性</b> 构成的。</p><p>但是基本上，HTML标签 和 HTML元素 这两词很多情况下同义共通。所以也不必纠结于说法，只要明白对方所具体指的是什么就可以了。</p><p>它的主要组成部分是：</p><ol><li><b>开始标签（Opening tag）</b>：包括元素的名称（在本例中，p），包裹在开始和结束尖括号 ( &lt; &gt; ) 中。这表示元素开始或开始生效。</li><li><b>结束标签（Closing tag）</b> ：在开始标签的基础上在元素名称之前包含正斜杠( / )。这表示元素结束的位置。</li><li><b>内容（Content）</b>：元素的内容。</li><li><b>元素（Element）</b>：开始标记 + 结束标记 + 内容 = 元素。</li></ol><p>（某些HTML元素是<b>空元素</b>，在开始标签中进行关闭，并没有结束标签。例如：<code>&lt;br/&gt;</code>）</p><hr/><h2><b># HTML标签嵌套</b></h2><p>你也可以把元素放到其它元素之中——这被称作<b>嵌套</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bb1d030244afdf42a0ad5d60b6f86377_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb\" width=\"464\" data-original=\"https://pic4.zhimg.com/v2-bb1d030244afdf42a0ad5d60b6f86377_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;464&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"464\" data-original=\"https://pic4.zhimg.com/v2-bb1d030244afdf42a0ad5d60b6f86377_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bb1d030244afdf42a0ad5d60b6f86377_b.jpg\"/></figure><p>上面就是一个嵌套例子。你需要确保元素被正确的嵌套：在上面的例子中我们先打开<code>&lt;p&gt;</code>元素，然后才打开<code>&lt;a&gt;</code>元素，因此必须先将<code>&lt;a&gt;</code>元素关闭，然后再去关闭<code>&lt;p&gt;</code>元素。所有的元素都需要正确的打开和关闭，这样才能按你所想的方式展现。</p><hr/><h2><b># HTML属性</b></h2><p><b>HTML属性</b>是为HTML元素提供的附加信息。（在后面需要时在详细讲解）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2edbdbd2e0c754fabf5a51950d33d694_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1287\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb\" width=\"1287\" data-original=\"https://pic1.zhimg.com/v2-2edbdbd2e0c754fabf5a51950d33d694_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1287&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1287\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1287\" data-original=\"https://pic1.zhimg.com/v2-2edbdbd2e0c754fabf5a51950d33d694_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2edbdbd2e0c754fabf5a51950d33d694_b.jpg\"/></figure><p>属性所包含的信息并不会出现在实际的内容中。上面这个例子里，class属性给元素赋了一个可供识别的类名。之后可以通过这个名字去为其定义样式信息。</p><p>规则：</p><ol><li>元素名与属性之间，以及每个属性之间用空格分开。</li><li>属性名与属性值用“=”连接。</li><li>属性值要用引号(“”)引起来。</li><li>属性一般位于开始标签。</li><li>不区分大小写，但是推荐小写。</li></ol><hr/><h2><b># HTML注释</b></h2><p><b>HTML注释</b> 是对相应的代码所做出的说明和备注。写法如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7296c32dcdba9f5007311312c3fd87dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"225\" data-rawheight=\"124\" class=\"content_image\" width=\"225\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;225&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"225\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"225\" data-actualsrc=\"https://pic2.zhimg.com/v2-7296c32dcdba9f5007311312c3fd87dd_b.jpg\"/></figure><p><code>&lt;!--</code>表示注释开始，<code>--&gt;</code>表示注释结束。</p><p>不要偷懒不好好写注释，为了日后自己和别人都能方便理解，查找，沟通，请一定要把注释写清楚，写明白。</p><hr/><h2><b># <code>&lt;head&gt;</code>内常用元素</b></h2><p><b><code>&lt;meta&gt;</code>标签</b>：<br/>又叫“元数据元素”，不会在客户端显示，但是会被浏览器解析。通常用于定义页面的关键字，描述，作者信息等。以方便搜索引擎来搜索页面相关信息。简单说元数据就是告诉搜索引擎这个网页是干什么的，是谁写的，等等。</p><p>在刚开始我想过讲解这一部分，目前只要先记住下面这个写法就可以了。这句代码告诉浏览器 HTML 文档使用 Unicode 字符编码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-407121d521d18c39469ecbd90b4db78f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"124\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic4.zhimg.com/v2-407121d521d18c39469ecbd90b4db78f_b.jpg\"/></figure><p><b><code>&lt;title&gt;</code>标签</b><br/>在前面已经见过了，<code>&lt;title&gt;</code>标签定义文档的标题，在所有 HTML 文档中是必需的。也就是页面打开后浏览器上方的标题。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1ae6263763dddfee7284d452f3506b75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"276\" data-rawheight=\"124\" class=\"content_image\" width=\"276\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;276&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"276\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"276\" data-actualsrc=\"https://pic2.zhimg.com/v2-1ae6263763dddfee7284d452f3506b75_b.jpg\"/></figure><p>合起来之后就是下面这样，在目前的学习中，我们就先这样写就好了，更深入的内容在后面遇到时我们在探讨。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-87c7503ccfd1dea77f7314f396fe9ff5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"180\" class=\"content_image\" width=\"312\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;312&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"180\" class=\"content_image lazy\" width=\"312\" data-actualsrc=\"https://pic2.zhimg.com/v2-87c7503ccfd1dea77f7314f396fe9ff5_b.jpg\"/></figure><hr/><h2><b># <code>&lt;body&gt;</code>内常用元素</b></h2><h2><b>## 段落</b></h2><h2><b>### 标题</b></h2><p>在 HTML 中一共有6个级别的标题元素。<br/>级别由大到小通过 <code>&lt;h1&gt; - &lt;h6&gt;</code> (&#34;heading&#34;) 标签来定义。</p><p><code>&lt;h1&gt;</code> 级别最大，字号最大。<code>&lt;h6&gt;</code> 级别最小，字号最小。同时级别越高意味着重要性也越大。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-13c3eb74029e7f38661601463104d606_b.jpg\" data-size=\"normal\" data-rawwidth=\"225\" data-rawheight=\"217\" class=\"content_image\" width=\"225\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;225&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"225\" data-rawheight=\"217\" class=\"content_image lazy\" width=\"225\" data-actualsrc=\"https://pic3.zhimg.com/v2-13c3eb74029e7f38661601463104d606_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-daafb778432c0dfc0f2476cca93ec9ec_b.jpg\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"378\" class=\"content_image\" width=\"326\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;326&#39; height=&#39;378&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"378\" class=\"content_image lazy\" width=\"326\" data-actualsrc=\"https://pic1.zhimg.com/v2-daafb778432c0dfc0f2476cca93ec9ec_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 段落</b></h2><p>段落通过 <code>&lt;p&gt;</code> (&#34;paragraph&#34;) 标签定义。顾名思义，段落标签用来标记一段文字。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cdbaf9147b395c0d58adca2fd3f037c0_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-cdbaf9147b395c0d58adca2fd3f037c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-cdbaf9147b395c0d58adca2fd3f037c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cdbaf9147b395c0d58adca2fd3f037c0_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c6f18bb732f38d17a972faf03fd59f6c_b.jpg\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic1.zhimg.com/v2-c6f18bb732f38d17a972faf03fd59f6c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;490&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"490\" data-original=\"https://pic1.zhimg.com/v2-c6f18bb732f38d17a972faf03fd59f6c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c6f18bb732f38d17a972faf03fd59f6c_b.jpg\"/><figcaption>表现</figcaption></figure><p>可以看到段落标签会自动换行，段落与段落之间有空隙。</p><h2><b>### 换行</b></h2><p>如果您希望在不产生一个新段落的情况下进行换行，请使用 <code>&lt;br /&gt;</code> 标签：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-08c21904acdccb1964598944289d452d_b.jpg\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb\" width=\"579\" data-original=\"https://pic2.zhimg.com/v2-08c21904acdccb1964598944289d452d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;579&#39; height=&#39;236&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"579\" data-original=\"https://pic2.zhimg.com/v2-08c21904acdccb1964598944289d452d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-08c21904acdccb1964598944289d452d_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2fad5a3065e01d800aa2e2bcdb320c72_b.jpg\" data-size=\"normal\" data-rawwidth=\"494\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"494\" data-original=\"https://pic3.zhimg.com/v2-2fad5a3065e01d800aa2e2bcdb320c72_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;494&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"494\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"494\" data-original=\"https://pic3.zhimg.com/v2-2fad5a3065e01d800aa2e2bcdb320c72_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2fad5a3065e01d800aa2e2bcdb320c72_b.jpg\"/><figcaption>表现</figcaption></figure><p>不同于<code>&lt;p&gt;</code>标签，使用<code>&lt;br /&gt;</code>标签换行，两段文字之间没有空隙。但是这两个标签之间的区别可不只是样式不同这么简单哦。区分段落时请用<code>&lt;p&gt;</code>，段落之内换行请用<code>&lt;br /&gt;</code>，不要随意乱用。</p><h2><b>## 格式化标签</b></h2><p>也就是针对文本进行各种 “格式化”（加粗，斜体，上标，下标） 的标签。</p><h2><b>### 加粗：</b></h2><p>标签 <code>&lt;b&gt;</code> (&#34;bold&#34;) 和 <code>&lt;strong&gt;</code> 都可以对文本进行<b>加粗</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-057199022ec2fdc8e15a9edfa381bd87_b.jpg\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"142\" class=\"origin_image zh-lightbox-thumb\" width=\"472\" data-original=\"https://pic4.zhimg.com/v2-057199022ec2fdc8e15a9edfa381bd87_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;472&#39; height=&#39;142&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"142\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"472\" data-original=\"https://pic4.zhimg.com/v2-057199022ec2fdc8e15a9edfa381bd87_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-057199022ec2fdc8e15a9edfa381bd87_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-693c0d2e5e5998cf27cbdf167a48eda2_b.jpg\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"149\" class=\"content_image\" width=\"326\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;326&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"326\" data-actualsrc=\"https://pic3.zhimg.com/v2-693c0d2e5e5998cf27cbdf167a48eda2_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 斜体：</b></h2><p>标签 <code>&lt;i&gt;</code> (&#34;italic&#34;)，<code>&lt;cite&gt;</code> 和 <code>&lt;em&gt;</code>（&#34;emphasis&#34;） 可以使文本实现斜体。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-38a5a91c521dadbe5be846d839772a06_b.jpg\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb\" width=\"424\" data-original=\"https://pic3.zhimg.com/v2-38a5a91c521dadbe5be846d839772a06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;424&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"424\" data-original=\"https://pic3.zhimg.com/v2-38a5a91c521dadbe5be846d839772a06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-38a5a91c521dadbe5be846d839772a06_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a06daeef602eeacdd3862733b2f69cad_b.jpg\" data-size=\"normal\" data-rawwidth=\"327\" data-rawheight=\"186\" class=\"content_image\" width=\"327\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;327&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"327\" data-rawheight=\"186\" class=\"content_image lazy\" width=\"327\" data-actualsrc=\"https://pic2.zhimg.com/v2-a06daeef602eeacdd3862733b2f69cad_b.jpg\"/><figcaption>表现</figcaption></figure><p>你可能会想，那么既然表现样式都一样，为什么要用这么多不同的标签去实现呢？</p><p>这里就涉及到 HTML 的语义化概念了。不同的标签具有不同的语义，哪怕它们所表现出的样式都一样，但所代表的意义也都不同。具体的区别我会在后面单开一个讲解语义化的文章。在目前我们就先暂时在练习中使用<code>&lt;b&gt;</code>和<code>&lt;i&gt;</code>。</p><h2><b>### 上标，下标：</b></h2><p>标签<code>&lt;sup&gt;</code>（“superscript”）可以实现文本的上标效果。标签<code>&lt;sub&gt;</code>（“subscript”）可以实现文本的下标效果。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e37be8ae13079f8e5f0d33cbeb561377_b.jpg\" data-size=\"normal\" data-rawwidth=\"262\" data-rawheight=\"217\" class=\"content_image\" width=\"262\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;262&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"262\" data-rawheight=\"217\" class=\"content_image lazy\" width=\"262\" data-actualsrc=\"https://pic4.zhimg.com/v2-e37be8ae13079f8e5f0d33cbeb561377_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-41cf1240f8781a470cef07a3d6f53436_b.jpg\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"156\" class=\"content_image\" width=\"328\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;328&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"156\" class=\"content_image lazy\" width=\"328\" data-actualsrc=\"https://pic3.zhimg.com/v2-41cf1240f8781a470cef07a3d6f53436_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>## 删除线，下划线，水平线</b></h2><h2>借助各种线段可以加强文本的表达</h2><h2><b>### 删除线：</b></h2><p><code>&lt;s&gt;</code>标签（“strike”）和 <code>&lt;del&gt;</code>标签（“delete”）都可以用来在包含的文本中间画上一条贯穿线，以表达内容被删除。但是在 HTML5 中<code>&lt;s&gt;</code>标签已经不再被推荐使用，所以只要作为了解就好，在使用中还是选择<code>&lt;del&gt;</code>吧。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4d378696a72eedd279cf364cf5e9bc71_b.jpg\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"161\" class=\"content_image\" width=\"335\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;335&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"161\" class=\"content_image lazy\" width=\"335\" data-actualsrc=\"https://pic2.zhimg.com/v2-4d378696a72eedd279cf364cf5e9bc71_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e8277f7b17f28e5055a9354c175611de_b.jpg\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"183\" class=\"content_image\" width=\"328\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;328&#39; height=&#39;183&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"183\" class=\"content_image lazy\" width=\"328\" data-actualsrc=\"https://pic3.zhimg.com/v2-e8277f7b17f28e5055a9354c175611de_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 下划线：</b></h2><p><code>&lt;u&gt;</code>标签（“underline”）可以为文本加上下划线，但是我们应该避免去随意使用。因为很多时候用户会误以为加下划线的文本是超链接。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-67c9bd8f395c18d72508286337ff0458_b.jpg\" data-size=\"normal\" data-rawwidth=\"365\" data-rawheight=\"124\" class=\"content_image\" width=\"365\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;365&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"365\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"365\" data-actualsrc=\"https://pic1.zhimg.com/v2-67c9bd8f395c18d72508286337ff0458_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ab57e0507d6ed9b289e54771b002479a_b.jpg\" data-size=\"normal\" data-rawwidth=\"323\" data-rawheight=\"115\" class=\"content_image\" width=\"323\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;323&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"323\" data-rawheight=\"115\" class=\"content_image lazy\" width=\"323\" data-actualsrc=\"https://pic3.zhimg.com/v2-ab57e0507d6ed9b289e54771b002479a_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 水平线：</b></h2><p><code>&lt;hr /&gt;</code>标签（“horizon”）表现为一条水平线，可以看到它是一个自闭和标签。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cd0a028617b2d8394ebfd52b3e0834de_b.jpg\" data-size=\"normal\" data-rawwidth=\"278\" data-rawheight=\"161\" class=\"content_image\" width=\"278\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;278&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"278\" data-rawheight=\"161\" class=\"content_image lazy\" width=\"278\" data-actualsrc=\"https://pic3.zhimg.com/v2-cd0a028617b2d8394ebfd52b3e0834de_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-772d31998925de08a1c1fa85b83622ae_b.jpg\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"174\" class=\"content_image\" width=\"322\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;322&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"174\" class=\"content_image lazy\" width=\"322\" data-actualsrc=\"https://pic3.zhimg.com/v2-772d31998925de08a1c1fa85b83622ae_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>## 特殊符号</b></h2><p>要想在 HTML 中表现特殊符号（例如：空格，￥，$，÷）常用的有两种方法：</p><ol><li>直接在 HTML 文档中输入该特殊符号；</li><li>在 HTML 文档中输入该特殊符号对应的 HTML 代码</li></ol><p>注意： 很多符号属于 unicode 字符集，我们需要在<code>head</code>标签内添加<code>&lt;meta charset=&#34;utf-8&#34;&gt;</code></p><p>例如，如果想添加两个空格在段落开头，你会发现在 HTML 文档中手动打空格是不管用的。我们就要使用 HTML 代码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e3aa75bd4ca348e057618dd11909ea2a_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-e3aa75bd4ca348e057618dd11909ea2a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;157&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-e3aa75bd4ca348e057618dd11909ea2a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e3aa75bd4ca348e057618dd11909ea2a_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d3d1d91250564c20afb607dab35af21b_b.jpg\" data-size=\"normal\" data-rawwidth=\"363\" data-rawheight=\"124\" class=\"content_image\" width=\"363\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;363&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"363\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"363\" data-actualsrc=\"https://pic4.zhimg.com/v2-d3d1d91250564c20afb607dab35af21b_b.jpg\"/><figcaption>表现</figcaption></figure><p>或者想表示金钱符号：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a5962c35b438a6bd4cccfcb26d94beb6_b.jpg\" data-size=\"normal\" data-rawwidth=\"273\" data-rawheight=\"142\" class=\"content_image\" width=\"273\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;273&#39; height=&#39;142&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"273\" data-rawheight=\"142\" class=\"content_image lazy\" width=\"273\" data-actualsrc=\"https://pic3.zhimg.com/v2-a5962c35b438a6bd4cccfcb26d94beb6_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-865bc475da5470d0c28e99654f365fd9_b.jpg\" data-size=\"normal\" data-rawwidth=\"329\" data-rawheight=\"162\" class=\"content_image\" width=\"329\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;329&#39; height=&#39;162&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"329\" data-rawheight=\"162\" class=\"content_image lazy\" width=\"329\" data-actualsrc=\"https://pic2.zhimg.com/v2-865bc475da5470d0c28e99654f365fd9_b.jpg\"/><figcaption>表现</figcaption></figure><p>在上面我使用了两种不同的方式输入同一个特殊符号。</p><p>由于特殊字符实在是太多了，大家可以根据需求自己去查找。</p><p>参考网站：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/u013778905/article/details/53177042\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特殊字符大全</a></p><h2><b>## 超链接</b></h2><p>使用标签 <code>&lt;a&gt;</code> 定义超文本链接，可以从一个页面指向另一个目的端的链接。也正是因为有了超链接，才让网页连成网络。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-81b1df5990a6edf023474837e324c764_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-81b1df5990a6edf023474837e324c764_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;568&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-81b1df5990a6edf023474837e324c764_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-81b1df5990a6edf023474837e324c764_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-48b97913f47773e46f7aa07c5d901bfc_b.jpg\" data-size=\"normal\" data-rawwidth=\"323\" data-rawheight=\"72\" class=\"content_image\" width=\"323\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;323&#39; height=&#39;72&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"323\" data-rawheight=\"72\" class=\"content_image lazy\" width=\"323\" data-actualsrc=\"https://pic1.zhimg.com/v2-48b97913f47773e46f7aa07c5d901bfc_b.jpg\"/><figcaption>表现</figcaption></figure><p><code>&lt;a&gt;</code>标签的默认表现样式为蓝色，点击后字体颜色为紫色。</p><p><b><code>href</code>属性：</b></p><p>在标签<code>&lt;a&gt;</code>中使用“<code>href</code>属性”来定义目标地址。当链接被点击，则跳转到目标。如果 <code>href</code> 属性没有被指定链接，<code>&lt;a&gt;</code> 标签将不是一个链接。</p><p><b><code>target</code>属性：</b></p><p><code>target</code>属性定义目标窗口的打开方式。默认值为<code>_self</code>，即在当前窗口打开链接。如果属性值为<code>_blank</code>，那么点击链接后，在新窗口中打开被链接文档。</p><h2><b>### 锚点链接：</b></h2><p>不同于上面的链接是访问外部的网页，锚点链接的目标对象是当前页面的某个部分。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a7edee73a8241c741b438033125efa64_b.jpg\" data-size=\"normal\" data-rawwidth=\"343\" data-rawheight=\"292\" class=\"content_image\" width=\"343\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;343&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"343\" data-rawheight=\"292\" class=\"content_image lazy\" width=\"343\" data-actualsrc=\"https://pic1.zhimg.com/v2-a7edee73a8241c741b438033125efa64_b.jpg\"/><figcaption>代码</figcaption></figure><p>我在这里使用了<code>&lt;div&gt;</code>标签 这个我会在后面介绍，而<code>id</code>属性 我会在 CSS 章节再介绍，这里你可以先简单把 <code>id</code> 当做每个<code>&lt;div&gt;</code>元素“独立唯一的代号“，就像你的身份证号一样，一个号码对应一个人。所以<code>id</code>也必须是唯一的，不能出现重复相同的<code>id</code>。</p><p>在<code>&lt;a&gt;</code>标签的<code>href</code>属性值为 <code>#</code>符号 加上 目标元素的 <code>id</code>名。</p><p>当链接被点击的时候，网页就会自动滚动到目标板块了。</p><h2><b>## 块级元素 &amp; 行内元素（内联元素）</b></h2><p>在这里我要讲解两个概念：块元素 和 行内元素。</p><p>在前面的学习中，我们发现有的元素独占一行（例如：<code>&lt;p&gt;</code>,<code>&lt;h1&gt; - &lt;h6&gt;</code>），有的元素可以几个排列在同一行（例如：<code>&lt;a&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;em&gt;</code>）</p><p><b>块级元素</b> 在浏览器上表现为占据整行，不与其他元素共在同一行。可以在内嵌套块级元素和行内元素。</p><p><b>行内元素</b> 则与其他行内元素可以共同位于同一行。行内元素内部也可以嵌套其他元素，但是不能是块级元素。</p><h2><b>### <code>&lt;div&gt;</code>标签 &amp; <code>&lt;span&gt;</code>标签</b></h2><p><b><code>&lt;div&gt;</code>标签</b> 是 “division”（分区）的英文缩写。它是一个 块级元素，顾名思义<code>&lt;div&gt;</code>基本上用来 分区 或 布局，作为组合其他 HTML 元素的容器。</p><p><b><code>&lt;span&gt;</code>标签</b> 是行内元素，可作为 文本的容器，当与 CSS 结合时，<code>&lt;span&gt;</code>标签可以用于为指定文本设置样式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ffd5d01dfbe261f7317904c2c5daec2d_b.jpg\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"474\" data-original=\"https://pic2.zhimg.com/v2-ffd5d01dfbe261f7317904c2c5daec2d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;474&#39; height=&#39;310&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"474\" data-original=\"https://pic2.zhimg.com/v2-ffd5d01dfbe261f7317904c2c5daec2d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ffd5d01dfbe261f7317904c2c5daec2d_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6ba0131a9dd48982329f76886ac022d9_b.jpg\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic2.zhimg.com/v2-6ba0131a9dd48982329f76886ac022d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;523&#39; height=&#39;290&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"523\" data-original=\"https://pic2.zhimg.com/v2-6ba0131a9dd48982329f76886ac022d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6ba0131a9dd48982329f76886ac022d9_b.jpg\"/><figcaption>表现</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 图片</b></h2><p>使用标签 <code>&lt;img /&gt;</code> (&#34;image&#34;) 定义HTML页面中的图像。</p><p><code>&lt;img /&gt;</code>是个自闭合，也就是说它没有闭合标签。</p><p>常用属性：</p><ul><li><code>src</code>属性 定义图像文件的地址</li><li><code>alt</code>属性 定义一串可替换的文本，当浏览器无法载入图像和的时候，替换文本就会出现在原本图像的位置。告诉浏览者失去的信息。</li><li><code>title</code>属性 定义图片的提示文字，当用户把鼠标移到图片上时显示提示文字。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a8b9497b4bbabbb54a2b8dc69cef4183_b.jpg\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"124\" class=\"content_image\" width=\"410\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;410&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"410\" data-actualsrc=\"https://pic4.zhimg.com/v2-a8b9497b4bbabbb54a2b8dc69cef4183_b.jpg\"/><figcaption>代码</figcaption></figure><h2><b>### 相对路径 &amp; 绝对路径</b></h2><p><code>src</code>属性内的图片地址可以是 相对路径，也可以是 绝对路径。这两个概念在初学的时候，一定要弄清楚。</p><p><b>相对路径</b>：以当前文件所在目录为出发点，目标文件的地址相对于这个出发点来定义。</p><p><b>绝对路径</b>：以硬盘的根目录为出发点，直接一层层的指向目标文件。</p><p>如果你熟悉 linux 的目录系统的话，应该比较容易理解这两个概念。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1d382b16182caf94aa7360f279bd6411_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"121\" class=\"content_image\" width=\"274\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;274&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"121\" class=\"content_image lazy\" width=\"274\" data-actualsrc=\"https://pic2.zhimg.com/v2-1d382b16182caf94aa7360f279bd6411_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面图片中，<code>index.html</code>文件所在层级目录下，有一个<code>img2.png</code>图片文件，还有一个<code>images</code>目录。在<code>images</code>目录下还有一个<code>img1.png</code>图片文件。</p><p>如果想在<code>index.html</code>文件里引用<code>img1.png</code>和<code>img2.png</code>两个图片，我们有下面这几种写法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e4fe405e905de08aa488d89e6c5d2d04_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-e4fe405e905de08aa488d89e6c5d2d04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-e4fe405e905de08aa488d89e6c5d2d04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e4fe405e905de08aa488d89e6c5d2d04_b.jpg\"/><figcaption>代码</figcaption></figure><p>当然上面的 绝对路径 是针对于我个人电脑的，每个人的路径都有可能不同。</p><p>在开发中推荐使用 相对路径，因为绝对路径是从所在设备的根目录出发的，每个设备的目录环境可能都不相同。我写的路径到你的电脑上就会找不到。所有如果使用 相对路径 的话，只要我的项目目录不发生结构性的改变，我的项目在哪个设备上都不会出问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 列表</b></h2><p>在 HTML 中，我们可以定义 无序列表，有序列表 和 定义列表。</p><h2><b>### 无序列表：</b></h2><p>使用 <code>&lt;ul&gt;</code>标签（“unordered list”）定义无序列表。在<code>&lt;ul&gt;</code>标签之内用<code>&lt;li&gt;</code>标签定义列表项。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a74d0a1057252947b6e4ff8d390fbc0c_b.jpg\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"198\" class=\"content_image\" width=\"245\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;245&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"198\" class=\"content_image lazy\" width=\"245\" data-actualsrc=\"https://pic1.zhimg.com/v2-a74d0a1057252947b6e4ff8d390fbc0c_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b2213fcc8e3d75c81b3cf6db2246749a_b.jpg\" data-size=\"normal\" data-rawwidth=\"317\" data-rawheight=\"147\" class=\"content_image\" width=\"317\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;317&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"317\" data-rawheight=\"147\" class=\"content_image lazy\" width=\"317\" data-actualsrc=\"https://pic3.zhimg.com/v2-b2213fcc8e3d75c81b3cf6db2246749a_b.jpg\"/><figcaption>表现</figcaption></figure><p>通过改变<code>&lt;ul&gt;</code>标签的<code>type</code>属性值，我们可以定义不同的列表项符号。但在实际开发中更多用到的是 CSS 的 <code>list-style-type</code>属性。等后面讲到 CSS 的时候再说，现在先了解<code>type</code>属性。</p><p><b>属性值符号</b>disc默认值。实心圆。circle空心圆。square实心方块。</p><h2><b>### 有序列表：</b></h2><p>使用 <code>&lt;ol&gt;</code>标签（“ordered list”）定义有序列表。在<code>&lt;ol&gt;</code>标签之内用<code>&lt;li&gt;</code>标签定义列表项。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-15929c8757bdd09d45f6873a28c95a1e_b.jpg\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"198\" class=\"content_image\" width=\"245\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;245&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"198\" class=\"content_image lazy\" width=\"245\" data-actualsrc=\"https://pic3.zhimg.com/v2-15929c8757bdd09d45f6873a28c95a1e_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9657076f2473da91a2732e939ecc839c_b.jpg\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"147\" class=\"content_image\" width=\"318\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;318&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"147\" class=\"content_image lazy\" width=\"318\" data-actualsrc=\"https://pic1.zhimg.com/v2-9657076f2473da91a2732e939ecc839c_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 定义列表：</b></h2><p>定义列表 在开发中并不常用，但是我们还是要了解。</p><p>其分为两个部分：定义名词 和 定义描述。</p><p>简单来说 定义列表 就是一堆 名词 和 注释 的组合。</p><p>使用 <code>&lt;dl&gt;</code>标签（“definition list”）创建定义列表。使用 <code>&lt;dt&gt;</code>标签（“definition term”）创建定义名词。使用 <code>&lt;dd&gt;</code>标签（“definition description”）创建定义描述。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fc883e57d86b7590f1565606512ea7c1_b.jpg\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"254\" class=\"content_image\" width=\"315\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;315&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"254\" class=\"content_image lazy\" width=\"315\" data-actualsrc=\"https://pic2.zhimg.com/v2-fc883e57d86b7590f1565606512ea7c1_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-85c2027b216f2364a901c615f4dae963_b.jpg\" data-size=\"normal\" data-rawwidth=\"331\" data-rawheight=\"227\" class=\"content_image\" width=\"331\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;331&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"331\" data-rawheight=\"227\" class=\"content_image lazy\" width=\"331\" data-actualsrc=\"https://pic4.zhimg.com/v2-85c2027b216f2364a901c615f4dae963_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>## 表格</b></h2><p>使用 <code>&lt;table&gt;</code>标签 来定义表格。</p><p>HTML 表格的基本结构：</p><ul><li><code>&lt;table&gt;…&lt;/table&gt;</code>：定义表格</li><li><code>&lt;tr&gt;…&lt;/tr&gt;</code>（“table row”）：定义表格的行</li><li><code>&lt;td&gt;…&lt;/td&gt;</code>（“table data cell”）：定义每一行的单元格</li></ul><p><code>&lt;tr&gt;</code>，<code>&lt;td&gt;</code>都要放在<code>&lt;table&gt;...&lt;/table&gt;</code>里面。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8226040b3399f52473e507495cc5b915_b.jpg\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"348\" class=\"content_image\" width=\"374\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;374&#39; height=&#39;348&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"348\" class=\"content_image lazy\" width=\"374\" data-actualsrc=\"https://pic2.zhimg.com/v2-8226040b3399f52473e507495cc5b915_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b3ecc2a1e6f444ab12443892879530a2_b.jpg\" data-size=\"normal\" data-rawwidth=\"317\" data-rawheight=\"116\" class=\"content_image\" width=\"317\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;317&#39; height=&#39;116&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"317\" data-rawheight=\"116\" class=\"content_image lazy\" width=\"317\" data-actualsrc=\"https://pic3.zhimg.com/v2-b3ecc2a1e6f444ab12443892879530a2_b.jpg\"/><figcaption>表现</figcaption></figure><p><code>border</code>属性规定围绕表格的边框的宽度，单位为“px”。</p><p><code>border</code>属性会为每个单元格应用边框，并用边框围绕表格。</p><p>如果<code>border</code>属性值改变，那么只有表格最外边框的尺寸会发生变化。表格内部的边框仍旧是<code>1px</code>宽。</p><p><b>标题<code>&lt;caption&gt;</code>标签：</b></p><p>使用<code>&lt;caption&gt;</code>标签可以定义表格标题。其必须紧随<code>&lt;table&gt;</code>开始标签之后。默认位于整个表格的第一行，一个表格只有一个标题。</p><p><b><code>&lt;th&gt;</code>标签：</b></p><p><code>&lt;th&gt;</code>标签定义表格内的表头单元格（包含表头信息），位于表格的第一行，用来表明这一列的内容类别。</p><p>之前看到的<code>&lt;td&gt;</code>标签定义的是标准单元格（包含数据）。</p><p><b><code>align</code>属性</b></p><p>通过定义单元格（<code>&lt;td&gt;</code>，<code>&lt;th&gt;</code>）的<code>align</code>属性，我们可以设定单元格内文字的对齐方向。</p><ul><li><code>align=&#34;left&#34;</code>：靠左</li><li><code>align=&#34;center&#34;</code>：居中</li><li><code>align=&#34;right&#34;</code>：靠右</li></ul><p><b>合并行<code>rowspan</code>：</b></p><p>在设计表格时，有时候根据需求，我们需要进行“合并单元格”。</p><p>使用<code>&lt;td&gt;</code>标签的<code>rowspan</code>属性我们可以合并多行。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0981befba6ad1f4c41e73d30bcb800d6_b.jpg\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"124\" class=\"content_image\" width=\"360\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;360&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"360\" data-actualsrc=\"https://pic3.zhimg.com/v2-0981befba6ad1f4c41e73d30bcb800d6_b.jpg\"/><figcaption>代码</figcaption></figure><p><b>合并列<code>colspan</code>：</b></p><p>使用<code>&lt;td&gt;</code>标签的<code>colspan</code>属性我们可以合并多列。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e8e9cf47daad6f6403f9be55d0e99c8d_b.jpg\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"124\" class=\"content_image\" width=\"360\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;360&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"360\" data-actualsrc=\"https://pic2.zhimg.com/v2-e8e9cf47daad6f6403f9be55d0e99c8d_b.jpg\"/><figcaption>代码</figcaption></figure><p>使用前面讲到的标签，我们综合创建一个表格：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-990e86ea2c11ad6669249be0e8ca9958_b.jpg\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb\" width=\"470\" data-original=\"https://pic1.zhimg.com/v2-990e86ea2c11ad6669249be0e8ca9958_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;470&#39; height=&#39;665&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"470\" data-original=\"https://pic1.zhimg.com/v2-990e86ea2c11ad6669249be0e8ca9958_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-990e86ea2c11ad6669249be0e8ca9958_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-587418d77528b96eac4436c16033aa79_b.jpg\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"226\" class=\"content_image\" width=\"333\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;333&#39; height=&#39;226&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"226\" class=\"content_image lazy\" width=\"333\" data-actualsrc=\"https://pic2.zhimg.com/v2-587418d77528b96eac4436c16033aa79_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 表格语义化：</b></h2><p>为了加强表格的语义化，HTML 中引入了<code>&lt;thead&gt;</code>，<code>&lt;tbody&gt;</code>，<code>&lt;tfoot&gt;</code>三个标签。将表格分为：表头，表身，表脚。三个部分。</p><p>关于这一部分我会在后面的 语义化篇章 再讨论，目前大家先留一个印象吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 表单</b></h2><p>在平时浏览网页时，我们经常会遇到表单。例如：登录，注册账户，发表评论，做问卷调查，等等。通过上面我们讲到的标签，我们已经可以做出静态页面了，而表单往往是需要和后台服务器交互的，所有也就被称为动态页面。这里静态，与动态的区别可以理解为是否有与后台服务器的数据交流。</p><p>使用<code>&lt;form&gt;</code>标签可以创建一个表单。表单的用途简单来说就是收集信息，虽然涉及到了后端交互，但是在这一章我们只需要关心如何在 HTML 里构建表单的页面效果。</p><h2><b>### Input元素：</b><br/></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a98cc5b4d0683e54ef7f9ff88b89580b_b.jpg\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"124\" class=\"content_image\" width=\"292\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;292&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"292\" data-actualsrc=\"https://pic4.zhimg.com/v2-a98cc5b4d0683e54ef7f9ff88b89580b_b.jpg\"/><figcaption>代码</figcaption></figure><p><code>&lt;input&gt;</code>标签多数情况下被用到的表单标签是输入标签。</p><p>使用<code>&lt;input&gt;</code>标签来声明允许用户输入数据。</p><p><code>&lt;input&gt;</code>是空元素，只由开始标签和属性组成。</p><p>具体的输入类型是由<code>type</code>属性定义的。在这里我们先介绍几个常用的。</p><h2><b>#### 文本框（text）</b></h2><p>text 类型用于一般文本输入。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b60341308f9aa70a6cdccc27755ff346_b.jpg\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic3.zhimg.com/v2-b60341308f9aa70a6cdccc27755ff346_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic3.zhimg.com/v2-b60341308f9aa70a6cdccc27755ff346_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b60341308f9aa70a6cdccc27755ff346_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e326fa547002f3cd4c2d78f3b018047c_b.jpg\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"74\" class=\"content_image\" width=\"322\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;322&#39; height=&#39;74&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"74\" class=\"content_image lazy\" width=\"322\" data-actualsrc=\"https://pic1.zhimg.com/v2-e326fa547002f3cd4c2d78f3b018047c_b.jpg\"/><figcaption>表现</figcaption></figure><ul><li><code>placeholder</code>属性 规定可描述输入 <code>&lt;input&gt;</code>字段预期值的简短的提示信息。</li><li><code>value</code>属性 定义文本框内的文字。</li><li><code>size</code>属性 定义文本框的长度，以字符为单位。</li><li><code>maxlength</code>属性 设置文本框中最多可以输入的字符数量。</li></ul><h2><b>#### 密码框（password）</b></h2><p>password 类型用于密码输入。在外观上它和 text 类型 一样，也有同样的属性，但是密码框输入的字符是不可见的。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-72c2e01d752573e1882129193267801a_b.jpg\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"124\" class=\"content_image\" width=\"413\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;413&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"413\" data-actualsrc=\"https://pic3.zhimg.com/v2-72c2e01d752573e1882129193267801a_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fc71b4ec132b8059315ae761c6e3eaa4_b.jpg\" data-size=\"normal\" data-rawwidth=\"325\" data-rawheight=\"82\" class=\"content_image\" width=\"325\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;325&#39; height=&#39;82&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"325\" data-rawheight=\"82\" class=\"content_image lazy\" width=\"325\" data-actualsrc=\"https://pic1.zhimg.com/v2-fc71b4ec132b8059315ae761c6e3eaa4_b.jpg\"/><figcaption>表现</figcaption></figure><p>可以发现我在<code>value</code>属性里设置了值，但最后在密码框里显示的却是星号。</p><h2><b>#### 单选按钮（radio）</b></h2><p>单选按钮的意思就是在众多选项里面只能选一个，使用<code>radio</code>类型来创建。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0b06bf3997eebb3cadce5af2df1434bc_b.jpg\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb\" width=\"551\" data-original=\"https://pic1.zhimg.com/v2-0b06bf3997eebb3cadce5af2df1434bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;551&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"551\" data-original=\"https://pic1.zhimg.com/v2-0b06bf3997eebb3cadce5af2df1434bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0b06bf3997eebb3cadce5af2df1434bc_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f3cbaa3b28861fa732760f77f561a4a6_b.jpg\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"75\" class=\"content_image\" width=\"320\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;320&#39; height=&#39;75&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"75\" class=\"content_image lazy\" width=\"320\" data-actualsrc=\"https://pic3.zhimg.com/v2-f3cbaa3b28861fa732760f77f561a4a6_b.jpg\"/><figcaption>表现</figcaption></figure><p>radio 类型的<code>name</code>和<code>value</code>属性是必须要设置的。</p><ul><li><code>name</code>属性定义的单选按钮组 (具有相同名称的单选按钮 属于同一组)。</li><li><code>value</code>属性设置单选按钮的值。</li></ul><p>如果在浏览器尝试上面的例子，你会发现三个水果只有一个可以被选中，点击另外一个，则之前选中的自动被取消。但是注意只有<code>name</code>属性相同的按钮在一起才会有这种效果。</p><h2><b>#### 复选框（checkbox）</b></h2><p>不同于上面的 radio 类型，checkbox 类型可以允许从选项列表中同时选中多个项。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-78fda14e26d4ab8d6721330bd732e09e_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-78fda14e26d4ab8d6721330bd732e09e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;158&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-78fda14e26d4ab8d6721330bd732e09e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-78fda14e26d4ab8d6721330bd732e09e_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cd3346db05e4a69e3384f4fd7f7c2057_b.jpg\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"81\" class=\"content_image\" width=\"318\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;318&#39; height=&#39;81&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"81\" class=\"content_image lazy\" width=\"318\" data-actualsrc=\"https://pic4.zhimg.com/v2-cd3346db05e4a69e3384f4fd7f7c2057_b.jpg\"/><figcaption>表现</figcaption></figure><p><code>checked</code>属性可以让选项默认为选中状态。</p><p>上面的<code>checked=&#34;checked&#34;</code>因为属性名和属性值一样，也可以简写为<code>checked</code>。</p><h2><b>### <code>&lt;label&gt;</code>标签</b></h2><p><code>&lt;label&gt;</code>标签可以为<code>&lt;input&gt;</code>元素定义标记，以来加强表单的可用性，如果在<code>&lt;label&gt;</code>元素内点击文本，浏览器就会自动将焦点转到相关标签上。</p><p>根据上面的例子，我做出了如下修改：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6275a9185904112229793f3b38968126_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-6275a9185904112229793f3b38968126_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-6275a9185904112229793f3b38968126_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6275a9185904112229793f3b38968126_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1a2300ac939c6640f2500edfbbd6b0fd_b.jpg\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"72\" class=\"content_image\" width=\"319\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;319&#39; height=&#39;72&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"72\" class=\"content_image lazy\" width=\"319\" data-actualsrc=\"https://pic2.zhimg.com/v2-1a2300ac939c6640f2500edfbbd6b0fd_b.jpg\"/><figcaption>表现</figcaption></figure><p>改完之后，点击文字也可以选中相应的复选框。</p><h2><b>### 按钮</b></h2><p>在 <code>&lt;input&gt;</code>标签 有三种按钮类型：</p><ul><li>普通按钮 button</li><li>提交按钮 submit</li><li>重置按钮 reset</li></ul><h2><b>#### 普通按钮 button：</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e7161795589815493b5b15ccdcd9461a_b.jpg\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"124\" class=\"content_image\" width=\"374\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;374&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"374\" data-actualsrc=\"https://pic3.zhimg.com/v2-e7161795589815493b5b15ccdcd9461a_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-813c1059bfa2d0dd3988d171ecd24536_b.jpg\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"80\" class=\"content_image\" width=\"314\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;314&#39; height=&#39;80&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"80\" class=\"content_image lazy\" width=\"314\" data-actualsrc=\"https://pic3.zhimg.com/v2-813c1059bfa2d0dd3988d171ecd24536_b.jpg\"/><figcaption>表现</figcaption></figure><p><code>value</code>属性的值会显示在按钮之上。</p><p>在之后学了 JavaScript 我们可以为按钮绑定相应的事件。<br/><b>提交按钮 submit &amp; 重置按钮 reset：</b></p><p>提交 和 重置按钮 都可以被看成是具备特殊功能的普通按钮。</p><ul><li>提交按钮点击后，可以将表单内容提交到服务器；</li><li>重置按钮点击后，可以重置当前表单内部的表单元素；<br/></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-75c374a69c1d9777ccc713b7ecabc7c0_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-75c374a69c1d9777ccc713b7ecabc7c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-75c374a69c1d9777ccc713b7ecabc7c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-75c374a69c1d9777ccc713b7ecabc7c0_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a42fc5c203a618e8d48f5fd7b577a370_b.jpg\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"121\" class=\"content_image\" width=\"318\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;318&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"318\" data-rawheight=\"121\" class=\"content_image lazy\" width=\"318\" data-actualsrc=\"https://pic1.zhimg.com/v2-a42fc5c203a618e8d48f5fd7b577a370_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>#### <code>&lt;button&gt;</code>标签</b></h2><p>前面我们看到的是按钮在<code>&lt;input&gt;</code>标签中的实现。而我们其实还可以用<code>&lt;button&gt;</code>标签实现按钮。</p><p>因为<code>&lt;input&gt;</code>标签是自闭和标签，所以一个弊端是在其内部无法嵌套任何其他标签或文字。而<code>&lt;button&gt;</code>标签就可以实现更多的可能性。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d487cb0e2f42f599c3fece59e94dc5f5_b.jpg\" data-size=\"normal\" data-rawwidth=\"264\" data-rawheight=\"124\" class=\"content_image\" width=\"264\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;264&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"264\" data-rawheight=\"124\" class=\"content_image lazy\" width=\"264\" data-actualsrc=\"https://pic2.zhimg.com/v2-d487cb0e2f42f599c3fece59e94dc5f5_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-992da4fdd76554fd09ae3d60d012177e_b.jpg\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"75\" class=\"content_image\" width=\"319\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;319&#39; height=&#39;75&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"75\" class=\"content_image lazy\" width=\"319\" data-actualsrc=\"https://pic3.zhimg.com/v2-992da4fdd76554fd09ae3d60d012177e_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>### 下拉列表</b></h2><p><code>&lt;select&gt;</code>标签 和 <code>&lt;option&gt;</code>标签 组合使用可以实现下拉列表。可以把它类比做一个可以下拉的无序列表。正常情况下只显示一个选项，当下拉菜单被点击更多选择则显示出来。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fd174935f1e0fba5883d075dc47f044a_b.jpg\" data-size=\"normal\" data-rawwidth=\"281\" data-rawheight=\"217\" class=\"content_image\" width=\"281\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;281&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"281\" data-rawheight=\"217\" class=\"content_image lazy\" width=\"281\" data-actualsrc=\"https://pic3.zhimg.com/v2-fd174935f1e0fba5883d075dc47f044a_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-984f654449d71ffdcabf509452205083_b.jpg\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"105\" class=\"content_image\" width=\"315\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;315&#39; height=&#39;105&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"315\" data-rawheight=\"105\" class=\"content_image lazy\" width=\"315\" data-actualsrc=\"https://pic4.zhimg.com/v2-984f654449d71ffdcabf509452205083_b.jpg\"/><figcaption>表现</figcaption></figure><h2><b>#### 多行文本区域</b></h2><p>使用<code>&lt;textarea&gt;</code>标签定义一个多行的文本输入控件。</p><p>可以通过 <code>cols</code>（列） 和 <code>rows</code>（行） 属性来规定 <code>textarea</code> 的尺寸大小</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0796bffb0b2b98aac7cc6d7f555dc31e_b.jpg\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"161\" class=\"content_image\" width=\"346\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;346&#39; height=&#39;161&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"161\" class=\"content_image lazy\" width=\"346\" data-actualsrc=\"https://pic3.zhimg.com/v2-0796bffb0b2b98aac7cc6d7f555dc31e_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-da62fb8e3aa3b1687c7ec7c4f5e7607f_b.jpg\" data-size=\"normal\" data-rawwidth=\"317\" data-rawheight=\"219\" class=\"content_image\" width=\"317\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;317&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"317\" data-rawheight=\"219\" class=\"content_image lazy\" width=\"317\" data-actualsrc=\"https://pic4.zhimg.com/v2-da62fb8e3aa3b1687c7ec7c4f5e7607f_b.jpg\"/><figcaption>表现</figcaption></figure><p>表单目前我们先介绍这么多，当然表单可远远没这么简单。我们在实际开发中还要学会自己多查资料。</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/html/html-forms.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTML表单参考</a></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 音频 &amp; 视频</b></h2><p>通过<code>&lt;video&gt;</code>标签可以实现往网页中添加视频文件，用<code>&lt;audio&gt;</code>标签添加音频文件。</p><p><b><code>&lt;video&gt;</code>标签：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ef7e37658687c9ecf550b06e4a5a1d5d_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-ef7e37658687c9ecf550b06e4a5a1d5d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-ef7e37658687c9ecf550b06e4a5a1d5d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ef7e37658687c9ecf550b06e4a5a1d5d_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-26274828b2bd90a1643247de97c3ab99_b.jpg\" data-size=\"normal\" data-rawwidth=\"566\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb\" width=\"566\" data-original=\"https://pic2.zhimg.com/v2-26274828b2bd90a1643247de97c3ab99_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;566&#39; height=&#39;351&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"566\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"566\" data-original=\"https://pic2.zhimg.com/v2-26274828b2bd90a1643247de97c3ab99_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-26274828b2bd90a1643247de97c3ab99_b.jpg\"/><figcaption>表现</figcaption></figure><ul><li><code>src</code>属性 定义了视频源文件的地址。</li><li><code>poster</code>属性 定义用户点击播放之前显示的封面</li><li><code>controls</code>属性 定义是否显示播放控件</li><li><code>width</code>属性 定义视频播放器的宽度，高度可以自行随比例变换。</li></ul><p><b><code>&lt;source&gt;</code>标签：</b></p><p>如果你想为视频指定多个视频源的话，可以使用<code>&lt;source&gt;</code>标签，浏览器会根据自己支持的格式去选择。</p><p>根据上面的例子，做出修改：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-910da3240cffadb887ad25942edb214f_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-910da3240cffadb887ad25942edb214f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-910da3240cffadb887ad25942edb214f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-910da3240cffadb887ad25942edb214f_b.jpg\"/><figcaption>代码</figcaption></figure><p><b><code>&lt;audio&gt;</code>标签：</b></p><p>使用<code>&lt;audio&gt;</code>标签可以往网页中添加音频文件。使用方法和<code>&lt;video&gt;</code>基本一样。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0e1e0bf503948a0ea7c2e70d88fd5e51_b.jpg\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"515\" data-original=\"https://pic2.zhimg.com/v2-0e1e0bf503948a0ea7c2e70d88fd5e51_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;515&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"515\" data-original=\"https://pic2.zhimg.com/v2-0e1e0bf503948a0ea7c2e70d88fd5e51_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0e1e0bf503948a0ea7c2e70d88fd5e51_b.jpg\"/><figcaption>代码</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ab7b30a28552d50115e205bd0397404c_b.jpg\" data-size=\"normal\" data-rawwidth=\"330\" data-rawheight=\"100\" class=\"content_image\" width=\"330\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;330&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"330\" data-rawheight=\"100\" class=\"content_image lazy\" width=\"330\" data-actualsrc=\"https://pic1.zhimg.com/v2-ab7b30a28552d50115e205bd0397404c_b.jpg\"/><figcaption>表现</figcaption></figure><p>如果想让音乐自动循环背景播放，可以做出如下修改：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-151886b1a4a04bf1a43ce5208c768026_b.jpg\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic3.zhimg.com/v2-151886b1a4a04bf1a43ce5208c768026_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;523&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"523\" data-original=\"https://pic3.zhimg.com/v2-151886b1a4a04bf1a43ce5208c768026_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-151886b1a4a04bf1a43ce5208c768026_b.jpg\"/><figcaption>代码</figcaption></figure><ul><li>去掉<code>controls</code>属性，因为用户看不到任何控件，则音频为背景播放。</li><li><code>autoplay</code>属性 让音频自动播放。</li><li><code>loop</code>属性 让音频循环播放</li></ul><p>当然我在这里只能介绍一些基本用法，更多内容请大家多多查资料：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/html/html-sounds.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTML多媒体参考</a></p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><h2><b># 前端学习网站推荐</b></h2><p>想要成为一个好的程序员，自学和搜索这两项技能是必须要精通的。在学习前端的过程中，知道去哪里查文档，问问题是很重要的。下面我就推荐一些对初学前端很有帮助的网页吧。</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MDN - Web Docs</a> - 在这里你可以找到权威的Web文档，并且上面也提供从入门到进阶的教程。</li><li><a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">菜鸟学院</a> - 提供各种开发语言的教程与文档，非常全面，日常学习，开发中，菜鸟学院会是你的好帮手的。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.w3cschool.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">W3Cschool</a> - 类似于菜鸟学院，同时这个网站也提供付费教程。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.imooc.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">慕课网</a> - 包含各类开发语言的教学网站，也提供付费课程。对于自学开发很有帮助。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.w3schools.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">W3schools</a> - 与前面不同，这个是外国的前端教学网站。上面提供非常全面的前端实例练习。</li></ul><hr/><h2><b># 练习时间到</b></h2><blockquote>到目前我们已经大概了解了HTML文档是怎么组成的，并且知道了一些常用HTML元素。那么下面我们来试着写一写吧。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>参考<a href=\"https://link.zhihu.com/?target=http%3A//p2fuh27b9.bkt.clouddn.com/18-5-19/4265092.jpg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">示例图（点击查看）</a>，完成一个HTML页面代码编写（不需要关注样式，只关注文档结构）。这是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Garrik-Liu/MyTutorials/blob/master/HTML/Basic/practice.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">我的代码</a>，你可以作为一份参考，</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在这里我推荐大家使用 <a href=\"https://link.zhihu.com/?target=https%3A//codepen.io/pen/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CodePen</a> 作为练习场所。</p><p>这是一个在线前端代码编辑网站。你可以即时看到代码在浏览器中的表现。</p><p>简单！方便！好用！</p><hr/><p>好啦，今天的分享就告一段落啦。下一篇中，我会介绍CSS的基本使用方法。</p><p>传送门：<a href=\"https://zhuanlan.zhihu.com/p/32918324\" class=\"internal\">前端系列教学(入门篇) - CSS初阶（1）</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果喜欢的话就点个关注吧！谢谢各位的支持！</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }
            ], 
            "comments": [
                {
                    "userName": "徵羽", 
                    "userLink": "https://www.zhihu.com/people/90f911aa8725ac51009bc233734c8a8e", 
                    "content": "不错的入门好文，点赞（｡ò ∀ ó｡）", 
                    "likes": 3, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "徵羽"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/9d59b21770a30912505767a9248a990d\" data-hash=\"9d59b21770a30912505767a9248a990d\" data-hovercard=\"p$b$9d59b21770a30912505767a9248a990d\">@meepo</a> 你们的头像一毛一样呢😆</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "meepo", 
                            "userLink": "https://www.zhihu.com/people/9d59b21770a30912505767a9248a990d", 
                            "content": "<p>真的呢。。。。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>竟然有人和我头像一样 😂！！！ 第一次见到 😂。 你是哪里人，我是天津的。我觉得这个照片有家乡特色，Rocking Roll 三立</p>", 
                            "likes": 0, 
                            "replyToAuthor": "meepo"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>另外, &lt;ol&gt;是有序列表吧, 你这里写成无序列表了</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "罐装汽水Garrik", 
                            "userLink": "https://www.zhihu.com/people/bfdf388d47124f2a54f27762a891b670", 
                            "content": "<p>谢谢提醒。改过来了。如果还看到其他问题，希望大家多多帮忙纠错。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "隐藏代码里的百慕大", 
                    "userLink": "https://www.zhihu.com/people/56495719ac653069dc8af10f4c466995", 
                    "content": "谢谢楼主 感谢", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "叫我CBA麦迪", 
                    "userLink": "https://www.zhihu.com/people/f3733de3b8ffeee42ead2fdb2ef83824", 
                    "content": "<p>写的非常好，谢谢了，好人一生平安</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "白衣", 
                    "userLink": "https://www.zhihu.com/people/c619b502798aae721d9e2ccb1be4b39f", 
                    "content": "写的很用心，感谢分享。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "花前月下", 
                    "userLink": "https://www.zhihu.com/people/93f8bd622cff3e86a9178af8effb3de5", 
                    "content": "予人玫瑰，手有余香", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天涯舍区", 
                    "userLink": "https://www.zhihu.com/people/fd73744acf4c0174640a7a17bce8418f", 
                    "content": "谢谢你", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "cnitlrt", 
                    "userLink": "https://www.zhihu.com/people/2e2bbd5c7bdacd99b3f12bb016cb7c43", 
                    "content": "html的程序是用哪个软件编写的啊", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/garrik-qianduan"
}
