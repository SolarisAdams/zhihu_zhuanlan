{
    "title": "自然语言处理", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/zafir-94", 
        "https://www.zhihu.com/people/ashely-8-4", 
        "https://www.zhihu.com/people/yang-zhi-gang-70-1", 
        "https://www.zhihu.com/people/zhang-san-5-26-12", 
        "https://www.zhihu.com/people/zuo-chen-16-86", 
        "https://www.zhihu.com/people/linhx13", 
        "https://www.zhihu.com/people/zhang-duo-long-61", 
        "https://www.zhihu.com/people/he-ying-68", 
        "https://www.zhihu.com/people/lee-77-60-54", 
        "https://www.zhihu.com/people/ha-ha-19-67-13", 
        "https://www.zhihu.com/people/tao-ci-xiao-zhao", 
        "https://www.zhihu.com/people/dan-bo-jian-91", 
        "https://www.zhihu.com/people/programmer_song", 
        "https://www.zhihu.com/people/silence-54-66", 
        "https://www.zhihu.com/people/xiang-xiu-hai", 
        "https://www.zhihu.com/people/feiduan", 
        "https://www.zhihu.com/people/jiang-hong-chang-34-92", 
        "https://www.zhihu.com/people/yp-li-25", 
        "https://www.zhihu.com/people/muyueliuxin", 
        "https://www.zhihu.com/people/du-li-52", 
        "https://www.zhihu.com/people/666233-95-78", 
        "https://www.zhihu.com/people/feign-9", 
        "https://www.zhihu.com/people/hai-dao-chuan-chuan-fu-1738", 
        "https://www.zhihu.com/people/lucius-9-24", 
        "https://www.zhihu.com/people/ye-kong-84-20", 
        "https://www.zhihu.com/people/hjc-83-25", 
        "https://www.zhihu.com/people/xiyao-lin", 
        "https://www.zhihu.com/people/zhu-fu-42-34", 
        "https://www.zhihu.com/people/dun-jia-xiang-ri-kui", 
        "https://www.zhihu.com/people/liang-dong-79-8", 
        "https://www.zhihu.com/people/xierry-41", 
        "https://www.zhihu.com/people/liu-xian-sheng-41-56", 
        "https://www.zhihu.com/people/guo-zhen-38", 
        "https://www.zhihu.com/people/zhu-da-86-33", 
        "https://www.zhihu.com/people/hellohe-65", 
        "https://www.zhihu.com/people/zhou-xiao-xiao-12", 
        "https://www.zhihu.com/people/qiu-nian-39", 
        "https://www.zhihu.com/people/pkunoble", 
        "https://www.zhihu.com/people/cun-shu", 
        "https://www.zhihu.com/people/zzx-47-7", 
        "https://www.zhihu.com/people/yang-yihe-70", 
        "https://www.zhihu.com/people/huan-bu-xiang-bi-ye", 
        "https://www.zhihu.com/people/zonefv", 
        "https://www.zhihu.com/people/jin-bruce-41", 
        "https://www.zhihu.com/people/sun-xiao-mei-66-44", 
        "https://www.zhihu.com/people/fan-yi-32-56", 
        "https://www.zhihu.com/people/harric", 
        "https://www.zhihu.com/people/qi-cheng-lin-10", 
        "https://www.zhihu.com/people/ryan-74-59", 
        "https://www.zhihu.com/people/yunqixu", 
        "https://www.zhihu.com/people/huo-mou-60", 
        "https://www.zhihu.com/people/peter.zhujt", 
        "https://www.zhihu.com/people/zhao-peng-78-4", 
        "https://www.zhihu.com/people/guo-xiao-jie-99-65", 
        "https://www.zhihu.com/people/yang-yang-77-29-53", 
        "https://www.zhihu.com/people/baidaxiaxia", 
        "https://www.zhihu.com/people/moriarty12138", 
        "https://www.zhihu.com/people/tinyeyesd", 
        "https://www.zhihu.com/people/zhang-yang-29-57-14", 
        "https://www.zhihu.com/people/yan-yu-song-40", 
        "https://www.zhihu.com/people/huaiyi-lin", 
        "https://www.zhihu.com/people/zhang-xiao-hui-66-53", 
        "https://www.zhihu.com/people/wa-yuan-91", 
        "https://www.zhihu.com/people/li-qian-yong-60", 
        "https://www.zhihu.com/people/xu-guo-liang-82", 
        "https://www.zhihu.com/people/song-ming-ze-8", 
        "https://www.zhihu.com/people/huang-robin", 
        "https://www.zhihu.com/people/hua-lin-44", 
        "https://www.zhihu.com/people/zhong-bin-92-28", 
        "https://www.zhihu.com/people/wangxiaocvpr", 
        "https://www.zhihu.com/people/wenbin-yan-007", 
        "https://www.zhihu.com/people/sun-hao-71-71", 
        "https://www.zhihu.com/people/cobb-67", 
        "https://www.zhihu.com/people/hong-alex", 
        "https://www.zhihu.com/people/lin-li-yu-14", 
        "https://www.zhihu.com/people/xie-74-87", 
        "https://www.zhihu.com/people/michael-wu-25", 
        "https://www.zhihu.com/people/lao-lin-68", 
        "https://www.zhihu.com/people/xiao-lou-yiye-ting-feng-yu-11", 
        "https://www.zhihu.com/people/chen-lu-4-87", 
        "https://www.zhihu.com/people/williamwhe", 
        "https://www.zhihu.com/people/zheng-shao-yin-56", 
        "https://www.zhihu.com/people/wtzhang95", 
        "https://www.zhihu.com/people/worhol", 
        "https://www.zhihu.com/people/SidneyChang", 
        "https://www.zhihu.com/people/niceworld-49-6", 
        "https://www.zhihu.com/people/fqnz", 
        "https://www.zhihu.com/people/shinysky", 
        "https://www.zhihu.com/people/angela-tang-76", 
        "https://www.zhihu.com/people/xiao-hong-mao-81-18", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/mai-qing-xin-ai", 
        "https://www.zhihu.com/people/xiaoyu4122", 
        "https://www.zhihu.com/people/ma-yu-xiang-4", 
        "https://www.zhihu.com/people/BruceWDZ", 
        "https://www.zhihu.com/people/yang-wu-yan-63", 
        "https://www.zhihu.com/people/cristinao-cong", 
        "https://www.zhihu.com/people/huang-jin-hua-67", 
        "https://www.zhihu.com/people/xuwei0221", 
        "https://www.zhihu.com/people/aslong-46", 
        "https://www.zhihu.com/people/franck-franck", 
        "https://www.zhihu.com/people/guang-ming-gmg", 
        "https://www.zhihu.com/people/meng-huan-1989", 
        "https://www.zhihu.com/people/zhang-yu-kun-23-97", 
        "https://www.zhihu.com/people/xie-jia-hao-24", 
        "https://www.zhihu.com/people/TAT_hanxiao", 
        "https://www.zhihu.com/people/wang-shuai-6-34-86", 
        "https://www.zhihu.com/people/duan-xing-99", 
        "https://www.zhihu.com/people/Aminone", 
        "https://www.zhihu.com/people/zhang-dong-liang-37", 
        "https://www.zhihu.com/people/ma-cong-9-84", 
        "https://www.zhihu.com/people/wayswang", 
        "https://www.zhihu.com/people/cheng-fei-75", 
        "https://www.zhihu.com/people/zhu-ze-de-74", 
        "https://www.zhihu.com/people/zdreams", 
        "https://www.zhihu.com/people/ren-zai-lv-tu-83", 
        "https://www.zhihu.com/people/wang-jian-zhou", 
        "https://www.zhihu.com/people/lingo_", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/qinkang-69", 
        "https://www.zhihu.com/people/liu-fei-94-95", 
        "https://www.zhihu.com/people/qinlibo_nlp", 
        "https://www.zhihu.com/people/xiao-gu-wei-dao-zhu", 
        "https://www.zhihu.com/people/ensub", 
        "https://www.zhihu.com/people/zhang-jia-xin-1203", 
        "https://www.zhihu.com/people/hijackjave", 
        "https://www.zhihu.com/people/boney-62", 
        "https://www.zhihu.com/people/wu-ye-nan-30"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/54491016", 
            "userName": "yuquanle", 
            "userLink": "https://www.zhihu.com/people/2ef2f3f22db11d112791d40288cd7817", 
            "upvote": 114, 
            "title": "自然语言处理中注意力机制综述", 
            "content": "<h2><b>目录</b></h2><ol><li><b>写在前面</b></li><li><b>Seq2Seq 模型</b></li><li><b>NLP中Attention mechanism的起源</b></li><li><b>NLP中的注意力机制</b><br/><b>   4.1 Hierarchical Attention</b><br/><b>   4.2 Self-Attention</b><br/><b>   4.3 Memory-based Attention</b><br/><b>   4.4 Soft/Hard Attention</b><br/><b>   4.5 Global/Local Attention </b></li><li><b>评价指标</b></li><li><b>写在后面</b></li><li><b>参考文献</b></li></ol><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b>1. 写在前面</b></h2><p>近些年来，注意力机制一直频繁的出现在目之所及的文献或者博文中，可见在nlp中算得上是个相当流行的概念，事实也证明其在nlp领域散发出不小得作用。这几年得顶会paper就能看出这一点。本文深入浅出地介绍了自然语言处理中的注意力机制技术。据Lilian Weng博主[1]总结以及一些资料显示，Attention机制最早应该是在视觉图像领域提出来的，这方面的工作应该很多，历史也比较悠久。人类的视觉注意力虽然存在很多不同的模型，但它们都基本上归结为给予需要重点关注的目标区域(注意力焦点)更重要的注意力，同时给予周围的图像低的注意力，然后随着时间的推移调整焦点。而直到Bahdanau等人发表了论文《Neural Machine Translation by Jointly Learning to Align and Translate》，该论文使用类似attention的机制在机器翻译任务上将翻译和对齐同时进行，这个工作目前是最被认可为是第一个提出attention机制应用到NLP领域中，值得一提的是，该论文2015年被ICLR录用，截至现在，谷歌引用量为5596，可见后续nlp在这一块的研究火爆程度。</p><p>注意力机制首先从人类直觉中得到，在nlp领域的机器翻译任务上首先取得不错的应用成功。简而言之，深度学习中的注意力可以广义地解释为重要性权重的向量：<b>为了预测一个元素，例如句子中的单词，使用注意力向量来估计它与其他元素的相关程度有多强，并将其值的总和作为目标的近似值</b>。</p><p>既然注意力机制最早在nlp领域应用于机器翻译任务，那在这个之前又是怎么做的呢？传统的基于短语的翻译系统通过将源句分成多个块然后逐个词地翻译它们来完成它们的任务。 这导致了翻译输出的不流畅。想想我们人类是如何翻译的？我们首先会阅读整个待翻译的句子，然后结合上下文理解其含义，最后产生翻译。在某种程度上，神经机器翻译（NMT）的提出正是想去模仿这一过程。而在NMT的翻译模型中经典的做法是由编码器 - 解码器架构制定(encoder-decoder)，用作encoder和decoder常用的是循环神经网络。这类模型大概过程是首先将源句子的输入序列送入到编码器中，提取最后隐藏的表示并用于初始化解码器的隐藏状态，然后一个接一个地生成目标单词，这个过程广义上可以理解为不断地将前一个时刻 t-1 的输出作为后一个时刻 t 的输入，循环解码，直到输出停止符为止。通过这种方式，NMT解决了传统的基于短语的方法中的局部翻译问题：它可以捕获语言中的长距离依赖性，并提供更流畅的翻译。但是这样做也存在很多缺点，譬如，RNN是健忘的，这意味着前面的信息在经过多个时间步骤传播后会被逐渐消弱乃至消失。其次，在解码期间没有进行对齐操作，因此在解码每个元素的过程中，焦点分散在整个序列中。对于前面那个问题，LSTM、GRU在一定程度能够缓解。而后者正是Bahdanau等人重视的问题。</p><hr/><h2><b>2. Seq2Seq 模型</b></h2><p>在介绍注意力模型之前，不得不先学习一波Encoder-Decoder框架，虽然说注意力模型可以看作一种通用的思想，本身并不依赖于特定框架（比如：<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1609.09189.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Learning Sentence Representation with Guidance of Human Attention</a>），但是目前大多数注意力模型都伴随在Encoder-Decoder框架下。seq2seq模型最早由bengio等人[17]论文《Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation》。然后由Sutskever等人[16]在文章《Sequence to Sequence Learning with Neural Networks》中提出改进模型。</p><p>从广义上讲，它的目的是将输入序列（源序列）转换为新的输出序列（目标序列），并且不限制两个序列的长度，换句话说，二个序列的长度可以任意。以nlp领域来说，序列可以是句子、段落、篇章等，所以我们也可以把它看作处理由一个句子（段落或篇章）生成另外一个句子（段落或篇章）的通用处理模型。对于句子对，我们期望输入句子Source，期待通过Encoder-Decoder框架来生成目标句子Target。Source和Target可以是同一种语言，也可以是两种不同的语言，若是不同语言，就可以处理翻译问题了。若是相同语言，输入序列Source长度为篇章，而目标序列Target为小段落则可以处理文本摘要问题(目标序列Target为句子则可以处理标题生成问题)等等等。seq2seq模型通常具有编码器 - 解码器架构:</p><ul><li> 编码器encoder:  编码器处理输入序列并将序列信息压缩成固定长度的上下文向量（语义编码/语义向量context）。期望这个向量能够比较好的表示输入序列的信息。<br/> </li><li> 解码器decoder: 利用上下文向量初始化解码器以得到变换后的目标序列输出。早期工作仅使用编码器的最后状态作为解码器的输入。<br/> </li><li> 编码器和解码器都是循环神经网络，比较常见的是使用LSTM或GRU。<br/> </li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b8d29cbd3cd4eec70576c4b437304a97_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2268\" data-rawheight=\"804\" class=\"origin_image zh-lightbox-thumb\" width=\"2268\" data-original=\"https://pic4.zhimg.com/v2-b8d29cbd3cd4eec70576c4b437304a97_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2268&#39; height=&#39;804&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2268\" data-rawheight=\"804\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2268\" data-original=\"https://pic4.zhimg.com/v2-b8d29cbd3cd4eec70576c4b437304a97_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b8d29cbd3cd4eec70576c4b437304a97_b.jpg\"/></figure><p>                                                        编码器 - 解码器模型</p><hr/><h2><b>3. NLP中Attention mechanism的起源</b></h2><p>前面谈到在Seq2Seq结构中，encoder把所有的输入序列都编码成一个统一的语义向量context，然后再由decoder解码。而context自然也就成了限制模型性能的瓶颈。譬如机器翻译问题，当要翻译的句子较长时，一个context可能存不下那么多信息。除此之外，只用编码器的最后一个隐藏层状态，感觉上都不是很合理。实际上当我们翻译的时候譬如：Source:机器学习--&gt;Target:machine learning。当decoder要生成&#34;machine&#34;的时候，应该更关注&#34;机器&#34;，而生成&#34;learning&#34;的时候，应该给予&#34;学习&#34;更大的权重。所以如果要改进Seq2Seq结构，一个不错的想法自然就是利用encoder所有隐藏层状态解决context限制问题。</p><p>Bahdanau等人[3]把attention机制用到了神经网络机器翻译（NMT）上。传统的encoder-decoder模型通过encoder将Source序列编码到一个固定维度的中间语义向量context，然后在使用decoder进行解码翻译到目标语言序列。前面谈到了这种做法的局限性，而且，Bahdanau等人[3]在摘要也说到这个context可能是提高这种基本编码器 - 解码器架构性能的瓶颈，那Bahdanau等人又是如何尝试缓解这个问题的呢？让我们来一探究竟，作者为了缓解中间向量context很难将Source序列所有必要信息压缩进来的问题，特别是对于那些很长的句子。提出在机器翻译任务上在 encoder–decoder 做出了如下扩展：将翻译和对齐联合学习。这个操作在生成Target序列的每个词时，用到的中间语义向量context是Source序列通过encoder的隐藏层的加权和，而传统的做法是只用encoder最后一个输出 <img src=\"https://www.zhihu.com/equation?tex=h_t\" alt=\"h_t\" eeimg=\"1\"/> 作为context，这样就能保证在解码不同词的时候，Source序列对现在解码词的贡献是不一样的。想想前面那个例子：&#34;Source:机器学习--&gt;Target:machine learning&#34;(假如中文按照字切分)。decoder在解码&#34;machine&#34;时，&#34;机&#34;和&#34;器&#34;提供的权重要更大一些，同样，在解码&#34;learning&#34;时，&#34;学&#34;和&#34;习&#34;提供的权重相应的会更大一些，这在直觉也和人类翻译也是一致的。通过这种attention的设计，作者将Source序列的每个词(通过encoder的隐藏层输出)和Target序列(当前要翻译的词)的每个词巧妙的建立了联系。想一想，翻译每个词的时候，都有一个语义向量，而这个语义向量是Source序列每个词通过encoder之后的隐藏层的加权和。 由此可以得到一个Source序列和Target序列的对齐矩阵，通过可视化这个矩阵，可以看出在翻译一个词的时候，Source序列的每个词对当前要翻译词的重要性分布，这在直觉上也能给人一种可解释性的感觉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>论文中的图也能很好的看出这一点：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d6cb35dfe072547b979c33422bb62c36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"261\" data-rawheight=\"341\" class=\"content_image\" width=\"261\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;261&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"261\" data-rawheight=\"341\" class=\"content_image lazy\" width=\"261\" data-actualsrc=\"https://pic3.zhimg.com/v2-d6cb35dfe072547b979c33422bb62c36_b.jpg\"/></figure><p>                                                          生成第t个目标词 <img src=\"https://www.zhihu.com/equation?tex=y_t\" alt=\"y_t\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>更形象一点可以看这个图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f8b257753fbfbbae7be4547dc14f0cd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2158\" data-rawheight=\"1120\" class=\"origin_image zh-lightbox-thumb\" width=\"2158\" data-original=\"https://pic3.zhimg.com/v2-f8b257753fbfbbae7be4547dc14f0cd6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2158&#39; height=&#39;1120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2158\" data-rawheight=\"1120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2158\" data-original=\"https://pic3.zhimg.com/v2-f8b257753fbfbbae7be4547dc14f0cd6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f8b257753fbfbbae7be4547dc14f0cd6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在让我们从公式层面来看看这个东东(加粗变量表示它们是向量，这篇文章中的其他地方也一样)。 假设我们有一个长度为n的源序列x，并尝试输出长度为m的目标序列y：</p><p><img src=\"https://www.zhihu.com/equation?tex=%25+%3C%21%5BCDATA%5B+%5Cbegin%7Baligned%7D+%5Cmathbf%7Bx%7D+%26%3D+%5Bx_1%2C+x_2%2C+%5Cdots%2C+x_n%5D+%5C+%5Cmathbf%7By%7D+%26%3D+%5By_1%2C+y_2%2C+%5Cdots%2C+y_m%5D+%5Cend%7Baligned%7D+%25%5D%5D%3E\" alt=\"% &lt;![CDATA[ \\begin{aligned} \\mathbf{x} &amp;= [x_1, x_2, \\dots, x_n] \\ \\mathbf{y} &amp;= [y_1, y_2, \\dots, y_m] \\end{aligned} %]]&gt;\" eeimg=\"1\"/> <img src=\"https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+%5Cmathbf%7Bx%7D+%26%3D+%5Bx_1%2C+x_2%2C+%5Cdots%2C+x_n%5D++%5Cend%7Baligned%7D+%25%5D+\" alt=\" \\begin{aligned} \\mathbf{x} &amp;= [x_1, x_2, \\dots, x_n]  \\end{aligned} %] \" eeimg=\"1\"/> </p><p><img src=\"https://www.zhihu.com/equation?tex=++%5Cbegin%7Baligned%7D++%5Cmathbf%7By%7D++%26%3D+%5By_1%2C+y_2%2C+%5Cdots%2C+y_m%5D+%5Cend%7Baligned%7D+%25%5D\" alt=\"  \\begin{aligned}  \\mathbf{y}  &amp;= [y_1, y_2, \\dots, y_m] \\end{aligned} %]\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者采样bidirectional RNN作为encoder(实际上这里可以有很多选择)，具有前向隐藏状态 <img src=\"https://www.zhihu.com/equation?tex=%5Coverrightarrow%7B%5Cboldsymbol%7Bh%7D%7D_i\" alt=\"\\overrightarrow{\\boldsymbol{h}}_i\" eeimg=\"1\"/> 和后向隐藏状态 <img src=\"https://www.zhihu.com/equation?tex=%5Coverleftarrow%7B%5Cboldsymbol%7Bh%7D%7D_i\" alt=\"\\overleftarrow{\\boldsymbol{h}}_i\" eeimg=\"1\"/> 。为了获得词的上下文信息，作者采用简单串联方式将前向和后向表示拼接作为encoder的隐藏层状态，公式如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7Bh%7D_i+%3D+%5B%5Coverrightarrow%7B%5Cboldsymbol%7Bh%7D%7D_i%5E%5Ctop%3B+%5Coverleftarrow%7B%5Cboldsymbol%7Bh%7D%7D_i%5E%5Ctop%5D%5E%5Ctop%2C+i%3D1%2C%5Cdots%2Cn\" alt=\"\\boldsymbol{h}_i = [\\overrightarrow{\\boldsymbol{h}}_i^\\top; \\overleftarrow{\\boldsymbol{h}}_i^\\top]^\\top, i=1,\\dots,n\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于目标(输出)序列的每个词(假设位置为t)，decoder网络的隐藏层状态 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7Bs%7D_t%3Df%28%5Cboldsymbol%7Bs%7D_%7Bt-1%7D%2C+y_%7Bt-1%7D%2C+%5Cmathbf%7Bc%7D_t%29\" alt=\"\\boldsymbol{s}_t=f(\\boldsymbol{s}_{t-1}, y_{t-1}, \\mathbf{c}_t)\" eeimg=\"1\"/> ，其中 <img src=\"https://www.zhihu.com/equation?tex=t%3D1%2C%5Cdots%2Cm\" alt=\"t=1,\\dots,m\" eeimg=\"1\"/>,语义向量<img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7Bc%7D_t\" alt=\"\\mathbf{c}_t\" eeimg=\"1\"/> 是源(输入)序列的隐藏状态的加权和，权重为对齐分数：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-60fb10d3824da55671b978c67108313d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb\" width=\"659\" data-original=\"https://pic2.zhimg.com/v2-60fb10d3824da55671b978c67108313d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;659&#39; height=&#39;160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"659\" data-original=\"https://pic2.zhimg.com/v2-60fb10d3824da55671b978c67108313d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-60fb10d3824da55671b978c67108313d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>(注意：这里的score函数为原文的a函数，原文的描述为： <img src=\"https://www.zhihu.com/equation?tex=e_%7Bij%7D+%3D+a%28s_%7Bi-1%7D%2C+h_j%29\" alt=\"e_{ij} = a(s_{i-1}, h_j)\" eeimg=\"1\"/> is an alignment model)</p><p>对齐模型基于 <img src=\"https://www.zhihu.com/equation?tex=x_i\" alt=\"x_i\" eeimg=\"1\"/> (在i时刻的输入)和 <img src=\"https://www.zhihu.com/equation?tex=y_t\" alt=\"y_t\" eeimg=\"1\"/> (在t时刻的输出)的匹配程度分配分数 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha_%7Bt%2Ci%7D\" alt=\"\\alpha_{t,i}\" eeimg=\"1\"/> 。集合 <img src=\"https://www.zhihu.com/equation?tex=%7B%5Calpha_%7Bt%2C+i%7D%7D\" alt=\"{\\alpha_{t, i}}\" eeimg=\"1\"/> 是定义每个目标(输出)单词应该考虑给每个源(输入)隐藏状态的多大的权重(这恰恰反映了对此时解码的目标单词的贡献重要性)。</p><p>在Bahdanau[3]的论文中，作者将对齐模型参数化为前馈神经网络，该网络与所提出的系统的所有其他组件共同训练。因此，score函数采用以下形式，tanh用作非线性激活函数，公式如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bscore%7D%28%5Cboldsymbol%7Bs%7D_t%2C+%5Cboldsymbol%7Bh%7D_i%29+%3D+%5Cmathbf%7Bv%7D_a%5E%5Ctop+%5Ctanh%28%5Cmathbf%7BW%7D_a%5B%5Cboldsymbol%7Bs%7D_t%3B+%5Cboldsymbol%7Bh%7D_i%5D%29\" alt=\"\\text{score}(\\boldsymbol{s}_t, \\boldsymbol{h}_i) = \\mathbf{v}_a^\\top \\tanh(\\mathbf{W}_a[\\boldsymbol{s}_t; \\boldsymbol{h}_i])\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>其中 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7Bv%7D_a\" alt=\"\\mathbf{v}_a\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7BW%7D_a\" alt=\"\\mathbf{W}_a\" eeimg=\"1\"/> 都是在对齐模型中学习的权重矩阵。对齐分数矩阵是一个很好的可解释性的东东，可以明确显示源词和目标词之间的相关性。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3385a6479877b4749714afa936c6a328_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"432\" class=\"origin_image zh-lightbox-thumb\" width=\"811\" data-original=\"https://pic1.zhimg.com/v2-3385a6479877b4749714afa936c6a328_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;811&#39; height=&#39;432&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"432\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"811\" data-original=\"https://pic1.zhimg.com/v2-3385a6479877b4749714afa936c6a328_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3385a6479877b4749714afa936c6a328_b.jpg\"/></figure><p>                                                             对齐矩阵例子</p><p class=\"ztext-empty-paragraph\"><br/></p><p>而decoder每个词的条件概率为： <img src=\"https://www.zhihu.com/equation?tex=+p%28%7By_t%7Cy_1%2C...%2Cy_%7Bt-1%7D%7D%2C+%5Cmathbf%7Bx%7D%29%3Dg%28y_%7Bt-1%7D%2C+s_t%2C+c_t%29\" alt=\" p({y_t|y_1,...,y_{t-1}}, \\mathbf{x})=g(y_{t-1}, s_t, c_t)\" eeimg=\"1\"/> </p><p>g为非线性的，可能是多层的输出 <img src=\"https://www.zhihu.com/equation?tex=y_t\" alt=\"y_t\" eeimg=\"1\"/> 概率的函数， <img src=\"https://www.zhihu.com/equation?tex=s_t\" alt=\"s_t\" eeimg=\"1\"/> 是RNN的隐藏状态, <img src=\"https://www.zhihu.com/equation?tex=c_t\" alt=\"c_t\" eeimg=\"1\"/> 为语义向量。</p><hr/><h2><b>4. NLP中的注意力机制</b></h2><p>随着注意力机制的广泛应用，在某种程度上缓解了源序列和目标序列由于距离限制而难以建模依赖关系的问题。现在已经涌现出了一大批基于基本形式的注意力的不同变体来处理更复杂的任务。让我们一起来看看其在不同NLP问题中的注意力机制。</p><p>其实我们可能已经意识到了，对齐模型的设计不是唯一的，确实，在某种意义上说，根据不同的任务设计适应于特定任务的对齐模型可以看作设计出了新的attention变体，让我们再看看这个模型(函数)： <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bscore%7D%28%5Cboldsymbol%7Bs%7D_t%2C+%5Cboldsymbol%7Bh%7D_i%29\" alt=\"\\text{score}(\\boldsymbol{s}_t, \\boldsymbol{h}_i)\" eeimg=\"1\"/> 。再来看几个代表性的work。</p><ul><li> Citation[5]等人提出Content-base attention，其对齐函数模型设计为： <br/><br/><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bscore%7D%28%5Cboldsymbol%7Bs%7D_t%2C+%5Cboldsymbol%7Bh%7D_i%29+%3D+%5Ctext%7Bcosine%7D%5B%5Cboldsymbol%7Bs%7D_t%2C+%5Cboldsymbol%7Bh%7D_i%5D\" alt=\"\\text{score}(\\boldsymbol{s}_t, \\boldsymbol{h}_i) = \\text{cosine}[\\boldsymbol{s}_t, \\boldsymbol{h}_i]\" eeimg=\"1\"/> 。<br/> </li><li> Bahdanau[3]等人的Additive(*)，其设计为：<br/><br/> <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bscore%7D%28%5Cboldsymbol%7Bs%7D_t%2C+%5Cboldsymbol%7Bh%7D_i%29+%3D+%5Cmathbf%7Bv%7D_a%5E%5Ctop+%5Ctanh%28%5Cmathbf%7BW%7D_a%5B%5Cboldsymbol%7Bs%7D_t%3B+%5Cboldsymbol%7Bh%7D_i%5D%29\" alt=\"\\text{score}(\\boldsymbol{s}_t, \\boldsymbol{h}_i) = \\mathbf{v}_a^\\top \\tanh(\\mathbf{W}_a[\\boldsymbol{s}_t; \\boldsymbol{h}_i])\" eeimg=\"1\"/>。<br/> </li><li> Luong[4]等人文献包含了几种方式：<br/> </li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-63fdedcb0e8b19866510174c73dd7bb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb\" width=\"621\" data-original=\"https://pic1.zhimg.com/v2-63fdedcb0e8b19866510174c73dd7bb0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;621&#39; height=&#39;171&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"621\" data-original=\"https://pic1.zhimg.com/v2-63fdedcb0e8b19866510174c73dd7bb0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-63fdedcb0e8b19866510174c73dd7bb0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>以及Luong[4]等人还尝试过location-based function： <img src=\"https://www.zhihu.com/equation?tex=%5Calpha_%7Bt%2Ci%7D+%3D+%5Ctext%7Bsoftmax%7D%28%5Cmathbf%7BW%7D_a+%5Cboldsymbol%7Bs%7D_t%29\" alt=\"\\alpha_{t,i} = \\text{softmax}(\\mathbf{W}_a \\boldsymbol{s}_t)\" eeimg=\"1\"/> 。这种方法的对齐分数仅从目标隐藏状态学习得到。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li> Vaswani[6]等人的Scaled Dot-Product(^)： <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bscore%7D%28%5Cboldsymbol%7Bs%7D_t%2C+%5Cboldsymbol%7Bh%7D_i%29+%3D+%5Cfrac%7B%5Cboldsymbol%7Bs%7D_t%5E%5Ctop%5Cboldsymbol%7Bh%7D_i%7D%7B%5Csqrt%7Bn%7D%7D\" alt=\"\\text{score}(\\boldsymbol{s}_t, \\boldsymbol{h}_i) = \\frac{\\boldsymbol{s}_t^\\top\\boldsymbol{h}_i}{\\sqrt{n}}\" eeimg=\"1\"/> 。细心的童鞋可能早就发现了这东东和点积注意力很像，只是加了个scale factor。当输入较大时，softmax函数可能具有极小的梯度，难以有效学习，所以作者加入比例因子 <img src=\"https://www.zhihu.com/equation?tex=1%2F%5Csqrt%7Bn%7D\" alt=\"1/\\sqrt{n}\" eeimg=\"1\"/> 。<br/> </li><li> Cheng[7]等人的Self-Attention(&amp;)可以关联相同输入序列的不同位置。 从理论上讲，Self-Attention可以采用上面的任何 score functions。在一些文章中也称为“intra-attention” 。<br/> </li></ul><p>Hu[7]对此分了个类：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-06c6d7c1d09a60a6b8e5932d5a43e052_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1639\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"1639\" data-original=\"https://pic3.zhimg.com/v2-06c6d7c1d09a60a6b8e5932d5a43e052_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1639&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1639\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1639\" data-original=\"https://pic3.zhimg.com/v2-06c6d7c1d09a60a6b8e5932d5a43e052_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-06c6d7c1d09a60a6b8e5932d5a43e052_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>前面谈到的一些Basic Attention给人的感觉能够从序列中根据权重分布提取重要元素。而Multi-dimensional Attention能够捕获不同表示空间中的term之间的多个交互，这一点简单的实现可以通过直接将多个单维表示堆叠在一起构建。Wang[8]等人提出了coupled multi-layer attentions，该模型属于多层注意力网络模型。作者称，通过这种多层方式，该模型可以进一步利用术语之间的间接关系，以获得更精确的信息。</p><hr/><p><b>4.1 Hierarchical Attention</b></p><p>再来看看Hierarchical Attention，Yang[9]等人提出了Hierarchical Attention Networks，看下面的图可能会更直观：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-209fe30a2fb427f7e47e5b864d370b83_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb\" width=\"599\" data-original=\"https://pic4.zhimg.com/v2-209fe30a2fb427f7e47e5b864d370b83_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;599&#39; height=&#39;676&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"599\" data-original=\"https://pic4.zhimg.com/v2-209fe30a2fb427f7e47e5b864d370b83_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-209fe30a2fb427f7e47e5b864d370b83_b.jpg\"/></figure><p>                                         Hierarchical Attention Networks</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这种结构能够反映文档的层次结构。模型在单词和句子级别分别设计了两个不同级别的注意力机制，这样做能够在构建文档表示时区别地对待这些内容。Hierarchical attention可以相应地构建分层注意力，自下而上（即，词级到句子级）或自上而下（词级到字符级），以提取全局和本地的重要信息。自下而上的方法上面刚谈完。那么自上而下又是如何做的呢？让我们看看Ji[10]等人的模型：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-60fa6627bcdd2d95c8a0a51750c0ca6e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic3.zhimg.com/v2-60fa6627bcdd2d95c8a0a51750c0ca6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;584&#39; height=&#39;405&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"584\" data-original=\"https://pic3.zhimg.com/v2-60fa6627bcdd2d95c8a0a51750c0ca6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-60fa6627bcdd2d95c8a0a51750c0ca6e_b.jpg\"/></figure><p>                                        Nested Attention Hybrid Model</p><p class=\"ztext-empty-paragraph\"><br/></p><p>和机器翻译类似，作者依旧采用encoder-decoder架构，然后用word-level attention对全局语法和流畅性纠错，设计character-level attention对本地拼写错误纠正。</p><hr/><p><b>4.2 Self-Attention</b></p><p>那Self-Attention又是指什么呢？</p><p>Self-Attention(自注意力)，也称为&#34;intra-attention&#34;(内部注意力)，是关联单个序列的不同位置的注意力机制，以便计算序列的交互表示。 它已被证明在很多领域十分有效比如机器阅读，文本摘要或图像描述生成。</p><ul><li>比如Cheng[11]等人在机器阅读里面利用了自注意力。当前单词为红色，蓝色阴影的大小表示激活程度，自注意力机制使得能够学习当前单词和句子前一部分词之间的相关性。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-475dde652791fa701293154022380b4b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1652\" data-rawheight=\"1034\" class=\"origin_image zh-lightbox-thumb\" width=\"1652\" data-original=\"https://pic4.zhimg.com/v2-475dde652791fa701293154022380b4b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1652&#39; height=&#39;1034&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1652\" data-rawheight=\"1034\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1652\" data-original=\"https://pic4.zhimg.com/v2-475dde652791fa701293154022380b4b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-475dde652791fa701293154022380b4b_b.jpg\"/></figure><p>                               当前单词为红色，蓝色阴影的大小表示激活程度</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>比如Xu[12]等人利用自注意力在图像描述生成任务。注意力权重的可视化清楚地表明了模型关注的图像的哪些区域以便输出某个单词。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0b71c13b145da7f94fffbe844a4b57de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"1262\" class=\"origin_image zh-lightbox-thumb\" width=\"1999\" data-original=\"https://pic3.zhimg.com/v2-0b71c13b145da7f94fffbe844a4b57de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1999&#39; height=&#39;1262&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"1262\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1999\" data-original=\"https://pic3.zhimg.com/v2-0b71c13b145da7f94fffbe844a4b57de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0b71c13b145da7f94fffbe844a4b57de_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们假设序列元素为 <img src=\"https://www.zhihu.com/equation?tex=V%3D%7Bv_i%7D\" alt=\"V={v_i}\" eeimg=\"1\"/> ，其匹配向量为 <img src=\"https://www.zhihu.com/equation?tex=u\" alt=\"u\" eeimg=\"1\"/> 。让我们再来回顾下前面说的基本注意力的对齐函数，attention score通过 <img src=\"https://www.zhihu.com/equation?tex=a%28u%2C+v_i%29\" alt=\"a(u, v_i)\" eeimg=\"1\"/> 计算得到，由于是通过将外部 <img src=\"https://www.zhihu.com/equation?tex=u\" alt=\"u\" eeimg=\"1\"/> 与每个元素 <img src=\"https://www.zhihu.com/equation?tex=v_i\" alt=\"v_i\" eeimg=\"1\"/> 匹配来计算注意力，所以这种形式可以看作是外部注意力。当我们把外部u替换成序列本身(或部分本身)，这种形式就可以看作为内部注意力(internal attention)。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们根据文章[7]中的例子来看看这个过程，例如句子:&#34;Volleyball match is in progress between ladies&#34;。句子中其它单词都依赖着&#34;match&#34;，理想情况下，我们希望使用自我注意力来自动捕获这种内在依赖。换句话说，自注意力可以解释为，每个单词 <img src=\"https://www.zhihu.com/equation?tex=v_i\" alt=\"v_i\" eeimg=\"1\"/> 去和V序列中的内部模式 <img src=\"https://www.zhihu.com/equation?tex=v%27\" alt=\"v&#39;\" eeimg=\"1\"/> ，匹配函数 <img src=\"https://www.zhihu.com/equation?tex=a%28v%27%2C+v_i%29\" alt=\"a(v&#39;, v_i)\" eeimg=\"1\"/> 。 <img src=\"https://www.zhihu.com/equation?tex=v%27\" alt=\"v&#39;\" eeimg=\"1\"/> 很自然的选择为V中其它单词 <img src=\"https://www.zhihu.com/equation?tex=v_j\" alt=\"v_j\" eeimg=\"1\"/> ，这样遍可以计算成对注意力得分。为了完全捕捉序列中单词之间的复杂相互作用，我们可以进一步扩展它以计算序列中每对单词之间的注意力。这种方式让每个单词和序列中其它单词交互了关系。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-84bb3e6791b0a5b77806826722ef3c55_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"231\" data-rawheight=\"71\" class=\"content_image\" width=\"231\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;231&#39; height=&#39;71&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"231\" data-rawheight=\"71\" class=\"content_image lazy\" width=\"231\" data-actualsrc=\"https://pic2.zhimg.com/v2-84bb3e6791b0a5b77806826722ef3c55_b.jpg\"/></figure><p>另一方面，自注意力还可以自适应方式学习复杂的上下文单词表示。譬如经典文章：&#34;A structured self-attentive sentence embedding&#34;。这篇文章提出了一种通过引入自注意力机制来提取可解释句子嵌入的新模型。 使用二维矩阵而不是向量来代表嵌入，矩阵的每一行都在句子的不同部分，想深入了解的可以去看看这篇文章，另外，文章的公式感觉真的很漂亮。</p><p>值得一提还有2017年谷歌提出的Transformer[6]，这是一种新颖的基于注意力的机器翻译架构，也是一个混合神经网络，具有前馈层和自注意层。论文的题目挺霸气：Attention is All you Need，毫无疑问，它是2017年最具影响力和最有趣的论文之一。那这篇文章的Transformer的庐山真面目到底是这样的呢？</p><p>这篇文章为提出许多改进，在完全抛弃了RNN的情况下进行seq2seq建模。接下来一起来详细看看吧。</p><hr/><p><b>Key, Value and Query：</b></p><p>众所周知，在NLP任务中，通常的处理方法是先分词，然后每个词转化为对应的词向量。接着一般最常见的有二类操作，<b>第一类是接RNN</b>（变体LSTM、GRU、SRU等），但是这一类方法没有摆脱时序这个局限，也就是说无法并行，也导致了在大数据集上的速度效率问题。<b>第二类是接CNN，</b>CNN方便并行，而且容易捕捉到一些全局的结构信息。很长一段时间都是以上二种的抉择以及改造，知道谷歌提供了第三类思路：<b>纯靠注意力</b>，也就是现在要讲的这个东东。</p><p>将输入序列编码表示视为一组键值对（K，V）以及查询 Q，因为文章取K=V=Q，所以也自然称为Self Attention。</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BAttention%7D%28%5Cmathbf%7BQ%7D%2C+%5Cmathbf%7BK%7D%2C+%5Cmathbf%7BV%7D%29+%3D+%5Ctext%7Bsoftmax%7D%28%5Cfrac%7B%5Cmathbf%7BQ%7D%5Cmathbf%7BK%7D%5E%5Ctop%7D%7B%5Csqrt%7Bn%7D%7D%29%5Cmathbf%7BV%7D\" alt=\"\\text{Attention}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) = \\text{softmax}(\\frac{\\mathbf{Q}\\mathbf{K}^\\top}{\\sqrt{n}})\\mathbf{V}\" eeimg=\"1\"/> </p><p>K, V像是key-value的关系从而是一一对应的，那么上式的意思就是通过Q中每个元素query，与K中各个元素求内积然后softmax的方式，来得到Q中元素与V中元素的相似度，然后加权求和，得到一个新的向量。其中因子 <img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7Bn%7D\" alt=\"\\sqrt{n}\" eeimg=\"1\"/> 为了使得内积不至于太大。以上公式在文中也称为<b>点积注意力(scaled dot-product attention)</b>：输出是值的加权和，其中分配给每个值的权重由查询的点积与所有键确定</p><p>而Transformer主要由多头自注意力(Multi-Head Self-Attention)单元组成。 在NMT的上下文中，键和值都是编码器隐藏状态。 在解码器中，先前的输出被压缩成查询Q，并且通过映射该查询以及该组键和值来产生下一个输出。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么Multi-Head Self-Attention又是什么呢？以下为论文中的图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6d2a0924662b46a3d63ec43bccd08d28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"746\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-6d2a0924662b46a3d63ec43bccd08d28_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;746&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"746\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-6d2a0924662b46a3d63ec43bccd08d28_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6d2a0924662b46a3d63ec43bccd08d28_b.jpg\"/></figure><p>                     Multi-head scaled dot-product attention mechanism</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Multi-Head Self-Attention不是仅仅计算一次注意力，而是多次并行地通过缩放的点积注意力。 独立的注意力输出被简单地连接并线性地转换成预期的维度。论文表示，多头注意力允许模型共同关注来自不同位置的不同表示子空间的信息。 只有一个注意力的头，平均值就会抑制这一点。</p><p><img src=\"https://www.zhihu.com/equation?tex=%25+%3C%21%5BCDATA%5B+%5Cbegin%7Baligned%7D+%5Ctext%7BMultiHead%7D%28%5Cmathbf%7BQ%7D%2C+%5Cmathbf%7BK%7D%2C+%5Cmathbf%7BV%7D%29+%26%3D+%5B%5Ctext%7Bhead%7D_1%3B+%5Cdots%3B+%5Ctext%7Bhead%7D_h%5D%5Cmathbf%7BW%7D%5EO+%5C%5C+%5Ctext%7Bwhere+head%7D_i+%26%3D+%5Ctext%7BAttention%7D%28%5Cmathbf%7BQ%7D%5Cmathbf%7BW%7D%5EQ_i%2C+%5Cmathbf%7BK%7D%5Cmathbf%7BW%7D%5EK_i%2C+%5Cmathbf%7BV%7D%5Cmathbf%7BW%7D%5EV_i%29+%5Cend%7Baligned%7D+%25%5D%5D%3E\" alt=\"% &lt;![CDATA[ \\begin{aligned} \\text{MultiHead}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) &amp;= [\\text{head}_1; \\dots; \\text{head}_h]\\mathbf{W}^O \\\\ \\text{where head}_i &amp;= \\text{Attention}(\\mathbf{Q}\\mathbf{W}^Q_i, \\mathbf{K}\\mathbf{W}^K_i, \\mathbf{V}\\mathbf{W}^V_i) \\end{aligned} %]]&gt;\" eeimg=\"1\"/> </p><p><img src=\"https://www.zhihu.com/equation?tex=%25+%3C%21%5BCDATA%5B+%5Cbegin%7Baligned%7D+%5Ctext%7BMultiHead%7D%28%5Cmathbf%7BQ%7D%2C+%5Cmathbf%7BK%7D%2C+%5Cmathbf%7BV%7D%29+%26%3D+%5B%5Ctext%7Bhead%7D_1%3B+%5Cdots%3B+%5Ctext%7Bhead%7D_h%5D%5Cmathbf%7BW%7D%5EO+%5C%5C+%5Ctext%7Bwhere+head%7D_i+%26%3D+%5Ctext%7BAttention%7D%28%5Cmathbf%7BQ%7D%5Cmathbf%7BW%7D%5EQ_i%2C+%5Cmathbf%7BK%7D%5Cmathbf%7BW%7D%5EK_i%2C+%5Cmathbf%7BV%7D%5Cmathbf%7BW%7D%5EV_i%29+%5Cend%7Baligned%7D+%25%5D%5D%3E\" alt=\"% &lt;![CDATA[ \\begin{aligned} \\text{MultiHead}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) &amp;= [\\text{head}_1; \\dots; \\text{head}_h]\\mathbf{W}^O \\\\ \\text{where head}_i &amp;= \\text{Attention}(\\mathbf{Q}\\mathbf{W}^Q_i, \\mathbf{K}\\mathbf{W}^K_i, \\mathbf{V}\\mathbf{W}^V_i) \\end{aligned} %]]&gt;\" eeimg=\"1\"/> <img src=\"https://www.zhihu.com/equation?tex=%25+%3C%21%5BCDATA%5B+%5Cbegin%7Baligned%7D+%5Ctext%7BMultiHead%7D%28%5Cmathbf%7BQ%7D%2C+%5Cmathbf%7BK%7D%2C+%5Cmathbf%7BV%7D%29+%26%3D+%5B%5Ctext%7Bhead%7D_1%3B+%5Cdots%3B+%5Ctext%7Bhead%7D_h%5D%5Cmathbf%7BW%7D%5EO+%5C%5C+%5Ctext%7Bwhere+head%7D_i+%26%3D+%5Ctext%7BAttention%7D%28%5Cmathbf%7BQ%7D%5Cmathbf%7BW%7D%5EQ_i%2C+%5Cmathbf%7BK%7D%5Cmathbf%7BW%7D%5EK_i%2C+%5Cmathbf%7BV%7D%5Cmathbf%7BW%7D%5EV_i%29+%5Cend%7Baligned%7D+%25%5D%5D%3E\" alt=\"% &lt;![CDATA[ \\begin{aligned} \\text{MultiHead}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) &amp;= [\\text{head}_1; \\dots; \\text{head}_h]\\mathbf{W}^O \\\\ \\text{where head}_i &amp;= \\text{Attention}(\\mathbf{Q}\\mathbf{W}^Q_i, \\mathbf{K}\\mathbf{W}^K_i, \\mathbf{V}\\mathbf{W}^V_i) \\end{aligned} %]]&gt;\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7BW%7D%5EQ_i\" alt=\"\\mathbf{W}^Q_i\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7BK%7D%5EQ_i\" alt=\"\\mathbf{K}^Q_i\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7BW%7D%5EV_i\" alt=\"\\mathbf{W}^V_i\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbf%7BW%7D%5EO\" alt=\"\\mathbf{W}^O\" eeimg=\"1\"/> 是需要学习的参数矩阵。</p><p>既然为seq2seq模式，自然也包括encoder和decoder，那这篇文章又是如何构建这些的呢？莫急，继续往下看。</p><hr/><p><b>Encoder</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2dbecf2f7167ead8388a4c57e048c78a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb\" width=\"1320\" data-original=\"https://pic3.zhimg.com/v2-2dbecf2f7167ead8388a4c57e048c78a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1320&#39; height=&#39;742&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1320\" data-original=\"https://pic3.zhimg.com/v2-2dbecf2f7167ead8388a4c57e048c78a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2dbecf2f7167ead8388a4c57e048c78a_b.jpg\"/></figure><p>                                             The transformer’s encoder</p><p class=\"ztext-empty-paragraph\"><br/></p><p>编码器生成基于自注意力的表示，其能够从可能无限大的上下文中定位特定信息。值得一提的是，上面的结构文章堆了六个。</p><ul><li>每层都有一个多头自注意力层</li><li>每层都有一个简单的全连接的前馈网络</li><li>每个子层采用残差连接和层规范化。 所有子层输出相同维度dmodel = 512。</li></ul><hr/><p><b>Decoder</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5056000ae3c2a6b5d6ff0bed432282ac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1190\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb\" width=\"1190\" data-original=\"https://pic1.zhimg.com/v2-5056000ae3c2a6b5d6ff0bed432282ac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1190&#39; height=&#39;1024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1190\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1190\" data-original=\"https://pic1.zhimg.com/v2-5056000ae3c2a6b5d6ff0bed432282ac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5056000ae3c2a6b5d6ff0bed432282ac_b.jpg\"/></figure><p>                                          The transformer’s decoder.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>解码器能够从编码表示中检索。上面的结构也堆了六个。</p><ul><li>每层有两个多头注意机制子层。</li><li>每层有一个完全连接的前馈网络子层。</li><li>与编码器类似，每个子层采用残差连接和层规范化。</li></ul><p>与encoder不同的是，第一个多头注意子层被设计成防止关注后续位置，因为我们不希望在预测当前位置时查看目标序列的未来。最后来看一看整体架构：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bfc9d3d95388ac28f6afc25418a417c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"1151\" class=\"origin_image zh-lightbox-thumb\" width=\"1999\" data-original=\"https://pic1.zhimg.com/v2-bfc9d3d95388ac28f6afc25418a417c8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1999&#39; height=&#39;1151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"1151\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1999\" data-original=\"https://pic1.zhimg.com/v2-bfc9d3d95388ac28f6afc25418a417c8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bfc9d3d95388ac28f6afc25418a417c8_b.jpg\"/></figure><p>                               The full model architecture of the transformer.</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p><b>4.3 Memory-based Attention</b></p><p>那Memory-based Attention又是什么呢？我们先换种方式来看前面的注意力，假设有一系列的键值对 <img src=\"https://www.zhihu.com/equation?tex=%7B%28k_i%2Cv_i%29%7D\" alt=\"{(k_i,v_i)}\" eeimg=\"1\"/> 存在内存中和查询向量q，这样便能重写为以下过程：</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><img src=\"https://www.zhihu.com/equation?tex=e_i%3Da%28q%2Ck_i%29\" alt=\"e_i=a(q,k_i)\" eeimg=\"1\"/> (address memory)</li><li><img src=\"https://www.zhihu.com/equation?tex=%5Calpha_i%3D%5Cfrac%7Bexp%28e_i%29%7D%7B%5Csum_%7Bi%7Dexp%28e_i%29%7D\" alt=\"\\alpha_i=\\frac{exp(e_i)}{\\sum_{i}exp(e_i)}\" eeimg=\"1\"/> (normalize)</li><li><img src=\"https://www.zhihu.com/equation?tex=c%3D%5Csum_%7Bi%7D%5Calpha_i+v_i+\" alt=\"c=\\sum_{i}\\alpha_i v_i \" eeimg=\"1\"/> (read contents)</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>这种解释是把注意力作为使用查询q的寻址过程，这个过程基于注意力分数从memory中读取内容。聪明的童鞋肯定已经发现了，如果我们假设<img src=\"https://www.zhihu.com/equation?tex=k_i%3Dv_i\" alt=\"k_i=v_i\" eeimg=\"1\"/> ，这不就是前面谈到的基础注意力么？然而，由于结合了额外的函数，可以实现可重用性和增加灵活性，所以Memory-based attention mechanism可以设计得更加强大。</p><p>那为什么又要这样做呢？在nlp的一些任务上比如问答匹配任务，答案往往与问题间接相关，因此基本的注意力技术就显得很无力了。那处理这一任务该如何做才好呢？这个时候就体现了Memory-based attention mechanism的强大了，譬如Sukhbaatar[18]等人通过迭代内存更新（也称为多跳）来模拟时间推理过程，以逐步引导注意到答案的正确位置：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5023e249482dee20b631bd9b2a40abf5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic2.zhimg.com/v2-5023e249482dee20b631bd9b2a40abf5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;546&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"546\" data-original=\"https://pic2.zhimg.com/v2-5023e249482dee20b631bd9b2a40abf5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5023e249482dee20b631bd9b2a40abf5_b.jpg\"/></figure><p>在每次迭代中，使用新内容更新查询，并且使用更新的查询来检索相关内容。一种简单的更新方法为相加 <img src=\"https://www.zhihu.com/equation?tex=q_%7Bt%2B1%7D%3Dq_t%2Bc_t\" alt=\"q_{t+1}=q_t+c_t\" eeimg=\"1\"/> 。那么还有其它更新方法么？当然有，直觉敏感的童鞋肯定想到了，光是这一点，就可以根据特定任务去设计，比如Kuma[13]等人的工作。这种方式的灵活度也体现在key和value可以自由的被设计，比如我们可以自由地将先验知识结合到key和value嵌入中，以允许它们分别更好地捕获相关信息。看到这里是不是觉得文章灌水其实也不是什么难事了。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p><b>4.4 Soft/Hard Attention</b></p><p>这个概念由《Show, Attend and Tell: Neural Image Caption Generation with Visual Attention》提出，这是对attention另一种分类。SoftAttention本质上和Bahdanau等人[3]很相似，其权重取值在0到1之间，而Hard Attention取值为0或者1。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4.5 Global/Local Attention </b></p><p>Luong等人[4]提出了Global Attention和Local Attention。Global Attention本质上和Bahdanau等人[3]很相似。Global方法顾名思义就是会关注源句子序列的所有词，具体地说，在计算语义向量时，会考虑编码器所有的隐藏状态。而在Local Attention中，计算语义向量时只关注每个目标词的一部分编码器隐藏状态。由于Global方法必须计算源句子序列所有隐藏状态，当句子长度过长会使得计算代价昂贵并使得翻译变得不太实际，比如在翻译段落和文档的时候。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-89ef00ac63aec92c64786a0e0baa282f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1638\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb\" width=\"1638\" data-original=\"https://pic4.zhimg.com/v2-89ef00ac63aec92c64786a0e0baa282f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1638&#39; height=&#39;772&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1638\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1638\" data-original=\"https://pic4.zhimg.com/v2-89ef00ac63aec92c64786a0e0baa282f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-89ef00ac63aec92c64786a0e0baa282f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><h2><b>5.评价指标</b></h2><p>在看一些带有attention的paper时，常常会伴随着为了说明自己文章attention是work的实验，但实际上尝试提供严格数学证明的文章极少。Hu[7]把Attention的评价方式分为两类，Quantitative（定量指标）和Qualitative（定性指标）。定量指标顾名思义就是对attention的贡献就行量化，这一方面一般会结合下游任务，最常见的当属机器翻译，我们都知道机器翻译的最流行评价指标之一是BLEU，我们可以在翻译任务设计attention和不加attention进行对比，对比的指标就是BLEU，设置我们可以设计多种不同的attention进行对比。</p><p>定性指标评价是目前应用最广泛的评价技术，因为它简单易行，便于可视化。具体做法一般都是为整个句子构建一个热力图，其热力图强度与每个单词接收到的标准化注意力得分成正比。也就是说，词的贡献越大，颜色越深。其实这在直觉上也是能够接收的，因为往往相关任务的关键词的attention权值肯定要比其它词重要。比如Hu[7]文中的图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3e4948e3c49d665d36d61dcbcf942929_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb\" width=\"869\" data-original=\"https://pic2.zhimg.com/v2-3e4948e3c49d665d36d61dcbcf942929_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;869&#39; height=&#39;249&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"869\" data-original=\"https://pic2.zhimg.com/v2-3e4948e3c49d665d36d61dcbcf942929_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3e4948e3c49d665d36d61dcbcf942929_b.jpg\"/></figure><hr/><h2><b>6. 写在后面</b></h2><p>本文参考了众多文献，对近些年的自然语言中的注意力机制进行了介绍，从起源、变体到评价方面都进行了简要介绍，但是要明白的是，实际上注意力机制在nlp上的研究特别多，为此，我仅仅对18、19年的文献进行了简单的调研（AAAI、IJCAI、ACL、EMNLP、NAACL等顶会），就至少有一百篇之多，足见attention还是很潮的，所以我也把链接放到了github：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/yuquanle/Attention-Mechanisms-paper/blob/master/Attention-mechanisms-paper.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">yuquanle/Attention-Mechanisms-paper</a>，方便查阅。以后慢慢补充~~</p><p class=\"ztext-empty-paragraph\"><br/></p><p>随便贴个图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cb55059e5df85eb6ddc522d1f5ba9a38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb\" width=\"958\" data-original=\"https://pic1.zhimg.com/v2-cb55059e5df85eb6ddc522d1f5ba9a38_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;958&#39; height=&#39;727&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"958\" data-original=\"https://pic1.zhimg.com/v2-cb55059e5df85eb6ddc522d1f5ba9a38_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cb55059e5df85eb6ddc522d1f5ba9a38_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>7. 参考文献</b></h2><p>[1] <a href=\"https://link.zhihu.com/?target=https%3A//lilianweng.github.io/lil-log/2018/06/24/attention-attention.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Attention? Attention!</a>.</p><p>[2] <a href=\"https://link.zhihu.com/?target=https%3A//github.com/tensorflow/nmt\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Neural Machine Translation (seq2seq) Tutorial</a>.</p><p>[3] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1409.0473.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Neural Machine Translation by Jointly Learning to Align and Translate,</a> Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ICLR, 2015.</p><p>[4] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1508.04025.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Effective approaches to attention-based neural machine translation,</a> Minh-Thang Luong, Hieu Pham, and Christopher D Manning. EMNLP, 2015.</p><p>[5] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1410.5401.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Neural Turing Machines,</a>  Alex Graves, Greg Wayne and Ivo Danihelka. 2014.</p><p>[6] <a href=\"https://link.zhihu.com/?target=http%3A//papers.nips.cc/paper/7181-attention-is-all-you-need.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Attention Is All You Need,</a>   Ashish Vaswani, et al. NIPS, 2017.</p><p>[7] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1811.05544.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">An Introductory Survey on Attention Mechanisms in NLP Problems</a> Dichao Hu, 2018.</p><p>[8] <a href=\"https://link.zhihu.com/?target=http%3A//www.aaai.org/ocs/index.php/AAAI/AAAI17/paper/download/14441/14256\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Coupled Multi-Layer Attentions for Co-Extraction of Aspect and Opinion Terms</a> Wenya Wang,Sinno Jialin Pan, Daniel Dahlmeier and Xiaokui Xiao. AAAI, 2017.</p><p>[9] <a href=\"https://link.zhihu.com/?target=http%3A//www.aclweb.org/anthology/N16-1174\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hierarchical attention networks for document classification</a> Zichao Yang et al. ACL, 2016.</p><p>[10] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1707.02026.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Nested Attention Neural Hybrid Model for Grammatical Error Correction</a> Jianshu Ji et al. 2017.</p><p>[11] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1601.06733.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Long Short-Term Memory-Networks for Machine Reading </a> Jianpeng Cheng, Li Dong and Mirella Lapata. EMNLP, 2016.</p><p>[12] <a href=\"https://link.zhihu.com/?target=http%3A//proceedings.mlr.press/v37/xuc15.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Show, Attend and Tell: Neural Image Caption Generation with Visual Attention</a> Kelvin Xu et al. JMLR, 2015.</p><p>[13] <a href=\"https://link.zhihu.com/?target=http%3A//proceedings.mlr.press/v48/kumar16.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ask me anything: Dynamic memory networks for natural language processing.</a> Zhouhan Lin al. JMLR, 2016.</p><p>[14] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1703.03130.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A structured self-attentive sentence embedding</a> Zhouhan Lin al. ICLR, 2017.</p><p>[15] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1609.09189.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Learning Sentence Representation with Guidance of Human Attention</a> Shaonan Wang , Jiajun Zhang, Chengqing Zong. IJCAI, 2017.</p><p>[16] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1409.3215.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Sequence to Sequence Learning with Neural Networks</a> Ilya Sutskever et al. 2014.</p><p>[17] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1406.1078.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation</a> Kyunghyun Cho, Yoshua Bengio et al. EMNLP, 2014.</p><p>[18] <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1503.08895.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">End-To-End Memory Networks</a> Sainbayar Sukhbaatar et al. NIPS, 2015.</p><p>[19] <a href=\"https://link.zhihu.com/?target=https%3A//kexue.fm/archives/4765\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《Attention is All You Need》浅读（简介+代码）</a></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "自然语言处理", 
                    "tagLink": "https://api.zhihu.com/topics/19560026"
                }, 
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }
            ], 
            "comments": [
                {
                    "userName": "披着狼皮的小红帽", 
                    "userLink": "https://www.zhihu.com/people/77b035540f3272d4d6a4c28821eb7f51", 
                    "content": "不错不错，还在学习NLP，码住", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "yuquanle", 
                            "userLink": "https://www.zhihu.com/people/2ef2f3f22db11d112791d40288cd7817", 
                            "content": "嘿嘿", 
                            "likes": 0, 
                            "replyToAuthor": "披着狼皮的小红帽"
                        }, 
                        {
                            "userName": "披着狼皮的小红帽", 
                            "userLink": "https://www.zhihu.com/people/77b035540f3272d4d6a4c28821eb7f51", 
                            "content": "<p>你好，请教你所知道的目前最高水平最先进的语音识别算法是哪些啊（错词率为标准？），比如论文题目，最近老师给我看Facebook的wav2letter，这个也算一个吧？</p>", 
                            "likes": 0, 
                            "replyToAuthor": "yuquanle"
                        }
                    ]
                }, 
                {
                    "userName": "GT-SP", 
                    "userLink": "https://www.zhihu.com/people/dfa09089a0d521de903a0f0d81bf97d3", 
                    "content": "<p>mark</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1066346535280766976"
}
