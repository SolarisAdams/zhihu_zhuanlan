{
    "title": "算法工程师在线笔试题", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/chen-jing-shi-47", 
        "https://www.zhihu.com/people/linkerlin", 
        "https://www.zhihu.com/people/yu-xiao-yuan-17-59", 
        "https://www.zhihu.com/people/starsingchow", 
        "https://www.zhihu.com/people/huang-x-3-37", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/zhang-yiyang-75", 
        "https://www.zhihu.com/people/ming-ge-zai-ci-diu-lian", 
        "https://www.zhihu.com/people/kl2015-10", 
        "https://www.zhihu.com/people/huang-zhi-ming-37", 
        "https://www.zhihu.com/people/zou-xiang-37-96", 
        "https://www.zhihu.com/people/gao-meng-ji-28", 
        "https://www.zhihu.com/people/josh-25-78", 
        "https://www.zhihu.com/people/ecolaw", 
        "https://www.zhihu.com/people/DINGKAIMENG", 
        "https://www.zhihu.com/people/charon-53-23", 
        "https://www.zhihu.com/people/zan-zan-83-21", 
        "https://www.zhihu.com/people/xiao-xiao-qiao-13", 
        "https://www.zhihu.com/people/zwx-68", 
        "https://www.zhihu.com/people/tara-9-89", 
        "https://www.zhihu.com/people/june-91-14-18", 
        "https://www.zhihu.com/people/qi-lin-44-44", 
        "https://www.zhihu.com/people/yin-zhi-73", 
        "https://www.zhihu.com/people/wu-ming-wei-30-82", 
        "https://www.zhihu.com/people/xi-you-79-91-66", 
        "https://www.zhihu.com/people/xiao-tao-47-89", 
        "https://www.zhihu.com/people/li-jia-54-85-55", 
        "https://www.zhihu.com/people/wells-tomas-40", 
        "https://www.zhihu.com/people/helloqian-xiao-jie", 
        "https://www.zhihu.com/people/Steven_Jokes", 
        "https://www.zhihu.com/people/shen-hai-li-de-xing-xing-3", 
        "https://www.zhihu.com/people/abcd-43-97", 
        "https://www.zhihu.com/people/xxiaowen-zhu", 
        "https://www.zhihu.com/people/jin-huan-85-24", 
        "https://www.zhihu.com/people/dong-rui-34-2", 
        "https://www.zhihu.com/people/huang-nan-42-14", 
        "https://www.zhihu.com/people/ba-la-ba-la-13-7", 
        "https://www.zhihu.com/people/eelva", 
        "https://www.zhihu.com/people/qiu-bo-11-82", 
        "https://www.zhihu.com/people/li-shan-ling-38", 
        "https://www.zhihu.com/people/issuoow", 
        "https://www.zhihu.com/people/ceng-qiang-16-57", 
        "https://www.zhihu.com/people/lu-wei-3-41", 
        "https://www.zhihu.com/people/elasine", 
        "https://www.zhihu.com/people/TIME_X", 
        "https://www.zhihu.com/people/happy-circle-711", 
        "https://www.zhihu.com/people/dong-ge-long-dong-qiang-56", 
        "https://www.zhihu.com/people/huang-yan-3-62", 
        "https://www.zhihu.com/people/you-ran-zi-de-71-22", 
        "https://www.zhihu.com/people/ai-long-98-64", 
        "https://www.zhihu.com/people/cheng-liu-xiang-28", 
        "https://www.zhihu.com/people/weiyongquan", 
        "https://www.zhihu.com/people/zhang-bai-46-2", 
        "https://www.zhihu.com/people/baotong", 
        "https://www.zhihu.com/people/yang-60-6-83", 
        "https://www.zhihu.com/people/liu-wei-ming-37-41", 
        "https://www.zhihu.com/people/liu-xiao-yong-80-42", 
        "https://www.zhihu.com/people/tian-yao-54-24", 
        "https://www.zhihu.com/people/zhang-meng-qin-17", 
        "https://www.zhihu.com/people/lai-bu-ni-ci-44", 
        "https://www.zhihu.com/people/zhang-zhang-93-49-58", 
        "https://www.zhihu.com/people/jiao-shou-50-13", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/li-xuan-90-52", 
        "https://www.zhihu.com/people/wen-luo-39", 
        "https://www.zhihu.com/people/chen-jian-99-90", 
        "https://www.zhihu.com/people/bo-qing-bo-21", 
        "https://www.zhihu.com/people/tie-chui-13", 
        "https://www.zhihu.com/people/wu-ye-kuang-ben-73", 
        "https://www.zhihu.com/people/meiyddd", 
        "https://www.zhihu.com/people/wa-ya-ya-39", 
        "https://www.zhihu.com/people/er-sha-47-65", 
        "https://www.zhihu.com/people/yidian-dian-50-61", 
        "https://www.zhihu.com/people/wang-fei-52-36-6", 
        "https://www.zhihu.com/people/chi-hu-luo-bu-de-pang-miao", 
        "https://www.zhihu.com/people/yu-meng-yu-39", 
        "https://www.zhihu.com/people/zhe-ge-hao-wan-ma-84", 
        "https://www.zhihu.com/people/ibearing", 
        "https://www.zhihu.com/people/wen-jun-peng-55", 
        "https://www.zhihu.com/people/mu-jin-feng-7", 
        "https://www.zhihu.com/people/zheng-tao-4-99", 
        "https://www.zhihu.com/people/rain-27-34", 
        "https://www.zhihu.com/people/ye-dang-qiu-qian", 
        "https://www.zhihu.com/people/liyi-2-78", 
        "https://www.zhihu.com/people/eizo-71-93", 
        "https://www.zhihu.com/people/yu-heng-16-6", 
        "https://www.zhihu.com/people/zi-chen-80-62", 
        "https://www.zhihu.com/people/cha-lin-63-71", 
        "https://www.zhihu.com/people/figo-void", 
        "https://www.zhihu.com/people/chen-zhao-wei-16-2", 
        "https://www.zhihu.com/people/xiao-bi", 
        "https://www.zhihu.com/people/duan-xing-99", 
        "https://www.zhihu.com/people/wang-jing-bo-27-88", 
        "https://www.zhihu.com/people/hui-le-ge-yao", 
        "https://www.zhihu.com/people/rfliu-94", 
        "https://www.zhihu.com/people/lonlon-ago", 
        "https://www.zhihu.com/people/hhhhhhhhh-33-40", 
        "https://www.zhihu.com/people/jajian-66", 
        "https://www.zhihu.com/people/zhao-jun-qi-15-8", 
        "https://www.zhihu.com/people/suan-nai-michelle", 
        "https://www.zhihu.com/people/lao-guo-2-44", 
        "https://www.zhihu.com/people/zhang-min-45-89", 
        "https://www.zhihu.com/people/sha-li-er-c", 
        "https://www.zhihu.com/people/bie-ba-zi-ji-nong-diu-liao", 
        "https://www.zhihu.com/people/wang-hao-61-67-22", 
        "https://www.zhihu.com/people/james-76-48", 
        "https://www.zhihu.com/people/han-qi-zhuo", 
        "https://www.zhihu.com/people/wu-shang-lin-51", 
        "https://www.zhihu.com/people/wu-chun-cheng-98", 
        "https://www.zhihu.com/people/zhao-qing-5-36", 
        "https://www.zhihu.com/people/wan-dao-ming-74", 
        "https://www.zhihu.com/people/toby941", 
        "https://www.zhihu.com/people/wang-da-lei-61-46", 
        "https://www.zhihu.com/people/quan-ci-fang-11-62", 
        "https://www.zhihu.com/people/jin-hong-yun-46", 
        "https://www.zhihu.com/people/cheng-wen-dong-9", 
        "https://www.zhihu.com/people/zhang-chong-97-42", 
        "https://www.zhihu.com/people/xia-yin-xi-sheng", 
        "https://www.zhihu.com/people/zhang-jia-wei-79-83", 
        "https://www.zhihu.com/people/xiao-ming-jiao-zhu-30", 
        "https://www.zhihu.com/people/er-cha-shu-40", 
        "https://www.zhihu.com/people/ni-cou-kai", 
        "https://www.zhihu.com/people/cheng-hao-95-74", 
        "https://www.zhihu.com/people/mou-ren-43-72", 
        "https://www.zhihu.com/people/memoryli-17", 
        "https://www.zhihu.com/people/shi-kai-62-21", 
        "https://www.zhihu.com/people/dong-fang-yu-85", 
        "https://www.zhihu.com/people/123aaa-74", 
        "https://www.zhihu.com/people/godot1024", 
        "https://www.zhihu.com/people/zhi-bai-41-24", 
        "https://www.zhihu.com/people/shuang-jiao-cai-deng-pao-76", 
        "https://www.zhihu.com/people/jiasuqi", 
        "https://www.zhihu.com/people/chen-lei-92-84", 
        "https://www.zhihu.com/people/wen-wen-17-98", 
        "https://www.zhihu.com/people/pipi_genius", 
        "https://www.zhihu.com/people/zhan-rong-rui-81", 
        "https://www.zhihu.com/people/xia-yizhan-94-77", 
        "https://www.zhihu.com/people/xiao-lei-67-5", 
        "https://www.zhihu.com/people/liu-meng-yuan-72-95", 
        "https://www.zhihu.com/people/TonyLi-hc", 
        "https://www.zhihu.com/people/hong-shao-rou-58-92", 
        "https://www.zhihu.com/people/onealpeng-zhi-han", 
        "https://www.zhihu.com/people/hanzz2007", 
        "https://www.zhihu.com/people/qi-qi-43-99-70", 
        "https://www.zhihu.com/people/shan-jian-de-feng-1992", 
        "https://www.zhihu.com/people/jiang-xiao-zhi-90", 
        "https://www.zhihu.com/people/allen-4-25", 
        "https://www.zhihu.com/people/chen-hong-54-58", 
        "https://www.zhihu.com/people/an-xin-qi-67", 
        "https://www.zhihu.com/people/pa-shan-hu-40", 
        "https://www.zhihu.com/people/duked", 
        "https://www.zhihu.com/people/tonytao666", 
        "https://www.zhihu.com/people/chen-zhi-ying-59-11", 
        "https://www.zhihu.com/people/sam-wu-64", 
        "https://www.zhihu.com/people/li-de-zhi-33-2", 
        "https://www.zhihu.com/people/bytebeating", 
        "https://www.zhihu.com/people/ma-xin-8-7", 
        "https://www.zhihu.com/people/xiao-hei-9-9", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/yang-xing-1-6", 
        "https://www.zhihu.com/people/zoe-24-81-31", 
        "https://www.zhihu.com/people/duo-fei-tang", 
        "https://www.zhihu.com/people/wang-xian-sheng-69-78", 
        "https://www.zhihu.com/people/fenggege", 
        "https://www.zhihu.com/people/mzpmzk", 
        "https://www.zhihu.com/people/yu-jin-ke-18", 
        "https://www.zhihu.com/people/bing-bing-85-13-56", 
        "https://www.zhihu.com/people/guan-dai-73", 
        "https://www.zhihu.com/people/alwaysnow", 
        "https://www.zhihu.com/people/wo-shi-yeyahong", 
        "https://www.zhihu.com/people/shi-gustee", 
        "https://www.zhihu.com/people/wang-yan-wei-69-86", 
        "https://www.zhihu.com/people/wang-tian-yuan-77", 
        "https://www.zhihu.com/people/andyxiong-35", 
        "https://www.zhihu.com/people/da-feng-53-69", 
        "https://www.zhihu.com/people/ni-xi-de-yan-yuan", 
        "https://www.zhihu.com/people/si-ma-shuai-qi", 
        "https://www.zhihu.com/people/wanggehao147", 
        "https://www.zhihu.com/people/wang-shelley", 
        "https://www.zhihu.com/people/xu-kai-71-15", 
        "https://www.zhihu.com/people/cheng-peng-7", 
        "https://www.zhihu.com/people/yuzhongzheng", 
        "https://www.zhihu.com/people/guo-yan-chao-64", 
        "https://www.zhihu.com/people/xie-shi-wen-14", 
        "https://www.zhihu.com/people/wu-hen-12-25", 
        "https://www.zhihu.com/people/wang-ruo-xiao-83", 
        "https://www.zhihu.com/people/lan-se-zhi-lian-21", 
        "https://www.zhihu.com/people/wang-ling-ling-67", 
        "https://www.zhihu.com/people/wu-ming-23-74", 
        "https://www.zhihu.com/people/yildhd-wang", 
        "https://www.zhihu.com/people/wang-jin-2-5", 
        "https://www.zhihu.com/people/pu-yu-18-29", 
        "https://www.zhihu.com/people/wang-peng-cheng-39-36", 
        "https://www.zhihu.com/people/world4jason", 
        "https://www.zhihu.com/people/zheng-liang-06-08", 
        "https://www.zhihu.com/people/badmin-83", 
        "https://www.zhihu.com/people/yang-troy-89", 
        "https://www.zhihu.com/people/zhang-sheng-17-19-1", 
        "https://www.zhihu.com/people/wang-ji-yu-81-38", 
        "https://www.zhihu.com/people/wang-hao-yuan-11-60", 
        "https://www.zhihu.com/people/li-hao-so", 
        "https://www.zhihu.com/people/ShaneYS", 
        "https://www.zhihu.com/people/yang-lue-78", 
        "https://www.zhihu.com/people/dong-feng-66-72", 
        "https://www.zhihu.com/people/tom-pareto", 
        "https://www.zhihu.com/people/jian-po-qin-xin-38"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/89808932", 
            "userName": "鳖呀嘛鳖", 
            "userLink": "https://www.zhihu.com/people/a8a82711f4a17832bb90e215bad00f1e", 
            "upvote": 0, 
            "title": "树莓派学习笔记2-U盘挂载和系统备份", 
            "content": "<p>上一次我们说到系统配置的一些工作，在那些工作完成之后我突然想到之前从来没有做过的一个工作：系统备份。这一次我们就研究一下系统备份是怎么做的。</p><p>系统备份其实很简单，你总是可以把树莓派上的SD卡拔下来，在电脑上用Win32DiskImager来备份，但是这样备份出来的文件会和SD卡容量一样大，这种备份方法不可持续。那么参考网上的使用linux下的dd指令来完成这个工作。</p><p>我看了一下，在使用linux电脑备份的时候是把树莓派的卡插到电脑上，然后用dd把SD卡内容拷贝到本地。我手上只有树莓派作为linux电脑，那就先用我的4B测试一下，看看效果。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_b.jpg\"/><figcaption>树莓派4B</figcaption></figure><p>害怕树莓派上空间不够，先挂个U盘备份到U盘里试试。一只没弄明白U盘是怎么挂载的，借此机会研究一下。</p><h2>挂载U盘</h2><p>U盘直接插上是读不了内容的，所以必须要使用<code>mount</code>指令进行挂载。虽然<code>mount</code>天然支持FAT文件系统，然而FAT有个文件尺寸上限，不是很好。因此考虑使用exFAT文件系统。安装新的工具包来使<code>mount</code>支持exFAT。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo apt install exfat-fuse</code></pre></div><p>好下一步将我的U盘格式化为exFAT格式，在里面放一个文件以备后续测试。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c3d8bbf009b46bffbaedc9cba0eeea06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1974\" data-rawheight=\"1147\" class=\"origin_image zh-lightbox-thumb\" width=\"1974\" data-original=\"https://pic3.zhimg.com/v2-c3d8bbf009b46bffbaedc9cba0eeea06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1974&#39; height=&#39;1147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1974\" data-rawheight=\"1147\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1974\" data-original=\"https://pic3.zhimg.com/v2-c3d8bbf009b46bffbaedc9cba0eeea06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c3d8bbf009b46bffbaedc9cba0eeea06_b.jpg\"/></figure><p>把U盘插到树莓派上。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-067cd4fd3a49134537d0453cc7586b7d_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic2.zhimg.com/v2-067cd4fd3a49134537d0453cc7586b7d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic2.zhimg.com/v2-067cd4fd3a49134537d0453cc7586b7d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-067cd4fd3a49134537d0453cc7586b7d_b.jpg\"/><figcaption>忘了U盘是不是支持USB3.0</figcaption></figure><p>使用上一次学的指令查看USB设备。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d2cc7b05ec656f61ca30fc801c098b6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1162\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"1162\" data-original=\"https://pic2.zhimg.com/v2-d2cc7b05ec656f61ca30fc801c098b6d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1162&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1162\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1162\" data-original=\"https://pic2.zhimg.com/v2-d2cc7b05ec656f61ca30fc801c098b6d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d2cc7b05ec656f61ca30fc801c098b6d_b.jpg\"/></figure><p>奇怪，U盘是16GB的，为什么这里显示是64GB？问题不大，下一步查看一下<code>/dev</code>下的设备。这里目录下的sd表示存储设备，sda表示第一个存储设备，sdb表示第二个，以此类推。sda1就表示这个设备的第一个分区，sda2表示第二个分区，以此类推。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e0a6b247ddbb08416207855ac4bfa29f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1159\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb\" width=\"1159\" data-original=\"https://pic4.zhimg.com/v2-e0a6b247ddbb08416207855ac4bfa29f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1159&#39; height=&#39;271&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1159\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1159\" data-original=\"https://pic4.zhimg.com/v2-e0a6b247ddbb08416207855ac4bfa29f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e0a6b247ddbb08416207855ac4bfa29f_b.jpg\"/></figure><p>可以看到已经连接上了，我的U盘没有分区所以只有一个sda1。</p><p>下面创建挂载点，一般在<code>/mnt</code>或者<code>/media</code>目录下创建挂载点。 我现在没有挂载东西所以这俩目录底下都是空的。这里我就在mnt下挂载了。注意指令里面的uid和gid是权限设置，后面是你的用户名。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo mkdir /mnt/backup_flash\nsudo mount -o <span class=\"nv\">uid</span><span class=\"o\">=</span>pi,gid<span class=\"o\">=</span>pi /dev/sda1 /mnt/backup_flash</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2cc2a7330ffe9a5f47fc4ea619c4de11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"1050\" data-original=\"https://pic2.zhimg.com/v2-2cc2a7330ffe9a5f47fc4ea619c4de11_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1050&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1050\" data-original=\"https://pic2.zhimg.com/v2-2cc2a7330ffe9a5f47fc4ea619c4de11_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2cc2a7330ffe9a5f47fc4ea619c4de11_b.jpg\"/></figure><p>挂载成功了，下面看一下我放在U盘里的文件都有啥。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ba25c2dc53be441ee4f8e84f9ba62e38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"670\" data-original=\"https://pic1.zhimg.com/v2-ba25c2dc53be441ee4f8e84f9ba62e38_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;670&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"670\" data-original=\"https://pic1.zhimg.com/v2-ba25c2dc53be441ee4f8e84f9ba62e38_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ba25c2dc53be441ee4f8e84f9ba62e38_b.jpg\"/></figure><p>我在电脑上整文件的时候没有搞换行，导致这么一个效果，整体来看没啥问题。</p><p>尝试修改这个文件，然后取消挂载，再到电脑上看看。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a55f13f0afcefda87bdb8b228b216f8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"839\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"839\" data-original=\"https://pic4.zhimg.com/v2-a55f13f0afcefda87bdb8b228b216f8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;839&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"839\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"839\" data-original=\"https://pic4.zhimg.com/v2-a55f13f0afcefda87bdb8b228b216f8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a55f13f0afcefda87bdb8b228b216f8b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-212bfc75287087c3218444d88b5bcd49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1974\" data-rawheight=\"1147\" class=\"origin_image zh-lightbox-thumb\" width=\"1974\" data-original=\"https://pic2.zhimg.com/v2-212bfc75287087c3218444d88b5bcd49_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1974&#39; height=&#39;1147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1974\" data-rawheight=\"1147\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1974\" data-original=\"https://pic2.zhimg.com/v2-212bfc75287087c3218444d88b5bcd49_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-212bfc75287087c3218444d88b5bcd49_b.jpg\"/></figure><p>成功。</p><hr/><p>习得新指令：<code>mount</code>和<code>umount</code> </p><p>功能：挂载和卸载移动存储设备</p><hr/><h2>系统备份1</h2><p>我现在想备份的系统正在树莓派上跑着，没法搞，现在先用另一个有系统的sd卡测试一下备份功能。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-10304a61ec14ed63bdbf5d2f18079de5_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic2.zhimg.com/v2-10304a61ec14ed63bdbf5d2f18079de5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic2.zhimg.com/v2-10304a61ec14ed63bdbf5d2f18079de5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-10304a61ec14ed63bdbf5d2f18079de5_b.jpg\"/><figcaption>闪迪打钱（雾）</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6daf21ab65fc591b15092ae906c35887_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-6daf21ab65fc591b15092ae906c35887_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-6daf21ab65fc591b15092ae906c35887_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6daf21ab65fc591b15092ae906c35887_b.jpg\"/></figure><p>还是查看一下设备</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2ba97c54573fb5100e6523562500f00a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pic3.zhimg.com/v2-2ba97c54573fb5100e6523562500f00a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1156&#39; height=&#39;297&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1156\" data-original=\"https://pic3.zhimg.com/v2-2ba97c54573fb5100e6523562500f00a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2ba97c54573fb5100e6523562500f00a_b.jpg\"/></figure><p>注意到Device 006和<code>/dev</code>下的sdb系列。在烧录系统得时候sd卡被分成了两个分区，所以这里有sdb1和sdb2。</p><p>可以使用<code>df -h</code>指令来查看挂载情况。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-49519eab4698be7ef8694ca6fd452661_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"782\" data-rawheight=\"316\" class=\"origin_image zh-lightbox-thumb\" width=\"782\" data-original=\"https://pic2.zhimg.com/v2-49519eab4698be7ef8694ca6fd452661_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;782&#39; height=&#39;316&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"782\" data-rawheight=\"316\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"782\" data-original=\"https://pic2.zhimg.com/v2-49519eab4698be7ef8694ca6fd452661_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-49519eab4698be7ef8694ca6fd452661_b.jpg\"/></figure><p>这里由于sdb没有挂载，所以这里没有显示。使用上面的指令进行挂载。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d50acca94affd6d6c7201592f78739a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1073\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb\" width=\"1073\" data-original=\"https://pic3.zhimg.com/v2-d50acca94affd6d6c7201592f78739a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1073&#39; height=&#39;467&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1073\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1073\" data-original=\"https://pic3.zhimg.com/v2-d50acca94affd6d6c7201592f78739a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d50acca94affd6d6c7201592f78739a2_b.jpg\"/></figure><p>注意这里的区别。烧录到sd卡后较大的分区是ext4文件系统，挂载的时候要强调这个。另外由于系统烧录后所属权限是root，所以这里的uid和gid设置要去掉，否则挂载会不成功。</p><p>挂载成功，下一步进行备份测试。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo dd <span class=\"k\">if</span><span class=\"o\">=</span>/dev/sdb <span class=\"nv\">of</span><span class=\"o\">=</span>/mnt/backup_flash/RPi_backup_64GB_test.img <span class=\"nv\">bs</span><span class=\"o\">=</span>4M</code></pre></div><p>使用dd指令进行拷贝，拷贝到U盘下的<code>RPi_backup_64GB_test.img</code>下。注意：这里的<code>if</code>表示输入文件（input file），<code>of</code>表示输出文件（output file），<code>bs</code>表示分包大小（bag size?）。如果想查看进度可以新建一个终端并输入如下执行查看进度。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo pkill -USR1 -n -x dd</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-35a56a2cfb17c28f9c695b87f1cced6e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1314\" data-rawheight=\"117\" class=\"origin_image zh-lightbox-thumb\" width=\"1314\" data-original=\"https://pic3.zhimg.com/v2-35a56a2cfb17c28f9c695b87f1cced6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1314&#39; height=&#39;117&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1314\" data-rawheight=\"117\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1314\" data-original=\"https://pic3.zhimg.com/v2-35a56a2cfb17c28f9c695b87f1cced6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-35a56a2cfb17c28f9c695b87f1cced6e_b.jpg\"/></figure><p><b>到这一步可能按道理就应该完成了，但实际上并不是这样。</b>经过漫长的等待（半个小时），终于拷贝完成的时候，系统提示空间不足，备份失败。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f064feb94dfc150ab3c22a1e090415eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"150\" class=\"content_image\" width=\"150\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;150&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"150\" data-actualsrc=\"https://pic4.zhimg.com/v2-f064feb94dfc150ab3c22a1e090415eb_b.jpg\"/></figure><p>这和我想象的不太一样啊，又查阅了更多的资料后发现直接对SD卡使用<code>dd</code>指令的结果和在windows上用Win32DiskImager的结果是一样的：镜像文件和SD卡一样大。</p><p>此路不通，换道。</p><hr/><p>习得新指令：<code>dd</code></p><p>功能：文件拷贝和创建 </p><hr/><h2>系统备份2</h2><p>试错之后发现了新的方法，这个方法需要更多的工具，也更复杂，但网上有人写好了脚本我可以直接使用。与直接使用<code>dd</code>拷贝SD卡不同，这里我们要先使用<code>dd</code>创建一个合适尺寸的镜像文件，然后将这个镜像文件划分为两个分区， root区为FAT32文件系统，Linux区为ext4文件系统。分区完成后需要把这个镜像文件作为虚拟磁盘挂载，挂载完成以后就可以进行格式化。此后就可以进行备份了。</p><h3>工具准备</h3><p>这个方法里面需要三个工具：</p><ul><li>dosfstools：fat32分区格式化工具</li><li>dump：dump&amp; restore 备份工具</li><li>parted &amp; kpartx：虚拟磁盘工具</li></ul><p>使用如下指令安装。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo apt install dosfstools dump parted kpartx</code></pre></div><h3>创建镜像</h3><p>根据系统尺寸决定使用的空间大小。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e276fc8449da7c5f3d4e2150fe6c44a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1009\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"1009\" data-original=\"https://pic1.zhimg.com/v2-e276fc8449da7c5f3d4e2150fe6c44a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1009&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1009\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1009\" data-original=\"https://pic1.zhimg.com/v2-e276fc8449da7c5f3d4e2150fe6c44a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e276fc8449da7c5f3d4e2150fe6c44a4_b.jpg\"/></figure><p>使用指令<code>df -P</code>的时候，显示的数据是以1K（1024字节）为单位，注意到sdb1和sdb2分别使用的空间，下面要进行img空间分配。</p><p>应该注意到，boot分区其实是很小的，不过几十兆，分配的时候不应该用boot分区已经使用的空间，而是boot分区整个的大小，也就是表中<b>第二列</b>。root分区就不一样了，里面存放的是系统各项文件，这个分区在空间划分的时候应该照顾已经使用的空间，所以要注意的是表中<b>第三列</b>。</p><p>使用下列指令获取上面的参数。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">bootsz</span><span class=\"o\">=</span><span class=\"sb\">`</span>df -P <span class=\"p\">|</span> grep /dev/sdb1 <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span><span class=\"c1\"># 注意到最后的那个$2</span>\n<span class=\"nv\">rootsz</span><span class=\"o\">=</span><span class=\"sb\">`</span>df -P <span class=\"p\">|</span> grep /dev/sdb2 <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $3}&#39;</span><span class=\"sb\">`</span><span class=\"c1\"># 注意到最后的那个$3</span></code></pre></div><p>然后利用下面指令计算镜像文件尺寸。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">totalsz</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">echo</span> <span class=\"nv\">$rootsz</span> <span class=\"nv\">$bootsz</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print int(($1+$2)*1.3)}&#39;</span><span class=\"sb\">`</span></code></pre></div><p>注意到上面的参数1.3，这个参数是网上一个同学经过测试测出来的。使用原始大小的1.3倍是极好的，兼顾尺寸和完备程度。</p><p>利用下面的指令申请镜像空间。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">img</span><span class=\"o\">=</span>/mnt/backup_flash/PRi_64GB_test.img\nsudo dd <span class=\"k\">if</span><span class=\"o\">=</span>/dev/zero <span class=\"nv\">of</span><span class=\"o\">=</span><span class=\"nv\">$img</span> <span class=\"nv\">bs</span><span class=\"o\">=</span>1k <span class=\"nv\">count</span><span class=\"o\">=</span><span class=\"nv\">$totalsz</span></code></pre></div><p>申请空间这一步会花不少时间，像我这个9GB多大概一小时吧。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-98c740b251ffe84ccf5198c0b3589e93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"968\" data-rawheight=\"724\" class=\"origin_image zh-lightbox-thumb\" width=\"968\" data-original=\"https://pic4.zhimg.com/v2-98c740b251ffe84ccf5198c0b3589e93_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;968&#39; height=&#39;724&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"968\" data-rawheight=\"724\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"968\" data-original=\"https://pic4.zhimg.com/v2-98c740b251ffe84ccf5198c0b3589e93_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-98c740b251ffe84ccf5198c0b3589e93_b.jpg\"/></figure><p>至此，空间分配完成，下面开始分区。</p><h3>空间分区</h3><p>使用<code>fdisk</code>指令查看分区情况。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo fdisk -l /dev/sdb</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-011ce362263f3cf5f50a8c888d9e54e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"969\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"969\" data-original=\"https://pic4.zhimg.com/v2-011ce362263f3cf5f50a8c888d9e54e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;969&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"969\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"969\" data-original=\"https://pic4.zhimg.com/v2-011ce362263f3cf5f50a8c888d9e54e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-011ce362263f3cf5f50a8c888d9e54e3_b.jpg\"/></figure><p>在镜像文件分区的时候是根据扇区编号来确定的。和分配空间类似，sdb1分区应该完整划分，剩下的都是sdb2分区。</p><p>使用以下指令获得分区始末位置。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">bootstart</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo fdisk -l /dev/sdb <span class=\"p\">|</span> grep sdb1 <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">bootend</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo fdisk -l /dev/sdb <span class=\"p\">|</span> grep sdb1 <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $3}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">rootstart</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo fdisk -l /dev/sdb <span class=\"p\">|</span> grep sdb2 <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-211fdd98fa1abbbdd4b07a3e07e823e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1196\" data-rawheight=\"437\" class=\"origin_image zh-lightbox-thumb\" width=\"1196\" data-original=\"https://pic1.zhimg.com/v2-211fdd98fa1abbbdd4b07a3e07e823e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1196&#39; height=&#39;437&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1196\" data-rawheight=\"437\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1196\" data-original=\"https://pic1.zhimg.com/v2-211fdd98fa1abbbdd4b07a3e07e823e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-211fdd98fa1abbbdd4b07a3e07e823e0_b.jpg\"/></figure><p>奇怪，为什么分区始末是不连续的？暂时不管，使用下面的指令查看数据。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">echo</span> <span class=\"s2\">&#34;boot: </span><span class=\"nv\">$bootstart</span><span class=\"s2\"> -&gt; </span><span class=\"nv\">$bootend</span><span class=\"s2\">, root: </span><span class=\"nv\">$rootstart</span><span class=\"s2\"> -&gt; end&#34;</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7a99079e19915941a95a3f5615624125_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1146\" data-rawheight=\"59\" class=\"origin_image zh-lightbox-thumb\" width=\"1146\" data-original=\"https://pic2.zhimg.com/v2-7a99079e19915941a95a3f5615624125_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1146&#39; height=&#39;59&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1146\" data-rawheight=\"59\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1146\" data-original=\"https://pic2.zhimg.com/v2-7a99079e19915941a95a3f5615624125_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7a99079e19915941a95a3f5615624125_b.jpg\"/></figure><p>使用下面的指令进行分区。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo parted <span class=\"nv\">$img</span> --script -- mklabel msdos\nsudo parted <span class=\"nv\">$img</span> --script -- mkpart primary fat32 <span class=\"si\">${</span><span class=\"nv\">bootstart</span><span class=\"si\">}</span>s <span class=\"si\">${</span><span class=\"nv\">bootend</span><span class=\"si\">}</span>s\nsudo parted <span class=\"nv\">$img</span> --script -- mkpart primary ext4 <span class=\"si\">${</span><span class=\"nv\">rootstart</span><span class=\"si\">}</span>s -1</code></pre></div><p>注意，这里第三个指令最后一个参数是<b>负一</b>，不是英文字母<code>l</code>，表示的含义是到最后一个，千万不要搞错了。 </p><p>分区完毕之后进行格式化操作。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">loopdevice</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo losetup -f --show <span class=\"nv\">$img</span><span class=\"sb\">`</span>\n<span class=\"nv\">device</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo kpartx -va <span class=\"nv\">$loopdevice</span> <span class=\"p\">|</span> sed -E <span class=\"s1\">&#39;s/.*(loop[0-9])p.*/\\1/g&#39;</span> <span class=\"p\">|</span> head -1<span class=\"sb\">`</span>\n<span class=\"nv\">device</span><span class=\"o\">=</span><span class=\"s2\">&#34;/dev/mapper/</span><span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span>\nsudo mkfs.vfat <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p1 -n boot\nsudo mkfs.ext4 <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p2</code></pre></div><h3>挂载并备份</h3><p>使用下面的指令挂载虚拟磁盘的boot分区。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo mkdir -p /mnt/vir_img/boot\nsudo mount -t vfat <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p1 /mnt/vir_img/boot</code></pre></div><p>注意，boot区是FAT32格式，可以直接用<code>cp</code>指令进行拷贝。使用下面指令即可。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo cp -rfp /mnt/rpi_sd/boot/* /mnt/vir_img/boot/</code></pre></div><p>从要备份的SD卡，拷贝到目标文件挂载的目录。</p><p>然后挂载root分区。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo mkdir -p /mnt/vir_img/root\nsudo mount -t ext4 <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p2 /mnt/vir_img/root</code></pre></div><p>注意，root分区是exf4格式，需要使用dump &amp; restore进行备份。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">cd</span> /mnt/vir_img/root\nsudo chattr +d <span class=\"nv\">$img</span>\nsudo dump -0uaf - /mnt/rpi_sd/root/ <span class=\"p\">|</span> sudo restore -rf - \n<span class=\"nb\">cd</span>\nsudo sync</code></pre></div><p>经过漫长的拷贝过程，完成之后就可以卸载虚拟磁盘了。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo umount /mnt/vir_img/*\nsudo kpartx -d <span class=\"nv\">$loopdevice</span>\nsudo losetup -d <span class=\"nv\">$loopdevice</span>\nsudo umount /mnt/backup_flash</code></pre></div><p>好的，现在把得到的镜像拷贝到电脑上，烧到一个新的SD卡里用旧的树莓派测试一下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c317a2b06eefe8dcfa8316d3bbea2183_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-c317a2b06eefe8dcfa8316d3bbea2183_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-c317a2b06eefe8dcfa8316d3bbea2183_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c317a2b06eefe8dcfa8316d3bbea2183_b.jpg\"/></figure><p>emmmmm卡住不动了，备份<b>失败</b>。</p><p>把上面的参数1.3改一下，改成1.5，新写一个自动化脚本测试一下。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"cp\">#!/bin/bash\n</span><span class=\"cp\"></span>\n<span class=\"c1\"># 时间</span>\n<span class=\"nv\">now</span><span class=\"o\">=</span><span class=\"sb\">`</span>date +%Y-%m-%d-%H%M%S<span class=\"sb\">`</span>\nexho <span class=\"s2\">&#34;time:%t </span><span class=\"nv\">$now</span><span class=\"s2\">&#34;</span>\n\n<span class=\"c1\"># 备份文件写入位置</span>\n<span class=\"nv\">target_file_dir</span><span class=\"o\">=</span>/home/pi/Documents/backup_test\nsudo mkdir -p <span class=\"nv\">$target_file_dir</span>\n<span class=\"nv\">img</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">target_file_dir</span><span class=\"si\">}</span>/backup-<span class=\"si\">${</span><span class=\"nv\">now</span><span class=\"si\">}</span>.img\n<span class=\"nb\">echo</span> <span class=\"s2\">&#34;target file&#34;</span> <span class=\"nv\">$img</span>\n\n<span class=\"c1\"># 虚拟磁盘挂载位置</span>\n<span class=\"nv\">vir_dir</span><span class=\"o\">=</span>/mnt/vir_img\n\n<span class=\"c1\"># 目标文件文件系统和目录</span>\n<span class=\"nv\">bootfs</span><span class=\"o\">=</span>/dev/sdb1\n<span class=\"nv\">rootfs</span><span class=\"o\">=</span>/dev/sdb2\n<span class=\"nv\">bootdir</span><span class=\"o\">=</span><span class=\"sb\">`</span>df -P <span class=\"p\">|</span> grep <span class=\"si\">${</span><span class=\"nv\">bootfs</span><span class=\"si\">}</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $6}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">rootdir</span><span class=\"o\">=</span><span class=\"sb\">`</span>df -P <span class=\"p\">|</span> grep <span class=\"si\">${</span><span class=\"nv\">rootfs</span><span class=\"si\">}</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $6}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nb\">echo</span> <span class=\"nv\">$bootfs</span> <span class=\"s2\">&#34;mounted on&#34;</span> <span class=\"nv\">$bootdir</span>\n<span class=\"nb\">echo</span> <span class=\"nv\">$rootfs</span> <span class=\"s2\">&#34;mounted on&#34;</span> <span class=\"nv\">$rootdir</span>\n\n<span class=\"c1\"># 计算目标空间尺寸</span>\n<span class=\"nv\">bootsz</span><span class=\"o\">=</span><span class=\"sb\">`</span>df -P <span class=\"p\">|</span> grep <span class=\"nv\">$bootfs</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">rootsz</span><span class=\"o\">=</span><span class=\"sb\">`</span>df -P <span class=\"p\">|</span> grep <span class=\"nv\">$rootfs</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $3}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">totalsz</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">echo</span> <span class=\"nv\">$rootsz</span> <span class=\"nv\">$bootsz</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print int(($1+$2)*1.5)}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">&#34;total size&#34;</span> <span class=\"si\">${</span><span class=\"nv\">totalsz</span><span class=\"si\">}</span>KB\n\n<span class=\"c1\"># 获取分区始末位置</span>\n<span class=\"nv\">bootstart</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo fdisk -l <span class=\"p\">|</span> grep <span class=\"nv\">$bootfs</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">bootend</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo fdisk -l <span class=\"p\">|</span> grep <span class=\"nv\">$bootfs</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $3}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nv\">rootstart</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo fdisk -l <span class=\"p\">|</span> grep <span class=\"nv\">$rootfs</span> <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">&#34;boot: </span><span class=\"nv\">$bootstart</span><span class=\"s2\"> -&gt; </span><span class=\"nv\">$bootend</span><span class=\"s2\">, root: </span><span class=\"nv\">$rootstart</span><span class=\"s2\"> -&gt; end&#34;</span>\n\n<span class=\"c1\"># 申请镜像空间</span>\nsudo dd <span class=\"k\">if</span><span class=\"o\">=</span>/dev/zero <span class=\"nv\">of</span><span class=\"o\">=</span><span class=\"nv\">$img</span> <span class=\"nv\">bs</span><span class=\"o\">=</span>1k <span class=\"nv\">count</span><span class=\"o\">=</span><span class=\"nv\">$totalsz</span>\n\n<span class=\"c1\"># 目标镜像分区</span>\nsudo parted <span class=\"nv\">$img</span> --script -- mklabel msdos\nsudo parted <span class=\"nv\">$img</span> --script -- mkpart primary fat32 <span class=\"si\">${</span><span class=\"nv\">bootstart</span><span class=\"si\">}</span>s <span class=\"si\">${</span><span class=\"nv\">bootend</span><span class=\"si\">}</span>s\nsudo parted <span class=\"nv\">$img</span> --script -- mkpart primary ext4 <span class=\"si\">${</span><span class=\"nv\">rootstart</span><span class=\"si\">}</span>s -1\n\n<span class=\"c1\"># 创建虚拟磁盘</span>\n<span class=\"nv\">loopdevice</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo losetup -f --show <span class=\"nv\">$img</span><span class=\"sb\">`</span>\n<span class=\"nv\">device</span><span class=\"o\">=</span><span class=\"sb\">`</span>sudo kpartx -va <span class=\"nv\">$loopdevice</span> <span class=\"p\">|</span> sed -E <span class=\"s1\">&#39;s/.*(loop[0-9])p.*/\\1/g&#39;</span> <span class=\"p\">|</span> head -1<span class=\"sb\">`</span>\nsleep <span class=\"m\">5</span>     <span class=\"c1\"># 暂停来避开bug</span>\n<span class=\"nv\">device</span><span class=\"o\">=</span><span class=\"s2\">&#34;/dev/mapper/</span><span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span>\n\n<span class=\"c1\"># 格式化</span>\nsudo mkfs.vfat <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p1 -n BOOT\nsudo mkfs.ext4 <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p2\n\n<span class=\"c1\"># 挂载虚拟磁盘</span>\n<span class=\"nv\">vir_boot</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">vir_dir</span><span class=\"si\">}</span>/boot\n<span class=\"nv\">vir_root</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">vir_dir</span><span class=\"si\">}</span>/root\nsudo mkdir -p <span class=\"nv\">$vir_boot</span> <span class=\"nv\">$vir_root</span>\nsudo mount -t vfat <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p1 <span class=\"nv\">$vir_boot</span>\nsudo mount -t ext4 <span class=\"si\">${</span><span class=\"nv\">device</span><span class=\"si\">}</span>p2 <span class=\"nv\">$vir_root</span>\n\n<span class=\"c1\"># 备份boot分区</span>\nsudo cp -rfp <span class=\"si\">${</span><span class=\"nv\">bootdir</span><span class=\"si\">}</span>/* <span class=\"si\">${</span><span class=\"nv\">vir_boot</span><span class=\"si\">}</span>/\n\n<span class=\"c1\"># 备份root分区</span>\n<span class=\"nb\">cd</span> <span class=\"nv\">$vir_root</span>\nsudo chattr +d <span class=\"nv\">$img</span>\nsudo dump -0uaf - <span class=\"nv\">$rootdir</span> <span class=\"p\">|</span> sudo restore -rf - \n<span class=\"nb\">cd</span>\nsudo sync\n\n<span class=\"c1\"># 卸载虚拟磁盘</span>\nsudo umount <span class=\"si\">${</span><span class=\"nv\">vir_dir</span><span class=\"si\">}</span>/*\nsudo kpartx -d <span class=\"nv\">$loopdevice</span>\nsudo losetup -d <span class=\"nv\">$loopdevice</span></code></pre></div><p>保存，执行，还是不行。</p><p>咋回事呢？我一步步按照教程来的啊，怎么就不好使呢？</p><p>莫非是备份目标的问题？教程里是把正在运行的树莓派固件备份，我这里是把一个挂载的卡备份，会不会不一样呢？会不会是刚才不连续的问题造成的呢？</p><p>修改脚本，重新测试，依旧失败，出现了教程里面一个<a href=\"https://link.zhihu.com/?target=http%3A//www.360doc.com/content/17/0805/03/40492717_676751545.shtml\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">broken pipe的问题</a>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a10c801d98c0ac37dbaf414eb89c6e82_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"1800\" class=\"origin_image zh-lightbox-thumb\" width=\"3000\" data-original=\"https://pic3.zhimg.com/v2-a10c801d98c0ac37dbaf414eb89c6e82_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3000&#39; height=&#39;1800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"1800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3000\" data-original=\"https://pic3.zhimg.com/v2-a10c801d98c0ac37dbaf414eb89c6e82_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a10c801d98c0ac37dbaf414eb89c6e82_b.jpg\"/></figure><p>时间有点晚了，暂时到这里，系统备份失败，下次再继续研究。</p><h2>总结</h2><p>虽然系统备份是失败的，但是我挂载U盘的指令由于反复使用已经烂熟于心，另外<code>df</code>和<code>fdisk</code>指令也是经常使用，也熟练了不少。</p><h2>参考文献</h2><p>树莓派挂载U盘或移动硬盘：<a href=\"https://link.zhihu.com/?target=http%3A//shumeipai.nxez.com/2013/09/08/raspberry-pi-to-mount-the-removable-hard-disk.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">shumeipai.nxez.com/2013</span><span class=\"invisible\">/09/08/raspberry-pi-to-mount-the-removable-hard-disk.html</span><span class=\"ellipsis\"></span></a></p><p>linux下mount指令详解：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/daydayup654/article/details/78788310\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/daydayup6</span><span class=\"invisible\">54/article/details/78788310</span><span class=\"ellipsis\"></span></a></p><p>linux下uid和gid详解：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/36/article/details/86573899\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/36/articl</span><span class=\"invisible\">e/details/86573899</span><span class=\"ellipsis\"></span></a></p><p><code>dd</code>指令系统备份：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/just_s0so/article/details/88825716\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/just_s0so</span><span class=\"invisible\">/article/details/88825716</span><span class=\"ellipsis\"></span></a></p><p>系统备份：<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/javazhu/articles/9234097.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/javazhu/art</span><span class=\"invisible\">icles/9234097.html</span><span class=\"ellipsis\"></span></a></p><p>系统备份：<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/javazhu/articles/9234097.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/javazhu/art</span><span class=\"invisible\">icles/9234097.html</span><span class=\"ellipsis\"></span></a></p><p>系统备份（蜜汁1.3）：<a href=\"https://link.zhihu.com/?target=http%3A//www.360doc.com/content/17/0805/03/40492717_676751545.shtml\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">360doc.com/content/17/0</span><span class=\"invisible\">805/03/40492717_676751545.shtml</span><span class=\"ellipsis\"></span></a></p>", 
            "topic": [
                {
                    "tag": "树莓派（Raspberry Pi）", 
                    "tagLink": "https://api.zhihu.com/topics/19737690"
                }, 
                {
                    "tag": "Bash", 
                    "tagLink": "https://api.zhihu.com/topics/19632761"
                }, 
                {
                    "tag": "系统备份", 
                    "tagLink": "https://api.zhihu.com/topics/19774954"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89767182", 
            "userName": "鳖呀嘛鳖", 
            "userLink": "https://www.zhihu.com/people/a8a82711f4a17832bb90e215bad00f1e", 
            "upvote": 25, 
            "title": "树莓派学习笔记1-新入手的树莓派4B", 
            "content": "<p>之前玩树莓派都是胡乱玩，这一次把学习来的东西记录一下，方便日后查阅。借着双十一的东风入手了新的树莓派4B，昨天开始了一些基础配置。</p><hr/><p>获得新设备：树莓派4B</p><p>功能：好多</p><hr/><p>树莓派4B更新了硬件配置，把两个USB2.0接口升级到了USB3.0接口，无线网卡支持5GHz频段，板载蓝牙支持蓝牙5.0，HDMI接口换为两个microHDMI支持双4K视频输出，供电接口升级为最流行的USB-C接口。另外RAM提供三种可选配置：1GB、2GB、4GB。本着既然可选那就顶配的原则，我购买了4GB的配置。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f947b0e3d72cffbf65ce2b6147261c97_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-f947b0e3d72cffbf65ce2b6147261c97_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-f947b0e3d72cffbf65ce2b6147261c97_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f947b0e3d72cffbf65ce2b6147261c97_b.jpg\"/><figcaption>这一面能看到新的USB-C供电和两个microHDMI</figcaption></figure><p>另外我还购买了某宝商家提供的金属外壳套餐，着实给树莓派添加了一股工业气息。值得一提的是这个外壳降温效果很好，昨天的升级过程中能把CPU温度压在45℃以下。链接不贴了，想要购买链接的私信。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6539d9a78164791b1d691e62c34b65b_b.jpg\"/><figcaption>这一面能看见两个USB3.0接口，另外这个金属外壳能很好避免直接触碰电路板</figcaption></figure><p>说完了第一视角的外观，开始进入正题，也就是昨天的配置工作。</p><h2>安装系统</h2><p>树莓派4最低支持到Debian 10 (buster)，因此只能安装截止目前最新的系统。</p><p>从<a href=\"https://link.zhihu.com/?target=https%3A//www.raspberrypi.org/downloads/raspbian/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">树莓派官网</a>下载最新的系统，我选的是Raspbian Buster with desktop，这个固件尺寸不大不小，又有GUI，也有一些必要的软件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3efc6a9e54745621df11db22d1008835_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"1162\" class=\"origin_image zh-lightbox-thumb\" width=\"1999\" data-original=\"https://pic2.zhimg.com/v2-3efc6a9e54745621df11db22d1008835_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1999&#39; height=&#39;1162&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"1162\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1999\" data-original=\"https://pic2.zhimg.com/v2-3efc6a9e54745621df11db22d1008835_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3efc6a9e54745621df11db22d1008835_b.jpg\"/></figure><p>把固件烧写到SD卡的方法这里不谈，网上方法很多，就是用Win32DiskImager去搞，没啥好说的。</p><p>在漫长的下载和烧录之后就是配置软件源，一直用<a href=\"https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">清华大学开源镜像站</a>的软件源，虽然偶尔崩掉但是速度还是可以的。而且清华大学的同学写的<a href=\"https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/help/raspbian/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帮助文档</a>也简洁明了，没有必要重复。</p><p>注意到后文中我在进行包管理的时候使用的都是<code>apt</code>而非<code>apt-get</code>，至于这是为什么这里不谈，最直接的原因是<code>apt</code>指令给显示一个进度条。 </p><h2>CPU温度</h2><p>刚才说到散热问题，我有测量温度。这里温度测量使用的是树莓派自身的功能。查看文件<code>/sys/class/thermal/thermal_zone0/temp</code>可以看到当前CPU温度乘1000的值，或者也可以使用指令<code>/opt/vc/bin/vcgencmd measure_temp</code>来查看温度。</p><hr/><p>习得新玩意：<code>/sys/class/thermal/thermal_zone0/temp</code>和<code>/opt/vc/bin/vcgencmd measure_temp</code> </p><p>功能：测量CPU温度</p><hr/><h2>AP模式-WiFi基站</h2><p>无线调试总是那么吸引人，于是考虑让树莓派建立一个WiFi基站来从其他设备无线ssh到树莓派来调试。这里使用的是流行的<code>create_ap</code>，没有很多烦心事。这个工具很古老了，作者的GitHub上能有两三年没有更新了，已经是成熟的工具了。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 克隆GitHub上的代码库</span>\ngit clone https://github.com/oblique/create_ap.git\n<span class=\"c1\"># 进入文件夹</span>\n<span class=\"nb\">cd</span> create_ap\n<span class=\"c1\"># 安装</span>\nsudo make install</code></pre></div><p>安装完成之后需要安装一些依赖包，具体的依赖可以去作者的git上去查看。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo apt install util-linux procps hostapd iproute2 iw haveged dnsmasq</code></pre></div><p>测试指令如下。 ssid：RPi, passwd: 88888888</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo create_ap --no-virt -g <span class=\"m\">192</span>.168.14.1 wlan0 eth0 RPi <span class=\"m\">88888888</span> </code></pre></div><p>在执行测试指令的时候报错了，基站没有建立成功。错误内容我忘记截图了，但是我能记得错误信息里提到了一个RF-kill的东西。说的是建立过程中出了一点小问题，原因是RF-kill阻止了什么东西。</p><p>我查阅了一下资料，rfkill工具是内核级别管理工具，可以打开和关闭设备的蓝牙和WiFi。</p><div class=\"highlight\"><pre><code class=\"language-bash\">rfkill list</code></pre></div><p>上面的指令会列出所有可用设备。对于我的树莓派来说是这个样子的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8ebc874b47e281137a819577a319124a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"205\" class=\"content_image\" width=\"418\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;418&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"205\" class=\"content_image lazy\" width=\"418\" data-actualsrc=\"https://pic3.zhimg.com/v2-8ebc874b47e281137a819577a319124a_b.jpg\"/></figure><p>使用<code>block</code>和<code>unblock</code>指令可以屏蔽或者解除屏蔽某个设备。比如这里可以用<code>rfkill block 0</code>来屏蔽0号设备也就是WLAN。这样之后就会导致WLAN不可用，导致上面的create_ap失败。使用<code>unblock</code>指令可以打开设备。比如这里我的蓝牙是关闭的，那么使用指令<code>rfkill unblock 1</code>就可以打开蓝牙。</p><hr/><p>习得新工具：<code>rfkill</code> </p><p>功能：无线电传输设备管理</p><hr/><p>当时我的WLAN是被block的，所以这里执行<code>rfkill unblock 0</code>就解决了上面的问题。测试无问题后将指令添加到开机启动脚本。编辑文件<code>/etc/rc.local</code>，在<code>exit 0</code>之前添加指令即可。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo create_ap --no-virt -g <span class=\"m\">192</span>.168.14.1 --daemon wlan0 eth0 RPi <span class=\"m\">88888888</span></code></pre></div><p> 注意：这里必须要有<code>--no-virt</code>和<code>--daemon</code>选项，前者是禁止虚拟什么东西，后面是将create_ap放在后台运行。</p><p>想要查看正在运行的ap，可以使用如下指令。</p><div class=\"highlight\"><pre><code class=\"language-bash\">create_ap --list-running</code></pre></div><p>其他用法参考帮助文档。</p><div class=\"highlight\"><pre><code class=\"language-bash\">create_ap --help</code></pre></div><hr/><p>复习工具：<code>create_ap</code></p><p>功能：建立WiFi基站</p><hr/><h2>树莓派与USB转TTL模块</h2><p>我是用的是CP201x系列模块，树莓派对市面上大部分USB转TTL提供内核级别的驱动支持。即插即用，比windows方便多了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9d1b83bd5012ae6e4e693d18cbf0febf_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-9d1b83bd5012ae6e4e693d18cbf0febf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic4.zhimg.com/v2-9d1b83bd5012ae6e4e693d18cbf0febf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9d1b83bd5012ae6e4e693d18cbf0febf_b.jpg\"/><figcaption>CP201x系列</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d9c46ced5be60c744260d2475686ff49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic2.zhimg.com/v2-d9c46ced5be60c744260d2475686ff49_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic2.zhimg.com/v2-d9c46ced5be60c744260d2475686ff49_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d9c46ced5be60c744260d2475686ff49_b.jpg\"/></figure><p>插上模块之后执行指令<code>lsusb</code>查看USB设备。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-49e5d9e73b75f69dea4d1b371a769a04_b.jpg\" data-size=\"normal\" data-rawwidth=\"1668\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"1668\" data-original=\"https://pic1.zhimg.com/v2-49e5d9e73b75f69dea4d1b371a769a04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1668&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1668\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1668\" data-original=\"https://pic1.zhimg.com/v2-49e5d9e73b75f69dea4d1b371a769a04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-49e5d9e73b75f69dea4d1b371a769a04_b.jpg\"/><figcaption>lsusb</figcaption></figure><hr/><p>习得新工具：<code>lsusb</code></p><p>功能：查看USB设备 </p><hr/><p>注意到Device 005就是我的串口模块。执行指令<code>ls /dev/ttyUSB*</code>来查看所有USB串口设备。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-01a2503bb3f415ad28dce08a706a9e7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"482\" data-original=\"https://pic4.zhimg.com/v2-01a2503bb3f415ad28dce08a706a9e7f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;482&#39; height=&#39;61&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"482\" data-original=\"https://pic4.zhimg.com/v2-01a2503bb3f415ad28dce08a706a9e7f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-01a2503bb3f415ad28dce08a706a9e7f_b.jpg\"/></figure><p>可以看到识别成了<code>/dev/ttyUSB0</code>，这比较重要，后面的指令里要用到。</p><hr/><p>习得新目录：<code>/dev/*</code></p><p>包含内容：所有设备，其中tty设备为串口设备。 </p><hr/><p>使用指令<code>sttf -F /dev/ttyUSB0</code>查看比特率。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cdc6ed8a75fc29cb3f7a227256db8135_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"89\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/v2-cdc6ed8a75fc29cb3f7a227256db8135_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;562&#39; height=&#39;89&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"89\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"562\" data-original=\"https://pic2.zhimg.com/v2-cdc6ed8a75fc29cb3f7a227256db8135_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cdc6ed8a75fc29cb3f7a227256db8135_b.jpg\"/></figure><hr/><p>习得新工具：<code>stty</code></p><p>功能：查看串口设备的设置 </p><hr/><p>查看设备连接信息并筛选出我们的串口设备信息，使用指令<code>dmesg | grep ttyUSB0</code>查看结果如下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4173691521ca8b2f555d1f4e59d392ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1084\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb\" width=\"1084\" data-original=\"https://pic3.zhimg.com/v2-4173691521ca8b2f555d1f4e59d392ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1084&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1084\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1084\" data-original=\"https://pic3.zhimg.com/v2-4173691521ca8b2f555d1f4e59d392ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4173691521ca8b2f555d1f4e59d392ee_b.jpg\"/></figure><hr/><p>习得新工具：<code>dmesg</code></p><p>功能：查看设备信息</p><hr/><p>设备连接成功，下一步使用Python编程测试串口控制。使用指令<code>pip3 list | grep serial</code>查看已安装的Python包是否包括pyserial。这里因为使用Python3所以是<code>pip3</code>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c0a8302bb55d80f885273fd3713bf5a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-c0a8302bb55d80f885273fd3713bf5a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;597&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-c0a8302bb55d80f885273fd3713bf5a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c0a8302bb55d80f885273fd3713bf5a0_b.jpg\"/></figure><p>可以看到已经安装了，版本为3.4。一般来讲都是系统默认安装的，如果没有安装那么使用指令<code>sudo pip3  install pyserial</code>即可。</p><p>使用Python指令<code>python3 -m serial.tools.list_ports</code>查看可用的串口。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e73301cd798035e0fae38625f39e5c04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb\" width=\"748\" data-original=\"https://pic1.zhimg.com/v2-e73301cd798035e0fae38625f39e5c04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;748&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"748\" data-original=\"https://pic1.zhimg.com/v2-e73301cd798035e0fae38625f39e5c04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e73301cd798035e0fae38625f39e5c04_b.jpg\"/></figure><p>注意到有两个可用串口，<code>ttyAMA0</code>是一个板载串口，引出到了树莓派的针脚上。实际上树莓派板载两个串口，默认情况下有一个单独时钟的串口分配给了蓝牙，这个串口时钟稳定。另一个串口时钟源是CPU内核的时钟，分配给了这个针脚上的外接串口，这个串口时钟会有一些不稳定。这些细节不谈，以后有用再说。</p><p>下一步开始写脚本来测试串口功能。将模块上的TXD引脚和RXD引脚进行短接，这样读写能同时测试。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-919a8e6287c9fdf03659d227518a4746_b.jpg\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"4608\" data-original=\"https://pic3.zhimg.com/v2-919a8e6287c9fdf03659d227518a4746_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4608&#39; height=&#39;3456&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"4608\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4608\" data-original=\"https://pic3.zhimg.com/v2-919a8e6287c9fdf03659d227518a4746_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-919a8e6287c9fdf03659d227518a4746_b.jpg\"/><figcaption>短接TXD和RXD</figcaption></figure><p>使用Python3交互界面进行测试。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-84901f02b26f7f4fa18f87964e470aeb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1399\" data-rawheight=\"911\" class=\"origin_image zh-lightbox-thumb\" width=\"1399\" data-original=\"https://pic4.zhimg.com/v2-84901f02b26f7f4fa18f87964e470aeb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1399&#39; height=&#39;911&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1399\" data-rawheight=\"911\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1399\" data-original=\"https://pic4.zhimg.com/v2-84901f02b26f7f4fa18f87964e470aeb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-84901f02b26f7f4fa18f87964e470aeb_b.jpg\"/></figure><p>注意到有一行字符串的问题。Python3与Python2的字符串有一些差别，这里在串口发送的时候要标注字符串编码方式。</p><p>pyserial有好多别的函数，这里不细说，可以参考官方文档详细了解。</p><hr/><p>习得新Python库：<code>pyserial</code></p><p>功能：串口通信编程</p><hr/><h2>USB摄像头</h2><p>之前的文章中我用的摄像头一直是树莓派官方的排线摄像头，那个摄像头说实话不咋地，因为排线实在是不方便。这一波我换了USB摄像头，树莓派提供内核级别的驱动，即插即用非常方便。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42ff4d6de63bc70cfb9c17f8b5370ba0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1432\" data-rawheight=\"1076\" class=\"origin_image zh-lightbox-thumb\" width=\"1432\" data-original=\"https://pic1.zhimg.com/v2-42ff4d6de63bc70cfb9c17f8b5370ba0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1432&#39; height=&#39;1076&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1432\" data-rawheight=\"1076\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1432\" data-original=\"https://pic1.zhimg.com/v2-42ff4d6de63bc70cfb9c17f8b5370ba0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-42ff4d6de63bc70cfb9c17f8b5370ba0_b.jpg\"/></figure><p>这个摄像头景深很大，手动调焦调好了之后很大的距离内不需要对焦。</p><p>查看图像设备使用到了上面学到的新知识。使用指令<code>lsusb</code>来查看USB设备，使用<code>ls /dev/video*</code>来查看视频输入设备。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-34f3d0d99b7ce63844c6d219c863b617_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"931\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"931\" data-original=\"https://pic4.zhimg.com/v2-34f3d0d99b7ce63844c6d219c863b617_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;931&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"931\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"931\" data-original=\"https://pic4.zhimg.com/v2-34f3d0d99b7ce63844c6d219c863b617_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-34f3d0d99b7ce63844c6d219c863b617_b.jpg\"/></figure><p>注意到Device 007是摄像头连接前后多出来的设备，包括<code>/dev/video0</code>也是如此。</p><p>为了查看摄像头对焦的情况，需要实时查看摄像头内容，使用指令<code>sudo apt install luvcview</code>安装工具<code>luvcview</code>。我手上的摄像头仅仅支持到30帧，像素支持多少我忘了。使用指令可以查看摄像头图像。</p><div class=\"highlight\"><pre><code class=\"language-bash\">luvcview -d /dev/video0 -i <span class=\"m\">30</span> -s 640x480</code></pre></div><p> 上面是使用设备<code>/dev/video0</code>在30帧下像素为640x480的指令，接了显示器的情况下可以看到摄像头图像。</p><hr/><p>习得新工具：<code>luvcview</code></p><p>功能：实时显示摄像头图像</p><hr/><p>焦距调好之后尝试拍照，上面的工具拍照支持很不友好，因此使用指令<code>sudo apt install fswebcam</code>安装另一个工具<code>fswebcam</code>。 拍照指令如下。</p><div class=\"highlight\"><pre><code class=\"language-bash\">fswebcam /dev/video0 -r 640x480 --no-timestamp --no-banner --jpeg -95 --delay <span class=\"m\">3</span> --save test.jpg</code></pre></div><p>使用设备拍摄640*480的图片，没有时间戳，没有图片下方一个可恶的红条条，存为jpg格式质量95，延时三秒拍摄，文件名称test.jpg。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-119e06b7e70bd77a6279dc2cfe2d4427_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-119e06b7e70bd77a6279dc2cfe2d4427_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-119e06b7e70bd77a6279dc2cfe2d4427_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-119e06b7e70bd77a6279dc2cfe2d4427_b.jpg\"/><figcaption>USB摄像头拍摄结果</figcaption></figure><hr/><p>习得新工具：<code>fswebcam</code></p><p>功能：拍照</p><hr/><h2>OpenCV安装和测试</h2><p>之前的时候OpenCV都是源码编译安装，那样虽然能使用最新的库函数但也会耗费大量的时间和精力甚至最后会迎来失败。这一次我们使用<code>apt</code>包管理工具来安装OpenCV。使用以下指令来安装。</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo apt install libcv-dev libopencv-dev</code></pre></div><p>安装完成之后库函数会自动添加到系统链接目录下，非常方便，Python和C++都能使用。在Python3下使用如下脚本来测试。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1b046a9cdfcbbb579c099207136ffd5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"987\" data-original=\"https://pic1.zhimg.com/v2-1b046a9cdfcbbb579c099207136ffd5c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;987&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"987\" data-original=\"https://pic1.zhimg.com/v2-1b046a9cdfcbbb579c099207136ffd5c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1b046a9cdfcbbb579c099207136ffd5c_b.jpg\"/></figure><p>可以看到我们安装的版本为3.2.0，不是最新的版本。但是可以用，这样就很不错了。编写Python脚本进行摄像头测试。</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n<span class=\"n\">cap</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">isOpened</span><span class=\"p\">()):</span>\n\t<span class=\"n\">ret</span><span class=\"p\">,</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\t<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">&#39;capture&#39;</span><span class=\"p\">,</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n\t<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x00FF</span> <span class=\"o\">==</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">&#39;q&#39;</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">break</span>\n\t\n<span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">destroyAllWindows</span><span class=\"p\">()</span></code></pre></div><p>这个脚本的功能是打开摄像头显示图像，按下键盘上的<code>q</code>键退出。</p><p>然后进行C++代码测试。保存在<code>main.cpp</code>下。 </p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;opencv2/core/core.hpp&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;opencv2/imgproc/imgproc.hpp&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;opencv2/highgui/highgui.hpp&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdio&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">cv</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">Mat</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">image_gray</span><span class=\"p\">;</span>\n\t<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">CV_LOAD_IMAGE_COLOR</span> <span class=\"p\">);</span>\n\t<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">compression_params</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">&#34;No image data</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"n\">compression_params</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">CV_IMWRITE_JPEG_QUALITY</span><span class=\"p\">);</span>\n\t<span class=\"n\">compression_params</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">95</span><span class=\"p\">);</span>\n\n\t<span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">image_gray</span><span class=\"p\">,</span> <span class=\"n\">CV_RGB2GRAY</span><span class=\"p\">);</span>\n\t<span class=\"c1\">// 这里如果想在图形界面查看图像对比可以取消这几行行的注释\n</span><span class=\"c1\">//\tnamedWindow(&#34;image&#34;, CV_WINDOW_AUTOSIZE);\n</span><span class=\"c1\">//\tnamedWindow(&#34;image gray&#34;, CV_WINDOW_AUTOSIZE);\n</span><span class=\"c1\"></span>\n<span class=\"c1\">//\timshow(&#34;image&#34;, image);\n</span><span class=\"c1\">//\timshow(&#34;image gray&#34;, image_gray);\n</span><span class=\"c1\"></span>\n\t<span class=\"k\">try</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"s\">&#34;out.jpg&#34;</span><span class=\"p\">,</span> <span class=\"n\">image_gray</span><span class=\"p\">,</span> <span class=\"n\">compression_params</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">runtime_error</span><span class=\"o\">&amp;</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Exception converting image to JPG format: %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">());</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">&#34;Saved JPG file gray</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\n\t<span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>编写Makefile脚本如下。</p><div class=\"highlight\"><pre><code class=\"language-make\"><span class=\"nv\">CC</span><span class=\"o\">=</span>g++\n<span class=\"c\"># 可运行文件\n</span><span class=\"c\"></span><span class=\"nv\">TARGET</span><span class=\"o\">=</span>main\n<span class=\"c\"># C文件\n</span><span class=\"c\"></span><span class=\"nv\">SRCS</span><span class=\"o\">=</span>main.cpp\n<span class=\"c\"># 目标文件\n</span><span class=\"c\"></span><span class=\"nv\">OBJS</span><span class=\"o\">=</span><span class=\"k\">$(</span>SRCS:.cpp<span class=\"o\">=</span>.o<span class=\"k\">)</span>\n<span class=\"c\"># 库文件\n</span><span class=\"c\"># DLIBS = -lopencv_core -lopencv_imgproc -lopencv_highgui\n</span><span class=\"c\"></span><span class=\"nv\">DLIBS</span><span class=\"o\">=</span><span class=\"k\">$(</span>shell pkg-config --libs opencv<span class=\"k\">)</span>\n<span class=\"c\"># 链接为可运行文件\n</span><span class=\"c\"></span><span class=\"nf\">$(TARGET)</span><span class=\"o\">:</span><span class=\"k\">$(</span><span class=\"nv\">OBJS</span><span class=\"k\">)</span>\n\t<span class=\"k\">$(</span>CC<span class=\"k\">)</span> -o <span class=\"nv\">$@</span> $^ <span class=\"k\">$(</span>DLIBS<span class=\"k\">)</span>\n<span class=\"nf\">clean</span><span class=\"o\">:</span>\n\trm -f <span class=\"k\">$(</span>TARGET<span class=\"k\">)</span> <span class=\"k\">$(</span>OBJS<span class=\"k\">)</span>\n<span class=\"c\"># 编译规则 $@代表目标文件 $&lt; 代表第一个依赖文件\n</span><span class=\"c\"></span><span class=\"nf\">%.o</span><span class=\"o\">:</span>%.<span class=\"n\">cpp</span>\n\t<span class=\"k\">$(</span>CC<span class=\"k\">)</span> -o <span class=\"nv\">$@</span> -c $&lt;\n</code></pre></div><p>Makefile和main.cpp应当放在同一目录下，在该目录下执行指令<code>make</code>可以编译。编译完成后目录下应有以下文件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-03c8ff763cb95d7270ec34bd9cd10792_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic3.zhimg.com/v2-03c8ff763cb95d7270ec34bd9cd10792_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;673&#39; height=&#39;293&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"673\" data-original=\"https://pic3.zhimg.com/v2-03c8ff763cb95d7270ec34bd9cd10792_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-03c8ff763cb95d7270ec34bd9cd10792_b.jpg\"/></figure><p>绿色的是可执行文件，*.o是编译的obj文件，test.jpg是刚才我用摄像头拍的照片，这里拿来测试。</p><p>使用指令<code>./main test.jpg</code>可以进行测试。可以观察到马路上生成一个新的out.jpg。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-03d40f532f74c209575f9909dd5bf37c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"822\" data-original=\"https://pic1.zhimg.com/v2-03d40f532f74c209575f9909dd5bf37c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;822&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"822\" data-original=\"https://pic1.zhimg.com/v2-03d40f532f74c209575f9909dd5bf37c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-03d40f532f74c209575f9909dd5bf37c_b.jpg\"/></figure><p> 结果是这样的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bc40e24ccefdb4ab0acc8fca5fbc0499_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-bc40e24ccefdb4ab0acc8fca5fbc0499_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-bc40e24ccefdb4ab0acc8fca5fbc0499_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bc40e24ccefdb4ab0acc8fca5fbc0499_b.jpg\"/><figcaption>去色结果</figcaption></figure><h2>参考文献</h2><p>树莓派官方网站：<a href=\"https://link.zhihu.com/?target=https%3A//www.raspberrypi.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">raspberrypi.org/</span><span class=\"invisible\"></span></a></p><p>清华大学开源软件镜像站：<a href=\"https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">mirrors.tuna.tsinghua.edu.cn</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span></a></p><p>CPU温度：<a href=\"https://link.zhihu.com/?target=https%3A//my.oschina.net/yehun/blog/1633498\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">my.oschina.net/yehun/bl</span><span class=\"invisible\">og/1633498</span><span class=\"ellipsis\"></span></a></p><p>create_ap：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/oblique/create_ap\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/oblique/crea</span><span class=\"invisible\">te_ap</span><span class=\"ellipsis\"></span></a></p><p>rfkill：<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/litifeng/p/5828294.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/litifeng/p/</span><span class=\"invisible\">5828294.html</span><span class=\"ellipsis\"></span></a></p><p>USB转TTL：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/fhqlongteng/article/details/80417028\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/fhqlongte</span><span class=\"invisible\">ng/article/details/80417028</span><span class=\"ellipsis\"></span></a></p><p>USB摄像头：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/yjp19871013/article/details/80147803\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/yjp198710</span><span class=\"invisible\">13/article/details/80147803</span><span class=\"ellipsis\"></span></a></p><p>安装OpenCV：<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/weixin_43909881/article/details/94013882\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/weixin_43</span><span class=\"invisible\">909881/article/details/94013882</span><span class=\"ellipsis\"></span></a></p><p>图片保存问题：<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/cxchanpin/p/7253722.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/cxchanpin/p</span><span class=\"invisible\">/7253722.html</span><span class=\"ellipsis\"></span></a></p>", 
            "topic": [
                {
                    "tag": "树莓派（Raspberry Pi）", 
                    "tagLink": "https://api.zhihu.com/topics/19737690"
                }, 
                {
                    "tag": "开源硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19581426"
                }, 
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }
            ], 
            "comments": [
                {
                    "userName": "贾晓明", 
                    "userLink": "https://www.zhihu.com/people/6ae12fd6145054c9b5de13de5178b05c", 
                    "content": "学习了，感谢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59492187", 
            "userName": "天生我才降凡间", 
            "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
            "upvote": 1, 
            "title": "n=3的初等数学证明，让对费马大定理问题感兴趣的人开开眼界", 
            "content": "<p> 证明x^3+y^3=z^3无整数解<br/>证明x^3+y^3=z^3无整数解，就是等价证明不定方程y^3=a^3+3a^2x+3ax^2无整数解即可。证明过程如下：</p><p>y^3=a^3+3a^2x+3ax^2 (1)</p><p>3ax^2+3a^2x-(y^3-a^3)=0 (2)</p><p>经过移项处理，得到的（2）式是关于x为未知数的一元二次方程式。由于我的电脑操作基础知识不好，不会打印一元二次方程式的求根公式，请谅解。我们知道在（2）式的求根公式根号里面的关系式是:（3a^2)^2+12a(y^3-a^3)，要证明（2）式的未知数x有没有整数解，就是要证明根号里面的这个关系式在其变化过程中是否有平方数存在，现在对这个关系式作变形处理如下：</p><p>(3a^2)^2+12a(y^3-a^3)=(3a^2)^2+12a(y-a)(y^2+ya+a^2)</p><p>=(3a^2)^2+12a(y-a)a^2+12a(y-a)(y^2+ya)</p><p>=(3a^2)^2+2·3a^2·2a(y-a)+4a^2(y-a)^2+12a(y-a)(y^2+ya)-4a^2(y-a)^2</p><p>=[3a^2+2a(y-a)]^2+4a(y-a)[3y^2+3ya-a(y-a)]</p><p>=(2ay+a^2)^2+4a(y-a)(3y^2+2ya+a^2)</p><p>即有（3a^2)^2+12a(y^3-a^3)=(2ay+a^2)^2+4a(y-a)(3y^2+2ya+a^2) (3)</p><p>接下来模仿（3）式右端的结构形式构造一个相应的平方数关系式如下：</p><p>[2ay+a^2+2ka(y-a)]^2=(2ay+a^2)^2+D，则有</p><p>D=[2ay+a^2+2ka(y-a)]^2-(2ay+a^2)^2</p><p>=2ka(y-a)(4ay+2a^2+2kay-2ka^2)</p><p>=4ka(y-a)(2ay+a^2+kay-ka^2)</p><p>即有[2ay+a^2+2ka(y-a)]^2=(2ay+a^2)^2+4ka(y-a)(2ay+a^2+kay-ka^2) (4)</p><p>要使（3）式左端与（4）式左端相等，即使（3a^2)^2+12a(y^3-a^3)=[2ay+a^2+2ka(y-a)]^2成立，应有</p><p>4a(y-a)(3y^2+2ya+a^2)=4ka(y-a)(2ay+a^2+kay-ka^2) (5)</p><p>因为y＞a，因此y≠a，所以有</p><p>3y^2+2ya+a^2=2kay+ka^2+k^2ay-k^2a^2</p><p>把上式整理为y为未知数的一元二次方程式形式有</p><p>3y^2-(k^2+2k-2)ay+(k^2-k+1)a^2=0 (6)</p><p>在（6）式里的y有没有整数解，同样要看求根公式根号里面的关系式在其变化过程中是否有平方数存在，根号里面的关系式为：[（k^2+2k-2)^2-12(k^2-k+1)]a^2，经过进一步变形处理，这个关系式化简为：k^4+4k^3-12k^2+4k-8。当k=2时，这个关系式的计算结果等于0，因此k值的取值范围为k＞2的一切整数，经过试算得到下式</p><p>（k^2+2k-8)^2＜k^4+4k^3-12k^2+4k-8＜(k^2+2k-5)^2</p><p>在平方数（k^2+2k-8)^2和平方数（k^2+2k-5)^2之间存在两个平方数，即（k^2+2k-7)^2和(k^2+2k-6)^2，这两个平方数的展开式如下</p><p>(k^2+2k-7)^2=k^4+4k^3-10k^2-28k+49</p><p>(k^2+2k-6)^2=k^4+4k^3-8k^2-24k+36</p><p>依据上述展开式建立数量关系式如下</p><p>k^4+4k^3-10k^2-28k+49=k^4+4k^3-12k^2+4k-8</p><p>k^4+4k^3-8k^2-24k+36=k^4+4k^3-12k^2+4k-8</p><p>化简这两个关系式分别得到2k^2-32k+57=0和k^2-7k+11=0，求解的结果是这两个方程式的k值都没有整数解，因此k^4+4k^3-12k^2+4k-8与(k^2+2k-7)^2和（k^2+2k-6)^2不存在等量关系，也就是说k^4+4k^3-12k^2+4k-8是一个非平方数，因此当k的取值为k＞2的一切整数时，由（6）式通过求根公式求得的y值都无整数解，这说明k取k＞2的一切整数时与其对应的y值没有同为整数解的情形存在，因此（3a^2)^2+12a(y^3-a^3)与在前面构造的平方数[2ay+a^2+2ka(y-a)]^2不存在等量关系，这就证明（3a^2)^2+12a(y^3-a^3)在其变化过程中没有平方数存在。</p><p>由于（3a^2)^2+12a(y^3-a^3)在其变化过程中没有平方数存在，因此由（2）式通过求根公式求得的每一个x值都无整数解，则x^3+y^3=z^3无整数解的命题得证。</p>", 
            "topic": [
                {
                    "tag": "费马大定理", 
                    "tagLink": "https://api.zhihu.com/topics/19637606"
                }
            ], 
            "comments": [
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>怎样理解费马大定理问题所言的无整数解？费马大定理不定方程的一般表达式是：x^n+y^n=z^n，只有x、y、z所表示的这三个数都是整数才能把这一组数称为有整数解；相反，只要其中有一个数是无理数就把这一组数称为无整数解。如果经过开二次方、开三次方、开四次方、开五次方等等一系列的开方算出的数都不是整数，这样的一些数就叫无理数。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>从法国数学家费马提出费马大定理问题到现在的数百年时间里，全世界给出n=3的证明者只有大数学家欧拉和我。在欧拉的证明中使用了复数、同余式、范数等概念，欧拉给出的证明可能只有精通数论知识的专家学者才能看懂；对一般的数学爱好者来说阅读欧拉的论文会感觉枯燥乏味，而且看不懂；而我给出的n=3的证明只要懂一点中学阶段学过的代数知识和一元二次方程的求根公式就能看懂，如此浅显易懂的证明符合简单就是美的审美观感，一扫人们对数学感到深奥难懂、枯燥乏味的恐惧感，领略茅塞顿开、赏心悦目的数学之美。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>欧拉给出了n=3的证明，但他想沿着这一条思路走下去试图找到费马大定理问题一般性证明所做的努力没有成功，他只能承认证明失败。欧洲早期的数学家学术道德很高尚，不以自己的学术声望很高而胡编乱造一个证明愚弄世人，也不以很高的学术地位压制其他人，所以欧洲成为现代数学的发源地和强大的推动力，这是人类数学的幸运。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>怎样理解费马大定理问题所言的无整数解？费马大定理不定方程的一般表达式是：x^n+y^n=z^n，只有x、y、z所表示的这三个数都是整数才能把这一组数称为有整数解；相反，只要其中有一个数是无理数就把这一组数称为无整数解。如果经过开二次方、开三次方、开四次方、开五次方等等一系列的开方算出的数都不是整数，这样的一些数就叫无理数。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>如果火星上存在过智慧文明的话，那个翘着二郎腿、脚踩着蘑菇的数学家破解的费马大定理问题应该与我的思路相同，破解n=3的情形也是如此。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>无理数的进一步举例说明：3开二次方、4开三次方、5开四次方、6开五次方、11开六次方、20开七次方等等这样一系列的数，从其开方的计算结果可以看到小数点后的部分是无限不循环小数，这样一些数就叫无理数。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>在不定方程y^3=a^3+3a^2x+3ax^2的两侧同时加上x^3，则有x^3+y^3=a^3+3a^2x+3ax^2+x^3，则得x^3+y^3=(a+x)^3，令z=a+x，这样就得x^3+y^3=z^3，因此不定方程y^3=a^3+3a^2x+3ax^2与x^3+y^3=z^3是等价命题，也就是说只要证明了不定方程y^3=a^3+3a^2x+3ax^2无整数解，也就证明了不定方程x^3+y^3=z^3无整数解。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45421616", 
            "userName": "Obliviate", 
            "userLink": "https://www.zhihu.com/people/f96b35cecbdc05ed17825298bf969be4", 
            "upvote": 0, 
            "title": "leetcode算法题（week4）", 
            "content": "<h2>142. Linked List Cycle II</h2><h2>题目描述</h2><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p><p><b>Note: Do not modify the linked list.</b></p><h2>Follow up:</h2><p>Can you solve it without using extra space?</p><h2>解题思路</h2><p>无视Follow up中的内容的话，很容易就能想到，用一个长度为N的数组存已经经过的节点，然后每次访问下一个元素时，先在数组中查找是否访问过这个元素，若没有，放入数组，并继续访问下一个元素；若有，则返回这个元素。如果下一个元素为空，则返回空值。这样做我们不难发现，经过第k个元素时，需要查找k-1个元素，也就是说，时间复杂度是$O(N^2)$的规模，而且，数组开辟的额外空间是O(N)的规模。显然这不是一个好方法。<br/>那么我们要如何改善它呢？数组的查找显然是耗费时间非常多的，因此，如果我们把查找时间降低到O(1)的规模，那么，整个算法的复杂度规模就可以显著下降了。查找时间为O(1)的数据结构，我们马上就能想到哈希表也就是对应c++中的<code>map</code>类型。经过这一轮优化，我们不难发现，时间复杂度已经下降到了O(N)的规模。<br/>然而，题目要求的不可开辟O(N)复杂度的额外空间要怎么解决呢？要解决这个问题的核心在于，我们如何确定链表有环，即什么时候再次经过我们访问过的元素。如果单纯的用一个指针来遍历整个链表的话，我们是很难得知是否访问过这个元素的，要确定这个就必须要开辟空间存储访问过的元素。但这时，聪明的discussion中的老哥们想到，如果有两个不一样快的指针，同时在遍历这个链表，若它有环存在，快的指针就必定能在后面追上慢的指针；反之，则环不存在。<br/>既然确定环的问题解决了，我们又要如何确定环开始的节点呢？假设两个指针，快的指针在每次迭代中走两步，慢的指针在每次迭代中走一步。当快的指针追上慢的指针时，快的指针比慢的指针走的路程要多一倍。先证明：快的指针会在慢指针到达终点前与它相遇：</p><div class=\"highlight\"><pre><code class=\"language-text\">k为环的长度，s为起点到循环开始的长度，慢指针走了t次后到达终点。\n慢指针走的路程 = s + k\n快指针走的路程 = 2(s + k) = s + k + k + s\n显然，快指针已经超过了慢指针。因此它们一定会在慢指针走到终点前相遇。并且快指针超过了慢指针s的长度。</code></pre></div><p>也就是说，当它们相遇时，快指针比慢指针多走了k*r的长度，假如这时，快指针的速度变得跟慢指针一样，并且从链表头开始走会怎么样呢？<br/>由于速度相同，它们之间的路程差不会再拉开，一直维持在k*r。这时候，让慢指针和速度跟它一致的快指针一起开始走，当慢指针走到终点并回到循环开始元素时，快指针由于刚好快它k倍数的长度，就会在循环开始元素二者相遇。这时候，我们把它们相遇的元素返回即可。<br/></p><h2>时间复杂度分析</h2><p>慢指针刚好跑完整个链表，总时间复杂度为O(N)。</p><h2>空间复杂度分析</h2><p>两个指针复杂度O(1)</p><h2>源码</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n  <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">detectCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">ListNode</span><span class=\"o\">*</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"n\">ListNode</span><span class=\"o\">*</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">cycle</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">q</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n      <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cycle</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n      <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45195784", 
            "userName": "Obliviate", 
            "userLink": "https://www.zhihu.com/people/f96b35cecbdc05ed17825298bf969be4", 
            "upvote": 0, 
            "title": "leetcode算法题（week3）", 
            "content": "<h2>49. Group Anagrams</h2><h2>题目描述</h2><p>Given an array of strings, group anagrams together.</p><h2>Example:</h2><h2>Input:</h2><p><code>[&#34;eat&#34;, &#34;tea&#34;, &#34;tan&#34;, &#34;ate&#34;, &#34;nat&#34;, &#34;bat&#34;]</code></p><h2>Output:</h2><div class=\"highlight\"><pre><code class=\"language-text\">[\n  [&#34;ate&#34;,&#34;eat&#34;,&#34;tea&#34;],\n  [&#34;nat&#34;,&#34;tan&#34;],\n  [&#34;bat&#34;]\n]</code></pre></div><p>Note:</p><ul><li>All inputs will be in lowercase.</li><li>The order of your output does not matter.</li></ul><h2>解题思路</h2><p>看到这道题的第一时间，想到的方法自然是先对里面每一个单词进行排序，按照字母顺序排列，然后再判断相等来进行分类。时间复杂度为：排序复杂度 * n个元素：O($n^2logn$)，分类复杂度：O(n)，总复杂度O($n^2logn$)。由于题目没有规定时间复杂度上限和空间复杂度上限，因此这个方法显然是最容易想到的解决方法。然而，我们能不能让时间复杂度稍微低一点呢？<br/>在leetcode的discuss中看到了一个这样的想法：我们要找到拥有相同字母的单词，那么我们可以理解为，这些拥有相同字母的单词拥有相同的“键值”，而它的键值必定和这几个字母有关。那么我们要做的就是找出用这些字母表达出这些独特的键值。利用字母的ASCII值是否可以做到呢？在尝试了+-*/四则运算之后，我发现，纯粹的用ASCII是做不到唯一表达一个字符串的，因此，这时候，我们就要利用更强的哈希方法。将字母的ASCII值分别对应一个素数，然后字符串的键值就可以用这些素数的乘积来表示了。<br/>对于大佬来说，这可能是一个显而易见的方法，但对于萌新而言，这简直是新世界的大门啊！</p><h2>时间复杂度分析</h2><p>计算键值O(n<i>l)，l是单词的平均长度。分类：O(n)。因此时间复杂度为O(n*</i>l)。</p><h2>空间复杂度分析</h2><p>哈希函数O(1)，分类复杂度：O(n)</p><h2>源码</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">groupAnagrams</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">strs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">primeNumbers</span><span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span>\n            <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">};</span>\n      <span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">weightOfStr</span><span class=\"p\">;</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">strs</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span><span class=\"p\">{};</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">strs</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"n\">strs</span><span class=\"p\">};</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">i</span> <span class=\"p\">:</span> <span class=\"n\">strs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">weight</span> <span class=\"o\">*=</span> <span class=\"n\">primeNumbers</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">weightOfStr</span><span class=\"p\">[</span><span class=\"n\">weight</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span><span class=\"n\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">weightOfStr</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">weightOfStr</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">).</span><span class=\"n\">second</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44101371", 
            "userName": "鳖呀嘛鳖", 
            "userLink": "https://www.zhihu.com/people/a8a82711f4a17832bb90e215bad00f1e", 
            "upvote": 2, 
            "title": "树莓派装机设置教程", 
            "content": "<p>第一次知乎发文章。</p><p>本文是树莓派初次装机的基础教程，适用于strech和jessie</p><hr/><p>1. 更换清华源</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo nano /etc/apt/sources.list</code></pre></div><p>在文件中添加以下内容</p><div class=\"highlight\"><pre><code class=\"language-text\">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib #for debian9\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib #for debian9\ndeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ jessie main non-free contrib #for debian8\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ jessie main non-free contrib #for debian8</code></pre></div><p>保存退出，执行以下指令</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get update\n$ sudo apt-get upgrade -y</code></pre></div><hr/><p>2. 安装必要软件：git, pip, cmake</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get install python-pip python3-pip git cmake</code></pre></div><p>3. 安装wiringPi</p><p>wiringPi的库文件在带桌面的raspbian上是默认安装的，只有安装lite系统时才需要自行安装</p><p>用如下命令检查是否已经安装</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ gpio -v</code></pre></div><p>若未安装，则</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ git clone git://git.drogon.net/wiringPi\n$ <span class=\"nb\">cd</span> ./wiringPi\n$ git pull origin\n$ ./build</code></pre></div><p>4. 安装OpenCV（可选）</p><p>下载OpenCV源文件并解压</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ wget https://github.com/opencv/opencv/archive/3.4.1.zip\n$ unzip <span class=\"m\">3</span>.4.1.zip</code></pre></div><p>安装依赖包(务必确认已安装cmake)</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev</code></pre></div><p>开始编译安装过程（建议使用风扇散热）</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ mkdir ./opencv-3.1.4/my_build_dir\n$ <span class=\"nb\">cd</span> ./opencv-3.1.4/my_build_dir\n$ cmake -D <span class=\"nv\">CMAKE_BUILD_TYPE</span><span class=\"o\">=</span>Release -D <span class=\"nv\">CMAKE_INSTALL_PREFIX</span><span class=\"o\">=</span>/usr/local ..\n$ sudo make -j4\n$ sudo make install</code></pre></div><p>一路不报错那就结束了，下面配置编译环境</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo nano /etc/ld.so.conf.d/opencv.conf</code></pre></div><p>在文件中添加如下内容</p><div class=\"highlight\"><pre><code class=\"language-bash\">/usr/local/lib</code></pre></div><p>保存退出，执行如下命令</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo ldconfig</code></pre></div><p>配置bash</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo nano /etc/bash.bashrc</code></pre></div><p>在最后添加如下内容</p><div class=\"highlight\"><pre><code class=\"language-text\">PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig\nexport PKG_CONFIG_PATH</code></pre></div><p>保存退出并执行如下命令</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">source</span> /etc/bash.bashrc\n$ sudo updated</code></pre></div><p>为了OpenCV能调用树莓派摄像头，执行以下设置</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo nano /etc/modules-load.d/rpi-camera.conf</code></pre></div><p>在最后一行添加以下内容</p><div class=\"highlight\"><pre><code class=\"language-text\">bcm2835-v4l2</code></pre></div><p>保存退出，重启后即可使用</p><p>下面执行测试</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">cd</span> your_dir/opencv-3.4.1/samples/cpp/example_cmake\n$ cmake .\n$ make\n$ ./opencv_example</code></pre></div><hr/><p>5. 设置AP模式（可选）</p><p>本条作用是设置树莓派作为一个WiFi基站，可以用来无线访问。</p><p>下载源码</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ git clone https://github.com/oblique/create_ap.git\n$ <span class=\"nb\">cd</span> create_ap\n$ sudo make install</code></pre></div><p>安装依赖包</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq</code></pre></div><p>测试指令</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo create_ap --no-virt -g <span class=\"m\">192</span>.168.14.1 wlan0 eth0 RPi <span class=\"m\">88888888</span> <span class=\"c1\">#ssid：RPi, passwd: 88888888</span></code></pre></div><p>成功则设置开机启动</p><p>执行命令</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo nano /etc/rc.local</code></pre></div><p>将测试指令添加到”exit 0”之前</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo create_ap --no-virt -g <span class=\"m\">192</span>.168.14.1 --daemon wlan0 eth0 RPi <span class=\"m\">88888888</span> <span class=\"c1\">#ssid：RPi, passwd: 88888888</span></code></pre></div><p>重启测试</p><hr/><p>6. 添加新的sudo用户</p><p>使用管理员用户执行以下指令</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo adduser username <span class=\"c1\">#you can change user name as you like</span></code></pre></div><p>之后按照提示添加用户选项</p><p>为了给新用户增加管理员权限，修改管理员列表</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo visudo</code></pre></div><p>在# User privilege specification这一行下添加如下内容</p><div class=\"highlight\"><pre><code class=\"language-bash\">username <span class=\"nv\">ALL</span><span class=\"o\">=(</span>ALL:ALL<span class=\"o\">)</span> ALL</code></pre></div><p>保存退出</p><hr/><p>参考：</p><p>清华源</p><a href=\"https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/help/raspbian/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-22b1ca2db10aa9b49fd1e815a45ab431_180x120.jpg\" data-image-width=\"160\" data-image-height=\"125\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tsinghua Open Source Mirror</a><p>wiringPi</p><a href=\"https://link.zhihu.com/?target=http%3A//wiringpi.com/download-and-install/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-850711ed2ff8ec034ea9676b32718042_180x120.jpg\" data-image-width=\"940\" data-image-height=\"188\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Raspberry Pi | Wiring | Download &amp; Install | Wiring Pi</a><p>create_ap源码作者的GitHub</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/oblique/create_ap\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-5f09a3fa813716e9d5beb5b3d37ed75b_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">oblique/create_ap</a><p>开机启动脚本</p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/1a160067d8fd\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">几种设置树莓派开机自启的方法</a><p>OpenCV</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/cocoaqin/article/details/78163171\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帐号登录</a><p></p>", 
            "topic": [
                {
                    "tag": "树莓派（Raspberry Pi）", 
                    "tagLink": "https://api.zhihu.com/topics/19737690"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44082503", 
            "userName": "天生我才降凡间", 
            "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
            "upvote": 1, 
            "title": "怀尔斯证明费马大定理究竟是不是一个骗局？", 
            "content": "<p>勾三股四弦五就是俗称的勾股定理，是一句人们都能脱口说出来的顺口溜。在不定方程x^2+y^2=z^2中，设x=3、y=4、z=5并代入这个不定方程中则有3^2+4^2=5^2，3^2+4^2=5^2就是勾股定理的数量关系式，x=3、y=4、z=5就叫不定方程x^2+y^2=z^2的一组整数解，一般把这样的一组整数解表示为：（3,4,5），把5^2+12^2=13^2这一组勾股数的整数解表示为：(5,12,13)，这样成组出现的整数解当然有无限多组，由求勾股数的方法即可算出来。在不定方程x^n+y^n=z^n中当n=2时就是表示勾股定理的情形，在我例举的前述例子已经知道在表示勾股定理的不定方程中是存在很多组整数解的，那么在n=3、n=4、n=5以致n无限增大时所对应的一系列不定方程中是否都能像n=2时所对应的不定方程那样存在许多组整数解？法国数学家费马猜测当n&gt;2时的每一个n值所对应的不定方程x^3+y^3=z^3、x^4+y^4=z^4、x^5+y^5=z^5等一系列情形都无整数解，即当n&gt;2时不定方程x^n+y^n=z^n无整数解，这就是费马大定理的内涵和由来。要想破解费马大定理问题当然要能正确理解这个难题的内涵才行，而有些介绍费马大定理的书籍中出现“非平凡解”这种令人费解的说法，这种说法扰乱了读者对整数解的正确认识，误导人们对整数解产生一种很难把握的模糊错觉，所以扫除“非平凡解”这种画蛇添足的数学术语有助于人们正确理解费马大定理的内涵。</p><p>破解难题的体验即在寻找到破解的切入点之前就像一个刚刚学走路的儿童一样，如果连第一步都走不好，能走好第二步吗？第二步走不好，能走得更远吗？如果走路都步履蹒跚，更不可能参加百米大赛；同样道理，不管是谁想给出费马大定理的证明，最起码应该能够给出n=3的证明（即x^3+y^3=z^3），这是证明费马大定理应该走出的第一步；如果用怀尔斯的方法给不出n=3的证明，我只能认为怀尔斯给出的费马大定理证明是用故作高深的骗人手法愚弄全世界的数学专业人士和广大的数学爱好者。</p><p>一个好的数学证明，应该能体现出证明者的奇妙构思和过人的智慧。在费马大定理的证明中n=3的情形是最简单的情形，应该成为证明者展现其巧妙方法的一个缩影。如果连绝大多数的数学专业人士都看不懂n=3的情形，那就更看不懂怀尔斯证明费马大定理的整个过程了。据说怀尔斯的证明论文发表以后除了那五六个审稿人能“看懂”外几乎没有一个订阅该刊物的人能看懂（订阅这种刊物的人应该都属于数学家层次），而且该文长达120多页，资深数学家研读该文都会感到很吃力，因此费马大定理在迟迟解决不了的迷茫时光中困惑了三百多年来对此难题感兴趣的人们；怀尔斯给出的证明如同一部让绝大多数的人们看不懂的“天书”，这样的“天书”更像一场恶作剧一样对人们造成了新的困扰，这样的“天书”正好说明有人利用费马大定理的神秘感在不断演绎着欺诈的故事。</p>", 
            "topic": [
                {
                    "tag": "费马大定理", 
                    "tagLink": "https://api.zhihu.com/topics/19637606"
                }, 
                {
                    "tag": "费马", 
                    "tagLink": "https://api.zhihu.com/topics/19558794"
                }, 
                {
                    "tag": "定理", 
                    "tagLink": "https://api.zhihu.com/topics/19754113"
                }
            ], 
            "comments": [
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>人民日报主办的《强国论坛》是真正体现了百家争鸣和言论自由的论坛，在我看来是全世界办得最好的论坛，据说该论坛也是国家领导人经常上网的论坛之一。我在《强国论坛》发表了许多质疑”陈氏定理“以及我对著名作家徐迟跳楼自杀之谜所持不同看法的贴子几乎全部放行，不过在《强国论坛》被”陈氏定理“洗脑的愚民也是相当多，说明在这个社会有独立思考问题能力的人实在太少了。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "李结果", 
                    "userLink": "https://www.zhihu.com/people/8fe5d1bd150977fb7820de2850a4f641", 
                    "content": "你四个快乐的民科", 
                    "likes": 12, 
                    "childComments": []
                }, 
                {
                    "userName": "Edison Chien", 
                    "userLink": "https://www.zhihu.com/people/1345cb85e8abba491fb0f03f527b8650", 
                    "content": "n=3 4 5 6 7等等前人已经用初等数学证明", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "天生我才降凡间", 
                            "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                            "content": "<p>你说的不错，你说的的这几种情形如前人欧拉、费马本人、拉梅以及一个法国女数学家已经给出了证明，但到了n=7的情形就止步不前了，而且正如你所说都是初等数学证明，这也正好说明要想逐一给出费马大定理的一系列情形的证明是不可能走得太远的。既然怀尔斯是用非常艰深的椭圆曲线理论和模形式理论等现代高等数学方法给出了费马大定理的证明，他也应该能用他的方法给出n=3的证明，这是应该能做到的。在同一论文中只能用同一种思路和方法解决问题，不能把初等数学方法和高等数学方法混为一谈。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Edison Chien"
                        }
                    ]
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>北京大学邀请来访的怀尔斯所作的学术交流情况说明了什么问题？据说怀尔斯在北大举办了学术讲座，来听讲的师生早早等候在讲堂里，座无虚席，但接近尾声时溜走了不少听众，所剩寥寥无几，是因为听不懂他的高深莫测理论才纷纷离开，出现这种以冷场收场（收场时没有热烈的掌声）的结局对一个备受全世界瞩目的数学大师怀尔斯来说有点大不敬，不知怀尔斯先生当时的感受怎么样，可能会以幽默的心态泰然处之：别人听不懂、不理解无所谓，只要我坚持认为我给出的费马大定理证明是正确的就行。北大的学生百里挑一，陪同的教授也是数学界的精英，属于高智商人群，这些人都听不懂怀尔斯的讲座，在中国还有谁能理解怀尔斯给出的费马大定理证明？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>如果怀尔斯真的给出了费马大定理的证明，他应该对n=3的情形作一个简单的点评，以帮助人们正确理解他的证明思路，但谁也没有看到他对自己给出的费马大定理做过什么点评；自己做的事自己都说不清楚，还能取信于人吗？如果连绝大多数的数学专业人士都看不懂他证明n=3的情形，那就更看不懂怀尔斯证明费马大定理的整个过程了。据说怀尔斯的证明论文发表以后除了那五六个审稿人能“看懂”外几乎没有一个订阅该刊物的人能看懂（订阅这种刊物的人应该都属于数学家层次），而且该文长达120多页，资深数学家研读该文都会感到很吃力，因此费马大定理在迟迟解决不了的迷茫时光中困惑了三百多年来对此难题感兴趣的人们，人们在饥不择食的困惑中不管怀尔斯给出的证明是否正确，以其拥有世界名校学者的身份作为可信的依据，权且把怀尔斯的证明拿来“充饥”。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>能证明n=3的情形不一定就能完整证明费马大定理；以大数学家欧拉为例，他给出了n=3的证明，但他试图给出一般性的证明没有成功，只好承认证明费马大定理失败。欧拉在证明费马大定理问题上没有凭借其学术声望搞欺诈行为，体现出了高尚的学术道德，虽败犹荣。话又说回来，当某人宣称其完整破解了费马大定理问题，那么他一定能给出n=3的证明，这是完整证明费马大定理问题不可或缺的一个重要步骤，是解决费马大定理问题绕不过去的起始点。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Xenapior", 
                    "userLink": "https://www.zhihu.com/people/88488d3f921361756058e0cd1a90bbf1", 
                    "content": "<p>po主可以上百度搜一下这句话：“这件事还是由你自己定夺，你说你证明了黎曼猜想就证明了黎曼猜想，你说你没有证明黎曼猜想就没有证明了黎曼猜想。”</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "之乎者也", 
                    "userLink": "https://www.zhihu.com/people/ad98469510da8a442b56c444bd23fc30", 
                    "content": "费马大定理有没有被证明确实需要打个问号。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "陆qian", 
                    "userLink": "https://www.zhihu.com/people/fb3504c7215955f2325bfd798a70560b", 
                    "content": "不管怎样，有一件事是可以肯定的，一百二十多页肯定不是＂美妙的证法＂", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44081148", 
            "userName": "天生我才降凡间", 
            "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
            "upvote": 0, 
            "title": "在“充分大”这个伪概念的迷宫里自娱自乐的“数学家”们", 
            "content": "<p>【不过罗兹金给出的3的14348907次方实在太大。陈景润和王天泽将常数改进到了大概10的30000 次方，或者是 20000，我记太清了。陈景润就是那位证明了充分大偶数可以表示为一个素数和一个至多只有两个素因子的所谓“殆素数”的和的数学家，我想你们的读者应该对他很熟悉。他们改进的常数比维诺格拉多夫的要好得多，但还远远不够。 后来又有一位中国数学家（指香港大学的廖明哲——编者注），将常数改进到了10的大约1300次方。这挺好，但也不够。 即使能将常数减小到10的100 次方，还是不够。这个数比宇宙中所有的粒子数再乘以自大爆炸以来的秒数还要大。计算机很难在足够短的时间内将猜想验证到10的100次方。所以，我们要做的就是将常数降低到计算机能处理的范围。2005年我开始关注这个问题。在此之前，我看过维诺格拉多夫的证明，那时我就意识到要将常数降得很低，我当时能将它降到10的 100次方，但这对猜想的完全证明没有决定性作用。从2006 年左右开始，我一点点地去做这个问题，发掘不同的小想法。也有别人在干类似的事。大概一年半前，陶哲轩证明了每个奇数都可以写成最多五个素数的和。从这个节奏来看，我要赶紧点，当时可能我也有些毛了（笑）。所以从去年开始，我就放下了手头上别的工作，加班加点把所有的小想法拼在一起。最后我发现它们能行得通，这无疑很棒。 我把常数降低到了10的29 次方。实际上还可以降低到10的27次方，但这没什么意义，因为我们的程序已经能验证到大概8 × 1030，比实际需要的还高80倍，再搞下去就没必要了。】</p><p>上面这一段话是我从别的网站上转录到此的，网友们的电脑操作技术应该很好，应该很容易查看到，不是我故意编造谎言栽赃抹黑别人，其中就说到“充分大”存在一个“常数”，而且对这个“常数”还在没完没了的“改进”之中，这种”改进“可能到世界末日到来都不会有什么结果，但许多人竟然认为这种混账逻辑是正确的，看看，被“陈氏定理”这种歪理邪说洗脑的愚民实在太多了。</p><p>数学上所说的常数如π≈3.1415927……、e≈2.71828……等数都有很强的稳定性，那有什么变来变去而让人不知所终的奇怪“常数”存在？这种奇怪“常数”明显违反了数学常识，当然是伪科学。“陈氏定理”的一个论据就是“充分大”这个伪概念，因此“陈氏定理”的论据不充分、不可靠，就像在沙漠上盖房子那样根基不牢地动山摇。</p>", 
            "topic": [
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }, 
                {
                    "tag": "自然科学", 
                    "tagLink": "https://api.zhihu.com/topics/19553298"
                }
            ], 
            "comments": [
                {
                    "userName": "Tommyli", 
                    "userLink": "https://www.zhihu.com/people/e7f256de055cca2afc8f0a903ba80b93", 
                    "content": "<p>....你是民科吧，你自己看看这句话前面是什么</p>", 
                    "likes": 2, 
                    "childComments": [
                        {
                            "userName": "天生我才降凡间", 
                            "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                            "content": "<p>人民日报主办的《强国论坛》是真正体现了百家争鸣和言论自由的论坛，在我看来是全世界办得最好的论坛，据说该论坛也是国家领导人经常上网的论坛之一。我在《强国论坛》发表了许多质疑”陈氏定理“以及我对著名作家徐迟跳楼自杀之谜所持不同看法的贴子几乎全部放行，不过在《强国论坛》被”陈氏定理“洗脑的愚民也是相当多，说明在这个社会有独立思考问题能力的人实在太少了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Tommyli"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44078035", 
            "userName": "天生我才降凡间", 
            "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
            "upvote": 0, 
            "title": "“充分大”这个伪概念的由来", 
            "content": "<p>       存在性证明通常只能间接指出对象的存在性，却不能具体构造出所需对象。希尔伯特（Hilbert）曾经在给学生讲到存在性证明时，举过一个例子：“这个班里一定存在一个学生，他的头发数最少， 可是我们不可能知道他是谁”，这种话说与不说是一样的，是毫无意义的废话。我们都知道多如牛毛是数不清的意思，人的头发同样难以数清楚，恐怕没有人愿意去数一个班的每一个同学的头发各有多少，因此没有人愿意去求证这种假设的真实性。用人们做不到的事情作证明数学问题的依据，希尔伯特开了恶劣的先例。用所谓的存在性证明来理解“充分大”这个概念，那就是我们知道“充分大”这个数是存在的，但不能把这个数具体给出来，因此“充分大”这个伪概念与存在性证明的思维方式如出一辙。说到这里我想起了水中捞月这个成语典故，这个成语的意思是说在晴朗的夜空映衬下“水中”看起来有这么一个“月亮”，但想“捞月”的人却无法触摸这个“月亮”，这个成语比喻不切实际的空想。“充分大”这个伪概念就像水中捞月一样无法验证，当然就存在不确定性，那么“充分大是一个界线”的这样一条分界线就无法确定，存在不确定性的“陈景润定理”还能是正确的定理吗？</p><p>     据说反证法是存在性证明的一种类型，因为反证法成功给出了素数有无穷多个的证明，因此就认为存在性证明是科学的证明方法，这是错误的认识。是的，两千多年前古人给出的素数有无穷多个的证明确实没有构造出所需的具体对象，但古人给出的这个证明非常简单，很容易验证这种思路的正确性，而且古人给出的这个经典的证明方法从古至今是唯一成功的方法，因此这个经典的反证法没有普遍适用性，因此以这个反证法为思想基础延伸出来的所谓存在性证明同样不可能有普遍适用性，因此套用存在性证明衍生出来的“充分大”概念是错误概念。</p><p>     两千多年前人类的数学水平还处于萌芽状态，古人能用简单方法解决素数有无穷多个的问题，这是了不起的伟大智慧，古人的这种智慧当然值得世世代代的人们敬仰。</p>", 
            "topic": [
                {
                    "tag": "方舟子（人物）", 
                    "tagLink": "https://api.zhihu.com/topics/19567952"
                }
            ], 
            "comments": [
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>人民日报主办的《强国论坛》是真正体现了百家争鸣和言论自由的论坛，在我看来是全世界办得最好的论坛，据说该论坛也是国家领导人经常上网的论坛之一。我在《强国论坛》发表了许多质疑”陈氏定理“以及我对著名作家徐迟跳楼自杀之谜所持不同看法的贴子几乎全部放行，不过在《强国论坛》被”陈氏定理“洗脑的愚民也是相当多，说明在这个社会有独立思考问题能力的人实在太少了。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "天生我才降凡间", 
                    "userLink": "https://www.zhihu.com/people/f543eac20bfbc8ec89f1dacb662995ad", 
                    "content": "<p>法国数学家费马说他有一个通俗易懂的费马大定理证明（传说的初等证明），但他阅读的书空白处太小，写不下。后来人们搜遍了费马居住的房间没有找到他所说的那个证明的只言片语，只能说明费马声称的证明不存在。在《王元院士漫谈哥德巴赫猜想》一文中王元对“充分大”的解释就是模仿费马捉弄人的手法说“充分大”这个数字是存在的，但超出了人的计算能力，写不出来。费马编造一个善意的谎言意在鼓励后来者不要被他提出的这个问题所吓倒，而是要不畏艰辛去破解这个难题，这是费马的良苦用心所在。王元们模仿费马编造善意谎言的手法只能是东施效颦，出尽洋相。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39772801", 
            "userName": "二叉树", 
            "userLink": "https://www.zhihu.com/people/87a7963593258e5dda9b694117dace20", 
            "upvote": 2, 
            "title": "蓝天白云赋", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b939f0015112a665608c2284032bceda_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1536\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic3.zhimg.com/v2-b939f0015112a665608c2284032bceda_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2048&#39; height=&#39;1536&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1536\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2048\" data-original=\"https://pic3.zhimg.com/v2-b939f0015112a665608c2284032bceda_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b939f0015112a665608c2284032bceda_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>“蓝天白云”者，windows XP之默认壁纸也。自PC大行于天下，而手机继之，举世沉湎虚拟者久矣。单机、联网之游戏，若RPG、ACT者，品类之繁，不下十数；音声、视频之赏鉴，如mp3、avi者，数目之巨，岂止亿万。更有AR、VR，拟双眼之视差、欺大脑之视觉，状物则宛在目前、显人则如处一室。目下IT、CV之术一日千里，BCI、NS之道洵为显学，而大众亦愈陷愈深，逐代递增，自拔无力。呜呼，古猿百万年之进化、终沦“缸中之脑”；智人八千载之文明、不过“Matrix”一梦。是为序。</p><p> 梅雨休止兮、天朗无霾，溽暑来降兮、地蒸江淮。水之分子兮、日曝而上，上而化云兮、挤挤挨挨。举目眄睐，羡卷舒之自在；低首沉吟，接思虑乎千载。处处长随，太白歌而送友；悠悠不绝，崔颢吟之寄怀。黄河远上，岂独王季凌之无奈；朔风萧条，亦且鲍明远之有哀。</p><p>素云绵绵，独衬碧霄之色；青天湛湛，须赖微粒为源。日光七色，遍撒深空无偏；波长四百，散射大气可辨。嫦娥居处，李义山之遐思；虞姬陨时，王文公之遥奠。曲江楼台，韩昌黎候友久不至；绿涪佳酿，陆放翁豪纵压忧患。</p><p>蓝天白云咏者伙，先贤手笔佳构多。</p><p>或攀高山或临溪，手机电脑无从祸。</p><p>何不郊坰洗望眼，不须空调暑自落。</p>", 
            "topic": [
                {
                    "tag": "诗歌创作", 
                    "tagLink": "https://api.zhihu.com/topics/20015816"
                }, 
                {
                    "tag": "赋（文体）", 
                    "tagLink": "https://api.zhihu.com/topics/20046179"
                }, 
                {
                    "tag": "古文", 
                    "tagLink": "https://api.zhihu.com/topics/19588783"
                }
            ], 
            "comments": [
                {
                    "userName": "地铁", 
                    "userLink": "https://www.zhihu.com/people/e0569c3f489a78bf9907beed9607d84f", 
                    "content": "e117《霾赋》<br><br>作者：地铁<br><br>如雾而非雾<br><br>如棉纺不出线<br>如絮抽不出丝<br><br>遍天地万物而非光<br><br>塞山壑<br>共白水<br><br>非烟而非霭<br><br>昼聚而不离<br>夜集而不散<br><br>非霜而非霰<br><br>浮而不降<br>悬而不落<br><br>非纱而非幔<br><br>遮望眼<br>掩村舍<br><br>自在而周游兮<br>浓淡而着意<br><br>率直而无奇巧兮<br>不避丑而躲羞<br><br>似无味而不足嗅兮<br>似无色而不足辨<br><br>笼仙影以绰约<br>藏楼阙以朦胧<br><br>入秋而初现兮<br>深冬而不去<br><br>扯不断理还乱兮<br>若愁绪之无端<br><br>挥不走去还来兮<br>情腻而不忍厌<br><br>久而生怜惜兮<br>吾爱之而愈切<br><br>吾不舍其曼妙兮<br>又沉溺其迷情<br><br>愿长相厮守兮<br>愿颓废以终老<br><br>众人或嫌烦兮<br>吾独爱之无怨<br><br>直呼其昵称兮<br>吾轻唤之曰小霾", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "梁富贵", 
                    "userLink": "https://www.zhihu.com/people/37a3fc1130c2fc2b6f9b0eb523c15316", 
                    "content": "写的真好", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43507676", 
            "userName": "小沐", 
            "userLink": "https://www.zhihu.com/people/926d3aa32f3e0083b17be044148f93e1", 
            "upvote": 2, 
            "title": "「数组拆分」| leetcode 刷题012", 
            "content": "<h2><b>题目</b> </h2><blockquote> 给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。<br/> 示例 1:<br/> 输入: [1,4,3,2]<br/> 输出: 4<br/>解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).<br/>提示:<br/> </blockquote><ul><li>n 是正整数,范围在 [1, 10000].</li><li>数组中的元素范围在 [-10000, 10000].</li></ul><h2><b>解答</b> </h2><p>列表排序求奇数和</p><div class=\"highlight\"><pre><code class=\"language-text\">class Solution(object):\n    def arrayPairSum(self, nums):\n        &#34;&#34;&#34;\n        :type nums: List[int]\n        :rtype: int\n        &#34;&#34;&#34;\n        num = sorted(nums)\n        count = 0\n        for i in range(0,len(num),2):\n            count = count + num[i]\n        return count\n</code></pre></div><p>再看看一行代码搞定的：</p><div class=\"highlight\"><pre><code class=\"language-text\">class Solution(object):\n    def arrayPairSum(self, nums):\n        &#34;&#34;&#34;\n        :type nums: List[int]\n        :rtype: int\n        &#34;&#34;&#34;\n        return sum(sorted(nums)[::2])\n</code></pre></div><p>脑回路真是清奇。</p>", 
            "topic": [
                {
                    "tag": "刷题", 
                    "tagLink": "https://api.zhihu.com/topics/20014038"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43205749", 
            "userName": "小明教主", 
            "userLink": "https://www.zhihu.com/people/9d2018dbe462ec42133548e932ff0009", 
            "upvote": 3, 
            "title": "LDA小讲", 
            "content": "<p>更新修改“半正定”为“正定或半正定”，且半正定的概率非常小</p><p>===================================</p><p>西瓜书3.39式到3.45式有些跳跃，导致有些同学没有看到其之间联系。3.38的不妨令有点莫名其妙，似乎和前文广义瑞利商并无联系。这里做一下补充说明。</p><p>说在前头：我很佩服打破砂锅问到底的同学，头很铁。</p><p>首先，定义广义瑞利商为如下函数：</p><p><img src=\"https://www.zhihu.com/equation?tex=R%5Cleft%28+x+%5Cright%29+%3D%5Cfrac%7Bx%5ETAx%7D%7Bx%5ETBx%7D+\" alt=\"R\\left( x \\right) =\\frac{x^TAx}{x^TBx} \" eeimg=\"1\"/> </p><p>其中A，B都是实对称矩阵，且B为正定矩阵。关于广义瑞利熵有如下定理：</p><p><img src=\"https://www.zhihu.com/equation?tex=R%5Cleft%28+x+%5Cright%29+_%7B%5Cmax%7D%3D%5Clambda+_%7B%5Cmax%7D%2C%5C+R%5Cleft%28+x+%5Cright%29+_%7B%5Cmin%7D%3D%5Clambda+_%7B%5Cmin%7D.%5C+%5Ctext%7B%E5%85%B6%E4%B8%AD%7D%5Clambda+%5Ctext%7B%E4%B8%BA%7D%5Cleft%28+B%5E%7B-1%7DA+%5Cright%29+x%3D%5Clambda+x%5Ctext%7B%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC%7D+\" alt=\"R\\left( x \\right) _{\\max}=\\lambda _{\\max},\\ R\\left( x \\right) _{\\min}=\\lambda _{\\min}.\\ \\text{其中}\\lambda \\text{为}\\left( B^{-1}A \\right) x=\\lambda x\\text{的特征值} \" eeimg=\"1\"/> </p><p>（证明之一可见张贤达《矩阵分析与应用》，因为证明涉及到矩阵开平方，可能非数本科生不容易看懂，故量力而行）</p><p>故西瓜书的优化目标即为找到特征值的 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"/>的最大值。现证明在西瓜书3.35的特例下，唯一非零解 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda+\" alt=\"\\lambda \" eeimg=\"1\"/> 即是最大的 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"/> .</p><p><img src=\"https://www.zhihu.com/equation?tex=+%5Ctext%7B%E4%B8%BA%E6%96%B9%E4%BE%BF%E8%AF%B4%E6%98%8E%EF%BC%8C%E7%AE%80%E8%AE%B0%7DS_b%3Duu%5ET+%5C%5C+%5Ctext%7B%E8%A7%A3+%7DS_bw%3D%5Clambda+S_ww%2C%5C+%5Ctext%7B%E5%8D%B3%7D+%5C%5C+%5C+%5C+%5C+u%5Cleft%28+u%5ETw+%5Cright%29+%3D%5Clambda+S_ww%5C+%5C+%5C+%5Cleft%28+1+%5Cright%29+%5C%5C+%5Ctext%7B%E8%8B%A5%7D%5Clambda+%5Ctext%7B%E4%B8%8D%E4%B8%BA%E9%9B%B6%E5%88%99%E6%9C%89%5C+%7Dw%3D%5Cfrac%7Bu%5ETw%7D%7B%5Clambda%7DS_w%5E%7B-1%7Du%5C+%5C+%5C+%5Cleft%28+2+%5Cright%29+%5C%5C+%5Ctext%7B%E5%88%99+%7D%5Cleft%28+u%5ETw+%5Cright%29+u%3D%5Cleft%28+u%5ET%5Cfrac%7Bu%5ETw%7D%7B%5Clambda%7DS_w%5E%7B-1%7Du+%5Cright%29+u+%5C%5C+%5Ctext%7B%E5%8C%96%E7%AE%80%E5%BE%97+%7D%5Clambda+u%3D%5Cleft%28+u%5ETS_w%5E%7B-1%7Du+%5Cright%29+u+%5C%5C+%5Ctext%7B%E5%BE%97+%7D%5Clambda+%5C+%3D%5C+u%5ETS_w%5E%7B-1%7Du+%5C%5C+\" alt=\" \\text{为方便说明，简记}S_b=uu^T \\\\ \\text{解 }S_bw=\\lambda S_ww,\\ \\text{即} \\\\ \\ \\ \\ u\\left( u^Tw \\right) =\\lambda S_ww\\ \\ \\ \\left( 1 \\right) \\\\ \\text{若}\\lambda \\text{不为零则有\\ }w=\\frac{u^Tw}{\\lambda}S_w^{-1}u\\ \\ \\ \\left( 2 \\right) \\\\ \\text{则 }\\left( u^Tw \\right) u=\\left( u^T\\frac{u^Tw}{\\lambda}S_w^{-1}u \\right) u \\\\ \\text{化简得 }\\lambda u=\\left( u^TS_w^{-1}u \\right) u \\\\ \\text{得 }\\lambda \\ =\\ u^TS_w^{-1}u \\\\ \" eeimg=\"1\"/> </p><p>这就是说 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"/> 的非零解唯一，又因为 <img src=\"https://www.zhihu.com/equation?tex=S_w\" alt=\"S_w\" eeimg=\"1\"/> 正定或半正定(证明略)，则 <img src=\"https://www.zhihu.com/equation?tex=S_w%5E%7B-1%7D\" alt=\"S_w^{-1}\" eeimg=\"1\"/> 也正定或半正定(证明略，注意这里是奇异值分解得到的广义逆，)，故必有非零<img src=\"https://www.zhihu.com/equation?tex=%5Clambda%3E0\" alt=\"\\lambda&gt;0\" eeimg=\"1\"/> ，故唯一非零解就是最大特征值。</p><p>证明完上述结论，就是说</p><p><img src=\"https://www.zhihu.com/equation?tex=w%5E%2A%5C+%5Ctext%7B%E6%BB%A1%E8%B6%B3%7DJ%5Cleft%28+w+%5Cright%29+%3D%5Cfrac%7Bw%5ETS_bw%7D%7Bw%5ETS_ww%7D%3D%5Clambda+_%7B%5Cmax%7D%3Du%5ETS_w%5E%7B-1%7Du+\" alt=\"w^*\\ \\text{满足}J\\left( w \\right) =\\frac{w^TS_bw}{w^TS_ww}=\\lambda _{\\max}=u^TS_w^{-1}u \" eeimg=\"1\"/> </p><p>西瓜书上，实际上是联立3.37和3.38解出的一个“特解”，因为我们并不关心w的长度只关心它的方向。（西瓜书上有很多关于w的长度打混帐的地方，所以3.36到3.38的推导不严谨）我们只需要检验一下这个“特解”代入检验是否满足上式即可：</p><p><img src=\"https://www.zhihu.com/equation?tex=w%3DS_w%5E%7B-1%7Du%5C+%2C%5C+%5Ctext%7B%E5%88%99%7Du%3DS_ww+%5C%5C+S_bw%3Duu%5ETS_w%5E%7B-1%7Du%3D%5Cleft%28+u%5ETS_w%5E%7B-1%7Du+%5Cright%29+u+%5C%5C+%5Clambda+S_ww%3D%5Cleft%28+u%5ETS_w%5E%7B-1%7Du+%5Cright%29+S_ww%3D%5Cleft%28+u%5ETS_w%5E%7B-1%7Du+%5Cright%29+u+%5C%5C+%5Ctext%7B%E4%B8%A4%E5%BC%8F%E7%A1%AE%E5%AE%9E%E7%9B%B8%E7%AD%89%EF%BC%8C%E8%AF%81%E6%98%8E%7Dw%5Ctext%7B%E6%98%AF%E6%BB%A1%E8%B6%B3%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E8%A7%A3%7D\" alt=\"w=S_w^{-1}u\\ ,\\ \\text{则}u=S_ww \\\\ S_bw=uu^TS_w^{-1}u=\\left( u^TS_w^{-1}u \\right) u \\\\ \\lambda S_ww=\\left( u^TS_w^{-1}u \\right) S_ww=\\left( u^TS_w^{-1}u \\right) u \\\\ \\text{两式确实相等，证明}w\\text{是满足最大化的解}\" eeimg=\"1\"/> 由于从上面可以看出西瓜书上w的解法像是一种特殊情况下的巧解，而且推导并不严谨，只不过解出来满足最大化的目的。3.45式W解为d&#39;个最大非零广义特征值 所对应的特征向量组成的矩阵,这才是标准做法。3.44是一个代替目标函数，换成如下式子好理解些</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7B%E8%AE%BE%7DW%3D%5Cleft%28+w_1%2Cw_2%2C...%2Cw_%7Bd%27%7D+%5Cright%29+%5C%5C+%5Cfrac%7B%5Cprod_%7B%5Ctext%7Bdiag%7D%7D%7BW%5ETS_bW%7D%7D%7B%5Cprod_%7B%5Ctext%7Bdiag%7D%7D%7BW%5ETS_wW%7D%7D%3D%5Cfrac%7B%5Cprod_%7Bi%3D1%7D%5E%7Bd%27%7D%7Bw_i%5ETS_bw_i%7D%7D%7B%5Cprod_%7Bi%3D1%7D%5E%7Bd%27%7D%7Bw_i%5ETS_ww_i%7D%7D%3D%5Cprod_%7Bi%3D1%7D%5E%7Bd%27%7D%7B%5Cfrac%7Bw_i%5ETS_bw_i%7D%7Bw_i%5ETS_ww_i%7D%7D+%5C%5C+%5Ctext%7B%E8%BF%99%E5%B0%B1%E8%BD%AC%E5%8C%96%E6%88%90%E4%BA%86%E5%B9%BF%E4%B9%89%E7%91%9E%E5%88%A9%E5%95%86%E9%97%AE%E9%A2%98%EF%BC%8C%E6%AC%B2%E4%BD%BF%E4%B8%8A%E5%BC%8F%E6%9C%80%E5%A4%A7%EF%BC%8C%7D+%5C%5C+%5Ctext%7B%E5%8F%AF%E5%8F%96%7Dw_1%3Dw_2%3D...%3Dw_%7Bd%27%7D%5C+s.t.%5C+S_bw%3D%5Clambda+_%7B%5Cmax%7DS_ww+%5C%5C+%5Ctext%7B%E4%BD%86%E8%BF%99%E6%A0%B7%E7%9B%B8%E5%BD%93%E4%BA%8E%E9%99%8D%E5%88%B0%E4%B8%80%E7%BB%B4%E4%BA%86%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%8D%E5%B8%8C%E6%9C%9B%E8%BF%99%E6%A0%B7%7D.+%5C%5C+%5Ctext%7B%E5%8F%88%E7%94%B1%E4%BA%8E%E5%B1%9E%E4%BA%8E%E4%B8%8D%E5%90%8C%E7%89%B9%E5%BE%81%E5%80%BC%E7%9A%84%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F%E5%BD%BC%E6%AD%A4%E6%AD%A3%E4%BA%A4%EF%BC%8C%E6%95%85%7D+%5C%5C+%5Ctext%7B%E5%8F%96%7Dd%27%5Ctext%7B%E4%B8%AA%E6%9C%80%E5%A4%A7%28%E4%B8%8D%E5%90%8C%29%E9%9D%9E%E9%9B%B6%E7%89%B9%E5%BE%81%E5%80%BC%EF%BC%8C%E8%BF%99%E6%A0%B7%7DW%5Ctext%7B%E7%A7%A9%E4%B8%BA%7Dd%27%2C%5Ctext%7B%E5%8F%AF%E8%A7%86%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5%2C%7D+%5C%5C+%5Ctext%7B%E6%8A%95%E5%BD%B1%E5%90%8E%E7%9A%84%E7%A9%BA%E9%97%B4%E4%B8%BA%7Dd%27%5Ctext%7B%E7%BB%B4.+%7D\" alt=\"\\text{设}W=\\left( w_1,w_2,...,w_{d&#39;} \\right) \\\\ \\frac{\\prod_{\\text{diag}}{W^TS_bW}}{\\prod_{\\text{diag}}{W^TS_wW}}=\\frac{\\prod_{i=1}^{d&#39;}{w_i^TS_bw_i}}{\\prod_{i=1}^{d&#39;}{w_i^TS_ww_i}}=\\prod_{i=1}^{d&#39;}{\\frac{w_i^TS_bw_i}{w_i^TS_ww_i}} \\\\ \\text{这就转化成了广义瑞利商问题，欲使上式最大，} \\\\ \\text{可取}w_1=w_2=...=w_{d&#39;}\\ s.t.\\ S_bw=\\lambda _{\\max}S_ww \\\\ \\text{但这样相当于降到一维了，我们不希望这样}. \\\\ \\text{又由于属于不同特征值的特征向量彼此正交，故} \\\\ \\text{取}d&#39;\\text{个最大(不同)非零特征值，这样}W\\text{秩为}d&#39;,\\text{可视为一个投影矩阵,} \\\\ \\text{投影后的空间为}d&#39;\\text{维. }\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果还有疑问，可以直接看论文</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>觉得有帮助的同学，可以点个赞。有条件的同学也可以多多打赏哈哈。</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "LDA", 
                    "tagLink": "https://api.zhihu.com/topics/19565464"
                }, 
                {
                    "tag": "主题模型", 
                    "tagLink": "https://api.zhihu.com/topics/19565468"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40757652", 
            "userName": "二叉树", 
            "userLink": "https://www.zhihu.com/people/87a7963593258e5dda9b694117dace20", 
            "upvote": 1, 
            "title": "手机里的一张照片有多重？", 
            "content": "<p>你有没有产生过这样的疑问：拍一张照片存入手机，会使手机变的更重么？如果更重，重了多少？<br/>        对于没耐心看原理和计算过程的，直接给答案：对于现在的主流手机，假定一张照片的典型大小是3MB，存入手机后，估计会使手机重9.169*10^-22公斤，即0.0000000000000000000009169公斤。对比一下，1厘米长的头发，重量大约0.1毫克，即0.0000001公斤，所以一根1厘米长的头发应该相当于1.09乘以10的14次方张照片的重量。因此应该是4.99乘以10的9次方部手机存满，所增加的重量就相当于一根1厘米头发的重量。这大至与地球上手机总量在一个数量级上了。<br/>有耐心的，请看如下原理。<br/>1，照片是怎样存储在手机里的？<br/>手机拍下的照片，都是以数字形式存储在手机里的，即，存到手机当中的是一长串的“0101010100110111……”。而手机的存储器，通常都是“闪存”，即FLASH存储器。这些闪存，是由一位一位的存储单元组成的，为了叙述简便，以SLC类型的闪存为例，SLC是Single-Level Cell的缩写，这种类型的闪存一位存储一个‘0’或者一个‘1’。一张3MB的照片，就需要3*8*1048576=25165824位存储单元进行存储。那么，一位存储单元有长成什么样子？<br/>2，一位SLC存储单元的样子</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-db56853593cdef4dce434fbd76d7b4f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb\" width=\"436\" data-original=\"https://pic2.zhimg.com/v2-db56853593cdef4dce434fbd76d7b4f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;436&#39; height=&#39;319&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"436\" data-original=\"https://pic2.zhimg.com/v2-db56853593cdef4dce434fbd76d7b4f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-db56853593cdef4dce434fbd76d7b4f9_b.jpg\"/></figure><p>如图，一位FLASH存储单元大致长成这个样子。注意图中间的红色方框，它叫做“浮置栅极”，上文所说的一个‘0’或者一个‘1’就存储在这个红色方框中。当方框中填上较多自由电子，这一位表示‘0’；当方框中没有或很少自由电子，这一位表示‘1’。根据清华刘利芳博士的论文《高密度电荷俘获型非挥发存储器研究》，现在主流15纳米工艺的SLC闪存，其表达‘0’状态时，浮置栅极上大约不到100个电子，我们假定80个。那么这80个电子有多重？<br/>3，照片重量计算过程<br/>       百度得，一个电子的静止质量为9.109×10^-31公斤。则一个‘0’存储位的电子重量为9.109×10^-31公斤*80=7.287×10^-29公斤。非常合理地假定，一张3MB的照片中应该有大约一半的数据位为‘0’，另一半数据位为‘1’，则存储一张照片的电子重量为7.287×10^-29公斤/位*(3M/2)*8位=9.169*10^-22公斤。</p><p>（硬广：更多文章，微信搜索“老郭小什”公众号）</p>", 
            "topic": [
                {
                    "tag": "科普知识", 
                    "tagLink": "https://api.zhihu.com/topics/19648123"
                }, 
                {
                    "tag": "幽默", 
                    "tagLink": "https://api.zhihu.com/topics/19563637"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40667727", 
            "userName": "二叉树", 
            "userLink": "https://www.zhihu.com/people/87a7963593258e5dda9b694117dace20", 
            "upvote": 1, 
            "title": "玄铁重剑自述", 
            "content": "<p>抓紧我的这个人叫独孤求败，他每天带我出门，挥舞着，或劈或刺，向一些莫名其妙的对象。每当我以9.5的莫氏硬度与对抗者接触，它们一触即溃，有的断成两截，有的颤抖着、翻滚着，喷出黏黏、湿湿的溶液——他们叫血。这种反复的、与低硬度物质的接触使人厌倦，切断那些范德华力链接时，只会让我的接触面隐隐发痒，甚为难耐。</p><p>我常常怀念从前那些日子。</p><p>我的初始记忆是在一个高温、高压的母体中，与钨、金、铂等其他重元素挤在一起，不停旋转。母体越来越热、越来越热，不久之后，终于爆发，我们被巨大的推力抛掷出来，各奔前程，开始自由而漫长的旅行。远远地，我途经过恒星、白矮星、行星带，甚至能遇见爆发中的超新星和拥有巨大吸积盘的黑洞；有时候路径会莫名地扭曲，我猜附近可能隐藏着神秘的暗物质；更多时候，我孤独地徜徉于稀薄的星际尘埃之间，宇宙空旷而宁静，甚至能感受到在普朗克尺度有物质和反物质粒子不停地产生、又湮灭。</p><p>不知旅行了多久，有一天我发现自己正奔向一颗蓝色星球而去，最终无可救药地被它的引力俘获，跌落。跌落的过程中我又感受到热，无数氧原子向我附着过来，把我的表面搞得黑漆漆的。着陆的瞬间，我击碎了一块大石头，将它开肠破肚，现在想来，这也许是个预兆，预示着我今天不停地斩断各种金属、竹木和肢体的日常。后来一个铁匠发现了我，将我锻造成剑的样子，又辗转到独孤求败手上。</p><p>独孤求败说，他要除尽仇寇、败尽天下高手。我想我理解他——他与敌人的碰撞，正如我与别的物质的碰撞，我改变了别的物质的结构，他改变了江湖的结构。理解、但仍然厌倦。渐渐地，我想独孤求败可能有相同心境——每击败一个敌人，他都会怔怔地看着那个倒下的躯体，茫然无措。</p><p>我们跨越无穷距离，在这一时空相遇，无所逃遁。</p><p>硬广：更多文章，请微信搜索“老郭小什”公众号。</p>", 
            "topic": [
                {
                    "tag": "武侠", 
                    "tagLink": "https://api.zhihu.com/topics/19562246"
                }, 
                {
                    "tag": "同人", 
                    "tagLink": "https://api.zhihu.com/topics/19606793"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29704227", 
            "userName": "二叉树", 
            "userLink": "https://www.zhihu.com/people/87a7963593258e5dda9b694117dace20", 
            "upvote": 1, 
            "title": "我们怎么知道自己生活在三维世界？", 
            "content": "<p>这个问题不是句废话么？随便找个墙角，你会看到纵、横、竖直三条线，这三条线相互垂直，两两之间都呈90度，可任你想破脑袋，也想象不出还能有一条线与这三条线都垂直，所以，很清楚，我们的世界是三维的。为了防止有人说：你想不出来的，就是不存在的么？老郭在此提供一些更加有力的证据，来表明我们的世界是三维的。</p><p>先看三个公式，不过不用紧张，本文不要求完全搞懂它们，只是稍微拉他们出来站个台。</p><p>￼</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f595ab15fa7a3d7a96db0b93656db9bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"216\" class=\"content_image\" width=\"375\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;375&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"216\" class=\"content_image lazy\" width=\"375\" data-actualsrc=\"https://pic1.zhimg.com/v2-f595ab15fa7a3d7a96db0b93656db9bc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>式1是库伦定律，说明两个电荷之间电引力（或斥力）之间的关系；式2是万有引力定律，说明两个物体之间的万有引力关系；式3是雷达方程的一种形式，说明目标的反射功率与雷达发射功率的关系。稍微仔细观察一下，式1、式2、式3有个共同的特点，它们的右边，分母上都有r2。这并非巧合，在物理上，它们有个更加统一的名称，叫“平方反比定律”，意思是，某种作用，例如电力、万有引力、雷达功率等等，距离越大，作用的量越小，其大小与距离的平方成反比。这是什么道理呢？下面看图说话（请原谅老郭拙劣的画图技巧）。</p><p>￼</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c97a5af20fdde2ed9ea4de9fbc5b0a8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"532\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb\" width=\"532\" data-original=\"https://pic4.zhimg.com/v2-c97a5af20fdde2ed9ea4de9fbc5b0a8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;532&#39; height=&#39;423&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"532\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"532\" data-original=\"https://pic4.zhimg.com/v2-c97a5af20fdde2ed9ea4de9fbc5b0a8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c97a5af20fdde2ed9ea4de9fbc5b0a8b_b.jpg\"/></figure><p>假定有一个作用的源，将这个源看作一个点，位于上图的球心位置。对电力来说，这个源是一些电荷；对引力来说这个源可能是个天体；对雷达来说这个源是一个雷达发射机。可以想象，一种作用，不管是电力、引力还是雷达波，从球心出发，经过不计其数、由小到大的球面，到达半径为r的球面，又经过不计其数的更大球面，到达半径为2r的球面。假定这些作用能够“充满”它所经过的每一处空间，那么这些作用将均匀地分布在它经过的每一个球面上。当作用抵达半径为r的球面时，有部分作用“平摊”在如图所示的红色面积上，这个面积为4小块，假定每一小块面积上摊到了1份作用量；当作用抵达半径为2r的球面时，同样的作用量，要“平摊”在16小块蓝色面积上，那么每一小块面积只能摊到1/4份的作用量了。距离从r到2r，增加到原来的两倍，作用量从1到1/4，减小到原来的1/4，刚好满足平方反比定律关系。</p><p>   也许有人说：这不废话么，本来球面面积就是按照半径平方增长的，把它倒过来，不就是平方反比定律了。是的，球表面积公式S=4πr2本来就是这样的，但这个公式恰恰就是假定空间是三维才得到的。如果空间有更多维度，我们没有理由不让电力、万有引力、雷达波等等作用进入这些更多的维度，如果这些作用进入了更多维度，显然就会有更多“面积”来平摊它们，那么平方反比定律就会失效。到目前为止，平方反比定律工作的很好，所以，承认我们生活在一个三维世界是比较明智的选择。</p>", 
            "topic": [
                {
                    "tag": "物理科普", 
                    "tagLink": "https://api.zhihu.com/topics/19612146"
                }, 
                {
                    "tag": "多维空间", 
                    "tagLink": "https://api.zhihu.com/topics/19683565"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42988571", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "在线编程题-14最小不稳定值问题（网易）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">题目描述\n小易有一些立方体，每个立方体的边长为1，他用这些立方体搭了一些塔。现在小易定义：这些塔的不稳定值为它们之中最高的塔与最低的塔的高度差。小易想让这些塔尽量稳定，所以他进行了如下操作：每次从某座塔上取下一块立方体，并把它放到另一座塔上。注意，小易不会把立方体放到它原本的那座塔上，因为他认为这样毫无意义。现在小易想要知道，他进行了不超过k次操作之后，不稳定值最小是多少。\n输入描述：\n第一行 两个数n, k（1&lt;=n&lt;=100, 1&lt;=k&lt;=1000），表示塔的数量，以及最多操作的次数。\n第二行 n个数，a1, a2, …, an（1&lt;=ai&lt;=104），表示每座塔的初始高度。\n输出描述：\n第一行 两个数s, m，表示最小的不稳定值，以及操作的次数（m&lt;=k）。\n接下来 m行，每行两个数x, y，表示从第x座塔上取下一块立方体放到第y座塔上。\n示例\n输入\n3 2\n5 8 5\n输出\n0 2\n2 1\n2 3</code></pre></div><p>解题思路：根据<a href=\"https://zhuanlan.zhihu.com/p/35034587\" class=\"internal\">贪心算法</a>的思想，在不稳定值大于1且操作次数不超过k的条件下，每次从当前最高的塔上取下一块立方体放到当前最低的塔上并进行记录，即可得到最小的不稳定值。以下代码可供参考（python2下测试可用）：</p><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding: utf-8 -*-\n\n# 获取输入\nn, k = map(int, raw_input().split())\na = list(map(int, raw_input().split()))\n\nassert len(a) == n\n\nm = 0\nx_list = []\ny_list = []\n\n# 在不稳定值大于1且操作次数不超过k的条件下，每次从当前最高的塔上取下一块立方体放到当前最低的塔上并进行记录\nwhile max(a) - min(a) &gt; 1 and m &lt;= k:\n    x_list.append(a.index(max(a))+1)\n    y_list.append(a.index(min(a))+1)\n    a[a.index(max(a))] -= 1\n    a[a.index(min(a))] += 1\n    m += 1\n\ns = max(a) - min(a) # 求最小的不稳定值\n\nprint s, m # 输出最小的不稳定值和操作次数\nfor idx in range(m):\n    print x_list[idx], y_list[idx]</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "在线编程", 
                    "tagLink": "https://api.zhihu.com/topics/19901347"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42987443", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "在线编程题-13最大兴趣分值问题（网易）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-65b166f6bf99a39f01359c9771aa20fd_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">题目描述\n小易觉得高数课太无聊了，决定睡觉。不过他对课上的一些内容挺感兴趣，所以希望你在老师讲到有趣的部分的时候叫醒他一下。你知道了小易对一堂课每分钟知识点的感兴趣程度，并以分数量化，以及他在这堂课上每分钟是否会睡着，你可以叫醒他一次，这会使得他在接下来的k分钟内保持清醒。你需要选择一种方案最大化小易这堂课听到的知识点分值。\n输入描述：\n第一行 n, k（1&lt;=n, k&lt;=105），表示这堂课持续多少分钟，以及叫醒小易一次使他能够保持清醒的时间。\n第二行 n个数，a1, a2, …, an（1&lt;=ai&lt;=104），表示小易对每分钟知识点的感兴趣评分。\n第三行 n个数，t1, t2, …, tn，表示每分钟小易是否清醒，1表示清醒。\n输出描述：\n小易这堂课听到的知识点的最大兴趣值。\n示例\n输入\n6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\n输出\n16</code></pre></div><p>解题思路：遍历小易睡着的时刻并计算对应的叫醒他之后他能听到的知识点的兴趣值，再找出其中的最大值。以下代码可供参考（python2下测试可用）：</p><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding: utf-8 -*-\n\nfrom copy import copy\n\ndef my_mul(a,b):\n    c = a * b\n    return c\n\n# 获取输入\nn, k = map(int, raw_input().split())\na = list(map(int, raw_input().split()))\nt = list(map(int, raw_input().split()))\n\nassert len(a) == n and len(t) == n\n\nfor idx in range(n):\n    if t[idx]!=1:\n        t[idx] = 0\n\ntmp = copy(t)\ns = []\n\n# 计算所有可能方案的值\nfor idx in range(n):\n    if t[idx] == 0:\n        for kpt in range(k):\n            if idx+kpt &lt; n:\n                tmp[idx+kpt]=1\n        s.append(sum(list(map(my_mul, a, tmp))))\n        tmp = copy(t)\n\nprint max(s) # 输出最大值</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "网易", 
                    "tagLink": "https://api.zhihu.com/topics/19552834"
                }, 
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42689236", 
            "userName": "小沐", 
            "userLink": "https://www.zhihu.com/people/926d3aa32f3e0083b17be044148f93e1", 
            "upvote": 3, 
            "title": "分析Ajax爬取B站python视频", 
            "content": "<p>B 站真是个神奇的网站。找不到资料了，去 B 站逛一逛，保准有你满意的东西。</p><p>前几天写了个爬虫，用 path、re、BeautifulSoup 爬取的 B 站 python 视频，但是这个爬虫有个缺陷，没能获取视频的图片信息，如果你去尝试你会发现它根本就不在返回的结果里面。今天就用分析 Ajax 的方法获取到。</p><h2><b>分析页面</b> </h2><p>通常我们在分析页面的时候，都要切换到 Network 分析url 从中找到我们想要的 url 。但是找不到 url 你怎么分析？B 站就是这么神奇的存在，我们最后分析确定的 url 是这个：</p><div class=\"highlight\"><pre><code class=\"language-text\">url = &#39;https://api.bilibili.com/x/web-interface/search/type?jsonp=jsonp&amp;&amp;search_type=video&amp;highlight=1&amp;keyword=python&amp;page={}&#39;.format(page)\n</code></pre></div><p>打开 B 站，搜索 python ，打开开发者工具，切换到 Network 你可以去找找，还真是没有。<br/>至于怎么找到的呢，我也是摸索了好长时间才发现<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ac060bc0eb7a3cb51434cb0af3f036d2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"529\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-ac060bc0eb7a3cb51434cb0af3f036d2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;529&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"529\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-ac060bc0eb7a3cb51434cb0af3f036d2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ac060bc0eb7a3cb51434cb0af3f036d2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>点一下搜索，这个 url 才会出现，或者点一下下一页</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6ecd536fed640933a9fb96eb14d8aba2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-6ecd536fed640933a9fb96eb14d8aba2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;350&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-6ecd536fed640933a9fb96eb14d8aba2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6ecd536fed640933a9fb96eb14d8aba2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后就构造这个请求就可以了。</p><p>需要注意的是最后一个参数不能添加。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>代码实战</b> </h2><div class=\"highlight\"><pre><code class=\"language-text\">import requests\nimport json,re,time\nimport pandas as pd\nfrom requests.exceptions import RequestException\n\nclass Spider():\n\n    def get_page(self,page):\n        try:\n            headers = {\n                &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64)&#39;\n                              &#39; AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#39;,\n            }\n            url = &#39;https://api.bilibili.com/x/web-interface/search/type?jsonp=jsonp&amp;&amp;search_type=video&amp;highlight=1&amp;keyword=python&amp;page={}&#39;.format(page)\n            r = requests.get(url,headers)\n            if r.status_code == 200:\n                return r.text\n            else:\n                print(r.status_code)\n        except RequestException:\n            print(&#39;请求失败&#39;)\n            return None\n\n    def parse_page(self,html):\n        #转换成JSON对象，好操作\n        data = json.loads(html)\n\n        results = data.get(&#39;data&#39;).get(&#39;result&#39;)\n        for result in results:\n            #获取图片地址\n            image_url = result[&#39;pic&#39;]\n            #获取视频地址\n            video_url = result[&#39;arcurl&#39;]\n            #获取作者\n            video_author = result[&#39;author&#39;]\n            #获取视频标题，中间有额外的字符，用re替换一下\n            video_title = result[&#39;title&#39;]\n            video_title = re.sub(&#39;&lt;em class=&#34;keyword&#34;&gt;[Pp]ython&lt;/em&gt;&#39;,&#39;Python&#39;,video_title)\n            #获取播放量\n            video_play = result[&#39;play&#39;]\n            #获取上传时间,这里将时间戳转换成标准格式\n            video_date = result[&#39;pubdate&#39;]\n            timestr = time.localtime(video_date)\n            video_date = time.strftime(&#39;%Y-%m-%d %H-%M-%S&#39;,timestr)\n            print(image_url,video_url,video_title,video_play,video_date)\n\n    def run(self):\n        for i in range(1,3):\n            html = self.get_page(i)\n            self.parse_page(html)\n\ndef main():\n    spider = Spider()\n    spider.run()\n\nif __name__ == &#39;__main__&#39;:\n    main()\n</code></pre></div><p>代码里面有些解释已经很清楚了，在这里再次复习一下</p><div class=\"highlight\"><pre><code class=\"language-text\">re.sub()\n</code></pre></div><p>这个函数传入五个参数，前三个是必须传入的 pattern,、repl、 string</p><ul><li>第一个是表示的是正则表达式中模式字符串</li><li>第二个是要被替换的字符串</li><li>第三个是文本字符串<br/>剩下两个可选参数，一个是 count 一个是 flag 。</li></ul><p><b>时间戳转换成标准格式的时间</b><br/>第一种方法</p><div class=\"highlight\"><pre><code class=\"language-text\">import time\ntimeStamp = 1581418600\ntimeArray = time.localtime(timeStamp)\notherStyleTime = time.strftime(&#34;%Y-%m-%d %H:%M:%S&#34;, timeArray)\nprint otherStyleTime\n</code></pre></div><p>第二种方法</p><div class=\"highlight\"><pre><code class=\"language-text\">import time\nimport datetime\ntimeStamp = 1381419600\ndateArray = datetime.datetime.utcfromtimestamp(timeStamp)\notherStyleTime = dateArray.strftime(&#34;%Y-%m-%d %H:%M:%S&#34;)\nprint otherStyleTime\n</code></pre></div><p>综上就是这次的全部内容，多加练习继续加油！</p>", 
            "topic": [
                {
                    "tag": "python爬虫", 
                    "tagLink": "https://api.zhihu.com/topics/20086364"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42522263", 
            "userName": "小沐", 
            "userLink": "https://www.zhihu.com/people/926d3aa32f3e0083b17be044148f93e1", 
            "upvote": 2, 
            "title": "「唯一摩尔斯密码词」| leetcode 刷题011", 
            "content": "<h2><b>题目</b> </h2><blockquote> 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: &#34;a&#34; 对应 &#34;.-&#34;, &#34;b&#34; 对应 &#34;-…&#34;, &#34;c&#34; 对应 &#34;-.-.&#34;, 等等。<br/> 为了方便，所有26个英文字母对应摩尔斯密码表如下：<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-text\">[&#34;.-&#34;,&#34;-...&#34;,&#34;-.-.&#34;,&#34;-..&#34;,&#34;.&#34;,&#34;..-.&#34;,&#34;--.&#34;,&#34;....&#34;,&#34;..&#34;,&#34;.---&#34;,&#34;-.-&#34;,&#34;.-..&#34;,&#34;--&#34;,&#34;-.&#34;,&#34;---&#34;,&#34;.--.&#34;,&#34;--.-&#34;,&#34;.-.&#34;,&#34;...&#34;,&#34;-&#34;,&#34;..-&#34;,&#34;...-&#34;,&#34;.--&#34;,&#34;-..-&#34;,&#34;-.--&#34;,&#34;--..&#34;]\n</code></pre></div><blockquote> 给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，&#34;cab&#34; 可以写成 &#34;-.-.-….-&#34;，(即 &#34;-.-.&#34; + &#34;-…&#34; + &#34;.-&#34;字符串的结合)。我们将这样一个连接过程称作单词翻译。<br/> 返回我们可以获得所有词不同单词翻译的数量。<br/> 例如:<br/>输入: words = [&#34;gin&#34;, &#34;zen&#34;, &#34;gig&#34;, &#34;msg&#34;]<br/>输出: 2<br/>解释: <br/>各单词翻译如下:<br/>&#34;gin&#34; -&gt; &#34;--…-.&#34;<br/>&#34;zen&#34; -&gt; &#34;--…-.&#34;<br/>&#34;gig&#34; -&gt; &#34;--…--.&#34;<br/>&#34;msg&#34; -&gt; &#34;--…--.&#34;<br/> 共有 2 种不同翻译, &#34;--…-.&#34; 和 &#34;--…--.&#34;.<br/> 注意:<br/> </blockquote><ul><li>单词列表words 的长度不会超过 100。</li><li>每个单词 words[i]的长度范围为 [1, 12]。</li><li>每个单词 words[i]只包含小写字母。</li></ul><h2><b>解答</b> </h2><p>先上代码再解释。</p><div class=\"highlight\"><pre><code class=\"language-text\">class Solution(object):\n    def uniqueMorseRepresentations(self, words):\n        &#34;&#34;&#34;\n        :type words: List[str]\n        :rtype: int\n        &#34;&#34;&#34;\n\n        m = [&#34;.-&#34;,&#34;-...&#34;,&#34;-.-.&#34;,&#34;-..&#34;,&#34;.&#34;,&#34;..-.&#34;,&#34;--.&#34;,&#34;....&#34;,&#34;..&#34;,&#34;.---&#34;,&#34;-.-&#34;,&#34;.-..&#34;,&#34;--&#34;,&#34;-.&#34;,&#34;---&#34;,&#34;.--.&#34;,&#34;--.-&#34;,&#34;.-.&#34;,&#34;...&#34;,&#34;-&#34;,&#34;..-&#34;,&#34;...-&#34;,&#34;.--&#34;,&#34;-..-&#34;,&#34;-.--&#34;,&#34;--..&#34;]\n        w = [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;,&#34;e&#34;,&#34;f&#34;,&#34;g&#34;,&#34;h&#34;,&#34;i&#34;,&#34;j&#34;,&#34;k&#34;,&#34;l&#34;,&#34;m&#34;,&#34;n&#34;,&#34;o&#34;,&#34;p&#34;,&#34;q&#34;,&#34;r&#34;,&#34;s&#34;,&#34;t&#34;,&#34;u&#34;,&#34;v&#34;,&#34;w&#34;,&#34;x&#34;,&#34;y&#34;,&#34;z&#34;]\n        d = dict(zip(w,m))\n\n\n        temp = set()\n\n\n        for index in words:\n            b = []\n\n            for i in index:\n\n                b.append(d[i])\n\n            s = &#39;&#39;.join(b)\n\n            temp.add(s)\n\n        return len(temp)\n</code></pre></div><p>首先通过 zip 方法构造一个字典，目的是为了让字母和摩尔斯密码一一对应,然后遍历传入的单词，第二层循环遍历单词的字母<br/>再把字母对应的摩尔斯密码传入列表，拼接成字符串传入set中，计算长度即可。<br/>再来改进一下代码。</p><div class=\"highlight\"><pre><code class=\"language-text\">class Solution(object):\n    def uniqueMorseRepresentations(self, words):\n        &#34;&#34;&#34;\n        :type words: List[str]\n        :rtype: int\n            &#34;&#34;&#34;\n        m = [&#34;.-&#34;,&#34;-...&#34;,&#34;-.-.&#34;,&#34;-..&#34;,&#34;.&#34;,&#34;..-.&#34;,&#34;--.&#34;,&#34;....&#34;,&#34;..&#34;,&#34;.---&#34;,&#34;-.-&#34;,&#34;.-..&#34;,&#34;--&#34;,&#34;-.&#34;,&#34;---&#34;,&#34;.--.&#34;,&#34;--.-&#34;,&#34;.-.&#34;,&#34;...&#34;,&#34;-&#34;,&#34;..-&#34;,&#34;...-&#34;,&#34;.--&#34;,&#34;-..-&#34;,&#34;-.--&#34;,&#34;--..&#34;]\n        w = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]\n        d = dict(zip(w,m))\n\n        res = []\n\n        for index in words:\n            s = &#39;&#39;\n            for i in index:\n\n                s = s + d.get(i)\n            res.append(s)\n\n        return len(set(res))\n</code></pre></div><p>基本上一样，相对来说更好理解一点。</p>", 
            "topic": [
                {
                    "tag": "刷题", 
                    "tagLink": "https://api.zhihu.com/topics/20014038"
                }, 
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42407311", 
            "userName": "一条想飞的咸鱼", 
            "userLink": "https://www.zhihu.com/people/391b9b0f59842229213ef709205afecd", 
            "upvote": 2, 
            "title": "python列表的基本方法:", 
            "content": "<p>1.列表与字符转之间的转换：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-64f944c254b6b4a332ee47cadac6d731_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"210\" data-rawheight=\"46\" class=\"content_image\" width=\"210\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;210&#39; height=&#39;46&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"210\" data-rawheight=\"46\" class=\"content_image lazy\" width=\"210\" data-actualsrc=\"https://pic2.zhimg.com/v2-64f944c254b6b4a332ee47cadac6d731_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">a=list(&#39;hello&#39;)\nprint(&#39;&#39;.join(a)) #&#39;.&#39;.join(a)--&gt;h.e.l.l.o\n\n&gt;&gt;hello</code></pre></div><p>2.修改列表</p><div class=\"highlight\"><pre><code class=\"language-text\">x=[1,1,1]\nx[1]=2\nprint(x)\n&gt;&gt;[1,2,1]</code></pre></div><p>3.删除元素</p><div class=\"highlight\"><pre><code class=\"language-text\">x=[1,2,3,4,5]\ndel x[2]\nprint(x)\n&gt;&gt;[1,2,4,5]</code></pre></div><p>4.给切片赋值</p><div class=\"highlight\"><pre><code class=\"language-text\">name=[&#39;p&#39;,&#39;e&#39;,&#39;r&#39;,&#39;l&#39;]\nname[1:]=[&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;]\nprint(name)\n&gt;&gt;[&#39;p&#39;,&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;]</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">a=[1,2,3,4]\na[2:2]=[6,7,8]\nprint(a)\n&gt;&gt;[1,2,6,7,8,3,4]</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">a=[1,2,3,4]\na[1:3]=[]\nprint(a)\n&gt;&gt;[1,4]</code></pre></div><h2>以下是列表的方法：</h2><p>5.append</p><div class=\"highlight\"><pre><code class=\"language-text\">lst=[1,2,3]\nlst.append(4)\nprint(lst)\n&gt;&gt;[1,2,3,4]</code></pre></div><p>6.clear</p><div class=\"highlight\"><pre><code class=\"language-text\">lst=[1,2,3]\nlst.clear()\nprint(lst)\n&gt;&gt;[]</code></pre></div><p>7.copy(a[:]或者list()也都可以完成复制的效果)</p><div class=\"highlight\"><pre><code class=\"language-text\">a=[1,2,3]\nb=a\nb[1]=4\nprint(a)\n&gt;&gt;[1,4,3]\nc=a.copy()\nc[1]=4\nprint(a)\n&gt;&gt;[1,2,3]</code></pre></div><p>8.count</p><div class=\"highlight\"><pre><code class=\"language-text\">a=[&#39;to&#39;,&#39;be&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;]\nprint(a.count(&#39;to&#39;))\n&gt;&gt;2</code></pre></div><p>9.extend 用一个列表扩展另一个列表，自身改变</p><div class=\"highlight\"><pre><code class=\"language-text\">a=[1,2,3]\nb=[4,5,6]\na.extend(b)\nprint(a)\n&gt;&gt;[1,2,3,4,5,6]</code></pre></div><p>10.index索引</p><div class=\"highlight\"><pre><code class=\"language-text\">knights=[&#39;we&#39;,&#39;are&#39;,&#39;the&#39;,&#39;knights&#39;,&#39;who&#39;,&#39;say&#39;,&#39;hi&#39;]\nprint(knights.index(&#39;who&#39;))\n&gt;&gt;4</code></pre></div><p>11.insert 插入列表，自身修改</p><div class=\"highlight\"><pre><code class=\"language-text\">num=[1,2,3,4,5]\na=[6,7,8]\nnum.insert(2,a)\nprint(num)\n&gt;&gt;[1, 2, [6, 7, 8], 3, 4, 5]</code></pre></div><p>12.pop 删除列表中<b>指定位置元素</b>并<b>返回</b>该元素，默认为最后一个元素</p><div class=\"highlight\"><pre><code class=\"language-text\">x=[&#39;to&#39;,&#39;be&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;]\nprint(x.pop(1))\n&gt;&gt;be\nprint(x)\n&gt;&gt;[&#39;to&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;]</code></pre></div><p>13.remove删除列表中<b>指定的第一个元素，无返回值</b></p><div class=\"highlight\"><pre><code class=\"language-text\">x=[&#39;to&#39;,&#39;be&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;]\nx.remove(&#39;&#39;be&#39;&#39;)\nprint(x)\n&gt;&gt;[&#39;to&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;]</code></pre></div><p>14.reverse 按相反的顺序排列列表中的元素</p><div class=\"highlight\"><pre><code class=\"language-text\">x=[&#39;to&#39;,&#39;be&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;]\nx.reverse()\nprint(x)\n&gt;&gt;[&#39;be&#39;, &#39;to&#39;, &#39;not&#39;, &#39;or&#39;, &#39;be&#39;, &#39;to&#39;]</code></pre></div><p>15.sort 用于对列表就地排序，修改自身</p><div class=\"highlight\"><pre><code class=\"language-text\">x=[5,6,1,5,0,3,4,0]\nx.sort()\nprint(x)\n&gt;&gt;[0, 0, 1, 3, 4, 5, 5, 6]\n\nx=[&#39;sdsaa&#39;,&#39;ff&#39;,&#39;Sssds&#39;,&#39;awew&#39;] #比较每一个字符串的ASCII码，大写位于小写的前面\nx.sort()\nprint(x)\n&gt;&gt;[,&#39;Sssds&#39;,&#39;awew&#39;, &#39;ff&#39;, &#39;sdsaa&#39;]\n\nx=[&#39;sdsaa&#39;,&#39;ff&#39;,&#39;Sssds&#39;,&#39;awew&#39;] \nx.sort(key=len)\nprint(x)\n&gt;&gt;[&#39;ff&#39;, &#39;awew&#39;, &#39;sdsaa&#39;, &#39;Sssds&#39;]\n\nx=[&#39;sdsaa&#39;,&#39;ff&#39;,&#39;Sssds&#39;,&#39;awew&#39;] #倒序\nx.sort(key=len,reverse=True)\nprint(x)\n&gt;&gt;[&#39;sdsaa&#39;, &#39;Sssds&#39;, &#39;awew&#39;, &#39;ff&#39;]</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Python 入门", 
                    "tagLink": "https://api.zhihu.com/topics/19661050"
                }, 
                {
                    "tag": "Python教程", 
                    "tagLink": "https://api.zhihu.com/topics/20027689"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/39268982", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "笔试题", 
            "content": "<p>SVM 只能应用于线性分类</p><blockquote>错误，SVM 可以应用于线性分类和非线性分类问题，取决于核函数的选取</blockquote><p>SVM 是凸问题，深度学习都是非凸问题</p><blockquote>正确，深度学习算法的目标函数，几乎全都是非凸的。</blockquote><p>L1 和 L2 正则化区别</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-04bec6181819fd958bde362e2be3676a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-04bec6181819fd958bde362e2be3676a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;157&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-04bec6181819fd958bde362e2be3676a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-04bec6181819fd958bde362e2be3676a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-343e89538604d1042319e9b0d5cc688d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"596\" data-original=\"https://pic2.zhimg.com/v2-343e89538604d1042319e9b0d5cc688d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;596&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"596\" data-original=\"https://pic2.zhimg.com/v2-343e89538604d1042319e9b0d5cc688d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-343e89538604d1042319e9b0d5cc688d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ddac49fe5175dda20e3120ebe1e5a09a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-ddac49fe5175dda20e3120ebe1e5a09a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;634&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-ddac49fe5175dda20e3120ebe1e5a09a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ddac49fe5175dda20e3120ebe1e5a09a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9cbfd68180912d59f67c1fa99cc80a60_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"645\" data-original=\"https://pic1.zhimg.com/v2-9cbfd68180912d59f67c1fa99cc80a60_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;645&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"645\" data-original=\"https://pic1.zhimg.com/v2-9cbfd68180912d59f67c1fa99cc80a60_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9cbfd68180912d59f67c1fa99cc80a60_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-770a6ebd5f77538ebc2a89186ed80064_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"575\" data-original=\"https://pic1.zhimg.com/v2-770a6ebd5f77538ebc2a89186ed80064_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;575&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"575\" data-original=\"https://pic1.zhimg.com/v2-770a6ebd5f77538ebc2a89186ed80064_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-770a6ebd5f77538ebc2a89186ed80064_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e28b654297919370a509a60f21149011_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic2.zhimg.com/v2-e28b654297919370a509a60f21149011_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;610&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"610\" data-original=\"https://pic2.zhimg.com/v2-e28b654297919370a509a60f21149011_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e28b654297919370a509a60f21149011_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1944c2a4d496ae7d5483d0d6b54bbc95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb\" width=\"615\" data-original=\"https://pic2.zhimg.com/v2-1944c2a4d496ae7d5483d0d6b54bbc95_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;615&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"615\" data-original=\"https://pic2.zhimg.com/v2-1944c2a4d496ae7d5483d0d6b54bbc95_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1944c2a4d496ae7d5483d0d6b54bbc95_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6fa54599b5502b7064476b8f224941aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-6fa54599b5502b7064476b8f224941aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;787&#39; height=&#39;350&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-6fa54599b5502b7064476b8f224941aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6fa54599b5502b7064476b8f224941aa_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bd4c5808cfd0997a55a953bee5de1748_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"635\" data-original=\"https://pic1.zhimg.com/v2-bd4c5808cfd0997a55a953bee5de1748_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;635&#39; height=&#39;334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"635\" data-original=\"https://pic1.zhimg.com/v2-bd4c5808cfd0997a55a953bee5de1748_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bd4c5808cfd0997a55a953bee5de1748_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e2e08bbd8d26868374f6981349dad1a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb\" width=\"627\" data-original=\"https://pic4.zhimg.com/v2-e2e08bbd8d26868374f6981349dad1a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;627&#39; height=&#39;202&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"627\" data-original=\"https://pic4.zhimg.com/v2-e2e08bbd8d26868374f6981349dad1a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e2e08bbd8d26868374f6981349dad1a3_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "笔试题", 
                    "tagLink": "https://api.zhihu.com/topics/19646988"
                }, 
                {
                    "tag": "笔试面试", 
                    "tagLink": "https://api.zhihu.com/topics/19890447"
                }, 
                {
                    "tag": "校园招聘", 
                    "tagLink": "https://api.zhihu.com/topics/19563240"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35091770", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 15, 
            "title": "算法岗位笔试题举例（计算机视觉方向）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a1dcb0a0c53db0d2a2987bcd0aeb0c19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-a1dcb0a0c53db0d2a2987bcd0aeb0c19_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-a1dcb0a0c53db0d2a2987bcd0aeb0c19_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a1dcb0a0c53db0d2a2987bcd0aeb0c19_b.jpg\"/></figure><p><b>一</b> <b>填空部分</b></p><p>1. 1TB代表的字节数量是________。</p><p>2^40</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 一棵完全二叉树的的结点总数为18，其叶节点数为________。</p><p>9</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 与二进制小数0.1相等的八进制数是________。</p><p>0.4</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. G是一个非连通简单无向图，共有28条边，则该图至少有________个顶点。</p><p>9</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 表达式a*(b+c)-d的后缀表达形式为________________。</p><p>abc+*d-</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6. 某二叉树的中序遍历为EGDBFCA，后序遍历为EBDGCAF，其前序遍历为________。</p><p>FGEDBAC</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7. #define DOUBLE(x) x+x, i=5*DOUBLE(5); i=________。</p><p>30</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8. 若有变量int a, float x, y，且a=7, x=2.5, y=4.7，则表达式x+a%3*(int)(x+y)%2/4的值为________。</p><p>2.500000</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9. 若有变量int a, b, c，且a=2, b=1，则执行c = a&lt;b &amp;&amp; b++&gt;=a后，a=________, b=________, c=________。</p><p>2，1，0</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二</b> <b>简答部分</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>10. 简要解释面向对象的三大特性。</p><p><b>封装</b>：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的隐藏信息。</p><p><b>继承</b>：让某个类型的对象获得另一个类型对象属性的方法。</p><p><b>多态</b>：一个类实例的相同方法在不同情形下有不同的表现形式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>11. 连续图像转化为数字图像需要进行哪些操作？</p><p>取样 量化</p><p class=\"ztext-empty-paragraph\"><br/></p><p>12. 什么是高斯白噪声？</p><p>幅度分布满足高斯分布，功率谱密度在整个频域范围内均匀分布的<b>随机</b>噪声。</p><p>（数学期望为0，方差为常数）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>13. 数字图像中有哪些基本特征？</p><p>颜色特征、纹理特征、形状特征、空间关系特征等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>14. 图像边缘检测中常用的边缘检测算子有哪些？</p><p>Roberts算子、Prewitt算子、Sobel算子、Canny算子、Laplacian算子等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>15. 频域滤波中的理想低通滤波器和巴特沃斯低通滤波器有哪些区别？</p><p>在通过频率和滤除频率之间，理想低通滤波器有明显截止的尖锐的不连续性；巴特沃斯低通滤波器则有平滑的过渡。</p><p>随着通过频率的增大，理想低通滤波器会出现振铃现象，即随着被滤除的高频内容数量越来越少，图像的纹理也会越来越好；而一阶巴特沃斯滤波器不会出现振铃现象，二阶滤波器的振铃现象也基本难以察觉，随着阶数的增加，振铃现象会有稍微明显起来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>16. 双向链表中有两个指针域，llink和rlink，分别指向前驱和后继，设p指向链表中的一个结点，q指向一待插入结点，现要求在p前插入q，试写出插入部分代码。</p><div class=\"highlight\"><pre><code class=\"language-text\">q-&gt;llink = p-&gt;llink;\nq-&gt;rlink = p;\np-&gt;llink-&gt;rlink = q;\np-&gt;llink = q;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>17. 试比较选择排序、冒泡排序与快速排序算法的时间复杂度与稳定性。</p><p>选择排序：O(n2)，不稳定</p><p>冒泡排序：O(n2)，稳定</p><p>快速排序：O(nlogn)，不稳定</p><p class=\"ztext-empty-paragraph\"><br/></p><p>18. 简述#include &lt;file.h&gt;和#include &#34;file.h&#34;的区别。</p><p>前者是从Standard Library的路径寻找和引用file.h</p><p>后者是从当前工作路径寻找和引用file.h</p><p class=\"ztext-empty-paragraph\"><br/></p><p>19. 简述图像处理中常见的数学形态学操作及其作用。</p><p><b>腐蚀</b>：集合B（结构元）对集合A的腐蚀是一个用z平移的B包含在A中的所有点z的集合。</p><p>腐蚀将小于结构元的图像细节从图像中滤除，是一种收缩或细化操作。</p><p><b>膨胀</b>：集合B对集合A的膨胀是所有位移z的集合，使每一个平移的B和A至少有一个像素重叠。</p><p>膨胀会增长或粗化二值图像中物体，它可以应用与桥接裂缝。</p><p><b>开操作</b>：集合B对A的开操作就是B对A的腐蚀，紧接着用B对结果进行膨胀。</p><p>开操作会平滑物体的轮廓、断开较窄的狭颈并消除细的突出物。</p><p><b>闭操作</b>：集合B对A的闭操作就是用B对A膨胀，紧接着用B对结果进行腐蚀。</p><p>闭操作会平滑轮廓的一部分，它通常会弥合较窄的间断和细长的沟壑，消除小的孔洞，填补轮廓线中的断裂。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>20. 如何衡量图像压缩算法的性能？试列举出常见的图像压缩方法。</p><p>压缩率 可还原性 保留信息量</p><p>霍夫曼编码、Golomb编码、算术编码等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>21. 简述单源最短路径Dijkstra算法原理。</p><p>G={V,E}</p><p>1. 初始时令 S={V0},T=V-S={其余顶点}，T中顶点对应的距离值</p><p>若存在&lt;V0,Vi&gt;，d(V0,Vi)为&lt;V0,Vi&gt;弧上的权值</p><p>若不存在&lt;V0,Vi&gt;，d(V0,Vi)为∞</p><p>2. 从T中选取一个与S中顶点有关联边且权值最小的顶点W，加入到S中</p><p>3. 对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩 短，则修改此距离值</p><p>重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止</p><p class=\"ztext-empty-paragraph\"><br/></p><p>22. 简述最小生成树Kruskal算法原理。</p><p>先构造一个只含V个顶点，而边集为空的子图，若将该子图中各个顶点看成是各棵树上的根结点，则它是一个含有V棵树的一个森林。之后，从图的边集E中选取一条权值最小的边，若该条边的两个顶点分属不同的树，则将其加入子图，也就是说，将这两个顶点分别所在的两棵树合成一棵树；反之，若该条边的两个顶点已落在同一棵树上，则不可取，而应该取下一条权值最小的边再试之。依次类推，直至森林中只有一棵树，也即子图中含有 n-1条边为止。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>23. 列举几种常用的图像分割思想，简述分水岭分割算法的原理。</p><p>边缘检测、阈值处理、区域生长</p><p>算法的主要目标是找出分水线，假设图像每个区域的最小值上打一个洞，并且让水通过洞以均匀的速率上升，从低到高淹没整个地形。当不同的汇水盆地中上升的水聚集时，修建一个水坝来阻止这个聚合。水将达到在水线上只能见到各个水坝顶部的程度。这个大坝的边界对应于分水岭的分割线，它们就是分水岭算法提取出来的分割线。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>24. 简述最长公共子序列问题解决方法。</p><p>动态规划</p><p>状态转移方程如下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1f9d0a439891f8db79e687ff6c4c1307_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb\" width=\"927\" data-original=\"https://pic4.zhimg.com/v2-1f9d0a439891f8db79e687ff6c4c1307_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;927&#39; height=&#39;515&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"927\" data-original=\"https://pic4.zhimg.com/v2-1f9d0a439891f8db79e687ff6c4c1307_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1f9d0a439891f8db79e687ff6c4c1307_b.jpg\"/></figure><p>25. 比较有监督学习与无监督学习的区别。</p><p><b>有监督学习</b>就是人们常说的分类，通过已有的训练样本去训练得到一个最优模型，再利用这个模型将所有的输入映射为相应的输出，对输出进行简单的判断从而实现分类的目的，也就具有了对未知数据进行分类的能力。</p><p><b>无监督学习</b>在于事先没有任何训练样本，需要直接对数据进行建模。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>26. 简述神经网络训练中过拟合和欠拟合的问题，并提出解决方案。</p><p><b>欠拟合</b>就是模型没有很好捕捉到，不能很好地拟合数据。</p><p>可以添加其他特征项、添加多项式特征以及减少正则化参数来实现。</p><p><b>过拟合</b>就是把数据学习得太彻底，以至于把噪声数据的特征也学习到了，这样会导致在后期测试的时候不能很好地识别数据，导致模型泛化能力变差，不能进行正确分类。</p><p>重新清洗数据，有可能是数据不纯。</p><p>增大数据训练量。</p><p>采用正则化方法。</p><p>应用Dropout让神经元在一定概率下不工作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>27. 简述神经网络训练中梯度消失的原因。</p><p>神经网络的训练中，通过改变神经元的权重，使网络的输出值尽可能逼近标签以降低误差值，训练普遍使用BP算法，核心思想是，计算出输出与标签间的损失函数值，然后计算其相对于每个神经元的梯度，进行权值的迭代。 造成梯度消失的原因是，许多激活函数将输出值挤压在很小的区间内，在激活函数两端较大范围的定义域内梯度为0。梯度消失会造成权值更新缓慢，模型训练难度增加，甚至学习停止。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>28. 什么样的数据集不适用与深度学习？</p><p>数据集太小，数据样本不足时，深度学习相对其它机器学习算法，没有明显优势。 </p><p>数据集没有局部相关特性，目前深度学习表现比较好的领域主要是图像、语音、自然语言处理等领域，这些领域的一个共性是局部相关性。图像中像素组成物体，语音信号中音位组合成单词，文本数据中单词组合成句子，这些特征元素的组合一旦被打乱，表示的含义同时也被改变。对于没有这样的局部相关性的数据集，不适于使用深度学习算法进行处理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三</b> <b>阅读程序写结果</b></p><p>29.</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\nusing namespace std;\nvoid fun(char *a, char *b){\n    a = b;\n    (*a)++;\n}\nint main(){\n    char c1, c2, *p1, *p2;\n    c1 = ‘A’;\n    c2 = ‘a’;\n    p1 = &amp;c1;\n    p2 = &amp;c2;\n    fun(p1, p2);\n    cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; endl;\n    return 0;\n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>输出：________________</p><p>Ab</p><p class=\"ztext-empty-paragraph\"><br/></p><p>30.</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\nusing namespace std;\nint lps(string seq, int i, int j){\n    int len1, len2;\n    if (i == j)\n        return 1;\n    if (i &gt; j)\n        return 0;\n    if (seq[i] == seq[j])\n        return lps(seq, i + 1, j - 1) + 2;\n    len1 = lps(seq, i, j - 1);\n    len2 = lps(seq, i + 1, j);\n    if (len1 &gt; len2)\n        return len1;\n    return len2;\n}\nint main(){\n    string seq = “acmerandacm”;\n    int n = seq.size();\n    cout &lt;&lt; lps(seq, 0, n - 1) &lt;&lt; endl;\n    return 0;\n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>输出：________________</p><p>5</p><p class=\"ztext-empty-paragraph\"><br/></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "黄小宇", 
                    "userLink": "https://www.zhihu.com/people/160f75dbd05285dbc9ba435773e3ba94", 
                    "content": "第二题答案是3吧？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小白", 
                            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
                            "content": "<p>不是，第五层3个，加上第四层没有孩子结点的6个，一共9个。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "黄小宇"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35606677", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "数字特征", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/128EkJM0LfCAyvCDEX22FVA\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">视频1</a><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1ENn6sCa9mM5MVnuOLEp0Bw\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">视频2</a><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-848b4ca9deccc47afd360a688d57b172_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-848b4ca9deccc47afd360a688d57b172_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-848b4ca9deccc47afd360a688d57b172_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-848b4ca9deccc47afd360a688d57b172_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5d6e4cb6582b28ffd8f800d0a38828ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-5d6e4cb6582b28ffd8f800d0a38828ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-5d6e4cb6582b28ffd8f800d0a38828ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5d6e4cb6582b28ffd8f800d0a38828ee_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f9341e4f9fa67a5285fcdfff40735ed3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-f9341e4f9fa67a5285fcdfff40735ed3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-f9341e4f9fa67a5285fcdfff40735ed3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f9341e4f9fa67a5285fcdfff40735ed3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c3cdae710475b1656f27cc290fc9d49f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-c3cdae710475b1656f27cc290fc9d49f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-c3cdae710475b1656f27cc290fc9d49f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c3cdae710475b1656f27cc290fc9d49f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e8455935693886f285d6c543c5ca0774_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-e8455935693886f285d6c543c5ca0774_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-e8455935693886f285d6c543c5ca0774_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e8455935693886f285d6c543c5ca0774_b.jpg\"/></figure><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35592299", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "深度学习-卷积核大小的选择", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><p>最常用的是：3*3，还会出现：1*1，7*7</p><p>选择卷积核大小的原则是：小而深。</p><p>其会，达到大的卷积核的效果但参数会减少，而且会有更好的泛化能力。</p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35588729", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "深度学习-感受野", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><p><b>感受野</b>：输出featuremap某个节点的响应对应的输入图像的区域就是感受野。</p><p><b>计算：（本文只讨论，卷积时stride=1，池化时，stride=pool_size，从后往前算起始位1）</b></p><hr/><p>卷积对扩大感受野是公式是：（m+conv_size-1）*（m+conv_size-1）,其中m是原感受野，conv_size是卷积核大小</p><hr/><p>池化会将感受野变成：（2*m)(2*m)</p><hr/><p>参考：</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/kuaitoukid/article/details/46829355\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-d7c037cd8aeda7ef9915703d65e6d2a3_180x120.jpg\" data-image-width=\"257\" data-image-height=\"183\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CNN中感受野的计算 - CSDN博客</a><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35587390", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "深度学习-优化算法", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><p><b>SGD:</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-614ffc324bb41a4fb6e966b9716f6e84_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"630\" data-original=\"https://pic1.zhimg.com/v2-614ffc324bb41a4fb6e966b9716f6e84_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;630&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"630\" data-original=\"https://pic1.zhimg.com/v2-614ffc324bb41a4fb6e966b9716f6e84_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-614ffc324bb41a4fb6e966b9716f6e84_b.jpg\"/></figure><p><b>缺点</b>：</p><ol><li>选择合适的learning rate比较困难</li><li>对所有的参数更新使用同样的learning rate</li><li>SGD容易收敛到局部最优</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a04e3973ba509a2e8b61a9507acb4bdf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic4.zhimg.com/v2-a04e3973ba509a2e8b61a9507acb4bdf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;594&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"594\" data-original=\"https://pic4.zhimg.com/v2-a04e3973ba509a2e8b61a9507acb4bdf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a04e3973ba509a2e8b61a9507acb4bdf_b.jpg\"/></figure><p>momentum项能够在相关方向加速SGD，抑制振荡，从而加快收敛</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8afb1453619348530cdafd39528e3cea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic3.zhimg.com/v2-8afb1453619348530cdafd39528e3cea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;496&#39; height=&#39;213&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"496\" data-original=\"https://pic3.zhimg.com/v2-8afb1453619348530cdafd39528e3cea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8afb1453619348530cdafd39528e3cea_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4aff174d13721cd4d10a863c4f2edbed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb\" width=\"670\" data-original=\"https://pic2.zhimg.com/v2-4aff174d13721cd4d10a863c4f2edbed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;670&#39; height=&#39;76&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"670\" data-original=\"https://pic2.zhimg.com/v2-4aff174d13721cd4d10a863c4f2edbed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4aff174d13721cd4d10a863c4f2edbed_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8397e33a12d125112d977f2f3905576f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"91\" class=\"content_image\" width=\"333\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;333&#39; height=&#39;91&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"91\" class=\"content_image lazy\" width=\"333\" data-actualsrc=\"https://pic4.zhimg.com/v2-8397e33a12d125112d977f2f3905576f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0cf2b2cce6d977800c1b106bd74dbb80_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"74\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;74&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"74\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic1.zhimg.com/v2-0cf2b2cce6d977800c1b106bd74dbb80_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7c5bfe0d96cdffe1bb51bfe2e19dbd13_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"71\" class=\"origin_image zh-lightbox-thumb\" width=\"452\" data-original=\"https://pic4.zhimg.com/v2-7c5bfe0d96cdffe1bb51bfe2e19dbd13_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;452&#39; height=&#39;71&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"71\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"452\" data-original=\"https://pic4.zhimg.com/v2-7c5bfe0d96cdffe1bb51bfe2e19dbd13_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7c5bfe0d96cdffe1bb51bfe2e19dbd13_b.jpg\"/></figure><p>引用：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/u012759136/article/details/52302426\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习最全优化方法总结比较</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35580672", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "深度学习相关知识-2（激活函数）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-887bee80a2f24bdf76163fd098f1fda6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"82\" class=\"origin_image zh-lightbox-thumb\" width=\"815\" data-original=\"https://pic3.zhimg.com/v2-887bee80a2f24bdf76163fd098f1fda6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;815&#39; height=&#39;82&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"82\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"815\" data-original=\"https://pic3.zhimg.com/v2-887bee80a2f24bdf76163fd098f1fda6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-887bee80a2f24bdf76163fd098f1fda6_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1c671f682ff6a393b01fed56fa55f0b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"519\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic2.zhimg.com/v2-1c671f682ff6a393b01fed56fa55f0b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;519&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"519\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic2.zhimg.com/v2-1c671f682ff6a393b01fed56fa55f0b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1c671f682ff6a393b01fed56fa55f0b1_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-16e2298d53761c02fa508bb0b79a318c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"489\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic1.zhimg.com/v2-16e2298d53761c02fa508bb0b79a318c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;489&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"489\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic1.zhimg.com/v2-16e2298d53761c02fa508bb0b79a318c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-16e2298d53761c02fa508bb0b79a318c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e8a66297ba1fa70ae89fdad4b155b81a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic3.zhimg.com/v2-e8a66297ba1fa70ae89fdad4b155b81a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;371&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic3.zhimg.com/v2-e8a66297ba1fa70ae89fdad4b155b81a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e8a66297ba1fa70ae89fdad4b155b81a_b.jpg\"/></figure><p><b>优点：</b></p><ol><li>相比起Sigmoid和tanh，ReLU在SGD中能够快速收敛。</li><li>Sigmoid和tanh涉及了很多很expensive的操作（比如指数），ReLU可以更加简单的实现。</li><li>有效缓解了梯度消失的问题。</li><li>在没有无监督预训练的时候也能有较好的表现。</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eafbb0a63709dedd0434b6c8efddc4fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"807\" data-original=\"https://pic2.zhimg.com/v2-eafbb0a63709dedd0434b6c8efddc4fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;807&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"807\" data-original=\"https://pic2.zhimg.com/v2-eafbb0a63709dedd0434b6c8efddc4fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eafbb0a63709dedd0434b6c8efddc4fd_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6e7dc66df5808baa1bc66acaacd2e213_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"562\" class=\"origin_image zh-lightbox-thumb\" width=\"856\" data-original=\"https://pic4.zhimg.com/v2-6e7dc66df5808baa1bc66acaacd2e213_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;856&#39; height=&#39;562&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"562\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"856\" data-original=\"https://pic4.zhimg.com/v2-6e7dc66df5808baa1bc66acaacd2e213_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6e7dc66df5808baa1bc66acaacd2e213_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-673dcb48d4146effe2f396d184b8cf43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-673dcb48d4146effe2f396d184b8cf43_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-673dcb48d4146effe2f396d184b8cf43_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-673dcb48d4146effe2f396d184b8cf43_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a082d78f40c86aa0f1ab82554cd4f25a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"35\" class=\"origin_image zh-lightbox-thumb\" width=\"632\" data-original=\"https://pic3.zhimg.com/v2-a082d78f40c86aa0f1ab82554cd4f25a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;632&#39; height=&#39;35&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"35\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"632\" data-original=\"https://pic3.zhimg.com/v2-a082d78f40c86aa0f1ab82554cd4f25a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a082d78f40c86aa0f1ab82554cd4f25a_b.jpg\"/></figure><p>引用：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/rgvb178/p/6055213.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Activation Function in Deep Learning 浅谈深度学习中的激活函数</a></p><p>2，<a href=\"https://www.zhihu.com/question/23765351\" class=\"internal\">Softmax 函数的特点和作用是什么？</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35579251", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "深度学习相关知识-1", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f8cc66cb657dc3a8c0c364268a1eceeb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"229\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic4.zhimg.com/v2-f8cc66cb657dc3a8c0c364268a1eceeb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;229&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"229\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic4.zhimg.com/v2-f8cc66cb657dc3a8c0c364268a1eceeb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f8cc66cb657dc3a8c0c364268a1eceeb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2a5a55eb51f07e41002c6868cfb83bcf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"57\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https://pic4.zhimg.com/v2-2a5a55eb51f07e41002c6868cfb83bcf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;604&#39; height=&#39;57&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"57\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"604\" data-original=\"https://pic4.zhimg.com/v2-2a5a55eb51f07e41002c6868cfb83bcf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a5a55eb51f07e41002c6868cfb83bcf_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-71c72c7bc1ff6379dbb579f378e014f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"27\" class=\"origin_image zh-lightbox-thumb\" width=\"591\" data-original=\"https://pic1.zhimg.com/v2-71c72c7bc1ff6379dbb579f378e014f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;591&#39; height=&#39;27&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"27\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"591\" data-original=\"https://pic1.zhimg.com/v2-71c72c7bc1ff6379dbb579f378e014f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-71c72c7bc1ff6379dbb579f378e014f8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-56e1aae1b6a8603025d85b2ad5e4f802_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"649\" data-original=\"https://pic3.zhimg.com/v2-56e1aae1b6a8603025d85b2ad5e4f802_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;649&#39; height=&#39;264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"649\" data-original=\"https://pic3.zhimg.com/v2-56e1aae1b6a8603025d85b2ad5e4f802_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-56e1aae1b6a8603025d85b2ad5e4f802_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2b910fa57ef32536ffa02e880f8efca9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic2.zhimg.com/v2-2b910fa57ef32536ffa02e880f8efca9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;612&#39; height=&#39;157&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"157\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"612\" data-original=\"https://pic2.zhimg.com/v2-2b910fa57ef32536ffa02e880f8efca9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2b910fa57ef32536ffa02e880f8efca9_b.jpg\"/></figure><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35511775", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "深度学习-防止过拟合", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c1fcae9e233e625cb12da018efabbdcc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"241\" data-rawheight=\"129\" class=\"content_image\" width=\"241\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;241&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"241\" data-rawheight=\"129\" class=\"content_image lazy\" width=\"241\" data-actualsrc=\"https://pic1.zhimg.com/v2-c1fcae9e233e625cb12da018efabbdcc_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-80f2ac81b71b689472d6eb7c1d6d5ba8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"151\" class=\"content_image\" width=\"346\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;346&#39; height=&#39;151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"151\" class=\"content_image lazy\" width=\"346\" data-actualsrc=\"https://pic1.zhimg.com/v2-80f2ac81b71b689472d6eb7c1d6d5ba8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c5843c4216af78c1d57de17b10814415_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"407\" data-rawheight=\"263\" class=\"content_image\" width=\"407\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;407&#39; height=&#39;263&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"407\" data-rawheight=\"263\" class=\"content_image lazy\" width=\"407\" data-actualsrc=\"https://pic2.zhimg.com/v2-c5843c4216af78c1d57de17b10814415_b.jpg\"/></figure><p>注：交叉验证不行，pooling不行</p><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/Left_Think/article/details/77684087%3FlocationNum%3D5%26fps%3D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习--防止过拟合的几种方法 - CSDN博客</a></p><p>2，<a href=\"https://www.zhihu.com/question/59201590\" class=\"internal\">机器学习中用来防止过拟合的方法有哪些？</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35511475", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "AVL树", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f78c437a85e5c2e59d3de092ba084c69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"605\" data-rawheight=\"147\" class=\"origin_image zh-lightbox-thumb\" width=\"605\" data-original=\"https://pic2.zhimg.com/v2-f78c437a85e5c2e59d3de092ba084c69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;605&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"605\" data-rawheight=\"147\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"605\" data-original=\"https://pic2.zhimg.com/v2-f78c437a85e5c2e59d3de092ba084c69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f78c437a85e5c2e59d3de092ba084c69_b.jpg\"/></figure><p>参考：</p><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/AVL%25E6%25A0%2591/10986648%3Ffr%3Daladdin\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AVL树_百度百科</a><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35511246", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "倒排索引", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-64c74e2b87f27385acfdab6eaebbdcb7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-64c74e2b87f27385acfdab6eaebbdcb7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-64c74e2b87f27385acfdab6eaebbdcb7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-64c74e2b87f27385acfdab6eaebbdcb7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9df97286140e48897287e373302cfea6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic3.zhimg.com/v2-9df97286140e48897287e373302cfea6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic3.zhimg.com/v2-9df97286140e48897287e373302cfea6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9df97286140e48897287e373302cfea6_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-824b2be9d4c83fc516102faded1fd321_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-824b2be9d4c83fc516102faded1fd321_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;107&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-824b2be9d4c83fc516102faded1fd321_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-824b2be9d4c83fc516102faded1fd321_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-86062ca101acb444fe4a4fae1e8db59a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"506\" data-original=\"https://pic3.zhimg.com/v2-86062ca101acb444fe4a4fae1e8db59a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;506&#39; height=&#39;386&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"506\" data-original=\"https://pic3.zhimg.com/v2-86062ca101acb444fe4a4fae1e8db59a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-86062ca101acb444fe4a4fae1e8db59a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-302e0b21c851e6f9709254a529e69b8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic4.zhimg.com/v2-302e0b21c851e6f9709254a529e69b8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic4.zhimg.com/v2-302e0b21c851e6f9709254a529e69b8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-302e0b21c851e6f9709254a529e69b8b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cd67b346fddb57eae94f0a4fa62dd772_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic3.zhimg.com/v2-cd67b346fddb57eae94f0a4fa62dd772_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;138&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic3.zhimg.com/v2-cd67b346fddb57eae94f0a4fa62dd772_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cd67b346fddb57eae94f0a4fa62dd772_b.jpg\"/></figure><p>引用：</p><a href=\"https://www.zhihu.com/question/23202010\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">倒排索引为什么叫倒排索引？</a><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35510743", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "奇异值分解", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4fbbd772e7ace0456f8afe83d51277c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"816\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb\" width=\"816\" data-original=\"https://pic3.zhimg.com/v2-4fbbd772e7ace0456f8afe83d51277c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;816&#39; height=&#39;223&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"816\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"816\" data-original=\"https://pic3.zhimg.com/v2-4fbbd772e7ace0456f8afe83d51277c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4fbbd772e7ace0456f8afe83d51277c2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-aad4bd6257a5f24f9cdaa6a74881ed0e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"809\" data-original=\"https://pic3.zhimg.com/v2-aad4bd6257a5f24f9cdaa6a74881ed0e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;809&#39; height=&#39;124&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"809\" data-original=\"https://pic3.zhimg.com/v2-aad4bd6257a5f24f9cdaa6a74881ed0e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-aad4bd6257a5f24f9cdaa6a74881ed0e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7f81c8ccdf04b3746e50dfd22d45202f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"474\" data-original=\"https://pic4.zhimg.com/v2-7f81c8ccdf04b3746e50dfd22d45202f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;474&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"474\" data-original=\"https://pic4.zhimg.com/v2-7f81c8ccdf04b3746e50dfd22d45202f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7f81c8ccdf04b3746e50dfd22d45202f_b.jpg\"/></figure><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35510104", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "线程和进程", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ac4568dee9c708a573c9a7a35dbf019b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"36\" class=\"origin_image zh-lightbox-thumb\" width=\"725\" data-original=\"https://pic4.zhimg.com/v2-ac4568dee9c708a573c9a7a35dbf019b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;725&#39; height=&#39;36&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"36\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"725\" data-original=\"https://pic4.zhimg.com/v2-ac4568dee9c708a573c9a7a35dbf019b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ac4568dee9c708a573c9a7a35dbf019b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-70e4ea11f75070a29b9a48aa00feaedd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic2.zhimg.com/v2-70e4ea11f75070a29b9a48aa00feaedd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;710&#39; height=&#39;61&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"710\" data-original=\"https://pic2.zhimg.com/v2-70e4ea11f75070a29b9a48aa00feaedd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-70e4ea11f75070a29b9a48aa00feaedd_b.jpg\"/></figure><p>注：细节<a href=\"https://www.zhihu.com/question/25532384\" class=\"internal\">线程和进程的区别是什么？</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cdfb9448c0ac3a24a46995d86b5180b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"251\" class=\"content_image\" width=\"401\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;401&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"251\" class=\"content_image lazy\" width=\"401\" data-actualsrc=\"https://pic3.zhimg.com/v2-cdfb9448c0ac3a24a46995d86b5180b2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-19d2c5344c8b18594d78a0bb64ef2a1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"415\" data-rawheight=\"225\" class=\"content_image\" width=\"415\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;415&#39; height=&#39;225&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"415\" data-rawheight=\"225\" class=\"content_image lazy\" width=\"415\" data-actualsrc=\"https://pic3.zhimg.com/v2-19d2c5344c8b18594d78a0bb64ef2a1e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6a0bbd7bb36e3469ab61783a96c4d192_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"557\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb\" width=\"557\" data-original=\"https://pic3.zhimg.com/v2-6a0bbd7bb36e3469ab61783a96c4d192_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;557&#39; height=&#39;455&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"557\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"557\" data-original=\"https://pic3.zhimg.com/v2-6a0bbd7bb36e3469ab61783a96c4d192_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6a0bbd7bb36e3469ab61783a96c4d192_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//www.nowcoder.com/questionTerminal/5ecac82f0de64acb8cfdae78b80e3345\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-5c127c0af2096b46b17a7da17a7ce9a7_ipico.jpg\" data-image-width=\"150\" data-image-height=\"151\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于线程和进程，不正确的描述是____。_牛客网</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-333274b18f95911e1e1042cee5ab1240_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"262\" class=\"content_image\" width=\"302\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;302&#39; height=&#39;262&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"262\" class=\"content_image lazy\" width=\"302\" data-actualsrc=\"https://pic1.zhimg.com/v2-333274b18f95911e1e1042cee5ab1240_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4590027a47073f3d2596a8ea45378d6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"551\" data-original=\"https://pic4.zhimg.com/v2-4590027a47073f3d2596a8ea45378d6f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;551&#39; height=&#39;460&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"551\" data-original=\"https://pic4.zhimg.com/v2-4590027a47073f3d2596a8ea45378d6f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4590027a47073f3d2596a8ea45378d6f_b.jpg\"/></figure><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35508666", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "L1,L2正则化", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><p><b>L1：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-07dbad4953aed5b9192bab1cf3eaa6d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"169\" data-rawheight=\"29\" class=\"content_image\" width=\"169\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;169&#39; height=&#39;29&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"169\" data-rawheight=\"29\" class=\"content_image lazy\" width=\"169\" data-actualsrc=\"https://pic4.zhimg.com/v2-07dbad4953aed5b9192bab1cf3eaa6d3_b.jpg\"/></figure><p><b>L2:</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6b4900f3fad0d44cd580542057d8ba64_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"176\" data-rawheight=\"34\" class=\"content_image\" width=\"176\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;176&#39; height=&#39;34&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"176\" data-rawheight=\"34\" class=\"content_image lazy\" width=\"176\" data-actualsrc=\"https://pic1.zhimg.com/v2-6b4900f3fad0d44cd580542057d8ba64_b.jpg\"/></figure><p><b>作用：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0799e69ae4e800a539de51e6f22a84b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"66\" class=\"origin_image zh-lightbox-thumb\" width=\"571\" data-original=\"https://pic1.zhimg.com/v2-0799e69ae4e800a539de51e6f22a84b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;571&#39; height=&#39;66&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"66\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"571\" data-original=\"https://pic1.zhimg.com/v2-0799e69ae4e800a539de51e6f22a84b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0799e69ae4e800a539de51e6f22a84b0_b.jpg\"/></figure><p>引用：</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/jinping_shi/article/details/52433975\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-019f90836ee5966b87419c0f859fc5c8_ipico.jpg\" data-image-width=\"318\" data-image-height=\"297\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习中正则化项L1和L2的直观理解 - CSDN博客</a><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35483238", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "特征值与特征向量", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><p>视频：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1SoSbNv7CAzpoGbjjzRZsJg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">视频2</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1MPluE2u3NkdlwfYzqHE12g\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">视频1</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1486ddef87d5f69e77354433184eeb3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-1486ddef87d5f69e77354433184eeb3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-1486ddef87d5f69e77354433184eeb3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1486ddef87d5f69e77354433184eeb3e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ce83ded92db5daa54eb5855eb7ceabe5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-ce83ded92db5daa54eb5855eb7ceabe5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-ce83ded92db5daa54eb5855eb7ceabe5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ce83ded92db5daa54eb5855eb7ceabe5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e5732e520a1796f29d4ebf6e8b1e0420_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-e5732e520a1796f29d4ebf6e8b1e0420_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-e5732e520a1796f29d4ebf6e8b1e0420_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e5732e520a1796f29d4ebf6e8b1e0420_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e395cc0b2267e23b9ce662b9af552ce2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-e395cc0b2267e23b9ce662b9af552ce2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-e395cc0b2267e23b9ce662b9af552ce2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e395cc0b2267e23b9ce662b9af552ce2_b.jpg\"/></figure><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35458800", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "相关系数", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cdd12a427d0ce6bd515b039f0a9a6d98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"114\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic1.zhimg.com/v2-cdd12a427d0ce6bd515b039f0a9a6d98_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;114&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"114\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic1.zhimg.com/v2-cdd12a427d0ce6bd515b039f0a9a6d98_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cdd12a427d0ce6bd515b039f0a9a6d98_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-69d3a61f8bc39d28403cac944a337423_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"30\" class=\"origin_image zh-lightbox-thumb\" width=\"666\" data-original=\"https://pic4.zhimg.com/v2-69d3a61f8bc39d28403cac944a337423_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;666&#39; height=&#39;30&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"30\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"666\" data-original=\"https://pic4.zhimg.com/v2-69d3a61f8bc39d28403cac944a337423_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-69d3a61f8bc39d28403cac944a337423_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f46822f729c5a54ceb04bb62dd5bc7ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-f46822f729c5a54ceb04bb62dd5bc7ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;739&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-f46822f729c5a54ceb04bb62dd5bc7ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f46822f729c5a54ceb04bb62dd5bc7ce_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://www.zhihu.com/question/20852004\" class=\"internal\">如何通俗易懂地解释「协方差」与「相关系数」的概念？</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%259B%25B8%25E5%2585%25B3%25E7%25B3%25BB%25E6%2595%25B0/3109424%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">相关系数_百度百科</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35458323", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "克莱姆法则", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-08ecd9430c76ff5bbe2cfd9ff4563948_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-08ecd9430c76ff5bbe2cfd9ff4563948_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;568&#39; height=&#39;73&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-08ecd9430c76ff5bbe2cfd9ff4563948_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-08ecd9430c76ff5bbe2cfd9ff4563948_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2585%258B%25E8%258E%25B1%25E5%25A7%2586%25E6%25B3%2595%25E5%2588%2599/7211518%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">克莱姆法则_百度百科</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35457052", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "协方差", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d5c1d5f5e328ef055e28b3e8e95e3d0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"81\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic1.zhimg.com/v2-d5c1d5f5e328ef055e28b3e8e95e3d0c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;814&#39; height=&#39;81&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"81\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"814\" data-original=\"https://pic1.zhimg.com/v2-d5c1d5f5e328ef055e28b3e8e95e3d0c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d5c1d5f5e328ef055e28b3e8e95e3d0c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f002fbce76cccab03ce75230245a90a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb\" width=\"617\" data-original=\"https://pic3.zhimg.com/v2-f002fbce76cccab03ce75230245a90a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;617&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"617\" data-original=\"https://pic3.zhimg.com/v2-f002fbce76cccab03ce75230245a90a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f002fbce76cccab03ce75230245a90a2_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%258D%258F%25E6%2596%25B9%25E5%25B7%25AE/2185936%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">协方差_百度百科</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35455840", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 3, 
            "title": "检验正态分布", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-296c75e54d0c0a4f33f2f77eaedac962_b.jpg\"/></figure><ol><li>Q-Q图分布</li><li>K-S检验</li></ol><p>这两个分布，可以用来检验正态分布</p><ol><li>T检验（不可以），它是在检验知道样本符合正态分布后，在用的检验</li><li>Wilcoxon符号秩检验，不可以</li></ol><p>参考：</p><p>1，<a href=\"https://www.zhihu.com/question/40818351\" class=\"internal\">怎样判断一个分布的正态性？</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25A8%2581%25E5%25B0%2594%25E7%25A7%2591%25E5%2585%258B%25E6%25A3%25AE%25E7%25AC%25A6%25E5%258F%25B7%25E7%25A7%25A9%25E6%25A3%2580%25E9%25AA%258C/596168%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">威尔科克森符号秩检验_百度百科</a></p><p>3，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/shulixu/article/details/53354206\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">t检验 - CSDN博客</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35430224", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "中心极限定理", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3506c3a3b9431347fd0c8b4a1b3c65b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-3506c3a3b9431347fd0c8b4a1b3c65b6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-3506c3a3b9431347fd0c8b4a1b3c65b6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3506c3a3b9431347fd0c8b4a1b3c65b6_b.jpg\"/></figure><p>考研视频：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1uiNLoTFX7QHea-coAFsRyw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中心极限定理</a></p><p>中心极限定理说明：无限多样本相加得到的新的和的变量，会服从正态分布。而新变量服从的正态分布的均值与方差有关系，从而我们可以借助样本推断总体的均值与方差。</p><p>中心极限定理与大数定律分别讨论了这个新变量两个性质：前者是该变量服从的分布，后者是该变量会收敛到哪。</p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35429881", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "大数定律", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\"/></figure><p>考研视频：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1rPWxWFq3ba2y56F9bWmIjA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">大数定律</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fb474a55f1ccf67d3c40a33128272166_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-fb474a55f1ccf67d3c40a33128272166_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-fb474a55f1ccf67d3c40a33128272166_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fb474a55f1ccf67d3c40a33128272166_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d8f8a825f11831e19f6a74ca80bde39f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-d8f8a825f11831e19f6a74ca80bde39f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-d8f8a825f11831e19f6a74ca80bde39f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d8f8a825f11831e19f6a74ca80bde39f_b.jpg\"/></figure><p>大数定律主要讨论的是：当样本足够多时，样本的均值变量会依概率收敛于一个确定的值。这也就是我们会认为抛无限次的硬币，正面和反面的次数是相同的（伯努利大数定律）数学原因。【<a href=\"https://zhuanlan.zhihu.com/p/35429478\" class=\"internal\">依概率收敛</a>】</p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35429478", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 4, 
            "title": "依概率收敛", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2c951834b4d8e1c5b9c7e63cf9e674ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2c951834b4d8e1c5b9c7e63cf9e674ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2c951834b4d8e1c5b9c7e63cf9e674ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2c951834b4d8e1c5b9c7e63cf9e674ef_b.jpg\"/></figure><p>考研视频：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1rPWxWFq3ba2y56F9bWmIjA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">大数定律</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-54671c50de07bbaf085e7dda579dadc9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-54671c50de07bbaf085e7dda579dadc9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-54671c50de07bbaf085e7dda579dadc9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-54671c50de07bbaf085e7dda579dadc9_b.jpg\"/></figure><p>依概率收敛的意义是：比如说我们希望求由n个随机样本X构成的均值 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7B1%7D%5E%7Bn%7D%7BX%7D\" alt=\"\\frac{1}{n}\\sum_{1}^{n}{X}\" eeimg=\"1\"/> ，那么这个均值变量就是一个随n变化的随机样本，当n趋于无穷时，就可以知道均值变量依概率收敛到几。就是说当n在无穷大时，虽然均值变量是一个随机样本，但是它为一个具体的数 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"\\alpha\" eeimg=\"1\"/> 的概率却为1。</p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35421448", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 5, 
            "title": "切比雪夫不等式", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-13814be80b95ac02c6b270dd6c095914_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-13814be80b95ac02c6b270dd6c095914_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-13814be80b95ac02c6b270dd6c095914_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-13814be80b95ac02c6b270dd6c095914_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-83fa2d07b39a5d3a3ebcf895f73706d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb\" width=\"747\" data-original=\"https://pic2.zhimg.com/v2-83fa2d07b39a5d3a3ebcf895f73706d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;747&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"747\" data-original=\"https://pic2.zhimg.com/v2-83fa2d07b39a5d3a3ebcf895f73706d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-83fa2d07b39a5d3a3ebcf895f73706d9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1a478b832760518fd6b261fd8cfcf5c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-1a478b832760518fd6b261fd8cfcf5c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-1a478b832760518fd6b261fd8cfcf5c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1a478b832760518fd6b261fd8cfcf5c9_b.jpg\"/></figure><p>考研视频：<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1xMSRJFIIkEmWhf96HRYzxA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">切比雪夫不等式</a></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35419284", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "深度优先遍历与广度优先遍历", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-998cb4907db09f79374c0e1c35018b28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-998cb4907db09f79374c0e1c35018b28_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-998cb4907db09f79374c0e1c35018b28_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-998cb4907db09f79374c0e1c35018b28_b.jpg\"/></figure><p>我的理解 ：</p><ol><li>深度优先遍历：直到世界尽头</li><li>广度优先遍历：如涟漪向外扩散</li></ol><p>注：它们的原则是，如果无路可走，则退回。直到，所有退回的点都被穷尽遍历为止。</p><p><b>深度优先遍历：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e777e9c972a39d5975d5d0ac466b20f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"321\" data-rawheight=\"272\" class=\"content_image\" width=\"321\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;321&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"321\" data-rawheight=\"272\" class=\"content_image lazy\" width=\"321\" data-actualsrc=\"https://pic4.zhimg.com/v2-e777e9c972a39d5975d5d0ac466b20f3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4200e4c70def3baa89847036cbee9abe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"871\" data-rawheight=\"404\" class=\"origin_image zh-lightbox-thumb\" width=\"871\" data-original=\"https://pic3.zhimg.com/v2-4200e4c70def3baa89847036cbee9abe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;871&#39; height=&#39;404&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"871\" data-rawheight=\"404\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"871\" data-original=\"https://pic3.zhimg.com/v2-4200e4c70def3baa89847036cbee9abe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4200e4c70def3baa89847036cbee9abe_b.jpg\"/></figure><p><b>广度优先遍历：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4619d1a224ba937459c8247cb98e0fb7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"240\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-4619d1a224ba937459c8247cb98e0fb7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"240\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-4619d1a224ba937459c8247cb98e0fb7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4619d1a224ba937459c8247cb98e0fb7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2557bc6fd82966064dbee9700c8c2499_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"488\" class=\"origin_image zh-lightbox-thumb\" width=\"723\" data-original=\"https://pic2.zhimg.com/v2-2557bc6fd82966064dbee9700c8c2499_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;723&#39; height=&#39;488&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"488\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"723\" data-original=\"https://pic2.zhimg.com/v2-2557bc6fd82966064dbee9700c8c2499_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2557bc6fd82966064dbee9700c8c2499_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/sbq63683210/article/details/51714369\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">图的广度优先遍历 - CSDN博客</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/OctoptusLian/p/8260173.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浅谈图的深度优先遍历 - Zoctopus·Lian - 博客园</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35418089", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "分层抽样", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-415c3329279041c54d3d4a102cff0718_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-415c3329279041c54d3d4a102cff0718_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-415c3329279041c54d3d4a102cff0718_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-415c3329279041c54d3d4a102cff0718_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e0d2ce322091ec8489a53d107bc7c052_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb\" width=\"677\" data-original=\"https://pic3.zhimg.com/v2-e0d2ce322091ec8489a53d107bc7c052_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;677&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"677\" data-original=\"https://pic3.zhimg.com/v2-e0d2ce322091ec8489a53d107bc7c052_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e0d2ce322091ec8489a53d107bc7c052_b.jpg\"/></figure><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35414928", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "堆排序", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-868a3c7aef8b099b58f8fc930eddcc14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-868a3c7aef8b099b58f8fc930eddcc14_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-868a3c7aef8b099b58f8fc930eddcc14_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-868a3c7aef8b099b58f8fc930eddcc14_b.jpg\"/></figure><a href=\"https://zhuanlan.zhihu.com/p/35114330\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-401eaa003cb8f1e6b0a413d54a20825d_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"800\" class=\"internal\">小白：数据结构-堆与栈</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1ba8fb1c14a7c69d359789fba751762c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"821\" data-original=\"https://pic1.zhimg.com/v2-1ba8fb1c14a7c69d359789fba751762c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;821&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"821\" data-original=\"https://pic1.zhimg.com/v2-1ba8fb1c14a7c69d359789fba751762c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1ba8fb1c14a7c69d359789fba751762c_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/chengxiao/p/6129630.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">图解排序算法(三)之堆排序 - dreamcatcher-cx - 博客园</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35413770", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "希尔排序", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eaa965dd3e65c01683c769f52c8fd7cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-eaa965dd3e65c01683c769f52c8fd7cd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-eaa965dd3e65c01683c769f52c8fd7cd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eaa965dd3e65c01683c769f52c8fd7cd_b.jpg\"/></figure><p>希尔排序是插入排序的升级版，<a href=\"https://zhuanlan.zhihu.com/p/35412090\" class=\"internal\">插入排序，选择排序，冒泡排序</a>。由插入排序我们知道，当数据越有序的时，插入排序的复杂度就越小。那么，我们就可以在插入排序开始前将数组弄的尽可能的有序，这就是希尔排序的思想。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8c6398a031b42fa3879e7a33c313f59d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-8c6398a031b42fa3879e7a33c313f59d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-8c6398a031b42fa3879e7a33c313f59d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8c6398a031b42fa3879e7a33c313f59d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-28bd756087f19c91ec25665fb5d4647c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-28bd756087f19c91ec25665fb5d4647c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-28bd756087f19c91ec25665fb5d4647c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-28bd756087f19c91ec25665fb5d4647c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3dcac7f58004937b32f3705775a6d7b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3dcac7f58004937b32f3705775a6d7b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3dcac7f58004937b32f3705775a6d7b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3dcac7f58004937b32f3705775a6d7b3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0b538c9ea1ce49aee5845b10d7cb65de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic3.zhimg.com/v2-0b538c9ea1ce49aee5845b10d7cb65de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;660&#39; height=&#39;500&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"660\" data-original=\"https://pic3.zhimg.com/v2-0b538c9ea1ce49aee5845b10d7cb65de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0b538c9ea1ce49aee5845b10d7cb65de_b.jpg\"/></figure><p>（一般不会考空间复杂度，会考时间复杂度）</p><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=http%3A//v.youku.com/v_show/id_XMzgzMDA0Nzc2.html%3Fspm%3Da2h0k.8191407.0.0%26from%3Ds1.8-1-1.2%26f%3D21491682\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Java数据结构 第十六讲 希尔排序</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/jianfpeng241241/article/details/51707618\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">希尔排序理解 - CSDN博客</a></p><p>3，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/gane_cheng/article/details/52652705\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">常见排序算法及对应的时间复杂度和空间复杂度 - CSDN博客</a></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35412090", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "插入排序，选择排序，冒泡排序", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_b.jpg\"/></figure><p><b>插入排序：总的思想是向一个有序的数组里面插入一个数，新数组仍然是有序的</b></p><p>插入排序的基本思想是在遍历数组的过程中，假设在序号 i （i&gt;=1）之前的元素即 [0..i-1] 都已经排好序，本趟需要找到 i 对应的元素 x 的正确位置 k ，并且在寻找这个位置 k 的过程中逐个将比较过的元素往后移一位，为元素 x “腾位置”，最后将 k 对应的元素值赋为 x ，一般情况下，插入排序的时间复杂度和空间复杂度分别为O(n2) 和 O(1)。（通俗说法：把数组后面那些没排序的元素换到数组前面已经排好序的部分里对应的位置）</p><p>例如：45 80 48 40 22 78 </p><p>第一轮：45 80 48 40 22 78 ---&gt; 45 80 48 40 22 78 i=1</p><p>第二轮：45 80 48 40 22 78 ---&gt; 45 48 80 40 22 78 i=2</p><p>第三轮：45 48 80 40 22 78 ---&gt; 40 45 48 80 22 78 i=3</p><p>第四轮：40 45 48 80 22 78 ---&gt; 22 40 45 48 80 78 i=4</p><p>第五轮：22 40 45 48 80 78 ---&gt; 22 40 45 48 78 80 i=5</p><p>(红色代表此轮要插入的元素，红色左边是已经排好序的，右边是待排序的)</p><hr/><p><b>选择排序：选择剩下来最大/最小的数与当前数做交换</b></p><p>选择排序的基本思想是遍历数组的过程中，以 i 代表当前需要排序的序号，则需要在剩余的 [i+1,…n-1] 中找出其中的最小值，然后将找到的最小值与 i 指向的值进行交换。因为每一趟确定元素的过程中都会有一个选择最大值/最小值的子流程，所以人们形象地称之为选择排序。选择排序的时间复杂度和空间复杂度分别为O(n2)和O(1)。（通俗说法：每次把剩余数组里最小的选出来放在数组的前面。所以第一次选出来的就是数组里面最小的，第二次选出来的就是数组里面第二小的，依次。。。。。）</p><p>例如：45 80 48 40 22 78 </p><p>第一轮：45 80 48 40 22 78 ---&gt; 22 80 48 40 45 78 i=0</p><p>第二轮：22 80 48 40 45 78 ---&gt; 22 40 48 80 45 78 i=1</p><p>第三轮：22 40 48 80 45 78 ---&gt; 22 40 45 80 48 78 i=2</p><p>第四轮：22 40 45 80 48 78 ---&gt; 22 40 45 48 80 78 i=3</p><p>第五轮：22 40 45 48 80 78 ---&gt; 22 40 45 48 78 80 i=4</p><p>(红色代表此轮需要排序的序号的元素，红色左边是已经排好序的，右边是待排序的)</p><hr/><p><b>冒泡排序：</b>將比較大的數字沉在最下面，较小的浮在上面</p><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/Kevin-mao/p/6013452.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三个简单、基本的排序算法---插入排序、选择排序、冒泡排序 - 毛先森 - 博客园</a></p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35410693", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "桶排序", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b1c2c306373519ffbfdb252fb04d91bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic2.zhimg.com/v2-b1c2c306373519ffbfdb252fb04d91bd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;165&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic2.zhimg.com/v2-b1c2c306373519ffbfdb252fb04d91bd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b1c2c306373519ffbfdb252fb04d91bd_b.jpg\"/></figure><p>时间复杂度：</p><ol><li>最好：O(N)</li><li>最差：O(N^2)</li><li>平均：</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5c77ac667746f06616975730083832c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"29\" class=\"content_image\" width=\"192\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;192&#39; height=&#39;29&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"29\" class=\"content_image lazy\" width=\"192\" data-actualsrc=\"https://pic4.zhimg.com/v2-5c77ac667746f06616975730083832c7_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/ii1245712564/article/details/45869623\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">桶排序_BUCKETSORT - CSDN博客</a></p><p>欢迎关注公众号：huangxiaobai880</p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35405079", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 3, 
            "title": "鞍点上的Hessian矩阵", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_b.jpg\"/></figure><p><b>鞍点:</b>在<u><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25B3%259B%25E5%2587%25BD\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">泛函</a></u>中，既不是极大值点也不是极小值点的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E4%25B8%25B4%25E7%2595%258C%25E7%2582%25B9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">临界点</a></p><p><b>正定相关概念：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4de0b5812351e34a0f0e813298374d49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"811\" data-original=\"https://pic2.zhimg.com/v2-4de0b5812351e34a0f0e813298374d49_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;811&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"811\" data-original=\"https://pic2.zhimg.com/v2-4de0b5812351e34a0f0e813298374d49_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4de0b5812351e34a0f0e813298374d49_b.jpg\"/></figure><p><b>Hessian Matrix:</b>，是一个<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25A4%259A%25E5%2585%2583%25E5%2587%25BD%25E6%2595%25B0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">多元函数</a>的二阶<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2581%258F%25E5%25AF%25BC%25E6%2595%25B0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">偏导数</a>构成的方阵，描述了函数的局部<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259B%25B2%25E7%258E%2587\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">曲率</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f5604a3d04f3bf6dd5c293b88786c143_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"267\" data-rawheight=\"186\" class=\"content_image\" width=\"267\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;267&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"267\" data-rawheight=\"186\" class=\"content_image lazy\" width=\"267\" data-actualsrc=\"https://pic4.zhimg.com/v2-f5604a3d04f3bf6dd5c293b88786c143_b.jpg\"/></figure><p>所以，我认为：鞍点上的Hessian Matrix，什么正定都不是</p><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%259E%258D%25E7%2582%25B9/251306%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">鞍点_百度百科</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%25BB%2591%25E5%25A1%259E%25E7%259F%25A9%25E9%2598%25B5/2248782%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">黑塞矩阵_百度百科</a></p><p>3，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/chduan_10/article/details/78075112\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">怎么理解二阶偏导与凸函数的Hessian矩阵是半正定的？ - CSDN博客</a></p><p>4，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25AD%25A3%25E5%25AE%259A%25E7%259F%25A9%25E9%2598%25B5/11030459\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">正定矩阵_百度百科</a></p><p>5，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%258D%258A%25E6%25AD%25A3%25E5%25AE%259A%25E7%259F%25A9%25E9%2598%25B5/2152711%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">半正定矩阵_百度百科</a></p><p>6，<a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/75179527.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何判定一个矩阵半正定？_百度知道</a></p><p>欢迎关注公众号：huangxiaobai880</p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "柚子酱", 
                    "userLink": "https://www.zhihu.com/people/dc814bc170f6e193e83e8e0b1caf5556", 
                    "content": "最后一句话太搞笑了233", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35400672", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 4, 
            "title": "深度学习-模型的Bias(偏差)与Variance(方差)", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_b.jpg\"/></figure><p>首先，先了解几个概念：</p><ol><li>真实模型：获得所有可能的数据集合，并在这个数据集合上将loss最小化，这样学习到的模型就是真实模型</li><li>Bias： “用所有可能的训练数据集训练出的所有模型的输出的平均值” 与 “真实模型”的输出值之间的差异</li><li>Variance：“不同的训练数据集训练出的模型”的输出值之间的差异</li></ol><p>Bias反映的是模型的拟合能力，Variance反映的是模型的数据扰动所造成的影响。偏差大，说明模型拟合能力差，Variance大说明模型数据扰动所造成的影响大即泛化能力差。</p><ol><li>Bias(偏差)大：增加特征数量，增加网络规模，增加多项式特征和交互特征，减少正则化参数值</li><li>Variance(方差)大：与Bias(偏差)大采取相反的措施，获取更多地训练样本</li></ol><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35386691", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "在线编程题-12N皇后问题（微软）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">Task N queens\n\n\nDescription\n\nThere are N queens in an infinite chessboard. We say two queens may attack each other if they are in the same vertical line, horizontal line or diagonal line even if there are other queens sitting between them.\n\nNow given the positions of the queens, find out how many pairs may attack each other?\n\nInput\n \nThe first line contains an integer N.\n\nThen N lines follow. Each line contains 2 integers Ri and Ci indicating there is a queen in the Ri-th row and Ci-th column.\n\nNo two queens share the same position.\n\nFor 80% of the data, 1 &lt;= N &lt;= 1000\n\nFor 100% of the data, 1 &lt;= N &lt;= 100000, 0 &lt;= Ri, Ci &lt;= 1000000000\n\nOutput\n\nOne integer, the number of pairs may attack each other.\n\nConstraints\nTime limit: 10000ms\nSingle point time limit: 1000ms\nMemory limit: 256MB\n\nExamples\nInput \n5 \n1 1 \n2 2 \n3 3 \n1 3 \n3 1 \nOutput\n10</code></pre></div><p>题意也不难理解：根据N个皇后的位置，求有多少对皇后会相互攻击（[注：同行、同列或者同对角线上的皇后会相互攻击]）。解题思路是分别为水平方向、垂直方向、135度方向和45度方向创建一个字典，每加入一个皇后，则对总数加上四个方向上已有的皇后数。以下代码可供参考（python2下测试可用）：</p><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding: utf-8 -*-\n\ndef N_queens():\n    n = int(input())\n    sum1=0\n    dic1={} # 水平方向\n    dic2={} # 垂直方向\n    dic3={} # 135度方向\n    dic4={} # 45度方向\n    for _ in range(n):\n        a=list(map(int,raw_input().split()))\n        &#39;&#39;&#39;判断水平方向上有多少皇后，sum1加上皇后数，然后这个方向上的dict加1&#39;&#39;&#39;\n        if a[0] in dic1:\n            sum1 += dic1[a[0]]\n            dic1[a[0]] += 1\n        else:\n            dic1[a[0]]=1\n        &#39;&#39;&#39;同上，判断垂直方向上有多少皇后&#39;&#39;&#39;\n        if a[1] in dic2:\n            sum1 += dic2[a[1]]\n            dic2[a[1]] += 1\n        else:\n            dic2[a[1]] = 1\n        &#39;&#39;&#39;同上，判断135度方向上有多少皇后&#39;&#39;&#39;\n        f=a[0]+a[1]\n        if f in dic3:\n            sum1 += dic3[f]\n            dic3[f] += 1\n        else:\n            dic3[f] = 1\n        &#39;&#39;&#39;同上，判断45度方向上有多少皇后&#39;&#39;&#39;\n        g=a[1]-a[0]\n        if g in dic4:\n            sum1 += dic4[g]\n            dic4[g] += 1\n        else:\n            dic4[g] = 1\n    &#39;&#39;&#39;输出总对数&#39;&#39;&#39;\n    print(sum1)\n\nif __name__ == &#39;__main__&#39;:\n    N_queens()</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35382782", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "假设检验", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2179b5ba7e37bfee77897f9d0952b78f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2179b5ba7e37bfee77897f9d0952b78f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2179b5ba7e37bfee77897f9d0952b78f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2179b5ba7e37bfee77897f9d0952b78f_b.jpg\"/></figure><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/14r5wanSJXRGW-PPc1ncmag\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">30.正态下的常用分布</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1PYqzGiqF5Uh70b_Jjx2IjQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">31.点估计</a></p><p>3，<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1qZpS07ypXUgq2QWi0rIirg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">32.评价标准</a></p><p>4，<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1QsGAxTLRB1UEhI4aWZNFCw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">讲义</a></p><p>为了把这个问题讨论清楚了，翻出了当年考研的视频再看一下。</p><p>背景是这样的：你买回一批灯泡，供货商说这批灯泡的平均使用寿命是 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu_%7B0%7D\" alt=\"\\mu_{0}\" eeimg=\"1\"/> 。你想知道供货商的说的是不是真的，你从这批灯泡中抽取了一批样本，测量到样本均值是 <img src=\"https://www.zhihu.com/equation?tex=%5Cbar%7BX%5E%7B%27%7D%7D\" alt=\"\\bar{X^{&#39;}}\" eeimg=\"1\"/> ，方差是 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 。这时你就进行假设检验了：</p><hr/><p>首先，明确几个概念：</p><ol><li>在一次实验中小概率事件是不可能发生的</li><li>小概率事件定义：人为指定概率 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"\\alpha\" eeimg=\"1\"/> ，当事件 <img src=\"https://www.zhihu.com/equation?tex=A\" alt=\"A\" eeimg=\"1\"/> 概率低于 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"\\alpha\" eeimg=\"1\"/> 时，认为事件 <img src=\"https://www.zhihu.com/equation?tex=A\" alt=\"A\" eeimg=\"1\"/> 为小概率事件。（ <img src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"\\alpha\" eeimg=\"1\"/> 的学术名叫<b>显著性水平</b>，通常取 <img src=\"https://www.zhihu.com/equation?tex=0.1%EF%BC%8C0.05%EF%BC%8C0.01\" alt=\"0.1，0.05，0.01\" eeimg=\"1\"/> ）</li><li>一批数据其存在真实的期望 ：<img src=\"https://www.zhihu.com/equation?tex=%5Cmu\" alt=\"\\mu\" eeimg=\"1\"/> </li><li>自然界中样本基本都符合正态分布： <img src=\"https://www.zhihu.com/equation?tex=X%5Csim\" alt=\"X\\sim\" eeimg=\"1\"/> <img src=\"https://www.zhihu.com/equation?tex=N%28%5Cmu%2C%5Csigma%5E%7B2%7D%29\" alt=\"N(\\mu,\\sigma^{2})\" eeimg=\"1\"/> </li><li><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cbar%7BX%7D-%5Cmu%7D%7BS%2F%5Csqrt%7Bn%7D%7D\" alt=\"\\frac{\\bar{X}-\\mu}{S/\\sqrt{n}}\" eeimg=\"1\"/> <img src=\"https://www.zhihu.com/equation?tex=%5Csim\" alt=\"\\sim\" eeimg=\"1\"/> <img src=\"https://www.zhihu.com/equation?tex=t%28n-1%29\" alt=\"t(n-1)\" eeimg=\"1\"/> ，其中 <img src=\"https://www.zhihu.com/equation?tex=%5Cbar%7BX%7D\" alt=\"\\bar{X}\" eeimg=\"1\"/> 是 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 个 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 样本的均值， <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 是方差。 <img src=\"https://www.zhihu.com/equation?tex=t%28n-1%29\" alt=\"t(n-1)\" eeimg=\"1\"/> 是自由度为 <img src=\"https://www.zhihu.com/equation?tex=n-1\" alt=\"n-1\" eeimg=\"1\"/> 的 <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 方分布（它是查表可得的）</li></ol><hr/><p>1，提出假设 <img src=\"https://www.zhihu.com/equation?tex=H_%7B0%7D\" alt=\"H_{0}\" eeimg=\"1\"/> 和其对应的备择假设 <img src=\"https://www.zhihu.com/equation?tex=H_%7B1%7D\" alt=\"H_{1}\" eeimg=\"1\"/> ：</p><p>   ① <img src=\"https://www.zhihu.com/equation?tex=H_%7B0%7D\" alt=\"H_{0}\" eeimg=\"1\"/> : <img src=\"https://www.zhihu.com/equation?tex=%5Cmu%3Du_%7B0%7D\" alt=\"\\mu=u_{0}\" eeimg=\"1\"/> </p><p>   ② <img src=\"https://www.zhihu.com/equation?tex=H_%7B1%7D\" alt=\"H_{1}\" eeimg=\"1\"/> : <img src=\"https://www.zhihu.com/equation?tex=%5Cmu%5Cne\" alt=\"\\mu\\ne\" eeimg=\"1\"/> <img src=\"https://www.zhihu.com/equation?tex=u_%7B0%7D\" alt=\"u_{0}\" eeimg=\"1\"/> </p><p>2， 我们认为 <img src=\"https://www.zhihu.com/equation?tex=H_%7B1%7D\" alt=\"H_{1}\" eeimg=\"1\"/> 是小概率事件 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"\\alpha\" eeimg=\"1\"/> ，则 <img src=\"https://www.zhihu.com/equation?tex=H_%7B0%7D\" alt=\"H_{0}\" eeimg=\"1\"/> 发生的概率是 <img src=\"https://www.zhihu.com/equation?tex=1-%5Calpha\" alt=\"1-\\alpha\" eeimg=\"1\"/> 则：</p><p>  ③ <img src=\"https://www.zhihu.com/equation?tex=P%28%5Cfrac%7B%5Cbar%7BX%7D-%5Cmu_%7B0%7D%7D%7BS%2F%5Csqrt%7Bn%7D%7D%3Ct_%7B%5Calpha%2F2%7D%28n-1%29%29%3D1-%5Calpha\" alt=\"P(\\frac{\\bar{X}-\\mu_{0}}{S/\\sqrt{n}}&lt;t_{\\alpha/2}(n-1))=1-\\alpha\" eeimg=\"1\"/> </p><p>进而得：</p><p>  ④ <img src=\"https://www.zhihu.com/equation?tex=P%28%5Cfrac%7B%5Cbar%7BX%7D-%5Cmu_%7B0%7D%7D%7BS%2F%5Csqrt%7Bn%7D%7D%7B%5Cgeq%7Dt_%7B%5Calpha%2F2%7D%28n-1%29%29%3D%5Calpha\" alt=\"P(\\frac{\\bar{X}-\\mu_{0}}{S/\\sqrt{n}}{\\geq}t_{\\alpha/2}(n-1))=\\alpha\" eeimg=\"1\"/> </p><p>3，由④可以解得一个 <img src=\"https://www.zhihu.com/equation?tex=%5Cbar%7BX%7D\" alt=\"\\bar{X}\" eeimg=\"1\"/> 的范围，若 <img src=\"https://www.zhihu.com/equation?tex=%5Cbar%7BX%5E%7B%27%7D%7D\" alt=\"\\bar{X^{&#39;}}\" eeimg=\"1\"/> 落在了这个范围内，则拒绝原假设 <img src=\"https://www.zhihu.com/equation?tex=H_%7B0%7D\" alt=\"H_{0}\" eeimg=\"1\"/> （因为小概率事件发生了，这就说明原假设有问题）。否则，接受原假设。</p><hr/><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35363836", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 2, 
            "title": "在线编程题-11路径最大得分问题（微软）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">Task Find the maximum score\n\n\nDescription\n\nArya is trying to solve a math problem. In this problem, she has a tree with N nodes, indexed from 1 to N, and each node of the tree has some given value. She wants to trace a path from the root to one of the leaves, such that she receives the maximum score for that path. The score of a path is defined as the product of node values in the path.\n\nWrite an algorithm to help Arya find the maximum score.\n\nInput\n \nThe input to the function/method consists of four arguments:\n\nnumNodes, an integer representing the number of nodes in the tree.\n\nrootNode, an integer representing the index of the root node in the tree.\n\nvalues, a list of integers representing the value of each node in the tree.\n\nedges, a list of integers wherein each element of the list contains a pair representing the edges of the tree.\n\nOutput\n\nReturn an integer representing the maximum possible score.\n\nConstraints\n1 &lt;= numNodes &lt;= 1000\n1 &lt;= rootNode &lt;= 1000\n-1000 &lt;= values[i] &lt;= 1000\n0 &lt;= i &lt;numNodes\n\nExamples\nInput \nnumNodes = 4\nrootNode = 1\nvalues = [-1, 2, 3, 2]\nedges = [[1, 2], [1, 3], [3, 4]]\n\t1(-1)\n       / \\\n    2(2) 3(3)\n\t /\n\t4(2)\nOutput\n-2</code></pre></div><p>题意：根据树的结构及其N个节点的取值，求从根节点到叶子节点的所有路径中计算路径的最大得分（[注：路径的得分定义为路径经过的所有节点值的乘积]）。理一下解题思路：从树的根节点开始，递归地将父节点值乘入其子节点来更新树中节点的取值，最终在叶子结点的取值中找到最大的值，即为路径的最大得分。关于递归，可参考本专栏的另一篇文章：<a href=\"https://zhuanlan.zhihu.com/p/35171615\" class=\"internal\">递归</a>。以下代码可供参考（python2下测试可用）：</p><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding: utf-8 -*-\n\ndef calc_score(flags, Nodes, values, p2ps):\n\tSubNodes = []\n\tp2ps_rm = []\n\tfor Node in Nodes: # 遍历父节点\n\t\tfor p2p in p2ps: # 遍历边列表\n\t\t\tif Node in p2p: # 若当前父节点为当前边的一个顶点，则将该边的另一个顶点加入到下一级的父节点列表，更新节点值，并在边列表中删除该边\n\t\t\t\tSubNode = p2p[1 - p2p.index(Node)]\n\t\t\t\tSubNodes.append(SubNode)\n\t\t\t\tflags[Node - 1] = 0\n\t\t\t\tvalues[SubNode - 1] *= values[Node - 1]\n\t\t\t\tp2ps_rm.append(p2p)\n\t\n\tfor p2p_rm in p2ps_rm:\n\t\tp2ps.remove(p2p_rm)\n\n\tif len(p2ps) == 0: # 若边列表删除完毕，则返回叶子节点的值；否则递归更新树节点的值\n\t\treturn [values[idx] for idx in range(len(flags)) if flags[idx] == 1]\n\telse:\n\t\treturn calc_score(flags, SubNodes, values, p2ps)\n\nnumNodes = int(input()) # 节点数\nflags = [1] * numNodes # 叶子节点标志\n\nrootNode = int(input()) # 根节点编号\nassert rootNode &lt;= numNodes and rootNode &gt;= 1\n\nvalues = list(map(int, raw_input().split())) # 节点值列表\nassert len(values) == numNodes\n\nedges = list(map(int, raw_input().split()))\nassert len(edges) % 2 == 0\n\np2ps = []\nfor edge_count in range(len(edges) / 2): # 边列表\n\tp2ps.append(sorted([edges[2 * edge_count], edges[2 * edge_count + 1]]))\n\tassert edges[2 * edge_count] &lt;= numNodes and edges[2 * edge_count] &gt;= 1\n\tassert edges[2 * edge_count + 1] &lt;= numNodes and edges[2 * edge_count + 1] &gt;= 1\n\tassert edges[2 * edge_count] != edges[2 * edge_count + 1]\n\nfor p2p in p2ps:\n\tassert p2ps.count(p2p) == 1\n\n# 得到所有路径的得分并找出最大值\nresult_list = calc_score(flags, [rootNode], values, p2ps)\nassert len(result_list) &gt;= 1\nmax_value = result_list[0]\nif len(result_list) &gt;= 2:\n\tfor idx in range(len(result_list) - 1):\n\t\tif max_value &lt; result_list[idx + 1]:\n\t\t\tmax_value = result_list[idx + 1]\n\nprint max_value</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35359130", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "在线编程题-10最大字体问题（微软）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0d0239b8bb5c05bdf280b232ac1c825e_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">Task Font Size\n\n\nDescription\n\nSteven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.\n\nSteven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven’s phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)\n\nSo here’s the question, if Steven wants to control the number of pages no more than P, what’s the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.\n\n\nInput\n\nInput may contain multiple test cases.\n\nThe first line is an integer TASKS, representing the number of test cases.\n\nFor each test case, the first line contains four integers N, P, W and H, as described above.\n\nThe second line contains N integers a1, a2, … aN, indicating the number of characters in each paragraph.\n\nFor all test cases,\n\n1 &lt;= N &lt;= 103,\n\n1 &lt;= W, H, ai &lt;= 103,\n\n1 &lt;= P &lt;= 106,\n\nThere is always a way to control the number of pages no more than P.\n\n\nOutput\n\nFor each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.\n\nConstraints\nTime limit: 10000ms\nSingle point time limit: 1000ms\nMemory limit: 256MB\n\nExamples\nInput \n2\n1 10 4 3\n10\n2 10 4 3\n10 10\nOutput\n3\n2</code></pre></div><p>题意不难理解：在限定最大页数的条件下，根据手机屏幕的宽高和每个段落的字数，求能够设置的最大字体（[注：每个段落必须以新的一行开始且段落之间没有空行]）。解题思路是初始化最大字体（不满足最大页数的条件），然后逐渐减小字体大小，直到找到满足最大页数条件的字体大小为止。以下代码可供参考（python2下测试可用）：</p><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding: utf-8 -*-\n\nimport math\n\nncase = int(input()) # 测试用例数\nAns_list = []\nfor idx in range(ncase):\n\tN, P, W, H = map(int, raw_input().split()) # 段落数、最大页数、手机屏幕的宽和高\n\ts = raw_input().split() # 每个段落字数\n\tassert len(s) == N\n\t\n\tNw = 0\n\tfor element in s: # 求总字数\n\t\tNw += int(element)\n\n\tAns = int(math.ceil(math.sqrt(P * W * H / Nw))) # 初始化最大字体\n\tc_rows = 1\n\trows = -1\n\twhile c_rows &gt; rows: # 逐渐减小字体大小直到找到满足最大页数条件的字体大小为止\n\t\tAns -= 1\n\t\tassert Ans &gt;= 1\n\t\tcols = W / Ans\n\t\trows = H / Ans * P\n\t\tc_rows = 0\n\t\tfor element in s:\n\t\t\tc_rows += math.ceil(int(element) / cols)\n\t\t\n\tAns_list.append(Ans) # 添加当前测试用例的结果\n\nfor Ans in Ans_list: # 遍历测试用例的结果并逐行输出\n\tprint Ans</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35333387", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-9遍历所有可能的组合", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c8e86bdedf24c2e7c436f4ebd444339a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-c8e86bdedf24c2e7c436f4ebd444339a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-c8e86bdedf24c2e7c436f4ebd444339a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c8e86bdedf24c2e7c436f4ebd444339a_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">list_t = [1,2,3,4,5,6]\ntemp = []\nfor i,m in enumerate(list_t):\n    for j,n in enumerate(list_t[i+1:]):\n        for k,p in enumerate(list_t[i+j+2:]):\n            temp.append([m,n,p])\nprint(temp)\nprint(len(temp))</code></pre></div><ol><li>多少个，就是多少for</li><li>每一层开始位置是上面层的和</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">import itertools\ntemp = list(itertools.combinations(list_t,3))\nprint(temp)\nprint(len(temp))</code></pre></div><p>利用包</p><div class=\"highlight\"><pre><code class=\"language-text\">import itertools\nans = []\nfor i in range(1, len(list_t)):\n    ans += list(itertools.combinations(list_t,i))\nprint(ans)</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35329897", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "git中常用命令", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f9171f43cce242db7fd3018806dea077_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-f9171f43cce242db7fd3018806dea077_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-f9171f43cce242db7fd3018806dea077_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f9171f43cce242db7fd3018806dea077_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9cec6e086372f78c08c91ae6ccd1e7e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb\" width=\"916\" data-original=\"https://pic3.zhimg.com/v2-9cec6e086372f78c08c91ae6ccd1e7e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;916&#39; height=&#39;447&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"916\" data-original=\"https://pic3.zhimg.com/v2-9cec6e086372f78c08c91ae6ccd1e7e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9cec6e086372f78c08c91ae6ccd1e7e2_b.jpg\"/></figure><p>git中常用命令：</p><ol><li>fetch/clone</li><li>push</li><li>pull</li><li>add</li><li>checkout</li><li>commit</li></ol><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/chenwolong/p/GIT.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-3bc9d5f2c49a713c776e69676d7d56c5_180x120.jpg\" data-image-width=\"1172\" data-image-height=\"340\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GIT 常用命令 - 天才卧龙 - 博客园</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35329758", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "重载乘法运算符的函数原型声明", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5752e86462b7e0ba2e428e77eaf311fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"699\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb\" width=\"699\" data-original=\"https://pic3.zhimg.com/v2-5752e86462b7e0ba2e428e77eaf311fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;699&#39; height=&#39;524&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"699\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"699\" data-original=\"https://pic3.zhimg.com/v2-5752e86462b7e0ba2e428e77eaf311fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5752e86462b7e0ba2e428e77eaf311fe_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//www.nowcoder.com/questionTerminal/dcb7cdf4d47747faa3be0d14d3b886e2\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-5c127c0af2096b46b17a7da17a7ce9a7_ipico.jpg\" data-image-width=\"150\" data-image-height=\"151\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下面重载乘法运算符的函数原型声明中正确的是:_牛客网</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35329582", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "c语言动态开辟内存", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-12fb68a956de8f2d705b2ddbce795952_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0667d267cf1bd918277b8269082b3099_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"102\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic2.zhimg.com/v2-0667d267cf1bd918277b8269082b3099_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;102&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"102\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic2.zhimg.com/v2-0667d267cf1bd918277b8269082b3099_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0667d267cf1bd918277b8269082b3099_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/u012102997/article/details/24363293\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">c语言动态开辟内存 - CSDN博客</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35327550", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "4种梯度下降中不需要求逆是哪一个", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_b.jpg\"/></figure><p>L-BFGS:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7988237e526a62a2a891bc18209d7b1f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic4.zhimg.com/v2-7988237e526a62a2a891bc18209d7b1f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;612&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"612\" data-original=\"https://pic4.zhimg.com/v2-7988237e526a62a2a891bc18209d7b1f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7988237e526a62a2a891bc18209d7b1f_b.jpg\"/></figure><p>共轭梯度法:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-787f99a027b2734401bd5f054cb5a902_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"53\" class=\"origin_image zh-lightbox-thumb\" width=\"802\" data-original=\"https://pic3.zhimg.com/v2-787f99a027b2734401bd5f054cb5a902_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;802&#39; height=&#39;53&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"53\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"802\" data-original=\"https://pic3.zhimg.com/v2-787f99a027b2734401bd5f054cb5a902_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-787f99a027b2734401bd5f054cb5a902_b.jpg\"/></figure><p>高斯--牛顿迭代法:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-773eb97776a38a816f27e174be471c3d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"66\" class=\"content_image\" width=\"342\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;342&#39; height=&#39;66&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"66\" class=\"content_image lazy\" width=\"342\" data-actualsrc=\"https://pic2.zhimg.com/v2-773eb97776a38a816f27e174be471c3d_b.jpg\"/></figure><p>随机梯度下降：</p><p><b>？感觉不需要求逆矩阵</b></p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2585%25B1%25E8%25BD%25AD%25E6%25A2%25AF%25E5%25BA%25A6%25E6%25B3%2595/7139204%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">共轭梯度法_百度百科</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/piaoxuezhong/article/details/60135153\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">梯度下降法，牛顿法，高斯-牛顿迭代法，附代码实现 - CSDN博客</a></p><p>3，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/google19890102/article/details/46389869\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优化算法--拟牛顿法之L-BFGS算法 - CSDN博客</a></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35327186", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "python的dot,sqrt,abs,power", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e6081a59751900ba6f365f90f90a470e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f2c7424c41ab6dbec97503c5a7d872da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"455\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb\" width=\"455\" data-original=\"https://pic3.zhimg.com/v2-f2c7424c41ab6dbec97503c5a7d872da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;455&#39; height=&#39;270&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"455\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"455\" data-original=\"https://pic3.zhimg.com/v2-f2c7424c41ab6dbec97503c5a7d872da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f2c7424c41ab6dbec97503c5a7d872da_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3f257c4f8777781697759f3261ddc05e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"556\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb\" width=\"556\" data-original=\"https://pic3.zhimg.com/v2-3f257c4f8777781697759f3261ddc05e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;556&#39; height=&#39;571&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"556\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"556\" data-original=\"https://pic3.zhimg.com/v2-3f257c4f8777781697759f3261ddc05e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3f257c4f8777781697759f3261ddc05e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-daa8b7c264c3416e1efe5bed1088287a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"491\" class=\"content_image\" width=\"375\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;375&#39; height=&#39;491&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"491\" class=\"content_image lazy\" width=\"375\" data-actualsrc=\"https://pic3.zhimg.com/v2-daa8b7c264c3416e1efe5bed1088287a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-96c88ab55af50a7aa8318efe386c2850_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb\" width=\"621\" data-original=\"https://pic1.zhimg.com/v2-96c88ab55af50a7aa8318efe386c2850_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;621&#39; height=&#39;467&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"621\" data-original=\"https://pic1.zhimg.com/v2-96c88ab55af50a7aa8318efe386c2850_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-96c88ab55af50a7aa8318efe386c2850_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_28618765/article/details/78083179\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python numpy函数：dot（）</a></p><p>2，<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/python/func-number-sqrt.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python sqrt() 函数</a></p><p>3，<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/python/func-number-abs.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python abs() 函数 | 菜鸟教程</a></p><p>4，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/lql0716/article/details/52910812\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">python之numpy.power()数组元素求n次方 - CSDN博客</a></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35325758", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "numpy的sort,sorted,argpartition", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-be33afa5a3f1a05e93ed99003f2dd868_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-be33afa5a3f1a05e93ed99003f2dd868_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-be33afa5a3f1a05e93ed99003f2dd868_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-be33afa5a3f1a05e93ed99003f2dd868_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-17449f356fb0c6de7ca27c670bb3df27_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb\" width=\"679\" data-original=\"https://pic4.zhimg.com/v2-17449f356fb0c6de7ca27c670bb3df27_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;679&#39; height=&#39;187&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"679\" data-original=\"https://pic4.zhimg.com/v2-17449f356fb0c6de7ca27c670bb3df27_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-17449f356fb0c6de7ca27c670bb3df27_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-89278cad294cc10444b3038217b7757f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"254\" class=\"content_image\" width=\"338\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;338&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"254\" class=\"content_image lazy\" width=\"338\" data-actualsrc=\"https://pic4.zhimg.com/v2-89278cad294cc10444b3038217b7757f_b.jpg\"/></figure><p>注：默认是升序</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5063a715ee838a259b371baba8cddec9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic2.zhimg.com/v2-5063a715ee838a259b371baba8cddec9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;386&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic2.zhimg.com/v2-5063a715ee838a259b371baba8cddec9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5063a715ee838a259b371baba8cddec9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bd3e7c6874a05b6a44e3f0ea5880f4f2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic3.zhimg.com/v2-bd3e7c6874a05b6a44e3f0ea5880f4f2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;814&#39; height=&#39;320&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"814\" data-original=\"https://pic3.zhimg.com/v2-bd3e7c6874a05b6a44e3f0ea5880f4f2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bd3e7c6874a05b6a44e3f0ea5880f4f2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-81f1a3b6474136cc0296ae4ee21dc9d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"327\" data-rawheight=\"133\" class=\"content_image\" width=\"327\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;327&#39; height=&#39;133&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"327\" data-rawheight=\"133\" class=\"content_image lazy\" width=\"327\" data-actualsrc=\"https://pic1.zhimg.com/v2-81f1a3b6474136cc0296ae4ee21dc9d4_b.jpg\"/></figure><p>注：numpy.argpartition：是将第k大的数字，放在第k个位置。类似于快排找第k大的数，堆其它数不做排序，比较省计算。</p><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argpartition.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">numpy.argpartition - NumPy v1.13 Manual</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/weixin_37722024/article/details/64440133\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python库Numpy的argpartition函数浅析 - CSDN博客</a></p><p>3，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/u013731339/article/details/41449177\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python中排序常用到的sort 、sorted和argsort函数</a></p><p>4，<a href=\"https://zhuanlan.zhihu.com/p/35037731\" class=\"internal\">快速排序算法</a></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35325642", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "cache指令与cache数据", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ed67a7ae217df67a39e12cf913c8ee24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-ed67a7ae217df67a39e12cf913c8ee24_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-ed67a7ae217df67a39e12cf913c8ee24_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ed67a7ae217df67a39e12cf913c8ee24_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a6616fa067d1454d5275346d7a9de6e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"468\" data-original=\"https://pic4.zhimg.com/v2-a6616fa067d1454d5275346d7a9de6e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;468&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"468\" data-original=\"https://pic4.zhimg.com/v2-a6616fa067d1454d5275346d7a9de6e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a6616fa067d1454d5275346d7a9de6e7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-738db92caed7a98e89ba19b09dbef443_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb\" width=\"611\" data-original=\"https://pic4.zhimg.com/v2-738db92caed7a98e89ba19b09dbef443_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;611&#39; height=&#39;52&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"611\" data-original=\"https://pic4.zhimg.com/v2-738db92caed7a98e89ba19b09dbef443_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-738db92caed7a98e89ba19b09dbef443_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35325390", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "py与pyc文件", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-22769be1b4f8c6a937a6cb0d252b1331_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-22769be1b4f8c6a937a6cb0d252b1331_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-22769be1b4f8c6a937a6cb0d252b1331_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-22769be1b4f8c6a937a6cb0d252b1331_b.jpg\"/></figure><ol><li>将.py形式的程序编译成中间式文件（byte-compiled）的.pyc文件，这么做的目的就是为了加快下次执行文件的速度。</li><li>运行python文件的时候，就会自动首先查看是否具有.pyc文件，如果有的话，而且.py文件的修改时间和.pyc的修改时间一样，就会读取.pyc文件，否则，Python就会读原来的.py文件。</li></ol><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/simongeek/article/details/22919877\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python编程时.py与.pyc文件的介绍（区别） - CSDN博客</a><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/wangzhaotongalex/article/details/49779077\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pyc和py文件的区别 - CSDN博客</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35325136", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "C语言五个预定义的宏名", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1ad66f4922c1b78674dc42835e7c50d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-1ad66f4922c1b78674dc42835e7c50d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-1ad66f4922c1b78674dc42835e7c50d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1ad66f4922c1b78674dc42835e7c50d4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5f9c5b4704b63864e5c49d09d033ae71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"138\" data-rawheight=\"48\" class=\"content_image\" width=\"138\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;138&#39; height=&#39;48&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"138\" data-rawheight=\"48\" class=\"content_image lazy\" width=\"138\" data-actualsrc=\"https://pic2.zhimg.com/v2-5f9c5b4704b63864e5c49d09d033ae71_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3aea58f60df3e05551d870e0b72e3c46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"146\" data-rawheight=\"194\" class=\"content_image\" width=\"146\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;146&#39; height=&#39;194&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"146\" data-rawheight=\"194\" class=\"content_image lazy\" width=\"146\" data-actualsrc=\"https://pic3.zhimg.com/v2-3aea58f60df3e05551d870e0b72e3c46_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/480690362.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在C语言中 宏定义是什么？_百度知道</a><a href=\"https://link.zhihu.com/?target=https%3A//wenku.baidu.com/view/0e8974df9f3143323968011ca300a6c30d22f173.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C语言宏操作大全_百度文库</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35302466", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "机器学习中的分类算法与激活函数的作用", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\"/></figure><ol><li>Boosting:提高弱分类<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25AE%2597%25E6%25B3%2595\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法</a>准确度的方法【<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/Boosting/1403912%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Boosting_百度百科</a>】</li><li>决策树：是一种基本的分类与回归方法【<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/HerosOfEarth/article/details/52347820\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">决策树（上）</a>】</li><li>SVM:指的是<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2594%25AF%25E6%258C%2581%25E5%2590%2591%25E9%2587%258F%25E6%259C%25BA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">支持向量机</a>，是常见的一种判别方法【<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/svm/4385807%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">svm_百度百科</a>】</li></ol><p>注：PCA不是分类算法，它只是用来降维的【<a href=\"https://link.zhihu.com/?target=http%3A//blog.jobbole.com/109015/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">主成分分析（PCA）原理详解 </a>】</p><hr/><p>因为线性模型的表达能力不够，引入激活函数是为了添加非线性因素【<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/bojackhosreman/article/details/69372087\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">激活函数的作用</a>】</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35301564", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "正态分布", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61ff2976cb5a6f409cd381501418101d_b.jpg\"/></figure><ol><li>正态分布（Normal distribution），也称“常态分布”，又名<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%25AB%2598%25E6%2596%25AF%25E5%2588%2586%25E5%25B8%2583\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高斯分布</a>（Gaussian distribution）</li><li>正态曲线呈钟型，两头低，中间高，左右对称因其曲线呈钟形，因此人们又经常称之为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2592%259F%25E5%25BD%25A2%25E6%259B%25B2%25E7%25BA%25BF\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">钟形曲线</a>。</li><li>若<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%259A%258F%25E6%259C%25BA%25E5%258F%2598%25E9%2587%258F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">随机变量</a>X服从一个<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25B0%25E5%25AD%25A6%25E6%259C%259F%25E6%259C%259B\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数学期望</a>为μ、<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2596%25B9%25E5%25B7%25AE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">方差</a>为σ^2的正态分布，记为N(μ，σ^2)。其<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25A6%2582%25E7%258E%2587%25E5%25AF%2586%25E5%25BA%25A6%25E5%2587%25BD%25E6%2595%25B0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">概率密度函数</a>为正态分布的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259C%259F%25E6%259C%259B%25E5%2580%25BC\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">期望值</a>μ决定了其位置，其<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25A0%2587%25E5%2587%2586%25E5%25B7%25AE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">标准差</a>σ决定了分布的幅度。当μ = 0,σ = 1时的正态分布是<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25A0%2587%25E5%2587%2586%25E6%25AD%25A3%25E6%2580%2581%25E5%2588%2586%25E5%25B8%2583\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">标准正态分布</a>。</li></ol><hr/><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b6a0e333134ee3ba810d3cec2bc8c7ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"36\" class=\"content_image\" width=\"245\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;245&#39; height=&#39;36&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"36\" class=\"content_image lazy\" width=\"245\" data-actualsrc=\"https://pic2.zhimg.com/v2-b6a0e333134ee3ba810d3cec2bc8c7ad_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b3d0772ce74316af78644d0b1275830d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic2.zhimg.com/v2-b3d0772ce74316af78644d0b1275830d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic2.zhimg.com/v2-b3d0772ce74316af78644d0b1275830d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b3d0772ce74316af78644d0b1275830d_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35254176", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "抽样分布", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2de1d2dcaf8266275b53d9896b1272cb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2de1d2dcaf8266275b53d9896b1272cb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-2de1d2dcaf8266275b53d9896b1272cb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2de1d2dcaf8266275b53d9896b1272cb_b.jpg\"/></figure><p><b>抽样分布：</b>样本估计量的分布</p><p>注：(举列)</p><ol><li>有一批样本A，其共有样本：N</li><li>从样本中抽取a，其中的样本：n</li><li>共抽取k次，得到抽取样本： <img src=\"https://www.zhihu.com/equation?tex=a_%7B1%7D%2Ca_%7B2%7D%2Ca_%7B3%7D......a_%7Bk%7D\" alt=\"a_{1},a_{2},a_{3}......a_{k}\" eeimg=\"1\"/> </li><li>那么k个抽取样本可以得到k个均值： <img src=\"https://www.zhihu.com/equation?tex=e_%7B1%7D%2Ce_%7B2%7D%2Ce_%7B3%7D......e_%7Bk%7D\" alt=\"e_{1},e_{2},e_{3}......e_{k}\" eeimg=\"1\"/> </li><li>那么： 样本平均数（ <img src=\"https://www.zhihu.com/equation?tex=e_%7B1%7D%2Ce_%7B2%7D%2Ce_%7B3%7D......e_%7Bk%7D\" alt=\"e_{1},e_{2},e_{3}......e_{k}\" eeimg=\"1\"/> ）会服从的分布就是抽样分布</li></ol><hr/><p>在重复抽样条件下，样本均值的方差为总体方差的1/n，即：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b0ba9a40f54b34dcba7cb78c7bffdde0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"204\" data-rawheight=\"48\" class=\"content_image\" width=\"204\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;204&#39; height=&#39;48&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"204\" data-rawheight=\"48\" class=\"content_image lazy\" width=\"204\" data-actualsrc=\"https://pic1.zhimg.com/v2-b0ba9a40f54b34dcba7cb78c7bffdde0_b.jpg\"/></figure><p>在不重复抽样条件下，样本均值的方差为：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-16623129d28449e2b72aa29bc648fba3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"191\" data-rawheight=\"58\" class=\"content_image\" width=\"191\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;191&#39; height=&#39;58&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"191\" data-rawheight=\"58\" class=\"content_image lazy\" width=\"191\" data-actualsrc=\"https://pic4.zhimg.com/v2-16623129d28449e2b72aa29bc648fba3_b.jpg\"/></figure><hr/><p><b>样本均值抽样分布的形式与原有总体的分布和样本容量n的大小有关</b>：</p><ol><li>如果原有总体是正态分布，那么，无论样本容量的大小，样本均值的抽样分布都服从正态分布。</li><li>如果原有总体的分布是非正态分布，就要看样本容量的大小。</li></ol><ul><li>随着样本容量n的增大(通常要求n≥30)，不论原来的总体是否服从正态分布，样本均值的抽样分布都将趋于正态分布，即统计上著名的中心极限定理。</li></ul><hr/><p><b>从总体中随机抽取容量为n的一切可能个样本的平均数之平均数，等于总体的平均数</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b0627e31d5eedeed99eb7b91d7292226_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-b0627e31d5eedeed99eb7b91d7292226_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-b0627e31d5eedeed99eb7b91d7292226_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b0627e31d5eedeed99eb7b91d7292226_b.jpg\"/></figure><p>注：题目说的是标准差</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "寅时猛抽风", 
                    "userLink": "https://www.zhihu.com/people/033e59d0e6be5e76da1e8b59c97c9a72", 
                    "content": "<p>为什么抽样分布这么重要的概念关注的人会这么少，好文章也这么少。抽样分布要是没有完全理解的话，感觉后面所有的东西都搞不下去</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35252059", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "求极值", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-26c3304c18461e5ffeb942e49904ad5f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-26c3304c18461e5ffeb942e49904ad5f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-26c3304c18461e5ffeb942e49904ad5f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-26c3304c18461e5ffeb942e49904ad5f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f3e43ba9130afc40239c2f64865afdd0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic1.zhimg.com/v2-f3e43ba9130afc40239c2f64865afdd0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;508&#39; height=&#39;399&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"508\" data-original=\"https://pic1.zhimg.com/v2-f3e43ba9130afc40239c2f64865afdd0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f3e43ba9130afc40239c2f64865afdd0_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a0b02d5cd09d6de0b7c8e3ddce6257d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-a0b02d5cd09d6de0b7c8e3ddce6257d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic3.zhimg.com/v2-a0b02d5cd09d6de0b7c8e3ddce6257d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a0b02d5cd09d6de0b7c8e3ddce6257d6_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2da40a1b5aa09f6a1648d56ccb840529_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"311\" data-rawheight=\"404\" class=\"content_image\" width=\"311\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;311&#39; height=&#39;404&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"311\" data-rawheight=\"404\" class=\"content_image lazy\" width=\"311\" data-actualsrc=\"https://pic2.zhimg.com/v2-2da40a1b5aa09f6a1648d56ccb840529_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35250419", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "散列存储", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3c0d8b2d5986341197a9029b134e369e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-3c0d8b2d5986341197a9029b134e369e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-3c0d8b2d5986341197a9029b134e369e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3c0d8b2d5986341197a9029b134e369e_b.jpg\"/></figure><p><b>散列存储：</b>又称<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/hash/390310\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">hash</a>存储，是一种力图将<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25B0%25E6%258D%25AE%25E5%2585%2583%25E7%25B4%25A0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据元素</a>的存储位置与<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2585%25B3%25E9%2594%25AE%25E7%25A0%2581/9663150\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关键码</a>之间建立确定对应关系的查找技术。</p><p><b>关键码：</b>在数据结构中，指的是数据元素中能起标识作用的数据项，例如，书目信息中的登陆号和书名等。</p><p>注：</p><ol><li>一个数据其可能有n多个字节，我们取其中最能代表它的特征作为其关键码</li><li>由于散列存储是内容与位置对应，所以根据内容就很容易得到其位置</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dea7efac1a26507e64f642adae2599ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"651\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb\" width=\"651\" data-original=\"https://pic3.zhimg.com/v2-dea7efac1a26507e64f642adae2599ba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;651&#39; height=&#39;378&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"651\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"651\" data-original=\"https://pic3.zhimg.com/v2-dea7efac1a26507e64f642adae2599ba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dea7efac1a26507e64f642adae2599ba_b.jpg\"/></figure><p>注：好像笔试题就会考到这个难度，只要求你知道有这个</p><p>参考：</p><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25A3%25E5%2588%2597%25E5%25AD%2598%25E5%2582%25A8%25E6%2596%25B9%25E6%25B3%2595/9663463%3Ffr%3Daladdin\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">散列存储方法_百度百科</a><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2585%25B3%25E9%2594%25AE%25E7%25A0%2581/9663150\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关键码_百度百科</a><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/wwwdc1012/article/details/77926956\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">哈希表 相关笔试题 - CSDN博客</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c9f37175266125553e1de6e271c19e30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"683\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb\" width=\"683\" data-original=\"https://pic1.zhimg.com/v2-c9f37175266125553e1de6e271c19e30_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;683&#39; height=&#39;330&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"683\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"683\" data-original=\"https://pic1.zhimg.com/v2-c9f37175266125553e1de6e271c19e30_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c9f37175266125553e1de6e271c19e30_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35217094", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-7链表", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-82dc96af6945e7b73fb81c79b6763944_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-82dc96af6945e7b73fb81c79b6763944_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-82dc96af6945e7b73fb81c79b6763944_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-82dc96af6945e7b73fb81c79b6763944_b.jpg\"/></figure><a href=\"https://zhuanlan.zhihu.com/p/35041700\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-4cbb3b9d229c799701d8dec8aba7cd0d_180x120.jpg\" data-image-width=\"1024\" data-image-height=\"640\" class=\"internal\">小白：有序数组与链表简单介绍</a><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution:\n    # 返回从尾部到头部的列表值序列，例如[1,2,3]\n    def printListFromTailToHead(self, listNode):\n        # write code here\n        l = []\n        head = listNode\n        while head:\n            l.insert(0, head.val)\n            head = head.next\n        return l</code></pre></div><p>注：链表由两个属性，一个是值，一个是下一个数这里head.next就是下一个数。新插入的数总是在最前面，所以它就做到了反向遍历。当遇到最后一个None时就停止。</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35215001", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-6找数", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-00301ee3be04a87cbd93b856b1289afb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-00301ee3be04a87cbd93b856b1289afb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-00301ee3be04a87cbd93b856b1289afb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-00301ee3be04a87cbd93b856b1289afb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ae9fac60fe8882e8aafc3a62e92d4230_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"140\" class=\"content_image\" width=\"390\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;390&#39; height=&#39;140&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"140\" class=\"content_image lazy\" width=\"390\" data-actualsrc=\"https://pic1.zhimg.com/v2-ae9fac60fe8882e8aafc3a62e92d4230_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding:utf-8 -*-\nclass Solution:\n    # array 二维列表\n    def Find(self, target, array):\n        # write code here\n        a = list()\n        b = False\n        for i in range(len(array)):\n            for j in range(len(array[i])):\n                a.append(array[i][j])\n        if target in a:\n            b = True\n        return b</code></pre></div><p>这就显示了python的强大了，完全不需要逻辑，哈哈哈！</p><p><b>但需要注意的，因为python的list数据的存储非常的随意，这就要求list是没有行列的说法，它唯一的属性就是len，告诉你list里面存在多少个元素，让后再遍历每一个元素。</b></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35212709", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-5斐波那契数列（2）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e067b0da34bdb8d079cfae3361992bcb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-e067b0da34bdb8d079cfae3361992bcb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-e067b0da34bdb8d079cfae3361992bcb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e067b0da34bdb8d079cfae3361992bcb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a4707564b3ef6f604e03e6c8e83e9c3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"391\" data-rawheight=\"110\" class=\"content_image\" width=\"391\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;391&#39; height=&#39;110&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"391\" data-rawheight=\"110\" class=\"content_image lazy\" width=\"391\" data-actualsrc=\"https://pic4.zhimg.com/v2-a4707564b3ef6f604e03e6c8e83e9c3f_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding:utf-8 -*-\nclass Solution:\n    def Fibonacci(self, n):\n        # write code here\n        flag = 0\n        temp = [0,0]\n        b = 0\n        while flag &lt;= n:\n            if flag == 0:\n                b = 0\n                temp[0] = b        \n            elif flag == 1:\n                b = 1\n                temp[1] = b \n            else:\n                b = sum(temp)\n                temp[0] = temp[1]\n                temp[1] = b\n            flag += 1\n        return b</code></pre></div><ol><li>列表不定义数值，它是不存在index的</li><li>有时递推需要前面两项，这时可以用list记录</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-02147ac7e10c5d0c16bbf089561fb731_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-02147ac7e10c5d0c16bbf089561fb731_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic2.zhimg.com/v2-02147ac7e10c5d0c16bbf089561fb731_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-02147ac7e10c5d0c16bbf089561fb731_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35206347", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-4装零食", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-07e8ac51f7f142992d4c0ff9312f26ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"726\" data-original=\"https://pic1.zhimg.com/v2-07e8ac51f7f142992d4c0ff9312f26ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;726&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"726\" data-original=\"https://pic1.zhimg.com/v2-07e8ac51f7f142992d4c0ff9312f26ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-07e8ac51f7f142992d4c0ff9312f26ec_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">def count_m(n,m,v_list):\n    flag = 0\n    b = 0\n    v_sum = sum(v_list)\n    if v_sum&lt; m:\n        b = 2**(n)\n        return b\n    else:\n        while flag &lt;= n:\n            if flag == 0:\n                b = 1\n            elif flag == 1:\n                if m &gt; v_list[0]:\n                    b = 2\n                else:\n                    b = 1\n            else:\n                a = b\n                if m-v_list[flag-1]&gt;0:\n                    b = a + count_m(flag-1,m-v_list[flag-1],v_list[:flag])\n                else:\n                    b = a\n            flag += 1\n    return b\n\n\nline = input()\nn = int(line.split(&#39; &#39;)[0])\nw = int(line.split(&#39; &#39;)[1])\nline = input()\nv = []\nfor i in range(n):\n    v.append(int(line.split(&#39; &#39;)[i]))\nprint(count_m(len(v), w, sorted(v)))</code></pre></div><ol><li>n：由多少种零食</li><li>m：书包大小</li><li>b：多少不同的放置种类</li><li>v(k):第k个零食的体积</li></ol><p>【1】n=0，b=1。【2】n=1,v(k)&gt;m,b=1;n=1,v(k)&lt;m,b=2。【3】…………</p><p>【递推公式】(从最简单的情况向复杂情况递推，复杂的情况是简单情况的组合)</p><p>v(n)&gt;m, <img src=\"https://www.zhihu.com/equation?tex=f%28n%2Cm%29%3Df%28n-1%2Cm%29\" alt=\"f(n,m)=f(n-1,m)\" eeimg=\"1\"/> ;</p><p>v(n)&lt;m, <img src=\"https://www.zhihu.com/equation?tex=f%28n%2Cm%29%3Df%28n-1%2Cm%29%2Bf%28n-1%2Cm-v%28n%29%29\" alt=\"f(n,m)=f(n-1,m)+f(n-1,m-v(n))\" eeimg=\"1\"/> </p><p>注：</p><ol><li>递归要有终止条件，可以是return，可以是break，也可以一个顺序执行程序</li><li>第一个if是判断若零食的总和小于书包着不需要进行递归了，这样极大的减少了运算</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">def 函数(迭代次数):\n    flag = 0\n    b = 0 #最后的返回值\n    while flag &lt;= n: #n是迭代标准，可以取到falg的初始值，是否带等号由n是否可以取到决定\n        if flag == 0:\n           情况1\n        elif flag == 1:\n           情况2\n        else:\n            a = b #a是记录上依次结果的\n            迭代函数\n        flag += 1\n    return b\n</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35201420", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-3最大矩形重叠数", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4637cd19034c9ddc7409e9d8180cbbb2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6190214657667952263c8fe87b608407_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"588\" data-original=\"https://pic4.zhimg.com/v2-6190214657667952263c8fe87b608407_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;588&#39; height=&#39;408&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"588\" data-original=\"https://pic4.zhimg.com/v2-6190214657667952263c8fe87b608407_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6190214657667952263c8fe87b608407_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">import sys\nlines = sys.stdin.readlines()\nn = int(lines[0])\nx1 = list(map(int,lines[1].split()))\ny1 = list(map(int,lines[2].split()))\nx2 = list(map(int,lines[3].split()))\ny2 = list(map(int,lines[4].split()))\n# 遍历所有点的组合（包含了矩形所有角以及交点），看一下有多少矩形包含它（遍历所有的矩形）\nres = 1\nfor x in x1+x2:\n    for y in y1+y2:\n        cnt = 0\n        for i in range(n):\n            if x &gt; x1[i] and y &gt; y1[i] and x &lt;= x2[i] and y &lt;= y2[i]:\n                cnt += 1\n        res = max(res,cnt)\nprint(res)</code></pre></div><p>注：一个点大于左下角的坐标，但小于等于右上角的坐标。这样就保证了如果只是点重合的化不满足条件，如果是面重合满足条件。</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35200839", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "在线编程题-2斐波那契数列（1）", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b79635922c333c6fe37bb005c048cf29_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-b79635922c333c6fe37bb005c048cf29_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-b79635922c333c6fe37bb005c048cf29_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b79635922c333c6fe37bb005c048cf29_b.jpg\"/></figure><blockquote><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2596%2590%25E6%25B3%25A2%25E9%2582%25A3%25E5%25A5%2591%25E6%2595%25B0%25E5%2588%2597\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">斐波那契数列</a>（Fibonacci sequence），又称<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%25BB%2584%25E9%2587%2591%25E5%2588%2586%25E5%2589%25B2/115896\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">黄金分割</a>数列、因<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25B0%25E5%25AD%25A6%25E5%25AE%25B6/1210991\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数学家</a>列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2585%2594%25E5%25AD%2590%25E6%2595%25B0%25E5%2588%2597\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">兔子数列</a>”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2580%2592%25E5%25BD%2592\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">递归</a>的方法定义：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）</blockquote><p>不要小看这个，很多问题都可以简化为这个问题。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-72cd4b0d9fc6a09f04e557c96866edb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"122\" class=\"content_image\" width=\"398\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;398&#39; height=&#39;122&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"122\" class=\"content_image lazy\" width=\"398\" data-actualsrc=\"https://pic1.zhimg.com/v2-72cd4b0d9fc6a09f04e557c96866edb0_b.jpg\"/></figure><p>分析：</p><p>其中target*2为大矩阵的大小</p><p>有以下几种情形：</p><p>1,target &lt;= 0 大矩形为&lt;= 2*0,直接return 1；</p><p>2,target = 1大矩形为2*1，只有一种摆放方法，return1；</p><p>3,target = 2 大矩形为2*2，有两种摆放方法，return2；</p><p>4,target = n 分为两步考虑：</p><p>       第一次摆放一块 2*1 的小矩阵，则摆放方法总共为f(target-1)</p><p>       第一次摆放一块1*2的小矩阵，则摆放方法总共为f(target-2)</p><p>       共：f(target)=f(target-1)+f(target-2)</p><div class=\"highlight\"><pre><code class=\"language-text\"># -*- coding:utf-8 -*-\nclass Solution:\n    def rectCover(self, number):\n        # write code here\n        if number &lt; 1:\n            return 0\n        else:\n            a = 0\n            b = 1\n            while number &gt; 0:\n                a, b = b, a+b\n                number -= 1 \n            return b</code></pre></div><p>注：【（a,b）<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2596%2590%25E6%25B3%25A2%25E9%2582%25A3%25E5%25A5%2591%25E6%2595%25B0%25E5%2588%2597\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">斐波那契数列</a>】，a和b是辅助的下标在0之前的两个数。</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35171615", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "递归", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-12fd1989c901f15e74c3f3cbe84da4c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-12fd1989c901f15e74c3f3cbe84da4c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-12fd1989c901f15e74c3f3cbe84da4c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-12fd1989c901f15e74c3f3cbe84da4c0_b.jpg\"/></figure><p>递归：把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。就是自己调自己。</p><hr/><p>递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</p><hr/><p>快速排序（<a href=\"https://zhuanlan.zhihu.com/p/35037731\" class=\"internal\">快速排序算法</a>）：</p><div class=\"highlight\"><pre><code class=\"language-text\">def partition(alist, start, end):\n    if end &lt;= start:\n        return\n    base = alist[start]\n    index1, index2 = start, end\n    while start &lt; end:\n        while start &lt; end and alist[end] &gt;= base:\n            end -= 1\n        alist[start] = alist[end]\n        while start &lt; end and alist[start] &lt;= base:\n            start += 1\n        alist[end] = alist[start]\n    alist[start] = base\n    partition(alist, index1, start - 1)\n    partition(alist, start + 1, index2)</code></pre></div><ol><li>编程中，边界条件一般是return</li><li>递归是不断的去开辟新栈，直到最后满足边界条件，再依次返回。快排不需要根据返回的结果做运算，所以其是return的空；<a href=\"https://zhuanlan.zhihu.com/p/34929249\" class=\"internal\">在线编程题</a>-这里的递归是用到最后返回结果依次运算，所以其返回结果不为空</li></ol><hr/><p>寻找第k大的值：</p><div class=\"highlight\"><pre><code class=\"language-text\">def partition(alist, start, end):\n    if end &lt;= start:\n        return\n    base = alist[start]\n    while start &lt; end:\n        while start &lt; end and alist[end] &gt;= base:\n            end -= 1\n        alist[start] = alist[end]\n        while start &lt; end and alist[start] &lt;= base:\n            start += 1\n        alist[end] = alist[start]\n    alist[start] = base\n    return start</code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-text\">def find_least_k_nums(alist, k):\n    length = len(alist)\n    if not alist or k &lt;=0 or k &gt; length:\n        return\n    start = 0\n    end = length - 1\n    index = partition(alist, start, end)\n    while index != k:\n        if index &gt; k:\n            index = partition(alist, start, index - 1)\n        elif index &lt; k:\n            index = partition(alist, index + 1, end)\n    return alist[k]</code></pre></div><p>利用快排的思想，当base出现的位置不为k的时候。就判断k的位置在base的左边还是右边，在对第k所在的位置做快排，直到满足index为k的时候。</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35136324", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "C语言编译执行过程", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-04c52b0d84a2cb5661c746ae552f8160_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-04c52b0d84a2cb5661c746ae552f8160_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-04c52b0d84a2cb5661c746ae552f8160_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-04c52b0d84a2cb5661c746ae552f8160_b.jpg\"/></figure><ol><li>编译预处理：读取c源程序，对其中的伪指令（以#开头的指令）和特殊符号进行处理</li><li>编译阶段：通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码</li><li>汇编过程：把汇编语言代码翻译成目标机器指令的过程</li><li>链接程序：将有关的目标文件彼此相连接，使得所有的这些目标文件成为一个能够由操作系统装入执行的统一整体。</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">注：链接分为两种\na)静态链接　在这种链接方式下，函数的代码将从其所在地静态链接库中被拷贝到最终的可执行程序中。\n这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件\n的集合，其中的每个文件含有库中的一个或者一组相关函数的代码。\nb)动态链接　　在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。\n链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。\n在此可执行文件被执行时，动态链接库的全部内容将被映射到运行时相应进程的虚地址空间。\n动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。</code></pre></div><p>参考：</p><a href=\"https://link.zhihu.com/?target=http%3A//blog.sina.com.cn/s/blog_73428e9a0101ev2c.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C语言编译执行过程详解_改变自己_新浪博客</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35135731", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 3, 
            "title": "时间复杂度", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9a681adc8ce39638d1af4b6678d8d803_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-9a681adc8ce39638d1af4b6678d8d803_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-9a681adc8ce39638d1af4b6678d8d803_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9a681adc8ce39638d1af4b6678d8d803_b.jpg\"/></figure><p><b>算法耗费的时间和语句频度</b></p><ol><li>一个算法所耗费的时间(T(n))=算法中每条语句的执行时间之和</li><li>每条语句的执行时间=语句的执行次数×语句执行一次所需时间</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">注：\n1，我们记语句执行一次所需时间为：1\n2，每条语句的执行时间称为:语句频度\n3,一个算法所耗费的时间记为：T(n)</code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-text\"># define n 100 \nvoid MatrixMultiply(int A[a]，int B [n][n]，int C[n][n])\n{ \nint i ,j ,k;\n(1) for(i=0; i＜n;j++) n+1\n(2)     for (j=0;j＜n;j++) { n(n+1)\n(3)       C[i][j]=0; n2\n(4)       for (k=0; k＜n; k++) n2(n+1)\n(5)         C[i][j]=C[i][j]+A[i][k]*B[k][j]; n3\n         }\n       }</code></pre></div><ol><li> 语句(1)的循环控制变量i要增加到n，测试到i=n成立才会终止。故它的频度是n+1</li><li>但是它的循环体却只能执行n次。语句(2)作为语句(1)循环体内的语句应该执行n次，但语句(2)本身要执行n+1次，所以语句(2)的频度是n(n+1)</li><li>同理可得语句(3)，(4)和(5)的频度分别是n2，n2(n+1)和n3。 </li><li>T(n)=2n3+3n2+2n+1</li></ol><hr/><p><b>时间复杂度T(n)的数量级(阶)称为算法的渐进时间复杂度</b></p><p>当n充分大时，T(n)和n3之比是一个不等于零的常数。即T(n)和n3是同阶的，或者说T(n)和n3的数量级相同。记作T(n)=O(n^3)是算法MatrixMultiply的渐近时间复杂度。</p><p>注：这叫做大O法，其是反映算法的时间复杂度随问题规模n变化的规律。</p><ol><li>用常数 1 取代运行时间中的所有加法常数。</li><li>在修改后的运行次数函数中，只保留最高阶项。</li><li>如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。</li></ol><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/popkiler/article/details/2110144\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法复杂度分析 - CSDN博客</a></p><p>2，<a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/d72d4c9e90c6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">程序猿必修课之数据结构（二）算法和算法的复杂度</a></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35133732", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 5, 
            "title": "动态存储与静态存储", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-629aa7141d5386429b00b4d947f996bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-629aa7141d5386429b00b4d947f996bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-629aa7141d5386429b00b4d947f996bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-629aa7141d5386429b00b4d947f996bf_b.jpg\"/></figure><p><b>动态存储方式：<i>在程序运行期间</i></b>根据需要进行动态的分配存储空间的方式。动态存储变量是在程序执行过程中，使用它时才分配存储单元， 使用完毕立即释放。 典型的例子是函数的形式参数，在函数定义时并不给形参分配存储单元，只是在函数被调用时，才予以分配， 调用函数完毕立即释放。如果一个函数被多次调用，则反复地分配、 释放形参变量的存储单元。</p><p><b>静态存储方式</b>：<b><i>在程序编译时</i></b>分配固定的存储空间的方式。该存储方式通常是在变量定义时就分定存储单元并一直保持不变， 直至整个程序结束。全局变量，静态变量等就属于此类存储方式。</p><p><b>内存中用户存储空间的分配情况（三种）：</b></p><ol><li> 程序区：存放程序语句</li><li>静态存储区：存放全局变量，在程序编译时给全局变量分配存储区，程序执行完毕就释放。</li><li>动态存储区：存放以下数据：函数形式参数。在调用函数时给形参分配存储空间；自动变量(未加static声明的局部变量) ；函数调用时的现场保护和返回地址等；</li></ol><p><b>动态内存分配：</b>发生在程序调入和执行的时候，动态地分配或者回收存储空间的分配内存的方法。（是不是想到了堆，对！堆一定是动态分配的）</p><p><b>静态内存分配：</b>发生在程序编译和连接的时候，预先分配存储空间（栈可以是静态分配如全局变量，也可以是动态分配；<b>，</b>栈动态分配是由编译器进行释放）</p><p>欢迎关注公众号：huangxiaobai880</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35133160", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "程序运行-堆与栈", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d3c98c8f82a4abca7a90ed2175ebc34b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-d3c98c8f82a4abca7a90ed2175ebc34b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-d3c98c8f82a4abca7a90ed2175ebc34b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d3c98c8f82a4abca7a90ed2175ebc34b_b.jpg\"/></figure><p><b>栈：</b>由编译器在需要的时候分配，在不需要的时候自动清除的变量的存储区，里面的变量通常是局部变量，函数参数等。</p><p><b>堆：</b>就是那些new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。（其与数据结构的堆是两回事，分配方式倒是类似于链表）</p><p><b>堆和栈的区别主要为：</b></p><ol><li>管理方式不同： 对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来讲，释放工作由程序员控制，容易产生内存泄漏（memory leak）。</li><li>能否产生碎片不同：堆频繁的new/delete会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。栈是先进后出的队列，栈在弹出之前，在它上面的后进的栈内容已经被弹出。</li><li>分配效率：栈是机器系统提供的数据结构，这就决定了栈的效率比较高。堆则是函数库提供的，它的机制是很复杂的。显然，堆的效率比栈要低得多。 </li><li>分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。</li><li>生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向增长；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。</li></ol><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35114330", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "数据结构-堆与栈", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_b.jpg\"/></figure><hr/><p>数据结构：</p><ul><li>堆中某个节点的值总是不大于或不小于其父节点的值；（最大堆，最小堆）</li><li>堆总是一棵完全二叉树。</li></ul><a href=\"https://zhuanlan.zhihu.com/p/35042579\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-507aa5ed6ceb567cf00fbff9bc02834e_180x120.jpg\" data-image-width=\"1024\" data-image-height=\"695\" class=\"internal\">小白：二叉树</a><p>那如何维护堆了（向堆里面加值）：</p><p>不必将值一个个地插入堆中，通过交换形成堆。假设根的左、右子树都已是堆，并且根的元素名为R。这种情况下，有两种可能：</p><ol><li>R的值小于或等于其两个子女，此时堆已完成；</li><li>R的值大于其某一个或全部两个子女的值，此时R应与两个子女中值较小的一个交换，结果得到一个堆，除非R仍然大于其新子女的一个或全部的两个。这种情况下，我们只需简单地继续这种将R“拉下来”的过程，直至到达某一个层使它小于它的子女，或者它成了叶结点。</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e75e769d754c4bf0d5e9bccc1f9b386b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-e75e769d754c4bf0d5e9bccc1f9b386b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;384&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-e75e769d754c4bf0d5e9bccc1f9b386b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e75e769d754c4bf0d5e9bccc1f9b386b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ec40adc91754a01c7a87bb98a5d207df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-ec40adc91754a01c7a87bb98a5d207df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;378&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-ec40adc91754a01c7a87bb98a5d207df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ec40adc91754a01c7a87bb98a5d207df_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d77bf1a0e3d5c96c2a38d70e2e211f20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-d77bf1a0e3d5c96c2a38d70e2e211f20_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-d77bf1a0e3d5c96c2a38d70e2e211f20_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d77bf1a0e3d5c96c2a38d70e2e211f20_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-019647c767ec794f27cf7818beb6c6bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-019647c767ec794f27cf7818beb6c6bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-019647c767ec794f27cf7818beb6c6bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-019647c767ec794f27cf7818beb6c6bf_b.jpg\"/></figure><p>注：程序运行的堆和数据结构的堆是两回事。</p><ol><li>插入时间复杂度：O(logn)</li><li>堆排序的建堆时间复杂度：O(n)</li><li>堆排序的空间复杂度：O(1)</li></ol><hr/><p>栈：先放进去的后拿出来，“压子弹”</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35105451", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 31, 
            "title": "ROC,AUC,PRC评价指标", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe4e95a5ca606e6c562bbee7a7ee7481_b.jpg\"/></figure><hr/><p>ROC曲线：受试者工作特征曲线 （receiver operating characteristic curve），又称为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2584%259F%25E5%258F%2597%25E6%2580%25A7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">感受性</a>曲线（sensitivity curve）。</p><p>ROC以假阳性率（False positive rate，1-特异度）为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%25A8%25AA%25E8%25BD%25B4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">横轴</a>，真阳性率（True positive rate，灵敏度）为纵轴。</p><div class=\"highlight\"><pre><code class=\"language-text\">解释:假阳性率（FPR）,真阳性率（TPR）\n假设一个二分类问题：判断为1为阳，判断为0为阴\n这批样本实际标签为阴的个数为：m\n这批样本实际标签为阳的个数为：n\n\n若我们选定阈值为：a;这批样本预测标签为阳的个数为：p\n预测标签为阳只可能来自两个地方：\n1)实际标签为阴，预测为阳（假阳），记这种情况的个数是：x\n2)实际标签为阳，预测为阳（真阳），记这种情况的个数是：y\n\n\n那么：\nFPR = x/m\nTPR = y/n\n\n即：\nTPR：预测对的阳占实际阳的比例\nFPR：预测错的阳占实际阴的比例</code></pre></div><p>这样一个二分类问题在选定不同的分类阈值a，会得到不同的FPR，TPR值。我们将这些点绘制在FPR，TPR坐标轴上，就会得到ROC曲线。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-de806ced3d0edf5d0471b52c0167b990_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic1.zhimg.com/v2-de806ced3d0edf5d0471b52c0167b990_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;428&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic1.zhimg.com/v2-de806ced3d0edf5d0471b52c0167b990_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-de806ced3d0edf5d0471b52c0167b990_b.jpg\"/></figure><p>这是两个ROC曲线：</p><ol><li>（0，0）：即将所有的点都划归为阴</li><li>（1，1）：即将所有的点都划归为阳</li><li>红色直线代表随机猜</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">解释一下：\n红色直线y = x\n假设我们做两次实验，实验有k个预测值，第一次x=0.1,y=0.1;第二次x=0.9,y=0.9。\n那么,两次实验总共产生了：2*k个预测值\n那么错误预测的次数刚好是：k\n则其预测概率是：0.5（随机猜）</code></pre></div><p>4. 蓝色曲线是一个正常的ROC曲线，它代表蓝色曲线做相同的两次实验，去互补的x，但是其y的和会大于1，证明两次实验和预测对的次数会大于一半。</p><p>5. 相应的，如果有曲线在红色线一下，代表它预测值还没有随机猜好了</p><p><b>ROC曲线有个很好的特性：当测试集中的正负样本的分布变化的时候，ROC曲线能够保持不变。</b></p><hr/><p>AUC(Area Under Curve,曲线下面积)：即ROC下面的面积，其可以用于衡量这个分类器的优劣。面积等于0.5随机猜，AUC越大，分类器越好。</p><hr/><p>PRC(Precision Recall Curve,准确召回率曲线)，相关性评价：</p><p>数据库里有500条记录，其中50个是相关的（正样本），你通过一个检索，返回了75个你认为相关，其中只有45个是真正相关的；那么在这个检索对应下的：</p><p><b>recall=45/50=0.9【横坐标】</b></p><p><b>precision=45/75=0.6【纵坐标】（这两个数比值都是在0到1置内的）</b></p><p><b>结论： 在negative instances的数量远远大于positive instances的data set里， PRC更能有效衡量检测器的好坏。</b></p><p><b>参考：</b></p><p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/pipisorry/article/details/51788927\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">分类模型评估之ROC-AUC曲线和PRC曲线 - CSDN博客</a></p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "藕霸是哪吒", 
                    "userLink": "https://www.zhihu.com/people/59648ec346ccfa1dd903b55c8335c35c", 
                    "content": "只知道roc😂😂", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小白", 
                            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
                            "content": "你们也用到这个啦", 
                            "likes": 0, 
                            "replyToAuthor": "藕霸是哪吒"
                        }, 
                        {
                            "userName": "藕霸是哪吒", 
                            "userLink": "https://www.zhihu.com/people/59648ec346ccfa1dd903b55c8335c35c", 
                            "content": "嗯嗯，利用信号检测论制作接受者操作特征曲线", 
                            "likes": 0, 
                            "replyToAuthor": "小白"
                        }
                    ]
                }, 
                {
                    "userName": "Huan", 
                    "userLink": "https://www.zhihu.com/people/01b18a7e85f9243be6591d1ab440e705", 
                    "content": "看标题我还以为是要讲中国近代史呢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34923173", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 2, 
            "title": "哈夫曼编码", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fc0281312f1c3456c4fd5c3af12d2374_b.jpg\"/></figure><ol><li>将符号按照概率由大到小排队</li><li>编码时，从最小概率的两个符号开始，可选其中一个支路为0，另一支路为1。</li><li>再将已编码的两支路的概率合并，并重新排队</li><li>多次重复使用上述方法直至合并概率归一时为止</li></ol><p>注：</p><ol><li>两者虽平均码长相等，但同一符号可以有不同的码长，即编码方法并不唯一，其原因是两支路概率合并后重新排队时，可能出现几个支路概率相等，造成排队方法不唯一</li><li>一般，若将新合并后的支路排到等概率的最上支路，将有利于缩短码长方差，且编出的码更接近于等长码</li><li>赫夫曼码的码字（各符号的代码）是异前置码字，即任一码字不会是另一码字的前面部分，这使各码字可以连在一起传送，中间不需另加隔离符号，只要传送时不出错，收端仍可分离各个码字，不致混淆。</li></ol><p>列1：</p><p>五种符号u1、u2、u3、u4和u5，对应概率P1=0.4，P2=0.1，P3=P4=0.2，P5=0.1</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2f62066e2230cde2fb12006b8e16b690_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"501\" class=\"content_image\" width=\"381\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;381&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"501\" class=\"content_image lazy\" width=\"381\" data-actualsrc=\"https://pic1.zhimg.com/v2-2f62066e2230cde2fb12006b8e16b690_b.jpg\"/></figure><p>列2：</p><p>哈夫曼编码ABABABABCD用二进制最少要几位</p><p>A的概率：0.4；B的概率：0.4；C的概率：0.1；D的概率：0.1</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f6478a1e92481d42459a94d0b29a128d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"452\" data-original=\"https://pic2.zhimg.com/v2-f6478a1e92481d42459a94d0b29a128d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;452&#39; height=&#39;386&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"452\" data-original=\"https://pic2.zhimg.com/v2-f6478a1e92481d42459a94d0b29a128d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f6478a1e92481d42459a94d0b29a128d_b.jpg\"/></figure><p>A编为：0；B编为：11；C编为：101；D编为：100</p><p>所以上面可以编为：011011011011101100至少需要18位二进制</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1690e5ed169fbdb99025847bd42dcd6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"364\" data-rawheight=\"308\" class=\"content_image\" width=\"364\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;364&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"364\" data-rawheight=\"308\" class=\"content_image lazy\" width=\"364\" data-actualsrc=\"https://pic4.zhimg.com/v2-1690e5ed169fbdb99025847bd42dcd6f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2366c4868ec74c41416fe91bd6a86e02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3968\" data-rawheight=\"1984\" class=\"origin_image zh-lightbox-thumb\" width=\"3968\" data-original=\"https://pic3.zhimg.com/v2-2366c4868ec74c41416fe91bd6a86e02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3968&#39; height=&#39;1984&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3968\" data-rawheight=\"1984\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3968\" data-original=\"https://pic3.zhimg.com/v2-2366c4868ec74c41416fe91bd6a86e02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2366c4868ec74c41416fe91bd6a86e02_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2593%2588%25E5%25A4%25AB%25E6%259B%25BC%25E7%25BC%2596%25E7%25A0%2581/1719730%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">哈夫曼编码_百度百科</a></p><p>欢迎关注公众号：huangxiaobai880</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/961288482655862784\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/80/v2-f29e629b0a4b7b05d4e2b4182d62c2fc_b.jpg\" data-lens-id=\"961288482655862784\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/80/v2-f29e629b0a4b7b05d4e2b4182d62c2fc_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/961288482655862784</span></span></a><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "李小翰", 
                    "userLink": "https://www.zhihu.com/people/d1f528f0dfab730b419fd60c2a65d213", 
                    "content": "能不能跪求答主后面的码字是怎么得出来的？？", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "东明", 
                    "userLink": "https://www.zhihu.com/people/b7b1d87aca212c2c23e5f7d0abd8d7f5", 
                    "content": "<p>感谢楼主，我明白码字是怎么求得的了！</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "夏虫", 
                    "userLink": "https://www.zhihu.com/people/4c1a1fbf54d6b09fab1970f48dec314e", 
                    "content": "a0.12 b0.29 c0.13 d0.08 e0.18 f0.10 g0.10这个用你这种该怎么算？出现多个相同值的。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小白", 
                            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
                            "content": "<p>出现的相同值之间可任意排，编码又不唯一。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "夏虫"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34927505", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "矩阵特征向量", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d73b83ad4f1b0a37896cdcd380fd9ad1_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c8924eb3852c8265121ddef0d402b03f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"60\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic4.zhimg.com/v2-c8924eb3852c8265121ddef0d402b03f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;805&#39; height=&#39;60&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"60\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"805\" data-original=\"https://pic4.zhimg.com/v2-c8924eb3852c8265121ddef0d402b03f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c8924eb3852c8265121ddef0d402b03f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-da3cd6777356d712046741a528766fee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"55\" class=\"origin_image zh-lightbox-thumb\" width=\"657\" data-original=\"https://pic3.zhimg.com/v2-da3cd6777356d712046741a528766fee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;657&#39; height=&#39;55&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"55\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"657\" data-original=\"https://pic3.zhimg.com/v2-da3cd6777356d712046741a528766fee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-da3cd6777356d712046741a528766fee_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d6120a2ec290882e739cac08f0ce1ca3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-d6120a2ec290882e739cac08f0ce1ca3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-d6120a2ec290882e739cac08f0ce1ca3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d6120a2ec290882e739cac08f0ce1ca3_b.jpg\"/></figure><hr/><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%259F%25A9%25E9%2598%25B5%25E7%2589%25B9%25E5%25BE%2581%25E5%2580%25BC/8309765%3Ffr%3Daladdin\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">矩阵特征值_百度百科</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-001d1c54597618c0904c4a7b73f8de6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-001d1c54597618c0904c4a7b73f8de6c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-001d1c54597618c0904c4a7b73f8de6c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-001d1c54597618c0904c4a7b73f8de6c_b.jpg\"/></figure><p>参考：</p><p>1，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2589%25B9%25E5%25BE%2581%25E5%2590%2591%25E9%2587%258F/8663983%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特征向量_百度百科</a></p><p>欢迎关注公众号：huangxiaobai880</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/961336560054206464\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/80/v2-f29e629b0a4b7b05d4e2b4182d62c2fc_b.jpg\" data-lens-id=\"961336560054206464\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/80/v2-f29e629b0a4b7b05d4e2b4182d62c2fc_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/961336560054206464</span></span></a><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34921626", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "记一次在线笔试-图像处理方向", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3d900de7a83ac1bfa2dd32d4ce51b3b7_b.jpg\"/></figure><p>公司并没有让我做图像处理的题目，做的是数据处理方向的题目。共有10道多选题，每题4分（但我感觉其实都是单选），多选少选都不得分。两条简答题，各20分。做完一个大块才可以做下一个大块，比如说你先做选择题那么你要把选择题全做完才能做简答题，一旦做简答题了，那么选择题是不可以在修改了。</p><p>选择题：</p><ol><li>3个人，分10个东西，每个人至少分1个，有多少种分法</li><li>从原点到点(5,7)，只能延x，y轴走，最短的路径有多少种</li><li>置两个骰子，共置了18000次，那么点数是7的次数为变量X，问X的均值与方差</li><li>还一个是知道矩阵的一个特征向量是（5，3）【转置】矩阵是（34，-5\\21 x）【\\代表转行，数值记不清了】求x的值【<a href=\"https://zhuanlan.zhihu.com/p/34927505\" class=\"internal\">矩阵特征向量</a>】</li><li>哈夫曼编码ABABABABCD用二进制最少要几位【<a href=\"https://zhuanlan.zhihu.com/p/34923173\" class=\"internal\">哈夫曼编码</a>】</li><li>abgbcbggbh用二叉树搜索，不可能是那种</li><li>还有好像是单均值检验可以用于哪个均值方差是那种情况下（记不太清了）</li><li>还有一个概率的正值检验可以干嘛（忘了）</li><li>一个就是梯度下降法减小loss，其是锯齿形下降（这只是对那张图的描述），要怎么办</li><li>还有一题忘了</li></ol><p>简答题</p><ol><li>定义因果关系</li><li>举一个利用序列预测模型的实际的商业案例</li></ol><p>总的来说，这些公司也不是吃素的，想过人家的在线笔试还是要花一点时间的。</p><p>欢迎关注公众号：huangxiaobai880</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/961271429904445440\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/80/v2-f29e629b0a4b7b05d4e2b4182d62c2fc_b.jpg\" data-lens-id=\"961271429904445440\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/80/v2-f29e629b0a4b7b05d4e2b4182d62c2fc_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/961271429904445440</span></span></a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34929249", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 2, 
            "title": "在线编程题-1递推", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d57c3a8a91d030aca4120767e4760161_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-d57c3a8a91d030aca4120767e4760161_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;731&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-d57c3a8a91d030aca4120767e4760161_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d57c3a8a91d030aca4120767e4760161_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-28d8c0e51674709c6fc97b36bd303d91_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic2.zhimg.com/v2-28d8c0e51674709c6fc97b36bd303d91_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"94\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic2.zhimg.com/v2-28d8c0e51674709c6fc97b36bd303d91_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-28d8c0e51674709c6fc97b36bd303d91_b.jpg\"/></figure><p>前几天参加了一个在线编程题，当时没做出来。现在还是想不出来，在网上找了一个大神的答案是这样的。但我还是不知道这个递推公式是怎么弄出来的，而且用python这么编程啊！求助知乎大神！！！</p><p>为了吸引大神答题，我也是拼了😀</p><p>更新：</p><p>大神和我解释了一下递推公式的由来：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2ca94ffa3c45288b2e38c068096c4197_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb\" width=\"730\" data-original=\"https://pic4.zhimg.com/v2-2ca94ffa3c45288b2e38c068096c4197_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;730&#39; height=&#39;181&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"181\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"730\" data-original=\"https://pic4.zhimg.com/v2-2ca94ffa3c45288b2e38c068096c4197_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2ca94ffa3c45288b2e38c068096c4197_b.jpg\"/></figure><p>皮，666666！第一种情况的情形就是 <img src=\"https://www.zhihu.com/equation?tex=f%28n-1%2Cm%29\" alt=\"f(n-1,m)\" eeimg=\"1\"/> 种。</p><p>在更新：</p><p>大神的回答基本是对滴，但在细节上有问题 <img src=\"https://www.zhihu.com/equation?tex=f%28n%2Cm%29%3Dm%28m-1%29%5E%7Bn-1%7D-f%28n-1%2Cm%29\" alt=\"f(n,m)=m(m-1)^{n-1}-f(n-1,m)\" eeimg=\"1\"/> </p><p>上面的次方数应该修改一下。底下是我的python代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">input_str = input(&#39;请分别输入需要分割的块数和涂抹颜色的数量，以空格隔开：&#39;)\nn,m = input_str.split()\nn = int(n)\nm = int(m)\ndef count(n,m):\n    if n==1:\n        return m\n    if n==2:\n        return m*(m-1)\n    all = m*(m-1)**(n-1)\n    all_select = all - count(n-1,m)\n    return all_select\nsum = count(n,m)\nprint(&#39;共有&#39;,sum,&#39;涂抹方法&#39;)</code></pre></div><p>注：递推，下一个数值是根据前一个数值得到的。所以，你需要指定初始的值这样它才可以往下递推。</p><p>有时，其由内存限制，使用递归很容易超出内存。</p><div class=\"highlight\"><pre><code class=\"language-text\">input_str = input(&#39;请分别输入需要分割的块数和涂抹颜色的数量，以空格隔开：&#39;)\nn,m = input_str.split()\nn = int(n)\nm = int(m)\ndef count(n,m):\n    flag = 0\n    b = 0\n    while flag &lt; n:\n        flag += 1\n        if flag == 1:\n            b = m\n        elif flag == 2:\n            b = m*(m-1)\n        else:\n            a = b\n            b = m*(m-1)**(flag-1) - a\n    return b\nsum = count(n,m)\nprint(&#39;共有&#39;,sum,&#39;涂抹方法&#39;)</code></pre></div><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "我就是最浪", 
                    "userLink": "https://www.zhihu.com/people/f28d422234445f46e9b6b76caa7a45ff", 
                    "content": "老哥，这个题目做错了，考虑n=2，应该有m×（m-1）种，如果按原递推公式，则是m×（m-1）-f（1，m），即为m（m-2）", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "我就是最浪", 
                    "userLink": "https://www.zhihu.com/people/f28d422234445f46e9b6b76caa7a45ff", 
                    "content": "这样不严谨，要分4种情况，n=1，2，3和n＞3", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小白", 
                            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
                            "content": "考虑了2的情况", 
                            "likes": 0, 
                            "replyToAuthor": "我就是最浪"
                        }
                    ]
                }, 
                {
                    "userName": "我就是最浪", 
                    "userLink": "https://www.zhihu.com/people/f28d422234445f46e9b6b76caa7a45ff", 
                    "content": "哦，不对，只分3种情况，n=1，2和大于等于3", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "我就是最浪", 
                    "userLink": "https://www.zhihu.com/people/f28d422234445f46e9b6b76caa7a45ff", 
                    "content": "我其实是另外一种递推思路，需要划分4种情况，而这种则需要划分3种情况", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35033049", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "图像颜色模式", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_b.jpg\"/></figure><p><b>a)YUV</b></p><p>YUV是被欧洲电视系统所采用的一种颜色编码方法。采用YUV色彩空间的重要性是它的亮度信号Y和色度信号U、V是分离的。</p><p>注：</p><p>yuv色彩模型来源于rgb模型，该模型的特点是将亮度和色度分离开，从而适合于图像处理领域。YCbCr模型来源于yuv模型，应用于数字视频。</p><hr/><p><b>b)HSI</b></p><p>当人观察一个彩色物体时，用色调、饱和度、亮度来描述物体的颜色。H定义颜色的波长，称为色调；S表示颜色的深浅程度，称为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%25A5%25B1%25E5%2592%258C%25E5%25BA%25A6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">饱和度</a>；I表示强度或亮度。</p><p>hsv里面的v指的是RGB里面的最大的值，v = max(max(r,g),b); 而HSI的I是平均值，I=(r+g+b) / 3。</p><hr/><p><b>c)CMYK</b></p><p><b>印刷四色模式</b>是彩色印刷时采用的一种套色模式，利用色料的三原色混色原理，加上黑色油墨，共计四种颜色混合叠加，形成所谓“全彩印刷”。</p><p>C：Cyan = <a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%259D%2592%25E8%2589%25B2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">青色</a>，又称为‘天蓝色’或是‘湛蓝’M：Magenta = <a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2593%2581%25E7%25BA%25A2%25E8%2589%25B2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">品红色</a>，又称为‘洋红色’；Y：Yellow = 黄色；K：Key Plate(blacK) = 定位套版色（黑色）</p><hr/><p><b>d)RGB</b></p><p><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/RGB%25E8%2589%25B2%25E5%25BD%25A9%25E6%25A8%25A1%25E5%25BC%258F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RGB色彩模式</a>是工业界的一种颜色标准，是通过对红(R)、绿(G)、蓝(B)三个颜色<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2580%259A%25E9%2581%2593\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">通道</a>的变化以及它们相互之间的叠加来得到各式各样的颜色的，RGB即是代表红、绿、蓝三个通道的颜色。</p><hr/><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-87091726987b766d9f38e644e8169453_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"417\" data-rawheight=\"381\" class=\"content_image\" width=\"417\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;417&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"417\" data-rawheight=\"381\" class=\"content_image lazy\" width=\"417\" data-actualsrc=\"https://pic4.zhimg.com/v2-87091726987b766d9f38e644e8169453_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "谁知道呢", 
                    "userLink": "https://www.zhihu.com/people/2cdad6bf1b1c48eff51a3708b91f1167", 
                    "content": "手机开发者选项里的颜色图片模式什么用", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35034064", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "图像处理-二值化", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ccda0ebb05329f98bb27f227392ed7b7_b.jpg\"/></figure><p><b>大律法(Otsu)</b></p><p>主要是利用最大类间方差，将图片分为前景和背景两个部分。</p><p>类间方差法对噪音和目标大小十分敏感，它仅对类间方差为单峰的图像产生较好的分割效果。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-93ba5c0c5c09092a7e6833a8cf4a782d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"536\" data-original=\"https://pic2.zhimg.com/v2-93ba5c0c5c09092a7e6833a8cf4a782d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;536&#39; height=&#39;383&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"536\" data-original=\"https://pic2.zhimg.com/v2-93ba5c0c5c09092a7e6833a8cf4a782d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-93ba5c0c5c09092a7e6833a8cf4a782d_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35034587", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "贪心算法", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-05ff1f5b73612196fb2150d2f285357a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-05ff1f5b73612196fb2150d2f285357a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-05ff1f5b73612196fb2150d2f285357a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-05ff1f5b73612196fb2150d2f285357a_b.jpg\"/></figure><p><b>贪心算法介绍：</b></p><p>贪心算法（又称贪婪算法）是指，在对<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2597%25AE%25E9%25A2%2598%25E6%25B1%2582%25E8%25A7%25A3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">问题求解</a>时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259C%2580%25E4%25BC%2598%25E8%25A7%25A3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最优解</a>。</p><hr/><p><b>a)克鲁斯卡尔算法</b></p><p>克鲁斯卡尔算法是一种用来寻找最小生成树的算法。在剩下的所有未选取的边中，找最小边，如果和已选取的边构成回路，则放弃，选取次小边。</p><hr/><p><b>b)普里姆算法</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a2a7755fc1000022f217a08242ef01b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"302\" class=\"origin_image zh-lightbox-thumb\" width=\"809\" data-original=\"https://pic3.zhimg.com/v2-a2a7755fc1000022f217a08242ef01b2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;809&#39; height=&#39;302&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"302\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"809\" data-original=\"https://pic3.zhimg.com/v2-a2a7755fc1000022f217a08242ef01b2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a2a7755fc1000022f217a08242ef01b2_b.jpg\"/></figure><hr/><p><b>c)KMP</b></p><p>KMP算法是一种改进的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25AD%2597%25E7%25AC%25A6%25E4%25B8%25B2%25E5%258C%25B9%25E9%2585%258D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">字符串匹配</a>算法,因此人们称它为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2585%258B%25E5%258A%25AA%25E7%2589%25B9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">克努特</a>——<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E8%258E%25AB%25E9%2587%258C%25E6%2596%25AF\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">莫里斯</a>——<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2599%25AE%25E6%258B%2589%25E7%2589%25B9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">普拉特</a>操作（简称KMP算法）。KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。</p><hr/><p><b>d)迪杰斯特拉算法</b></p><p>迪杰斯特拉算法是由荷兰计算机科学家<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%258B%2584%25E5%2585%258B%25E6%2596%25AF%25E7%2589%25B9%25E6%258B%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">狄克斯特拉</a>于1959 年提出的，因此又叫<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%258B%2584%25E5%2585%258B%25E6%2596%25AF%25E7%2589%25B9%25E6%258B%2589%25E7%25AE%2597%25E6%25B3%2595\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">狄克斯特拉算法</a>。是从一个顶点到其余各顶点的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259C%2580%25E7%259F%25AD%25E8%25B7%25AF%25E5%25BE%2584\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最短路径</a>算法，解决的是有向图中最短路径问题。迪杰斯特拉算法主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。</p><hr/><p>a,b,c,d中没有用到贪心算法的我认为是：c</p><a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/537794979.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">哪些常见算法属于贪婪算法？_百度知道</a><p>欢迎关注公众号：huangxiaobai880深度学习</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35037391", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 2, 
            "title": "Pearson相关系数", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-91d382e8d33ff7882047d65ea26922cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-91d382e8d33ff7882047d65ea26922cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-91d382e8d33ff7882047d65ea26922cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-91d382e8d33ff7882047d65ea26922cc_b.jpg\"/></figure><p>相关系数：考察两个事物（在数据里我们称之为变量）之间的相关程度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果有两个变量：X、Y，最终计算出的相关系数的含义可以有如下理解：</p><p>(1)、当相关系数为0时，X和Y两变量无关系。</p><p>(2)、当X的值增大（减小），Y值增大（减小），两个变量为正相关，相关系数在0.00与1.00之间。</p><p>(3)、当X的值增大（减小），Y值减小（增大），两个变量为负相关，相关系数在-1.00与0.00之间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>相关系数的绝对值越大，相关性越强，相关系数越接近于1或-1，相关度越强，相关系数越接近于0，相关度越弱。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5568763cdff444b4b3a417bdc9a4c291_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic2.zhimg.com/v2-5568763cdff444b4b3a417bdc9a4c291_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;496&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"496\" data-original=\"https://pic2.zhimg.com/v2-5568763cdff444b4b3a417bdc9a4c291_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5568763cdff444b4b3a417bdc9a4c291_b.jpg\"/></figure><p>ps:是充要条件！！！</p><p>欢迎关注公众号：huangxiaobai880深度学习</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35037731", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "快速排序算法", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_b.jpg\"/></figure><p>快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，<b>然后再按此方法对这两部分数据分别进行快速排序</b>，整个排序过程可以<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2580%2592%25E5%25BD%2592\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">递归</a>进行，以此达到整个数据变成有序<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25BA%258F%25E5%2588%2597/1302588\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">序列</a>。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/MOBIN/p/4681369.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-dae70db102cb8f58040c8f962ecbbd2e_120x160.jpg\" data-image-width=\"577\" data-image-height=\"1545\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">图解快速排序 - MOBIN - 博客园</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bb60e9c0bfb7d3cd096151a9317a6481_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"438\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb\" width=\"438\" data-original=\"https://pic2.zhimg.com/v2-bb60e9c0bfb7d3cd096151a9317a6481_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;438&#39; height=&#39;48&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"438\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"438\" data-original=\"https://pic2.zhimg.com/v2-bb60e9c0bfb7d3cd096151a9317a6481_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bb60e9c0bfb7d3cd096151a9317a6481_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d3000c67e928b48e4f082198513bd382_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"20\" class=\"content_image\" width=\"313\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;313&#39; height=&#39;20&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"20\" class=\"content_image lazy\" width=\"313\" data-actualsrc=\"https://pic3.zhimg.com/v2-d3000c67e928b48e4f082198513bd382_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-597c36df47f7c6bdd1511e2bd004c5c5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"305\" data-rawheight=\"29\" class=\"content_image\" width=\"305\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;305&#39; height=&#39;29&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"305\" data-rawheight=\"29\" class=\"content_image lazy\" width=\"305\" data-actualsrc=\"https://pic2.zhimg.com/v2-597c36df47f7c6bdd1511e2bd004c5c5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0f6a64243df39fa54956201e659f1d1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"285\" data-rawheight=\"27\" class=\"content_image\" width=\"285\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;285&#39; height=&#39;27&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"285\" data-rawheight=\"27\" class=\"content_image lazy\" width=\"285\" data-actualsrc=\"https://pic2.zhimg.com/v2-0f6a64243df39fa54956201e659f1d1d_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/yuzhihui_no1/article/details/44198701\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b619f26001a8a79204caee6ced1ac626_ipico.jpg\" data-image-width=\"448\" data-image-height=\"558\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">排序算法之 快速排序 及其时间复杂度和空间复杂度</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-baea230a561dd8871744c131a735a33b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"311\" class=\"content_image\" width=\"348\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;348&#39; height=&#39;311&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"311\" class=\"content_image lazy\" width=\"348\" data-actualsrc=\"https://pic4.zhimg.com/v2-baea230a561dd8871744c131a735a33b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2231592173e8dcab42cbd7c2f8b28753_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb\" width=\"591\" data-original=\"https://pic4.zhimg.com/v2-2231592173e8dcab42cbd7c2f8b28753_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;591&#39; height=&#39;231&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"591\" data-original=\"https://pic4.zhimg.com/v2-2231592173e8dcab42cbd7c2f8b28753_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2231592173e8dcab42cbd7c2f8b28753_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35038745", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 1, 
            "title": "SVM支持向量机", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-488081691eb08473c5bb9623c354d5ce_b.jpg\"/></figure><p><b>SVM的优点：</b></p><ol><li>SVM理论提供了一种避开高维空间的复杂性，,直接用此空间的内积函数(既是核函数),再利用在线性可分的情况下的求解方法直接求解对应的高维空间的决策问题。</li><li>当核函数已知,可以简化高维空间问题的求解难度</li><li>SVM是基于小样本统计理论的基础上的,这符合机器学习的目的</li><li>支持向量机比神经网络具有较好的泛化推广能力</li></ol><p><b>SVM的缺点：</b></p><ol><li>SVM算法对大规模训练样本难以实施</li><li>用SVM解决多分类问题存在困难</li></ol><hr/><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2fd0daf007992bfb61f856169fbcf664_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"456\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb\" width=\"456\" data-original=\"https://pic1.zhimg.com/v2-2fd0daf007992bfb61f856169fbcf664_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;456&#39; height=&#39;384&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"456\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"456\" data-original=\"https://pic1.zhimg.com/v2-2fd0daf007992bfb61f856169fbcf664_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2fd0daf007992bfb61f856169fbcf664_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bcde0b5ab99b259fdb272518f804e964_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"295\" data-rawheight=\"394\" class=\"content_image\" width=\"295\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;295&#39; height=&#39;394&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"295\" data-rawheight=\"394\" class=\"content_image lazy\" width=\"295\" data-actualsrc=\"https://pic1.zhimg.com/v2-bcde0b5ab99b259fdb272518f804e964_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-124544833599ba4b78027db5648ab232_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic3.zhimg.com/v2-124544833599ba4b78027db5648ab232_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;545&#39; height=&#39;395&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"545\" data-original=\"https://pic3.zhimg.com/v2-124544833599ba4b78027db5648ab232_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-124544833599ba4b78027db5648ab232_b.jpg\"/></figure><p><b>SVM的核函数（我认为）：</b></p><ol><li><b>多项式核函数并未升维（错）</b></li><li><b>高斯核函数：</b>可以表述无限大空间的变换（对）</li><li>线性核函数是非线性分离器（错）</li><li>核函数即特征映射（错）</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c250290d79ff11451b9bd3f25e791bc6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"382\" class=\"content_image\" width=\"348\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;348&#39; height=&#39;382&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"382\" class=\"content_image lazy\" width=\"348\" data-actualsrc=\"https://pic3.zhimg.com/v2-c250290d79ff11451b9bd3f25e791bc6_b.jpg\"/></figure><hr/><p>SVM的主要思想可以概括为两点：</p><ol><li>它是针对线性可分情况进行分析，对于线性不可分的情况，通过使用非线性<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2598%25A0%25E5%25B0%2584\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">映射</a>算法将低维输入空间线性不可分的样本转化为<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%25AB%2598%25E7%25BB%25B4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高维</a>特征空间使其线性可分，从而使得高维特征空间采用线性算法对样本的非线性特征进行线性分析成为可能。【这就说明要非线性的分离器，我们就需要使用非线性的核函数】</li><li>它基于结构风险最小化理论之上在特征空间中构建最优超平面，使得学习器得到全局最优化，并且在整个样本空间的期望以某个概率满足一定上界。</li></ol><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35041700", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 2, 
            "title": "有序数组与链表简单介绍", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_b.jpg\"/></figure><hr/><p><b>1，有序数组</b></p><p>有序数组是一种特殊的数组，里面的元素，按一定的顺序排列，我们这里假设由小到大排列。</p><p>二分法来查找数组中特定的元素，这种算法的思想是：每查找一次，便将查找的范围缩小一半，所以叫做二分法查找。</p><p>有序数组的优点就是增加了查询的效率，但是它并没有提高删除和插入元素的效率，因此，对于有序数组更适合用于查询的领域。</p><hr/><p><b>2，链表</b></p><ol><li>链表是一种物理<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25AD%2598%25E5%2582%25A8%25E5%258D%2595%25E5%2585%2583\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储单元</a>上非连续、非顺序的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25AD%2598%25E5%2582%25A8%25E7%25BB%2593%25E6%259E%2584\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储结构</a>，<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25B0%25E6%258D%25AE%25E5%2585%2583%25E7%25B4%25A0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据元素</a>的逻辑顺序是通过链表中的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%258C%2587%25E9%2592%2588\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">指针</a>链接次序实现的。</li><li>链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。</li><li>每个结点包括两个部分：一个是存储<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25B0%25E6%258D%25AE%25E5%2585%2583%25E7%25B4%25A0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据元素</a>的数据域，另一个是存储下一个结点地址的<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%258C%2587%25E9%2592%2588\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">指针</a>域。 </li></ol><p>注：由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7a0a3e2d8d7f0668c95efb56812e3aa8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"643\" data-original=\"https://pic1.zhimg.com/v2-7a0a3e2d8d7f0668c95efb56812e3aa8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;643&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"643\" data-original=\"https://pic1.zhimg.com/v2-7a0a3e2d8d7f0668c95efb56812e3aa8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7a0a3e2d8d7f0668c95efb56812e3aa8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-03a4c708a799dabf470ac8714d9d726f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-03a4c708a799dabf470ac8714d9d726f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-03a4c708a799dabf470ac8714d9d726f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-03a4c708a799dabf470ac8714d9d726f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f247e3eaf9929a2e5d0213c1a65ab52d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"212\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic2.zhimg.com/v2-f247e3eaf9929a2e5d0213c1a65ab52d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;212&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"212\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic2.zhimg.com/v2-f247e3eaf9929a2e5d0213c1a65ab52d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f247e3eaf9929a2e5d0213c1a65ab52d_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/juanqinyang/article/details/51351619\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-28faa8527f27e60852dc7abbf6a3ecb7_180x120.jpg\" data-image-width=\"679\" data-image-height=\"251\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据结构：链表(linked-list) - CSDN博客</a><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35042579", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 0, 
            "title": "二叉树", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/616907742257221532.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一棵完全二叉树上有1001个结点，其中叶子结点的个数是_百度知道</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-eba82b8f4dbb63cb80a1a3deb9caf16c_b.jpg\"/></figure><a href=\"https://zhuanlan.zhihu.com/p/35041700\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-4cbb3b9d229c799701d8dec8aba7cd0d_180x120.jpg\" data-image-width=\"1024\" data-image-height=\"640\" class=\"internal\">小白：有序数组与链表简单介绍</a><p>在实际使用时会根据链表和有序数组等数据结构的不同优势进行选择。有序数组的优势在于二分查找，链表的优势在于数据项的插入和数据项的删除。但是在有序数组中插入数据就会很慢，同样在链表中查找数据项效率就很低。综合以上情况，二叉树可以利用链表和有序数组的优势，同时可以合并有序数组和链表的优势，<b>二叉树也是一种常用的数据结构</b>。</p><p><b>定义：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-34b26815fe5d39967851b8a724a5bc08_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"429\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic1.zhimg.com/v2-34b26815fe5d39967851b8a724a5bc08_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;658&#39; height=&#39;429&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"429\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"658\" data-original=\"https://pic1.zhimg.com/v2-34b26815fe5d39967851b8a724a5bc08_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-34b26815fe5d39967851b8a724a5bc08_b.jpg\"/></figure><hr/><p><b>特点：</b></p><p>二叉树一个节点左子节点的关键字小于这个节点，右子节点关键字大于或等于这个父节点。（关键字：可以看作是值）</p><p><b>插入：</b></p><p>搜索节点顺序规则进行插入。具体规则是：如果数据项比父节点的数据项要小，则插在父节点的左节点（leftNode），如果比父节点的数据项要大，则将新的node插入在父节点的右节点处（rightNode）。【时间复杂度最差：O(n)，最好：O(logn)】<a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/149961839.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">二叉排序树中插入一个结点的时间复杂度是多少_百度知道</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dc86a9fecac85f99e43c1f325967a621_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"477\" class=\"origin_image zh-lightbox-thumb\" width=\"495\" data-original=\"https://pic2.zhimg.com/v2-dc86a9fecac85f99e43c1f325967a621_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;495&#39; height=&#39;477&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"477\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"495\" data-original=\"https://pic2.zhimg.com/v2-dc86a9fecac85f99e43c1f325967a621_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dc86a9fecac85f99e43c1f325967a621_b.jpg\"/></figure><p><b>遍历：</b></p><p>按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-27b082864bfa0144fc075789324a0f80_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic1.zhimg.com/v2-27b082864bfa0144fc075789324a0f80_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;573&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"573\" data-original=\"https://pic1.zhimg.com/v2-27b082864bfa0144fc075789324a0f80_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-27b082864bfa0144fc075789324a0f80_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7442069a35b039f0017a28549a233fda_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"441\" data-original=\"https://pic3.zhimg.com/v2-7442069a35b039f0017a28549a233fda_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;441&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"441\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"441\" data-original=\"https://pic3.zhimg.com/v2-7442069a35b039f0017a28549a233fda_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7442069a35b039f0017a28549a233fda_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/soundwave_/article/details/53120766\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-53e33ba11ee6a2ed6b4b564f476d9048_180x120.jpg\" data-image-width=\"381\" data-image-height=\"282\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">看懂二叉树的三种遍历 - CSDN博客</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7bfc1c3d974e4366e1713d1e4c25d5cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"393\" data-rawheight=\"298\" class=\"content_image\" width=\"393\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;393&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"393\" data-rawheight=\"298\" class=\"content_image lazy\" width=\"393\" data-actualsrc=\"https://pic4.zhimg.com/v2-7bfc1c3d974e4366e1713d1e4c25d5cf_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bc0eca395d4f92461a5ec62e8ff3b36e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"352\" data-rawheight=\"147\" class=\"content_image\" width=\"352\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;352&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"352\" data-rawheight=\"147\" class=\"content_image lazy\" width=\"352\" data-actualsrc=\"https://pic3.zhimg.com/v2-bc0eca395d4f92461a5ec62e8ff3b36e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c8eb5f9bfab4c614bc68f74f01ccddb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"79\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic1.zhimg.com/v2-c8eb5f9bfab4c614bc68f74f01ccddb0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;805&#39; height=&#39;79&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"79\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"805\" data-original=\"https://pic1.zhimg.com/v2-c8eb5f9bfab4c614bc68f74f01ccddb0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c8eb5f9bfab4c614bc68f74f01ccddb0_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/616907742257221532.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b350508ceffdc01a3b232299c504678a_180x120.jpg\" data-image-width=\"412\" data-image-height=\"249\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一棵完全二叉树上有1001个结点，其中叶子结点的个数是_百度知道</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8b09b2eb26abfe598c1ea2655cd13c54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic1.zhimg.com/v2-8b09b2eb26abfe598c1ea2655cd13c54_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic1.zhimg.com/v2-8b09b2eb26abfe598c1ea2655cd13c54_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8b09b2eb26abfe598c1ea2655cd13c54_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/454757916.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">二叉树的中序遍历和前序遍历知道怎样求后序遍历？_百度知道</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f961fa2480fa801098dfc78405651410_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-f961fa2480fa801098dfc78405651410_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3120&#39; height=&#39;4160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-f961fa2480fa801098dfc78405651410_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f961fa2480fa801098dfc78405651410_b.jpg\"/></figure><p>设二叉树中关键字由l至1000的整数构成，现要检索关键字为363的结点，下述关键字序列中，_____不可能是二叉排序树上搜索到的序列。</p><p>A、2, 252, 401, 398, 330, 344, 397, 363</p><p>B、924, 220, 911, 244, 898, 258, 362, 363</p><p>C、925, 202, 911, 240, 912, 245, 363 </p><p>D、2, 399, 387, 219, 266, 382, 381, 278, 363</p><p><b>？选哪个啊</b></p><p>二叉排序树：</p><p>1. 若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</p><p>2. 若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</p><p>3. 任意节点的左、右子树也分别为二叉查找树。</p><p>4. 没有键值相等的节点。(C)</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/u011240016/article/details/52860653\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-556065156a5a32fb0fb3e6013446c8aa_ipico.jpg\" data-image-width=\"760\" data-image-height=\"818\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">二叉排序树序列判定 - CSDN博客</a><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1a28fb0602b4bb7a3e11d9174ffc04e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic1.zhimg.com/v2-1a28fb0602b4bb7a3e11d9174ffc04e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic1.zhimg.com/v2-1a28fb0602b4bb7a3e11d9174ffc04e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1a28fb0602b4bb7a3e11d9174ffc04e8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1ad1fc8025e7a07f2cfb4f5e098e114a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"601\" data-original=\"https://pic3.zhimg.com/v2-1ad1fc8025e7a07f2cfb4f5e098e114a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;601&#39; height=&#39;390&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"601\" data-original=\"https://pic3.zhimg.com/v2-1ad1fc8025e7a07f2cfb4f5e098e114a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1ad1fc8025e7a07f2cfb4f5e098e114a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-eec24c7597281d0e56afcca9d372cdf8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic1.zhimg.com/v2-eec24c7597281d0e56afcca9d372cdf8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;508&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"508\" data-original=\"https://pic1.zhimg.com/v2-eec24c7597281d0e56afcca9d372cdf8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-eec24c7597281d0e56afcca9d372cdf8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9d85001eeaa6e419d5cc57dc1c0803c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"146\" data-rawheight=\"28\" class=\"content_image\" width=\"146\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;146&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"146\" data-rawheight=\"28\" class=\"content_image lazy\" width=\"146\" data-actualsrc=\"https://pic4.zhimg.com/v2-9d85001eeaa6e419d5cc57dc1c0803c3_b.jpg\"/></figure><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35032299", 
            "userName": "小白", 
            "userLink": "https://www.zhihu.com/people/cc2e2e485f447f622011a614a93311b2", 
            "upvote": 3, 
            "title": "图像边缘检测算子", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-474e35cd0784132b7f555ed607c13e7e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-474e35cd0784132b7f555ed607c13e7e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-474e35cd0784132b7f555ed607c13e7e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-474e35cd0784132b7f555ed607c13e7e_b.jpg\"/></figure><p>a)<b>Roberts算子</b></p><p>Roberts算子是一种斜向偏差分的梯度计算方法，梯度的大小代表边缘的强度，梯度的方向与边缘的走向垂直。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8d9df398c6d8028f523147f657959645_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"246\" data-rawheight=\"93\" class=\"content_image\" width=\"246\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;246&#39; height=&#39;93&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"246\" data-rawheight=\"93\" class=\"content_image lazy\" width=\"246\" data-actualsrc=\"https://pic2.zhimg.com/v2-8d9df398c6d8028f523147f657959645_b.jpg\"/></figure><p>Roberts算子定位精度高，在水平和垂直方向的效果好，但对噪声敏感。</p><hr/><p>b)<b>Prewitt算子</b></p><p>Prewitt算子是一种边缘样板算子，利用像素点上下左右邻点灰度差，在边缘处达到极值检测边缘，对噪声具有平滑的作用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c4281897c3ea3b2b06e3aae5bdb30276_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"136\" class=\"content_image\" width=\"341\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;341&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"136\" class=\"content_image lazy\" width=\"341\" data-actualsrc=\"https://pic3.zhimg.com/v2-c4281897c3ea3b2b06e3aae5bdb30276_b.jpg\"/></figure><hr/><p>c)<b>Canny算子</b></p><p>Canny算子把边缘检测问题转换为检测单位函数极大值的问题来考虑。它利用高斯模型，借助图像滤波的概念指出一个好的边缘检测算子应该具有3个指标：</p><p>1.低失误率，既要少将真的边缘丢弃，也要少将非边缘判为边缘；</p><p>2.高位置精度，检测出的边缘应在真正的边界上；</p><p>3.单像素边缘，即对每个边缘有唯一的响应，得到的边界为单像素宽。</p><p>考虑到上述三个条件，Canny提出了判定边缘检测算子的3个准则：信噪比准则、定位精度准则和单边缘响应准则。满足上述三个条件的算子称为Canny算子。Canny边缘检测算法的步骤如下:</p><p>(1)用高斯滤波器平滑图像；</p><p>(2)用一阶偏导的有限差分来计算梯度的幅值和方向；</p><p>(3)对梯度幅值进行非极大值抑制；</p><p>(4)用双阈值算法进行检测和链接边缘。</p><hr/><p>d)<b>Sobel算子</b></p><p>Sobel算子是一组方向算子，从不同的方向检测边缘。Sobel算子不是简单地求平均再差分，而是加强了中心像素上下左右4个方向像素的权值，运算结果是一幅边缘图。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-46b50ff8dd26198a4cb8794e13e51218_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"132\" class=\"content_image\" width=\"348\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;348&#39; height=&#39;132&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"132\" class=\"content_image lazy\" width=\"348\" data-actualsrc=\"https://pic1.zhimg.com/v2-46b50ff8dd26198a4cb8794e13e51218_b.jpg\"/></figure><p>所以：4个算子，我认为复杂度最高的是Canny算子。</p><p>欢迎关注公众号：huangxiaobai880</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_174754982"
}
