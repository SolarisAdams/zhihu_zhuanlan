{
    "title": "Programming & Tools", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/ggff-ss", 
        "https://www.zhihu.com/people/enriczhang", 
        "https://www.zhihu.com/people/wo-liu-kan-kan", 
        "https://www.zhihu.com/people/shadow-32-57", 
        "https://www.zhihu.com/people/gogo-chan", 
        "https://www.zhihu.com/people/lian-zhi-wen", 
        "https://www.zhihu.com/people/kinwai-39", 
        "https://www.zhihu.com/people/wang-shuo-60-21", 
        "https://www.zhihu.com/people/zhuo-sun-40", 
        "https://www.zhihu.com/people/shao-lin-xiao-zi-24", 
        "https://www.zhihu.com/people/mai-zang-1", 
        "https://www.zhihu.com/people/tan-wei-43", 
        "https://www.zhihu.com/people/chen-jing-yao-88", 
        "https://www.zhihu.com/people/xi-hong-shi-ji-dan-mian-46", 
        "https://www.zhihu.com/people/zhao-qi-bo-21", 
        "https://www.zhihu.com/people/henrickchen", 
        "https://www.zhihu.com/people/dong-feng-66-72", 
        "https://www.zhihu.com/people/buhezuobugaoxing", 
        "https://www.zhihu.com/people/5473", 
        "https://www.zhihu.com/people/shi-jing-11", 
        "https://www.zhihu.com/people/4thirteen2one", 
        "https://www.zhihu.com/people/inreason", 
        "https://www.zhihu.com/people/yann-timberlake", 
        "https://www.zhihu.com/people/feng-liu-ren-wu-10", 
        "https://www.zhihu.com/people/summon-39-37", 
        "https://www.zhihu.com/people/boomdrummer", 
        "https://www.zhihu.com/people/noeltoby", 
        "https://www.zhihu.com/people/li-yiming-85-24", 
        "https://www.zhihu.com/people/RenZY", 
        "https://www.zhihu.com/people/a-a-a-57-23", 
        "https://www.zhihu.com/people/dengwenwu", 
        "https://www.zhihu.com/people/tianbao-zhang", 
        "https://www.zhihu.com/people/jian-ji-29-97", 
        "https://www.zhihu.com/people/shu-jian-piao-ling-84", 
        "https://www.zhihu.com/people/zbs-76", 
        "https://www.zhihu.com/people/obovgood", 
        "https://www.zhihu.com/people/minounou", 
        "https://www.zhihu.com/people/ling-hu-chong-6-4", 
        "https://www.zhihu.com/people/lenged2016", 
        "https://www.zhihu.com/people/jinyu0310", 
        "https://www.zhihu.com/people/qiao-hai-jun", 
        "https://www.zhihu.com/people/xie-tao-47-50", 
        "https://www.zhihu.com/people/kee-yan", 
        "https://www.zhihu.com/people/chen-chun-sheng-39-24", 
        "https://www.zhihu.com/people/kintzhao", 
        "https://www.zhihu.com/people/1999foxes", 
        "https://www.zhihu.com/people/syaka", 
        "https://www.zhihu.com/people/songzhili", 
        "https://www.zhihu.com/people/cheng-xun-ri", 
        "https://www.zhihu.com/people/huang-lang-wen-73", 
        "https://www.zhihu.com/people/uncle-shushu", 
        "https://www.zhihu.com/people/shang-jiang-jun-36", 
        "https://www.zhihu.com/people/chen-xiao-wei-65-74", 
        "https://www.zhihu.com/people/chen-kai-7-76", 
        "https://www.zhihu.com/people/zhang-wei-kang-97", 
        "https://www.zhihu.com/people/huang-en-da-11", 
        "https://www.zhihu.com/people/G.Young", 
        "https://www.zhihu.com/people/liwenkang", 
        "https://www.zhihu.com/people/can-volcano-75", 
        "https://www.zhihu.com/people/shen-ying-54", 
        "https://www.zhihu.com/people/he-yizhi-ben-ben"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/80299784", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 3, 
            "title": "DALI，加速视觉类数据读取", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qq.com</a></p><hr/><a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/effective-pytorch/20190908\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DALI，加速视觉类数据读取</a><p>来自<a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/getting%2520started.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DALI文档</a></p><p>视觉类的数据通常都是图像等数据，而深度学习框架提供的数据加载有两种情况：</p><ul><li>快，灵活性差，由c++编写，由python提供一个固定的接口</li><li>慢，灵活性好，可以灵活定制，但是速度慢，一个重要的原因是python的GIL。</li></ul><p>DALI优化了数据的读取，可以兼顾速度和灵活性，同时可以利用GPU加速。</p><p>假设一个猫狗数据为：</p><div class=\"highlight\"><pre><code class=\"language-text\">images\n|-file_list.txt\n|-images/dog\n  |-dog_4.jpg\n  |-dog_5.jpg\n  |-dog_9.jpg\n  |-dog_6.jpg\n  |-dog_3.jpg\n  |-dog_7.jpg\n  |-dog_10.jpg\n  |-dog_2.jpg\n  |-dog_8.jpg\n  |-dog_1.jpg\n  |-dog_11.jpg\n|-images/kitten\n  |-cat_10.jpg\n  |-cat_5.jpg\n  |-cat_9.jpg\n  |-cat_8.jpg\n  |-cat_1.jpg\n  |-cat_7.jpg\n  |-cat_6.jpg\n  |-cat_3.jpg\n  |-cat_2.jpg\n  |-cat_4.jpg</code></pre></div><h2>基本用法</h2><div class=\"highlight\"><pre><code class=\"language-text\">import nvidia.dali.ops as ops\nimport nvidia.dali.types as types\n\nimage_dir = &#34;images&#34;\nbatch_size = 8\n\nclass SimplePipeline(Pipeline):\n    def __init__(self, batch_size, num_threads, device_id):\n        super(SimplePipeline, self).__init__(batch_size, num_threads, device_id, seed = 12)\n        self.input = ops.FileReader(file_root = image_dir)\n        # instead of path to file directory file with pairs image_name image_label_value can be provided\n        # self.input = ops.FileReader(file_root = image_dir, file_list = image_dir + &#39;/file_list.txt&#39;)\n        self.decode = ops.ImageDecoder(device = &#39;cpu&#39;, output_type = types.RGB)\n\n    def define_graph(self):\n        jpegs, labels = self.input()\n        images = self.decode(jpegs)\n        return (images, labels)</code></pre></div><p>通常只需要写上面两个方法就够了，指定一下批量大小，CPU线程数，是否使用GPU，随机等设置。</p><div class=\"highlight\"><pre><code class=\"language-text\">pipe = SimplePipeline(batch_size, 1, 0)\npipe.build()\npipe_out = pipe.run()\nprint(pipe_out)</code></pre></div><p>返回的是两个TensorListCPU对象：</p><div class=\"highlight\"><pre><code class=\"language-text\">[&lt;nvidia.dali.backend_impl.TensorListCPU object at 0x7ff6080bf180&gt;, \n&lt;nvidia.dali.backend_impl.TensorListCPU object at 0x7ff6080bf5e0&gt;]</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">images, labels = pipe_out\nprint(&#34;Images is_dense_tensor: &#34; + str(images.is_dense_tensor()))\nprint(&#34;Labels is_dense_tensor: &#34; + str(labels.is_dense_tensor()))</code></pre></div><p>Images is_dense_tensor: False<br/>Labels is_dense_tensor: True</p><p>如果is_dense_tensor为True，那么可以转换为numpy：</p><div class=\"highlight\"><pre><code class=\"language-text\">import numpy as np\n\nlabels_tensor = labels.as_tensor()\n\nprint (labels_tensor.shape())\nprint (np.array(labels_tensor))</code></pre></div><p>[8L, 1L]<br/>[[0]<br/> [0]<br/> [0]<br/> [0]<br/> [0]<br/> [0]<br/> [0]<br/> [0]]</p><h2>加入数据增强</h2><ul><li>随机打乱</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">class ShuffledSimplePipeline(Pipeline):\n    def __init__(self, batch_size, num_threads, device_id):\n        super(ShuffledSimplePipeline, self).__init__(batch_size, num_threads, device_id, seed = 12)\n        self.input = ops.FileReader(file_root = image_dir, random_shuffle = True, initial_fill = 21)\n        self.decode = ops.ImageDecoder(device = &#39;cpu&#39;, output_type = types.RGB)\n\n    def define_graph(self):\n        jpegs, labels = self.input()\n        images = self.decode(jpegs)\n        return (images, labels)</code></pre></div><p>initial_fill 参数制定了缓存的大小，默认是1000，如果是小数据集，会导致大量的复制，这里就指定数据集的大小。</p><ul><li>旋转</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">class RotatedSimplePipeline(Pipeline):\n    def __init__(self, batch_size, num_threads, device_id):\n        super(RotatedSimplePipeline, self).__init__(batch_size, num_threads, device_id, seed = 12)\n        self.input = ops.FileReader(file_root = image_dir, random_shuffle = True, initial_fill = 21)\n        self.decode = ops.ImageDecoder(device = &#39;cpu&#39;, output_type = types.RGB)\n        self.rotate = ops.Rotate(angle = 10.0)\n\n    def define_graph(self):\n        jpegs, labels = self.input()\n        images = self.decode(jpegs)\n        rotated_images = self.rotate(images)\n        return (rotated_images, labels)</code></pre></div><ul><li>随机旋转</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">class RandomRotatedSimplePipeline(Pipeline):\n    def __init__(self, batch_size, num_threads, device_id):\n        super(RandomRotatedSimplePipeline, self).__init__(batch_size, num_threads, device_id, seed = 12)\n        self.input = ops.FileReader(file_root = image_dir, random_shuffle = True, initial_fill = 21)\n        self.decode = ops.ImageDecoder(device = &#39;cpu&#39;, output_type = types.RGB)\n        self.rotate = ops.Rotate()\n        self.rng = ops.Uniform(range = (-10.0, 10.0))\n\n    def define_graph(self):\n        jpegs, labels = self.input()\n        images = self.decode(jpegs)\n        angle = self.rng()\n        rotated_images = self.rotate(images, angle = angle)\n        return (rotated_images, labels)</code></pre></div><h2>GPU加速</h2><div class=\"highlight\"><pre><code class=\"language-text\">class RandomRotatedGPUPipeline(Pipeline):\n    def __init__(self, batch_size, num_threads, device_id):\n        super(RandomRotatedGPUPipeline, self).__init__(batch_size, num_threads, device_id, seed = 12)\n        self.input = ops.FileReader(file_root = image_dir, random_shuffle = True, initial_fill = 21)\n        self.decode = ops.ImageDecoder(device = &#39;cpu&#39;, output_type = types.RGB)\n        self.rotate = ops.Rotate(device = &#34;gpu&#34;)\n        self.rng = ops.Uniform(range = (-10.0, 10.0))\n\n    def define_graph(self):\n        jpegs, labels = self.input()\n        images = self.decode(jpegs)\n        angle = self.rng()\n        rotated_images = self.rotate(images.gpu(), angle = angle)\n        return (rotated_images, labels)</code></pre></div><p>两点：在Rotate中设置device参数，对于输入images添加<code>.gpu()</code>拷贝到GPU中。取到结果后，不能如果想要查看内容，需要先拷贝回cpu中，<code>images.as_cpu()</code>。</p><ul><li>混合解码</li></ul><p>对于高分辨率的图像，解码可能成为瓶颈，因此出现了nvJPEG库，编码和解码分别放在CPU和GPU中，降低解码时间。</p><div class=\"highlight\"><pre><code class=\"language-text\">class HybridPipeline(Pipeline):\n    def __init__(self, batch_size, num_threads, device_id):\n        super(HybridPipeline, self).__init__(batch_size, num_threads, device_id, seed = 12)\n        self.input = ops.FileReader(file_root = image_dir, random_shuffle = True, initial_fill = 21)\n        self.decode = ops.ImageDecoder(device = &#34;mixed&#34;, output_type = types.RGB)\n\n    def define_graph(self):\n        jpegs, labels = self.input()\n        images = self.decode(jpegs)\n        # images are on the GPU\n        return (images, labels)</code></pre></div><p>比较一下cpu和mixed的速度：</p><div class=\"highlight\"><pre><code class=\"language-text\">from timeit import default_timer as timer\n\ntest_batch_size = 64\n\ndef speedtest(pipeclass, batch, n_threads):\n    pipe = pipeclass(batch, n_threads, 0)\n    pipe.build()\n    # warmup\n    for i in range(5):\n        pipe.run()\n    # test\n    n_test = 20\n    t_start = timer()\n    for i in range(n_test):\n        pipe.run()\n    t = timer() - t_start\n    print(&#34;Speed: {} imgs/s&#34;.format((n_test * batch)/t))</code></pre></div><p>speedtest(ShuffledSimplePipeline, test_batch_size, 4)<br/>Speed: 2905.71010277 imgs/s<br/>speedtest(HybridPipeline, test_batch_size, 4)<br/>Speed: 5714.61475087 imgs/s</p><h2>多种数据格式支持</h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/dataloading_lmdb.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">加载LMDB</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/dataloading_recordio.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">加载MXNet recordIO</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/dataloading_tfrecord.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">加载TensorFlow TFRecord</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/external_input.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">自定义数据格式</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/coco_reader.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读取COCO</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/augmentation_gallery.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">多种数据增强方式</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/video/superres_pytorch/README.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">视频读取</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/optical_flow/optical_flow_example.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">光流</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/deeplearning/sdk/dali-developer-guide/docs/examples/extend/create_a_custom_operator.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">自定义运算</a></li></ul>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }
            ], 
            "comments": [
                {
                    "userName": "young", 
                    "userLink": "https://www.zhihu.com/people/49e6c31f0718b12cea6d6f40b322e470", 
                    "content": "<p>这么好的文章怎么没人赞呢</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "young", 
                    "userLink": "https://www.zhihu.com/people/49e6c31f0718b12cea6d6f40b322e470", 
                    "content": "<p>请问FileReader 是不是严格限制了读取目录结构的？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "可以传入file list，就可以设置不同的目录格式", 
                            "likes": 0, 
                            "replyToAuthor": "young"
                        }, 
                        {
                            "userName": "young", 
                            "userLink": "https://www.zhihu.com/people/49e6c31f0718b12cea6d6f40b322e470", 
                            "content": "<p>就是使用ExternalSource operator这个来做吗？</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "young", 
                    "userLink": "https://www.zhihu.com/people/49e6c31f0718b12cea6d6f40b322e470", 
                    "content": "<p>不过我发现DALI似乎不太好自定义采样策略，唯一可能的办法就是把采样好的样本顺序直接写到file_list 文件中。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "ssby", 
                            "userLink": "https://www.zhihu.com/people/7336aa8ee1c2611b58ecdc83a95f836f", 
                            "content": "嗯 如果是用的lmdb或者recordio这种感觉就不是很方便", 
                            "likes": 0, 
                            "replyToAuthor": "young"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73653906", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 3, 
            "title": "TeamViewer的替代软件：向日葵和AnyDesk", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qq.com</a></p><hr/><p>由于TeamViewer总是检测到商业用途，没办法，只能寻找替代软件，然后找到了两个：向日葵和AnyDesk。</p><a href=\"https://link.zhihu.com/?target=https%3A//anydesk.com/zhs\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-ef7aa217a2136c67d2478415b5b41fad_ipico.jpg\" data-image-width=\"800\" data-image-height=\"706\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">快速远程桌面应用程序 - AnyDesk</a><a href=\"https://link.zhihu.com/?target=https%3A//sunlogin.oray.com/zh_CN/download\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-030939b8a2ef0b8187ef205e5137b5ae_ipico.jpg\" data-image-width=\"124\" data-image-height=\"124\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">向日葵远程控制软件_app下载_视频监控软件_远程开机软件下载-Oray贝锐科技向日葵</a><p>主要是个人免费，由于我使用的是Manjaro，而向日葵不支持，所以使用的是AnyDesk。如果是Centos、Ubuntu、Deepin等可以使用向日葵。</p><p>为什么不使用其他的远程连接工具？很多很方便，但是需要IP地址，由于不在同一个局域网，IP访问不方便，不过幸好，这两款软件都不要IP，它会给你的电脑一个ID，在需要连接的时候，输入这个ID就可以连接了，十分方便。</p><p></p>", 
            "topic": [
                {
                    "tag": "远程控制", 
                    "tagLink": "https://api.zhihu.com/topics/19624651"
                }, 
                {
                    "tag": "开发工具", 
                    "tagLink": "https://api.zhihu.com/topics/19564417"
                }, 
                {
                    "tag": "远程办公", 
                    "tagLink": "https://api.zhihu.com/topics/19826351"
                }
            ], 
            "comments": [
                {
                    "userName": "micksonj", 
                    "userLink": "https://www.zhihu.com/people/e20632ea7dbd8c15e7899016609bd06b", 
                    "content": "teamviwer怎么检测到商业用途的", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "可能是根据ip吧", 
                            "likes": 0, 
                            "replyToAuthor": "micksonj"
                        }
                    ]
                }, 
                {
                    "userName": "KaEkihan", 
                    "userLink": "https://www.zhihu.com/people/efbcdd0a5e4c08e6e51d4b61dcf00f05", 
                    "content": "<p>anydesk实在是太卡了 达不到team viewer的体验</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/65165086", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 1, 
            "title": "优化C/C++代码的tips", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qq.com</a></p><hr/><p>pdf可下载：</p><a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/2019/Tips-for-Optimizing-C-Cpp-Code.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/2</span><span class=\"invisible\">019/Tips-for-Optimizing-C-Cpp-Code.pdf</span><span class=\"ellipsis\"></span></a><p>出处找到后补上。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9374ba4210e2475278f813181f455622_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb\" width=\"1700\" data-original=\"https://pic3.zhimg.com/v2-9374ba4210e2475278f813181f455622_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1700&#39; height=&#39;2200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1700\" data-original=\"https://pic3.zhimg.com/v2-9374ba4210e2475278f813181f455622_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9374ba4210e2475278f813181f455622_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0b86bdb0a54851bd5da235471106d12f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb\" width=\"1700\" data-original=\"https://pic4.zhimg.com/v2-0b86bdb0a54851bd5da235471106d12f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1700&#39; height=&#39;2200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1700\" data-original=\"https://pic4.zhimg.com/v2-0b86bdb0a54851bd5da235471106d12f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0b86bdb0a54851bd5da235471106d12f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8339e194e6dfe4ce8310220927a49849_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb\" width=\"1700\" data-original=\"https://pic2.zhimg.com/v2-8339e194e6dfe4ce8310220927a49849_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1700&#39; height=&#39;2200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1700\" data-original=\"https://pic2.zhimg.com/v2-8339e194e6dfe4ce8310220927a49849_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8339e194e6dfe4ce8310220927a49849_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c4f1ea93e77bcb7dc311519aec53bd66_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb\" width=\"1700\" data-original=\"https://pic3.zhimg.com/v2-c4f1ea93e77bcb7dc311519aec53bd66_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1700&#39; height=&#39;2200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1700\" data-rawheight=\"2200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1700\" data-original=\"https://pic3.zhimg.com/v2-c4f1ea93e77bcb7dc311519aec53bd66_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c4f1ea93e77bcb7dc311519aec53bd66_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }, 
                {
                    "tag": "代码", 
                    "tagLink": "https://api.zhihu.com/topics/19559575"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/63564407", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "C语言应该怎样写", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qq.com</a></p><hr/><p>pdf文档可下载：</p><a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/2019/how-to-c-programmer-magazine.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/2</span><span class=\"invisible\">019/how-to-c-programmer-magazine.pdf</span><span class=\"ellipsis\"></span></a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4cffe8d3963fff2e57870e79a814d138_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"790\" class=\"origin_image zh-lightbox-thumb\" width=\"626\" data-original=\"https://pic1.zhimg.com/v2-4cffe8d3963fff2e57870e79a814d138_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;626&#39; height=&#39;790&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"790\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"626\" data-original=\"https://pic1.zhimg.com/v2-4cffe8d3963fff2e57870e79a814d138_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4cffe8d3963fff2e57870e79a814d138_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-666d7a6b0b6e0a8f2bfd6ea7d644c9e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"777\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-666d7a6b0b6e0a8f2bfd6ea7d644c9e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;545&#39; height=&#39;777&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"777\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-666d7a6b0b6e0a8f2bfd6ea7d644c9e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-666d7a6b0b6e0a8f2bfd6ea7d644c9e7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-687117a137af023290876b044d4ba1ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"780\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-687117a137af023290876b044d4ba1ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;526&#39; height=&#39;780&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"780\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-687117a137af023290876b044d4ba1ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-687117a137af023290876b044d4ba1ea_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-de6e6d1781a12fe02fddcc33404d633f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"781\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic4.zhimg.com/v2-de6e6d1781a12fe02fddcc33404d633f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;781&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"781\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic4.zhimg.com/v2-de6e6d1781a12fe02fddcc33404d633f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-de6e6d1781a12fe02fddcc33404d633f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7e1f0f8b28534de37690288f34e1fc92_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"509\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"509\" data-original=\"https://pic3.zhimg.com/v2-7e1f0f8b28534de37690288f34e1fc92_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;509&#39; height=&#39;767&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"509\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"509\" data-original=\"https://pic3.zhimg.com/v2-7e1f0f8b28534de37690288f34e1fc92_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7e1f0f8b28534de37690288f34e1fc92_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-847eda166fed9a7a064bdc8214857a86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-847eda166fed9a7a064bdc8214857a86_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;770&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-847eda166fed9a7a064bdc8214857a86_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-847eda166fed9a7a064bdc8214857a86_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ddbad6f7ac64187e65f91e39f263d509_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"759\" class=\"origin_image zh-lightbox-thumb\" width=\"510\" data-original=\"https://pic2.zhimg.com/v2-ddbad6f7ac64187e65f91e39f263d509_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;510&#39; height=&#39;759&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"759\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"510\" data-original=\"https://pic2.zhimg.com/v2-ddbad6f7ac64187e65f91e39f263d509_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ddbad6f7ac64187e65f91e39f263d509_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1cd682add0051bd8c66941ec8201b546_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"536\" data-original=\"https://pic3.zhimg.com/v2-1cd682add0051bd8c66941ec8201b546_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;536&#39; height=&#39;794&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"536\" data-original=\"https://pic3.zhimg.com/v2-1cd682add0051bd8c66941ec8201b546_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1cd682add0051bd8c66941ec8201b546_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/62068103", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 11, 
            "title": "从C语言的结构体到类", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qq.com</a></p><hr/><p>由于C++对C语言层面上的兼容性和相似性，可以比较明显的看出来，C++的类与C的结构体是大同小异的，除了C++的struct除了多了些东西，比如可以控制成员的可见范围，成员函数等似乎没太大区别。当然，对指针熟悉一些的话，可以把指针用来替代成员函数。这里我们将用python作为例子说说逻辑上，C的结构体基本可以实现python类的大体功能。</p><p>首先，类虽然是面向对象的概念，但是对于C而言，多做些封装即可实现大部分的要求。例如先说<b>继承</b>：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span> \n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> \n        <span class=\"k\">pass</span> \n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span> \n    <span class=\"k\">pass</span></code></pre></div><p>可以很容易想到，结构体当然可以做到：</p><div class=\"highlight\"><pre><code class=\"language-text\">struct Animal {}; \nstruct Cat { struct Animal; };</code></pre></div><p>当然面向对象的语言提供了一些语法糖，可以直接访问父类的字段，而这里C要多加一层来访问。但是一个潜在的好处是，你可以明确的区分你访问的变量是来自父类还是子类，而在python中，你则需要多加确认。多继承的方式也是很容易想到的，python要注意菱形继承的问题，而C虽然没有这个问题，但是代码复用却多了些限制。另一种多继承的方法是用一个列表来储存父类们，当然实现起来多少会有些复杂。同时你可能注意到，在python中，我们可以判断一个类是否属于某个父类，而在C中，你大概只能靠这个类有没有那个对应的结构体了（不嫌麻烦的话可以加一个字段来判断，当然这里可以把父类的结构体用指针来表示，用指针连接来判断，但是可能要注意空指针等情况）。</p><p>其次<b>封装</b>，类的一个基本功能就是封装。这里和struct没啥区别，但是注意到，一般像java，python，c++这些天生面向对象的语言一般都可以把函数封装到类里面。C怎么做呢？答案当然是函数指针了。</p><div class=\"highlight\"><pre><code class=\"language-text\"># python\nclass Animal: \n    def func(self): \n        pass\n\n# c\nint dosth(int param){} \nstruct Animal { int (*func)(int); }; \n\nstruct Animal an; an.func = &amp;dosth;</code></pre></div><p>虽说有些麻烦（毕竟人家语法糖），但是功能上是一致。这里值得注意的是，像java，c++等语言可以提供变量的访问控制，比如private，public等，这里C就不太容易做到。但是有趣的是，python中并没有这种东西，它的内容全部是公开的，意味着你可以访问所有的内部变量，基本上和C的结构体没啥区别了，使用的时候就是君子协定了。</p><p>你也许有时候奇怪为什么python中的方法都要有个self参数，但是又不用传入（当然有类方法、静态方法这种不需要）。这就很像C了，在结构体中，你可以让函数（函数指针）有一个参数为该结构体，这时候就可以之间访问具体结构体里面的变量了（要注意声明和实现的区别）。</p><p>最后是<b>多态</b>，大概可以认为是让同一类（签名相同）行为可以根据该类的性质（具体子类）表现出不同结果（具体实现）。比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">class Animal: \n    def action(self)： \n        print(&#39;animal&#39;) \n\nclass Cat(Animal): \n    def action(self): \n        print(&#39;cat&#39;) \n\nclass Dog(Animal): \n    def action(self): \n        print(&#39;dog&#39;)</code></pre></div><p>这时候Cat和Dog都有相似的外形Animal，但是实际执行action的时候结果却不同。那么C怎么做呢？比较尴尬的是，C没法直接做。虽然我们是直接在结构体中加入父类结构体的，需要在调用的时候手工调用对应的函数。但是依旧没法保证Cat和Dog有相似的外形，即他们无法表现为同一个类。这是面向对象语言低层的语法糖，C无法直接做到。</p><p>由以上的分析可以想到，在C中借用一些面向对象的思想实现粗糙的类是可行的，毕竟思想是共通的。这里提一下C++，你可能知道在查看类占用空间的时候，函数并不占用空间，它是编译器来处理的。虚函数是占一个指针大小，注意是所有虚函数。所以可以推断出来，它维护了一个虚函数指针的列表，这个列表中每个元素就是一个函数，有点像我们在继承里面提到的多继承用列表来实现的方式。</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "面向对象编程", 
                    "tagLink": "https://api.zhihu.com/topics/19569910"
                }
            ], 
            "comments": [
                {
                    "userName": "SorrowCancer", 
                    "userLink": "https://www.zhihu.com/people/9266f272cd758f9618aaf9b743409df0", 
                    "content": "Python的函数可以在最前面加__来变成private", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "但是还是可以访问到，所以这种方法并不能完全保证private", 
                            "likes": 0, 
                            "replyToAuthor": "SorrowCancer"
                        }, 
                        {
                            "userName": "SorrowCancer", 
                            "userLink": "https://www.zhihu.com/people/9266f272cd758f9618aaf9b743409df0", 
                            "content": "嗯 但是比起struct还是好那么一丢丢", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60882473", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 2, 
            "title": "Dask 推荐", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">qq.com</a></p><hr/><p>numpy, pandas, scikit-learn是机器学习领域最为常用的算法工具包.但是当我们的数据比较大,内存已经放不下,或者解决较复杂并行处理的时候,我发现了开源的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/dask/dask\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dask</a>.</p><p>Dask更像是一个在这些工具上进行了扩展,如官方介绍的那样:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d53504ded88a26e5c9660fd15aad65cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1074\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"1074\" data-original=\"https://pic2.zhimg.com/v2-d53504ded88a26e5c9660fd15aad65cd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1074&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1074\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1074\" data-original=\"https://pic2.zhimg.com/v2-d53504ded88a26e5c9660fd15aad65cd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d53504ded88a26e5c9660fd15aad65cd_b.jpg\"/></figure><p>甚至很多时候可以像原来的方式来使用Dask:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b3a67bc90130133197bbc7df2299f9eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"439\" data-original=\"https://pic4.zhimg.com/v2-b3a67bc90130133197bbc7df2299f9eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;439&#39; height=&#39;408&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"439\" data-original=\"https://pic4.zhimg.com/v2-b3a67bc90130133197bbc7df2299f9eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b3a67bc90130133197bbc7df2299f9eb_b.jpg\"/></figure><p>但是它更加强大,可以使用计算图来做到并行,设置扩展到分布式的节点中:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-87f091d20f9a2531d188e072e229bd1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb\" width=\"468\" data-original=\"https://pic2.zhimg.com/v2-87f091d20f9a2531d188e072e229bd1d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;468&#39; height=&#39;160&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"468\" data-original=\"https://pic2.zhimg.com/v2-87f091d20f9a2531d188e072e229bd1d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-87f091d20f9a2531d188e072e229bd1d_b.jpg\"/></figure><p>这有点像Tensorflow对神经网络模型的处理,但是它相对来说更加动态一些,你可以自由的定义计算流程,方便的达到并行和扩展的要求,而不需要手动调度:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-441c507a87a8905b929e4615ee6e9b96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"466\" data-original=\"https://pic3.zhimg.com/v2-441c507a87a8905b929e4615ee6e9b96_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;466&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"466\" data-original=\"https://pic3.zhimg.com/v2-441c507a87a8905b929e4615ee6e9b96_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-441c507a87a8905b929e4615ee6e9b96_b.jpg\"/></figure><p>它的调度本质上还是依赖于计算图:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bf40f027273561f4e3bd30c30711ff2c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"487\" data-rawheight=\"164\" class=\"origin_image zh-lightbox-thumb\" width=\"487\" data-original=\"https://pic1.zhimg.com/v2-bf40f027273561f4e3bd30c30711ff2c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;487&#39; height=&#39;164&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"487\" data-rawheight=\"164\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"487\" data-original=\"https://pic1.zhimg.com/v2-bf40f027273561f4e3bd30c30711ff2c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bf40f027273561f4e3bd30c30711ff2c_b.jpg\"/></figure><p>官方文档上给了一个<a href=\"https://link.zhihu.com/?target=https%3A//docs.dask.org/en/latest/custom-graphs.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">例子</a>:</p><div class=\"highlight\"><pre><code class=\"language-text\">def load(filename):\n    ...\n\ndef clean(data):\n    ...\n\ndef analyze(sequence_of_data):\n    ...\n\ndef store(result):\n    with open(..., &#39;w&#39;) as f:\n        f.write(result)\n\ndsk = {&#39;load-1&#39;: (load, &#39;myfile.a.data&#39;),\n       &#39;load-2&#39;: (load, &#39;myfile.b.data&#39;),\n       &#39;load-3&#39;: (load, &#39;myfile.c.data&#39;),\n       &#39;clean-1&#39;: (clean, &#39;load-1&#39;),\n       &#39;clean-2&#39;: (clean, &#39;load-2&#39;),\n       &#39;clean-3&#39;: (clean, &#39;load-3&#39;),\n       &#39;analyze&#39;: (analyze, [&#39;clean-%d&#39; % i for i in [1, 2, 3]]),\n       &#39;store&#39;: (store, &#39;analyze&#39;)}\n\nfrom dask.multiprocessing import get\nget(dsk, &#39;store&#39;)  # executes in parallel</code></pre></div><p>它对应的计算图为:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-97d17fb68f8e51f315ed0823715a7bbc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"788\" class=\"content_image\" width=\"385\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;385&#39; height=&#39;788&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"788\" class=\"content_image lazy\" width=\"385\" data-actualsrc=\"https://pic1.zhimg.com/v2-97d17fb68f8e51f315ed0823715a7bbc_b.jpg\"/></figure><p>做过树结构存储计算表达式的同学很容易理解这种逻辑,它也类似于MapReduce.可以观察到下面部分三个分支是可以并行化处理的,可以使用多线程,多进程,分布式等任何方式来帮助加速计算,到了上面集合起来,做最后的运算.如果是自己手动处理的化,这个例子还比较简单,但是可以想到还是要写不少代码的,更不用说复杂的情况了.但是Dask这里就可以做到自动化的调度,这个封装给用户还是带来了很大的方便.这也是我最看重它的一点.</p><p>另一个好的点是处理大型数据,现在的数据对于单个机器来说越来越吃力了,Dask可以delay操作,这里是另一个<a href=\"https://link.zhihu.com/?target=https%3A//docs.dask.org/en/latest/delayed.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">例子</a>:</p><div class=\"highlight\"><pre><code class=\"language-text\">import dask\n\noutput = []\nfor x in data:\n    a = dask.delayed(inc)(x)\n    b = dask.delayed(double)(x)\n    c = dask.delayed(add)(a, b)\n    output.append(c)\n\ntotal = dask.delayed(sum)(output)</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-66521f7005e059aed81b440382a8ea60_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb\" width=\"868\" data-original=\"https://pic1.zhimg.com/v2-66521f7005e059aed81b440382a8ea60_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;868&#39; height=&#39;504&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"868\" data-original=\"https://pic1.zhimg.com/v2-66521f7005e059aed81b440382a8ea60_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-66521f7005e059aed81b440382a8ea60_b.jpg\"/></figure><p>可以想到,对于大型可分的运算,执行当前资源可以处理的运算,按照这个图依次来做,可以把大任务转化为小任务处理,让任务可解.这些复杂的调度和处理依旧不需要手工处理,交给Dask,大部分情况我们得到满意的结果,一些复杂的设置可以看官方文档.</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "软件", 
                    "tagLink": "https://api.zhihu.com/topics/19551718"
                }
            ], 
            "comments": [
                {
                    "userName": "稻草", 
                    "userLink": "https://www.zhihu.com/people/eb168506157c17ee44557e1998426e76", 
                    "content": "你有没有具体用过？有什么坑吗？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "有一些pandas功能它没有，数据量大运算复杂的操作它也有困难，总之能用pandas尽量用pandas", 
                            "likes": 0, 
                            "replyToAuthor": "稻草"
                        }, 
                        {
                            "userName": "稻草", 
                            "userLink": "https://www.zhihu.com/people/eb168506157c17ee44557e1998426e76", 
                            "content": "谢谢了！以为有救了，还是换吧", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60877552", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "Dukto 传输文件", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com, cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><p>如果是Windows上传输文件,平时的聊天工具工作的很好,但是如果是Linux与Windows或Linux之间传输文件的,尤其个人在不同操作系统设备上传输的时候,这些工具有时候不是很方便,比如账号问题,软件兼容性问题,Teamviewer是个很好的传输文件工具,但是如果被检测到是商业用途啥的,设置起来还是有些麻烦.</p><p>这里推荐一个功能简单,能传输文件,文件夹,文本等内容的轻量级工具,<b>Dukto</b>,你做的只是需要填入目的IP地址,然后把文件拖进去即可,当然需要双方都安装这个软件.最多你需要设置下接收的路径,本机的IP地址它已经列出来了,所以不需要手动去查询,很方便.</p><a href=\"https://link.zhihu.com/?target=http%3A//www.msec.it/dukto/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Emanuele Colombo&#39;s blog</a><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ef733573b0fea4fc976ce5f680765556_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"354\" data-rawheight=\"524\" class=\"content_image\" width=\"354\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;354&#39; height=&#39;524&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"354\" data-rawheight=\"524\" class=\"content_image lazy\" width=\"354\" data-actualsrc=\"https://pic3.zhimg.com/v2-ef733573b0fea4fc976ce5f680765556_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "软件", 
                    "tagLink": "https://api.zhihu.com/topics/19551718"
                }, 
                {
                    "tag": "工具", 
                    "tagLink": "https://api.zhihu.com/topics/19553376"
                }, 
                {
                    "tag": "文件传输", 
                    "tagLink": "https://api.zhihu.com/topics/19562557"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55306365", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 4, 
            "title": "VS CODE sftp 修改远程服务器上的代码", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com, cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><p>如果要对远程服务器的代码进行修改，但是不希望使用远程的vim等工具，可以使用VS CODE和作者是liximomo的sftp 插件来做到简单方便。</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/liximomo/vscode-sftp\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-b543223d3147bf55b1c3cf8d9ae71ad0_ipico.jpg\" data-image-width=\"225\" data-image-height=\"225\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">liximomo/vscode-sftp</a><p>方法和步骤：</p><ul><li>安装，在VS CODE里面找到sftp, 作者是liximomo</li><li>Ctrl+Shift+P 运行 SFTP: config，会出现设置文件</li><li>填对信息，在左侧工具条会出现一个新的按钮，点击，会看到远程代码和文件，这里要输入密码</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>默认的是只读的，要右键选择，在本地修改，然后就可以随便修改了，修改完后，右键选择上传，就可以完成代码修改了。</p><p>相似的插件也有一些，效果是类似的，目前这个插件用的人多一点。</p>", 
            "topic": [
                {
                    "tag": "Visual Studio Code", 
                    "tagLink": "https://api.zhihu.com/topics/20017183"
                }, 
                {
                    "tag": "插件", 
                    "tagLink": "https://api.zhihu.com/topics/19561210"
                }, 
                {
                    "tag": "代码", 
                    "tagLink": "https://api.zhihu.com/topics/19559575"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53566765", 
            "userName": "李文康", 
            "userLink": "https://www.zhihu.com/people/10f36cecadcdaf893c02fb01876674ea", 
            "upvote": 0, 
            "title": "flex 布局实战", 
            "content": "<p><b>Contact me:</b></p><p>email: changzhiliwenkang@outlook.com</p><p>github:  <a href=\"https://link.zhihu.com/?target=https%3A//liwenkang.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Welcome to My GitHub Page</a></p><hr/><p>这篇文章是为了尽可能找出使用 flex 需要注意的地方，如有理解错误的地方，还请大家多多指教。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>先来看 <a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flex 布局教程：语法篇</a> 留言中的一个例子</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nt\">li</span> <span class=\"p\">{</span>\n        <span class=\"k\">list-style-type</span><span class=\"p\">:</span> <span class=\"kc\">none</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">#</span><span class=\"nn\">list</span> <span class=\"p\">{</span>\n        <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">black</span><span class=\"p\">;</span>\n        <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">row</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">#</span><span class=\"nn\">list</span> <span class=\"nt\">li</span> <span class=\"p\">{</span>\n        <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">lightcoral</span><span class=\"p\">;</span>\n        <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#ffffff</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-grow</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">lightblue</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">#</span><span class=\"nn\">list</span> <span class=\"nt\">li</span><span class=\"p\">:</span><span class=\"nd\">nth-child</span><span class=\"o\">(</span><span class=\"nt\">2</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">flex-grow</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;list&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lorem ipsum.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span></code></pre></div><p>效果如下 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6100a08088ba7a5d06cb139c34d99469_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-6100a08088ba7a5d06cb139c34d99469_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;508&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-6100a08088ba7a5d06cb139c34d99469_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6100a08088ba7a5d06cb139c34d99469_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>可以看到在我们只设置了 flex-grow 的情况下, 第二个 li 的宽度并没有像我们设想的一样,变为两边元素的两倍.</p><p>这里的问题就在于因为有了文字的存在,影响了 li 的初始宽度( flex-basis )</p><p>所以我们需要设置 flex-basis 为 0,或者分别设置 flex: 1 和 flex: 2(让浏览器自己计算其他值);</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">#</span><span class=\"nn\">list</span> <span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">lightcoral</span><span class=\"p\">;</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#ffffff</span><span class=\"p\">;</span>\n    <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">lightblue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">list</span> <span class=\"nt\">li</span><span class=\"p\">:</span><span class=\"nd\">nth-child</span><span class=\"o\">(</span><span class=\"nt\">2</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>效果如下 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4f150a161d7b80d132de5e0ef0f6c255_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-4f150a161d7b80d132de5e0ef0f6c255_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;507&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-4f150a161d7b80d132de5e0ef0f6c255_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4f150a161d7b80d132de5e0ef0f6c255_b.jpg\"/></figure><p>接下来我们看一个神奇的居中...</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">parent</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"c\">/* Or whatever */</span>\n        <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">lightcoral</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">child</span> <span class=\"p\">{</span>\n        <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>  <span class=\"c\">/* Or whatever */</span>\n        <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"c\">/* Or whatever */</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>  <span class=\"c\">/* Magic! */</span>\n        <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">lightgreen</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;parent&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;child&#34;</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet.<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;child&#34;</span><span class=\"p\">&gt;</span>Lorem ipsum.<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;child&#34;</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet.<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><p>效果如下 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c35f3cd067363c1f0d51bdba513e2b7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-c35f3cd067363c1f0d51bdba513e2b7d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-c35f3cd067363c1f0d51bdba513e2b7d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c35f3cd067363c1f0d51bdba513e2b7d_b.jpg\"/></figure><p>可以看到， flex-item 在设置了 margin：auto 后，会自动撑满剩余空间，所以设置一个垂直的 margin：auto 后，就会使它在主轴和交叉轴都居中了</p><p>下面完成一个非常常见的应用，写一个导航栏。 要求屏幕较宽的时候，导航栏横向排列在屏幕的右上角； 当屏幕宽度中等的时候，导航栏横向排列在屏幕的上方，撑满宽； 当屏幕宽度很窄的时候，导航栏纵向排列在屏幕上方；</p><p>这里面借助 @media 实现响应式布局，配合 flex-flow 和 justify-content 将元素正确排列</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"p\">{</span>\n        <span class=\"k\">list-style</span><span class=\"p\">:</span> <span class=\"kc\">none</span><span class=\"p\">;</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">deepskyblue</span><span class=\"p\">;</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-flow</span><span class=\"p\">:</span> <span class=\"kc\">row</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">end</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"nt\">a</span> <span class=\"p\">{</span>\n        <span class=\"k\">text-decoration</span><span class=\"p\">:</span> <span class=\"kc\">none</span><span class=\"p\">;</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">block</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n        <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">white</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"nt\">a</span><span class=\"p\">:</span><span class=\"nd\">hover</span> <span class=\"p\">{</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">lightcoral</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">all</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">800px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n        <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"p\">{</span>\n            <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">all</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n        <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"p\">{</span>\n            <span class=\"k\">flex-flow</span><span class=\"p\">:</span> <span class=\"kc\">column</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n            <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"nt\">a</span> <span class=\"p\">{</span>\n            <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n            <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n            <span class=\"k\">border-top</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">);</span>\n            <span class=\"k\">border-bottom</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"p\">.</span><span class=\"nc\">navigation</span> <span class=\"nt\">li</span><span class=\"p\">:</span><span class=\"nd\">last-of-type</span> <span class=\"nt\">a</span> <span class=\"p\">{</span>\n            <span class=\"k\">border-bottom</span><span class=\"p\">:</span> <span class=\"kc\">none</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;navigation&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#&#34;</span><span class=\"p\">&gt;</span>Home<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#&#34;</span><span class=\"p\">&gt;</span>About<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#&#34;</span><span class=\"p\">&gt;</span>Products<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#&#34;</span><span class=\"p\">&gt;</span>Contact<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span></code></pre></div><p>接下来是经典的圣杯布局 要求屏幕较宽的时候，aside 部分宽度不变，article 是流式的</p><div class=\"highlight\"><pre><code class=\"language-text\">        header\n aside1 article aside2\n        footer</code></pre></div><p>当屏幕宽度中等的时候，撑满宽的条件下，流式</p><div class=\"highlight\"><pre><code class=\"language-text\">        header\n        article \n    aside1 aside2\n        footer</code></pre></div><p>当屏幕宽度很窄的时候，撑满宽</p><div class=\"highlight\"><pre><code class=\"language-text\">        header\n        article \n        aside1 \n        aside2\n        footer</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">wrapper</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-flow</span><span class=\"p\">:</span> <span class=\"kc\">row</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n        <span class=\"k\">font-weight</span><span class=\"p\">:</span> <span class=\"kc\">bold</span><span class=\"p\">;</span>\n        <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">wrapper</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"p\">{</span>\n        <span class=\"c\">/**\n</span><span class=\"c\">        * 注意此处设置的\n</span><span class=\"c\">        * flex-grow: 1;\n</span><span class=\"c\">        * flex-shrink: 0;\n</span><span class=\"c\">        * flex-basis: 100%;\n</span><span class=\"c\">        * 也就是说 .wrppaer 的所有直接子元素的初始宽度 flex-basis 都是 100% 父元素宽\n</span><span class=\"c\">        * 也就是每个直接子元素都是横向撑满屏幕\n</span><span class=\"c\">        * 这就是我们屏幕宽度很小的时候，显示出的效果\n</span><span class=\"c\">        */</span>\n        <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">header</span> <span class=\"p\">{</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">tomato</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">footer</span> <span class=\"p\">{</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">lightgreen</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">main</span> <span class=\"p\">{</span>\n        <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">left</span><span class=\"p\">;</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">deepskyblue</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">aside-1</span> <span class=\"p\">{</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">gold</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">aside-2</span> <span class=\"p\">{</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"kc\">hotpink</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">all</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-width</span><span class=\"o\">:</span> <span class=\"nt\">600px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n        <span class=\"c\">/**\n</span><span class=\"c\">        * 当页面宽度大于 600px 的时候，aside 部分平分多余部分\n</span><span class=\"c\">        * 这里重点是设置了 flex-basis 是 0\n</span><span class=\"c\">        */</span>\n        <span class=\"p\">.</span><span class=\"nc\">aside</span> <span class=\"p\">{</span> <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">all</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-width</span><span class=\"o\">:</span> <span class=\"nt\">800px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n        <span class=\"c\">/**\n</span><span class=\"c\">        * 当页面宽度大于 800 px 的时候,\n</span><span class=\"c\">        * 两个 aside 和 main 按照 1：3: 1 分配多余部分\n</span><span class=\"c\">        * 这里重点是设置了 flex-basis 是 0\n</span><span class=\"c\">        * 此外，调整 aside1 的 order 使它在 main 前面\n</span><span class=\"c\">        */</span>\n        <span class=\"p\">.</span><span class=\"nc\">main</span>    <span class=\"p\">{</span> <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"c\">/**\n</span><span class=\"c\">        *    flex-grow: 3;\n</span><span class=\"c\">        *    flex-shrink: 0;\n</span><span class=\"c\">        *    flex-basis: 0%;\n</span><span class=\"c\">        */</span>\n        <span class=\"p\">.</span><span class=\"nc\">aside-1</span> <span class=\"p\">{</span> <span class=\"k\">order</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nc\">main</span>    <span class=\"p\">{</span> <span class=\"k\">order</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nc\">aside-2</span> <span class=\"p\">{</span> <span class=\"k\">order</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nc\">footer</span>  <span class=\"p\">{</span> <span class=\"k\">order</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;wrapper&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">header</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;header&#34;</span><span class=\"p\">&gt;</span>Header<span class=\"p\">&lt;/</span><span class=\"nt\">header</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">article</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;main&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">article</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">aside</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;aside aside-1&#34;</span><span class=\"p\">&gt;</span>Aside 1<span class=\"p\">&lt;/</span><span class=\"nt\">aside</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">aside</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;aside aside-2&#34;</span><span class=\"p\">&gt;</span>Aside 2<span class=\"p\">&lt;/</span><span class=\"nt\">aside</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">footer</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;footer&#34;</span><span class=\"p\">&gt;</span>Footer<span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><p>就下来就是色子的不同点数实现了,非常适合用 flex 实现</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"c\">/* 这里是为了界面的表现设置的一些 css 可以先忽略 */</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nt\">html</span><span class=\"o\">,</span> <span class=\"nt\">body</span> <span class=\"p\">{</span>\n        <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nt\">body</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">align-items</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-wrap</span><span class=\"p\">:</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n        <span class=\"k\">align-content</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n        <span class=\"k\">font-family</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Open Sans&#39;</span><span class=\"p\">,</span> <span class=\"kc\">sans-serif</span><span class=\"p\">;</span>\n        <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">linear-gradient</span><span class=\"p\">(</span><span class=\"kc\">top</span><span class=\"p\">,</span> <span class=\"mh\">#222</span><span class=\"p\">,</span> <span class=\"mh\">#333</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">[</span><span class=\"nt\">class</span><span class=\"o\">$=</span><span class=\"s2\">&#34;face&#34;</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#e7e7e7</span><span class=\"p\">;</span>\n        <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">104</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">104</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">object-fit</span><span class=\"p\">:</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n        <span class=\"k\">box-shadow</span><span class=\"p\">:</span>\n                <span class=\"kc\">inset</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">white</span><span class=\"p\">,</span>\n                <span class=\"kc\">inset</span> <span class=\"mi\">0</span> <span class=\"mi\">-5</span><span class=\"kt\">px</span> <span class=\"mh\">#bbb</span><span class=\"p\">,</span>\n                <span class=\"kc\">inset</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mi\">0</span> <span class=\"mh\">#d7d7d7</span><span class=\"p\">,</span>\n                <span class=\"kc\">inset</span> <span class=\"mi\">-5</span><span class=\"kt\">px</span> <span class=\"mi\">0</span> <span class=\"mh\">#d7d7d7</span><span class=\"p\">;</span>\n        <span class=\"k\">border-radius</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">pip</span> <span class=\"p\">{</span>\n        <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">border-radius</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n        <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n        <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#e7e7e7</span><span class=\"p\">;</span>\n        <span class=\"k\">vertical-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n        <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n        <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#333</span><span class=\"p\">;</span>\n        <span class=\"k\">box-shadow</span><span class=\"p\">:</span> <span class=\"kc\">inset</span> <span class=\"mi\">0</span> <span class=\"mi\">3</span><span class=\"kt\">px</span> <span class=\"mh\">#111</span><span class=\"p\">,</span> <span class=\"kc\">inset</span> <span class=\"mi\">0</span> <span class=\"mi\">-3</span><span class=\"kt\">px</span> <span class=\"mh\">#555</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span></code></pre></div><p>先是单个点</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;first-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/* 单个点的不同位置可以通过设置主轴和交叉轴的对齐方式实现 3 * 3 = 9 种不同方式 */</span>\n    <span class=\"p\">.</span><span class=\"nc\">first-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">start</span> <span class=\"o\">|</span> <span class=\"kc\">center</span> <span class=\"o\">|</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">end</span><span class=\"p\">;</span>\n        <span class=\"k\">align-items</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">start</span> <span class=\"o\">|</span> <span class=\"kc\">center</span> <span class=\"o\">|</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">end</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>接下来是两个点</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;second-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip mid&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/** \n</span><span class=\"c\">* 当两个点排在同一行的时候设置 align-items : (flex-start | center | flex-end)\n</span><span class=\"c\">* 可以控制 justify-content: (flex-start | space-between(两边不留空隙) | flex-end) 实现不同位置的摆放\n</span><span class=\"c\">* 如果想设置两个点在不同行，可以给单个点设置 align-self: flex-start | center | flex-end;\n</span><span class=\"c\">* 如果想设置两个点在同一列，就要改变主轴方向 flex-direction 为 column\n</span><span class=\"c\">* 然后根据要求设置 justify-content 和 align-items;\n</span><span class=\"c\">*/</span>\n    <span class=\"p\">.</span><span class=\"nc\">second-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n        <span class=\"k\">align-items</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">start</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">mid</span> <span class=\"p\">{</span>\n        <span class=\"k\">align-self</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>接下来是三个点,从左向右斜放</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;second-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip one&#34;</span><span class=\"p\">&gt;</span>1<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip two&#34;</span><span class=\"p\">&gt;</span>2<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip three&#34;</span><span class=\"p\">&gt;</span>3<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/**\n</span><span class=\"c\"> * 1\n</span><span class=\"c\"> *   2\n</span><span class=\"c\"> *     3\n</span><span class=\"c\"> * 同样，通过设置 align-self 调整单个点的位置 \n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">three-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">start</span><span class=\"p\">;</span>\n        <span class=\"k\">align-items</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">start</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">two</span> <span class=\"p\">{</span>\n        <span class=\"k\">align-self</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">three</span> <span class=\"p\">{</span>\n        <span class=\"k\">align-self</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"o\">-</span><span class=\"kc\">end</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>接下来是四个点,位于四个角落</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;fourth-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>1<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>2<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>3<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>4<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/**\n</span><span class=\"c\"> * 1 3\n</span><span class=\"c\"> * 2 4\n</span><span class=\"c\"> * div.column 是横向排列，里面的子元素 p.pip 纵向排列\n</span><span class=\"c\"> * 这里注意 align-items 没有 space-between\n</span><span class=\"c\"> * 它仅存在于多根交叉轴的 align-content 和主轴的 justify-content 上\n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">fourth-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">fourth-face</span> <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c\">/**\n</span><span class=\"c\">* 另一种实现方式\n</span><span class=\"c\">* 1 2\n</span><span class=\"c\">* 3 4\n</span><span class=\"c\">* div.column 是纵向排列，里面的子元素 p.pip 横向排列\n</span><span class=\"c\">* 这里注意 flex-wrap: wrap；设置换行，以及 align-content: space-between; 设置多跟交叉轴存在时的对齐方式\n</span><span class=\"c\">* div.column 要撑满父元素 flex: 1(这里的 flex-basis 推算为 0，还撑满了父元素哦!)\n</span><span class=\"c\">* 再设置 justify-content: space-between; 才起效果哦\n</span><span class=\"c\">*/</span>\n    <span class=\"p\">.</span><span class=\"nc\">fourth-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-wrap</span><span class=\"p\">:</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n        <span class=\"k\">align-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">fourth-face</span> <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>接下来时五个点，分别位于中心和四个角落</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;five-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>1<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>2<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column mid&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>3<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>4<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>5<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/**\n</span><span class=\"c\"> * 1     4\n</span><span class=\"c\"> *    3\n</span><span class=\"c\"> * 2     5\n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">five-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">mid</span> <span class=\"p\">{</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c\">/** \n</span><span class=\"c\"> * 另一种实现方式\n</span><span class=\"c\"> * 1     2\n</span><span class=\"c\"> *    3  \n</span><span class=\"c\"> * 4     5\n</span><span class=\"c\"> * 注意 .column 的 如果设置 flex: 1; 会推算为 flex: 1 1 0;(无法占满父元素的宽)\n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">five-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-wrap</span><span class=\"p\">:</span> <span class=\"kc\">wrap</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span> \n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">mid</span> <span class=\"p\">{</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>六个 </p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;six-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>1<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>2<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>3<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>4<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>5<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>6<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/**\n</span><span class=\"c\"> * 1 2 3\n</span><span class=\"c\"> *   \n</span><span class=\"c\"> * 4 5 6\n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">six-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">row</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c\">/**\n</span><span class=\"c\"> * 1    4\n</span><span class=\"c\"> * 2    5\n</span><span class=\"c\"> * 3    6\n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">six-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">row</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>七个</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;seven-face&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>1<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>2<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>3<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column mid&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>4<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>5<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>6<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;pip&#34;</span><span class=\"p\">&gt;</span>7<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"c\">/**\n</span><span class=\"c\"> * 1  2  3\n</span><span class=\"c\"> *    4\n</span><span class=\"c\"> * 5  6  7\n</span><span class=\"c\"> */</span>\n    <span class=\"p\">.</span><span class=\"nc\">seven-face</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">space</span><span class=\"o\">-</span><span class=\"n\">between</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">column</span> <span class=\"p\">{</span>\n        <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n        <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">row</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">mid</span> <span class=\"p\">{</span>\n        <span class=\"k\">justify-content</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span></code></pre></div><p>最终总结：</p><div class=\"highlight\"><pre><code class=\"language-text\">从以上实践来看，我们可以从以下角度考虑 flex 的使用\n1. 首先是主轴和交叉轴的方向要确定好\n2. 看看要不要换行\n3. 然后是主轴和交叉轴的对齐方式。注意如果只有一条交叉轴时，不可以设置 align-content。align-items 不存在 space-between/space-around/space-evenly 这些对齐方式\n4. 接下来就是 flex-item 的伸缩设置，特别要注意 flex-basis：如果你想某个方向的对齐，那要关注一下在这个方向上的 flex-item 到底有没有把父元素撑满！flex：1 有时推算出的值不一定就是符合你需求的值哦！</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考  </p><p>1. <a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flex 布局教程：语法篇</a> </p><p>2. <a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2015/07/flex-examples.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flex 布局教程：实例篇</a> </p><p>3. <a href=\"https://link.zhihu.com/?target=https%3A//alisec-ued.github.io/2017/01/03/Flex%25E5%25B8%2583%25E5%25B1%2580%25E5%258E%259F%25E7%2590%2586%25E4%25BB%258B%25E7%25BB%258D/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flex布局原理介绍</a> </p><p>4. <a href=\"https://link.zhihu.com/?target=https%3A//css-tricks.com/snippets/css/a-guide-to-flexbox/%23flexbox-background\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Complete Guide to Flexbox</a> </p><p>5. <a href=\"https://link.zhihu.com/?target=https%3A//demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flexbox Playground</a> </p><p>6. <a href=\"https://link.zhihu.com/?target=https%3A//davidwalsh.name/flexbox-dice\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Getting Dicey With Flexbox</a> </p><p>7. <a href=\"https://link.zhihu.com/?target=https%3A//philipwalton.github.io/solved-by-flexbox/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Solved by Flexbox</a></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "CSS 布局", 
                    "tagLink": "https://api.zhihu.com/topics/19620819"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44389963", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 2, 
            "title": "C++的explicit", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><p>或许很多人没有用过C++的explicit，但是在一些情况下如果对隐式转换有要求的话，这个关键字还是很必要的。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">MyClass</span> <span class=\"p\">{</span> \n<span class=\"k\">public</span><span class=\"o\">:</span> \n    <span class=\"n\">MyClass</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">);</span> \n    <span class=\"o\">~</span><span class=\"n\">MyClass</span><span class=\"p\">();</span> \n<span class=\"p\">};</span> \n\n<span class=\"n\">MyClass</span><span class=\"o\">::</span><span class=\"n\">MyClass</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;constract&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> \n<span class=\"p\">}</span> \n<span class=\"n\">MyClass</span><span class=\"o\">::~</span><span class=\"n\">MyClass</span><span class=\"p\">()</span> <span class=\"p\">{</span> \n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;deconstract&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> \n<span class=\"p\">}</span> \n\n<span class=\"kt\">void</span> <span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">MyClass</span> <span class=\"n\">mc</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;fun&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> \n<span class=\"p\">}</span> \n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"k\">const</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span> \n    <span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span> \n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;end&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n</code></pre></div><p>这段代码输出为：</p><div class=\"highlight\"><pre><code class=\"language-text\">constract\nfun \ndeconstract \nend</code></pre></div><p>注意到fun的参数是MyClass，而我们传入了一个整数，竟然没有报错，程序做了一件事就是拿这个整数构建了一个MyClass对象，然后fun调用完成后销毁。这个特性很方面，但是有些时候这个转换并不符合预期，比如我们还有个fun的参数是double，那么调用的就是这个参数为double的函数了，因为这个转换更直接（对于C++而言）。所以我们有时候需要对这种转换做下控制，不能隐式的转换，这个时候<code>explicit</code>就派上用场了，我们只需要在构造函数前面加入<code>explicit</code>：</p><div class=\"highlight\"><pre><code class=\"language-text\">explicit MyClass(int a);</code></pre></div><p>这样，程序在编译的时候就报错了，提示不能进行类型转换，我们的目的也达到了。</p><p>这个转换只能做一次，也就是说如果你的程序有另一个类Test可以接收一个MyClass的对象，fun的参数是Test，那么是无法完成的，因为这需要两次转换。也就是说C++会努力寻找离你目标最近的那个转换，且只做一次，且有优先顺序，例如int转为double就比转为MyClass更优先。</p><p><b>如果程序要求可读性更好的话，可以使用explicit避免这种隐式转换。但是你依旧可以使用<code>static_cast</code>做这个转换，即使<code>explicit</code>存在。</b></p>", 
            "topic": [
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>为啥要用隐式转换?(来自JSer挑事的微笑...)</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "来自对程序员的充分信任", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41275169", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "从C++的RAII到Rust的所有权（二）", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><ul><li><a href=\"https://zhuanlan.zhihu.com/p/41275013\" class=\"internal\">从C++的RAII到Rust的所有权（一）</a></li><li>从C++的RAII到Rust的所有权（二）</li></ul><hr/><p>上次我们说到两种对象传递方法：复制和移动[引用]，默认变量是不变的，对象只有一个引用，听起来是个非常纯粹的做法，但是相比我们一般的做法有些束手束脚，这样有什么好处呢？</p><blockquote>数据竞争（data race）是一种特定类型的竞争状态，它可由这三个行为造成： <br/><br/>两个或更多指针同时访问同一数据。<br/>至少有一个这样的指针被用来写入数据。<br/>不存在同步数据访问的机制<br/><br/> <i>来自《Rust程序设计语言》</i></blockquote><p>Rust天生的不存在这个问题，这些问题在编译时就会被发现。</p><p>但是故事还没有结束，我们要获取对象的一部分怎么办？</p><div class=\"highlight\"><pre><code class=\"language-rust\"><span class=\"c1\">// 获取第一个单词\n</span><span class=\"c1\"></span><span class=\"k\">fn</span> <span class=\"nf\">first_word</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> \n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> \n</span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">b&#39; &#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> \n</span><span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"> \n</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> \n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">[..]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> \n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&#34;hello world&#34;</span><span class=\"p\">);</span><span class=\"w\"> \n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">first_word</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> \n</span><span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// Error!\n</span><span class=\"c1\"></span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div><p>所有者清空了，我们获得的对象部分也无效了，所以这个是不能编译的，所以一个规则是一个时间内不能可变和不可变引用同时存在。</p><blockquote>1 在任意给定时间，只能拥有如下中的一个：<br/>        一个可变引用<br/>        任意数量的不可变引用<br/>2 引用必须总是有效的<br/><br/> <i>来自《Rust程序设计语言》</i></blockquote><p>这样我们保证了在需要变的时候，只有一个变化者，不变的时候，多少不可变都是无害的。</p><p>回想一下C++，我们默认是可变的，所以很容易出现数据竞争，多线程下需要小心。</p><p>似乎已经说完了，但是引用有个麻烦的特性，不知道你注意到没有那就是我们眼皮子底下的：<b>引用必须总是有效的</b>。有时候我们不能这样保证，比如我们要实现链表，我们不能第一步就确定好节点的下一个节点是啥，所以类似一系列原因，Rust还是引入了指针，指针又回来了！！</p><p>哈哈，并没有变得简单，只不过这些语言特性在内存管理，垃圾回收等方面提供了很大便利，Rust的指针是个什么鬼，和C++的指针一样吗，我们后续再聊。</p>", 
            "topic": [
                {
                    "tag": "Rust（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19674381"
                }, 
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41275013", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 2, 
            "title": "从C++的RAII到Rust的所有权（一）", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><ul><li>从C++的RAII到Rust的所有权（一）</li><li><a href=\"https://zhuanlan.zhihu.com/p/41275169\" class=\"internal\">从C++的RAII到Rust的所有权（二）</a></li></ul><hr/><p>如果你有C++的经验就知道，在C/C++里面变量之间默认都是复制的，<a href=\"https://zhuanlan.zhihu.com/p/33881783\" class=\"internal\">从C语言的函数传参谈指针</a>说的就是C中的变量复制，C++中如果你没有让构造函数做移动或其他特殊操作，那么变量也是复制的，比如：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"n\">Class</span> <span class=\"n\">C</span> <span class=\"p\">{</span> <span class=\"cm\">/* sth. normal*/</span> <span class=\"p\">};</span>\n\n<span class=\"n\">C</span> <span class=\"n\">c1</span><span class=\"p\">;</span>\n<span class=\"n\">C</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">c1</span><span class=\"p\">;</span>\n</code></pre></div><p>c2是把c1复制了一份，如果是复制比较廉价还好，如果对象比较大的话，复制就比较昂贵，那么我们一般的做法是用指针，指针的复制很廉价，当然考虑到实际环境，你可能要考虑使用现代C++的智能指针，这就有好几种选择了，<a href=\"https://zhuanlan.zhihu.com/p/33881856\" class=\"internal\">从C++的RAII理解智能指针的思路（一）</a>和<a href=\"https://zhuanlan.zhihu.com/p/33881888\" class=\"internal\">从C++的RAII理解智能指针的思路（二）</a>从RAII的角度做了智能指针的基本解释。当然如果要和老代码打交道，还需要考虑普通指针和智能指针的共存。而且使用指针必须注意指针臭名昭著的问题，例如野指针，内存释放，内存泄漏一系列头疼的问题。</p><p>对了，还有移动构造可以考虑，移动可以省去拷贝。</p><p>假设我们抛开C++的历史包袱，现在<b>只存在两个对象传递的方法，一个是复制，一个是移动[引用]</b>，那么问题就清楚了，对于分配在栈上的变量，例如int，char啥的我们可以复制，复制很廉价，对于分配在堆上的对象，我们可以移动，只需要保留好移动对象的引用即可，因此这里把移动和引用当做一个方案。</p><div class=\"highlight\"><pre><code class=\"language-text\">// 我们的新方案\nint a = 0;\nint b = a; // 对分配在栈上的类型拷贝，拷贝很廉价\n\nClass C { /* sth. */ };C *c1 = new C(); // 分配在堆上\nC *c2 = c1; // 对分配在堆上的类型，采用移动\n\n/*注意，移动以后，c1的内容就没了，不能再对c1访问，c2掌握了所有权，现在只有一个C类型的对象*/\n// 离开作用域自动释放资源</code></pre></div><p>有点像使用了C++的unique_ptr，不过简化了写法。这样有什么好处呢？不会出现两个指针访问同一个资源的情况，离开作用域自动释放资源，我们就不用操心资源释放的问题了，没有野指针，不会出现指针悬挂，就像unique_ptr做的一样。似乎只是个语法糖，我们再加一点就和基本的Rust所有权差不多了，那就是<b>每个资源只有一个拥有所有权的引用</b>。</p><p>那我们正式进入Rust（这里我们暂时不考虑Rust的智能指针）：</p><div class=\"highlight\"><pre><code class=\"language-rust\"><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 第一种方式，拷贝\n</span><span class=\"c1\"></span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&#34;hello&#34;</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 第二种方式，移动\n</span></code></pre></div><p>看起来这个逻辑很简单，但是马上我们会遇到一个问题，既然对于堆上的对象是移动，那么函数传递参数怎么办？</p><div class=\"highlight\"><pre><code class=\"language-text\">fn main() { \n    let s = String::from(&#34;hello&#34;); \n    takes_ownership(s);\n}\n\nfn takes_ownership(some_string: String) { \n    println!(&#34;{}&#34;, some_string);\n}</code></pre></div><p>我们不用管语法细节，代码很容易看懂，这里s传入函数，意味着s就废了，怎么办？如果你需要复制可以使用克隆:</p><div class=\"highlight\"><pre><code class=\"language-text\">let s1 = String::from(&#34;hello&#34;);\nlet s2 = s1.clone();</code></pre></div><p>但是这不是我们要做的，我们希望函数做了操作，我们依旧可以对s继续操作，因此这里就需要引入所有权借用：</p><div class=\"highlight\"><pre><code class=\"language-text\">fn main() { \n    let s = String::from(&#34;hello&#34;); \n     takes_ownership(&amp;s);\n}\n\nfn takes_ownership(some_string: &amp;String) { \n    println!(&#34;{}&#34;, some_string);\n}</code></pre></div><p>但是我们还没有说一个特性，就是默认情况下变量是不可以变的，所以应该称为常量：</p><div class=\"highlight\"><pre><code class=\"language-text\">fn main() { \n    let x = 5; \n    x = 6;\n}</code></pre></div><p>这样做是报错的，你需要加入mut:</p><div class=\"highlight\"><pre><code class=\"language-text\">fn main() { \n    let mut x = 5; \n    x = 6;\n}</code></pre></div><p>同样，函数是这样写的：</p><div class=\"highlight\"><pre><code class=\"language-text\">fn main() { \n    let mut s = String::from(&#34;hello&#34;);\n    change(&amp;mut s);\n}\n\nfn change(some_string: &amp;mut String) { \n    some_string.push_str(&#34;, world&#34;);\n}</code></pre></div><p>不可变有什么好处呢，不可变是安全的，不可变不存在不确定，尤其是并发等情况下，如纯函数式语言就是不可变的。需要时我们让变量可变，控制变化因素，有助于减少潜在的问题。</p><p>还要一些问题需要讨论，下一篇文章见。</p><a href=\"https://zhuanlan.zhihu.com/p/41275169\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">从C++的RAII到Rust的所有权（二）</a><p></p>", 
            "topic": [
                {
                    "tag": "Rust（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19674381"
                }, 
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41039356", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "sizeof(struct)是多少", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><p>C++代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n\nstruct Test {};\n\nint main(){ \n    Test t; \n    std::cout &lt;&lt; sizeof(t);\n}</code></pre></div><p>运行（64位系统）结果是多少？1，为什么？C++为了标志一个空的类，让空的类依旧有1个字节的空间，这样当我们写这个类的数组的时候，就不会出现长度为0的情况了。</p><p>但是如果你运行C代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n\nstruct Test {};\n\nint main() { \n    struct Test t; \n    printf(&#34;%d&#34;, sizeof(t));\n}</code></pre></div><p>结果是多少？0，为什么？C没有为空的结构体标志为1，直接是0，那么我们就发现：</p><p>struct Test t[3];</p><p>的长度是0。非常有趣，这也是C和C++的一个区别。</p><p>我们继续探究C++：</p><div class=\"highlight\"><pre><code class=\"language-text\">include &lt;iostream&gt;\n\nstruct Test { \n    char c; \n    int i;\n};\n\nint main(){ \n    Test t; \n    std::cout &lt;&lt; sizeof(t);\n}</code></pre></div><p>结果是多少？8，为什么？这是因为内存对齐，可以参考</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/40352009\" data-image=\"https://pic4.zhimg.com/v2-a8eca602a3eac67416a0bd362976f4c7_180x120.jpg\" data-image-width=\"711\" data-image-height=\"237\" class=\"internal\">Cugtyt：谈谈C的类型</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_b.jpg\" data-rawwidth=\"828\" data-rawheight=\"175\" data-caption=\"\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"828\" data-original=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;828&#39; height=&#39;175&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"828\" data-rawheight=\"175\" data-caption=\"\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"828\" data-original=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n\nstruct Test { void fun() {};};\n\nint main(){ \n    Test t; \n    std::cout &lt;&lt; sizeof(t);\n}</code></pre></div><p>结果是多少？1，为什么？普通函数和类不放在一起，因此类里面的普通函数不占类的空间。</p><p>为啥说普通函数，看这个：</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n\nstruct Test { \n    virtual void fun() {}; \n    virtual void fun2() {};\n};\n\nint main(){ \n    Test t; \n    std::cout &lt;&lt; sizeof(t);\n}</code></pre></div><p>结果是多少？8，为什么？这个函数是虚函数，不是普通函数，因此占内存一个指针的长度。因为是64位，所以是8个字节的指针。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f7c6205beb7654a9f2495843a3a3f824_b.jpg\" data-rawwidth=\"656\" data-rawheight=\"373\" data-caption=\"\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"656\" data-original=\"https://pic1.zhimg.com/v2-f7c6205beb7654a9f2495843a3a3f824_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;656&#39; height=&#39;373&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"656\" data-rawheight=\"373\" data-caption=\"\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"656\" data-original=\"https://pic1.zhimg.com/v2-f7c6205beb7654a9f2495843a3a3f824_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f7c6205beb7654a9f2495843a3a3f824_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n\nstruct Test { static int i;};\n\nint main(){ \n    Test t; \n    std::cout &lt;&lt; sizeof(t);\n}</code></pre></div><p>结果是多少？1，为什么？静态成员和类不在一起，所以也不占类的空间。</p>", 
            "topic": [
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41271108", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 1, 
            "title": "现代C++应该使用nullptr，而不是NULL", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><p>在C++11以前我们一般用NULL来代表空指针，C语言也是一样，最本质的问题是NULL究竟是什么？</p><p>这里用VS2017，看下NULL的定义：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#ifndef NULL\n</span><span class=\"cp\"></span> <span class=\"cp\">#ifdef __cplusplus\n</span><span class=\"cp\"></span> <span class=\"cp\">#define NULL 0\n</span><span class=\"cp\"></span> <span class=\"cp\">#else\n</span><span class=\"cp\"></span> <span class=\"cp\">#define NULL ((void *)0)\n</span><span class=\"cp\"></span> <span class=\"cp\">#endif\n</span><span class=\"cp\">#endif\n</span></code></pre></div><p>可见NULL就是0，这又什么问题呢，就是在C++里面如果遇上函数重载：</p><div class=\"highlight\"><pre><code class=\"language-text\">void fun(int a) { \n    std::cout &lt;&lt; &#34;int&#34;;\n}\n\nvoid fun(int *a) { \n    std::cout &lt;&lt; &#34;ptr&#34;;\n}\n\nint main() { \n    fun(0); \n    fun(NULL);\n}</code></pre></div><p>你会发现，函数都会调用int那个，这不是我们想要的，为了将两者区分开来，C++11引入了nullptr来表示空指针这个含义，把代码中的<b>NULL替换为nullptr</b>就可以调用指针那个函数。</p><p>nullptr可以自动转换为各种指针类型，但不会转换为整数类型，它也有自己的类型，是<code>&lt;cstddef&gt;</code>中的std::nullptr_t，如果你对空指针有特殊要求，你可以根据这个类型来做。</p><p>特别有趣的是你可以这样写：</p><div class=\"highlight\"><pre><code class=\"language-text\">std::nullptr_t a = 0;</code></pre></div><p>可以编译通过，但是似乎没什么用，但是把0换成其他就不能编译，其他数字不行，字符串啥的也不行，但是可以是nullptr。</p>", 
            "topic": [
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }, 
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41034169", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 1, 
            "title": "使用反射的例子", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://gmail.com</a></p><hr/><p>我们一般实例化一个对象是这样做的：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">Test</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Test</span><span class=\"o\">();</span></code></pre></div><p>但是你有没有想过如果我们不知道类的具体名字？听起来有点不能理解，不知道类怎么实例化。因为代码是一直变化的，比如我们要操作一个轮子库里的对象，我们可能有Gear1, Gear2 …，可能随时有新的Gear被加进来，我们怎么方便的实例化呢？</p><p>一个直接的做法是，用字符串判断：</p><div class=\"highlight\"><pre><code class=\"language-text\">object getGear(String gearClassName) { \n    if (&#34;Gear1&#34;.equals(gearClassName)) { \n        return new Gear1(); \n    } else ...\n}</code></pre></div><p>但是如果很庞大，这个就维护很麻烦。甚至有人会想到把所有的类都实例化好放在一个数组或是什么结构里，利用数组来读取，这样最致命的一个问题是如果类多，内存会不够用。</p><p>这个时候我们看下反射是怎么做的，注意这里使用的是Java 10：</p><div class=\"highlight\"><pre><code class=\"language-text\">public class Main { \n    public static void main(String[] args) { \n        try { \n            Object test = Class.forName(&#34;Test&#34;).getDeclaredConstructor().newInstance(); \n            // System.out.println(((Test) test).name); \n        } catch (Exception e) { \n            e.printStackTrace(); \n        } \n    }\n}</code></pre></div><p>Class的forName可以传入字符串，我们可以轻松的更改需要实例化的类名，你会得到一个Class&lt;?&gt;里面有一系列方法，获取构造函数可以用getDeclaredConstructor，这里获取的是方法，你可以用newInstance来实例化这个类。</p><p>当然你也可以获取类的所有方法，获取类的所有字段啥的。</p><p>试想这样一个情况，用户更新了代码，但是没有更新库，新代码要优先调用新的库里的类，那么就可以使用反射。反射可以让我们先尝试实例化新类，如果不行，捕获异常，我们可以用旧类替换，这样就提高了兼容性和稳定性。</p><p>发挥下想象它可以用来做什么，比如我们可以用它来做CODE Review，获取程序员写的代码，然后检查变量名和方法名是否符合规范，或是其他要求，重要的是我们的确不需要事先知道程序员写的类名是啥，要不然我们一个一个实例化，一个一个手动检查是非常低效的。</p><p>可见反射是比较强大的，如果随意使用修改了类的东西，可能会出现意想不到的情况，使用前需要考虑。</p>", 
            "topic": [
                {
                    "tag": "反射（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19596531"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40447192", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 1, 
            "title": "从const说起", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>一般我们学习C/C++的时候，定义常量用宏<code>#define A 100</code>或用const关键字<code>const int8_t = 100</code>，区别在于宏在编译时候会替换，不占空间，而变量是一个真实的变量。</p><p>学习深入一些会看到这样的用法：</p><div class=\"highlight\"><pre><code class=\"language-text\">char c = &#39;a&#39;;\n\nchar *p = &amp;c;\nconst char *pc = &amp;c;\nchar* const cp = &amp;c;\nconst char* const cpc = &amp;c;</code></pre></div><p>为什么要这么多const呢，这里就体现了C/C++的一个多方面的控制，对于一个变量，有一个指针指向它，那么指针的权限呢？是可以做任何事情吗，还是要有一定要求，比如不能修改变量的值，不能修改自己的值，或者都不能修改。</p><p>注意到上面四种写法就是四种权限：</p><p>第一个普通的指针，可以修改c的值，用<code>*p=&#39;c&#39;</code>，可以修改p的值，<code>p=&amp;d //d是其他变量</code>。</p><p>第二个指针，只能修改pc的值，不能修改c的值，不能对<code>*pc</code>赋值。因为<code>*pc</code>前有const。</p><p>第三个指针，只能修改<code>*cp</code>的值，不能修改cp的值，因为cp前面有const。</p><p>第四个可想而知都不能修改。</p><p>知道看权限的诀窍了吗，const在谁前面，谁就不能修改。</p><h2><b>顶层const和底层const</b></h2><p>为了更深入一下我们介绍这两个概念：顶层const和底层const。</p><p>顶层const是cp，底层是pc，很容易搞混，这里做个图示：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d07440fedc42d3872cc09264740e1e87_b.jpg\" data-rawwidth=\"531\" data-rawheight=\"248\" data-caption=\"\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic4.zhimg.com/v2-d07440fedc42d3872cc09264740e1e87_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;531&#39; height=&#39;248&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"531\" data-rawheight=\"248\" data-caption=\"\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"531\" data-original=\"https://pic4.zhimg.com/v2-d07440fedc42d3872cc09264740e1e87_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d07440fedc42d3872cc09264740e1e87_b.jpg\"/></figure><p>因为逻辑上*p就是c，所以，如果不能修改c，或者说const加在*p前面，就是底层，如果能修改c，或const加在p前面，就是顶层。</p><p>为啥搞这个呢，因为如果这个不清楚，遇到复杂的问题不好分析，例如，上面的四个指针可以相互赋值吗，谁可以赋值给谁，谁不行。</p><p>赋值的一个原则是权限不能扩大，底层权限小于顶层，也就是说：</p><blockquote><b>const * const p &lt; const *p &lt; * const p &lt; *p</b></blockquote><p>解释下为啥底层小于顶层，很容易理解，权限是从变量交出去的，保证变量不变肯定权限小于能改变变量的。</p><h2><b>Java的final</b></h2><p>java的final也是让变量不变，但是由于java没有显式的指针，那么就只有一个final可用了，其实就是顶层const，所以这就除了一个问题，就是权限管理不严格，比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">public class Test { \n    private final int[] info = new int[5];\n    public int[] getInfo() { return info; }\n}\n\npublic class Main { \n    public static void main(String[] args) { \n        Test t = new Test(); \n        var info = t.getInfo(); \n        info[0] = 5; \n        for (var i : info) { System.out.println(i); } \n    }\n}</code></pre></div><p>很容易就把info改了，即使把Main里面的info改成final也一样，<br/>不过一般情况下多加注意不用担心，如果需要可以使用使用clone方法，具体方法查阅相关资料。</p><p>与之相比C++：</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n\nclass Test {\nprivate: \n    const int info[5] = {0};\npublic: \n    const int* getInfo() {return info;}\n};\n\nint main(){ \n    Test t; \n    const int* info = t.getInfo(); \n    // info[0] = 5;\n    for(auto i = 0; i &lt; 5; i++) { std::cout &lt;&lt; info[i]; }\n}</code></pre></div><p>getInfo的返回值不能是int*，main中info的类型也不能是int*，info[5]也不能修改，因此这一系列保证了权限的问题。</p>", 
            "topic": [
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40352009", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "谈谈C的类型", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>我们知道C语言有类型的概念，比如常用的char，void，int，float等。但是很多初学者仅仅停留在int或char有几个字节，多少。现在我们好好聊聊类型。<br/><br/><b>内存对齐</b></p><p>我们都知道在机器里面都是0，1，8位组成一个字节，32位的机器1个字节一般是一个char，4个字节一般就是一个int，最高位又设计到符号啥的。</p><p>但是机器是怎么把位和变量对应起来呢，比如我们现在有16个位，也就是2个字节，那么它是2个char呢，还是半个int呢，甚至是其他情况。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e4e4596a08813a1fc528a060ab3f7dfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"711\" data-original=\"https://pic3.zhimg.com/v2-e4e4596a08813a1fc528a060ab3f7dfe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;711&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"711\" data-original=\"https://pic3.zhimg.com/v2-e4e4596a08813a1fc528a060ab3f7dfe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e4e4596a08813a1fc528a060ab3f7dfe_b.jpg\"/></figure><p>可以这样理解，机器对字节的分配是固定的，是预先定好的，类似于学生宿舍（8人间为例），前8个人肯定是一个宿舍，不存在把内部继续拆开的情况，这样就最小单位就是一个字节（8位），上面所说的16位就有确定的分配了。</p><p>但是还有一个问题，在结构体中变量是存在一起的，是不是说char和int不同长度的变量放在一起呢？这里还有一个有趣的点是，32位机器为了处理方面，是把4个字节放在一起处理的，也就是说，如果最开始只有个char和int，那么他是这样存的：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb\" width=\"828\" data-original=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;828&#39; height=&#39;175&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"828\" data-original=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-777b43936e5614f1ef5d630a0f70693b_b.jpg\"/></figure><p>为啥呢？32机器每次处理32位四个字节，相比每次一个字节更能发挥优势。</p><p>你可以用这个代码试下：</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n\nint main() {\n    struct {\n        char a;\n        int b;\n        char c;\n    }s;\n    printf(&#34;%d %d %d %d %d %d&#34;, &amp;s.a, &amp;s.a + 1, &amp;s.b, &amp;s.b + 1, &amp;s.c, &amp;s.c + 1);\n}</code></pre></div><p>我的输出是：-829933060 -829933059 -829933056 -829933052 -829933052 -829933051</p><p>每次运行结果是不同的，但是可以看到a和b直接的内存空了3个字节，可见如果你要在这种情况下节省内存的话，把a和c放一起更好些。</p><p>详细的内存对齐原理可以参考其他博客文章。</p><p><br/><b>格式化输出</b></p><p>了解了上面的内容，就能理解机器实际上是没有类型的概念的，就可以明白为啥C有这么多的输出格式了。</p><p>%d，%c，%f各种，就是为了指定你要怎么读这个内存，%c就是读一个字节，%d是4个字节。如果你用%c读int的内容，结果可能不是你想要的，同样如果用%f读char的内容，也会有奇怪的结果。</p><p>你可以尝试运行这个代码：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%f %c&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p><b>类型的建议</b></p><p>值得注意的是不同环境下的类型可能是不同的，C标准没有硬性规定长度大小，比如32位long和64位long就是4和8，因此考虑到可移植性，建议使用`&lt;stdint.h&gt;`头文件，你就可以使用这样的类型：`int8_t, int16_t,uint8_t`，大小一目了然，更加方便和实用。</p>", 
            "topic": [
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }, 
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37548485", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 1, 
            "title": "LaTex写论文中遇到的问题", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>主要是毕业设计论文中遇到的一些问题和解决方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>参考文献</b></p><p>由于国内很多使用的是GBT7714，因此这里介绍如何使用它：</p><div class=\"highlight\"><pre><code class=\"language-text\">\\usepackage[backend=biber,style=gb7714-2015,seconds=true,gbnamefmt=lowercase,gbpub=false]{biblatex}\n\\addbibresource[location=local]{bibfile.bib}</code></pre></div><p>第一行：这里需要使用biber来编译，style就是标准名字，seconds是编译的时候提示要加的，<br/>gbnamefmt是设定作者名字不要全部大写，gbpub是不出现参考文献出版信息不全的东西。</p><p>第二行：指定bib文件相对路径，当然路径是主tex文件所在目录。</p><div class=\"highlight\"><pre><code class=\"language-text\">\\addcontentsline{toc}{section}{参考文献}\n\\tolerance=500\n\\printbibliography[heading=bibliography,title=参考文献]\n</code></pre></div><p>第一行：让参考文献出现在目录里。</p><p>第二行：这里主要是解决了有些参考文献里边因为内容没有断行超出页边距的情况，酌情删除。</p><p>第三行：打印出参考文献。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>导入pdf页</b></p><p>因为有些文字在编译后字体无法达到要求，因此采用了将word转为pdf后导入。</p><div class=\"highlight\"><pre><code class=\"language-text\">\\usepackage{pdfpages}\n\\includepdf[pages={1,2}]{figure/thesis_cover.pdf}\n</code></pre></div><p>第一行：导入pdfpages包。</p><p>第二行：导入pdf页，如果没有<code>[pages={1,2}]</code>只导入一页，因此需要设定页码导入，<br/><code>{figure/thesis_cover.pdf}</code>是设定路径，这里是在<code>figure/thesis_cover.pdf</code>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>修改目录样式</b></p><p>目录里章后没有点，字体也与节不同，为了设定成一样的字体，需要使用toclodt包。</p><div class=\"highlight\"><pre><code class=\"language-text\">\\usepackage[subfigure]{tocloft}\n\\renewcommand{\\cftsecleader}{\\cftdotfill{\\cftdotsep}}\n\\renewcommand{\\cftsecfont}{\\songti}\n\\renewcommand{\\cftsecpagefont}{\\songti}</code></pre></div><p>第一行：导入<code>tocloft</code>包，中间的参数不加会报错，暂时不管。</p><p>第二行：为章（文内是<code>section</code>）后面加入连接点。</p><p>第三行：设定<code>section</code>字体，<code>\\cftsecfont</code>中的<code>sec</code>表示<code>section</code>，更多设置看刘海洋的《LaTeX入门》。</p><p>第四行：设定<code>section</code>后面的页码字体，<code>sec</code>同上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>目录不出现页码</b></p><div class=\"highlight\"><pre><code class=\"language-text\">\\pagestyle{empty}\n\\thispagestyle{empty}</code></pre></div><p>上面两个命令都可以达到不显示页码的情况，但是在做了修改目录样式的操作后，目录第一页出现了页码，为此，可以这样做：</p><div class=\"highlight\"><pre><code class=\"language-text\">\\tocloftpagestyle{empty}</code></pre></div><p>上面这个命令需要在<code>\\tableofcontents</code>之前使用，就可以做到目录不显示页码了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>修改图表标题后的<code>:</code>为空格</b></p><p>默认情况下为：图1.3： xxx，要修改为图1.3 xxx。</p><div class=\"highlight\"><pre><code class=\"language-text\">\\usepackage{caption}\n\\captionsetup{labelsep=quad}</code></pre></div><p>第一行：导入<code>caption</code>包，如果图和表的标题已经有了，这个包应该已经导入了。</p><p>第二行：设定<code>labelsep</code>为<code>quad</code>即为空格，也可以自行设定为其他。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>不显示链接的颜色框</b></p><div class=\"highlight\"><pre><code class=\"language-text\">\\hypersetup{hidelinks}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>参考</b>：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/hushidong/biblatex-gb7714-2015\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">biblatex-gb7714-2015</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tsaoyu/WHUT-LaTeX-bachelor\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WHUT-LaTeX-bachelor</a></p><p>刘海洋. LaTex入门.</p>", 
            "topic": [
                {
                    "tag": "论文", 
                    "tagLink": "https://api.zhihu.com/topics/19572442"
                }, 
                {
                    "tag": "LaTeX", 
                    "tagLink": "https://api.zhihu.com/topics/19568710"
                }, 
                {
                    "tag": "LaTeX 排版与设计", 
                    "tagLink": "https://api.zhihu.com/topics/19773080"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36809483", 
            "userName": "李文康", 
            "userLink": "https://www.zhihu.com/people/10f36cecadcdaf893c02fb01876674ea", 
            "upvote": 0, 
            "title": "margin 合并还是不合并,这是一个问题", 
            "content": "<p><b>Contact me:</b></p><p>email: changzhiliwenkang@outlook.com</p><p>github:  <a href=\"https://link.zhihu.com/?target=https%3A//liwenkang.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Welcome to My GitHub Page</a></p><hr/><p>本文讨论了在不同条件下的 margin 合并的 ~~bug~~(划掉) feature</p><p>html 结构如下</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est quaerat alias nobis totam, animi veniam, quibusdam expedita impedit error, eligendi quis iste accusantium, reprehenderit sed ipsa voluptates a porro ratione.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis harum eum distinctio provident voluptatem magnam ad eligendi odit earum laborum minima, blanditiis quos adipisci tenetur vero obcaecati impedit quod cum.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quidem labore libero perspiciatis mollitia dolores quasi amet incidunt, accusantium odit saepe, tempora vel rerum debitis qui, sint, sapiente esse error maxime!<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"c\">&lt;!-- 下面的 h1 标签是为了方便测量  --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n  Lorem<span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n  Lorem<span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n  Lorem\n<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>css 如下</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"c\">/* 为保证在所有浏览器下效果一致 */</span>\n<span class=\"o\">*</span> <span class=\"p\">{</span>\n    <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2>一. 从最简单的情况开始讨论--父子嵌套 margin</h2><p class=\"ztext-empty-paragraph\"><br/></p><h2>1.1 父( ul )子( li )同时设置了 margin-bottom, 且 ul 未设置 border</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>(<b>注意!</b> 此时的 ul 边距的定义: ul 的 content-area 区域下边线到 h1 content-area 区域 上边线的距离, 下面简称为 ul-margin)</p><p>(<b>注意!</b> 此时的 li 边距的定义: li content-area 区域下边线到 h1 content-area 区域 上边线的距离, 下面简称为 li-margin)</p><p>(<b>注意!</b> 此时这两个边距是等效的)</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>(1) 都是正数(即两个 margin-bottom 都是正值)</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9519b455c12bbc8bcae4f8da8b9cccbe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic3.zhimg.com/v2-9519b455c12bbc8bcae4f8da8b9cccbe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;660&#39; height=&#39;473&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"660\" data-original=\"https://pic3.zhimg.com/v2-9519b455c12bbc8bcae4f8da8b9cccbe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9519b455c12bbc8bcae4f8da8b9cccbe_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 50 &gt; 20 所以合并后 ul-margin 为 50\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(2) ul 的 margin-bottom 为正, li 的 margin-bottom 为负</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b32e922c9c8a1cd5dc359849566f18d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic1.zhimg.com/v2-b32e922c9c8a1cd5dc359849566f18d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;777&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"777\" data-original=\"https://pic1.zhimg.com/v2-b32e922c9c8a1cd5dc359849566f18d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b32e922c9c8a1cd5dc359849566f18d4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 20 + (-50) = -30 所以合并后 ul-margin 为 -30\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(3) ul 的 margin-bottom 为负, li 的 margin-bottom 为正</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f08bc5b122f70ff24a1789a507918df1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"678\" data-original=\"https://pic2.zhimg.com/v2-f08bc5b122f70ff24a1789a507918df1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;678&#39; height=&#39;408&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"678\" data-original=\"https://pic2.zhimg.com/v2-f08bc5b122f70ff24a1789a507918df1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f08bc5b122f70ff24a1789a507918df1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 20 + (-50) = -30 所以合并后 ul-margin 为 -30\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(4) 都是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4b01f68ec932a660f80bedcfe6ba3663_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic4.zhimg.com/v2-4b01f68ec932a660f80bedcfe6ba3663_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;673&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"673\" data-original=\"https://pic4.zhimg.com/v2-4b01f68ec932a660f80bedcfe6ba3663_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4b01f68ec932a660f80bedcfe6ba3663_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 |-50| &gt; |-20|, 所以合并后的 ul-margin 为 -50px\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>小结:</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">当父( ul )子( li )同时设置了 margin-bottom 时\n1. 如果符号相同(即同时为正,或同时为负), ul-margin(li-margin) 取绝对值大的那个\n2. 如果符号不同(即一正一负), ul-margin(li-margin) 取两者之和\n\nul-margin(li-margin) = \n    MAX(如果|ul 的 margin-bottom|正, 如果|li 的 margin-bottom|正) + \n    MAX(如果|ul 的 margin-bottom|负, 如果|li 的 margin-bottom|负)\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>1.2 父( ul )子( li )同时设置了 margin-bottom, 且 ul 设置了 border</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>(<b>注意!</b> 此时的 ul 边距的定义: border 下边线到 h1 content-area 区域 上边线的距离, 下面简称为 ul-margin)</p><p>(<b>注意!</b> 此时的 li 边距的定义: li content-area 区域下边线到 h1 content-area 区域 上边线的距离, 下面简称为 li-margin)</p><p>(<b>注意!</b> 此时ul-margin 和 li-margin 两个边距 &#34;不&#34; 是等效的)</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>(1) 都是正数, 且 ul 有 border</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a957640e446409d38009c620575f42d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-a957640e446409d38009c620575f42d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;835&#39; height=&#39;473&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-a957640e446409d38009c620575f42d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a957640e446409d38009c620575f42d0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">50 &gt; 20 所以\n此时的 ul-margin = ul 的 margin-bottom = 50\n此时的 li-margin = li 的 margin-bottom + ul 的 border + ul 的 margin-bottom = 50 + 5 +20 = 75\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(2) ul 的 margin-bottom 为正, li 的 margin-bottom 为负, 且 ul 有 border</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f9bae4db19ff6068c45d327dcc99cbae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"688\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb\" width=\"688\" data-original=\"https://pic3.zhimg.com/v2-f9bae4db19ff6068c45d327dcc99cbae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;688&#39; height=&#39;406&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"688\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"688\" data-original=\"https://pic3.zhimg.com/v2-f9bae4db19ff6068c45d327dcc99cbae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f9bae4db19ff6068c45d327dcc99cbae_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于一正一负 所以\n\n此时的 ul-margin = ul 的 margin-bottom = 50\n此时的 li-margin = li 的 margin-bottom + ul 的 border + ul 的 margin-bottom = (-20) + 5 + 50 = 35\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(3) ul 的 margin-bottom 为负, li 的 margin-bottom 为正, 且 ul 有 border</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6c321bddab4425a16c1ab70a0336d3f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"989\" data-rawheight=\"463\" class=\"origin_image zh-lightbox-thumb\" width=\"989\" data-original=\"https://pic2.zhimg.com/v2-6c321bddab4425a16c1ab70a0336d3f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;989&#39; height=&#39;463&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"989\" data-rawheight=\"463\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"989\" data-original=\"https://pic2.zhimg.com/v2-6c321bddab4425a16c1ab70a0336d3f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6c321bddab4425a16c1ab70a0336d3f5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于一正一负 所以\n\n此时的 ul-margin = ul 的 margin-bottom = -50\n此时的 li-margin = li 的 margin-bottom + ul 的 border + ul 的 margin-bottom = -50 + 5 +20 = -25\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(4) 都是负数, 且 ul 有 border</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0482f89571b6407e69f2cad12f04b809_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"746\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"746\" data-original=\"https://pic2.zhimg.com/v2-0482f89571b6407e69f2cad12f04b809_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;746&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"746\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"746\" data-original=\"https://pic2.zhimg.com/v2-0482f89571b6407e69f2cad12f04b809_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0482f89571b6407e69f2cad12f04b809_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 |-50| &gt; |-20| 所以\n\n此时的 ul-margin = ul 的 margin-bottom = -50\n此时的 li-margin = li 的 margin-bottom + ul 的 border + ul 的 margin-bottom = -50 + 5 - 20 = -65\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>小结:</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">当父( ul )子( li )同时设置了 margin-bottom 时, 且 ul 设置了 border\n1. ul-margin = ul 的 margin-bottom(忽略 border 和 li-bottom)\n2. li-margin = li 的 margin-bottom + ul 的 border + ul 的 margin-bottom\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">归纳为:\n    一. 当父( ul )子( li )同时设置了 margin-bottom 时\n        1. 如果符号相同(即同时为正,或同时为负), ul-margin(li-margin) 取绝对值大的那个\n        2. 如果符号不同(即一正一负), ul-margin(li-margin) 取两者之和\n\n    二. 当父( ul )子( li )同时设置了 margin-bottom 时, 且 ul 设置了 border\n        1. ul-margin = ul 的 margin-bottom(忽略 border 和 li-bottom)\n        2. li-margin = li 的 margin-bottom + ul 的 border + ul 的 margin-bottom\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>二. 再讨论复杂一点的情况--父子嵌套 margin + 兄弟元素 margin</h2><p class=\"ztext-empty-paragraph\"><br/></p><h2>2.1 父( ul )子( li )同时设置了 margin-bottom, ul 未设置 border, 兄弟元素( h1 )设置了 margin-top</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>(<b>注意!</b> 此时这 ul-margin 和 li-margin 两个边距是等效的)</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>(1) 都是正数(即 ul 和 li 的 margin-bottom, 以及 h1 的 margin-top 是正值)</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9abbe5aa10f05e5260871ad61e4b5674_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"666\" data-original=\"https://pic1.zhimg.com/v2-9abbe5aa10f05e5260871ad61e4b5674_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;666&#39; height=&#39;484&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"666\" data-original=\"https://pic1.zhimg.com/v2-9abbe5aa10f05e5260871ad61e4b5674_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9abbe5aa10f05e5260871ad61e4b5674_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 50 &gt; 20 所以 先取 50\n50 &gt; 30 所以 ul-margin 为 50\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(2) ul 和 li 的 margin-bottom 为正数, h1 的 margin-top 是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4575d747ab499d4194b9f47039e76e6b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"705\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"705\" data-original=\"https://pic4.zhimg.com/v2-4575d747ab499d4194b9f47039e76e6b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;705&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"705\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"705\" data-original=\"https://pic4.zhimg.com/v2-4575d747ab499d4194b9f47039e76e6b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4575d747ab499d4194b9f47039e76e6b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 100 &gt; 20 所以 先取 100\n100 + (-50) = 50 所以 ul-margin 为 50\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(3) ul 的 margin-bottom 为正, li 的margin-bottom 为负 , h1 的 margin-top 是正数</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>h1 的 margin-top 为正值</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dd0e7c1bd01f4cc1d5a1b3073120c940_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"434\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic1.zhimg.com/v2-dd0e7c1bd01f4cc1d5a1b3073120c940_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"434\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic1.zhimg.com/v2-dd0e7c1bd01f4cc1d5a1b3073120c940_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dd0e7c1bd01f4cc1d5a1b3073120c940_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 100 &gt; 50 取 100\n100 + (-20) = 80 所以 ul-margin 为 80\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(4) ul 的 margin-bottom 为正, li 的margin-bottom 为负 , h1 的 margin-top 是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e3baf0a3511886c0e110667bc383c616_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic3.zhimg.com/v2-e3baf0a3511886c0e110667bc383c616_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;399&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic3.zhimg.com/v2-e3baf0a3511886c0e110667bc383c616_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e3baf0a3511886c0e110667bc383c616_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 |-50| &gt; |-20| 取 -50\n100 + (-50) = 50 所以 ul-margin 为 50\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(5) ul 的 margin-bottom 为负, li 的margin-bottom 为正 , h1 的 margin-top 是正数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-75c0b130f001eab29a5f0430744732a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic4.zhimg.com/v2-75c0b130f001eab29a5f0430744732a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic4.zhimg.com/v2-75c0b130f001eab29a5f0430744732a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-75c0b130f001eab29a5f0430744732a7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">由于 50 &gt; 20 取 50\n50 + (-100) = -50  所以 ul-margin 为 -50\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(6) ul 的 margin-bottom 为负, li 的margin-bottom 为正 , h1 的 margin-top 是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-031fdfefdc7d4d32df79452b5ee86e06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"453\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic3.zhimg.com/v2-031fdfefdc7d4d32df79452b5ee86e06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;453&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"453\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic3.zhimg.com/v2-031fdfefdc7d4d32df79452b5ee86e06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-031fdfefdc7d4d32df79452b5ee86e06_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">|-100| &gt; |-50| 取 -100\n(-100) + 20 = -80 所以 ul-margin 为 80\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(7) ul 和 li 的 margin-bottom 都是负数, h1 的 margin-top 是正数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-53c8f65e4ceeeabb1e3112ab85dc3821_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"791\" data-rawheight=\"417\" class=\"origin_image zh-lightbox-thumb\" width=\"791\" data-original=\"https://pic2.zhimg.com/v2-53c8f65e4ceeeabb1e3112ab85dc3821_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;791&#39; height=&#39;417&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"791\" data-rawheight=\"417\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"791\" data-original=\"https://pic2.zhimg.com/v2-53c8f65e4ceeeabb1e3112ab85dc3821_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-53c8f65e4ceeeabb1e3112ab85dc3821_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">|-50| &gt; |-20| 取 -50\n(-50) + 80 = 30 所以 ul-margin 为 30\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(8) 都是负数(ul 和 li 的 margin-bottom 以及 h1 的 margin-top 都是负数)</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ce5c3189ded930f4b16a59f7f5cb6199_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"693\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"693\" data-original=\"https://pic2.zhimg.com/v2-ce5c3189ded930f4b16a59f7f5cb6199_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;693&#39; height=&#39;310&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"693\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"693\" data-original=\"https://pic2.zhimg.com/v2-ce5c3189ded930f4b16a59f7f5cb6199_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ce5c3189ded930f4b16a59f7f5cb6199_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 |-50| &gt; |-20| 取 -50\n|-50| &lt; |-80| ul-margin 取 -80\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>小结:</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">当父( ul )子( li )同时设置了 margin-bottom 时, 兄弟元素( h1 )设置了 margin-top\n1. 如果正负相同(即同时为正,或同时为负)\n    ul-margin(li-margin) = MAX(|ul 的 margin-bottom|, |li 的 margin-bottom|, |h1 的 margin-bottom|)\n2. 如果 ul li, h1 的正负不同\n    ul-margin(li-margin) = MAX(如果|ul 的 margin-bottom|正的, 如果|li 的 margin-bottom|正的, 如果|h1 的 margin-bottom|正的) + MAX(如果|ul 的 margin-bottom|负的, 如果|li 的 margin-bottom|负的, 如果|h1 的 margin-bottom|负的)\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>2.2 父( ul )子( li )同时设置了 margin-bottom, 且 ul 设置了 border, 兄弟元素( h1 )设置了 margin-top</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>(<b>注意!</b> 此时ul-margin 和 li-margin 两个边距 &#34;不&#34; 是等效的)</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>(1) 都是正数(即 ul 和 li 的 margin-bottom, 以及 h1 的 margin-top 是正值)</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7cd55148011e9a1442ad4d058c15e1fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"654\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb\" width=\"654\" data-original=\"https://pic1.zhimg.com/v2-7cd55148011e9a1442ad4d058c15e1fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;654&#39; height=&#39;528&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"654\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"654\" data-original=\"https://pic1.zhimg.com/v2-7cd55148011e9a1442ad4d058c15e1fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7cd55148011e9a1442ad4d058c15e1fc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 ul 的 margin-bottom &gt; h1 的 margin-top 所以 ul-margin 为 50\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom = 75\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(2) ul 和 li 的 margin-bottom 为正数, h1 的 margin-top 是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5454fdfd7d188b3d19987135622142c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"685\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"685\" data-original=\"https://pic4.zhimg.com/v2-5454fdfd7d188b3d19987135622142c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;685&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"685\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"685\" data-original=\"https://pic4.zhimg.com/v2-5454fdfd7d188b3d19987135622142c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5454fdfd7d188b3d19987135622142c3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 ul 的 margin-bottom + h1 的 margin-top = 50 所以 ul-margin 为 50\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom + h1 的 margin-top = 75\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(3) ul 的 margin-bottom 为正, li 的margin-bottom 为负 , h1 的 margin-top 是正数</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>h1 的 margin-top 为正值</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b24545b1a3d5dc505d3ec6a4c9b17b41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"677\" data-original=\"https://pic2.zhimg.com/v2-b24545b1a3d5dc505d3ec6a4c9b17b41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;677&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"677\" data-original=\"https://pic2.zhimg.com/v2-b24545b1a3d5dc505d3ec6a4c9b17b41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b24545b1a3d5dc505d3ec6a4c9b17b41_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 ul 的 margin-bottom &gt; h1 的 margin-top 所以 ul-margin 为 100\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom = 85\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(4) ul 的 margin-bottom 为正, li 的margin-bottom 为负 , h1 的 margin-top 是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b6d1a286972e0a8d72ecce0bfab5c752_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-b6d1a286972e0a8d72ecce0bfab5c752_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;661&#39; height=&#39;413&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-b6d1a286972e0a8d72ecce0bfab5c752_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b6d1a286972e0a8d72ecce0bfab5c752_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 ul 的 margin-bottom + h1 的 margin-top = 50 所以 ul-margin 为 50\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom + h1 的 margin-top = 35\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(5) ul 的 margin-bottom 为负, li 的margin-bottom 为正 , h1 的 margin-top 是正数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-72c4e7d6cc383a27e3954900a01fac6e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"668\" data-original=\"https://pic3.zhimg.com/v2-72c4e7d6cc383a27e3954900a01fac6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;668&#39; height=&#39;439&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"668\" data-original=\"https://pic3.zhimg.com/v2-72c4e7d6cc383a27e3954900a01fac6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-72c4e7d6cc383a27e3954900a01fac6e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 ul 的 margin-bottom + h1 的 margin-top = -50 所以 ul-margin 为 -50\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom + h1 的 margin-top = -25\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(6) ul 的 margin-bottom 为负, li 的margin-bottom 为正 , h1 的 margin-top 是负数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>    \n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-36e114f51fef44332433adc3647d1339_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"674\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"674\" data-original=\"https://pic2.zhimg.com/v2-36e114f51fef44332433adc3647d1339_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;674&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"674\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"674\" data-original=\"https://pic2.zhimg.com/v2-36e114f51fef44332433adc3647d1339_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-36e114f51fef44332433adc3647d1339_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 |ul 的 margin-bottom| &gt; |h1 的 margin-top| = -50 所以 ul-margin 为 -100\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom = -75\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(7) ul 和 li 的 margin-bottom 都是负数, h1 的 margin-top 是正数</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6f8dfb290d0d6d864a8137176e02ce18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb\" width=\"736\" data-original=\"https://pic1.zhimg.com/v2-6f8dfb290d0d6d864a8137176e02ce18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;736&#39; height=&#39;398&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"736\" data-original=\"https://pic1.zhimg.com/v2-6f8dfb290d0d6d864a8137176e02ce18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6f8dfb290d0d6d864a8137176e02ce18_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 ul 的 margin-bottom + h1 的 margin-top = 30 所以 ul-margin 为 30\nli-margin = ul 的 margin-bottom + ul 的 border + li 的 margin-bottom + h1 的 margin-top = 15\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>(8) 都是负数(ul 和 li 的 margin-bottom 以及 h1 的 margin-top 都是负数)</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"nt\">ul</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-50</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">li</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mi\">-20</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">-80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5ca70ec4865302817df843212f00c474_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"686\" data-original=\"https://pic1.zhimg.com/v2-5ca70ec4865302817df843212f00c474_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;686&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"686\" data-original=\"https://pic1.zhimg.com/v2-5ca70ec4865302817df843212f00c474_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5ca70ec4865302817df843212f00c474_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">因为 |ul 的 margin-bottom| &lt; |h1 的 margin-top| 所以 ul-margin 为 -80\nli-margin = ul 的 border + li 的 margin-bottom + h1 的 margin-top = -95\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">归纳为:\n    一. 当父( ul )子( li )兄弟( h1 )同时设置了 margin-bottom 时\n        通式可以写成: ul-margin(li-margin) =  MAX(如果正,如果正,如果正) + MAX(|如果负|,|如果负|,|如果负|)\n\n    二. 当父( ul )子( li )兄弟( h1 )同时设置了 margin-bottom 时, 且 ul 设置了 border\n        1. ul-margin = MAX(如果|ul 的 margin-bottom|为正, 如果|h1 的 margin-top|为正) + MAX(如果|ul 的 margin-bottom|为负, 如果|h1 的 margin-top|为负), 也就是四个位置选两个位置填上去\n        2. li-margin = ul-margin + ul 的 border + li 的 margin-bottom\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>全文总结:</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">ul 无 border 时:\n\n    ul-margin(li-margin) =  MAX(如果正,如果正,如果正) + MAX(|如果负|,|如果负|,|如果负|), 也就是六个位置选三个位置填上去。（最近发现：如果父元素 ul 设置了固定高度，那么子元素 li 设置 margin-bottom 是不会生效的，相当于此时只考虑 ul 的margin-bottom 和 h1 的margin-top）\n\n\nul 有 border 时:\n\n    ul-margin = MAX(如果|ul 的 margin-bottom|为正, 如果|h1 的 margin-top|为正) + MAX(如果|ul 的 margin-bottom|为负, 如果|h1 的 margin-top|为负), 也就是四个位置选两个位置填上去\n\n    li-margin = ul-margin + ul 的 border + li 的 margin-bottom\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>欢迎讨论,如有错误,还请诸位大佬不吝赐教,非常感谢!</p><p>2018年5月26日 22:37:20</p>", 
            "topic": [
                {
                    "tag": "CSS", 
                    "tagLink": "https://api.zhihu.com/topics/19551326"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36302775", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 14, 
            "title": "让GitHub Page支持Latex公式", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>GitHub Page里的Jekyll虽然支持Markdown，但是不能正确显示公式，可以借用MathJax帮助渲染。</p><p>方法：</p><p>1 设置markdown引擎为kramdown，方法为在 <i>_config.yml </i>里添加：</p><p>markdown: kramdown</p><p>2 在md文件开始输入代码：</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/x-mathjax-config&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"nx\">MathJax</span><span class=\"p\">.</span><span class=\"nx\">Hub</span><span class=\"p\">.</span><span class=\"nx\">Config</span><span class=\"p\">({</span>\n            <span class=\"nx\">tex2jax</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">skipTags</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;script&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;noscript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;style&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;textarea&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pre&#39;</span><span class=\"p\">],</span>\n            <span class=\"nx\">inlineMath</span><span class=\"o\">:</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;$&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;$&#39;</span><span class=\"p\">]]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span></code></pre></div><p>然后正文就可以写公式：$ e = m c^2 $ 这样就能正确显示了。</p><hr/><p>如果要所有文档都使用mathjax，可以在主题配置文件里面的&lt;head&gt;标签里加入上面代码，但是实际测试发现，每次都会连接mathjax所以加载页面很慢。因此建议对需要公式显示的文档开启。</p><p>如果是在Gtihub Page搭建的时候选择的主题，仓库里看不到主题配置文件可以这样做：</p><p>1 到</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/pages-themes/THEME_NAME/blob/master/_layouts/default.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/pages-themes</span><span class=\"invisible\">/THEME_NAME/blob/master/_layouts/default.html</span><span class=\"ellipsis\"></span></a></p><p>把THEME_NAME替换为自己的主题名字，比如我的主题名字为<code>Cayman</code>，然后把这个文件的内容添加到自己仓库里面的  <i>_layout/default.html</i>。</p><p>2 在&lt;head&gt;标签里添加上面的内容，就可以全部文档都使用了。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考：</p><a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/26275645/how-to-supported-latex-in-github-pages\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">StackOverflow问题</a><a href=\"https://www.zhihu.com/question/62114522/answer/312834856\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">如何在基于jekyll的github上发布的博客中支持MathJax(LaTex数学公式)？</a><p></p>", 
            "topic": [
                {
                    "tag": "GitHub", 
                    "tagLink": "https://api.zhihu.com/topics/19566035"
                }, 
                {
                    "tag": "Markdown", 
                    "tagLink": "https://api.zhihu.com/topics/19590742"
                }, 
                {
                    "tag": "Jekyll", 
                    "tagLink": "https://api.zhihu.com/topics/19670599"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36262117", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 1, 
            "title": "Python使用序列解决不确定循环层数的遍历问题", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>如果遇到循环层数是变量的情况如何解决？问题引入，有属性集：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0b95da124d595d2bfe10a92d74380fb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"303\" data-rawheight=\"355\" class=\"content_image\" width=\"303\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;303&#39; height=&#39;355&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"303\" data-rawheight=\"355\" class=\"content_image lazy\" width=\"303\" data-actualsrc=\"https://pic1.zhimg.com/v2-0b95da124d595d2bfe10a92d74380fb0_b.jpg\"/></figure><p>根据属性的类别可以求出初等集：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bb7d9e814bac43495ed7414ef3060a95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"203\" data-rawheight=\"577\" class=\"content_image\" width=\"203\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;203&#39; height=&#39;577&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"203\" data-rawheight=\"577\" class=\"content_image lazy\" width=\"203\" data-actualsrc=\"https://pic2.zhimg.com/v2-bb7d9e814bac43495ed7414ef3060a95_b.jpg\"/></figure><p>一个最直观的解法是：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n <span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]),</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">])],</span>\n <span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">]),</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]),</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])],</span>\n <span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]),</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">])]</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># len(r1)是r1的类别数</span>\n<span class=\"c1\"># 后面类似</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">)):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">)):</span>\n             <span class=\"c1\"># 求三个属性集合的交集</span>\n             <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">])</span></code></pre></div><p>对于上面的确定问题来说，这个方法已经足够，但是考虑到更为一般的情况，属性个数是不确定的，可能有很多个，这就意味着for将会有很多层，这个不确定循环层数的问题导致上面的思路将无法解决问题。</p><p>因此，我们需要换一个思路，由于不能动态决定循环层数，我们就不采用for循环的做法，思路简单描述为：</p><p>首先我们生成一个长度为属性长度的索引：</p><div class=\"highlight\"><pre><code class=\"language-text\"># index为[0]*属性个数，在上面的例子中为[0,0,0]\nindex = [0] * len(data)\n# index_max为index的最大值，在上面的例子中为[2,3,2]\nindex_max = [len(d) for d in data]</code></pre></div><p>然后读取index的初等集为：</p><div class=\"highlight\"><pre><code class=\"language-text\">def get(data, index):\n    out = data[0][index[0]]\n    for i in range(1, len(index)):\n        out = out &amp; data[i][index[i]]\n    return out</code></pre></div><p>更新index，可以获取新的index：</p><div class=\"highlight\"><pre><code class=\"language-text\">def add(index, index_max):\n    for i in range(1, len(index) + 1):\n        index[-i] += 1\n        if index[-i] &lt; index_max[-i]:\n            break\n        index[-i] %= index_max[-i]</code></pre></div><p>把上面的思路结合起来就是：</p><div class=\"highlight\"><pre><code class=\"language-text\">data = [\n    [set([1,2,3,4]), set([5,6,7,8,9,10])],\n    [set([1,8,9,10]), set([2,3,7]), set([4,5,6])],\n    [set([1,3,5,7,9]), set([2,4,6,8,10])]\n]\n\nindex = [0] * len(data)\nindex_max = [len(d) for d in data]\nsteps = sum(index_max)\n\ndef get(data, index):\n    out = data[0][index[0]]\n    for i in range(1, len(index)):\n        out = out &amp; data[i][index[i]]\n    return out\n\n\ndef add(index, index_max):\n    for i in range(1, len(index) + 1):\n        index[-i] += 1\n        if index[-i] &lt; index_max[-i]:\n            break\n        index[-i] %= index_max[-i]\n\nout = []\nfor i in range(0, steps):\n    out.append(get(data, index))\n    add(index, index_max)</code></pre></div><p>将这个算法思路做个比喻的话，就是index就是时间值，index_max是时间的最大值，steps是从开始到最大值所需要的次数，每次add就是增加时间值，每次get就是获取在index时间值时的一个初等集，当我们add够steps次，那么就完成了对初等集的完整获取，out就是最后的结果。</p><p>这样我们通过可变长度的序列化解了不确定循环层数的问题，所有类似需要不确定循环次数的问题可以借鉴该思路转化求解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>完</p><hr/><p>垃圾知乎编辑器(⊙﹏⊙)</p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "嵌套循环", 
                    "tagLink": "https://api.zhihu.com/topics/19963601"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34197518", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "Python中什么时候不使用List", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>List是python中非常方便，使用度极高的容器，基本上任何需要序列存储的时候都可以用，但是，有些时候我们应该有不同的选择。</p><p>例如，你需要存储100万的浮点数，array就更加合适，因为它更节省空间，存储的是数值，而不是float的对象。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">array</span> <span class=\"k\">import</span> <span class=\"n\">array</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n<span class=\"n\">num_array</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">6</span><span class=\"p\">)))</span>\n<span class=\"n\">num_np</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">6</span><span class=\"p\">)])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"n\">num_list</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"n\">num_array</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"n\">num_np</span><span class=\"p\">))</span></code></pre></div><p>输出为：</p><div class=\"highlight\"><pre><code class=\"language-text\">8697464  \n8183800  \n8000096</code></pre></div><p>注意到如果除去必须的存储空间8000000，三者额外需要的空间为：697464，183800，96，那么array比list少26%以上的空间，如果可以使用numpy的话，惊人的我们可以只需要96的额外空间，所以numpy更加推荐。</p><p>如果程序中需要大量的查询，例如`item in my_collection`，那么使用set更加高效：</p><div class=\"highlight\"><pre><code class=\"language-text\">from time import time\n\nnums_list = [i for i in range(10**4) if i % 3 == 0]\nstart = time()\nfor i in range(10**4):\n   i in nums_list\nprint(time() - start)\n\nnums_set = set(i for i in range(10**4) if i % 3 == 0)\nstart = time()\nfor i in range(10**4):\n   i in nums_set\nprint(time() - start)</code></pre></div><p>输出为：</p><div class=\"highlight\"><pre><code class=\"language-text\">0.5104689598083496  \n0.015645265579223633</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>时间基本上是1/50的差别，可见，set的查询要高效很多，因为set为查询的操作有专门的优化。</p><p>另一个有趣的东西是merroyview，我们知道python隐藏了很多和内存直接相关的操作，如果我们希望用更加底层的方式操作集合，那么可以考虑使用它：</p><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; numbers = array(&#39;h&#39;, [-2, -1, 0, 1, 2])\n&gt;&gt;&gt; memv = memoryview(numbers)\n&gt;&gt;&gt; len(memv)\n5\n&gt;&gt;&gt; memv[0]\n-2\n&gt;&gt;&gt; memv_oct = memv.cast(&#39;B&#39;)\n[254, 255, 255, 255, 0, 0, 1, 0, 2, 0]\n&gt;&gt;&gt; memv_oct[5] = 4\n&gt;&gt;&gt; numbers\narray(&#39;h&#39;, [-2, -1, 1024, 1, 2])</code></pre></div><p>注意之所以变成1024是因为4的赋值导致原来的0变成了10_00000000。这需要一点关于内存模型的知识。</p>", 
            "topic": [
                {
                    "tag": "标准库", 
                    "tagLink": "https://api.zhihu.com/topics/19595379"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34477153", 
            "userName": "28大杠", 
            "userLink": "https://www.zhihu.com/people/7eaaa820837f0347e8b720486fbfb9c0", 
            "upvote": 0, 
            "title": "安装tensorflow -> CUDA", 
            "content": "<h2>安装cuda</h2><h2>安装前准备</h2><p>确认有一个支持CUDA的GPU</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ lspci <span class=\"p\">|</span> grep -i nvidia\n<span class=\"c1\"># output</span>\n<span class=\"c1\"># 01:00.0 VGA compatible controller: NVIDIA Corporation Device 1b81 (rev a1)</span>\n<span class=\"c1\"># 01:00.1 Audio device: NVIDIA Corporation Device 10f0 (rev a1)</span></code></pre></div><p>确保系统有正确的内核header和安装开发包</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 安装</span>\n$ sudo apt-get install linux-headers-<span class=\"k\">$(</span>uname -r<span class=\"k\">)</span></code></pre></div><p>选择安装方式 -&gt; <b>runfile</b>安装</p><h2>Runfile 安装</h2><blockquote>参考文档<br/>  <a href=\"https://link.zhihu.com/?target=http%3A//docs.nvidia.com/cuda/cuda-quick-start-guide/index.html%23ubuntu-x86_64-run\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">docs.nvidia.com/cuda/cu</span><span class=\"invisible\">da-quick-start-guide/index.html#ubuntu-x86_64-run</span><span class=\"ellipsis\"></span></a></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>禁用 Nouveau 驱动: </li></ol><p>创建文件 /etc/modprobe.d/blacklist-nouveau.conf 文件内容为</p><div class=\"highlight\"><pre><code class=\"language-bash\">blacklist nouveau\noptions nouveau <span class=\"nv\">modeset</span><span class=\"o\">=</span><span class=\"m\">0</span>\n</code></pre></div><p>重新生成 the kernel initramfs:</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo update-initramfs -u</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>通过暂时在系统内核启动参数添加数字3重启进入级别3（text mode） \\<br/><i>此处使用了其他方法</i> \\<br/>ps： 准备好runfile文件以及所在目录</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li>重启电脑，在登录界面 Ctrl Alt F1 进入text mode </li><li>命令行输入 <code>sudo service lightdm stop</code> 关闭GUI</li><li>切换到runfile目录</li><li>安装 <code>sudo sh cuda*.run</code></li><li>返回GUI <code>sudo service lightdm start</code> + <code>ctrl alt f7</code></li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2>安装后操作</h2><h2>一定要做的</h2><p>环境变量</p><p><code>PATH</code>应当包含 <code>/usr/local/cuda/bin</code> 添加以下语句到<code>~/.bashrc</code>文件最后</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span>/usr/local/cuda/bin<span class=\"si\">${</span><span class=\"nv\">PATH</span><span class=\"p\">:+:</span><span class=\"si\">${</span><span class=\"nv\">PATH</span><span class=\"si\">}}</span></code></pre></div><p>64位机器runfile安装方式需要另一步操作</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">export</span> <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>/usr/local/cuda/lib64<span class=\"si\">${</span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"p\">:+:</span><span class=\"si\">${</span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"si\">}}</span></code></pre></div><p>其他</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">export</span> <span class=\"nv\">CUDA_HOME</span><span class=\"o\">=</span>/usr/local/cuda</code></pre></div><p>配置立即生效</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">$source</span> ~/.bashrc</code></pre></div><h2>确认安装</h2><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 确认版本</span>\n$ cat /proc/driver/nvidia/version \n\n<span class=\"c1\"># 编译样例</span>\n<span class=\"c1\"># 时间有几分钟</span>\n<span class=\"nb\">cd</span> ~/~/NVIDIA_CUDA-9.1_Samples\nmake\n\n<span class=\"c1\"># 运行</span>\n<span class=\"c1\"># 找到deviceQuery文件运行</span>\n./deviceQuery</code></pre></div><p>如果显示 <code>Detected CUDA Capable device</code> 那么就应该安装完成了</p>", 
            "topic": [
                {
                    "tag": "TensorFlow", 
                    "tagLink": "https://api.zhihu.com/topics/20032249"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34477241", 
            "userName": "28大杠", 
            "userLink": "https://www.zhihu.com/people/7eaaa820837f0347e8b720486fbfb9c0", 
            "upvote": 0, 
            "title": "安装tesorflow -> Cudnn", 
            "content": "<h2>安装Cudnn</h2><blockquote>参考文档 <a href=\"https://link.zhihu.com/?target=http%3A//docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">docs.nvidia.com/deeplea</span><span class=\"invisible\">rning/sdk/cudnn-install/index.html</span><span class=\"ellipsis\"></span></a><br/>IDIA cuDNN是用于深度神经网络的GPU加速库。它强调性能、易用性和低内存开销。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>解压文件</li><li>复制cudnn文件到CUDA工具包目录</li></ol><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include\n$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</code></pre></div><p>这样就可以了</p>", 
            "topic": [
                {
                    "tag": "TensorFlow", 
                    "tagLink": "https://api.zhihu.com/topics/20032249"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34477251", 
            "userName": "28大杠", 
            "userLink": "https://www.zhihu.com/people/7eaaa820837f0347e8b720486fbfb9c0", 
            "upvote": 1, 
            "title": "安装tensorflow", 
            "content": "<h2>安装tensorflow</h2><h2>安装环境</h2><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>系统：Ubuntu 16</li><li>GPU：1070</li><li>安装方式：runfile</li></ul><h2>准备</h2><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>CUDA 9.0</li><li>cudnn v7</li><li>Python Anaconda 3.6</li><li>The libcupti-dev library \\<br/><code>未安装成功</code></li></ul><p>Unable to locate package cuda-command-line-tools</p><blockquote>后直接采用 <code>sudo apt-get install libcupti-dev</code> 并且添加环境变量</blockquote><p>$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64</p><h2>pip安装</h2><p>选择好所要安装的Python（区分系统自带的还是Anaconda的、Python2还是Python3）</p><div class=\"highlight\"><pre><code class=\"language-bash\">pip install tensorflow-gpu</code></pre></div><h2>验证安装是否成功</h2><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\"># Python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"kn\">as</span> <span class=\"nn\">tf</span>\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello, TensorFlow!&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">))</span></code></pre></div><h2>问题</h2><p>1.出现warning</p><blockquote>FutureWarning: Conversion of the second argument of issubdtype from <code>float</code> to <code>np.floating</code> is deprecated</blockquote><p>使用 <code>pip install numpy==1.13.0</code> 解决</p><p>2.黑窗可以正常运行，但是pycharm不可以正常运行出现Error</p><blockquote>ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory <br/></blockquote><p>查阅网上出现此问题应该是tensorflow版本和cuda版本不匹配，但是此处tensorflow1.6和cuda9.0是没有问题的 <br/>倒腾半天后不知道怎么就解决了（有可能是重启）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dcccedfdf2d5b6dc737e1a546cccab0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-dcccedfdf2d5b6dc737e1a546cccab0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-dcccedfdf2d5b6dc737e1a546cccab0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dcccedfdf2d5b6dc737e1a546cccab0f_b.jpg\"/></figure><p></p><p></p>", 
            "topic": [
                {
                    "tag": "TensorFlow", 
                    "tagLink": "https://api.zhihu.com/topics/20032249"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>同在命令行里能够使用，但是在Pycharm里面不能使用，重启感觉没什么作用</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这个是由于Pycharm的环境变量和shell不一致导致的</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33881888", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 2, 
            "title": "从C++的RAII理解智能指针的思路（二）", 
            "content": "<p>Contact me:</p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><ul><li><a href=\"https://zhuanlan.zhihu.com/p/33881856/\" class=\"internal\">从C++的RAII理解智能指针的思路（一）</a></li><li>从C++的RAII理解智能指针的思路（二）</li></ul><hr/><p>上次我们谈到了unique_ptr的思路，那么shared_ptr呢？注意到逻辑上这两个是有差别的，unique_ptr只有一个指针管理内存，而share_ptr可以多个指针管理，那么我们必须取消掉Unique中不能复制的限制，那么多次释放内存的问题怎么解决呢？</p><p>答案是我们可以通过计数的方式，如果有新指针指向申请的内存，那么计数值加1，少一个指针则减1，如果为0那么我们就释放内存，因此我们可以这样做(注意到我们使用了指针存储，这是为了保证所有的Shared使用同一个计数值)：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">Shared</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n   <span class=\"n\">Shared</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">];</span>\n       <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">unsigned</span><span class=\"p\">;</span>\n       <span class=\"o\">*</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">Shared</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Shared</span><span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">;</span>\n       <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n       <span class=\"o\">++</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">count</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">Shared</span><span class=\"o\">&amp;</span> <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Shared</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"cm\">/*与上面函数一样*/</span><span class=\"p\">}</span>\n   <span class=\"o\">~</span><span class=\"n\">Shared</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n       <span class=\"o\">--</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">count</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!*</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n           <span class=\"k\">delete</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"c1\">// other func\n</span><span class=\"c1\"></span><span class=\"k\">private</span><span class=\"o\">:</span>\n   <span class=\"kt\">unsigned</span> <span class=\"o\">*</span><span class=\"n\">count</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"n\">Shared</span> <span class=\"n\">s1</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n   <span class=\"n\">Shared</span> <span class=\"n\">s2</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这样一个最简陋最粗糙的实现就完成了，再次提醒，这只是模型为了理解，和c++内部实现并不一样，很多问题也没有解决，只是为了粗略了解原理。</p><p><b>Shared</b>有什么问题呢，当我们创建<b>Shared</b>的时候，我们必须指定申请内存，也就是说指针和内存空间要建立联系，但是有的时候我们不希望此时建立联系，为什么？也许我们只想需要的时候申请，不需要的时候就不用申请，这样即使有指针，也可以释放内存，或者只是做个检查，看下这个内存是不是有人管理，别人可以释放指针，这里就充当辅助的角色。更重要的是，如果Shared出现循环引用，那么内存还是会泄露，例如A-&gt;B,B-&gt;A，这样二者的count永远不会为0，也就内存泄露了，如果我们让管理是weak的，也就是说指针虽然指向内存，但是不计数。此处没有体现出这个问题，因为这是一个最为简单的实现，我们可以设定初始时刻设置内存地址，这样就可能出现这个问题了。</p><p>那怎么实现呢？我上面的说明已经说的很清楚了，就是不增加计数，注意通常Weak要和Shared结合使用，这样，我们需要做一下改动：</p><div class=\"highlight\"><pre><code class=\"language-text\">class Weak {\npublic:\n   Weak(Shared&amp; s) {\n       ptr = u.ptr;\n       count = u.count;\n   }\n   Weak(const Weak&amp; w) {\n       count = w.count;\n       ptr = w.ptr;\n   }\n   Weak&amp; operator=(const Weak&amp;) {/*与上面函数一样*/}\n   ~Weak() = default;\n   bool alive() { /*检查Shared是否存活*/ }\n   // other func\nprivate:\n   unsigned *count;\n   int *ptr;\n};\n\nint main() {\n   Shared s1(10);\n   Weak w1(s1);\n   Weak w2(w1);\n}</code></pre></div><p>我们使用Shared初始化Weak，然后保留Shared的信息（此处因为要访问Shared的private成员，因此需要设置Weak为Shared的友元类），通过一个alive函数检查对象是否存活，因为这只是个简单的例子，因此alive的代码没有实现，如果想要了解如何实现，要看源码细节，但是我们可以想象，因为可能要在Shared释放后查看Shared的状态，因此肯定还存在一块区域记录信息，此处过于细节我们略去。</p><p>好的，我们有了一个基本的认识，离实际的智能指针还有不小的距离，再次注意此处仅仅是个例子，细节需要看源码，而且我们没有考虑多线程情况下同步，Unique，Shared和Weak之间交互等问题，此处仅仅是希望对智能指针做了什么做一个粗略的分析。</p>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }, 
                {
                    "tag": "智能指针", 
                    "tagLink": "https://api.zhihu.com/topics/19616318"
                }, 
                {
                    "tag": "内存管理", 
                    "tagLink": "https://api.zhihu.com/topics/19579205"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33881856", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 10, 
            "title": "从C++的RAII理解智能指针的思路（一）", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><ul><li>从C++的RAII理解智能指针的思路（一）</li><li><a href=\"https://zhuanlan.zhihu.com/p/33881888/\" class=\"internal\">从C++的RAII理解智能指针的思路（二）</a></li></ul><hr/><p>假设我们有如下代码：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">MyClass</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"nf\">fun</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"n\">MyClass</span> <span class=\"n\">mc</span><span class=\"p\">;</span>\n   <span class=\"c1\">// do sth. with mc\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p>在<b>fun</b>函数结束的时候<b>mc</b>还存在吗？当然，这是c++的基本知识，我们创建<b>mc</b>的时候调用构造函数，离开作用域就调用析构函数，所以<b>mc</b>已经不存在了。</p><div class=\"highlight\"><pre><code class=\"language-text\">void fun() {\n   int* iarr = new int[10];\n   // do sth. wirh iarr\n}</code></pre></div><p>在<b>fun</b>函数结束的时候<b>iarr</b>还在吗？当然，<b>iarr</b>不在了，可是它申请的空间还是没有释放，这造成了内存泄漏。</p><p>在C++中，这种在生命周期结束时释放资源的方法被称作资源获取即初始化（Resource Acquisition Is Initialization (<b>RAII</b>)）。我们能不能把这个特性用到资源管理上呢？</p><div class=\"highlight\"><pre><code class=\"language-text\">class Unique {\npublic:\n   Unique(int n) {\n       std::cout &lt;&lt; &#34;Unique&#34; &lt;&lt; std::endl;\n       ptr = new int[n];\n   }\n   ~Unique() {\n       std::cout &lt;&lt; &#34;~Unique&#34; &lt;&lt; std::endl;\n       delete []ptr;\n   }\n   // other func\nprivate:\n   int *ptr;\n};\n\nint main() {\n   Unique u1(10);\n   // do sth. with u\n}\n\nOutput:\n   Unique\n   ~Unique</code></pre></div><p>这样一个最为粗糙和简陋的管理方法就出现了，在函数结束的时候内存也释放了，当然我们拿<b>int</b>数组作为例子。很好，但是只能适用简单情况，很多问题不能处理，比如，我们不能随意把<b>ptr</b>暴露出来。如果外面获取了<b>ptr</b>，把内存释放掉了，那么等我们释放的时候就是第二次释放了，会出问题的。同样也不能实现内存共享，对象复制也受到影响等。</p><div class=\"highlight\"><pre><code class=\"language-text\">Unique u1{10};\nUnique u2 = u1;     // !!!\n\nOutput:\n   Unique\n   ~Unique\n   ~Unique</code></pre></div><p>上面的代码会造成两个指针同时指向一片区域，调用构造函数就二次释放了，我们需要避免它。我们可以简单粗暴的把赋值构造函数和拷贝构造函数delete就可以解决意外复制的情况：</p><div class=\"highlight\"><pre><code class=\"language-text\">class Unique {\npublic:\n...\n   Unique(const Unique&amp;) = delete;\n   Unique&amp; operator=(const Unique&amp;) = delete;\n...\n}</code></pre></div><p>这样，没有了拷贝，如果我们为了需要转移所有权，可以在函数里面写入对指针的判断：</p><div class=\"highlight\"><pre><code class=\"language-text\">class Unique {\npublic:\n   Unique(int n) {\n       std::cout &lt;&lt; &#34;Unique&#34; &lt;&lt; std::endl;\n       ptr = new int[n];\n   }\n   Unique(const Unique&amp; u) {\n       this-&gt;ptr = u.ptr;\n       u.ptr = std::nullptr;\n   }\n   Unique&amp; operator=(const Unique&amp;) {/*与上面函数一样*/}\n   ~Unique() {\n       std::cout &lt;&lt; &#34;~Unique&#34; &lt;&lt; std::endl;\n       if (ptr) {\n           delete []ptr;\n       }\n   }\n   // other func\nprivate:\n   int *ptr;\n};\n\nint main() {\n   Unique u1(10);\n   Unique u2(u1);\n}</code></pre></div><p><b>u1</b>是<b>Unique</b>，我们希望转移所有权给<b>u2</b>，然后<b>u1</b>就不能继续使用了。</p><p>虽然两次析构函数都会调用，但是内存正确释放一次，我们实现了<b>unique_ptr</b>的基本思路。注意这是模型，仅供理解，和c++内部实现并不一样。</p><p>那么<b>shared_ptr</b>，<b>weak_ptr</b>呢，后面我们继续讨论。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }, 
                {
                    "tag": "智能指针", 
                    "tagLink": "https://api.zhihu.com/topics/19616318"
                }, 
                {
                    "tag": "内存管理", 
                    "tagLink": "https://api.zhihu.com/topics/19579205"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33911187", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 3, 
            "title": "从C语言的数组参数退化为指针谈起", 
            "content": "<p>Contact me:</p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>当我们写下如下代码：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">void</span> <span class=\"nf\">fun</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[]);</span>\n<span class=\"c1\">// 等同于void fun(int *arr);\n</span><span class=\"c1\"></span>\n<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span></code></pre></div><p>我们知道a原来是个数组，但是当我们调用fun传入的时候，arr不再是数组的形式，而是退化为指针，假设读者有这个理解基础。</p><p>那么问题来了，这个转变过程我们要注意什么？</p><p>首先考虑如果是个数组我们可以求数组长度:</p><div class=\"highlight\"><pre><code class=\"language-text\">// 为了避免歧义，假设int是4个字节，指针也是4个字节\nsizeof(a);   // 40\nsizeof(a) / sizeof(a[0]);    // 10</code></pre></div><p>但是指针就不一样了：</p><div class=\"highlight\"><pre><code class=\"language-text\">sizeof(arr);    // 4</code></pre></div><p>我们丢失了数组长度的信息，因此从本质上来说，我们用退化的指针来表示数组是有点问题的，真实的数组指针应该怎么写呢？</p><div class=\"highlight\"><pre><code class=\"language-text\">void fun(int (*arr)[10]);\n\nint a[10];\nfun(&amp;a);</code></pre></div><p>注意到我们不再简单传入a，而是传入&amp;a，这样就是取数组的地址，函数的参数类型也要改变。如果我们做一下测试：</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n\nvoid fun1(int *arr) {\n    printf(&#34;%p\\n&#34;, arr);\n    printf(&#34;%p\\n&#34;, arr + 1);\n}\nvoid fun2(int (*arr)[10]) {\n    printf(&#34;%p\\n&#34;, arr);\n    printf(&#34;%p\\n&#34;, arr + 1);\n}\nint main() {\n    int a[10];\n    fun1(a);\n    fun2(&amp;a);\n}\n\nOutput:\n    0x7fffeadf1b30\n    0x7fffeadf1b34\n    0x7fffeadf1b30\n    0x7fffeadf1b58</code></pre></div><p>可以看到fun1，就是原来的方式，指针增加1，沿着数组元素后移，我们无法得知数组有多长，而fun2是传入数组指针，指针增加1，地址增加28，注意这里是16进制，转为10进制就是40，正好就是数组的长度，也就是说这个指针包含了数组长度的信息。</p><p>好像我在表达原来的写法是错的，这样才对，但是并不是。因为虽然保留了数组信息，但是函数的声明必须把数组长度表示出来，这意味着我们必须事先知道长度，而且不能改变，这就限制了函数的能力。所以C的处理方式是退化数组为指针，然后加上数组长度！</p><p>C++加入了<b>std::array&lt;type, length&gt;</b>的容器，但是正如我们上面讨论的，由于我们要把长度写死，因此在函数传递的时候就很不方便了，这个容器带来的好处除了可以用标准库的函数外，似乎在这方面并没有什么值得称赞的地方。当然用指针，我们得人工保证传入的东西是正确的。</p><p>希望读者通过这个简短的分析理解为什么会有数组退化为指针。</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "指针（编程）", 
                    "tagLink": "https://api.zhihu.com/topics/19636435"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33881783", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 3, 
            "title": "从C语言的函数传参谈指针", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></p><p>Email: cugtyt#qq.com,  cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></p><hr/><p>很多C语言的初学者在学习函数的时候会听到，函数参数传递有两种方式：传值和传地址。但是很容易给初学者造成误区：函数参数传递真的有两种方式。</p><p>其实，函数参数传递<b>只有一种方式！只有一种方式！只有一种方式！</b></p><p>传值和传地址的说法不能说错，但是考虑到真正理解，我们还是要细究一下。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">void</span> <span class=\"nf\">fun</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"kt\">void</span> <span class=\"nf\">funptr</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">);</span></code></pre></div><p>两个函数的参数都是复制过去的，a是复制的，后面的指针a也是复制过去的，为什么？</p><div class=\"highlight\"><pre><code class=\"language-text\">int value = 5;\nfun(value);\nfunptr(&amp;value);</code></pre></div><p><b>fun</b>将<b>value</b>复制给参数<b> int a</b> ，<b>funptr</b>将<b>value</b>的地址复制给参数<b>int *a</b>，C语言的参数传递非常纯粹和简单，就是复制复制复制！地址也是复制过去的。</p><p>谈到这里我来谈谈指针，指针也是个存粹的东西，不过他的内容是个内存的地址而已，仅此而已，我们使用内容需要加*来访问，仅此而已，地址和实际内容并没有物理上的联系，只是有逻辑联系而已。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e2a09c20bc8ea53cd58faa79c9ea3749_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"170\" class=\"content_image\" width=\"387\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;387&#39; height=&#39;170&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"170\" class=\"content_image lazy\" width=\"387\" data-actualsrc=\"https://pic2.zhimg.com/v2-e2a09c20bc8ea53cd58faa79c9ea3749_b.jpg\"/></figure><p>如果你认为第一个内存单元的内容是个数，那它就是500，如果你认为第一个内存单元的内容是个地址，那么*访问就是xxx，因此我们可以写这样的东西：</p><div class=\"highlight\"><pre><code class=\"language-text\">int a = 0;\nint b = (int)&amp;a;\nprintf(&#34;%d&#34;, *(int *)b);</code></pre></div><p>当然，要指针和int的长度一致才有效。</p><p>我们可以把a的地址存入一个<b>int</b>，而不是<b>int*</b>，取内容的时候只需要转换回<b>int*</b>，再<b>*</b>就可以取出a的内容了。</p><p>不仅仅是C，Java也是，所谓的引用就是指针了，因此，如果写Java的时候传入空指针，Java就会抛出空指针异常，是不是很熟悉的异常。值得注意的是，如果你在函数内部对指针参数直接复制，例如<b>funptr</b>函数里面直接写：<b>a = xxx</b>，那么不会对原来的内容做修改，因为你的<b>a</b>是复制的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-eb4ddafdc4c8b32904acdba22cb4fd1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"509\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb\" width=\"509\" data-original=\"https://pic4.zhimg.com/v2-eb4ddafdc4c8b32904acdba22cb4fd1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;509&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"509\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"509\" data-original=\"https://pic4.zhimg.com/v2-eb4ddafdc4c8b32904acdba22cb4fd1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-eb4ddafdc4c8b32904acdba22cb4fd1b_b.jpg\"/></figure><p>如图，修改函数里面的指针为其他比如400，并不会对第500内存单元的内容有影响。</p><p>C++的引用可能就是另一个故事了，引用没有复制，逻辑上相当于直接对原来的东西做处理，而不是复制一个新的指针，再通过指针处理。</p><p><b>为什么我们需要指针？</b></p><p>考虑通过函数交换两个数字的经典问题，正因为参数是复制的，因此我们改变参数对原来的值没有影响，那怎么办，通过地址操作，记住两个数字的地址，我们就直接对原来的值做了修改。还有，考虑一个占很大空间的变量，复制它比较消耗时间，怎么办，通过地址，只要记住它的地址，我们只需要复制地址，就可以在需要的时候对它做处理，而不用每次复制这个变量。</p><p>说白了，指针就是一个存地址的东西，只不过我们把它写的比较特别，要加<b>*</b>，这样大家都知道这个变量是存地址的，而不是个普通的变量，指针就是这样。</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "指针（编程）", 
                    "tagLink": "https://api.zhihu.com/topics/19636435"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33554949", 
            "userName": "Cugtyt", 
            "userLink": "https://www.zhihu.com/people/3adeef0bd5a1479f6cc07142eb880b9c", 
            "upvote": 0, 
            "title": "使用list comprehension提高简单循环性能", 
            "content": "<p><b>Contact me:</b></p><p>Blog : <u><a href=\"https://link.zhihu.com/?target=https%3A//cugtyt.github.io/blog/index\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cugtyt.github.io/blog/i</span><span class=\"invisible\">ndex</span><span class=\"ellipsis\"></span></a></u></p><p>Email: <u>cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//qq.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">qq.com</span><span class=\"invisible\"></span></a></u>,  <u>cugtyt#<a href=\"https://link.zhihu.com/?target=http%3A//gmail.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gmail.com</span><span class=\"invisible\"></span></a></u></p><hr/><p>在python中对于列表等迭代类型进行操作是很常见的，比如你可能会遇到类似的处理：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">t1_mod3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">t1_mod5</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">t1_mod7</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n        <span class=\"n\">t1_mod3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"n\">t1_mod5</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n        <span class=\"n\">t1_mod7</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>但是python提供了更为高效的方案，下面比较下三种方案：  </p><p>* for循环</p><p>* list comprehension</p><p>* filter</p><blockquote>系统环境  <br/>Anaconda 5.0.1  <br/>Python 3.6  <br/>Windows 10</blockquote><hr/><p>首先引入库，绘出时间曲线直观比较</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"k\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"k\">import</span> <span class=\"n\">filterfalse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"k\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span></code></pre></div><p>其次三个list存储三种方案不同情况下的时间：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>         <span class=\"c1\"># times for test 1</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>         <span class=\"c1\"># times for test 2</span>\n<span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>         <span class=\"c1\"># times for test 3</span></code></pre></div><p>我们比较200次，每次增加100个点：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">):</span>\n    <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># test 1</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">t1_mod3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">t1_mod5</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">t1_mod7</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">t1_mod3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n            <span class=\"n\">t1_mod5</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n            <span class=\"n\">t1_mod7</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">)</span>    \n\n    <span class=\"c1\"># test 2</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">t2_mod3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"n\">t2_mod5</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">t2_mod7</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n    <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># test 3</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">t3_mod3</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">filterfalse</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">))</span>\n    <span class=\"n\">t3_mod5</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">filterfalse</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">))</span>\n    <span class=\"n\">t3_mod7</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">filterfalse</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">))</span>\n    <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">)</span></code></pre></div><p>最后绘出时间图：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;*&#39;</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">,</span> <span class=\"n\">t3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;^&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">([</span><span class=\"s1\">&#39;for&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;list comprehension&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;list(filter)&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-20628afb02b0348b8ddcd03f7255df3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"774\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic3.zhimg.com/v2-20628afb02b0348b8ddcd03f7255df3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1440&#39; height=&#39;774&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"774\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1440\" data-original=\"https://pic3.zhimg.com/v2-20628afb02b0348b8ddcd03f7255df3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-20628afb02b0348b8ddcd03f7255df3e_b.jpg\"/></figure><p>可以看到三者差别比较明显，for循环性能居中，list comprehension时间最短，  </p><p>令人惊讶的是，filter性能如此差, 应该是官方优化了list comprehension。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>注意</b>，这里  </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>for循环只是遍历一遍numbers，而list comprehension和filter是遍历了三遍</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>因此，list comprehension的性能比for高了不少，因此在实际使用python中，使用list comprehension会获得不少性能优势。</p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "Python 3.x", 
                    "tagLink": "https://api.zhihu.com/topics/19572360"
                }, 
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/programming-tools"
}
