{
    "title": "SH的全栈之路", 
    "description": "个人网站： hulunhao.com\n微信公众号：SH的全栈笔记(ID: LunhaoHu)", 
    "followers": [
        "https://www.zhihu.com/people/Rais", 
        "https://www.zhihu.com/people/zhong-chen-yang-68", 
        "https://www.zhihu.com/people/linkerlin", 
        "https://www.zhihu.com/people/xiao-bao-long-61", 
        "https://www.zhihu.com/people/Morse2016", 
        "https://www.zhihu.com/people/bintie", 
        "https://www.zhihu.com/people/cobain-55-74", 
        "https://www.zhihu.com/people/smwyzi", 
        "https://www.zhihu.com/people/hasbug", 
        "https://www.zhihu.com/people/zhang-xing-wang-98-68", 
        "https://www.zhihu.com/people/wang-ming-66-71", 
        "https://www.zhihu.com/people/huang-fu-hua-25", 
        "https://www.zhihu.com/people/sjzhou1990", 
        "https://www.zhihu.com/people/zhi-zhi-c-10", 
        "https://www.zhihu.com/people/lvxingchen", 
        "https://www.zhihu.com/people/wu-feng-28-50", 
        "https://www.zhihu.com/people/lannister-75", 
        "https://www.zhihu.com/people/mr-lin-82-68", 
        "https://www.zhihu.com/people/spacefan", 
        "https://www.zhihu.com/people/wang-ying-25-85-88", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/stone-72", 
        "https://www.zhihu.com/people/kome", 
        "https://www.zhihu.com/people/wu-gui-48-7", 
        "https://www.zhihu.com/people/Liiu00", 
        "https://www.zhihu.com/people/song-95-13", 
        "https://www.zhihu.com/people/shi-er-zhu-84", 
        "https://www.zhihu.com/people/he-xu-89-18", 
        "https://www.zhihu.com/people/zheng-wang-7", 
        "https://www.zhihu.com/people/jia-wen-quan-53", 
        "https://www.zhihu.com/people/zhang-hao-ran-64", 
        "https://www.zhihu.com/people/liu-xiao-chuan-94", 
        "https://www.zhihu.com/people/xiao-lao-hu-9-68", 
        "https://www.zhihu.com/people/ming-yu-69-3", 
        "https://www.zhihu.com/people/xiao-xiong-mao-jun-9", 
        "https://www.zhihu.com/people/icysoul", 
        "https://www.zhihu.com/people/jorzw", 
        "https://www.zhihu.com/people/geeky-80", 
        "https://www.zhihu.com/people/xing-ye-chuan-11", 
        "https://www.zhihu.com/people/guan-yu-96", 
        "https://www.zhihu.com/people/xu-qiang-29-78", 
        "https://www.zhihu.com/people/shadow-jin", 
        "https://www.zhihu.com/people/chaohuang1991", 
        "https://www.zhihu.com/people/wang-xing-fu-30", 
        "https://www.zhihu.com/people/yuetsh", 
        "https://www.zhihu.com/people/ibrother", 
        "https://www.zhihu.com/people/wei-yu-23-60", 
        "https://www.zhihu.com/people/logic-2016", 
        "https://www.zhihu.com/people/alanzeng-69", 
        "https://www.zhihu.com/people/fourhu-68", 
        "https://www.zhihu.com/people/zhong-hua-xin-xin-qing-nian", 
        "https://www.zhihu.com/people/james-carmack", 
        "https://www.zhihu.com/people/daluomadetaiyang", 
        "https://www.zhihu.com/people/huan-xin-qian-ling", 
        "https://www.zhihu.com/people/ju-shang-38", 
        "https://www.zhihu.com/people/ji-xu-shan-31", 
        "https://www.zhihu.com/people/yxwyxw3038", 
        "https://www.zhihu.com/people/skyz319", 
        "https://www.zhihu.com/people/hackergod", 
        "https://www.zhihu.com/people/wu-yan-hang-zhou", 
        "https://www.zhihu.com/people/li-wen-qiang-44", 
        "https://www.zhihu.com/people/hong-xiang-togeek", 
        "https://www.zhihu.com/people/pan-yu-qi-20", 
        "https://www.zhihu.com/people/wang-ji-shi-jian-54", 
        "https://www.zhihu.com/people/wang-xiang-zhong-5", 
        "https://www.zhihu.com/people/gaozhongguoliu", 
        "https://www.zhihu.com/people/zhang-xiao-7-80", 
        "https://www.zhihu.com/people/fucktheholl", 
        "https://www.zhihu.com/people/ticktock-47", 
        "https://www.zhihu.com/people/peng-jin-yi", 
        "https://www.zhihu.com/people/fate-03", 
        "https://www.zhihu.com/people/flaster", 
        "https://www.zhihu.com/people/xiyaluo", 
        "https://www.zhihu.com/people/jptx", 
        "https://www.zhihu.com/people/pandakang-21", 
        "https://www.zhihu.com/people/lance-24-67", 
        "https://www.zhihu.com/people/smartcat", 
        "https://www.zhihu.com/people/pein-81", 
        "https://www.zhihu.com/people/xin-ping-63", 
        "https://www.zhihu.com/people/li-jin-long-55-91"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/88480107", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 6, 
            "title": "两分钟让你明白Go中如何继承", 
            "content": "<p>最近在重构代码的时候，抽象了大量的接口。也使用这些抽象的接口做了很多伪继承的操作，极大的减少了代码冗余，同时也增加了代码的可读性。</p><p>然后随便搜了一下关于Go继承的文章，发现有的文章的代码量过多，并且代码format极其粗糙，命名极其随意，类似于A、B这种，让人看着看着就忘了到底是谁继承谁，我又要回去看一遍逻辑。</p><p>虽然只是样例代码，我认为仍然需要做到简洁、清晰以及明了。这也是我为什么要写这篇博客的原因。接下里在这里简单分享一下在Go中如何实现继承。</p><h3>1. 简单的组合</h3><p>说到继承我们都知道，在Go中没有<code>extends</code>关键字，也就意味着Go并没有原生级别的继承支持。这也是为什么我在文章开头用了<b>伪继承</b>这个词。本质上，Go使用interface实现的功能叫组合，Go是使用组合来实现的继承，说的更精确一点，是使用组合来代替的继承，举个很简单的例子。</p><h3>1.1 实现父类</h3><p>我们用很容易理解的<b>动物</b>-<b>猫</b>来举例子，废话不多说，直接看代码。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">type</span> <span class=\"nx\">Animal</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Name</span> <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">*</span><span class=\"nx\">Animal</span><span class=\"p\">)</span> <span class=\"nf\">Eat</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%v is eating&#34;</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">)</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">Cat</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"nx\">Animal</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">cat</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"nx\">Cat</span><span class=\"p\">{</span>\n    <span class=\"nx\">Animal</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"nx\">Animal</span><span class=\"p\">{</span>\n        <span class=\"nx\">Name</span><span class=\"p\">:</span> <span class=\"s\">&#34;cat&#34;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">cat</span><span class=\"p\">.</span><span class=\"nf\">Eat</span><span class=\"p\">()</span> <span class=\"o\">//</span> <span class=\"nx\">cat</span> <span class=\"nx\">is</span> <span class=\"nx\">eating</span></code></pre></div><h3>1.2 代码分析</h3><p>首先，我们实现了一个Animal的结构体，代表动物类。并声明了Name字段，用于描述动物的名字。</p><p>然后，实现了一个以Animal为receiver的Eat方法，来描述动物进食的行为。</p><p>最后，声明了一个Cat结构体，组合了Cat字段。再实例化一个猫，调用Eat方法，可以看到会正常的输出。</p><p>可以看到，Cat结构体本身没有Name字段，也没有去实现Eat方法。唯一有的就是组合了Animal父类，至此，我们就证明了已经通过组合实现了继承。</p><h3>2. 优雅的组合</h3><p>熟悉Go的人看到上面的代码可能会发出如下感叹</p><blockquote> 这也太粗糙了吧   -- By 鲁迅：我没说过这句话</blockquote><p>的确，上面的仅仅是为了给还没有了解过Go组合的人看的。作为一个简单的例子来理解Go的组合继承，这是完全没有问题的 。但如果要运用在真正的开发中，那还是远远不够的。</p><p>举个例子，我如果是这个抽象类的使用者，我拿到animal类不能一目了然的知道这个类干了什么，有哪些方法可以调用。以及，没有统一的初始化方式，这意味着凡是涉及到初始化的地方都会有重复代码。如果后期有初始化相关的修改，那么只有一个一个挨着改。所以接下来，我们对上述的代码做一些优化。</p><h3>2.1 抽象接口</h3><p>接口用于描述某个类的行为。例如，我们即将要抽象的动物接口就会描述作为一个动物，具有哪些行为。常识告诉我们，动物可以进食（Eat），可以发出声音（bark），可以移动（move）等等。这里有一个很有意思的类比。</p><blockquote> 接口就像是一个招牌，比如一家星巴克。星巴克就是一个招牌（接口）。<br/> 你看到这个招牌会想到什么？美式？星冰乐？抹茶拿铁？又或者是拿铁，甚至是店内的装修风格。<br/> 这就是一个好的接口应该达到的效果，同样这也是为什么我们需要抽象接口。</blockquote><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// 模拟动物行为的接口\n</span><span class=\"c1\"></span><span class=\"kd\">type</span> <span class=\"nx\">IAnimal</span> <span class=\"kd\">interface</span> <span class=\"p\">{</span>\n    <span class=\"nf\">Eat</span><span class=\"p\">()</span> <span class=\"c1\">// 描述吃的行为\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n\n<span class=\"c1\">// 动物 所有动物的父类\n</span><span class=\"c1\"></span><span class=\"kd\">type</span> <span class=\"nx\">Animal</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Name</span> <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 动物去实现IAnimal中描述的吃的接口\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">*</span><span class=\"nx\">Animal</span><span class=\"p\">)</span> <span class=\"nf\">Eat</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%v is eating\\n&#34;</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 动物的构造函数\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">newAnimal</span><span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">*</span><span class=\"nx\">Animal</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"nx\">Animal</span><span class=\"p\">{</span>\n        <span class=\"nx\">Name</span><span class=\"p\">:</span> <span class=\"nx\">name</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 猫的结构体 组合了animal\n</span><span class=\"c1\"></span><span class=\"kd\">type</span> <span class=\"nx\">Cat</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"nx\">Animal</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 实现猫的构造函数 初始化animal结构体\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">newCat</span><span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">*</span><span class=\"nx\">Cat</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"nx\">Cat</span><span class=\"p\">{</span>\n        <span class=\"nx\">Animal</span><span class=\"p\">:</span> <span class=\"nf\">newAnimal</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">cat</span> <span class=\"o\">:=</span> <span class=\"nf\">newCat</span><span class=\"p\">(</span><span class=\"s\">&#34;cat&#34;</span><span class=\"p\">)</span>\n<span class=\"nx\">cat</span><span class=\"p\">.</span><span class=\"nf\">Eat</span><span class=\"p\">()</span> <span class=\"o\">//</span> <span class=\"nx\">cat</span> <span class=\"nx\">is</span> <span class=\"nx\">eating</span></code></pre></div><p>在Go中其实没有关于构造函数的定义。例如我们在Java中可以使用构造函数来初始化变量，举个很简单的例子，<code>Integer num = new Integer(1)</code>。而在Go中就需要使用者自己通过结构体的初始化来模拟构造函数的实现。</p><p>然后在这里我们实现子类Cat，使用组合的方式代替继承，来调用Animal中的方法。运行之后我们可以看到，Cat结构体中并没有Name字段，也没有实现Eat方法，但是仍然可以正常运行。这证明我们已经通过组合的方式了实现了继承。</p><h3>2.2 重载方法</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// 猫结构体IAnimal的Eat方法\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">cat</span> <span class=\"o\">*</span><span class=\"nx\">Cat</span><span class=\"p\">)</span> <span class=\"nf\">Eat</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;children %v is eating\\n&#34;</span><span class=\"p\">,</span> <span class=\"nx\">cat</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">cat</span><span class=\"p\">.</span><span class=\"nf\">Eat</span><span class=\"p\">()</span>\n<span class=\"o\">//</span> <span class=\"nx\">children</span> <span class=\"nx\">cat</span> <span class=\"nx\">is</span> <span class=\"nx\">eating</span></code></pre></div><p>可以看到，Cat结构体已经重载了Animal中的Eat方法，这样就实现了重载。</p><h3>2.3 参数多态</h3><p>什么意思呢？举个例子，我们要如何在Java中解决函数的参数多态问题？熟悉Java的可能会想到一种解决方案，那就是通配符。用一句话概括，使用了通配符可以使该函数接收某个类的所有父类型或者某个类的所有子类型。但是我个人认为对于不熟悉Java的人来说，可读性不是特别友好。</p><p>而在Go中，就十分方便了。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"nx\">animal</span> <span class=\"nx\">IAnimal</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">animal</span><span class=\"p\">.</span><span class=\"nf\">Eat</span><span class=\"p\">()</span>\n<span class=\"p\">}</span></code></pre></div><p>在这个函数中就可以处理所有组合了Animal的单位类型，对应到Java中就是上界通配符，即一个可以处理任何特定类型以及是该特定类型的派生类的通配符，再换句人话，啥动物都能处理。</p><h3>3. 总结</h3><p>凡事都有两面性，做优化也不例外。大量的抽象接口的确可以精简代码，让代码看起来十分优雅、舒服。但是同样，这会给其他不熟悉的人review代码造成理解成本。想象你看某段代码，全是接口，点了好几层才能看到实现。更有的，往下找着找着突然就在另一个接口处断掉了，必须要手动的去另一个注册的地方去找。</p><p>这就是我认为优化的时候要面临的几个问题：</p><ul><li>优雅</li><li>可读</li><li>性能</li></ul><p>有的时候我们很难做到三个方面都兼顾，例如这样写代码看起来很难受，但是性能要比优雅的代码好。再例如，这样写看起来很优雅，但是可读性很差等等。</p><p>还是引用我之前博客中经常写的一句话</p><blockquote> 适合自己的才是最好的</blockquote><p>这种时候只能根据自己项目的特定情况，选择最适合你的解决方案。没有万能的解决方案。</p><p>分享一句最近弹吉他看到的毒鸡汤，学习也是一样的。</p><blockquote> 练琴的路上没有捷径，全是弯路</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>微信公众号</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bf135dfac6ea36cdee0fb863b3d9793e_b.jpg\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-bf135dfac6ea36cdee0fb863b3d9793e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-bf135dfac6ea36cdee0fb863b3d9793e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bf135dfac6ea36cdee0fb863b3d9793e_b.jpg\"/><figcaption>SH的全栈笔记</figcaption></figure><p></p>", 
            "topic": [
                {
                    "tag": "Go 语言", 
                    "tagLink": "https://api.zhihu.com/topics/19625982"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86748689", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 12, 
            "title": "游戏服务器和Web服务器的区别", 
            "content": "<p>用Go语言写游戏服务器也有一个多月了，也能够明显的感受到两者的区别。这篇文章就是想具体的聊聊其中的区别。当然，在了解区别之间，我们先简单的了解一下Go语言本身。</p><p>PS：这里仅拿SLG手游举例子</p><h3>1. Go语言的特点</h3><p>Go语言跟其他的语言例如Java比起来，算得上一门很年轻的语言。Go语言是由Robert Griesemer、Rob Pike和Ken Thompson于2007年在Google开发。并于2009年正式发布。</p><p>Go语言的设计理念围绕着简洁这两个字，认为少即是多。如果你熟悉Java，用Java那一套语法命名跟Go做对比，可以很明显的体会到这种感觉。</p><p>Go的特点可以简单的概括成以下几个点。</p><h3>1.1 静态类型和编译型</h3><p>首先Go是静态类型，静态类型就是编译时就知道每一个变量的类型，得益于此，在编译的阶段就能够发现很多问题。而如果是动态语言，例如JavaScript，有些问题直到运行时才能发现。</p><p>Go是编译型语言，看到编译型大家脑子里可能会想到另外一个词解释型。两者的区别从字面上来理解其实已经可以看出来，我用一个简单的例子来类比一下。</p><ul><li>编译型 去餐馆吃饭，点了菜之后，饭店会等所有的菜做好了再上</li><li>解释型 去餐馆吃饭，点了菜之后，陆陆续续的边吃边上</li></ul><h3>1.2 跨平台</h3><p>顾名思义，你写的Go源码在所有的系统都能够运行。</p><p>这点其实很好理解，例如Java的口号是&#34;Write once, run anywhere&#34;。我们都知道Java是编译型的语言，但是Java在编译的时候生成的是字节码，这个字节码与当前的操作系统无关，与CPU也无关。</p><p>这种字节码必须依赖Java虚拟机才能运行，而虚拟机会将操作系统和CPU之间的差异与用户屏蔽。对于编程的人来说这个过程其实无感知的。而对Java来说，语言本身的跨平台并不能代表代码可以跨平台。</p><p>Go的跨平台从某种方面来说，与Java类型，我们需要安装与当前操作系统相对应版本的Go。编译出来的可执行文件会根据操作系统的不同而有所不同。</p><h3>1.3 自动垃圾回收</h3><p>与JVM一样，Go在运行时的内存管理（GC）由Go语言本身来管理，不需要程序员的参与，但是我们可以干预。</p><h3>1.4 原生的并发编程</h3><p>何为原生？我们都知道，在Java中如果要实现并发， 需要外部的类库支持（Thread），而Go不需要从外部再引入任何依赖。支持使用关键字<code>go</code>即可。而且Java中是通过共享内存进行通信的，熟悉Go的应该都看过一句话“不要通过共享内存来通信，而应该通过通信来共享内存”</p><h3>1.5 完善的构建工具</h3><p>从获取、编译、测试、安装、运行和分析等一系列流程都有自己的内置工具。例如获取可以使用<code>go get</code>命令来下载更新指定的代码包，并且对它们进行编译和安装，可以使用<code>go build</code> 对源码进行编译，用<code>go run</code>命令来运行Go的程序，用<code>go fmt</code>来快速格式化代码，统一代码风格。</p><h3>1.6 多范式编程</h3><p>目前主流的编程范式有命令式编程、函数式编程和我们最熟悉的面向对象编程。在编写Go的代码的时候，我们可以选择使用面向对象的方法，也可以使用函数式编程的思想，相互结合，相辅相成。</p><p>例如，在Go里面也可以用接口来描述行为，也可以使用纯函数来避免出现副作用。因此，多范式编程就是指这个语言支持多种编程范式的。</p><h3>1.7 代码风格强统一</h3><p>使用Go的内置工具<code>go fmt</code>即可快速的将代码格式化成官方统一的标准，以此来达到代码风格统一的目的。甚至可以用golangci-lint来检测你的语法跟内置的标准语法是否有冲突，完全可以将这个检测工具挂在git的钩子上，以此来达到强制的代码风格统一的目的。</p><h3>1.8 活跃的社区</h3><p>还有一个很重要的特点是，国内的Go的社区十分的活跃，这对于Go在国内的普及起到了很大的作用。</p><h3>2. 用Go的优势</h3><p>先说一下我对Go语言的看法，我认为Go在服务器这块是非常有优势的。以后如果有高并发的应用场景，那么大概率这个服务就是用Go写的。不知道大家有没有发现，摩尔定律正在失效。近十年内，硬件的原始处理能力都没有太大的提升。显然，一味的增加晶体管的数量已经不是解决问题最好的方法。</p><p>NASA前不久发布到官网然后又迅速删掉的文章透露了，Google可能已经实现了量子霸权，通俗一点说就是拥有超越所有传统计算机的计算能力。而放置更多的晶体管的代价也越来越高，所以现在厂商都在向处理器中添加更多的内核来提升性能。</p><p>就像大家熟悉的Java，虽然Java本身支持多线程，但是在Java上使用多线程编程代码算是比较昂贵的。在Java中创建一个新的线程就会消耗接近1M左右的内存。假如你真的需要支持运行上千个线程，那么服务很可能运行着就OOM了。除了内存消耗外，还会存在由于支持多线程带来的并发和死锁等问题。</p><p>而Go中，使用协程来代替线程。而且一个协程所消耗的内存比线程少了很多倍。同样的物理设备限制，你可能只能启动最多几千个线程，而协程能够启动上百万个。而且不同的Goroutine可以通过信channel进行安全的通信。</p><h3>3. 游戏服务器和Web服务器的区别</h3><p>有些对游戏服务器的介绍可能会说，游戏服务器是一个需要长期运行的程序，然后怎么怎么样。我个人认为Web服务器一样的需要长期运行，也需要响应不定点不定时来自用户的请求。两者从宏观上来看其实没有本质的区别。同时Web服务器也会对于稳定性和性能有要求，游戏服一般分为大小服，我们这里都按照小服举例子。</p><h3>3.1 状态</h3><p>首先要提到的就是状态。可能你会听说过一个概念，游戏服务器是有状态的，而Web服务器是无状态的。什么意思呢？Web服务器的数据流大多直接会到数据库中。而游戏服务器的数据流首先会到内存中，然后定期的写入数据库（落地）。</p><p>换句话说，游戏服务器本身的数据与数据库中的数据在运行期间会存在一个数据不一致的窗口。如果此时游戏服务器宕机了，那么就会造成数据首先到的内存数据与数据库存的数据不一致。</p><p>而Web服务器则不会有这样的问题，Web所有的数据状态都会落地，而且可以针对操作加上事务，不用担心因为操作失败而引入脏数据。正因为有了状态的约束，游戏服务器就会很慎重的使用内存、CPU。以求在资源有限的情况下，最大化的提高的承载量，并且降低服务延迟。当然，Web服务器会为了降低某个接口的响应时间而去做对应的优化。</p><h3>3.2 扩容</h3><p>在Web服务器中，如果你不能评估一个服务所面临的压力，又不想因为瞬时的热点访问导致服务直接不可用的话，完全可以设置成自动扩容，因为每个服务只是单纯的接收请求，然后处理请求、返回结果，不会将数据保存在服务器的内存中。要有数据存到内存，那也是在Redis中。而Redis数据丢失对数据的一致性基本没有影响。</p><p>但是在游戏服务器这边很难做到像Web那样灵活。首先，数据的流向不是数据库，而是内存。</p><p>举个很简单的例子，玩家的主城被攻打着火了，如果有了自动扩容，很有可能在落地的窗口内，玩家再请求一次，请求到了另一个实例。主城又没有着火了。因为数据都会先存在内存中。</p><p>再举一个例子，玩家氪金买了一个礼包。然后退出游戏，落地窗口内再次上线没了。这就不是单纯的数据问题了，玩家这是花了真金白银买的道具，突然就没了，一两个还好处理，如果多个玩家都出现这样的问题，那这就属于严重的线上事故了。修复数据的工作量十分的大。</p><p>所以，对于一个游戏服务器，所能使用的内存和CPU的资源是非常有限的，不像Web服务器可以不用花很大的代价做到横向扩展。这也就是为什么游戏服务器会十分十分的注重代码的性能以及稳定性。</p><h3>3.3 稳定</h3><p>就像上面说的例子，如果游戏服务器运行中出了BUG，导致服务直接不可用，或者说通过这个BUG刷到了大量的道具，将是一个非常严重的线上事故。</p><p>而对于Web服务器来说，如果是管理系统之类的，有可能会有脏数据值得一提的是，脏数据对于Web来说，排查起来也是一件很头疼的事情。如果没有脏数据，只是服务暂且不可用，而且如果用的是微服务架构，重启服务的代价是相对来说比较小的，只有正在重启的服务的业务是不可用的，其余的部分则可以正常的访问。</p><p>而对于游戏服务器来说，服务器重启影响的是全服的玩家。玩家在停服期间，甚至连游戏都进不了，特别的影响玩家体验。而且，如果停服之前服务器的数据落地出现了问题，服务重启之后会将数据从数据库load到内存中，此时同样会造成数据不一致的问题。</p><h3>3.4 性能</h3><p>从我的经验来看，在做Web服务器的时候，没有为了减少GC的压力，为了少占用内存去做过多的优化。当然这是因为项目本身的体量不大，如果QPS很高的话，Web服务器同样很需要注重性能，只不过游戏服务器需要一直特别注意这个方面。</p><p>不过在Web，如果访问量很大的话导致单个服务不能扛住压力，大部分人首先想到的解决方案应该就是搞多个实例，毕竟可以做到很轻松的横向扩展。</p><p>在游戏服务器里，会把服务器的资源看的相当的宝贵。例如，能不落地的字段就绝对不要落地，某个字段的值可以通过已知的条件算出来的，就尽量不要定义在代码里。不过这也要看具体情况权衡运算量和调用的频率。因为上线之后，如果遇到了数据不一致，维护的数据越少，修复数据的难度就越小。</p><h3>3.5 严谨</h3><p>这一点上来说，我认为是两者都很关注的一个重点。只不过，在游戏服务器的某些情况中，如果服务器抛出异常或者panic。其造成的后果会被游戏特殊的环境放大。</p><p>例如，召回你的在外部队失败了，那么部队就会一直在外面且不可用。这跟在浏览器中点一个按钮没有反应比起来，影响相对较小。而且使用微服务架构，在修复问题之后可以以很低的成本来重启对应的服务，而游戏服务器中还要修复一次数据。</p><p>再举一个很极端的例子，点击商店，玩家要准备氪金了。但是却发现进不了商店，也可能不能获取商品列表。这些会直接影响到游戏的体验，甚至收入。</p><p>而对于Web来说，服务器的稳定性同样很重要。不然根据业务的不同，造成后果的严重性也有可能不同。影响了用户体验，就会直接影响到产品的口碑。</p><h3>3.6 数据传输格式</h3><p>熟悉Web的都知道，数据传输格式是JSON。而在游戏服务器中是Protobuf，是由Google开发的数据传输格式，与JSON类似。Protobuf是二进制的，二进制数据量会比JSON更小一点。而且，如果传输的字段是空值，就不会被传输。而JSON如果是空值，一样的也会被传输。</p><p>无论是在什么样的环境中，举个例子，Node.js和Java中，Protobuf的性能表现都比JSON好。在Java中，Protobuf甚至要比JSON快了接近80%。如果Java的服务之间通信有了性能瓶颈， 可以考虑服务之间使用RPC来通信。</p><p>但是凡事都具有两面性。Protobuf的缺点仍然存在：</p><ul><li>文档较少</li><li>社区与JSON的对比起来</li><li>可读性没有JSON好</li></ul><h3>4 总结</h3><p>以上就是这两个月以来，总结的两者的区别。只是从大体上做了一个对比，并没有具体深入细节。细节的话有可能会在以后单独的来介绍。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>微信公众号：   SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a98b0014ec04d95e083fa5465125ae8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-a98b0014ec04d95e083fa5465125ae8a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-a98b0014ec04d95e083fa5465125ae8a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a98b0014ec04d95e083fa5465125ae8a_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "游戏服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19591286"
                }, 
                {
                    "tag": "Web 服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19629184"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>......太死板了，游戏种类太多，你这举例不正确。按你这样说，页游棋牌类型就被你归类到web里去了。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "LunhaoHu", 
                            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
                            "content": "<p>是的，你这一说，我好像忘了加上什么游戏了。我更新一波</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>您可以看一下“坚果矩阵”，这是目前国内唯一的专业游戏后端云服务产品，集成了常见的游戏网络功能比如：游戏多平台账号登录、玩家数据云存储、游戏经济系统、排行榜、游戏成就、开宝箱、每日签到、游戏活动等等且具备开箱即用的特性，游戏开发者只需要简单地在后台进行配置就可以在游戏中通过接口进行相关调用，真正实现了后端零代码编写的同时还大大减轻了游戏客户端程序的工作量，极大地提高了游戏的开发效率并让游戏数值管理更加方便高效。<br>“坚果矩阵”具备丰富的统计图表，帮助您实时监控您游戏作品的运营状况，随时查看DAU、玩家消费金额、ARPU和付费转化率等常用游戏指标走势。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85657621", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 4, 
            "title": "Go中使用seed得到相同随机数的问题", 
            "content": "<p></p><h3>重复的随机数</h3><p>废话不多说，首先我们来看使用seed的一个很神奇的现象。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">Seed</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">Now</span><span class=\"p\">().</span><span class=\"nf\">Unix</span><span class=\"p\">())</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 结果如下\n</span><span class=\"c1\">// 90\n</span><span class=\"c1\">// 90\n</span><span class=\"c1\">// 90\n</span><span class=\"c1\">// 90\n</span><span class=\"c1\"></span><span class=\"o\">//</span> <span class=\"mi\">90</span></code></pre></div><p>可能不熟悉seed用法的看到这里会很疑惑，我不是都用了seed吗？为何我随机出来的数字都是一样的？不应该每次都不一样吗？</p><p>可能会有人说是你数据的样本空间太小了，OK，我们加大样本空间到10w再试试。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">Seed</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">Now</span><span class=\"p\">().</span><span class=\"nf\">Unix</span><span class=\"p\">())</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 结果如下\n</span><span class=\"c1\">// 84077\n</span><span class=\"c1\">// 84077\n</span><span class=\"c1\">// 84077\n</span><span class=\"c1\">// 84077\n</span><span class=\"c1\"></span><span class=\"o\">//</span> <span class=\"mi\">84077</span></code></pre></div><p>你会发现结果仍然是一样的。简单的推理一下我们就能知道，在上面那种情况，每次都取到相同的随机数跟我们所取的样本空间大小是无关的。那么唯一有关的就是seed。我们首先得明确seed的用途。</p><h3>seed的用途</h3><p>在这里就不卖关子了，先给出结论。</p><p>上面每次得到相同随机数是因为在上面的循环中，每次操作的间隔都在毫秒级下，所以每次通过<code>time.Now().Unix()</code>取出来的时间戳都是同一个值，换句话说就是使用了同一个seed。</p><p>这个其实很好验证。只需要在每次循环的时候将生成的时间戳打印出来，你就会发现每次打印出来的时间戳都是一样的。</p><p>每次rand都会使用相同的seed来生成随机队列，这样一来在循环中使用相同seed得到的随机队列都是相同的，而生成随机数时每次都会去取同一个位置的数，所以每次取到的随机数都是相同的。</p><p>seed 只用于决定一个确定的随机序列。不管seed多大多小，只要随机序列一确定，本身就不会再重复。除非是样本空间太小。解决方案有两种：</p><ul><li>在全局初始化调用一次seed即可</li><li>每次使用纳秒级别的种子（强烈不推荐这种）</li></ul><h3>不用每次调用</h3><p>上面的解决方案建议各位不要使用第二种，给出是因为在某种情况下的确可以解决问题。比如在你的服务中使用这个seed的地方是串行的，那么每次得到的随机序列的确会不一样。</p><p>但是如果在高并发下呢？你能够保证每次取到的还是不一样的吗？事实证明，在高并发下，即使使用UnixNano作为解决方案，同样会得到相同的时间戳，Go官方也不建议在服务中同时调用。</p><blockquote> Seed should not be called concurrently with any other Rand method.<br/> </blockquote><p>接下来会带大家了解一下代码的细节。想了解源码的可以继续读下去。</p><h3>源码解析-seed</h3><h3>seed</h3><p>首先来看一下seed做了什么。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">rng</span> <span class=\"o\">*</span><span class=\"nx\">rngSource</span><span class=\"p\">)</span> <span class=\"nf\">Seed</span><span class=\"p\">(</span><span class=\"nx\">seed</span> <span class=\"kt\">int64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">tap</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span> <span class=\"p\">=</span> <span class=\"nx\">rngLen</span> <span class=\"o\">-</span> <span class=\"nx\">rngTap</span>\n\n    <span class=\"nx\">seed</span> <span class=\"p\">=</span> <span class=\"nx\">seed</span> <span class=\"o\">%</span> <span class=\"nx\">int32max</span>\n    <span class=\"k\">if</span> <span class=\"nx\">seed</span> <span class=\"p\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>  <span class=\"c1\">// 如果是负数，则强行转换为一个int32的整数\n</span><span class=\"c1\"></span>        <span class=\"nx\">seed</span> <span class=\"o\">+=</span> <span class=\"nx\">int32max</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"nx\">seed</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果seed没有被赋值，则默认给一个值\n</span><span class=\"c1\"></span>        <span class=\"nx\">seed</span> <span class=\"p\">=</span> <span class=\"mi\">89482311</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">x</span> <span class=\"o\">:=</span> <span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"nx\">seed</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"nx\">rngLen</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"nx\">x</span> <span class=\"p\">=</span> <span class=\"nf\">seedrand</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nx\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">u</span> <span class=\"kt\">int64</span>\n            <span class=\"nx\">u</span> <span class=\"p\">=</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">40</span>\n            <span class=\"nx\">x</span> <span class=\"p\">=</span> <span class=\"nf\">seedrand</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n            <span class=\"nx\">u</span> <span class=\"p\">^=</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">20</span>\n            <span class=\"nx\">x</span> <span class=\"p\">=</span> <span class=\"nf\">seedrand</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n            <span class=\"nx\">u</span> <span class=\"p\">^=</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n            <span class=\"nx\">u</span> <span class=\"p\">^=</span> <span class=\"nx\">rngCooked</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n            <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">vec</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"nx\">u</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>首先，seed赋值了两个定义好的变量，<code>rng.tap</code>和<code>rng.feed</code>。<code>rngLen</code>和<code>rngTap</code>是两个常量。我们来看一下相关的常量定义。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">const</span> <span class=\"p\">(</span>\n    <span class=\"nx\">rngLen</span>   <span class=\"p\">=</span> <span class=\"mi\">607</span>\n    <span class=\"nx\">rngTap</span>   <span class=\"p\">=</span> <span class=\"mi\">273</span>\n    <span class=\"nx\">rngMax</span>   <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">63</span>\n    <span class=\"nx\">rngMask</span>  <span class=\"p\">=</span> <span class=\"nx\">rngMax</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"nx\">int32max</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">31</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"p\">)</span></code></pre></div><p>由此可见，无论seed是否相同，这两个变量的值都不会受seed的影响。同时，seed的值会最终决定x的值，只要seed相同，则得到的x就相同。而且无论seed是否被赋值，只要检测到是零值，都会默认的赋值为<code>89482311</code>。</p><p>接下来我们再看seedrand。</p><h3>seedrand</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// seed rng x[n+1] = 48271 * x[n] mod (2**31 - 1)\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">seedrand</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"kt\">int32</span><span class=\"p\">)</span> <span class=\"kt\">int32</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">(</span>\n        <span class=\"nx\">A</span> <span class=\"p\">=</span> <span class=\"mi\">48271</span>\n        <span class=\"nx\">Q</span> <span class=\"p\">=</span> <span class=\"mi\">44488</span>\n        <span class=\"nx\">R</span> <span class=\"p\">=</span> <span class=\"mi\">3399</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nx\">hi</span> <span class=\"o\">:=</span> <span class=\"nx\">x</span> <span class=\"o\">/</span> <span class=\"nx\">Q</span>       <span class=\"c1\">// 取除数\n</span><span class=\"c1\"></span>    <span class=\"nx\">lo</span> <span class=\"o\">:=</span> <span class=\"nx\">x</span> <span class=\"o\">%</span> <span class=\"nx\">Q</span>       <span class=\"c1\">// 取余数\n</span><span class=\"c1\"></span>    <span class=\"nx\">x</span> <span class=\"p\">=</span> <span class=\"nx\">A</span><span class=\"o\">*</span><span class=\"nx\">lo</span> <span class=\"o\">-</span> <span class=\"nx\">R</span><span class=\"o\">*</span><span class=\"nx\">hi</span> <span class=\"c1\">// 通过公式重新给x赋值\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"nx\">x</span> <span class=\"p\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"nx\">x</span> <span class=\"o\">+=</span> <span class=\"nx\">int32max</span> <span class=\"c1\">// 如果x是负数，则强行转换为一个int32的正整数\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">x</span>\n<span class=\"p\">}</span></code></pre></div><p>可以看出，只要传入的x相同，则最后输出的x一定相同。进而最后得到的随机序列<code>rng.vec</code>就相同。</p><p>到此我们验证我们最开始给出的结论，即<b>只要每次传入的seed相同，则生成的随机序列就相同</b>。验证了这个之后我们再继续验证为什么每次取到的随机序列的值都是相同的。</p><h3>源码解析-Intn</h3><p>首先举个例子，来直观的描述上面提到的问题。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">printRandom</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 结果\n</span><span class=\"c1\">// 81\n</span><span class=\"c1\">// 87\n</span><span class=\"c1\">// 81\n</span><span class=\"c1\"></span><span class=\"o\">//</span> <span class=\"mi\">87</span></code></pre></div><p>假设<code>printRandom</code>是一个单独的Go文件，那么你无论run多少次，每次打印出来的随机序列都是一样的。通过阅读seed的源码我们知道，这是因为生成了相同的随机序列。那么为什么会每次都取到同样的值呢？不说废话，我们一层一层来看。</p><h3>Intn</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"o\">*</span><span class=\"nx\">Rand</span><span class=\"p\">)</span> <span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">&#34;invalid argument to Intn&#34;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">31</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nf\">Int31n</span><span class=\"p\">(</span><span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)))</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nf\">Int63n</span><span class=\"p\">(</span><span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)))</span>\n<span class=\"p\">}</span></code></pre></div><p>可以看到，如果n小于等于0，就会直接panic。其次，会根据传入的数据类型，返回对应的类型。</p><p>虽然说这里调用分成了Int31n和Int63n，但是往下看的你会发现，其实都是调用的r.Int63()，只不过在返回64位的时候做了一个右移的操作。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// r.Int31n的调用\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"o\">*</span><span class=\"nx\">Rand</span><span class=\"p\">)</span> <span class=\"nf\">Int31</span><span class=\"p\">()</span> <span class=\"kt\">int32</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nf\">Int63</span><span class=\"p\">()</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n<span class=\"c1\">// r.Int63n的调用\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"o\">*</span><span class=\"nx\">Rand</span><span class=\"p\">)</span> <span class=\"nf\">Int63</span><span class=\"p\">()</span> <span class=\"kt\">int64</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">src</span><span class=\"p\">.</span><span class=\"nf\">Int63</span><span class=\"p\">()</span> <span class=\"p\">}</span></code></pre></div><h3>Int63</h3><p>先给出这个函数的相关代码。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// 返回一个非负的int64伪随机数.\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">rng</span> <span class=\"o\">*</span><span class=\"nx\">rngSource</span><span class=\"p\">)</span> <span class=\"nf\">Int63</span><span class=\"p\">()</span> <span class=\"kt\">int64</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nf\">Uint64</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"nx\">rngMask</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">rng</span> <span class=\"o\">*</span><span class=\"nx\">rngSource</span><span class=\"p\">)</span> <span class=\"nf\">Uint64</span><span class=\"p\">()</span> <span class=\"kt\">uint64</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">tap</span><span class=\"o\">--</span>\n    <span class=\"k\">if</span> <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">tap</span> <span class=\"p\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">tap</span> <span class=\"o\">+=</span> <span class=\"nx\">rngLen</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span><span class=\"o\">--</span>\n    <span class=\"k\">if</span> <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span> <span class=\"p\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span> <span class=\"o\">+=</span> <span class=\"nx\">rngLen</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">x</span> <span class=\"o\">:=</span> <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">vec</span><span class=\"p\">[</span><span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">vec</span><span class=\"p\">[</span><span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">tap</span><span class=\"p\">]</span>\n    <span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">vec</span><span class=\"p\">[</span><span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"nx\">x</span>\n    <span class=\"k\">return</span> <span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p>可以看到，无论是int31还是int63，最终都会进入<code>Uint64</code>这个函数中。而在这两个函数中，这两个变量的值显得尤为关键。因为直接决定了最后得到的随机数，这两个变量的赋值如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">tap</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n<span class=\"nx\">rng</span><span class=\"p\">.</span><span class=\"nx\">feed</span> <span class=\"p\">=</span> <span class=\"nx\">rngLen</span> <span class=\"o\">-</span> <span class=\"nx\">rngTap</span></code></pre></div><p>tap的值是常量0，而feed的值决定于rngLen和rngTap，而这两个变量的值也是一个常量。如此，每次从随机队列中取到的值都是确定的两个值的和。</p><p>到这，我们也验证了<b>只要传入的seed相同，并且每次都调用seed方法，那么每次随机出来的值一定是相同的</b>。</p><h3>结论</h3><p>首先评估是否需要使用seed，其次，使用seed只需要在全局调用一次即可，如果多次调用则有可能取到相同随机数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>欢迎关注公众号：SH的全栈笔记</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-68097ac6388badd02b3c5304c904e4b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic1.zhimg.com/v2-68097ac6388badd02b3c5304c904e4b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic1.zhimg.com/v2-68097ac6388badd02b3c5304c904e4b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-68097ac6388badd02b3c5304c904e4b0_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Go 语言", 
                    "tagLink": "https://api.zhihu.com/topics/19625982"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "源码阅读", 
                    "tagLink": "https://api.zhihu.com/topics/19593602"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83119243", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 2, 
            "title": "从Web转到游戏之后", 
            "content": "<p>从Web转岗到游戏也有接近一个多月了，同时也有一个多月没有更新博客了。就像上篇博客<a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/read/get-out-of-confort-zone/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从web到游戏，走出舒适区</a>所说的，转岗所带来的压力以及需要了解的东西让我处于一种有时间没有精力，有精力没有时间的状态。</p><h3>经历了什么</h3><p>这可以说是我经历过压力最大的一次，当然压力的来源不全是工作上的，更多的是压力来源于我自己。为什么说来源于自己，对于自己提交的代码，我一向比较负责。当然，是我认为的负责。</p><p>在游戏这边的leader是我目前见过的真正的把<b>优化永无止境，做人要有追求</b>这句话完全付诸实践的人，甚至连我自己都没有做到。我刚开始进来的时候，按照在之前部门的编码要求和习惯来写代码，但是每次提交的代码都会被leader找出一堆可以优化的点。</p><h3>为什么会这样</h3><p>其实leader人特别好，在我刚刚接触这块的时候就会分给我游戏里面特别底层的东西来做，例如采集、地图视野、地图单位碰撞优化等等。</p><p>这样就遇到了问题，我按照了之前做业务的要求来做游戏里面非常底层的业务。采集的重构我印象特别深，前前后后至少改了十多次。</p><p>从那开始，我自己给自己施加的压力就越来越大，压到喘不过气。我也一直都在调整，但是没什么用。现在来分析一下原因，我觉得是之前在Web方向，我认为我可以handle大部分的底层的优化、重构甚至造轮子，而且能够保证代码质量。</p><p>我认为到了这边我一样的可以，然而事与愿违。从采集开始我一直在做底层相关的优化，每一个任务都是从前没有接触过的，而且有一定的难度，再加上不熟悉这块的业务，导致难度更高。</p><p>这前后造成了太大的心理落差，我一认为我可以花天时间搞定的事情，实际上却花了3天、甚至4天才完成，时间越到后面压力就越大，心理不断的质问自己为什么会这样。</p><h3>该如何调整</h3><p>我是如何从这种情况里走出来的呢。我认为有以下几点。</p><h3>专注</h3><p>专注在自己正在做的事，其实之所以会有压力是因为你害怕delay，delay之后所带来的后果，或者是其他的原因。但是只要你将全部注意力放在当前需要解决的问题上，就已经成功了一半了。</p><p>专注是我在调整心态的过程中很重要的一个转折点。我们需要知道，在业务中几乎是没有不能解决的问题。所以我们只需要专注在如何解决这个问题即可。</p><h3>信心</h3><p>这一点也显得格外重要。当你专注在你解决的问题上时，无论花的时间长久与否，你首先得相信你自己完全有能力handle这件事。你需要的只是时间。</p><h3>运动</h3><p>我认为释放压力最好的方式还是健身。尽管前阵子度过的比较艰难，但是我还是坚持每天都去健身。流的汗水会排除影响你心情的化学物质，也让你有一个强壮的身心来应对工作。</p><h3>one more thing</h3><p>这段经历让我知道了我之前对<b>优化永无止境，做人要有追求</b>可能是有什么误解。可能我所谓的<b>优化</b>只是针对那些做起来收益比较大的优化，比较容易的优化。而至于其他的优化则显得可有可无。</p><p>我想说的是，大家可能需要更加透彻的了解自己。例如，把你的写的代码给你的同事也好，社区的朋友也罢，review一遍，让他们给你提点优化的意见，这些优化可能会是代码结构的、代码复用的、可读性的甚至命名的。</p><p>你可能会发现，手里的鸡腿和可乐没那么香了。毕竟当局者迷，这就跟你为什么需要测试来帮你测一样。你自己去测，会潜意识的避开容易出bug的地方，导致你完全测不出来bug。</p><p>总结下来就是，你可能需要对自己更了解。</p><h3>最后</h3><p>我现在几乎已经完全适应了这边，也迅速从一个游戏的菜鸟变成了几乎啥业务都熟的半只老鸟。这也跟leader和我自己对我的push有很大的关系。我可以重构特别偏业务的代码，也可以优化特别底层的逻辑。</p><p>不能说得心应手，但是至少没有什么压力。对我来说，解决这些优化问题只是时间问题。</p><p>包括我之前提到过的，<b>Done is better than perfect</b>，这篇博客也几乎是一气呵成的。希望大家不要因为想要做的很完美然后导致工作量太多就完全没有开始动。</p><p>希望我的这段经历能够帮助到有挑战新领域的意愿，和正在挑战的那些人，共勉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>微信公众号：   SH的全栈笔记</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bcba4d25016c0b4942f3987bcbe62d29_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic2.zhimg.com/v2-bcba4d25016c0b4942f3987bcbe62d29_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic2.zhimg.com/v2-bcba4d25016c0b4942f3987bcbe62d29_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bcba4d25016c0b4942f3987bcbe62d29_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "程序人生（知乎周刊）", 
                    "tagLink": "https://api.zhihu.com/topics/20136286"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74995823", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 3, 
            "title": "从web到游戏，走出舒适区", 
            "content": "<p>最近很久没有更新博客了，实在太忙。因为在这段时间里我做了一个改变了我现在职业生涯的一个决定，而我现在正在为这个决定而加倍的努力付出。</p><p>我认为我还是有必要把这个比较重要的节点记录下来，我也是第一次在自己的博客里面写这种偏阅读非技术类的文章，虽然没有技术细节，却又与技术息息相关。</p><h3>决定转岗</h3><p>我在大概两周前，从Web开发转到了游戏服务器开发。很多我周边的人知道后都认为跨度太大了。的确，Web后端跟游戏服务器相对比，虽然都可以归类为后端，但是不管从技术上还是业务上，两者之间都存在很多本质上区别，例如语言、架构和通信协议等等。</p><h3>转岗前的状态</h3><p>那么我是在什么情况下做的这个决定的呢？</p><p>每天朝九晚七，偶尔系统上线前加加班。做的都是内部系统，每个系统几乎都是针对不同的用户群。</p><p>业务在技术上没有什么阻塞点，框架和集群都已经慢慢稳定了，每天唯一需要下功夫去做的就是梳理当前要做的东西的业务，然后用符合现有框架的代码去实现这个业务。</p><p>几乎没有遇到过什么重大BUG，也没有遇到过什么无法解决的技术难题。然后我还维护着部门的所有环境的集群，也维护着部门每天都在用的自研发的自动化部署工具，时不时的对其进行功能上的更新和BUG的修复。</p><p>由于在部门呆的时间比较久，又维护着集群和一些部门公用的一些工具，在技术还算是比较有权重。</p><h3>为什么要转岗</h3><p>看到这可能有有些疑惑，不是挺好的吗？为什么要转岗，并不是那个环境有任何的问题，可能会有很多人甚至向往那样的环境，我把这归结为我自己的“毛病”。</p><p>我比较喜欢&#34;自虐&#34;，喜欢给自己施加压力，一旦让我闲下来我会浑身不自在，觉得自己实在浪费时间。这也是为什么会在每天下班之后先去健身， 然后再回去上班，9-10点下班。但是我仍然会给自己休息的时间，但是这个时间比较少但是对我足够了。</p><p>我在刚刚描述的那个环境里，就觉得比较不自在。我自认为自驱动力还是可以，我驱动自己在工作之余做了很多事情，例如维护集群，更新自动化工具，然后优化代码，写博客，自我提升。但是长期这样下去，我感觉自己push的力度已经很大了，但是仍然没有办法满足我内心的预期。</p><p>大家都知道，一套牛逼的框架诞生背后是什么驱动。是业务。</p><p>人也一样，或者说具体一样，对程序员也一样。只要 强大的业务在背后做驱动，我们才会为了解决这个业务去做一些事情，这个”事情“诞生的过程，可能对一个程序员的提升才最大。</p><h3>为什么不离职</h3><p>这存粹是个人的原因，我17年就来这家公司实习了，在里面认识了很多人，大家都很nice，公司有免费的健身房、图书馆。还有健身教练，我个人跟这位教练虽然没有私下的交集，但是每天一起撸铁互虐还是很开心。图书馆里有很多好的书籍可以看，然后公司的办公环境也很不错。</p><p>而且最开始我加入的时候就是冲着游戏来的，但是事与愿违，没有进到项目组。</p><h3>转岗意味着什么</h3><p>从Web到游戏服务器，我放弃了很多东西。你在Web那边可能是一个老鸟，对一切需求技术得心应手，甚至还可以重构框架和服务。</p><p>但是到了这边，在业务上是一个十足的菜鸟，可能你会跟刚刚进公司的实习生做同样的事情。你得有一个很好的心态来面对这个事情。</p><p>同时你还需要在短时间内快速的转变思维，学习大量的东西，尽快的熟悉业务。这个挑战很大。同时转岗有可能会对你的职业生涯甚至规划造成比较大的影响，所以首先你得有一个明确的职业规划，知道自己想要做什么。</p><h3>为什么要写这篇博客</h3><p>我写这篇博客，首先是纯粹的为了记录自己的职业生涯，同时把自己的经历和做决定的过程分享出来，帮助那些想要踏出自己的舒适区，但是仍然在犹豫的人提供一个参考。</p><h3>one more thing</h3><p>在最近这段时间，我渐渐的改变了对某些事的观点。</p><p>以前我写博客，都会考虑很多，这样写会不会太水了？这个技术点是不是没有什么可以分享的？因为有这些顾虑，本来有很多本来应该发表出来的博客就这样躺在了草稿里。</p><p>就比如这篇文章，创建的时间是7月16号，今天已经是7月24号了，磨磨蹭蹭的，改了又删。我索性就一气呵成，把自己想说的完完全全的说出来。</p><p>总结下来就是一句话，<b>Done is better than perfect</b></p><h3>最后</h3><p>我的经历仅供大家参考。如果你不甘现状，那就去改变现状。</p>", 
            "topic": [
                {
                    "tag": "程序人生（知乎周刊）", 
                    "tagLink": "https://api.zhihu.com/topics/20136286"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/71845200", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "你知道和你不知道的选择排序", 
            "content": "<p></p><h2>什么是选择排序？</h2><p>首先贴上从wiki上弄下来的关于选择排序的定义。</p><blockquote><b>选择排序</b>（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br/> </blockquote><p>更加直白的解释是，每次都从数组中选出最大或者最小的元素，然后放到数组的左边。</p><h2>选择排序的过程展示</h2><p>老规矩，我们还是通过动图来看一下选择排序的过程。以下的gif来自于wiki。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.jpg\" class=\"content_image\" width=\"288\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;288&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.jpg\" class=\"content_image lazy\" width=\"288\" data-actualsrc=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后我们再通过我制作的gif，配上数据再了解一下过程。假设我们的待排序数组还是[5, 1, 3, 7, 6, 2, 4]。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e839bb1fb683a86b25432754bb3a1832_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"152\" data-thumbnail=\"https://pic3.zhimg.com/v2-e839bb1fb683a86b25432754bb3a1832_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic3.zhimg.com/v2-e839bb1fb683a86b25432754bb3a1832_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;573&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"152\" data-thumbnail=\"https://pic3.zhimg.com/v2-e839bb1fb683a86b25432754bb3a1832_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"573\" data-original=\"https://pic3.zhimg.com/v2-e839bb1fb683a86b25432754bb3a1832_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e839bb1fb683a86b25432754bb3a1832_b.gif\"/></figure><h2>选择最小值的算法</h2><p>我们使用Java来实现最常见的，选择最小值的选择排序，其代码如下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">selectionSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">minIndex</span><span class=\"o\">;</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n    <span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// 排序结束 交换位置\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">minIndex</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">minIndex</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">selectionSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><p>假设数组的长度为7，那么算法就需要进行6轮。如果数组的长度为n，则算法需要进行n - 1轮。</p><p>每一轮，算法都会从剩下的待排序元素中，选出最小的元素，并将其与当前数组下标为i也就是有序序列的起始位置的元素交换。这样一来，经过反复的排序，最终形成有序数组。</p><h2>选择最大值的算法</h2><p>上面实现了选择最小值的代码，接下来我们继续实现选择最大值的代码。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">selectionSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">maxIndex</span><span class=\"o\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n    <span class=\"n\">maxIndex</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">maxIndex</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 排序结束 交换位置\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">maxIndex</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">maxIndex</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">selectionSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><p>这个思想与选择最小值的算法完全一样，只不过是选择了最大值，每次都将剩余序列的最大值放到数组的有序序列的最左边。</p><p>那么到此，选择排序最常见的两种写法我们都已经实现了。有的兄弟可能会想，这篇博客是不是结束了。其实我们可以从上面两个算法中想到可以优化的点。</p><p>既然我们有两个选择，一种选择最小值，另外一种选择最大值。那么我们为什么不同时进行两个操作呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ad84460856a1254cd28966244eea4e39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"232\" data-rawheight=\"217\" class=\"content_image\" width=\"232\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;232&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"232\" data-rawheight=\"217\" class=\"content_image lazy\" width=\"232\" data-actualsrc=\"https://pic2.zhimg.com/v2-ad84460856a1254cd28966244eea4e39_b.jpg\"/></figure><p>下面我们就来实现这种算法。</p><h2>同时选择最大值和最小值</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">selectionSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">minIndex</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">maxIndex</span><span class=\"o\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n    <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n    <span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"n\">maxIndex</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">max</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">maxIndex</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// 排序结束 交换位置\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">minIndex</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">maxIndex</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">maxIndex</span> <span class=\"o\">=</span> <span class=\"n\">minIndex</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">minIndex</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">maxIndex</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">maxIndex</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">selectionSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><p>因为选择最大值和最小值同时进行，相对于上面两种算法，同时选择算法在执行次数上比前两种算法减少了50%。</p><p>在运行时间上相对于选择最小值和最大值分别减少了39.22%和62.20%。</p><h2>总结</h2><p>以下是对同一个长度为10000的随机乱序数组使用三种算法的情况。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0e912a38da3fff71c2a0502cc21a6bbd_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic2.zhimg.com/v2-0e912a38da3fff71c2a0502cc21a6bbd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;814&#39; height=&#39;127&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"127\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"814\" data-original=\"https://pic2.zhimg.com/v2-0e912a38da3fff71c2a0502cc21a6bbd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0e912a38da3fff71c2a0502cc21a6bbd_b.png\"/></figure><p>最后我们看一下选择排序算法的时间复杂度。</p><ul><li>最好的情况为O(n ^ 2). 即使整个数组都是有序的，选择排序也会执行完选择最大值或者最小值的过程，只是不会去进行元素交换。</li><li>最坏的情况为O(n ^ 2). 同上，会执行完选择最大值或者最小值的过程，并且每次都需要进行元素交换。</li></ul><p>其空间复杂度为O(n)，上面三种算法都属于原地排序算法，除了交换元素使用了一个辅助空间之外，没有额外申请空间，同时选择排序是不稳定排序。</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70701111", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 1, 
            "title": "你知道和你不知道的冒泡排序", 
            "content": "<p>这篇文章包含了你一定知道的，和你不一定知道的冒泡排序。</p><p>gif看不了可以点击【[原文](<a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/sort/bubble-sort/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">你知道和你不知道的冒泡排序</a>)】查看gif。</p><p>源码: 【<a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/algorithm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">地址</a>】</p><h2>什么是冒泡排序</h2><p>可能对于大多数的人来说比如我，接触的第一个算法就是冒泡排序。</p><p>我看过的很多的文章都把冒泡排序描述成我们喝的汽水，底部不停的有二氧化碳的气泡往上冒，还有描述成鱼吐泡泡，都特别的形象。</p><p>其实结合一杯水来对比很好理解，将我们的数组竖着放进杯子，数组中值小的元素密度相对较小，值大的元素密度相对较大。这样一来，密度大的元素就会沉入杯底，而密度小的元素会慢慢的浮到杯子的最顶部，稍微专业一点描述如下。</p><blockquote> 冒泡算法会运行多轮，每一轮会依次比较数组中相邻的两个元素的大小，如果左边的元素大于右边的元素，则交换两个元素的位置。最终经过多轮的排序，数组最终成为有序数组。</blockquote><h2>排序过程展示</h2><p>我们先不聊空间复杂度和时间复杂度的概念，我们先通过一张动图来了解一下冒泡排序的过程。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-638f795dbad629be8b66ffd773caf781_b.jpg\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"606\" data-original=\"https://pic2.zhimg.com/v2-638f795dbad629be8b66ffd773caf781_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;606&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"606\" data-original=\"https://pic2.zhimg.com/v2-638f795dbad629be8b66ffd773caf781_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-638f795dbad629be8b66ffd773caf781_b.jpg\"/><figcaption>动图请看原文</figcaption></figure><p>这个图形象的还原了密度不同的元素上浮和下沉的过程。</p><h2>算法V1</h2><h3>代码实现</h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">bubbleSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><h3>实现分析</h3><p>各位大佬看了上面的代码之后先别激动，坐下坐下，日常操作。可能很多的第一个冒泡排序算法就是这么写的，比如我，同时还自我感觉良好，觉得算法也不过如此。</p><p>我们还是以数组<code>[5, 1, 3, 7, 6, 2, 4]</code>为例，我们通过动图来看一下过程。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d664ed2802ab9d340e7efcef34576c02_b.jpg\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic3.zhimg.com/v2-d664ed2802ab9d340e7efcef34576c02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;586&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"586\" data-original=\"https://pic3.zhimg.com/v2-d664ed2802ab9d340e7efcef34576c02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d664ed2802ab9d340e7efcef34576c02_b.jpg\"/><figcaption>动图请看原文</figcaption></figure><p>思路很简单，我们用两层循环来实现冒泡排序。</p><ul><li> 第一层，控制冒泡排序总共执行的轮数，例如例子数组的长度是7，那么总共需要执行6轮。如果长度是n，则需要执行n-1轮<br/> </li><li> 第二层，负责从左到右依次的两两比较相邻元素，并且将大的元素交换到右侧<br/> </li></ul><p>这就是冒泡排序V1的思路。</p><p>下表是通过对一个0-100000的乱序数组的标准样本，使用V1算法进行排序所总共执行的次数，以及对<b>同一个</b>数组执行100次V1算法的所花的平均时间。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6fade43427fa9f6962d7174e68277c2a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic3.zhimg.com/v2-6fade43427fa9f6962d7174e68277c2a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic3.zhimg.com/v2-6fade43427fa9f6962d7174e68277c2a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6fade43427fa9f6962d7174e68277c2a_b.jpg\"/></figure><h2>算法V2</h2><h3>实现分析</h3><p>仔细看动图我们可以发现，每一轮的排序，都从数组的最左端再到最右。而每一轮的冒泡，都可以确定一个最大的数，固定在数组的最右边，也就是密度最大的元素会冒泡到杯子的最上面。</p><p>还是拿上面的数组举例子。下图是第一轮冒泡之后数组的元素位置。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ee7c0981d14e41627371172f8be0b6df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"606\" data-original=\"https://pic4.zhimg.com/v2-ee7c0981d14e41627371172f8be0b6df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;606&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"606\" data-original=\"https://pic4.zhimg.com/v2-ee7c0981d14e41627371172f8be0b6df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ee7c0981d14e41627371172f8be0b6df_b.jpg\"/></figure><p>第二轮排序之后如下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3afa1c1edf80b38c20049ea6693324b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"606\" data-original=\"https://pic2.zhimg.com/v2-3afa1c1edf80b38c20049ea6693324b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;606&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"606\" data-original=\"https://pic2.zhimg.com/v2-3afa1c1edf80b38c20049ea6693324b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3afa1c1edf80b38c20049ea6693324b5_b.jpg\"/></figure><p>可以看到，每一轮排序都会确认一个最大元素，放在数组的最后面，当算法进行到后面，我们根本就没有必要再去比较数组后面已经有序的片段，我们接下来针对这个点来优化一下。</p><h3>代码实现</h3><p>这是优化之后的代码。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">bubbleSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><p>优化之后的实现，也就变成了我们动图中所展示的过程。</p><p>每一步之后都会确定一个元素在数组中的位置，所以之后的每次冒泡的需要比较的元素个数就会相应的减1。这样一来，避免了去比较已经有序的数组，从而减少了大量的时间。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-05cf8bc10957155c94da06a2bd32ff44_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic1.zhimg.com/v2-05cf8bc10957155c94da06a2bd32ff44_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic1.zhimg.com/v2-05cf8bc10957155c94da06a2bd32ff44_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-05cf8bc10957155c94da06a2bd32ff44_b.jpg\"/></figure><p>可能会有人看到，时间大部分已经会觉得满足了。从数据上看，执行的次数减少了50%，而运行的时间也减少了20%，在性能上已经是很大的提升了。而且已经减少了7亿次的执行次数，已经很NB了。 那是不是到这就已经很完美了呢？</p><p>答案是<b>No</b>。</p><h3>哪里可以优化</h3><p>同理，我们还是拿上面长度为7的数组来举例子，只不过元素的位置有所不同，假设数组的元素如下。</p><blockquote> [7, 1, 2, 3, 4, 5, 6]<br/> </blockquote><p>我们再来一步一步的执行V2算法， 看看会发生什么。</p><p>第一步执行完毕后，数组的情况如下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-58070e58d6349075e86a9a116bdcdc59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic2.zhimg.com/v2-58070e58d6349075e86a9a116bdcdc59_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic2.zhimg.com/v2-58070e58d6349075e86a9a116bdcdc59_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-58070e58d6349075e86a9a116bdcdc59_b.jpg\"/></figure><p>继续推进，当第一轮执行完毕后，数组的元素位置如下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e73fcf89777c0b4a895b7c334a3c8f7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic4.zhimg.com/v2-e73fcf89777c0b4a895b7c334a3c8f7b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic4.zhimg.com/v2-e73fcf89777c0b4a895b7c334a3c8f7b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e73fcf89777c0b4a895b7c334a3c8f7b_b.jpg\"/></figure><p>这个时候，数组已经排序完毕，但是按照目前的V2逻辑，仍然有5轮排序需要继续，而且程序会完整的执行完5轮的排序，如果是100000轮呢？这样将会浪费大量的计算资源。</p><h2>算法V3</h2><h3>代码实现</h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">break</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">bubbleSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><h3>实现分析</h3><p>我们在V2代码的基础上，在第一层循环，也就是控制总冒泡轮数的循环中，加入了一个标志为flag。用来标示该轮冒泡排序中，数组是否是有序的。每一轮的初始值都是true。</p><p>当第二层循环，也就是冒泡排序的元素两两比较完成之后，flag的值仍然是true，则说明在这轮比较中没有任何元素被交换了位置。也就是说，数组此时已经是有序状态了，没有必要再执行后续的剩余轮数的冒泡了。</p><p>所以，如果flag的值是true，就直接break了（没有其他的操作return也没毛病）。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3de7c8caa77248d06310267b2d512736_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic3.zhimg.com/v2-3de7c8caa77248d06310267b2d512736_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic3.zhimg.com/v2-3de7c8caa77248d06310267b2d512736_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3de7c8caa77248d06310267b2d512736_b.jpg\"/></figure><h3>数据分析</h3><p>大家看到数据可能有点懵逼。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ea3e20f04a045d4fcda2684e7663a706_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"232\" data-rawheight=\"217\" class=\"content_image\" width=\"232\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;232&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"232\" data-rawheight=\"217\" class=\"content_image lazy\" width=\"232\" data-actualsrc=\"https://pic3.zhimg.com/v2-ea3e20f04a045d4fcda2684e7663a706_b.jpg\"/></figure><p>你这个优化之后，运行时间执行次数都没有减少。你这优化的什么东西？</p><p>其实，这就要说到算法的适用性了。V3的优化是针对原始数据中存在一部分或者大量的数据已经是有序的情况，V3的算法对于这样的样本数据才最适用。</p><blockquote> 其实是我们还没有到优化这种情况的那一步，但是其实仍然有这样的说法，面对不同的数据结构，几乎没有算法是万能的<br/> </blockquote><p>而目前的样本数据仍然是随机的乱序数组，所以并不能发挥优化之后的算法的威力。所谓对症下药，同理并不是所有的算法都是万能的。对于不同的数据我们需要选择不同的算法。例如我们选择[9999,1,2,…,9998]这行的数据做样本来分析，我们来看一下V3算法的表现。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b68903c8fda8274d946531f49c7819ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic4.zhimg.com/v2-b68903c8fda8274d946531f49c7819ff_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic4.zhimg.com/v2-b68903c8fda8274d946531f49c7819ff_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b68903c8fda8274d946531f49c7819ff_b.jpg\"/></figure><p>可以看到，提升非常明显。</p><h3>适用情况</h3><p>当冒泡算法运行到后半段的时候，如果此时数组已经有序了，需要提前结束冒泡排序。V3针对这样的情况就特别有效。</p><h2>算法V4</h2><p>嗯，什么？为什么不是结束语？那是因为还有一种没有考虑到啊。</p><h3>适用情况总结</h3><p>我们总结一下前面的算法能够处理的情况。</p><ul><li>V1：正常乱序数组</li><li>V2：正常乱序数组，但对算法的执行次数做了优化</li><li>V3：大部分元素已经有序的数组，可以提前结束冒泡排序</li></ul><p>还有一种情况是冒泡算法的轮数没有执行完，甚至还没有开始执行，后半段的数组就已经有序的数组，例如如下的情况。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1180&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1180\" data-original=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_b.jpg\"/></figure><p>这种情况，在数组完全有序之前都不会触发V3中的提前停止算法，因为每一轮都有交换存在，flag的值会一直是true。而下标2之后的所有的数组都是有序的，算法会依次的冒泡完所有的已有序部分，造成资源的浪费。我们怎么来处理这种情况呢？</p><h3>实现分析</h3><p>我们可以在V3的基础之上来做。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1180&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1180\" data-original=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d4b99e064c3f1348b063b12eafbba4e2_b.jpg\"/></figure><p>当第一轮冒泡排序结束后，元素3会被移动到下标2的位置。在此之后没有再进行过任意一轮的排序，但是如果我们不做处理，程序仍然会继续的运行下去。</p><p>我们在V3的基础上，加上一个标识endIndex来记录这一轮最后的发生交换的位置。这样一来，下一轮的冒泡就只冒到endIndex所记录的位置即可。因为后面的数组没有发生任何的交换，所以数组必定有序。</p><h3>代码实现</h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">endIndex</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">endAt</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">endIndex</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">endAt</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n        <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">endIndex</span> <span class=\"o\">=</span> <span class=\"n\">endAt</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">break</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">};</span>\n<span class=\"n\">bubbleSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><h2>算法V5</h2><p>这一节仍然不是结束语...</p><h3>算法优化</h3><p>我们来看一下这种情况。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f4bb5568fa7ec52c26523f778afd6d02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-f4bb5568fa7ec52c26523f778afd6d02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"111\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-f4bb5568fa7ec52c26523f778afd6d02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f4bb5568fa7ec52c26523f778afd6d02_b.jpg\"/></figure><p>对于这种以上的算法都将不能发挥其应有的作用。每一轮算法都存在元素的交换，同时，直到算法完成以前，数组都不是有序的。但是如果我们能直接从右向左冒泡，只需要一轮就可以完成排序。这就是<b>鸡尾酒排序</b>，冒泡排序的另一种优化，其适用情况就是上图所展示的那种。</p><h3>代码实现</h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">leftBorder</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">rightBorder</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">leftEndAt</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">rightEndAt</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">leftBorder</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">rightBorder</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">rightEndAt</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">rightBorder</span> <span class=\"o\">=</span> <span class=\"n\">rightEndAt</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">break</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">rightBorder</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">leftBorder</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">exchange</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">leftEndAt</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">leftBorder</span> <span class=\"o\">=</span> <span class=\"n\">leftEndAt</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">break</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">exchange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n  <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">};</span>\n<span class=\"n\">bubbleSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">]</span></code></pre></div><h3>实现分析</h3><p>第一层循环同样用于控制总的循环轮数，由于每次需要从左到右再从右到左，所以总共的轮数是数组的长度 / 2。</p><p>内存循环则负责先实现从左到右的冒泡排序，再实现从右到左的冒泡，并且同时结合了V4的优化点。</p><p>我们来看一下V5与V4的对比。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a201dddd98831bf6c7df57f898e4ef17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic4.zhimg.com/v2-a201dddd98831bf6c7df57f898e4ef17_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic4.zhimg.com/v2-a201dddd98831bf6c7df57f898e4ef17_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a201dddd98831bf6c7df57f898e4ef17_b.jpg\"/></figure><h2>总结</h2><p>以下是对同一个数组，使用每一种算法对其运行100次的平均时间和执行次数做的的对比。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4f3a0c7d4c4f3fa429e7e3320cb5e861_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"628\" class=\"origin_image zh-lightbox-thumb\" width=\"1574\" data-original=\"https://pic2.zhimg.com/v2-4f3a0c7d4c4f3fa429e7e3320cb5e861_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1574&#39; height=&#39;628&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1574\" data-rawheight=\"628\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1574\" data-original=\"https://pic2.zhimg.com/v2-4f3a0c7d4c4f3fa429e7e3320cb5e861_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4f3a0c7d4c4f3fa429e7e3320cb5e861_b.jpg\"/></figure><p>而冒泡排序的时间复杂度分为最好的情况和最快的情况。</p><ul><li>最好的情况为O($$n$$). 也就是我们在V5中提到的那种情况，数组<code>2, 3, 4, 5, 6, 7, 1</code>。使用鸡尾酒算法，只需要进行一轮冒泡，即可完成对数组的排序。</li><li>最坏的情况为O($$n^2$$).也就是V1，V2，V3和V4所遇到的情况，几乎大部分数据都是无序的。</li></ul><p>往期文章：</p><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/automatic-tool-in-swarm/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a58ba3821f97ff1e2ff3552e63703ddc_ipico.jpg\" data-image-width=\"232\" data-image-height=\"217\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">聊聊微服务集群当中的自动化工具</a><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/go/source-code-in-go/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-3b9d5be6cf663da8fd454d0e5fe56556_180x120.jpg\" data-image-width=\"460\" data-image-height=\"255\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">go源码解析-Println的故事</a><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/go/go-web-backend-starter/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-92a76e5a897e16cc1c03074208f51cd6_ipico.jpg\" data-image-width=\"1062\" data-image-height=\"1059\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">用go-module作为包管理器搭建go的web服务器</a><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/frontend/gettingStartOfWebAssembly/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-92a76e5a897e16cc1c03074208f51cd6_ipico.jpg\" data-image-width=\"1062\" data-image-height=\"1059\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WebAssembly完全入门——了解wasm的前世今身</a><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/java/restraunt-single-application-to-microservice/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-c4e9337453dafc176270898e5885e23a_180x120.jpg\" data-image-width=\"1022\" data-image-height=\"760\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">小强开饭店-从单体应用到微服务</a><p class=\"ztext-empty-paragraph\"><br/></p><p>相关：</p><p> 微信公众号：   SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_b.jpg\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_b.jpg\"/><figcaption>SH的全栈笔记</figcaption></figure><p></p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }
            ], 
            "comments": [
                {
                    "userName": "兴奋的路人", 
                    "userLink": "https://www.zhihu.com/people/24ec9a05633f2bf0e0bea988105efd17", 
                    "content": "大神，写个快排的详解呗", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69506955", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 5, 
            "title": "聊聊微服务集群当中的自动化工具", 
            "content": "<p>本篇博客主要介绍了自动化工具这个概念，在微服务集群当中的作用，算抛砖引玉，欢迎大家提出自己的见解。</p><h2>写在前面</h2><p>在了解自动化工具的概念之前，我们先了解一下微服务和集群的概念。</p><h2>什么是微服务</h2><p>这个概念其实有些广泛，而我的知识广度也有限，我会尽量用通俗的语言来描述什么是微服务，什么是集群，以及为什么我们需要微服务集群 。为什么需要集群可以去看看<a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5d006b32f265da1b9253d2c7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《小强开饭店-从单体应用到微服务》</a>，这篇文章用非常通俗的语言和配图，通过一个漫画故事简单的解释了为什么我们需要微服务集群。</p><h3>微服务</h3><p>传统的后端服务多为单体应用，例如使用Sprint Boot或者Node又或者Gin搭建的简单的后端服务，在此基础之上，实现了基本的业务之后再部署到服务器上运行起来，这就成为了一个单体应用。</p><p>随着业务需求的增加、业务代码慢慢的累加，单体应用变的也越来越大。同时各个模块的大量业务代码相互纠缠在一起，开发以及维护变得尤其困难。想象一下一个刚刚加入项目的新人看到相互纠缠的、逻辑复杂的业务代码的绝望。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e257cad2b960da0518744f7e0c1ba712_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e257cad2b960da0518744f7e0c1ba712_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e257cad2b960da0518744f7e0c1ba712_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e257cad2b960da0518744f7e0c1ba712_b.jpg\"/></figure><p>这个时候我们就需要了解微服务的概念了。如果想要讲这个庞大的单体应用可维护、可扩展以及高可用，我们就需要对单体应用按照模块进行业务拆分 。</p><p>例如将用户相关的所有逻辑单独搞成一个服务，又例如订单、库存可以搞成一个单独的服务。这样一来，业务代码被分散到几个单独的服务中，每个服务只需要关心、处理自己这个模块的业务逻辑。这样一来，业务代码的逻辑清晰，对开发人员来说，条理以及思路都很清晰。即使是后加入的项目开发人员，面对业务逻辑清晰的代码也十分容易上手。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae30b22032cdbccbfea36f6b5767d6ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-ae30b22032cdbccbfea36f6b5767d6ad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-ae30b22032cdbccbfea36f6b5767d6ad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae30b22032cdbccbfea36f6b5767d6ad_b.jpg\"/></figure><h3>微服务的拆分</h3><p>其实我看到很多的文章关于微服务的介绍就基本到这了，但是还有个值得提的概念。首先，微服务怎么拆分其实是没有一个标准的。</p><p>你按照什么样的粒度去拆分你的服务其实是跟业务强相关的。并不是说一个服务的代码一定就很少，根据你的业务的量度，例如你的系统用户量特比的大，那么一个用户服务的代码量上千上万行我觉得都很正常。</p><p>当然我也见过用户不是很多，只是为了高可用和快速定位，而将系统拆分的非常细的系统，有好几十个服务。那么问题来了，有这么多服务，前端需要去维护的后端API的地址就相当的庞大了。</p><p>我们暂且先不讨论所有拆分的服务是否运行在同一个服务器上，就算是，那也得是不同的端口。前端也需要根据后端拆分的服务模块，去维护这样一张API的映射表。所以我们需要提出一个BFF，AKA Backend For Frontend.</p><h3>BFF</h3><p>其实BFF层最初被提出来，其实不是为了微服务拆分模块中提到的目的。其设计的目的是为了给不同的设备提供不同的API。例如一个系统的后端服务，同时需要支持不同的终端，例如移动端的iOS和Android，PC端。</p><p>这样一来，可以根据不同设备上的需求来提供对应的API，而且不需要更改我们现有的微服务。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-236863adee9b2714c0436838d137addf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"884\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"884\" data-original=\"https://pic4.zhimg.com/v2-236863adee9b2714c0436838d137addf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;884&#39; height=&#39;648&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"884\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"884\" data-original=\"https://pic4.zhimg.com/v2-236863adee9b2714c0436838d137addf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-236863adee9b2714c0436838d137addf_b.jpg\"/></figure><p>这样一来，我们的底层服务群就具有了很强的扩展性，我们不需要为一个新增的客户端来更改底层的服务代码，而是新增一层BFF层，来专门针对该终端类型去做适配。</p><p>大家从上面的图可以看出来，客户端都没有直接访问我们的底层服务。而是都先经过BFF层提供的接口，再由BFF层来根据不同的路由来调用不同的底层服务。总结一下，加了BFF层的优点如下。</p><ul><li>扩展性强，可以适应不同的客户端</li><li>统一的API管理，客户端无须再维护API的映射表</li><li>可做集中鉴权，所有的请求都会先经过BFF，可在这一层对调用接口的合法性进行验证</li></ul><p>当然，BFF也有缺点。</p><ul><li>处理不当会有大量的代码冗余</li><li>因需要调用不同底层的服务而增大开发的工作量</li></ul><p>当然在实际的生产环境下，我们也很少会将BFF层直接暴露给客户端。我们通常会在BFF层上再加一层网关。网关可以在请求还没有到BFF的时候，实现权限认证，限流熔断等等其他的功能。</p><h2>集群</h2><p>上面简单的聊了一下什么是微服务，现在我们来聊聊什么是集群。我们知道，当一个单体应用大的已经很难维护的时候，最好的办法就是将其拆分成微服务。这样有什么好处呢？</p><ul><li>便于维护。每个微服务专注于自己这个模块的业务逻辑，不会存在各个模块的业务逻辑缠在一起的状况。</li><li>提高可用性。当单体应用挂掉的时候，我们系统的所有模块都将不可用。而拆分成微服务就可以尽量的避免这个问题。单个服务挂掉了，不会影响到其他服务的正常运行。</li><li>便于运维。单体应用重新部署的时候，会使整个系统不可用。而在微服务中，单个服务重新部署的代价明显要小的多。</li></ul><h3>概念</h3><p>说了这么多，我们来给集群一个概念吧。集群就是将同一套服务部署在不同的服务器上，对外提供服务。</p><h3>例子</h3><p>我举个具体的例子。例如我们使用Docker Swarm来提供容器的集群服务。</p><p>在Docker Swarm中有节点这样一个概念，凡是运行了Docker的主机都可以主动的创建一个Swarm集群或者加入一个已经存在的集群，一旦加入，这个主机就成为了这个集群中的一个节点。在集群中节点分为两类，分别是管理节点（manager）和工作节点（worker）。我们可以用Portainer来管理Docker主机和Swarm集群。</p><p>我们以一个集群中的请求来举个例子。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2fadfff65f819a31412b69c98d2a12aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-2fadfff65f819a31412b69c98d2a12aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-2fadfff65f819a31412b69c98d2a12aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2fadfff65f819a31412b69c98d2a12aa_b.jpg\"/></figure><p>首先进入系统之后会先进入一个统一鉴权的系统去鉴权，鉴权成功之后就会到我们的微服务网关，如果这个地方还有系统自己的特殊鉴权的话，再次进行鉴权。之后网关这边会将我们的请求根据配置的路由来分发到具体的某个服务器上的某个容器中。</p><h2>自动化工具</h2><p>自动化工具的都包含了哪些技术呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4dd5a76f343dd5e47610ccfb99bbfc05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic2.zhimg.com/v2-4dd5a76f343dd5e47610ccfb99bbfc05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic2.zhimg.com/v2-4dd5a76f343dd5e47610ccfb99bbfc05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4dd5a76f343dd5e47610ccfb99bbfc05_b.jpg\"/></figure><p>其中的Java只是一个类比，代表你的编程语言。微服务中其实不是很关心具体用的什么语言，甚至每个服务都用不同的技术栈都行。</p><p>那么自动化工具是什么呢？其作用是什么？在集群中扮演了什么样的角色呢？我们通过一张图来简单的了解一下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8608e8c2329d586f3c17959713ca6765_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic2.zhimg.com/v2-8608e8c2329d586f3c17959713ca6765_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic2.zhimg.com/v2-8608e8c2329d586f3c17959713ca6765_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8608e8c2329d586f3c17959713ca6765_b.jpg\"/></figure><h3>构建</h3><p>简单的梳理一下逻辑。</p><ul><li>首先自动化工具将Jenkins构建所需要的参数组织好，调用Jenkins的构建API，并记录构建操作到自动化工具的数据库</li><li>然后Jenkins用配置好的凭证去Gitlab的对应的项目的分支拉取代码，根据配置好的构建脚本开始构建，记录构建记录到自动化工具的数据库</li><li>构建好后再推送到docker的仓库中，并记录到自动化工具的数据库</li></ul><p>到此构建的逻辑结束。</p><h3>其他的功能</h3><p>自动化工具还可以直接在项目列表中，选择查看当前项目的日志，而不需要每次重新打开Kibana然后再加筛选filter。</p><p>自动化工具的项目设置中，我们还可以更改docker容器的配置，而不需要再去portainer中或者通过命令行去修改；如果想要命令行进入容器，首先我们得找到对应的service，然后找到对应运行的service实例，然后才能进入，而如果我们直接使用portainer的Api，在endpoint已知的情况下，可以直接将这个功能做到自动化工具中，直接使用webshell一键连接。</p><p>其好处是什么呢？</p><ul><li>对大部分开发屏蔽Swarm集群。对项目中非管理员的开发屏蔽Portainer，因为这个权限非常大，一旦不熟悉导致了误操作，那么有可能直接影响到线上的服务</li><li>统一权限控制。在自动化工具里做权限以及环境的统一控制</li><li>上手成本低。比起直接操作portainer和Jenkins和Kibana，自己搭建的自动化工具十分容易上手</li></ul><h3>功能总结</h3><p>总结一下，其功能主要为以下几个。</p><ul><li>构建</li><li>部署</li><li>回滚</li><li>查看elk日志</li><li>更改docker配置</li><li>管理集群的环境、项目和容器</li><li>命令行连接具体项目的容器</li><li>…...</li></ul><p>看到这大家可能会有疑问。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ea3e20f04a045d4fcda2684e7663a706_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"232\" data-rawheight=\"217\" class=\"content_image\" width=\"232\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;232&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"232\" data-rawheight=\"217\" class=\"content_image lazy\" width=\"232\" data-actualsrc=\"https://pic3.zhimg.com/v2-ea3e20f04a045d4fcda2684e7663a706_b.jpg\"/></figure><ul><li>构建？你的意思是我Jenkins是摆设咯？</li><li>部署？更改 docker配置？命令行连接具体项目的容器？我的Iterm2也是个摆设？</li><li>回滚？等于是我之前的docker镜像的tag白打了？</li><li>elk日志？我的Kibana是拿来看新闻的吗？</li></ul><h2>功能详解</h2><h3>构建</h3><p>其实在构建这块，我个人认为自动化工具和Jenkins都很方便。而且自动化工具本身就是用的Jenkins，只不过是调用了Jenkins的API，传递了构建的参数，最终真正去构建的还是Jenkins。</p><p>只不过对于刚刚加入项目的测试来说，自己开发的Web UI对新人更加的友好，而且可以在自动化工具中做到权限控制。</p><h3>部署和回滚</h3><p>部署在自动化工具的后端通过docker-client实现。首先我们根据配置，创建docker client。然后如果已经有在运行的服务了，就调用update service更新服务，否则就创建服务。</p><p>回滚与其本质相同，只不过是用了之前的参数和不同的tag。</p><h3>elk日志</h3><p>首先，每个环境的配置中，会配置上kibana_host以及kibana_index，然后根据系统的projectKey，拼接成相应的Kibana日志的url，然后使用iframe嵌入到自动化工具中。这样一来就不用再手动的打开Kibana再去设置对应的filter了。特别是当你系统特别多的时候，添加和删除filter是很废时间的。</p><h3>更新容器配置</h3><p>这里也同样是调用对应的API更新对应服务的配置，而不用登录portainer去修改。</p><p>同时，在自动化工具中还可以针对不同的环境配置不同的Base Setting。后续在该环境下添加的应用不用再单独配置，直接继承环境的Docker Setting即可。</p><h3>管理集群的环境、项目和容器</h3><p>可以通过自动化工具统一的来创建和管理环境，同样有三种环境，研发、测试、生产环境。然后可以在自动化工具中创建角色和用户，分配给不同的角色不同的权限来达到控制权限的目的。</p><h3>命令行连接具体项目的容器</h3><p>通常我们因为某个需求，需要进入到容器中查看，然而此时我们就面临两种选择。</p><ul><li>通过portainer进入对应service，找个某个具体的container，点击连接</li><li>命令行到容器具体运行的某个服务器上，然后再通过命令行连接</li></ul><p>但是有了自动化工具，我们就有了第三种选择。</p><ul><li>点击连接</li></ul><p>怎么实现的呢？实际上就是通过endpointId去获取到所有的container的信息，然后遍历所有的container，找到与当前选中的containerId相同的容器，获取到其NodeName，这样一来我们就知道当前这个容器到底运行在哪个节点上的了。</p><p>然后通过已有的信息，构建WebSocket的url，最后前端通过xterm来建立ws连接，就这样直接连接了正在运行的容器实例。</p><h2>总结</h2><p>自动化工具只是一种思路，一种解决方案，它的好处在上面也列出了很多。当然，它肯定也有坏处，那就是需要专门投入人力和资源去开发。</p><p>这对于人手紧缺和项目周期较短的项目组来说，十分的不现实。但是如果一旦有精力和时间，我觉得值得一试。同时，基于portainer的API，我们还有可能将更多与集群相关的功能，集成到自动化工具上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 往期文章：</b><br/> </p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/devtools/useful-chrome-extension/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">什么？你竟然还没有用这几个chrome插件？</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/java/newSprintBootStarter/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手把手教你从零开始搭建SpringBoot后端项目框架</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/go/go-web-backend-starter/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">用go-module作为包管理器搭建go的web服务器</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/frontend/gettingStartOfWebAssembly/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WebAssembly完全入门——了解wasm的前世今身</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/java/restraunt-single-application-to-microservice/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">小强开饭店-从单体应用到微服务</a></li></ul><p> 相关：</p><ul><li>微信公众号：   SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu） </li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Docker Swarm", 
                    "tagLink": "https://api.zhihu.com/topics/20104973"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69133289", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 10, 
            "title": "go源码解析-Println的故事", 
            "content": "<p>本文主要通过平常常用的go的一个函数，深入源码，了解其底层到底是如何实现的。</p><h2>Println</h2><p>Println函数接受参数a，其类型为…interface{}。用过Java的对这个应该比较熟悉，Java中也有…的用法。其作用是传入可变的参数，而interface{}类似于Java中的Object，代表任何类型。</p><p>所以，…interface{}转换成Java的概念，就是<code>Object args ...</code>。</p><p>Println函数中没有什么实现，只是return了Fprintln函数。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">...</span><span class=\"kd\">interface</span><span class=\"p\">{})</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nf\">Fprintln</span><span class=\"p\">(</span><span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p>而在此处的…放在了参数的后面。我们知道<code>...interface{}</code>是代表可变参数，即函数可接收任意数量的参数，而且参数参数分开写的。</p><p>当我们再调用这个函数的时候，我们就没有必要再将参数一个一个传给被调用函数了，直接使用a…就可以达到相同的效果。</p><h2>Fprintln</h2><p>该函数接收参数os.Stdout.write，和需要打印的数据作为参数。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">Fprintln</span><span class=\"p\">(</span><span class=\"nx\">w</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">Writer</span><span class=\"p\">,</span> <span class=\"nx\">a</span> <span class=\"o\">...</span><span class=\"kd\">interface</span><span class=\"p\">{})</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">p</span> <span class=\"o\">:=</span> <span class=\"nf\">newPrinter</span><span class=\"p\">()</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">doPrintln</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span>\n    <span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"p\">=</span> <span class=\"nx\">w</span><span class=\"p\">.</span><span class=\"nf\">Write</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span><span class=\"p\">)</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">free</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span>\n<span class=\"p\">}</span></code></pre></div><h3>sync.Pool</h3><p>从广义上看，newPrinter申请了一个临时对象池。我们逐行来看newPrinter函数做了什么。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">var</span> <span class=\"nx\">ppFree</span> <span class=\"p\">=</span> <span class=\"nx\">sync</span><span class=\"p\">.</span><span class=\"nx\">Pool</span><span class=\"p\">{</span>\n    <span class=\"nx\">New</span><span class=\"p\">:</span> <span class=\"kd\">func</span><span class=\"p\">()</span> <span class=\"kd\">interface</span><span class=\"p\">{}</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">new</span><span class=\"p\">(</span><span class=\"nx\">pp</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// newPrinter allocates a new pp struct or grabs a cached one.\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">newPrinter</span><span class=\"p\">()</span> <span class=\"o\">*</span><span class=\"nx\">pp</span> <span class=\"p\">{</span>\n    <span class=\"nx\">p</span> <span class=\"o\">:=</span> <span class=\"nx\">ppFree</span><span class=\"p\">.</span><span class=\"nf\">Get</span><span class=\"p\">().(</span><span class=\"o\">*</span><span class=\"nx\">pp</span><span class=\"p\">)</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">panicking</span> <span class=\"p\">=</span> <span class=\"kc\">false</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">erroring</span> <span class=\"p\">=</span> <span class=\"kc\">false</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">wrapErrs</span> <span class=\"p\">=</span> <span class=\"kc\">false</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nx\">p</span>\n<span class=\"p\">}</span></code></pre></div><p>sync.Pool是go的临时对象池，用于存储被分配了但是没有被使用，但是未来可能会使用的值。以此来减少 GC的压力。</p><h3>ppFree.Get</h3><p>ppFree.Get()上有大量的注释。</p><blockquote> Get selects an arbitrary item from the Pool, removes it from the Pool, and returns it to the caller.<br/> Get may choose to ignore the pool and treat it as empty. Callers should not assume any relation between values passed to Put and the values returned by Get.<br/> If Get would otherwise return nil and p.New is non-nil, Get returns the result of calling p.New.<br/> </blockquote><p>麻瓜翻译一波。</p><blockquote> Get会从临时对象池中任意选一个printer返回给调用者，并且将此项从对象池中移除。<br/> Get也可以选择把临时对象池当成空的忽略。调用者不应该假设传递给Put方法的值和Get返回的值之间存在任何关系。<br/> 如果Get函数没有获取到资源但是p.New函数可以申请到新的资源，就直接返回p.New的值</blockquote><p>上面提到的Put方法，作用是将对象加入到临时对象池中。</p><p><code>p := ppFree.Get().(*pp)</code>下面的三个参数分别代表什么呢？</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bc%7Cc%7D+%5Ctext%7B%E5%8F%82%E6%95%B0%E5%90%8D%7D+%26+%5Ctext%7B%E7%94%A8%E9%80%94%7D+%5C%5C+%5Chline+p.panicking+%26+%E7%94%B1catchPanic%E8%AE%BE%E7%BD%AE%EF%BC%8C%E6%98%AF%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E5%9C%A8panic%E5%92%8Crecover%E4%B8%AD%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%5C%5C+%5Chline+p.erroring+%26+%E5%BD%93%E6%89%93%E5%8D%B0%E9%94%99%E8%AF%AF%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%B2%E6%AD%A2%E8%B0%83%E7%94%A8handleMethods%5C%5C+%5Chline+p.wrapErrs+%26+%E5%BD%93%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%85%E5%90%AB%E4%BA%86%E5%8A%A8%E8%AF%8D%E6%97%B6%E7%9A%84%E8%AE%BE%E7%BD%AE+%5C%5C+%5Chline+fmt.init+%26+%E5%88%9D%E5%A7%8B%E5%8C%96+fmt+%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%BC%9A%E8%AE%BE%E7%BD%AE+buf+%E5%B9%B6%E4%B8%94%E6%B8%85%E7%A9%BA+fmtFlags+%E6%A0%87%E5%BF%97%E4%BD%8D+%5C%5C+%5Cend%7Barray%7D%5C%5C\" alt=\"\\begin{array}{c|c} \\text{参数名} &amp; \\text{用途} \\\\ \\hline p.panicking &amp; 由catchPanic设置，是为了避免在panic和recover中无限循环\\\\ \\hline p.erroring &amp; 当打印错误的标识符的时候，防止调用handleMethods\\\\ \\hline p.wrapErrs &amp; 当格式字符串包含了动词时的设置 \\\\ \\hline fmt.init &amp; 初始化 fmt 配置，会设置 buf 并且清空 fmtFlags 标志位 \\\\ \\end{array}\\\\\" eeimg=\"1\"/> </p><p>然后就返回这个新建的printer给调用方。</p><h2>doPrintln</h2><p>接下来是doPrintln函数。</p><p>doPrintln就跟doPrint类似，但是doPrintln总是会在参数之间添加一个空格，并且在最后一个参数后面添加换行符。以下是两种输出方式的对比。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;word&#34;</span><span class=\"p\">)</span> <span class=\"c1\">// test hello word\n</span><span class=\"c1\"></span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Print</span><span class=\"p\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;word&#34;</span><span class=\"p\">)</span>   <span class=\"o\">//</span> <span class=\"nx\">testhelloword</span><span class=\"o\">%</span></code></pre></div><p>看了样例，我们再具体看一下doPrintln的具体实现。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"o\">*</span><span class=\"nx\">pp</span><span class=\"p\">)</span> <span class=\"nf\">doPrintln</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"p\">[]</span><span class=\"kd\">interface</span><span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"nx\">argNum</span><span class=\"p\">,</span> <span class=\"nx\">arg</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">a</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">argNum</span> <span class=\"p\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span><span class=\"p\">.</span><span class=\"nf\">writeByte</span><span class=\"p\">(</span><span class=\"sc\">&#39; &#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">printArg</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"sc\">&#39;v&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span><span class=\"p\">.</span><span class=\"nf\">writeByte</span><span class=\"p\">(</span><span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p>这个函数的思路很清晰。遍历所有传入的需要print的参数，在除了第一个 参数以外的所有参数的前面加上一个空格，写入buffer中。然后调用printArg函数，再将换行符写入buffer中。</p><p>writeByte的实现很简单，使用了append函数，将传入的参数，append到buffer中。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">b</span> <span class=\"o\">*</span><span class=\"nx\">buffer</span><span class=\"p\">)</span> <span class=\"nf\">writeByte</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"kt\">byte</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"nx\">b</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><h2>printArg</h2><p>从上可以看出，调用printArg函数的时候，传入了两个参数。</p><p>第一个是需要打印的参数，第二个则是verb，在doPrintln中我们传的是单引号的v。那么在go中的单引号和双引号有什么区别呢？下面我们通过一个表格来对比一下在不同的语言中，单引号和双引号的区别。</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bc%7Cc%7D+%5Ctext%7B%E8%AF%AD%E8%A8%80%7D+%26+%5Ctext%7B%E5%8D%95%E5%BC%95%E5%8F%B7%7D+%26+%5Ctext%7B%E5%8F%8C%E5%BC%95%E5%8F%B7%7D+%5C%5C+%5Chline+Java+%26+char+%26+String+%5C%5C+%5Chline+JavaScript+%26+string+%26+string+%5C%5C+%5Chline+go+%26+rune+%26+String+%5C%5C+%5Chline+Python+%26+string+%26+string+%5C%5C+%5Cend%7Barray%7D%5C%5C\" alt=\"\\begin{array}{c|c} \\text{语言} &amp; \\text{单引号} &amp; \\text{双引号} \\\\ \\hline Java &amp; char &amp; String \\\\ \\hline JavaScript &amp; string &amp; string \\\\ \\hline go &amp; rune &amp; String \\\\ \\hline Python &amp; string &amp; string \\\\ \\end{array}\\\\\" eeimg=\"1\"/> </p><h3>rune</h3><p>那么rune到底是什么类型呢？rune是int32的别名，在任何方面等于int32相同，用于区分字符串和整形。其实现很简单，<code>type rune = int32</code>，rune常用来表示Unicode中的码点，其例子如下所示。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">str</span> <span class=\"o\">:=</span> <span class=\"s\">&#34;hello 你好&#34;</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">([]</span><span class=\"nb\">rune</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"p\">[</span><span class=\"mi\">104</span> <span class=\"mi\">101</span> <span class=\"mi\">108</span> <span class=\"mi\">108</span> <span class=\"mi\">111</span> <span class=\"mi\">32</span> <span class=\"mi\">20320</span> <span class=\"mi\">22909</span><span class=\"p\">]</span></code></pre></div><p>说到了rune就不得不说一下byte。同样，我们通过例子来看一下byte和rune的区别。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">str</span> <span class=\"o\">:=</span> <span class=\"s\">&#34;hello 你好&#34;</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">([]</span><span class=\"nb\">rune</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span> <span class=\"c1\">// [104 101 108 108 111 32 20320 22909]\n</span><span class=\"c1\"></span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"p\">[</span><span class=\"mi\">104</span> <span class=\"mi\">101</span> <span class=\"mi\">108</span> <span class=\"mi\">108</span> <span class=\"mi\">111</span> <span class=\"mi\">32</span> <span class=\"mi\">228</span> <span class=\"mi\">189</span> <span class=\"mi\">160</span> <span class=\"mi\">229</span> <span class=\"mi\">165</span> <span class=\"mi\">189</span><span class=\"p\">]</span></code></pre></div><p>没错，区别就在类型上。rune是<code>type rune = int32</code>，四个字节；而byte是<code>type byte = uint8</code>，一个字节。实际上，golang中的字符串的底层是靠byte数组实现的。如果我们处理的数据中出现了中文字符，都可用rune来处理。例如。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">str</span> <span class=\"o\">:=</span> <span class=\"s\">&#34;hello 你好&#34;</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span>         <span class=\"c1\">// 12\n</span><span class=\"c1\"></span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">([]</span><span class=\"nb\">rune</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)))</span> <span class=\"o\">//</span> <span class=\"mi\">8</span></code></pre></div><h3>printArg具体实现</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"o\">*</span><span class=\"nx\">pp</span><span class=\"p\">)</span> <span class=\"nf\">printArg</span><span class=\"p\">(</span><span class=\"nx\">arg</span> <span class=\"kd\">interface</span><span class=\"p\">{},</span> <span class=\"nx\">verb</span> <span class=\"kt\">rune</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">arg</span> <span class=\"p\">=</span> <span class=\"nx\">arg</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">=</span> <span class=\"nx\">reflect</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">{}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">arg</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"nx\">verb</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"sc\">&#39;T&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;v&#39;</span><span class=\"p\">:</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">padString</span><span class=\"p\">(</span><span class=\"nx\">nilAngleString</span><span class=\"p\">)</span>\n        <span class=\"k\">default</span><span class=\"p\">:</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">badVerb</span><span class=\"p\">(</span><span class=\"nx\">verb</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">switch</span> <span class=\"nx\">verb</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;T&#39;</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtS</span><span class=\"p\">(</span><span class=\"nx\">reflect</span><span class=\"p\">.</span><span class=\"nf\">TypeOf</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">).</span><span class=\"nf\">String</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;p&#39;</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtPointer</span><span class=\"p\">(</span><span class=\"nx\">reflect</span><span class=\"p\">.</span><span class=\"nf\">ValueOf</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">),</span> <span class=\"sc\">&#39;p&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n  <span class=\"k\">switch</span> <span class=\"nx\">f</span> <span class=\"o\">:=</span> <span class=\"nx\">arg</span><span class=\"p\">.(</span><span class=\"kd\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"kt\">bool</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtBool</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">float32</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtFloat</span><span class=\"p\">(</span><span class=\"nb\">float64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">float64</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtFloat</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">complex64</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtComplex</span><span class=\"p\">(</span><span class=\"nb\">complex128</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">complex128</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtComplex</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">int</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">signed</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">int8</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">signed</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">int16</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">signed</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">int32</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">signed</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">int64</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">signed</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">uint</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">unsigned</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">uint8</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">unsigned</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">uint16</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">unsigned</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">uint32</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">unsigned</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">uint64</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">unsigned</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">uintptr</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtInteger</span><span class=\"p\">(</span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">unsigned</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"kt\">string</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtString</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">fmtBytes</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">,</span> <span class=\"s\">&#34;[]byte&#34;</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"nx\">reflect</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nf\">IsValid</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nf\">CanInterface</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">arg</span> <span class=\"p\">=</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nf\">Interface</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">handleMethods</span><span class=\"p\">(</span><span class=\"nx\">verb</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">printValue</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">verb</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">handleMethods</span><span class=\"p\">(</span><span class=\"nx\">verb</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">printValue</span><span class=\"p\">(</span><span class=\"nx\">reflect</span><span class=\"p\">.</span><span class=\"nf\">ValueOf</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">),</span> <span class=\"nx\">verb</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>可以看到有一部分类型是通过反射获取到的，而大部分都是switch case出来的，并不是所有的类型都用的反射，相对的提高了效率。</p><p>例如，我们传入的是字符串。则接下来就会走到fmtString。</p><h3>fmtString</h3><p>从printArg中带来的参数有需要打印的字符串，以及rune类型的&#39;v&#39;。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"o\">*</span><span class=\"nx\">pp</span><span class=\"p\">)</span> <span class=\"nf\">fmtString</span><span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">verb</span> <span class=\"kt\">rune</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"nx\">verb</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;v&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">sharpV</span> <span class=\"p\">{</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtQ</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtS</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;s&#39;</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtS</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;x&#39;</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtSx</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">,</span> <span class=\"nx\">ldigits</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;X&#39;</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtSx</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">,</span> <span class=\"nx\">udigits</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"sc\">&#39;q&#39;</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">fmtQ</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n        <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nf\">badVerb</span><span class=\"p\">(</span><span class=\"nx\">verb</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p><code>p.fmt.sharpV</code>在过程中没有被重新赋值，初始化的零值为false。所以下一步会进入fmtS。</p><h3>fmtS</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">f</span> <span class=\"o\">*</span><span class=\"nx\">fmt</span><span class=\"p\">)</span> <span class=\"nf\">fmtS</span><span class=\"p\">(</span><span class=\"nx\">s</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">s</span> <span class=\"p\">=</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nf\">truncateString</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span>\n    <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nf\">padString</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p>如果存在设定的精度，则truncate将字符串s截断为指定的精度。多用于需要输出数字时。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">f</span> <span class=\"o\">*</span><span class=\"nx\">fmt</span><span class=\"p\">)</span> <span class=\"nf\">truncateString</span><span class=\"p\">(</span><span class=\"nx\">s</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">precPresent</span> <span class=\"p\">{</span>\n        <span class=\"nx\">n</span> <span class=\"o\">:=</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">prec</span>\n        <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">s</span> <span class=\"p\">{</span>\n            <span class=\"nx\">n</span><span class=\"o\">--</span>\n            <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"p\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nx\">s</span><span class=\"p\">[:</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">s</span>\n<span class=\"p\">}</span></code></pre></div><p>而padString则将字符串s写入buffer中，最后调用io的包输出就好了。</p><h2>free</h2><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"o\">*</span><span class=\"nx\">pp</span><span class=\"p\">)</span> <span class=\"nf\">free</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nb\">cap</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"mi\">64</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">10</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span> <span class=\"p\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">buf</span><span class=\"p\">[:</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">arg</span> <span class=\"p\">=</span> <span class=\"kc\">nil</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">=</span> <span class=\"nx\">reflect</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">{}</span>\n    <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">wrappedErr</span> <span class=\"p\">=</span> <span class=\"kc\">nil</span>\n    <span class=\"nx\">ppFree</span><span class=\"p\">.</span><span class=\"nf\">Put</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p>在前面讲过，要打印的时候，需要从临时对象池中获取一个对象，避免重复创建。而在此处，用完之后就需要通过Put函数将其放回临时对象池中，已备下次调用。</p><p>当然，并不是无限的将用过的变量放入对象池。如果缓冲区的大小超过了设定的阙值也就是65535，就无法再执行后续的操作了。</p><h2>写在最后</h2><p>看源码是个技术活，其实这篇博客也算是一种尝试。最近看到一个图很有意思，跟大家分享一下。这张图讲的是你以为的看源码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c78c048d8e97c7d8a6c076fe768097f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic1.zhimg.com/v2-c78c048d8e97c7d8a6c076fe768097f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic1.zhimg.com/v2-c78c048d8e97c7d8a6c076fe768097f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c78c048d8e97c7d8a6c076fe768097f4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后是实际上的你看源码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-74d12c42ec24426c82326e6faa703da5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-74d12c42ec24426c82326e6faa703da5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-74d12c42ec24426c82326e6faa703da5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-74d12c42ec24426c82326e6faa703da5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这张图特别形象。当你打算看一个开源项目的源码的时候，往往像一个饿了很多天没吃饭的人看到一桌美食一样，恨不得几分钟就把桌上的东西全部吃完，最后撑的半死，全部吐了出来；又或许像上面两张图里的水一样，接的太快，最后杯子里剩的反而越少。</p><p>相反，如果我们慢慢的品味美食，慢慢的去接水，肚子里的食物和水杯的水就一定会慢慢增加，直到适量为止。</p><p>我认为看源码，不应该一口吃成胖子，细水长流。从某一个小功能开始，慢慢的展开，这样才能了解到更多的东西。</p><p> 相关：</p><ul><li>微信公众号：   SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu） </li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ee629d370c6ef5e4e4349e513769d833_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Go 语言", 
                    "tagLink": "https://api.zhihu.com/topics/19625982"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }, 
                {
                    "tag": "源码阅读", 
                    "tagLink": "https://api.zhihu.com/topics/19593602"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "If Get would otherwise return nil and p.New is non-nil, Get returns the result of calling p.New. 翻译错了，这句话的意思是说如果在Get函数的函数体内发现空闲资源池中不存在可以分配的资源，导致将要返回nil时，如果另外发现p.New函数可以申请到新的资源，即返回的指针不是nil，就直接返回这个指针，而不是返回nil。", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "LunhaoHu", 
                            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
                            "content": "<p>谢谢指正，修改一波</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "JAAdoo", 
                    "userLink": "https://www.zhihu.com/people/faf9c35aa3a4d1a9dbca92d5d273dd8a", 
                    "content": "区别 rune 类型和 byte 类型时将二者的字节数写反了。rune 应是四字节，byte 应是一字节。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "LunhaoHu", 
                            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
                            "content": "<p>谢谢指正，笔误已经更正</p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-878d130f7db8314bf8eac78484d68fb3.gif\" data-width=\"\" data-height=\"\">[机智]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "JAAdoo"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68843461", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 10, 
            "title": "小强开饭店-从单体应用到微服务", 
            "content": "<p>本篇博客通过小强开饭店的通俗易懂的故事，带你了解后端服务是如果从单体应用演变到微服务的。如果有说的不对的地方，欢迎各位大佬强势怼。</p><h2>小强开饭店</h2><p>有一天，小强为了早日奔赴小康生活，打算开一个饭店来帮他快速的实现这个目标。</p><h2>饭店开业了</h2><p>于是他盘下了一个店面，一顿装修之后，雇了一个厨师，便开业了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-576052bbd99d984aa220202ddf8885c3_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-576052bbd99d984aa220202ddf8885c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-576052bbd99d984aa220202ddf8885c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-576052bbd99d984aa220202ddf8885c3_b.jpg\"/><figcaption>小强开始奔赴小康</figcaption></figure><h2>饭店生意变好了</h2><p>刚刚开业那段时间还好，店里的人虽然多，但是都还能应付的过来。</p><p>小强请的厨师手艺很好，再加上小强经营得当，宣传的也不错，慢慢的店里的生意越来越好。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2ca3ec1db6b17917a95cd58637b63f44_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic1.zhimg.com/v2-2ca3ec1db6b17917a95cd58637b63f44_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic1.zhimg.com/v2-2ca3ec1db6b17917a95cd58637b63f44_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2ca3ec1db6b17917a95cd58637b63f44_b.jpg\"/><figcaption>生意变得越来越好</figcaption></figure><p>慢慢的，顾客越来越多。很多时候厨师都忙不过来，大家只有排队在外面等着。渐渐的有些顾客变得十分不耐烦，等不下去了就走了，然后给了这家店差评。这种情况愈演愈烈，小强看到这不是个办法啊，得做点什么。</p><h2>招聘厨师</h2><p>小强下了血本，又另外聘请了几位厨艺很好的厨师。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6d4ab5ce5adcb2e8d5fb3f89bb5cb4b7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-6d4ab5ce5adcb2e8d5fb3f89bb5cb4b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-6d4ab5ce5adcb2e8d5fb3f89bb5cb4b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6d4ab5ce5adcb2e8d5fb3f89bb5cb4b7_b.jpg\"/><figcaption>小强下血本雇厨师</figcaption></figure><p>有了这些厨师的加盟，虽然客人很多，饭店的经营也还是能够勉强的应付的来。口碑也慢慢的由差变好。随着口碑的变好，慕名而来的也随之越来越多。</p><h2>生意火爆</h2><p>随着顾客越来越多，即使厨房的厨师已经招聘满了，都还是应付不过来。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9ddbe5afc8dc34cff75ddda250bedb9c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic1.zhimg.com/v2-9ddbe5afc8dc34cff75ddda250bedb9c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic1.zhimg.com/v2-9ddbe5afc8dc34cff75ddda250bedb9c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9ddbe5afc8dc34cff75ddda250bedb9c_b.jpg\"/><figcaption>生意变的巨好</figcaption></figure><p>于是厨师也变成了暴躁的厨师。有的时候因为太忙了还罢工不干了。还得小强去苦口婆心的劝。小强心想这也不是个办法，再这么下去口碑又得下去。于是小强摇身一变，变成了强老板。</p><h2>强老板开了分店</h2><p>强老板拿着开饭店赚的钱，在城里的很多地方开了分店，十分的膨胀。这样一来，客人不用大老远的跑到那一家店去了，可以选择离自己近的店。很快，原来的那家生意也渐渐的恢复正常，各个分店的业绩也有所提高。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d3f0411cce7d771f32447919930789a2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-d3f0411cce7d771f32447919930789a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-d3f0411cce7d771f32447919930789a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d3f0411cce7d771f32447919930789a2_b.jpg\"/><figcaption>强老板开了分店</figcaption></figure><p>但是随着强老板的强势宣传，以及顾客之间的自传播，这个参考被越来越多的人知道了。但是由于顾客分散，每家店的火爆程度都不同。有的店甚至陷入了跟最开始的店一样的境地，大量的顾客排队。但是有的店的生意却又十分冷清。</p><p>强老板心想，这肯定不行啊，这样下去早晚得血亏。于是强老板摇身一变，变成了强总。</p><h2>强总开了个顾客中心</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9ef7f7211a19edddc2f070974034738a_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-9ef7f7211a19edddc2f070974034738a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-9ef7f7211a19edddc2f070974034738a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9ef7f7211a19edddc2f070974034738a_b.jpg\"/><figcaption>强总开了个顾客中心</figcaption></figure><p>所有想去餐馆用餐的顾客都来这里，由强老板统一安排的大巴再送至各个分店。每辆车轮流的送至每一家分店。这样一来，就不存在某一家分店生意十分火爆而另外的店生意惨淡的情况了。</p><h2>强总已达成奔赴小康的目</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3f0538ac955161fa5e7f6602c9b6d3ae_b.jpg\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-3f0538ac955161fa5e7f6602c9b6d3ae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic3.zhimg.com/v2-3f0538ac955161fa5e7f6602c9b6d3ae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3f0538ac955161fa5e7f6602c9b6d3ae_b.jpg\"/><figcaption>强总达成小目标</figcaption></figure><h2>读后感</h2><p>其实这个想法是很久以前不知道在哪儿看博客的时候，看到一位大佬的类比，确实是忘了。而最近刚好在准备分享，所以就打算详细的以图文和故事的方式来让没有了解过这方面的人快速的了解一下。</p><p>其实我也纠结过要不要将里面类比概念的解释穿插到故事里，但是后面想了一下，这样应该会干扰到大家对故事本身的理解，从而达不到通俗易懂的效果。所以我将解释单独放在了最后面。</p><h2>单个饭店</h2><p>最开始的单个饭店其实就是一个App或者一个网站，来给用户提供服务。可以理解为前端，或者客户端。</p><h2>单个饭店的厨师</h2><p>而单个饭店中的厨师，其实就是后端，提供数据，提供服务。一个厨师就对应着一个后端服务的实例。</p><p>随着App的访问量越来越大，最初的单体应用已经无法扛住这么大的压力了。导致其他的用户进入系统时，系统无法正常的服务。就跟我们现在打开一个网站一样，凡是超过2-3秒没有反应就直接宣告它的死刑了，直接退出-卸载二连。</p><h2>单个饭店的多个厨师</h2><p>多个厨师则是相应的后端服务启动了多个实例，每个实例都是完全一样的，只不过是运行在不同的机器上或者不同的端口上。</p><p>每次的请求由这些实例来均摊，这样也的确能够暂时解决访问量大的问题。但是维护起来十分的麻烦，部署的流程也很繁琐。每次部署你得更新所有的实例，万一数量多，又在不同的机器上，很有可能因为操作失误引发线上的事故。而且有可能让老版本的服务兼容新版的前端或者客户端，造成不必要的BUG。</p><p>再退一万步，就算所有的实例都在同一个服务器上，万一真的访问量到了一定的量级，你得维护多少个实例啊。人工成本巨大。而且一不小心，一觉起来，本身没有问题的服务，因为一晚上发生了事件引发了热点，导致你的应用访问量剧增，增到超过你的所有实例能够承受的极限，服务挂了。</p><p>再退一万万步，就算你自己维护没有烦死，前端的兄弟可能早就收拾你了。你没有做请求分发的话，所有的服务器地址得由前端去维护。</p><h2>分店</h2><p>这里的分店指微服务中的一个服务的多个实例。与之前人工维护的多个实例不同，这个是由工具帮我们维护。</p><p>这里我拿Docker Swarm举个例子。在Portainer中，你新建了一个服务之后可以选择设置Replicas，也就是实例的数量，当然默认是一个。你可以起10个，20个，但是这里得考虑到你的服务是否支持这样做。如果你的服务不是无状态应用，就很难做到可以自动的做横向扩展。</p><h2>分店的生意火爆</h2><p>其实也是一样的，即使有很多个实例，你如果不能控制请求打到哪个服务上的话，某些实例承受的压力大了一样的会挂。</p><h2>强总的顾客中心</h2><p>顾客中心大家可以理解为网关。更具体点可以理解为Zuul。</p><p>你的服务有了网关之后，所有的请求都从网关走。根据以及配置的路由，网关可以判断到你想具体到哪个服务去。</p><p>然后就会从自己的服务集群中找到对应的服务，获取到所有的服务实例的服务器IP以及端口。前面说到有可能请求会集中到某几个实例上。而我们可以使用工具来解决这个问题。例如，使用Spring Cloud的核心组件Ribbon。</p><p>这个组件的作用是做负载均衡，它可以使所有到某个服务的请求，平均的分发到该服务的每个实例上去。从而避免某几个服务的请求超过其能承受的阙值。当然，Ribbon需要和Spring Cloud的其他核心组件相互协作的。</p><h2>另外一个版本的故事</h2><p>小强搞了个新闻App，用Spring Boot搭了一个后端，找人用React Native写了个App，就这样上线了。因为其内容和推广都还不错，所以受到了用户的喜爱。</p><p>但是随着访问量越来越大，服务器渐渐扛不住压力。有的用户进App之后甚至要5-6秒才有反应，而且慢的出奇。于是小强开始给服务尽量的无状态化，然后在一个服务器上启动了几个实例。</p><p>一段时间之后，访问量又增大了。小强只好硬着头皮，继续加实例数量，你强任你强，加实例我在行。</p><p>有一天，小强一觉起来，发现服务炸了...啊不是，是挂了。因为发生了一些事情引发了巨大的社会舆论，App的访问量剧增。导致新加的实例也没能扛住。</p><p>就这样，小强老实的开始了重构。使用Spring Cloud搭建了一个微服务集群，把服务拆分之后，给每个服务启动了几个实例。同时使用Eureka和Feign来进行服务之间的通信，使用Ribbon来做负载均衡。</p><p>就这样，这个App暂时稳定了下来。不过还有很多事情可以继续去做。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p> 参考：</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5be13b83f265da6116393fc7%23heading-5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拜托！面试请不要再问我Spring Cloud底层原理</a></li></ul><p> 往期文章：</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/devtools/useful-chrome-extension/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">什么？你竟然还没有用这几个chrome插件？</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/java/newSprintBootStarter/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手把手教你从零开始搭建SpringBoot后端项目框架</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/go/go-web-backend-starter/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">用go-module作为包管理器搭建go的web服务器</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/frontend/gettingStartOfWebAssembly/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WebAssembly完全入门——了解wasm的前世今身</a></li></ul><p> 相关：</p><ul><li>个人网站：       <a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Lunhao Hu</a></li><li>微信公众号：   SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu） </li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4c128ddad2505b27cf636627cac66c63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"344\" data-rawheight=\"344\" class=\"content_image\" width=\"344\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;344&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"344\" data-rawheight=\"344\" class=\"content_image lazy\" width=\"344\" data-actualsrc=\"https://pic4.zhimg.com/v2-4c128ddad2505b27cf636627cac66c63_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }, 
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68580359", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 28, 
            "title": "用go-module作为包管理器搭建go的web服务器", 
            "content": "<p></p><p>本篇博客主要介绍了如何从零开始，使用Go Module作为依赖管理，基于Gin来一步一步搭建Go的Web服务器。并使用Endless来使服务器平滑重启，使用Swagger来自动生成Api文档。</p><p>源码在此处：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/go-backend-starter\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">项目源码</a></p><p>大家可以先查看源码，然后再根据本篇文章，来了解搭建过程中服务器的一些细节。</p><h2>搭建环境</h2><p>以下所有的步骤都基于MacOS。</p><h3>安装go</h3><p>在这里推荐使用homebrew进行安装。当然你也可以使用源码安装。</p><div class=\"highlight\"><pre><code class=\"language-bash\">brew install go</code></pre></div><p>跑完命令之后，在命令行输入<code>go</code>。如果在命令行看到如下输出，则代表安装成功。</p><div class=\"highlight\"><pre><code class=\"language-bash\">Go is a tool <span class=\"k\">for</span> managing Go <span class=\"nb\">source</span> code.\nUsage:\n    go &lt;command&gt; <span class=\"o\">[</span>arguments<span class=\"o\">]</span>\nThe commands are:\n...\n...</code></pre></div><p>需要注意的是，go的版本需要在<code>1.11</code>之上，否则无法使用go module。以下是我的go的版本。</p><div class=\"highlight\"><pre><code class=\"language-bash\">go version\n<span class=\"c1\"># go version go1.12.5 darwin/amd64</span></code></pre></div><h3>IDE</h3><p>推荐使用<a href=\"https://link.zhihu.com/?target=https%3A//www.jetbrains.com/go/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GoLand</a></p><h3>配置GOPATH</h3><p>打开GoLand，在GoLand的设置中找到Global GOPATH，将其设置为<code>$HOME/go</code>。<code>$HOME</code>目录就是你的电脑的用户目录，如果该目录下没有<code>go</code>目录的话，也不需要新建，当我们在后面的操作中初始化模块的时候，会自动的在用户目录下新建go目录。</p><h3>启用GO Module</h3><p>同样，在GoLand中设置中找到Go Modules (vgo)。勾选Enable Go Modules (vgo) integration前的选择框来启用Go Moudle</p><h2>搭建项目框架</h2><h3>新建目录</h3><p>在你常用的工作区新建一个目录，如果你有github的项目，可以直接clone下来。</p><h3>初始化go module</h3><div class=\"highlight\"><pre><code class=\"language-bash\">go mod init <span class=\"nv\">$MODULE_NAME</span></code></pre></div><p>在刚刚新建的项目的根目录下，使用上述命令来初始化go module。该命令会在项目根目录下新建一个go.mod的文件。</p><p>如果你的项目是从github上clone下来的，<code>$MODULE_NAME</code>这个参数就不需要了。它会默认为<code>github.com/$GITHUB_USER_NAME/$PROJECT_NAME</code>。</p><p>例如本项目就是<code>github.com/detectiveHLH/go-backend-starter</code>；如果是在本地新建的项目，则必须要加上最后一个参数。否则就会遇到如下的错误。</p><div class=\"highlight\"><pre><code class=\"language-bash\">go: cannot determine module path <span class=\"k\">for</span> <span class=\"nb\">source</span> directory /Users/hulunhao/Projects/go/test/src <span class=\"o\">(</span>outside GOPATH, no import comments<span class=\"o\">)</span></code></pre></div><p>初始化完成之后的<code>go.mod</code>文件内容如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">module</span> <span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">detectiveHLH</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">backend</span><span class=\"o\">-</span><span class=\"nx\">starter</span>\n\n<span class=\"k\">go</span> <span class=\"mf\">1.12</span></code></pre></div><h3>新建main.go</h3><p>在项目的根目录下新建main.go。代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;fmt&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;This works&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><h3>运行main.go</h3><p>在根目录下使用<code>go run main.go</code>，如果看到命令行中输出<code>This works</code>则代表基础的框架已经搭建完成。接下来我们开始将Gin引入框架。</p><h2>引入Gin</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//gin-gonic.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Gin</a>是一个用Go实现的HTTP Web框架，我们使用Gin来作为starter的Base Framework。</p><h3>安装Gin</h3><p>直接通过go get命令来安装</p><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/gin-gonic/gin</code></pre></div><p>安装成功之后，我们可以看到go.mod文件中的内容发生了变化。</p><p>并且，我们在设定的GOPATH下，并没有看到刚刚安装的依赖。实际上，依赖安装到了$GOPATH/pkg/mod下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">module</span> <span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">detectiveHLH</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">backend</span><span class=\"o\">-</span><span class=\"nx\">starter</span>\n\n<span class=\"k\">go</span> <span class=\"mf\">1.12</span>\n\n<span class=\"nx\">require</span> <span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">gin</span><span class=\"o\">-</span><span class=\"nx\">gonic</span><span class=\"o\">/</span><span class=\"nx\">gin</span> <span class=\"nx\">v1</span><span class=\"mf\">.4.0</span> <span class=\"o\">//</span> <span class=\"nx\">indirect</span></code></pre></div><p>同时，也生成了一个go.sum文件。内容如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">davecgh</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">spew</span> <span class=\"nx\">v1</span><span class=\"mf\">.1.0</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">J7Y8YcW2NihsgmVo</span><span class=\"o\">/</span><span class=\"nx\">mv3lAwl</span><span class=\"o\">/</span><span class=\"nx\">skON4iLHjSsI</span><span class=\"o\">+</span><span class=\"nx\">c5H38</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">gin</span><span class=\"o\">-</span><span class=\"nx\">contrib</span><span class=\"o\">/</span><span class=\"nx\">sse</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20190301062529</span><span class=\"o\">-</span><span class=\"mi\">5545</span><span class=\"nx\">eab6dad3</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">t8FVkw33L</span><span class=\"o\">+</span><span class=\"nx\">wilf2QiWkw0UV77qRpcH</span><span class=\"o\">/</span><span class=\"nx\">JHPKGpKa2E8g</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">gin</span><span class=\"o\">-</span><span class=\"nx\">contrib</span><span class=\"o\">/</span><span class=\"nx\">sse</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20190301062529</span><span class=\"o\">-</span><span class=\"mi\">5545</span><span class=\"nx\">eab6dad3</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">VJ0WA2NBN22VlZ2dKZQPAPnyWw5XTlK1KymzLKsr59s</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">gin</span><span class=\"o\">-</span><span class=\"nx\">gonic</span><span class=\"o\">/</span><span class=\"nx\">gin</span> <span class=\"nx\">v1</span><span class=\"mf\">.4.0</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"nx\">tMoCCfM7ppqsR0ptz</span><span class=\"o\">/</span><span class=\"nx\">wi1impNpT7</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"nx\">wQtMZ8lr1mCQ</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">gin</span><span class=\"o\">-</span><span class=\"nx\">gonic</span><span class=\"o\">/</span><span class=\"nx\">gin</span> <span class=\"nx\">v1</span><span class=\"mf\">.4.0</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">OW2EZn3DO8Ln9oIKOvM</span><span class=\"o\">++</span><span class=\"nx\">LBO</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"nx\">UPHJJDH72</span><span class=\"o\">/</span><span class=\"nx\">q</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"nx\">rZdM</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">golang</span><span class=\"o\">/</span><span class=\"nx\">protobuf</span> <span class=\"nx\">v1</span><span class=\"mf\">.3.1</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">YF8</span><span class=\"o\">+</span><span class=\"nx\">flBXS5eO826T4nzqPrxfhQThhXl0YzfuUPu4SBg</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">golang</span><span class=\"o\">/</span><span class=\"nx\">protobuf</span> <span class=\"nx\">v1</span><span class=\"mf\">.3.1</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"nx\">lQm79b</span><span class=\"o\">+</span><span class=\"nx\">lXiMfvg</span><span class=\"o\">/</span><span class=\"nx\">cZm0SGofjICqVBUtrP5yJMmIC1U</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">json</span><span class=\"o\">-</span><span class=\"nx\">iterator</span><span class=\"o\">/</span><span class=\"k\">go</span> <span class=\"nx\">v1</span><span class=\"mf\">.1.6</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"o\">+</span><span class=\"nx\">SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">mattn</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">isatty</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.7</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">UvyT9uN</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"nx\">r7yLEYSlJsbQGdsaB</span><span class=\"o\">/</span><span class=\"nx\">a0DlgWP3pql6iwOc</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">mattn</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">isatty</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.7</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">Iq45c</span><span class=\"o\">/</span><span class=\"nx\">XA43vh69</span><span class=\"o\">/</span><span class=\"nx\">j3iqttzPXn0bhXyGjM0Hdxcsrc5s</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">modern</span><span class=\"o\">-</span><span class=\"k\">go</span><span class=\"o\">/</span><span class=\"nx\">concurrent</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20180306012644</span><span class=\"o\">-</span><span class=\"nx\">bacd9c7ef1dd</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"nx\">dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">modern</span><span class=\"o\">-</span><span class=\"k\">go</span><span class=\"o\">/</span><span class=\"nx\">reflect2</span> <span class=\"nx\">v1</span><span class=\"mf\">.0.1</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">pmezard</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">difflib</span> <span class=\"nx\">v1</span><span class=\"mf\">.0.0</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">stretchr</span><span class=\"o\">/</span><span class=\"nx\">objx</span> <span class=\"nx\">v0</span><span class=\"mf\">.1.0</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">HFkY916IF</span><span class=\"o\">+</span><span class=\"nx\">rwdDfMAkV7OtwuqBVzrE8GR6GFx</span><span class=\"o\">+</span><span class=\"nx\">wExME</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">stretchr</span><span class=\"o\">/</span><span class=\"nx\">testify</span> <span class=\"nx\">v1</span><span class=\"mf\">.3.0</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn</span><span class=\"o\">+</span><span class=\"mi\">9</span><span class=\"nx\">EI</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">ugorji</span><span class=\"o\">/</span><span class=\"k\">go</span> <span class=\"nx\">v1</span><span class=\"mf\">.1.4</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">j4s</span><span class=\"o\">+</span><span class=\"nx\">tAvLfL3bZyefP2SEWmhBzmuIlH</span><span class=\"o\">/</span><span class=\"nx\">eqNuPdFPgngw</span><span class=\"p\">=</span>\n<span class=\"nx\">github</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"o\">/</span><span class=\"nx\">ugorji</span><span class=\"o\">/</span><span class=\"k\">go</span> <span class=\"nx\">v1</span><span class=\"mf\">.1.4</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">uQMGLiO92mf5W77hV</span><span class=\"o\">/</span><span class=\"nx\">PUCpI3pbzQx3CRekS0kk</span><span class=\"o\">+</span><span class=\"nx\">RGrc</span><span class=\"p\">=</span>\n<span class=\"nx\">golang</span><span class=\"p\">.</span><span class=\"nx\">org</span><span class=\"o\">/</span><span class=\"nx\">x</span><span class=\"o\">/</span><span class=\"nx\">crypto</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20190308221718</span><span class=\"o\">-</span><span class=\"nx\">c2843e01d9a2</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">djNgcEr1</span><span class=\"o\">/</span><span class=\"nx\">C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0</span><span class=\"o\">+</span><span class=\"nx\">w</span><span class=\"p\">=</span>\n<span class=\"nx\">golang</span><span class=\"p\">.</span><span class=\"nx\">org</span><span class=\"o\">/</span><span class=\"nx\">x</span><span class=\"o\">/</span><span class=\"nx\">net</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20190503192946</span><span class=\"o\">-</span><span class=\"nx\">f4e77d36d62c</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg</span><span class=\"p\">=</span>\n<span class=\"nx\">golang</span><span class=\"p\">.</span><span class=\"nx\">org</span><span class=\"o\">/</span><span class=\"nx\">x</span><span class=\"o\">/</span><span class=\"nx\">sys</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20190215142949</span><span class=\"o\">-</span><span class=\"nx\">d0b11bdaac8a</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">STP8DvDyc</span><span class=\"o\">/</span><span class=\"nx\">dI5b8T5hshtkjS</span><span class=\"o\">+</span><span class=\"nx\">E42TnysNCUPdjciGhY</span><span class=\"p\">=</span>\n<span class=\"nx\">golang</span><span class=\"p\">.</span><span class=\"nx\">org</span><span class=\"o\">/</span><span class=\"nx\">x</span><span class=\"o\">/</span><span class=\"nx\">sys</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20190222072716</span><span class=\"o\">-</span><span class=\"nx\">a9d3bda3a223</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">STP8DvDyc</span><span class=\"o\">/</span><span class=\"nx\">dI5b8T5hshtkjS</span><span class=\"o\">+</span><span class=\"nx\">E42TnysNCUPdjciGhY</span><span class=\"p\">=</span>\n<span class=\"nx\">golang</span><span class=\"p\">.</span><span class=\"nx\">org</span><span class=\"o\">/</span><span class=\"nx\">x</span><span class=\"o\">/</span><span class=\"nx\">text</span> <span class=\"nx\">v0</span><span class=\"mf\">.3.0</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">NqM8EUOU14njkJ3fqMW</span><span class=\"o\">+</span><span class=\"nx\">pc6Ldnwhi</span><span class=\"o\">/</span><span class=\"nx\">IjpwHt7yyuwOQ</span><span class=\"p\">=</span>\n<span class=\"nx\">gopkg</span><span class=\"p\">.</span><span class=\"nx\">in</span><span class=\"o\">/</span><span class=\"nx\">check</span><span class=\"p\">.</span><span class=\"nx\">v1</span> <span class=\"nx\">v0</span><span class=\"mf\">.0.0</span><span class=\"o\">-</span><span class=\"mi\">20161208181325</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"nx\">d25e280405</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">Co6ibVJAznAaIkqp8huTwlJQCZ016jof</span><span class=\"o\">/</span><span class=\"nx\">cbN4VW5Yz0</span><span class=\"p\">=</span>\n<span class=\"nx\">gopkg</span><span class=\"p\">.</span><span class=\"nx\">in</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">playground</span><span class=\"o\">/</span><span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">v1</span> <span class=\"nx\">v1</span><span class=\"mf\">.2.1</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"nx\">RXL0bg</span><span class=\"o\">/</span><span class=\"nx\">zibRAgZUYszZSwO</span><span class=\"o\">/</span><span class=\"nx\">z8Y</span><span class=\"o\">/</span><span class=\"nx\">a8bDuhia5mkpMnE</span><span class=\"p\">=</span>\n<span class=\"nx\">gopkg</span><span class=\"p\">.</span><span class=\"nx\">in</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">playground</span><span class=\"o\">/</span><span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">v8</span> <span class=\"nx\">v8</span><span class=\"mf\">.18.2</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">lFB4DoMU6B626w8ny76MV7VX6W2VHct2GVOI3xgiMrQ</span><span class=\"p\">=</span>\n<span class=\"nx\">gopkg</span><span class=\"p\">.</span><span class=\"nx\">in</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"o\">-</span><span class=\"nx\">playground</span><span class=\"o\">/</span><span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">v8</span> <span class=\"nx\">v8</span><span class=\"mf\">.18.2</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">RX2a</span><span class=\"o\">/</span><span class=\"mi\">7</span><span class=\"nx\">Ha8BgOhfk7j780h4</span><span class=\"o\">/</span><span class=\"nx\">u</span><span class=\"o\">/</span><span class=\"nx\">RRjR0eouCJSH80</span><span class=\"o\">/</span><span class=\"nx\">M2Y</span><span class=\"p\">=</span>\n<span class=\"nx\">gopkg</span><span class=\"p\">.</span><span class=\"nx\">in</span><span class=\"o\">/</span><span class=\"nx\">yaml</span><span class=\"p\">.</span><span class=\"nx\">v2</span> <span class=\"nx\">v2</span><span class=\"mf\">.2.2</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">ZCJp</span><span class=\"o\">+</span><span class=\"nx\">EgiOT7lHqUV2J862kp8Qj64Jo6az82</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"nx\">Td9dZw</span><span class=\"p\">=</span>\n<span class=\"nx\">gopkg</span><span class=\"p\">.</span><span class=\"nx\">in</span><span class=\"o\">/</span><span class=\"nx\">yaml</span><span class=\"p\">.</span><span class=\"nx\">v2</span> <span class=\"nx\">v2</span><span class=\"mf\">.2.2</span><span class=\"o\">/</span><span class=\"k\">go</span><span class=\"p\">.</span><span class=\"nx\">mod</span> <span class=\"nx\">h1</span><span class=\"p\">:</span><span class=\"nx\">hI93XBmqTisBFMUTm0b8Fm</span><span class=\"o\">+</span><span class=\"nx\">jr3Dg1NNxqwp</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"nx\">A1VGuI</span><span class=\"p\">=</span></code></pre></div><p>用过Node的人都知道，在安装完依赖之后会生成一个package-lock.json文件，来锁定依赖的版本。以防止后面重新安装依赖时，安装了新的版本，但是与现有的代码不兼容，这会带来一些不必要的BUG。</p><p>但是这个go.sum文件并不是这个作用。我们可以看到go.mod中只记录了一个Gin的依赖，而go.sum中则有非常多。是因为go.mod中只记录了最顶层，就是我们直接使用命令行安装的依赖。但是要知道，一个开源的包通常都会依赖很多其他的依赖包。</p><p>而go.sum就是记录所有顶层和其中间接依赖的依赖包的特定版本的文件，为每一个依赖版本生成一个特定的哈希值，从而在一个新环境启用该项目时，可以做到对项目依赖的100%还原。go.sum还会保留一些过去使用过的版本的信息。</p><p>在go module下，不需要vendor目录来保证可重现的构建，而是通过go.mod文件来对项目中的每一个依赖进行精确的版本管理。</p><p>如果之前的项目用的是vendor，那么重新用go.mod重新编写不太现实。我们可以使用<code>go mod vendor</code>命令将之前项目所有的依赖拷贝到vendor目录下，为了保证兼容性，在vendor目录下的依赖并不像go.mod一样。拷贝之后的目录不包含版本号。</p><p>而且通过上面安装gin可以看出，通常情况下，go.mod文件是不需要我们手动编辑的，当我们执行完命令之后，go.mod也会自动的更新相应的依赖和版本号。</p><p>下面我们来了解一下go mod的相关命令。</p><ul><li>init                          初始化go module</li><li>download                下载go.mod中的依赖到本地的缓存目录中（$GOPATH/pkg/mod）下</li><li>edit                           编辑go.mod，通过命令行手动升级和获取依赖</li><li>vendor                     将项目依赖拷贝到vendor下</li><li>tidy                           安装缺少的依赖，舍弃无用的依赖</li><li>graph                       打印模块依赖图</li><li>verify                        验证依赖是否正确</li></ul><p>还有一个命令值得提一下，<code>go list -m all</code>可以列出当前项目的构建列表。</p><h3>修改main.go</h3><p>修改main.go的代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;fmt&#34;</span>\n    <span class=\"s\">&#34;github.com/gin-gonic/gin&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;This works.&#34;</span><span class=\"p\">)</span>\n    <span class=\"nx\">r</span> <span class=\"o\">:=</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nf\">Default</span><span class=\"p\">()</span>\n    <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nf\">GET</span><span class=\"p\">(</span><span class=\"s\">&#34;/hello&#34;</span><span class=\"p\">,</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">JSON</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">H</span><span class=\"p\">{</span>\n            <span class=\"s\">&#34;success&#34;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;message&#34;</span><span class=\"p\">:</span> <span class=\"s\">&#34;This works&#34;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n    <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nf\">Run</span><span class=\"p\">()</span>\n<span class=\"p\">}</span></code></pre></div><p>上述的代码引入了路由，熟悉Node的应该可以看出，这个与koa-router的用法十分相似。</p><h3>启动服务器</h3><p>照着上述运行main.go的步骤，运行main.go。就可以在控制台看到如下的输出。</p><div class=\"highlight\"><pre><code class=\"language-bash\">This works.\n<span class=\"o\">[</span>GIN-debug<span class=\"o\">]</span> <span class=\"o\">[</span>WARNING<span class=\"o\">]</span> Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n<span class=\"o\">[</span>GIN-debug<span class=\"o\">]</span> <span class=\"o\">[</span>WARNING<span class=\"o\">]</span> Running in <span class=\"s2\">&#34;debug&#34;</span> mode. Switch to <span class=\"s2\">&#34;release&#34;</span> mode in production.\n - using env:   <span class=\"nb\">export</span> <span class=\"nv\">GIN_MODE</span><span class=\"o\">=</span>release\n - using code:  gin.SetMode<span class=\"o\">(</span>gin.ReleaseMode<span class=\"o\">)</span>\n\n<span class=\"o\">[</span>GIN-debug<span class=\"o\">]</span> GET    /hello                    --&gt; main.main.func1 <span class=\"o\">(</span><span class=\"m\">3</span> handlers<span class=\"o\">)</span>\n<span class=\"o\">[</span>GIN-debug<span class=\"o\">]</span> Environment variable PORT is undefined. Using port :8080 by default\n<span class=\"o\">[</span>GIN-debug<span class=\"o\">]</span> Listening and serving HTTP on :8080</code></pre></div><p>此时，服务器已经在8080端口启动了。然后在浏览器中访问http://localhost:8080/hello，就可以看到服务器的正常返回。同时，服务器这边也会打印相应的日志。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>GIN<span class=\"o\">]</span> <span class=\"m\">2019</span>/06/08 - <span class=\"m\">17</span>:41:34 <span class=\"p\">|</span> <span class=\"m\">200</span> <span class=\"p\">|</span>     <span class=\"m\">214</span>.213µs <span class=\"p\">|</span>             ::1 <span class=\"p\">|</span> GET      /hello</code></pre></div><h2>构建路由</h2><h3>新建路由模块</h3><p>在根目录下新建router目录。在router下，新建router.go文件，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">router</span>\n\n<span class=\"kn\">import</span> <span class=\"s\">&#34;github.com/gin-gonic/gin&#34;</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">InitRouter</span><span class=\"p\">()</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Engine</span> <span class=\"p\">{</span>\n    <span class=\"nx\">router</span> <span class=\"o\">:=</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nf\">New</span><span class=\"p\">()</span>\n    <span class=\"nx\">apiVersionOne</span> <span class=\"o\">:=</span> <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">Group</span><span class=\"p\">(</span><span class=\"s\">&#34;/api/v1/&#34;</span><span class=\"p\">)</span>\n    <span class=\"nx\">apiVersionOne</span><span class=\"p\">.</span><span class=\"nf\">GET</span><span class=\"p\">(</span><span class=\"s\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">JSON</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">H</span><span class=\"p\">{</span>\n            <span class=\"s\">&#34;success&#34;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;message&#34;</span><span class=\"p\">:</span> <span class=\"s\">&#34;This works&#34;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"nx\">router</span>\n<span class=\"p\">}</span></code></pre></div><p>在这个文件中，导出了一个InitRouter函数，该函数返回gin.Engine类型。该函数还定义了一个路由为/api/v1/hello的GET请求。</p><h3>在main函数中引入路由</h3><p>将main.go的代码改为如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;fmt&#34;</span>\n    <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/router&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">r</span> <span class=\"o\">:=</span> <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">InitRouter</span><span class=\"p\">()</span>\n    <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nf\">Run</span><span class=\"p\">()</span>\n<span class=\"p\">}</span></code></pre></div><p>然后运行main.go，启动之后，访问<a href=\"https://link.zhihu.com/?target=http%3A//localhost%3A8080/api/v1/hello\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">localhost:8080/api/v1/h</span><span class=\"invisible\">ello</span><span class=\"ellipsis\"></span></a>，可以看到，与之前访问/hello路由的结果是一样的。</p><p>到此为止，我们已经拥有了一个拥有简单功能的Web服务器。那么问题来了，这样的一个开放的服务器，只要知道了地址，你的服务器就知道暴露给其他人了。这样会带来一些安全隐患。所以我们需要给接口加上鉴权，只有通过认证的调用方，才有权限调用服务器接口。所以接下来，我们需要引入JWT。</p><h2>引入JWT鉴权</h2><p>使用go get命令安装jwt-go依赖。</p><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/dgrijalva/jwt-go</code></pre></div><h3>新建jwt鉴权文件</h3><p>在根目录下新建middleware/jwt目录，在jwt目录下新建jwt.go文件，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">jwt</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/consts&#34;</span>\n    <span class=\"s\">&#34;github.com/gin-gonic/gin&#34;</span>\n    <span class=\"s\">&#34;net/http&#34;</span>\n    <span class=\"s\">&#34;time&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">Jwt</span><span class=\"p\">()</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">HandlerFunc</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">code</span> <span class=\"kt\">int</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">data</span> <span class=\"kd\">interface</span><span class=\"p\">{}</span>\n\n        <span class=\"nx\">code</span> <span class=\"p\">=</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">SUCCESS</span>\n        <span class=\"nx\">token</span> <span class=\"o\">:=</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">Query</span><span class=\"p\">(</span><span class=\"s\">&#34;token&#34;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nx\">token</span> <span class=\"o\">==</span> <span class=\"s\">&#34;&#34;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">code</span> <span class=\"p\">=</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">INVALID_PARAMS</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">claims</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nf\">ParseToken</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n                <span class=\"nx\">code</span> <span class=\"p\">=</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">ERROR_AUTH_CHECK_TOKEN_FAIL</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">Now</span><span class=\"p\">().</span><span class=\"nf\">Unix</span><span class=\"p\">()</span> <span class=\"p\">&gt;</span> <span class=\"nx\">claims</span><span class=\"p\">.</span><span class=\"nx\">ExpiresAt</span> <span class=\"p\">{</span>\n                <span class=\"nx\">code</span> <span class=\"p\">=</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">ERROR_AUTH_CHECK_TOKEN_TIMEOUT</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"nx\">code</span> <span class=\"o\">!=</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">SUCCESS</span> <span class=\"p\">{</span>\n            <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">JSON</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusUnauthorized</span><span class=\"p\">,</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">H</span><span class=\"p\">{</span>\n                <span class=\"s\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"nx\">code</span><span class=\"p\">,</span>\n                <span class=\"s\">&#34;msg&#34;</span><span class=\"p\">:</span>  <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nf\">GetMsg</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">),</span>\n                <span class=\"s\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">,</span>\n            <span class=\"p\">})</span>\n\n            <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">Abort</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><h3>引入常量</h3><p>此时，代码中会有错误，是因为我们没有声明consts这个包，其中的变量SUCCESS、INVALID_PARAMS和ERROR_AUTH_CHECK_TOKEN_FAIL是未定义的。根据code获取服务器返回信息的函数GetMsg也没定义。同样没有定义的还有util.ParseToken(token)和claims.ExpiresAt。所以我们要新建consts包。我们在根目录下新建consts目录，并且在consts目录下新建code.go，将定义好的一些常量引进去，代码如下。</p><h3>新建const文件</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">const</span> <span class=\"p\">(</span>\n    <span class=\"nx\">SUCCESS</span>        <span class=\"p\">=</span> <span class=\"mi\">200</span>\n    <span class=\"nx\">ERROR</span>          <span class=\"p\">=</span> <span class=\"mi\">500</span>\n    <span class=\"nx\">INVALID_PARAMS</span> <span class=\"p\">=</span> <span class=\"mi\">400</span>\n<span class=\"p\">)</span></code></pre></div><h3>新建message文件</h3><p>再新建message.go文件，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">var</span> <span class=\"nx\">MsgFlags</span> <span class=\"p\">=</span> <span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">int</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span>\n    <span class=\"nx\">SUCCESS</span><span class=\"p\">:</span>                         <span class=\"s\">&#34;ok&#34;</span><span class=\"p\">,</span>\n    <span class=\"nx\">ERROR</span><span class=\"p\">:</span>                           <span class=\"s\">&#34;fail&#34;</span><span class=\"p\">,</span>\n    <span class=\"nx\">INVALID_PARAMS</span><span class=\"p\">:</span>                  <span class=\"s\">&#34;请求参数错误&#34;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">GetMsg</span><span class=\"p\">(</span><span class=\"nx\">code</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">ok</span> <span class=\"o\">:=</span> <span class=\"nx\">MsgFlags</span><span class=\"p\">[</span><span class=\"nx\">code</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nx\">ok</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">msg</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">MsgFlags</span><span class=\"p\">[</span><span class=\"nx\">ERROR</span><span class=\"p\">]</span>\n<span class=\"p\">}</span></code></pre></div><h3>新建util</h3><p>在根目录下新建util，并且在util下新建jwt.go，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">util</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;github.com/dgrijalva/jwt-go&#34;</span>\n    <span class=\"s\">&#34;time&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">jwtSecret</span> <span class=\"p\">=</span> <span class=\"p\">[]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">setting</span><span class=\"p\">.</span><span class=\"nx\">AppSetting</span><span class=\"p\">.</span><span class=\"nx\">JwtSecret</span><span class=\"p\">)</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">Claims</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Username</span> <span class=\"kt\">string</span> <span class=\"s\">`json:&#34;username&#34;`</span>\n    <span class=\"nx\">Password</span> <span class=\"kt\">string</span> <span class=\"s\">`json:&#34;password&#34;`</span>\n    <span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nx\">StandardClaims</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">GenerateToken</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">password</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">nowTime</span> <span class=\"o\">:=</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">Now</span><span class=\"p\">()</span>\n    <span class=\"nx\">expireTime</span> <span class=\"o\">:=</span> <span class=\"nx\">nowTime</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Hour</span><span class=\"p\">)</span>\n    <span class=\"nx\">claims</span> <span class=\"o\">:=</span> <span class=\"nx\">Claims</span><span class=\"p\">{</span>\n        <span class=\"nx\">username</span><span class=\"p\">,</span>\n        <span class=\"nx\">password</span><span class=\"p\">,</span>\n        <span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nx\">StandardClaims</span> <span class=\"p\">{</span>\n            <span class=\"nx\">ExpiresAt</span> <span class=\"p\">:</span> <span class=\"nx\">expireTime</span><span class=\"p\">.</span><span class=\"nf\">Unix</span><span class=\"p\">(),</span>\n            <span class=\"nx\">Issuer</span> <span class=\"p\">:</span> <span class=\"s\">&#34;go-backend-starter&#34;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">tokenClaims</span> <span class=\"o\">:=</span> <span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nf\">NewWithClaims</span><span class=\"p\">(</span><span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nx\">SigningMethodHS256</span><span class=\"p\">,</span> <span class=\"nx\">claims</span><span class=\"p\">)</span>\n    <span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">tokenClaims</span><span class=\"p\">.</span><span class=\"nf\">SignedString</span><span class=\"p\">(</span><span class=\"nx\">jwtSecret</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"nx\">err</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">ParseToken</span><span class=\"p\">(</span><span class=\"nx\">token</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">Claims</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">tokenClaims</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nf\">ParseWithClaims</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"nx\">Claims</span><span class=\"p\">{},</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">token</span> <span class=\"o\">*</span><span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nx\">Token</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kd\">interface</span><span class=\"p\">{},</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">jwtSecret</span><span class=\"p\">,</span> <span class=\"kc\">nil</span>\n    <span class=\"p\">})</span>\n    <span class=\"k\">if</span> <span class=\"nx\">tokenClaims</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">claims</span><span class=\"p\">,</span> <span class=\"nx\">ok</span> <span class=\"o\">:=</span> <span class=\"nx\">tokenClaims</span><span class=\"p\">.</span><span class=\"nx\">Claims</span><span class=\"p\">.(</span><span class=\"o\">*</span><span class=\"nx\">Claims</span><span class=\"p\">);</span> <span class=\"nx\">ok</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">tokenClaims</span><span class=\"p\">.</span><span class=\"nx\">Valid</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">claims</span><span class=\"p\">,</span> <span class=\"kc\">nil</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nx\">err</span>\n<span class=\"p\">}</span></code></pre></div><h3>新建setting包</h3><p>在上面的util中，setting包并没有定义，所以在这个步骤中我们需要定义setting包。</p><p>使用go get命令安装依赖。</p><div class=\"highlight\"><pre><code class=\"language-bash\">go get gopkg.in/ini.v1</code></pre></div><p>在项目根目录下新建setting目录，并在setting目录下新建setting.go文件，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">setting</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;gopkg.in/ini.v1&#34;</span>\n    <span class=\"s\">&#34;log&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">App</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">JwtSecret</span> <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Server</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Ip</span>   <span class=\"kt\">string</span>\n    <span class=\"nx\">Port</span> <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Database</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Type</span>        <span class=\"kt\">string</span>\n    <span class=\"nx\">User</span>        <span class=\"kt\">string</span>\n    <span class=\"nx\">Password</span>    <span class=\"kt\">string</span>\n    <span class=\"nx\">Host</span>        <span class=\"kt\">string</span>\n    <span class=\"nx\">Name</span>        <span class=\"kt\">string</span>\n    <span class=\"nx\">TablePrefix</span> <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">AppSetting</span> <span class=\"p\">=</span> <span class=\"o\">&amp;</span><span class=\"nx\">App</span><span class=\"p\">{}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ServerSetting</span> <span class=\"p\">=</span> <span class=\"o\">&amp;</span><span class=\"nx\">Server</span><span class=\"p\">{}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">DatabaseSetting</span> <span class=\"p\">=</span> <span class=\"o\">&amp;</span><span class=\"nx\">Database</span><span class=\"p\">{}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">config</span> <span class=\"o\">*</span><span class=\"nx\">ini</span><span class=\"p\">.</span><span class=\"nx\">File</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">Setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">err</span> <span class=\"kt\">error</span>\n    <span class=\"nx\">config</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"p\">=</span> <span class=\"nx\">ini</span><span class=\"p\">.</span><span class=\"nf\">Load</span><span class=\"p\">(</span><span class=\"s\">&#34;config/app.ini&#34;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nf\">Fatal</span><span class=\"p\">(</span><span class=\"s\">&#34;Fail to parse &#39;config/app.ini&#39;: %v&#34;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"nf\">mapTo</span><span class=\"p\">(</span><span class=\"s\">&#34;app&#34;</span><span class=\"p\">,</span> <span class=\"nx\">AppSetting</span><span class=\"p\">)</span>\n    <span class=\"nf\">mapTo</span><span class=\"p\">(</span><span class=\"s\">&#34;server&#34;</span><span class=\"p\">,</span> <span class=\"nx\">ServerSetting</span><span class=\"p\">)</span>\n    <span class=\"nf\">mapTo</span><span class=\"p\">(</span><span class=\"s\">&#34;database&#34;</span><span class=\"p\">,</span> <span class=\"nx\">DatabaseSetting</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">mapTo</span><span class=\"p\">(</span><span class=\"nx\">section</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"kd\">interface</span><span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nf\">Section</span><span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">).</span><span class=\"nf\">MapTo</span><span class=\"p\">(</span><span class=\"nx\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nf\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">&#34;Cfg.MapTo RedisSetting err: %v&#34;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><h3>新建配置文件</h3><p>在项目根目录下新建config目录，并新建app.ini文件，内容如下。</p><div class=\"highlight\"><pre><code class=\"language-ini\"><span class=\"k\">[app]</span>\n<span class=\"na\">JwtSecret</span> <span class=\"o\">=</span> <span class=\"s\">233</span>\n<span class=\"k\">[server]</span>\n<span class=\"na\">Ip : localhost</span>\n<span class=\"na\">Port : 8000</span>\n<span class=\"na\">Url : 127.0.0.1:27017</span>\n<span class=\"k\">[database]</span>\n<span class=\"na\">Type</span> <span class=\"o\">=</span> <span class=\"s\">mysql</span>\n<span class=\"na\">User</span> <span class=\"o\">=</span> <span class=\"s\">$YOUR_USERNAME</span>\n<span class=\"na\">Password</span> <span class=\"o\">=</span> <span class=\"s\">$YOUR_PASSWORD</span>\n<span class=\"na\">Host</span> <span class=\"o\">=</span> <span class=\"s\">127.0.0.1:3306</span>\n<span class=\"na\">Name</span> <span class=\"o\">=</span> <span class=\"s\">golang_test</span>\n<span class=\"na\">TablePrefix</span> <span class=\"o\">=</span> <span class=\"s\">golang_test_</span></code></pre></div><h3>实现登录接口</h3><h3>新增登录接口</h3><p>到此为止，通过jwt token进行鉴权的逻辑已经全部完成，剩下的就需要实现登录接口来将token在用户登录成功之后返回给用户。</p><p>使用go get命令安装依赖。</p><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/astaxie/beego/validation</code></pre></div><p>在router下新建login.go，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">router</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;github.com/astaxie/beego/validation&#34;</span>\n    <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/consts&#34;</span>\n    <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/util&#34;</span>\n    <span class=\"s\">&#34;github.com/gin-gonic/gin&#34;</span>\n    <span class=\"s\">&#34;net/http&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">auth</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Username</span> <span class=\"kt\">string</span> <span class=\"s\">`valid:&#34;Required; MaxSize(50)&#34;`</span>\n    <span class=\"nx\">Password</span> <span class=\"kt\">string</span> <span class=\"s\">`valid:&#34;Required; MaxSize(50)&#34;`</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kd\">func</span> <span class=\"nf\">Login</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">appG</span> <span class=\"o\">:=</span> <span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">Gin</span><span class=\"p\">{</span><span class=\"nx\">C</span><span class=\"p\">:</span> <span class=\"nx\">c</span><span class=\"p\">}</span>\n    <span class=\"nx\">valid</span> <span class=\"o\">:=</span> <span class=\"nx\">validation</span><span class=\"p\">.</span><span class=\"nx\">Validation</span><span class=\"p\">{}</span>\n    <span class=\"nx\">username</span> <span class=\"o\">:=</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">Query</span><span class=\"p\">(</span><span class=\"s\">&#34;username&#34;</span><span class=\"p\">)</span>\n    <span class=\"nx\">password</span> <span class=\"o\">:=</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">Query</span><span class=\"p\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">a</span> <span class=\"o\">:=</span> <span class=\"nx\">auth</span><span class=\"p\">{</span><span class=\"nx\">Username</span><span class=\"p\">:</span> <span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">Password</span><span class=\"p\">:</span> <span class=\"nx\">password</span><span class=\"p\">}</span>\n    <span class=\"nx\">ok</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">valid</span><span class=\"p\">.</span><span class=\"nf\">Valid</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"nx\">ok</span> <span class=\"p\">{</span>\n        <span class=\"nx\">appG</span><span class=\"p\">.</span><span class=\"nf\">Response</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusOK</span><span class=\"p\">,</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">INVALID_PARAMS</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">authService</span> <span class=\"o\">:=</span> <span class=\"nx\">authentication</span><span class=\"p\">.</span><span class=\"nx\">Auth</span><span class=\"p\">{</span><span class=\"nx\">Username</span><span class=\"p\">:</span> <span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">Password</span><span class=\"p\">:</span> <span class=\"nx\">password</span><span class=\"p\">}</span>\n    <span class=\"nx\">isExist</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">authService</span><span class=\"p\">.</span><span class=\"nf\">Check</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">appG</span><span class=\"p\">.</span><span class=\"nf\">Response</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusOK</span><span class=\"p\">,</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">ERROR_AUTH_CHECK_TOKEN_FAIL</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">!</span><span class=\"nx\">isExist</span> <span class=\"p\">{</span>\n        <span class=\"nx\">appG</span><span class=\"p\">.</span><span class=\"nf\">Response</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusOK</span><span class=\"p\">,</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">ERROR_AUTH</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nf\">GenerateToken</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">appG</span><span class=\"p\">.</span><span class=\"nf\">Response</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusOK</span><span class=\"p\">,</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">ERROR_AUTH_TOKEN</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">appG</span><span class=\"p\">.</span><span class=\"nf\">Response</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusOK</span><span class=\"p\">,</span> <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nx\">SUCCESS</span><span class=\"p\">,</span> <span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span>\n        <span class=\"s\">&#34;token&#34;</span><span class=\"p\">:</span> <span class=\"nx\">token</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span></code></pre></div><h3>新增返回类</h3><p>在util包下新增response.go文件，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">util</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/consts&#34;</span>\n    <span class=\"s\">&#34;github.com/gin-gonic/gin&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">Gin</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">C</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Context</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">g</span> <span class=\"o\">*</span><span class=\"nx\">Gin</span><span class=\"p\">)</span> <span class=\"nf\">Response</span><span class=\"p\">(</span><span class=\"nx\">httpCode</span><span class=\"p\">,</span> <span class=\"nx\">errCode</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"nx\">data</span> <span class=\"kd\">interface</span><span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"nx\">g</span><span class=\"p\">.</span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nf\">JSON</span><span class=\"p\">(</span><span class=\"nx\">httpCode</span><span class=\"p\">,</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">H</span><span class=\"p\">{</span>\n        <span class=\"s\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"nx\">httpCode</span><span class=\"p\">,</span>\n        <span class=\"s\">&#34;msg&#34;</span><span class=\"p\">:</span>  <span class=\"nx\">consts</span><span class=\"p\">.</span><span class=\"nf\">GetMsg</span><span class=\"p\">(</span><span class=\"nx\">errCode</span><span class=\"p\">),</span>\n        <span class=\"s\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span>\n<span class=\"p\">}</span></code></pre></div><h3>新增鉴权逻辑</h3><p>除了返回类，login.go中还有关键的鉴权逻辑还没有实现。在根目录下新建service/authentication目录，在该目录下新建auth.go文件，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">authentication</span>\n\n<span class=\"kn\">import</span> <span class=\"s\">&#34;fmt&#34;</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">Auth</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Username</span> <span class=\"kt\">string</span>\n    <span class=\"nx\">Password</span> <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">*</span><span class=\"nx\">Auth</span><span class=\"p\">)</span> <span class=\"nf\">Check</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">userName</span> <span class=\"o\">:=</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">Username</span>\n    <span class=\"nx\">passWord</span> <span class=\"o\">:=</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">Password</span>\n  <span class=\"c1\">// todo：实现自己的鉴权逻辑\n</span><span class=\"c1\"></span>    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nx\">userName</span><span class=\"p\">,</span> <span class=\"nx\">passWord</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"kc\">nil</span>\n<span class=\"p\">}</span></code></pre></div><p>在此处，需要自己真正的根据业务去实现对用户调用接口的合法性校验。例如，可以根据用户的用户名和密码去数据库做验证。</p><h3>修改router.go</h3><p>修改router.go中的代码如下。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">router</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/middleware/jwt&#34;</span>\n    <span class=\"s\">&#34;github.com/gin-gonic/gin&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">InitRouter</span><span class=\"p\">()</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Engine</span> <span class=\"p\">{</span>\n    <span class=\"nx\">router</span> <span class=\"o\">:=</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nf\">New</span><span class=\"p\">()</span>\n\n    <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">GET</span><span class=\"p\">(</span><span class=\"s\">&#34;/login&#34;</span><span class=\"p\">,</span> <span class=\"nx\">Login</span><span class=\"p\">)</span>\n    <span class=\"nx\">apiVersionOne</span> <span class=\"o\">:=</span> <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">Group</span><span class=\"p\">(</span><span class=\"s\">&#34;/api/v1/&#34;</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">apiVersionOne</span><span class=\"p\">.</span><span class=\"nf\">Use</span><span class=\"p\">(</span><span class=\"nx\">jwt</span><span class=\"p\">.</span><span class=\"nf\">Jwt</span><span class=\"p\">())</span>\n\n    <span class=\"nx\">apiVersionOne</span><span class=\"p\">.</span><span class=\"nf\">GET</span><span class=\"p\">(</span><span class=\"s\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">*</span><span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nf\">JSON</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">gin</span><span class=\"p\">.</span><span class=\"nx\">H</span><span class=\"p\">{</span>\n            <span class=\"s\">&#34;success&#34;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;message&#34;</span><span class=\"p\">:</span> <span class=\"s\">&#34;This works&#34;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"nx\">router</span>\n<span class=\"p\">}</span></code></pre></div><p>可以看到，我们在路由文件中加入了/login接口，并使用了我们自定义的jwt鉴权的中间件。只要是在v1下的路由，请求之前都会先进入jwt中进行鉴权，鉴权通过之后才能继续往下执行。</p><h3>运行main.go</h3><p>到此，我们使用<code>go run main.go</code>启动服务器，访问<a href=\"https://link.zhihu.com/?target=http%3A//localhost%3A8080/api/v1/hello\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">localhost:8080/api/v1/h</span><span class=\"invisible\">ello</span><span class=\"ellipsis\"></span></a>会遇到如下错误。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"p\">{</span>\n    <span class=\"s\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n    <span class=\"s\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"nx\">null</span><span class=\"p\">,</span>\n    <span class=\"s\">&#34;msg&#34;</span><span class=\"p\">:</span> <span class=\"s\">&#34;请求参数错误&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p>这是因为我们加入了鉴权，凡是需要鉴权的接口，都需要带上参数token。而要获取token则必须要先要登录，假设我们的用户名是Tom，密码是123。以此来调用登录接口。</p><div class=\"highlight\"><pre><code class=\"language-bash\">http://localhost:8080/login?username<span class=\"o\">=</span>Tom<span class=\"p\">&amp;</span><span class=\"nv\">password</span><span class=\"o\">=</span><span class=\"m\">123</span></code></pre></div><p>在浏览器中访问如上的url之后，可以看到返回如下。</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n    <span class=\"nt\">&#34;code&#34;</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;data&#34;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&#34;token&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlRvbSIsInBhc3N3b3JkIjoiMTIzIiwiZXhwIjoxNTYwMTM5MTE3LCJpc3MiOiJnby1iYWNrZW5kLXN0YXJ0ZXIifQ.I-RSi-xVV1Tk_2iBWolF1u94Y7oVBQXnHh6OI2YKJ6U&#34;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&#34;msg&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;ok&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p>有了token之后，我们再调用hello接口，可以看到数据正常的返回了。</p><div class=\"highlight\"><pre><code class=\"language-bash\">http://localhost:8080/api/v1/hello?token<span class=\"o\">=</span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlRvbSIsInBhc3N3b3JkIjoiMTIzIiwiZXhwIjoxNTYwMTM5MTE3LCJpc3MiOiJnby1iYWNrZW5kLXN0YXJ0ZXIifQ.I-RSi-xVV1Tk_2iBWolF1u94Y7oVBQXnHh6OI2YKJ6U</code></pre></div><p>一般的处理方法是，前端拿到这个token，利用持久化存储存下来，然后之后的每次请求都将token写在header中发给后端。后端先通过header中的token来校验调用接口的合法性，验证通过之后才进行真正的接口调用。</p><p>而在这我将token写在了request param中，只是为了做一个例子来展示。</p><h2>引入swagger</h2><p>完成了基本的框架之后，我们就开始为接口引入swagger文档。写过java的同学应该对swagger不陌生。往常写API文档，都是手写。即每个接口的每一个参数，都需要手打。</p><p>而swagger不一样，swagger只需要你在接口上打上几个注解（Java中的操作），就可以自动为你生成swagger文档。而在go中，我们是通过注释的方式来实现的，接下来我们安装<a href=\"https://link.zhihu.com/?target=https%3A//github.com/swaggo/gin-swagger\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gin-swagger</a>。</p><h3>安装依赖</h3><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/swaggo/gin-swagger\ngo get -u github.com/swaggo/gin-swagger/swaggerFiles\ngo get -u github.com/swaggo/swag/cmd/swag\ngo get github.com/ugorji/go/codec\ngo get github.com/alecthomas/template</code></pre></div><h3>在router中注入swagger</h3><p>引入依赖之后，我们需要在router/router.go中注入swagger。在import中加入<code>_ &#34;github.com/detectiveHLH/go-backend-starter/docs&#34;</code>。</p><p>并在<code>router := gin.New()</code>之后加入如下代码。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">GET</span><span class=\"p\">(</span><span class=\"s\">&#34;/swagger/*any&#34;</span><span class=\"p\">,</span> <span class=\"nx\">ginSwagger</span><span class=\"p\">.</span><span class=\"nf\">WrapHandler</span><span class=\"p\">(</span><span class=\"nx\">swaggerFiles</span><span class=\"p\">.</span><span class=\"nx\">Handler</span><span class=\"p\">))</span></code></pre></div><h3>为接口编写swagger注释</h3><p>在router/login.go中的Login函数上方加上如下注释。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// @Summary 登录\n</span><span class=\"c1\">// @Produce  json\n</span><span class=\"c1\">// @Param username query string true &#34;username&#34;\n</span><span class=\"c1\">// @Param password query string true &#34;password&#34;\n</span><span class=\"c1\">// @Success 200 {string} json &#34;{&#34;code&#34;:200,&#34;data&#34;:{},&#34;msg&#34;:&#34;ok&#34;}&#34;\n</span><span class=\"c1\"></span><span class=\"o\">//</span> <span class=\"err\">@</span><span class=\"nx\">Router</span> <span class=\"o\">/</span><span class=\"nx\">login</span> <span class=\"p\">[</span><span class=\"nx\">get</span><span class=\"p\">]</span></code></pre></div><h3>初始化swagger</h3><p>在项目根目录下使用<code>swag init</code>命令来初始化swagger文档。该命令将会在项目根目录生成docs目，内容如下。</p><div class=\"highlight\"><pre><code class=\"language-text\">.\n├── docs.go\n├── swagger.json\n└── swagger.yaml</code></pre></div><h3>查看swagger文档</h3><p>运行main.go，然后在浏览器访问<a href=\"https://link.zhihu.com/?target=http%3A//localhost%3A8080/swagger/index.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">localhost:8080/swagger/</span><span class=\"invisible\">index.html</span><span class=\"ellipsis\"></span></a>就可以看到swagger根据注释自动生成的API文档了。</p><h2>引入Endless</h2><h3>安装Endless</h3><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/fvbock/endless</code></pre></div><h3>修改main.go</h3><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&#34;fmt&#34;</span>\n    <span class=\"s\">&#34;github.com/detectiveHLH/go-backend-starter/router&#34;</span>\n    <span class=\"s\">&#34;github.com/fvbock/endless&#34;</span>\n    <span class=\"s\">&#34;log&#34;</span>\n    <span class=\"s\">&#34;syscall&#34;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">r</span> <span class=\"o\">:=</span> <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">InitRouter</span><span class=\"p\">()</span>\n\n  <span class=\"nx\">address</span> <span class=\"o\">:=</span> <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s:%s&#34;</span><span class=\"p\">,</span> <span class=\"nx\">setting</span><span class=\"p\">.</span><span class=\"nx\">ServerSetting</span><span class=\"p\">.</span><span class=\"nx\">Ip</span><span class=\"p\">,</span> <span class=\"nx\">setting</span><span class=\"p\">.</span><span class=\"nx\">ServerSetting</span><span class=\"p\">.</span><span class=\"nx\">Port</span><span class=\"p\">)</span>\n    <span class=\"nx\">server</span> <span class=\"o\">:=</span> <span class=\"nx\">endless</span><span class=\"p\">.</span><span class=\"nf\">NewServer</span><span class=\"p\">(</span><span class=\"nx\">address</span><span class=\"p\">,</span> <span class=\"nx\">r</span><span class=\"p\">)</span>\n    <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">BeforeBegin</span> <span class=\"p\">=</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">add</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Actual pid is %d&#34;</span><span class=\"p\">,</span> <span class=\"nx\">syscall</span><span class=\"p\">.</span><span class=\"nf\">Getpid</span><span class=\"p\">())</span>\n    <span class=\"p\">}</span>\n\n  <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nf\">ListenAndServe</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Server err: %v&#34;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><h2>写在后面</h2><p>对比起没有go module的依赖管理，现在的go module更像是Node.js中的package.json，也像是Java中的pom.xml，唯一不同的是pom.xml需要手动更新。</p><p>当我们拿到有go module项目的时候，不用担心下来依赖时，因为版本问题可能导致的一些兼容问题。直接使用go mod中的命令就可以将制定了版本的依赖全部安装，其效果类似于Node.js中的<code>npm install</code>。</p><p>go module定位module的方式，与Node.js寻找依赖的逻辑一样，Node会从当前命令执行的目录开始，依次向上查找node_modules中是否有这个依赖，直到找到。go则是依次向上查找go.mod文件，来定位一个模块。</p><p>相信之后go之后的依赖管理，会越来越好。</p><p>Happy hacking.</p><hr/><p class=\"ztext-empty-paragraph\"><br/></p><p>参考：</p><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/apocelipes/p/10295096.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">再探go modules：使用与细节</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/EDDYCJY/go-gin-example\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-73b02b7f9bcf54750136b17ca427739a_ipico.jpg\" data-image-width=\"240\" data-image-height=\"240\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EDDYCJY/go-gin-example</a><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/CraryPrimitiveMan/p/8560839.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-e326e63c592c85d19fff7d072382b295_180x120.jpg\" data-image-width=\"565\" data-image-height=\"284\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Golang学习--平滑重启 - 疯狂的原始人 - 博客园</a><p> 往期文章:</p><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/java/add-jwt-in-spring-boot/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-2fab3b67015035384e39a27a603ea5cc_120x160.jpg\" data-image-width=\"1365\" data-image-height=\"1767\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何在SpringBoot中集成JWT(JSON Web Token)鉴权</a><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/java/newSprintBootStarter/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-92a76e5a897e16cc1c03074208f51cd6_ipico.jpg\" data-image-width=\"1062\" data-image-height=\"1059\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手把手教你从零开始搭建SpringBoot后端项目框架</a><p> 个人网站      </p><a href=\"https://link.zhihu.com/?target=https%3A//www.hulunhao.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-92a76e5a897e16cc1c03074208f51cd6_ipico.jpg\" data-image-width=\"1062\" data-image-height=\"1059\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Lunhao Hu</a><p>微信公众号：  </p><p>                    SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu）</p>", 
            "topic": [
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }, 
                {
                    "tag": "Go 语言", 
                    "tagLink": "https://api.zhihu.com/topics/19625982"
                }, 
                {
                    "tag": "Golang 最佳实践", 
                    "tagLink": "https://api.zhihu.com/topics/20063071"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55173235", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 10, 
            "title": "在Java中使用redisTemplate操作缓存", 
            "content": "<p></p><h2>背景</h2><p>在最近的项目中，有一个需求是对一个很大的数据库进行查询，数据量大概在几千万条。但同时对查询速度的要求也比较高。</p><p>这个数据库之前在没有使用<a href=\"https://link.zhihu.com/?target=https%3A//prestodb.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Presto</a>的情况下，使用的是Hive，使用Hive进行一个简单的查询，速度可能在几分钟。当然几分钟也并不完全是跑SQL的时间，这里面包含发请求，查询数据并且返回数据的时间的总和。但是即使这样，这样的速度明显不能满足交互式的查询需求。</p><p>我们的下一个解决方案就是Presto，在使用了Presto之后，查询速度降到了秒级。但是对于一个前端查询界面的交互式查询来说，十几秒仍然是一个不能接受的时间。</p><p>虽然Presto相比Hive已经快了很多（FaceBook官方宣称的是10倍），但是对分页的支持不是很友好。我在使用的时候是自己在后端实现的分页。</p><p>在这种情况下应用缓存实属无奈之举。讲道理，优化应从底层开始，自底而上。上层优化的方式和效率感觉都很有局限。</p><h2>为什么要使用缓存</h2><p>前端查询中，单次查询的匹配数据量有可能会达到上百甚至上千条，在前端中肯定是需要分页展示的。就算每次查询10条数据，整个查询也要耗时6-8s的时间。想象一下，每翻一页等10s的场景。</p><p>所以，此时使用redis缓存。减少请求数据库的次数。将匹配的数据一并存入数据库。这样只有在第一次查询时耗费长一点，一旦查询完成，用户点击下一页就是毫秒级别的操作了。</p><h2>使用redisTemplate</h2><p>Spring封装了一个比较强大的模板，也就是redisTemplate，方便在开发的时候操作Redis缓存。在Redis中可以存储String、List、Set、Hash、Zset。下面将针对List和Hash分别介绍。</p><h2>List</h2><p>Redis中的List为简单的字符串列表，常见的有下面几种操作。</p><h2>hasKey</h2><p>判断一个键是否存在，只需要调用<code>hasKey</code>就可以了。假设这个Key是<code>test</code>，具体用法如下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">hasKey</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;存在&#34;</span><span class=\"o\">);</span>\n<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;不存在&#34;</span><span class=\"o\">);</span>\n<span class=\"o\">}</span></code></pre></div><h2>range</h2><p>该函数用于从redis缓存中获取指定区间的数据。具体用法如下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">hasKey</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 该键的值为 [4, 3, 2, 1]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">));</span> <span class=\"c1\">// [4]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"c1\">// [4, 3]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">));</span> <span class=\"c1\">// [4, 3, 2]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">));</span> <span class=\"c1\">// [4, 3, 2, 1]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">));</span> <span class=\"c1\">// [4, 3, 2, 1]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">));</span> <span class=\"c1\">// [4, 3, 2, 1]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"c1\">// [4, 3, 2, 1] 如果结束位是-1， 则表示取所有的值\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><h2>delete</h2><p>删除某个键。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[]</span></code></pre></div><h2>size</h2><p>获取该键的集合长度。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">size</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"n\">4</span></code></pre></div><h2>leftPush</h2><p>我们把存放这个值的地方想象成如图所示的容器。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b62072a60d89992c1dea5de3da103a3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"565\" data-original=\"https://pic3.zhimg.com/v2-b62072a60d89992c1dea5de3da103a3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;565&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"565\" data-original=\"https://pic3.zhimg.com/v2-b62072a60d89992c1dea5de3da103a3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b62072a60d89992c1dea5de3da103a3e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>并且取数据总是从左边取，但是存数据可以从左也可以从右。左就是<code>leftPush</code>，右就是<code>rightPush</code>。leftPush如下图所示。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-87c6430b445786610f4d18759a27975b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"544\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"544\" data-original=\"https://pic4.zhimg.com/v2-87c6430b445786610f4d18759a27975b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;544&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"544\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"544\" data-original=\"https://pic4.zhimg.com/v2-87c6430b445786610f4d18759a27975b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-87c6430b445786610f4d18759a27975b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>用法如下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">4</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Integer</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPush</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span>\n<span class=\"o\">}</span></code></pre></div><p>控制台输出的结果如下。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>, <span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>, <span class=\"m\">2</span>, <span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>, <span class=\"m\">3</span>, <span class=\"m\">2</span>, <span class=\"m\">1</span><span class=\"o\">]</span></code></pre></div><h2>leftPushAll</h2><p>基本和leftPush一样，只不过是一次性的将List入栈。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">]</span></code></pre></div><p>当然你也可以这样</p><div class=\"highlight\"><pre><code class=\"language-text\">redisTemplate.opsForList().leftPushAll(&#34;test&#34;, &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;);\nSystem.out.println(redisTemplate.opsForList().range(&#34;test&#34;, 0, -1)); // [4, 3, 2, 1]</code></pre></div><h2>leftPushIfPresent</h2><p>跟<code>leftPush</code>是同样的操作，唯一的不同是，当且仅当key存在时，才会更新key的值。如果key不存在则不会对数据进行任何操作。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPushIfPresent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPushIfPresent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[]</span></code></pre></div><h2>leftPop</h2><p>该函数用于移除上面我们抽象的容器中的最左边的一个元素。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// []\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">[]</span></code></pre></div><p>值得注意的是，当返回为空后，在redis中这个key也不复存在了。如果此时再调用<a href=\"https://zhuanlan.zhihu.com/p/55173235/edit#leftPushIfPresent\" class=\"internal\">leftPushIfPresent</a>，是无法再添加数据的。有代码有真相。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// []\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// []\n</span><span class=\"c1\"></span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPushIfPresent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// []\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPushIfPresent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">[]</span></code></pre></div><h2>rightPush</h2><p>rightPush如下图所示。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-76329298a57108db920e2f0982a8c34b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"565\" data-original=\"https://pic4.zhimg.com/v2-76329298a57108db920e2f0982a8c34b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;565&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"565\" data-original=\"https://pic4.zhimg.com/v2-76329298a57108db920e2f0982a8c34b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-76329298a57108db920e2f0982a8c34b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>用法如下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">4</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Integer</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">leftPush</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span>\n<span class=\"o\">}</span></code></pre></div><p>控制台输出的结果如下。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span>, <span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span>, <span class=\"m\">3</span>, <span class=\"m\">4</span><span class=\"o\">]</span></code></pre></div><h2>rightPushAll</h2><p>同rightPush，一次性将List存入。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">]</span></code></pre></div><p>当然你也可以这样。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;2&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;3&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">]</span></code></pre></div><h2>rightPushIfPresent</h2><p>跟<code>rightPush</code>是同样的操作，唯一的不同是，当且仅当key存在时，才会更新key的值。如果key不存在则不会对数据进行任何操作。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushIfPresent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushIfPresent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[]</span></code></pre></div><h2>rightPop</h2><p>该函数用于移除上面我们抽象的容器中的最右边的一个元素。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [1]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// []\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPop</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">[]</span></code></pre></div><p>与<a href=\"https://zhuanlan.zhihu.com/p/55173235/edit#leftPop\" class=\"internal\">leftPop</a>一样，返回空之后，再调用<a href=\"https://zhuanlan.zhihu.com/p/55173235/edit#rightPushIfPresent\" class=\"internal\">rightPushIfPresent</a>，是无法再添加数据的。</p><h2>index</h2><p>获取list中指定位置的元素。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">hasKey</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 该键的值为 [1, 2, 3, 4]\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"c1\">// 4\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">));</span> <span class=\"c1\">// 1\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"c1\">// 2\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">));</span> <span class=\"c1\">// 3\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">));</span> <span class=\"c1\">// 4\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">));</span> <span class=\"c1\">// null\n</span><span class=\"c1\"></span>    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">index</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">));</span> <span class=\"c1\">// null\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><p>值得注意的有两点。一个是如果下标是<code>-1</code>的话，则会返回List最后一个元素，另一个如果数组下标越界，则会返回<code>null</code>。</p><h2>trim</h2><p>用于截取指定区间的元素，可能你会理解成与<a href=\"https://zhuanlan.zhihu.com/p/55173235/edit#range\" class=\"internal\">range</a>是一样的作用。看了下面的代码之后应该就会立刻理解。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">trim</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">]</span></code></pre></div><p>其实作用完全不一样。<code>range</code>是获取指定区间内的数据，而<code>trim</code>是留下指定区间的数据，删除不在区间的所有数据。<code>trim</code>是<code>void</code>，不会返回任何数据。</p><h2>remove</h2><p>用于移除键中指定的元素。接受3个参数，分别是缓存的键名，计数事件，要移除的值。计数事件可以传入的有三个值，分别是<code>-1</code>、<code>0</code>、<code>1</code>。</p><p><code>-1</code>代表从存储容器的最右边开始，删除一个与要移除的值匹配的数据；<code>0</code>代表删除所有与传入值匹配的数据；<code>1</code>代表从存储容器的最左边开始，删除一个与要移除的值匹配的数据。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3, 4, 4, 3, 2, 1]\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 当计数事件是-1、传入值是1时\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3, 4, 4, 3, 2]\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 当计数事件是1，传入值是1时\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span> <span class=\"c1\">// [2, 3, 4, 4, 3, 2]\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 当计数事件是0，传入值是4时\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">]</span></code></pre></div><h2>rightPopAndLeftPush</h2><p>该函数用于操作两个键之间的数据，接受两个参数，分别是源key、目标key。该函数会将源key进行<a href=\"https://zhuanlan.zhihu.com/p/55173235/edit#rightPop\" class=\"internal\">rightPop</a>，再将返回的值，作为输入参数，在目标key上进行<a href=\"https://zhuanlan.zhihu.com/p/55173235/edit#leftPush\" class=\"internal\">leftPush</a>。具体代码如下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">test2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">test2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">test</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPushAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test2&#34;</span><span class=\"o\">,</span> <span class=\"n\">test2</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3]\n</span><span class=\"c1\"></span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">rightPopAndLeftPush</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;test2&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"c1\">// [1, 2, 3]\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForList</span><span class=\"o\">().</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"s\">&#34;test2&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">]</span></code></pre></div><h2>Hash</h2><p>存储类型为hash其实很好理解。在上述的<code>List</code>中，一个redis的Key可以理解为一个List，而在<code>Hash</code>中，一个redis的Key可以理解为一个HashMap。</p><h2>put</h2><p>用于写入数据。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"kc\">true</span></code></pre></div><h2>putAll</h2><p>用于一次性向一个Hash键中添加多个key。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;5&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;6&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;7&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;8&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">valueMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;map1&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;map2&#34;</span><span class=\"o\">,</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">putAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">valueMap</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">{</span><span class=\"n\">map2</span><span class=\"o\">=[</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">],</span> <span class=\"n\">map1</span><span class=\"o\">=[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">]}</span></code></pre></div><h2>putIfAbsent</h2><p>用于向一个Hash键中写入数据。当key在Hash键中已经存在时，则不会写入任何数据，只有在Hash键中不存在这个key时，才会写入数据。</p><p>同时，如果连这个Hash键都不存在，redisTemplate会新建一个Hash键，再写入key。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">putIfAbsent</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">entries</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">{</span><span class=\"n\">map</span><span class=\"o\">=[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">]}</span></code></pre></div><h2>get</h2><p>用于获取数据。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">));</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">));</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span>\n<span class=\"n\">Boolean</span> <span class=\"n\">bool</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Boolean</span><span class=\"o\">)</span> <span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"o\">);</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span>\n<span class=\"n\">String</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">).</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">JSONArray</span><span class=\"o\">.</span><span class=\"na\">parseArray</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span> <span class=\"o\">//</span> <span class=\"n\">4</span></code></pre></div><p>值得注意的是，使用<code>get</code>函数获取的数据都是Object类型。</p><p>所以需要使用类型与上述例子中的布尔类型的话，则需要强制转换一次。<code>List</code>类型则可以使用<code>fastjson</code>这种工具来进行转换。转换的例子已列举在上述代码中。</p><h2>delete</h2><p>用于删除一个Hash键中的key。可以理解为删除一个map中的某个key。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;5&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;6&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;7&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;8&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">valueMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;map1&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;map2&#34;</span><span class=\"o\">,</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">putAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">valueMap</span><span class=\"o\">);</span> <span class=\"c1\">// {map2=[5, 6, 7, 8], map1=[1, 2, 3, 4]}\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map1&#34;</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"o\">{</span><span class=\"n\">map2</span><span class=\"o\">=[</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">]}</span></code></pre></div><h2>values</h2><p>用于获取一个Hash类型的键的所有值。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">values</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">],</span> <span class=\"kc\">true</span><span class=\"o\">]</span></code></pre></div><h2>entries</h2><p>用于以Map的格式获取一个Hash键的所有值。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">entries</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;map&#34;</span><span class=\"o\">));</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;map&#34;</span><span class=\"o\">)</span> <span class=\"k\">instanceof</span> <span class=\"n\">String</span><span class=\"o\">);</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">entries</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">=[</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">],</span> <span class=\"n\">isAdmin</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"o\">}</span></code></pre></div><h2>hasKey</h2><p>用于获取一个Hash键中是否含有某个键。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">hasKey</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">));</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">hasKey</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;b&#34;</span><span class=\"o\">));</span> <span class=\"c1\">// false\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">hasKey</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"kc\">true</span></code></pre></div><h2>keys</h2><p>用于获取一个Hash键中所有的键。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">keys</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">isAdmin</span><span class=\"o\">]</span></code></pre></div><h2>size</h2><p>用于获取一个Hash键中包含的键的数量。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;isAdmin&#34;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">size</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"n\">2</span></code></pre></div><h2>increment</h2><p>用于让一个Hash键中的某个key，根据传入的值进行累加。传入的数值只能是<code>double</code>或者<code>long</code>，不接受浮点型</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">increment</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;a&#34;</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">increment</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;a&#34;</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">3</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">increment</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;a&#34;</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">increment</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;a&#34;</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">entries</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">));</span> <span class=\"o\">//</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">1</span><span class=\"o\">}</span></code></pre></div><h2>multiGet</h2><p>用于批量的获取一个Hash键中多个key的值。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;5&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;6&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;7&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;8&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map1&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span> <span class=\"c1\">// [1, 2, 3, 4]\n</span><span class=\"c1\"></span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;map2&#34;</span><span class=\"o\">,</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span> <span class=\"c1\">// [5, 6, 7, 8]\n</span><span class=\"c1\"></span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;map1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;map2&#34;</span><span class=\"o\">);</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">multiGet</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">keys</span><span class=\"o\">));</span> <span class=\"c1\">// [[1, 2, 3, 4], [5, 6, 7, 8]]\n</span><span class=\"c1\"></span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">multiGet</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">keys</span><span class=\"o\">)</span> <span class=\"k\">instanceof</span> <span class=\"n\">List</span><span class=\"o\">);</span> <span class=\"o\">//</span> <span class=\"kc\">true</span></code></pre></div><h2>scan</h2><p>获取所以匹配条件的Hash键中key的值。我查过一些资料，大部分写的是无法模糊匹配，我自己尝试了一下，其实是可以的。如下，使用<code>scan</code>模糊匹配hash键的key中，带<code>SCAN</code>的key。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;1&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;2&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;3&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;4&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;5&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;6&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;7&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;8&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">list3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;9&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;10&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;11&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">list3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;12&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">valueMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;map1&#34;</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;SCAN_map2&#34;</span><span class=\"o\">,</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">valueMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;map3&#34;</span><span class=\"o\">,</span> <span class=\"n\">list3</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\n<span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">putAll</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">valueMap</span><span class=\"o\">);</span> <span class=\"c1\">// {SCAN_map2=[5, 6, 7, 8], map3=[9, 10, 11, 12], map1=[1, 2, 3, 4]}\n</span><span class=\"c1\"></span>\n<span class=\"n\">Cursor</span><span class=\"o\">&lt;</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">opsForHash</span><span class=\"o\">().</span><span class=\"na\">scan</span><span class=\"o\">(</span><span class=\"s\">&#34;test&#34;</span><span class=\"o\">,</span> <span class=\"n\">ScanOptions</span><span class=\"o\">.</span><span class=\"na\">scanOptions</span><span class=\"o\">().</span><span class=\"na\">match</span><span class=\"o\">(</span><span class=\"s\">&#34;*SCAN*&#34;</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">());</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">());</span> <span class=\"c1\">// [5, 6, 7, 8]\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>引入redisTemplate</h2><p>如果大家看懂了怎么用，就可以将redisTemplate引入项目中了。</p><h2>引入pom依赖</h2><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>2.0.5.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><h2>新建配置文件</h2><p>然后需要新建一个<code>RedisConfig</code>配置文件。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.detectivehlh</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">com.fasterxml.jackson.annotation.JsonAutoDetect</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.fasterxml.jackson.annotation.PropertyAccessor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.fasterxml.jackson.databind.ObjectMapper</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Bean</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.connection.RedisConnectionFactory</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.core.RedisTemplate</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.core.StringRedisTemplate</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * RedisConfig\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author Lunhao Hu\n</span><span class=\"cm\"> * @date 2019-01-17 15:12\n</span><span class=\"cm\"> **/</span>\n<span class=\"nd\">@Configuration</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RedisConfig</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">RedisTemplate</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">redisTemplate</span><span class=\"o\">(</span><span class=\"n\">RedisConnectionFactory</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ObjectMapper</span> <span class=\"n\">om</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ObjectMapper</span><span class=\"o\">();</span>\n        <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"na\">setVisibility</span><span class=\"o\">(</span><span class=\"n\">PropertyAccessor</span><span class=\"o\">.</span><span class=\"na\">ALL</span><span class=\"o\">,</span> <span class=\"n\">JsonAutoDetect</span><span class=\"o\">.</span><span class=\"na\">Visibility</span><span class=\"o\">.</span><span class=\"na\">ANY</span><span class=\"o\">);</span>\n        <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"na\">enableDefaultTyping</span><span class=\"o\">(</span><span class=\"n\">ObjectMapper</span><span class=\"o\">.</span><span class=\"na\">DefaultTyping</span><span class=\"o\">.</span><span class=\"na\">NON_FINAL</span><span class=\"o\">);</span>\n        <span class=\"c1\">//redis序列化\n</span><span class=\"c1\"></span>        <span class=\"n\">Jackson2JsonRedisSerializer</span> <span class=\"n\">jackson2JsonRedisSerializer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Jackson2JsonRedisSerializer</span><span class=\"o\">(</span><span class=\"n\">Object</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">.</span><span class=\"na\">setObjectMapper</span><span class=\"o\">(</span><span class=\"n\">om</span><span class=\"o\">);</span>\n\n        <span class=\"n\">StringRedisTemplate</span> <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringRedisTemplate</span><span class=\"o\">(</span><span class=\"n\">factory</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">setValueSerializer</span><span class=\"o\">(</span><span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">setHashKeySerializer</span><span class=\"o\">(</span><span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">setHashValueSerializer</span><span class=\"o\">(</span><span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">setValueSerializer</span><span class=\"o\">(</span><span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">afterPropertiesSet</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">template</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>注入</h2><p>将redisTemplate注入到需要使用的地方。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Autowired</span>\n<span class=\"kd\">private</span> <span class=\"n\">RedisTemplate</span> <span class=\"n\">redisTemplate</span><span class=\"o\">;</span></code></pre></div><h2>写在后面</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github</a></p>", 
            "topic": [
                {
                    "tag": "Spring Boot", 
                    "tagLink": "https://api.zhihu.com/topics/20044714"
                }, 
                {
                    "tag": "Redis", 
                    "tagLink": "https://api.zhihu.com/topics/19557280"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52559555", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 2, 
            "title": "从无到有-在create-react-app基础上接入react-router、redux-saga", 
            "content": "<p></p><p></p><h2>搭建项目框架</h2><h2>新建项目</h2><p>执行如下代码，用<code>create-react-app</code>来建立项目的基础框架，然后安装需要用到的依赖。</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ npx create-react-app my-test-project\n$ <span class=\"nb\">cd</span> my-test-project\n$ yarn add react-router-dom react-redux prop-types redux redux-saga\n$ yarn start</code></pre></div><p>完成后，应用启动在localhost的3000端口。</p><h2>接入react-router-dom</h2><p>react-router-dom其实就是react-router 4.0，与之前的3.0有什么区别呢？react-router被一分为三。<code>react-router</code>、<code>react-router-dom</code>和<code>react-router-native</code>。</p><p><code>react-router</code>实现了路由的核心的路由组件和函数。而<code>react-router-dom</code>和<code>react-router-native</code>则是基于<code>react-router</code>，提供了特定的环境的组件。</p><p><code>react-router-dom</code>依赖<code>react-router</code>，安装的时候，不用再显示的安装<code>react-router</code>, 如果你有机会去看react-router-dom的源码，就会发现里面有些组件都是从<code>react-router</code>中引入的。</p><h2>新建layout</h2><p>在<code>/src</code>下新建layout目录。为什么要新建layout目录，因为有可能我们会用到多个layout，layout是一个什么样的概念？</p><p>例如这个应用需要提供一部分功能在微信使用。那么进入所有微信的相关界面下都要进行鉴权。没有鉴权信息就不允许访问，但是这个服务仍然有所有人都可以访问的路由。使用layout可以很好的帮我们解决这个问题。</p><p>将所有的需要鉴权的页面放在例如<code>WechatContainer</code>下，只有在有微信相关鉴权的信息存在，才允许访问接下来的界面，否则，容器内甚至可以直接不渲染接下来的界面。</p><p>在<code>/src/layout</code>下新建两个文件，分别是<code>AppLayout.js</code>、<code>WechatLayout.js</code>。</p><p><code>AppLayout.js</code>的代码如下。在这个layout中，首页就是单纯的一个路由，导向至首页。而接下来的<code>/wechat</code>则是把路由导向至了一个微信端专用的layout。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Home</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../routes/home&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">WechatLayout</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./WechatLayout&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Route</span><span class=\"p\">,</span> <span class=\"nx\">Switch</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-router-dom&#39;</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 项目入口布局\n</span><span class=\"cm\"> * 在此处根据一级路由的不同进入不同的container\n</span><span class=\"cm\"> * 每个container有自己不同的作用\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * 在react-router V4中，将原先统一在一处的路由分散到各个模块中，分散到各个模块当中\n</span><span class=\"cm\"> * 例如： WechatLayout的路由为/wechat 表示到该layout下的默认路径\n</span><span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nx\">AppLayout</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s1\">&#39;App&#39;</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">main</span><span class=\"o\">&gt;</span>\n          <span class=\"o\">&lt;</span><span class=\"nx\">Switch</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span> <span class=\"nx\">exact</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">Home</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/wechat&#39;</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">WechatLayout</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>\n          <span class=\"o\">&lt;</span><span class=\"err\">/Switch&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/main&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">AppLayout</span><span class=\"p\">;</span>\n</code></pre></div><p><code>WechatLayout.js</code>的代码如下。在这个layout中，我们就可以对访问该路由的用户进行鉴权。如果没有权限，我们可以直接限制用户的访问，甚至直接不渲染render中的数据。</p><p>例如，我们可以在<code>componentWillMount</code>中或者在render中，根据当前的state数据，对当前用户进行鉴权。如果没有权限，我们就可以将当前页面重定向到没有权限的提示界面。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Home</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../routes/wechat/home&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Route</span><span class=\"p\">,</span> <span class=\"nx\">Switch</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-router-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">connect</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-redux&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">WechatLayout</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">componentWillMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Wechat-Layout&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">className</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">header</span><span class=\"o\">&gt;</span>\n          <span class=\"nx\">Our</span> <span class=\"nx\">Manage</span> <span class=\"nx\">Layout</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/header&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">main</span><span class=\"o\">&gt;</span>\n          <span class=\"o\">&lt;</span><span class=\"nx\">Switch</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">.</span><span class=\"nx\">path</span><span class=\"si\">}</span><span class=\"sb\">/home`</span><span class=\"p\">}</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">Home</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>\n          <span class=\"o\">&lt;</span><span class=\"err\">/Switch&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/main&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">mapStateToProps</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"nx\">reducer</span><span class=\"o\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">wechatLayout</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mapStateToProps</span><span class=\"p\">)(</span><span class=\"nx\">WechatLayout</span><span class=\"p\">);</span>\n</code></pre></div><h2>新建routes</h2><p>新建<code>/src/routes/home/index.js</code>，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Link</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-router-dom&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Home</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Home&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">className</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">This</span> <span class=\"nx\">is</span> <span class=\"nx\">Home</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;&lt;</span><span class=\"nx\">Link</span> <span class=\"nx\">to</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;/wechat/home&#39;</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Manage</span> <span class=\"nx\">Home</span><span class=\"o\">&lt;</span><span class=\"err\">/Link&gt;&lt;/div&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Home</span><span class=\"p\">;</span>\n</code></pre></div><p>新建<code>/src/routes/wechat/home/index.js</code>, 代码如下。在代码中可以看到，触发reducer很简单，只需要调用dispatch方法即可。dispatch中的payload就是该请求所带的参数，该参数会传到saga中间层，去调用真正的后端请求。并在请求返回成功之后，调用<code>put</code>方法更新state。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">connect</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">&#34;react-redux&#34;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Home</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">componentWillMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;WATCH_GET_PROJECT&#39;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">projectName</span><span class=\"o\">:</span> <span class=\"s1\">&#39;tap4fun&#39;</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Wechat-Home&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">className</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Home</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">h2</span><span class=\"o\">&gt;</span><span class=\"nx\">The</span> <span class=\"nx\">project</span> <span class=\"nx\">name</span> <span class=\"nx\">is</span> <span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">.</span><span class=\"nx\">projectName</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/h2&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">mapStateToProps</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"nx\">reducer</span><span class=\"o\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">wechat</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mapStateToProps</span><span class=\"p\">)(</span><span class=\"nx\">Home</span><span class=\"p\">)</span>\n</code></pre></div><h2>新建container</h2><p>在<code>/src</code>下新建<code>container</code>，在<code>container</code>中新建文件<code>AppContainer.js</code>。我们整个react应用都装在这个容器里面。<code>AppContainer.js</code>的代码如下。</p><p>而其中的Provider组件，将包裹我们应用的容器<code>AppLayout</code>包在其中，使得下面的所有子组件都可以拿到state。<code>Provider</code>接受store参数作为props，然后通过context往下传递。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">PropTypes</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;prop-types&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Provider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserRouter</span> <span class=\"nx\">as</span> <span class=\"nx\">Router</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-router-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">AppLayout</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../layout/AppLayout&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">AppContainer</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">static</span> <span class=\"nx\">propTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">store</span><span class=\"o\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">store</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Provider</span> <span class=\"nx\">store</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">store</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Router</span><span class=\"o\">&gt;</span>\n          <span class=\"o\">&lt;</span><span class=\"nx\">AppLayout</span> <span class=\"o\">/&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/Router&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/Provider&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">AppContainer</span><span class=\"p\">;</span>\n</code></pre></div><h2>修改项目入口文件</h2><p>更新<code>/src/index.js</code>，代码如下。在此处会将create出来的store容器当作属性传入到Appcontainer中，作为我们应用的状态容器。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">&#39;./index.css&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">serviceWorker</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./serviceWorker&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">AppContainer</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./container/AppContainer&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">createStore</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./store/createStore&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">createStore</span><span class=\"p\">();</span>\n\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">AppContainer</span> <span class=\"nx\">store</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">store</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;root&#39;</span><span class=\"p\">));</span>\n\n<span class=\"c1\">// If you want your app to work offline and load faster, you can change\n</span><span class=\"c1\">// unregister() to register() below. Note this comes with some pitfalls.\n</span><span class=\"c1\">// Learn more about service workers: http://bit.ly/CRA-PWA\n</span><span class=\"c1\"></span><span class=\"nx\">serviceWorker</span><span class=\"p\">.</span><span class=\"nx\">unregister</span><span class=\"p\">();</span>\n</code></pre></div><h2>新建store</h2><p>新建<code>/src/store/craeteStore.js</code>，代码如下。通过以下的方式，我们可以给redux添加很多中间件，甚至是自己写的中间件。</p><p>比如，我们可以自己实现一个日志中间件，然后添加到中间件数组<code>middleWares</code>中，在创建redux的store的时候，应用我们自己写的中间件。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">applyMiddleware</span><span class=\"p\">,</span> <span class=\"nx\">compose</span><span class=\"p\">,</span> <span class=\"nx\">createStore</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">createSagaMiddleware</span>  <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux-saga&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">rootReducer</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../reducers&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">rootSaga</span>  <span class=\"nx\">from</span> <span class=\"s1\">&#39;../saga&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">configureStore</span><span class=\"p\">(</span><span class=\"nx\">preloadedState</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 创建saga中间件\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">sagaMiddleware</span> <span class=\"o\">=</span> <span class=\"nx\">createSagaMiddleware</span><span class=\"p\">();</span>\n  <span class=\"k\">const</span> <span class=\"nx\">middleWares</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">sagaMiddleware</span><span class=\"p\">];</span>\n  <span class=\"k\">const</span> <span class=\"nx\">middlewareEnhancer</span> <span class=\"o\">=</span> <span class=\"nx\">applyMiddleware</span><span class=\"p\">(...</span><span class=\"nx\">middleWares</span><span class=\"p\">);</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">enhancers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">middlewareEnhancer</span><span class=\"p\">];</span>\n  <span class=\"k\">const</span> <span class=\"nx\">composedEnhancers</span> <span class=\"o\">=</span> <span class=\"nx\">compose</span><span class=\"p\">(...</span><span class=\"nx\">enhancers</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// 创建存储容器\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">rootReducer</span><span class=\"p\">,</span> <span class=\"nx\">preloadedState</span><span class=\"p\">,</span> <span class=\"nx\">composedEnhancers</span><span class=\"p\">);</span>\n  <span class=\"nx\">sagaMiddleware</span><span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">(</span><span class=\"nx\">rootSaga</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">store</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在这引入了<code>redux-saga</code>。我之前在使用redux的时候，几乎在每个模块都要写相应的action和reducer，然后在相应的模块文件中引入action的函数，然后在使用<code>mapDispatchToProps</code>将该函数注入到props中，在相应的函数中调用。并且，一个action不能复用，即使触发的是相同的reducer。这样就会出现很多重复性的代码，新增一个模块的工作也相对繁琐了很多。</p><p>但是使用了<code>redux-saga</code>之后，只需要在reducer中定义好相应类型的操作和saga就可以了。不需要定义action的函数，不需要在文件中引入action中函数，甚至连<code>mapDispatchToProps</code>都不需要，直接使用<code>this.props.dispatch({ &#39;type&#39;: &#39;WATCH_GET_PROJECT&#39; })</code>就可以调用。而且，action可以复用。</p><h2>新建saga</h2><p>新建<code>/src/saga/index.js</code>，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">put</span><span class=\"p\">,</span> <span class=\"nx\">takeEvery</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux-saga/effects&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">delay</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux-saga&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span><span class=\"o\">*</span> <span class=\"nx\">fetchProject</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">yield</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"k\">yield</span> <span class=\"nx\">put</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;GET_PROJECT&#39;</span> <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"o\">*</span> <span class=\"nx\">rootSaga</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">yield</span> <span class=\"nx\">takeEvery</span><span class=\"p\">(</span><span class=\"s1\">&#39;WATCH_GET_PROJECT&#39;</span><span class=\"p\">,</span> <span class=\"nx\">fetchProject</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>新建reducer</h2><p>新建<code>/src/reducers/wechat.js</code>，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">initialState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">projectName</span><span class=\"o\">:</span> <span class=\"kc\">null</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">counter</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">newState</span> <span class=\"o\">=</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">&#39;GET_PROJECT&#39;</span><span class=\"o\">:</span>\n      <span class=\"nx\">newState</span><span class=\"p\">.</span><span class=\"nx\">projectName</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">projectName</span><span class=\"p\">;</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"p\">{...</span><span class=\"nx\">newState</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>新建<code>/src/reducers/index.js</code>，代码如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">combineReducers</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;redux&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Wechat</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./wechat&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">combineReducers</span><span class=\"p\">({</span>\n  <span class=\"nx\">wechat</span><span class=\"o\">:</span> <span class=\"nx\">Wechat</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>在这里我们使用了<code>combineReducers</code>。在之前的基于redux的应用程序中，常见的state结构就是一个简单的JavaScript对象。</p><h2>重新启动应用</h2><p>到此处，重新启动应用，就可以在<code>http://localhost:3000/wechat/home</code>下看到从reducer中取出的数据。</p><p>在页面中，我们就可以通过代码<code>this.props.dispatch</code>的方式，来触发action。</p><h2>参考</h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mrdulin/blog/issues/42\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/mrdulin/blog</span><span class=\"invisible\">/issues/42</span><span class=\"ellipsis\"></span></a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//cn.redux.js.org/docs/recipes/reducers/UsingCombineReducers.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cn.redux.js.org/docs/re</span><span class=\"invisible\">cipes/reducers/UsingCombineReducers.html</span><span class=\"ellipsis\"></span></a></li></ul><h2>项目源代码</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/react-saga-router-demo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github仓库</a></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "react-router", 
                    "tagLink": "https://api.zhihu.com/topics/20051704"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52533037", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 5, 
            "title": "如何正确的在项目中接入微信JS-SDK", 
            "content": "<p></p><h2>微信JS-SDK的功能</h2><p>如果你点进来，那么我相信你应该知道微信的JS-SDK可以用来做什么了。微信的官方文档描述如下。</p><blockquote> 微信JS-SDK是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包。<br/> 通过使用微信JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫等微信特有的能力，为微信用户提供更优质的网页体验。<br/> </blockquote><p>通过使用微信的JS-SDK，你可以让你网页在微信内调用拍照、语音、支付、位置、扫一扫这些只能在微信内使用的功能。进过下面的步骤，一步一步的配置，就可以让你正确的在项目中引入微信的JS-SDK。</p><h2>引入微信的JS文件</h2><p>微信的javascript文件的链接是： <a href=\"https://link.zhihu.com/?target=http%3A//res.wx.qq.com/open/js/jweixin-1.2.0.js\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">res.wx.qq.com/open/js/j</span><span class=\"invisible\">weixin-1.2.0.js</span><span class=\"ellipsis\"></span></a></p><p>但是只支持使用 AMD/CMD 标准模块加载方法加载。于是我就在npm的官网上找到了发布后的js-sdk，支持CommonJS的引入方式。npm的地址在 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/weixin-js-sdk\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>。可以在你的项目中使用如下命令安装。</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install weixin-js-sdk</code></pre></div><p>安装好后可以使用一下两种方式进行引入。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/* 使用CommonJs规范引入 */</span>\n<span class=\"k\">const</span> <span class=\"nx\">wx</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;weixin-js-sdk&#39;</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/* 使用ES6模块引入 */</span>\n<span class=\"k\">import</span> <span class=\"nx\">wx</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;weixin-js-sdk&#39;</span><span class=\"p\">;</span>\n</code></pre></div><h2>为wx.config实现权限签名算法</h2><p>如果你安装大部分你的教程来，他们会让你使用wx.config注入，获取权限。但是使用wx.config的前提是你必须要先实现权限签名算法。而权限签名算法的关键就是jsapi_ticket。关于jsapi_ticketm，官方的描述如下。</p><blockquote> 生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是企业号号用于调用微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket。<br/> </blockquote><p>大概什么意思呢，看官方文档可能有点懵。大概意思就是：你想用我的sdk？可以，我给你个2个小时有效期的调用凭证。这个凭证我每天发给你的次数有限，所以你要保存好，不然到时候再想要凭证，没门。</p><p>这是通（很）俗（皮）的解释。下面来点正常的解释。想要获取jsapi_ticket，你就需要向下面这个url:<a href=\"https://link.zhihu.com/?target=https%3A//qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket%3Faccess_token%3DACCESS_TOKE\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">qyapi.weixin.qq.com/cgi</span><span class=\"invisible\">-bin/get_jsapi_ticket?access_token=ACCESS_TOKE</span><span class=\"ellipsis\"></span></a>发送Http GET请求，需要带上两个参数。access_token和type，如果你是获取jsapi_ticket，那么type就是固定的，值为jsapi。就可以在返回里面拿到ticket。并且你需要在服务器端缓存返回拿到的ticket。这个ticket就是上面通俗解释里的凭证，有效期两个小时，此后前端所有需要用到ticket的地方，后端需要去判断，如果ticket仍然没有过期，就从缓存中取出返回给前端，如果失效，就再发一个GET接口，获取后再存入缓存并且返回给前端。如果请求正常的话，会返回下列数据。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n    <span class=\"s1\">&#39;errcode&#39;</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;errmsg&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;ticket&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;expires_in&#39;</span><span class=\"o\">:</span> <span class=\"mi\">7200</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>拿到了jsapi_ticket之后，我们就可以开始进行权限签名算法了。算法的流程如下。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f524facff3e45c94cd1fa3b745d9a49c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"476\" class=\"origin_image zh-lightbox-thumb\" width=\"876\" data-original=\"https://pic1.zhimg.com/v2-f524facff3e45c94cd1fa3b745d9a49c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;876&#39; height=&#39;476&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"476\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"876\" data-original=\"https://pic1.zhimg.com/v2-f524facff3e45c94cd1fa3b745d9a49c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f524facff3e45c94cd1fa3b745d9a49c_b.jpg\"/></figure><p> 这个逻辑需要在后端实现。为什么会在下文给出。将需要用到js-sdk页面的url、以及jsapi_ticket、noncestr（随机字符串）、timestamp（当前的时间戳）进行字典序 排序，然后使用URL键值对的格式 （即 key1=value1&amp;key2=value2…）拼接成字符串string。然后将这个string使用sha1加密，得到的结果就是signature了。然后将signature、timestamp、nonceStr返回给前端，wx.config需要用到这些数据。然后将它们用这里需要特别注意一下，官方的注意文档如下。</p><blockquote> 注意事项<br/> </blockquote><ol><li> 签名用的noncestr和timestamp必须与wx.config中的nonceStr和timestamp相同。<br/> </li><li> 签名用的url必须是调用JS接口页面的完整URL。<br/> </li><li> 出于安全考虑，开发者必须在服务器端实现签名的逻辑。<br/> </li></ol><p>这里的官方文档其实也没有那么官方，其实就是告诉我们，实现上述签名逻辑必须在服务器，以及noncestr和timestamp必须要和在服务器端签名所使用的一致，还有就是调用微信js-sdk的页面的url必须要跟服务端签名所使用的url一致。所有在服务端可以直接从请求的header里面的referer获取。</p><p>你把接口做好之后，只要能够正确的返回signature、nonceStr、timestamp（有后端的更好，直接找他们要接口就好了），就可以愉快的进行下一步了。</p><h2>通过config接口注入权限验证配置</h2><p>官方的描述如下。</p><blockquote> 所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。<br/> </blockquote><p>在进行了正确的微信javascript文件引入后（看上面）在页面中调用如下代码就可以注入权限验证配置。下面是官方给的样例代码。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">({</span>\n    <span class=\"nx\">debug</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"c1\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n</span><span class=\"c1\"></span>    <span class=\"nx\">appId</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 必填，企业号的唯一标识，此处填写企业号corpid\n</span><span class=\"c1\"></span>    <span class=\"nx\">timestamp</span><span class=\"o\">:</span> <span class=\"p\">,</span> <span class=\"c1\">// 必填，生成签名的时间戳\n</span><span class=\"c1\"></span>    <span class=\"nx\">nonceStr</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 必填，生成签名的随机串\n</span><span class=\"c1\"></span>    <span class=\"nx\">signature</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"c1\">// 必填，签名，见附录1\n</span><span class=\"c1\"></span>    <span class=\"nx\">jsApiList</span><span class=\"o\">:</span> <span class=\"p\">[]</span> <span class=\"c1\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div><p>下面我给一个样例数据。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// data就是上一步说的后端返回的那些数据，包含signature、nonceStr、timestamp\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">getJsSDK</span><span class=\"p\">();</span>\n\n<span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">({</span>\n    <span class=\"nx\">debug</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">appId</span><span class=\"o\">:</span> <span class=\"s1\">&#39;你的appId&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">timestamp</span><span class=\"o\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">timestamp</span><span class=\"p\">,</span>\n    <span class=\"nx\">nonceStr</span><span class=\"o\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">nonceStr</span><span class=\"p\">,</span>\n    <span class=\"nx\">signature</span><span class=\"o\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">signature</span><span class=\"p\">,</span>\n    <span class=\"nx\">jsApiList</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"s1\">&#39;onMenuShareTimeline&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 分享到朋友圈\n</span><span class=\"c1\"></span>      <span class=\"s1\">&#39;onMenuShareAppMessage&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 分享给朋友\n</span><span class=\"c1\"></span>      <span class=\"s1\">&#39;onMenuShareQQ&#39;</span><span class=\"p\">,</span><span class=\"c1\">// 分享到QQ\n</span><span class=\"c1\"></span>      <span class=\"s1\">&#39;onMenuShareWeibo&#39;</span><span class=\"p\">,</span><span class=\"c1\">// 分享到腾讯微博\n</span><span class=\"c1\"></span>      <span class=\"s1\">&#39;onMenuShareQZone&#39;</span><span class=\"p\">,</span><span class=\"c1\">// 分享到QQ空间\n</span><span class=\"c1\"></span>    <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2>注入后的生命周期函数</h2><p>在调用config后会有两个结果，成（这）功（是）和（废）失（话）败。可以通过微信提供的两个接口来进行事件回调。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"c1\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n\n<span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">){</span>\n    <span class=\"c1\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div><h2>调用分享接口</h2><p>在ready()中调用具体的分享接口。如分享到朋友圈、好友、QQ空间。代码如下。我把接口的所有的钩子函数都给了出来。其实常用的就只有的success和cancel。根据你个人的需求而定。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"cm\">/* 分享到朋友圈 */</span>\n  <span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">onMenuShareTimeline</span><span class=\"p\">({</span>\n    <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 分享标题\n</span><span class=\"c1\"></span>    <span class=\"nx\">link</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 分享链接，该链接域名必须与当前企业的可信域名一致\n</span><span class=\"c1\"></span>    <span class=\"nx\">imgUrl</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 分享图标\n</span><span class=\"c1\"></span>    <span class=\"nx\">success</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 用户确认分享后执行的回调函数\n</span><span class=\"c1\"></span>    <span class=\"p\">},</span>\n    <span class=\"nx\">cancel</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 用户取消分享后执行的回调函数\n</span><span class=\"c1\"></span>    <span class=\"p\">},</span>\n    <span class=\"nx\">trigger</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 监听Menu中的按钮点击时触发的方法\n</span><span class=\"c1\"></span>    <span class=\"p\">},</span>\n    <span class=\"nx\">complete</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 接口调用完成时执行的回调函数，无论成功或失败都会执行\n</span><span class=\"c1\"></span>    <span class=\"p\">},</span>\n    <span class=\"nx\">fail</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 接口调用失败时执行的回调函数\n</span><span class=\"c1\"></span>    <span class=\"p\">},</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>微信官方文档在这给了一个特别的提醒。</p><blockquote> 注意：不要尝试在trigger中使用ajax异步请求修改本次分享的内容，因为客户端分享操作是一个同步操作，这时候使用ajax的回包会还没有返回。<br/> </blockquote><p>大概意思就是，不要尝试在钩子函数中动态的修改title啊link啊的值，因为分享是同步的操作，ajax的值返回回来的时候分享的操作已经结束了。比起这个，要注意的是link字段，它的域名必须要跟微信后台配置的JS安全域域名一致，否则分享会失败。到这为止，微信js-sdk的接入就完成了。还有问题可以直接留言或者联系我。</p><h2>写在后面</h2><p>最后还需要注意一点的是，如果页面的url发生了变化，在新的url下调用js-sdk一定要再调用一次签名接口，用新的url再进行一次签名，否则会调用不成功。</p><p>微信官方文档地址在 <a href=\"https://link.zhihu.com/?target=http%3A//qydev.weixin.qq.com/wiki/index.php%3Ftitle%3D%25E5%25BE%25AE%25E4%25BF%25A1JS-SDK%25E6%258E%25A5%25E5%258F%25A3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "react-router", 
                    "tagLink": "https://api.zhihu.com/topics/20051704"
                }
            ], 
            "comments": [
                {
                    "userName": "林志鹏", 
                    "userLink": "https://www.zhihu.com/people/4324e37aac091e55f1054d596b41bce6", 
                    "content": "<p>然而在某些低版本的微信中，pushstate并不会改变webview的url，然后你重新签名以后就导致url和签名不匹配。</p><p><br></p><p>希望把那部分内容补上，不然文章和微信的官方文档就一样了，没有任何价值</p>", 
                    "likes": 2, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48943796", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "WebAssembly完全入门——了解wasm的前世今身", 
            "content": "<h2>前言</h2><p>接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比较模糊和笼统。感觉看了之后收获没有达到预期，要么是文章中的例子自己去实操不能成功，要么就是不知所云、一脸蒙蔽。本着业务催生技术的态度，这边文章就诞生了。前部分主要是对WebAssembly的背景做一些介绍，WebAssembly是怎么出现的，优势在哪儿。如果想直接开始撸代码试试效果，可以直接跳到最后一个<a href=\"https://zhuanlan.zhihu.com/write#WebAssembly%E5%AE%9E%E6%93%8D\" class=\"internal\">板块</a>。</p><h2>WebAssembly是什么？</h2><h2>定义</h2><p>首先我们给它下个定义。</p><blockquote> WebAssembly 或者 wasm 是一个可移植、体积小、加载快并且兼容 Web 的全新格式<br/> </blockquote><h2>例子</h2><p>当然，我知道，即使你看了定义也不知道WebAssembly到底是什么东西。废话不多说，我们通过一个简单的例子来看看WebAssembly到底是什么。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-128a1a37773a4ed26e8eb546ce29ae46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1368\" data-rawheight=\"868\" class=\"origin_image zh-lightbox-thumb\" width=\"1368\" data-original=\"https://pic3.zhimg.com/v2-128a1a37773a4ed26e8eb546ce29ae46_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1368&#39; height=&#39;868&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1368\" data-rawheight=\"868\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1368\" data-original=\"https://pic3.zhimg.com/v2-128a1a37773a4ed26e8eb546ce29ae46_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-128a1a37773a4ed26e8eb546ce29ae46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上图的左侧是用C++实现的求递归的函数。中间是十六进制的Binary Code。右侧是指令文本。可能有人就问，这跟WebAssembly有个屁的关系？其实，中间的十六进制的Binary Code就是WebAssembly。</p><h2>编译目标</h2><p>大家可以看到，其可写性和可读性差到无法想象。那是因为WebAssembly不是用来给各位用手<b>一行一行撸</b>的代码，WebAssembly是一个<b>编译目标</b>。什么是编译目标？当我们写TypeScript的时候，Webpack最后打包生成的JavaScript文件就是编译目标。可能大家已经猜到了，上图的Binary就是左侧的C++代码经过编译器编译之后的结果。</p><h2>WebAssembly的由来</h2><h2>性能瓶颈</h2><p>在业务需求越来越复杂的现在，前端的开发逻辑越来越复杂，相应的代码量随之变的越来越多。相应的，整个项目的起步的时间越来越长。在性能不好的电脑上，启动一个前端的项目甚至要花上十多秒。这些其实还好，说明前端越来越受到重视，越来越多的人开始进行前端的开发。</p><p>但是除了逻辑复杂、代码量大，还有另一个原因是JavaScript这门语言本身的缺陷，JavaScript没有静态变量类型。这门解释型编程语言的作者Brendan Eich，仓促的创造了这门如果被广泛使用的语言，以至于JavaScript的发展史甚至在某种层面上变成了填坑史。为什么说没有静态类型会降低效率。这会涉及到一些JavaScript引擎的一些知识。</p><h2>静态变量类型所带来的问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-37f15c203ed15010363655a8206a75dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-37f15c203ed15010363655a8206a75dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;605&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-37f15c203ed15010363655a8206a75dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-37f15c203ed15010363655a8206a75dd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这是Microsoft Edge浏览器的JavaScript引擎ChakraCore的结构。我们来看一看我们的JavaScript代码在引擎中会经历什么。</p><ul><li>JavaScript文件会被下载下来。</li><li>然后进入Parser，Parser会把代码转化成AST（抽象语法树）.</li><li>然后根据抽象语法树，Bytecode Compiler字节码编译器会生成引擎能够直接阅读、执行的字节码。</li><li>字节码进入翻译器，将字节码一行一行的翻译成效率十分高的Machine Code.</li></ul><p>在项目运行的过程中，引擎会对执行次数较多的function记性优化，引擎将其代码编译成Machine Code后打包送到顶部的Just-In-Time(JIT) Compiler，下次再执行这个function，就会直接执行编译好的Machine Code。但是由于JavaScript的动态变量，上一秒可能是Array，下一秒就变成了Object。那么上一次引擎所做的优化，就失去了作用，此时又要再一次进行优化。</p><h2>asm.js出现</h2><p>所以为了解决这个问题，WebAssembly的前身，asm.js诞生了。asm.js是一个Javascript的严格子集，合理合法的asm.js代码一定是合理合法的JavaScript代码，但是反之就不成立。同WebAssembly一样，asm.js不是用来给各位用手<b>一行一行撸</b>的代码，asm.js是一个<b>编译目标</b>。它的可读性、可读性虽然比WebAssembly好，但是对于开发者来说，仍然是无法接受的。</p><p>asm.js强制静态类型，举个例子。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">asmJs</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;use asm&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">myInt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"o\">|</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">myDouble</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"mf\">1.1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>为什么asm.js会有静态类型呢？因为像<code>0 | 0</code>这样的，代表这是一个Int的数据，而<code>+1.1</code>则代表这是一个Double的数据。</p><h2>asm.js不能解决所有的问题</h2><p>可能有人有疑问，这问题不是解决了吗？那为什么会有WebAssembly？WebAssembly又解决了什么问题？大家可以再看一下上面的ChakraCore的引擎结构。无论asm.js对静态类型的问题做的再好，它始终逃不过要经过Parser，要经过ByteCode Compiler，而这两步是JavaScript代码在引擎执行过程当中消耗时间最多的两步。而WebAssembly不用经过这两步。这就是WebAssembly比asm.js更快的原因。</p><h2>WebAssembly横空出世</h2><p>所以在2015年，我们迎来了WebAssembly。WebAssembly是经过编译器编译之后的代码，体积小、起步快。在语法上完全脱离JavaScript，同时具有沙盒化的执行环境。WebAssembly同样的强制静态类型，是C/C++/Rust的编译目标。</p><h2>WebAssembly的优势</h2><h2>WebAssembly和asm.js性能对比</h2><p>下面的图是Unity WebGL使用和不使用WebAssembly的起步时间对比的一个BenchMark，给大家当作一个参考。 可以看到，在FireFox中，WebAssembly和asm.js的性能差异达到了2倍，在Chrome中达到了3倍，在Edge中甚至达到了6倍。通过这些对比也可以从侧面看出，目前所有的主流浏览器都已经支持WebAssembly V1（Node  &gt;= 8.0.0）. </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7dae53f4f0261aa45cdf6afedca5884d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"706\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-7dae53f4f0261aa45cdf6afedca5884d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;706&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"706\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-7dae53f4f0261aa45cdf6afedca5884d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7dae53f4f0261aa45cdf6afedca5884d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>与JavaScript做对比</h2><p>我自己在一个用<code>create-react-app</code>新建的项目中，分别对比了WebAssembly版本和原生JavaScript版本的递归无优化的Fibonacci函数，下图是这两个函数在值是45、48、50的时候的性能对比。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-934c5e761a29660d5ea031627494c95e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"864\" class=\"origin_image zh-lightbox-thumb\" width=\"1320\" data-original=\"https://pic3.zhimg.com/v2-934c5e761a29660d5ea031627494c95e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1320&#39; height=&#39;864&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"864\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1320\" data-original=\"https://pic3.zhimg.com/v2-934c5e761a29660d5ea031627494c95e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-934c5e761a29660d5ea031627494c95e_b.jpg\"/></figure><p> 看图说话，这就是WebAssembly与JavaScript很实际的一个性能对比。几乎稳定的是JavaScript的两倍。</p><h2>WebAssembly在大型项目中的应用</h2><p>在这里能够举的例子还是很多，比如AutoCAD、GoogleEarth、Unity、Unreal、PSPDKit、WebPack等等。拿其中几个来简单说一下。</p><h2>AutoCAD</h2><p>这是一个用于画图的软件，在很长的一段时间是没有Web的版本的，原因有两个，其一，是Web的性能的确不能满足他们的需求。其二，在WebAssembly没有面世之前，AutoCAD是用C++实现的，要将其搬到Web上，就意味着要重写他们所有的代码，这代价十分的巨大。</p><p>而在WebAssembly面世之后，AutoCAD得以利用编译器，将其沉淀了30多年的代码直接编译成WebAssembly，同时性能基于之前的普通Web应用得到了很大的提升。正是这些原因，得以让AutoCAD将其应用从Desktop搬到Web中。</p><h2>Google Earth</h2><p>Google Earth也就是谷歌地球，因为需要展示很多3D的图像，对性能要求十分高，所以采取了一些Native的技术。最初的时候就连Google Chrome浏览器都不支持Web的版本，需要单独下载Google Earth的Destop应用。而在WebAssembly之后呢，谷歌地球推出了Web的版本。而据说下一个可以运行谷歌地球的浏览器是FireFox。</p><h2>Unity和Unreal游戏引擎</h2><p>这里给两个油管的链接自己体验一下，大家注意科学上网。 - Unity WebGL的戳<a href=\"https://link.zhihu.com/?target=https%3A//youtu.be/rIyIlATjNcE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a> - Unreal引擎的戳<a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DTwuIRcpeUWE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><h2>WebAssembly要取代JavaScript？</h2><p>答案是否定的，请看下图。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-94e6a1c61962e27e14ee97109d3c399d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"654\" class=\"content_image\" width=\"342\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;342&#39; height=&#39;654&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"654\" class=\"content_image lazy\" width=\"342\" data-actualsrc=\"https://pic2.zhimg.com/v2-94e6a1c61962e27e14ee97109d3c399d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>大家可以看到这是一个协作关系。WebAssembly是被设计成JavaScript的一个完善、补充，而不是一个替代品。WebAssembly将很多编程语言带到了Web中。但是JavaScript因其不可思议的能力，仍然将保留现有的地位。</p><h2>什么时候使用WebAssembly？</h2><p>说了这么多，我到底什么时候该使用它呢？总结下来，大部分情况分两个点。 - 对性能有很高要求的App/Module/游戏 - 在Web中使用C/C++/Rust/Go的库 举个简单的例子。如果你要实现的Web版本的Ins或者Facebook， 你想要提高效率。那么就可以把其中对图片进行压缩、解压缩、处理的工具，用C++实现，然后再编译回WebAssembly。</p><h2>WebAssembly的几个开发工具</h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/AssemblyScript/assemblyscript\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AssemblyScript</a>。支持直接将TypeScript编译成WebAssembly。这对于很多前端同学来说，入门的门槛还是很低的。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/kripken/emscripten\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Emscripten</a>。可以说是WebAssembly的灵魂工具不为过，上面说了很多编译，这个就是那个编译器。将其他的高级语言，编译成WebAssembly。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/WebAssembly/wabt\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WABT</a>。是个将WebAssembly在字节码和文本格式相互转换的一个工具，方便开发者去理解这个wasm到底是在做什么事。</li></ul><h2>WebAssembly的意义</h2><p>在我的个人理解上，WebAssembly并没有要替代JavaScript，一统天下的意思。我总结下来就两个点。 - 给了Web更好的性能 - 给了Web更多的可能 关于WebAssembly的性能问题，之前也花了很大的篇幅讲过了。而更多的可能，随着WebAssembly的技术越来越成熟，势必会有更多的应用，从Desktop被搬到Web上，这会使本来已经十分强大的Web更加丰富和强大。</p><h2>WebAssembly实操</h2><p>要进行这个实际操作，你需要安装上文提到过的编译器<a href=\"https://link.zhihu.com/?target=https%3A//github.com/kripken/emscripten\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Emscripten</a>，然后按照<a href=\"https://link.zhihu.com/?target=http%3A//webassembly.org.cn/getting-started/developers-guide/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这个</a>步骤去安装。以下的步骤都默认为你已经安装了Emscripten。</p><h2>WebAssembly在Node中的应用</h2><h2>导入Emscripten环境变量</h2><p>进入到你的emscripten安装目录，执行以下代码。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">source</span> emsdk/emsdk_env.sh</code></pre></div><h2>新建C文件</h2><p>用C实现一个求和文件<code>test.c</code>，如下。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">int</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2>使用Emscripten编译C文件</h2><p>在同样的目录下执行如下代码。</p><div class=\"highlight\"><pre><code class=\"language-bash\">emcc test.c -Os -s <span class=\"nv\">WASM</span><span class=\"o\">=</span><span class=\"m\">1</span> -s <span class=\"nv\">SIDE_MODULE</span><span class=\"o\">=</span><span class=\"m\">1</span> -o test.wasm</code></pre></div><p><code>emcc</code>就是Emscripten编译器，<code>test.c</code>是我们的输入文件，<code>-Os</code>表示这次编译需要优化，<code>-s WASM=1</code>表示输出wasm的文件，因为默认的是输出asm.js，<code>-s SIDE_MODULE=1</code>表示就只要这一个模块，不要给我其他乱七八糟的代码，<code>-o test.wasm</code>是我们的输出文件。</p><p>编译成功之后，当前目录下就会生成<code>test.wasm</code>。</p><h2>编写在Node中调用的代码</h2><p>新建一个js文件<code>test.js</code>。代码如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Uint8Array</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./test.wasm&#39;</span><span class=\"p\">));</span>\n<span class=\"k\">const</span> <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">memoryBase</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nx\">tableBase</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nx\">memory</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">Memory</span><span class=\"p\">({</span>\n        <span class=\"nx\">initial</span><span class=\"o\">:</span> <span class=\"mi\">256</span>\n    <span class=\"p\">}),</span>\n    <span class=\"nx\">table</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">Table</span><span class=\"p\">({</span>\n        <span class=\"nx\">initial</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"nx\">element</span><span class=\"o\">:</span> <span class=\"s1\">&#39;anyfunc&#39;</span>\n    <span class=\"p\">}),</span>\n    <span class=\"nx\">abort</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">throw</span> <span class=\"s1\">&#39;abort&#39;</span><span class=\"p\">;}</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">instantiate</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">env</span><span class=\"o\">:</span> <span class=\"nx\">env</span><span class=\"p\">})</span>\n<span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">_add</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">));</span>\n<span class=\"p\">})</span>\n<span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">));</span>\n</code></pre></div><h2>执行test.js</h2><p>运行以下代码。</p><div class=\"highlight\"><pre><code class=\"language-bash\">node test.js</code></pre></div><p>然后就可以看到输出的结果109了。</p><h2>WebAssembly在React当中的应用</h2><h2>通过fetch的方法调用</h2><p>直接用fetch的方式。大概的调用方式如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">fibonacciUrl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./fibonacci.wasm&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span><span class=\"nx\">_fibonacci</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getExportFunction</span><span class=\"p\">(</span><span class=\"nx\">fibonacciUrl</span><span class=\"p\">);</span>\n</code></pre></div><p>而<code>getExportFunction</code>具体代码如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">getExportFunction</span> <span class=\"o\">=</span> <span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"nx\">memoryBase</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nx\">tableBase</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nx\">memory</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">Memory</span><span class=\"p\">({</span>\n        <span class=\"nx\">initial</span><span class=\"o\">:</span> <span class=\"mi\">256</span>\n      <span class=\"p\">}),</span>\n      <span class=\"nx\">table</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">Table</span><span class=\"p\">({</span>\n        <span class=\"nx\">initial</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"nx\">element</span><span class=\"o\">:</span> <span class=\"s1\">&#39;anyfunc&#39;</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">const</span> <span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">arrayBuffer</span><span class=\"p\">();</span>\n    <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">bytes</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">instantiate</span><span class=\"p\">(</span><span class=\"nx\">bytes</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">env</span><span class=\"o\">:</span> <span class=\"nx\">env</span><span class=\"p\">})</span>\n    <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">instance</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">return</span> <span class=\"nx\">instance</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>通过import C文件来调用</h2><p>先通过Import的方式来引进依赖。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">wasmC</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./add.c&#39;</span><span class=\"p\">;</span>\n</code></pre></div><p>然后进行调用。具体的方式如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">wasmC</span><span class=\"p\">({</span>\n  <span class=\"s1\">&#39;global&#39;</span><span class=\"o\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;env&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;memoryBase&#39;</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;tableBase&#39;</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;memory&#39;</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">Memory</span><span class=\"p\">({</span><span class=\"nx\">initial</span><span class=\"o\">:</span> <span class=\"mi\">256</span><span class=\"p\">}),</span>\n    <span class=\"s1\">&#39;table&#39;</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">WebAssembly</span><span class=\"p\">.</span><span class=\"nx\">Table</span><span class=\"p\">({</span><span class=\"nx\">initial</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"o\">:</span> <span class=\"s1\">&#39;anyfunc&#39;</span><span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">_add</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">fibonacci</span> <span class=\"o\">=</span> <span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">_fibonacci</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;C return value was&#39;</span><span class=\"p\">,</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5643</span><span class=\"p\">));</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fibonacci&#39;</span><span class=\"p\">,</span> <span class=\"nx\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>详细的代码在<a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/webassembly-in-react\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>，欢迎Star。</p><h2>写在后面</h2><p>如今技术出现的越来越多，但是实际上在工作中能够用到的，越并不是那么多。其实很多大厂所输出的一些技术，都是有业务场景的，有业务做推动。而不是凭空造轮子。所以总结下来适合自己的才是最好的。当然不是说不要了解新技术，了解新技术跟上步伐是十分必要的。我们现在不用，不代表不需要了解。相反，以后再遇到类似的业务场景时，我们就会多一种选择，可以更加从容的对待。</p><h2>关于我</h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//detectivehlh.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">个人博客</a></li></ul>", 
            "topic": [
                {
                    "tag": "Web 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550516"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "WebAssembly", 
                    "tagLink": "https://api.zhihu.com/topics/20024261"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/46506831", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "在SpringBoot中添加Redis", 
            "content": "<p></p><h2>前言</h2><p>在实际的开发中，会有这样的场景。有一个微服务需要提供一个查询的服务，但是需要查询的数据库表的数据量十分庞大，查询所需要的时间很长。 此时就可以考虑在项目中加入缓存。</p><h2>引入依赖</h2><p>在maven项目中引入如下依赖。并且需要在本地安装redis。</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>2.0.5.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><h2>配置redis</h2><p>在SpringBoot的配置文件中添加如下代码。</p><div class=\"highlight\"><pre><code class=\"language-xml\">redis:\n    host: 127.0.0.1\n    port: 6379\n    timeout: 5000\n    database: 0\n    jedis:\n      pool:\n        max-idle: 8\n        max-wait:\n        min-idle: 0</code></pre></div><h2>添加redis配置文件</h2><p>新建名为RedisConfig的配置类。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">com.fasterxml.jackson.annotation.JsonAutoDetect</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.fasterxml.jackson.annotation.PropertyAccessor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">com.fasterxml.jackson.databind.ObjectMapper</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.cache.CacheManager</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.cache.annotation.CachingConfigurerSupport</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.cache.annotation.EnableCaching</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.cache.interceptor.KeyGenerator</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Bean</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.cache.RedisCacheConfiguration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.cache.RedisCacheManager</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.cache.RedisCacheWriter</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.connection.RedisConnectionFactory</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.core.RedisTemplate</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.core.StringRedisTemplate</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.time.Duration</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * RedisConfig\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author detectiveHLH\n</span><span class=\"cm\"> * @date 2018-10-11 14:39\n</span><span class=\"cm\"> **/</span>\n<span class=\"nd\">@Configuration</span>\n<span class=\"nd\">@EnableCaching</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RedisConfig</span> <span class=\"kd\">extends</span> <span class=\"n\">CachingConfigurerSupport</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Bean</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">KeyGenerator</span> <span class=\"nf\">keyGenerator</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"n\">method</span><span class=\"o\">,</span> <span class=\"n\">params</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"n\">StringBuilder</span> <span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n            <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n            <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">params</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">RedisTemplate</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">redisTemplate</span><span class=\"o\">(</span><span class=\"n\">RedisConnectionFactory</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ObjectMapper</span> <span class=\"n\">om</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ObjectMapper</span><span class=\"o\">();</span>\n        <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"na\">setVisibility</span><span class=\"o\">(</span><span class=\"n\">PropertyAccessor</span><span class=\"o\">.</span><span class=\"na\">ALL</span><span class=\"o\">,</span> <span class=\"n\">JsonAutoDetect</span><span class=\"o\">.</span><span class=\"na\">Visibility</span><span class=\"o\">.</span><span class=\"na\">ANY</span><span class=\"o\">);</span>\n        <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"na\">enableDefaultTyping</span><span class=\"o\">(</span><span class=\"n\">ObjectMapper</span><span class=\"o\">.</span><span class=\"na\">DefaultTyping</span><span class=\"o\">.</span><span class=\"na\">NON_FINAL</span><span class=\"o\">);</span>\n        <span class=\"c1\">//redis序列化\n</span><span class=\"c1\"></span>        <span class=\"n\">Jackson2JsonRedisSerializer</span> <span class=\"n\">jackson2JsonRedisSerializer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Jackson2JsonRedisSerializer</span><span class=\"o\">(</span><span class=\"n\">Object</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">.</span><span class=\"na\">setObjectMapper</span><span class=\"o\">(</span><span class=\"n\">om</span><span class=\"o\">);</span>\n\n        <span class=\"n\">StringRedisTemplate</span> <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringRedisTemplate</span><span class=\"o\">(</span><span class=\"n\">factory</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">setValueSerializer</span><span class=\"o\">(</span><span class=\"n\">jackson2JsonRedisSerializer</span><span class=\"o\">);</span>\n        <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"na\">afterPropertiesSet</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">template</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 自定义CacheManager\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">CacheManager</span> <span class=\"nf\">cacheManager</span><span class=\"o\">(</span><span class=\"n\">RedisTemplate</span> <span class=\"n\">redisTemplate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//全局redis缓存过期时间\n</span><span class=\"c1\"></span>        <span class=\"n\">RedisCacheConfiguration</span> <span class=\"n\">redisCacheConfiguration</span> <span class=\"o\">=</span> <span class=\"n\">RedisCacheConfiguration</span><span class=\"o\">.</span><span class=\"na\">defaultCacheConfig</span><span class=\"o\">().</span><span class=\"na\">entryTtl</span><span class=\"o\">(</span><span class=\"n\">Duration</span><span class=\"o\">.</span><span class=\"na\">ofDays</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">));</span>\n        <span class=\"n\">RedisCacheWriter</span> <span class=\"n\">redisCacheWriter</span> <span class=\"o\">=</span> <span class=\"n\">RedisCacheWriter</span><span class=\"o\">.</span><span class=\"na\">nonLockingRedisCacheWriter</span><span class=\"o\">(</span><span class=\"n\">redisTemplate</span><span class=\"o\">.</span><span class=\"na\">getConnectionFactory</span><span class=\"o\">());</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">RedisCacheManager</span><span class=\"o\">(</span><span class=\"n\">redisCacheWriter</span><span class=\"o\">,</span> <span class=\"n\">redisCacheConfiguration</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>添加缓存配置</h2><p>在项目的service层中的实现类中，添加@Cacheable注解。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.HashMap</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * UserLoginServiceImpl\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author detectiveHLH\n</span><span class=\"cm\"> * @date 2018-10-10 17:20\n</span><span class=\"cm\"> **/</span>\n<span class=\"nd\">@Service</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">UserLoginServiceImpl</span> <span class=\"kd\">implements</span> <span class=\"n\">UserLoginService</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Autowired</span>\n    <span class=\"kd\">private</span> <span class=\"n\">UserLoginMapper</span> <span class=\"n\">userLoginMapper</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"nd\">@Cacheable</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;usercache&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">HashMap</span> <span class=\"nf\">getByUserName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">userName</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;此时没有走缓存&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">userLoginMapper</span><span class=\"o\">.</span><span class=\"na\">getByUserName</span><span class=\"o\">(</span><span class=\"n\">userName</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>然后调用一次该接口。就可以在redis中看到如下的key。</p><div class=\"highlight\"><pre><code class=\"language-text\">&#34;usercache::com.detectiveHLH.api.service.impl.UserLoginServiceImplgetByUserNameSolarFarm&#34;</code></pre></div><p>同时，可以在控制台中看到有&#34;此时没有走缓存&#34;的输出。然后再次调用该接口，就可以看到返回的速度明显变快，并且没有&#34;此时没有走缓存&#34;输出。说明 此时的接口走的是缓存。</p><p>博客： <a href=\"https://link.zhihu.com/?target=https%3A//detectivehlh.github.io./\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">个人博客地址</a></p>", 
            "topic": [
                {
                    "tag": "Redis", 
                    "tagLink": "https://api.zhihu.com/topics/19557280"
                }, 
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }, 
                {
                    "tag": "Java Web", 
                    "tagLink": "https://api.zhihu.com/topics/19622819"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40949511", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "html2canvas关于图片不能正常截取", 
            "content": "<h2><b>问题</b><br/></h2><p>首先说说遇到了什么问题。首先有这么一个需求。需要前端根据后端传过来数据，动态的生成图片。图片中的文案、背景图片、用户头像全部都是通过后端的接口获取。但是使用 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/niklasvh/html2canvas\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">html2canvas</a> 生成的canvas有些图片成功的在canvas里生成了。但是有些图片无论如何都显示不出来。</p><h2><b>官方文档</b><br/></h2><p>在项目里面操作了半天未果，google了半天未果。此时有些许绝望。突然想到了，为什么不去它的 <a href=\"https://link.zhihu.com/?target=https%3A//html2canvas.hertzen.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官网</a> 看看呢。于是乎我在官网上看到了下面的内容。</p><blockquote>Limitations<br/>All the images that the script uses need to reside under the same origin for it to be able to read them without the assistance of a proxy. Similarly, if you have other canvas elements on the page, which have been tainted with cross-origin content, they will become dirty and no longer readable by html2canvas.&lt;br/&gt;<br/>The script doesn&#39;t render plugin content such as Flash or Java applets.</blockquote><p>讲的啥呢，这里为英文不好的同学翻译一下。英语好的可以直接看上文。大概的意思就是在<a href=\"https://link.zhihu.com/?target=https%3A//github.com/niklasvh/html2canvas\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">html2canvas</a>里面，是使用脚本去操作的，也就是说使用脚本把html转换成canvas，但是有一个限制，那就是不能使用跨源的图片。如果使用了，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/niklasvh/html2canvas\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">html2canvas</a>将不会读取资源。<br/><br/>这也就是为什么转换出来的canvas有些图片一直是空白的原因。如果页面中有其他的canvas也使用了跨源的图片资源，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/niklasvh/html2canvas\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">html2canvas</a>都不会去读取。<br/></p><h2><br/><b>解决方案</b><br/></h2><p>对静态资源做一次转发并且在html2canvas的 <a href=\"https://link.zhihu.com/?target=https%3A//html2canvas.hertzen.com/configuration\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">配置</a>里面允许加载跨源资源,就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2018年8月1日更新</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p>在调试的时候console信息，发现html2canvas自带的log太多，眼花缭乱的。大家可以自行配置取消掉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>html2canvas第一个参数就是你需要转换成canvas的dom节点。第二个参数接受一个对象，里面就是各种配置文件。配置项可以看 [这里](<a href=\"https://link.zhihu.com/?target=https%3A//html2canvas.hertzen.com/configuration\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Options - html2canvas</a>)</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span> <span class=\"nx\">logging</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}</span>\n</code></pre></div><p>配置成上面这样，就可以取消html2canvas默认开启的log了。</p>", 
            "topic": [
                {
                    "tag": "图片", 
                    "tagLink": "https://api.zhihu.com/topics/19556414"
                }, 
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "Canvas", 
                    "tagLink": "https://api.zhihu.com/topics/19575286"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40848228", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "如何用vue-router为每个路由配置各自的title", 
            "content": "<h2><b>传统方法</b></h2><p><br/>以前在单页面路由中，就只能在html文件中定一个固定的网站的title。如果想要动态的去修改，需要使用如下的方法。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;这是一个标题&#39;</span><span class=\"p\">;</span>\n</code></pre></div><p>这样会让我们做很多无用功。显得十分蠢。<br/></p><p><br/><b>使用Vue-Router的方法</b></p><p><br/>首先打开/src/router/index.js文件。<br/>找到如下代码。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">vueRouter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Router</span><span class=\"p\">({</span>\n    <span class=\"nx\">routes</span><span class=\"p\">,</span>\n    <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;history&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">linkActiveClass</span><span class=\"o\">:</span> <span class=\"s1\">&#39;active-link&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">linkExactActiveClass</span><span class=\"o\">:</span> <span class=\"s1\">&#39;exact-active-link&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">scrollBehavior</span> <span class=\"p\">(</span><span class=\"nx\">to</span><span class=\"p\">,</span> <span class=\"nx\">from</span><span class=\"p\">,</span> <span class=\"nx\">savedPosition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">savedPosition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">savedPosition</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">x</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">});</span>\n</code></pre></div><p>vueRouter只是一个变量名。叫什么可以根据你自己项目的命名来找，只要是Router实例化的一个对象就OK。然后将上述代码替换成如下代码。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">vueRouter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Router</span><span class=\"p\">({</span>\n    <span class=\"nx\">routes</span><span class=\"p\">,</span>\n    <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;history&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">linkActiveClass</span><span class=\"o\">:</span> <span class=\"s1\">&#39;active-link&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">linkExactActiveClass</span><span class=\"o\">:</span> <span class=\"s1\">&#39;exact-active-link&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">scrollBehavior</span> <span class=\"p\">(</span><span class=\"nx\">to</span><span class=\"p\">,</span> <span class=\"nx\">from</span><span class=\"p\">,</span> <span class=\"nx\">savedPosition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">savedPosition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">savedPosition</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">x</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">});</span>\n  <span class=\"nx\">vueRouter</span><span class=\"p\">.</span><span class=\"nx\">beforeEach</span><span class=\"p\">((</span><span class=\"nx\">to</span><span class=\"p\">,</span> <span class=\"nx\">from</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* 路由发生变化修改页面title */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">next</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n</code></pre></div><p>代码的逻辑就是在路由将要发生变化的时候，用传统的方法来对每个将要跳转到的路由的title进行修改。</p><h2><br/><b>配置路由</b></h2><p>配置好了index.js之后我们就需要去给每个router配置自己的title了。例如。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Home&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">component</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"s1\">&#39;@/views/Home/Home&#39;</span><span class=\"p\">),</span>\n  <span class=\"nx\">meta</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;首页&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>给每个路由加上一个叫meta的属性。meta属性里的属性叫title，也就是每个路由独特的title了。加上之后，浏览器里每个路由都会有自己设置好的title了。</p>", 
            "topic": [
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "VueRouter", 
                    "tagLink": "https://api.zhihu.com/topics/20070653"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40669466", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "在vue中使用Autoprefixed", 
            "content": "<p>为了使我们的项目兼容各种浏览器，我们可能会在开发中写大量的前缀。即使有了IDE为我们提供了便捷的方式。但是仍然需要我们去花时间和精力。而这样会浪费我们很多的时间。为了在开发中提升团队的开发效率，并且同时节省时间，我们引入了<a href=\"https://link.zhihu.com/?target=https%3A//github.com/postcss/autoprefixer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">autoprefixed</a>。搭配webpack使用，在每次打包的时候自动的给我们的样式加上前缀来兼容不同的浏览器。<br/><br/><b>安装依赖包</b><br/>如果你是使用vue-cli构建的项目。首先执行以下代码安装依赖包。</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install autoprefixer postcss postcss-loader -D</code></pre></div><p><br/><b>修改vue-loader配置文件</b><br/>修改目录/build/vue-loader.conf.js文件。文件的原本代码应该如下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">loaders</span><span class=\"o\">:</span> <span class=\"nx\">utils</span><span class=\"p\">.</span><span class=\"nx\">cssLoaders</span><span class=\"p\">({</span>\n    <span class=\"nx\">sourceMap</span><span class=\"o\">:</span> <span class=\"nx\">isProduction</span>\n      <span class=\"o\">?</span> <span class=\"nx\">config</span><span class=\"p\">[</span><span class=\"nx\">buildEnv</span><span class=\"p\">].</span><span class=\"nx\">productionSourceMap</span>\n      <span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">cssSourceMap</span><span class=\"p\">,</span>\n    <span class=\"nx\">extract</span><span class=\"o\">:</span> <span class=\"nx\">isProduction</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><br/>将以上代码，替换成如下代码。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">loaders</span><span class=\"o\">:</span> <span class=\"nx\">utils</span><span class=\"p\">.</span><span class=\"nx\">cssLoaders</span><span class=\"p\">({</span>\n    <span class=\"nx\">sourceMap</span><span class=\"o\">:</span> <span class=\"nx\">isProduction</span>\n      <span class=\"o\">?</span> <span class=\"nx\">config</span><span class=\"p\">[</span><span class=\"nx\">buildEnv</span><span class=\"p\">].</span><span class=\"nx\">productionSourceMap</span>\n      <span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">dev</span><span class=\"p\">.</span><span class=\"nx\">cssSourceMap</span><span class=\"p\">,</span>\n    <span class=\"nx\">extract</span><span class=\"o\">:</span> <span class=\"nx\">isProduction</span>\n  <span class=\"p\">}),</span>\n  <span class=\"nx\">postcss</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;autoprefixer&#39;</span><span class=\"p\">)({</span><span class=\"nx\">browsers</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;last 10 Chrome versions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;last 5 Firefox versions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Safari &gt;= 6&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ie &gt; 8&#39;</span><span class=\"p\">]})]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><br/><b>修改utils</b><br/>打开/build/utils.js，定位到如下代码。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">postcss</span><span class=\"o\">:</span> <span class=\"nx\">generateLoaders</span><span class=\"p\">()</span>\n</code></pre></div><p><br/>将上面的代码更改为如下代码。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">postcss</span><span class=\"o\">:</span> <span class=\"nx\">generateLoaders</span><span class=\"p\">([</span><span class=\"s1\">&#39;css?-autoprefixer&#39;</span><span class=\"p\">])</span>\n</code></pre></div><p><br/>重新启动项目，就可以通过chrome的开发者工具，可以看到编译后的css文件，会自动的加上兼容性的前缀。就可以放心的写css代码了。</p>", 
            "topic": [
                {
                    "tag": "Vue.js", 
                    "tagLink": "https://api.zhihu.com/topics/20022242"
                }, 
                {
                    "tag": "前端兼容", 
                    "tagLink": "https://api.zhihu.com/topics/19998964"
                }, 
                {
                    "tag": "PostCSS", 
                    "tagLink": "https://api.zhihu.com/topics/20050275"
                }
            ], 
            "comments": [
                {
                    "userName": "顾北轻梦", 
                    "userLink": "https://www.zhihu.com/people/affb0365154db91bf3c6bbd5f9e908fd", 
                    "content": "哦，那你很棒棒哦，点赞", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "LunhaoHu", 
                            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
                            "content": "<p>嘴动点赞吗</p>", 
                            "likes": 0, 
                            "replyToAuthor": "顾北轻梦"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40338091", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 1, 
            "title": "为hexo博客添加基于gitment评论功能", 
            "content": "<p><b>关于gitment</b><br/>gitment其实就是利用你的代码仓库的Issues，来实现评论。每一篇文章对应该代码仓库中的<br/>一个Issues,Issues中的评论对应你的博客每篇文章中的评论。如果你是用github的博客的话<br/>用起来将会十分的方便。<br/><br/><b>注册github应用</b><br/>首先需要在这注册一个<a href=\"https://link.zhihu.com/?target=https%3A//github.com/settings/applications/new\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OAuth Application</a>。在注册的过程中，你需要输入以下的内容：<br/>Application name 随意就好<br/>Homepage URL 你的博客地址，例如<a href=\"https://link.zhihu.com/?target=https%3A//detectivehlh.github.io/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">detectivehlh.github.io/</span><span class=\"invisible\"></span></a><br/>Application description 随意就好<br/>Authorization callback URL 也是博客地址，例如<a href=\"https://link.zhihu.com/?target=https%3A//detectivehlh.github.io/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">detectivehlh.github.io/</span><span class=\"invisible\"></span></a><br/>输入完成之后，点击注册就OK了。成功之后就会拿到<i>Client ID</i>和<i>Client Secret</i>，然后先进行一下步，暂时还不会用到这个。<br/><br/><b>修改主题配置文件</b><br/>下一步就是要修改你的博客所使用的主题的配置文件。定位到# Comments，添加如下代码。</p><div class=\"highlight\"><pre><code class=\"language-yaml\">gitment<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">  </span>enable<span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">  </span>mint<span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">  </span>count<span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">  </span>lazy<span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">  </span>cleanly<span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">  </span>language<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">  </span>github_user<span class=\"p\">:</span><span class=\"w\"> </span>detectiveHLH<span class=\"w\">\n</span><span class=\"w\">  </span>github_repo<span class=\"p\">:</span><span class=\"w\"> </span>detectiveHLH.github.io<span class=\"w\">\n</span><span class=\"w\">  </span>client_id<span class=\"p\">:</span><span class=\"w\"> </span>xxx<span class=\"w\">\n</span><span class=\"w\">  </span>client_secret<span class=\"p\">:</span><span class=\"w\"> </span>xxx<span class=\"w\">\n</span><span class=\"w\">  </span>proxy_gateway<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">  </span>redirect_protocol<span class=\"p\">:</span></code></pre></div><p>将上面代码的github_user和github_repo改成你自己的就可以了。<br/><br/><b>为gitment添加样式和layout</b><br/>打开你所使用的主题的目录。打开layout/_partial/comments.ejs，在原文件后加入如下代码。</p><div class=\"highlight\"><pre><code class=\"language-jade\">&lt;% if(theme.gitment.enable) { %&gt;\n&lt;div id=&#34;gitment_title&#34; class=&#34;gitment_title&#34;&gt;&lt;/div&gt;\n&lt;div id=&#34;container&#34; style=&#34;display:none&#34;&gt;&lt;/div&gt;\n&lt;link rel=&#34;stylesheet&#34; href=&#34;https://imsun.github.io/gitment/style/default.css&#34;&gt;\n&lt;script src=&#34;https://imsun.github.io/gitment/dist/gitment.browser.js&#34;&gt;&lt;/script&gt;\n&lt;script src=&#34;https://code.jquery.com/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;\n&lt;script&gt;\n  const myTheme = {\n    render(state, instance) {\n      const container = document.createElement(&#39;div&#39;);\n      container.lang = &#34;en-US&#34;;\n      container.className = &#39;gitment-container gitment-root-container&#39;;\n      container.appendChild(instance.renderHeader(state, instance));\n      container.appendChild(instance.renderEditor(state, instance));\n      container.appendChild(instance.renderComments(state, instance));\n      container.appendChild(instance.renderFooter(state, instance));\n      return container;\n    }\n  }\n\n  function showGitment() {\n    $(&#34;#gitment_title&#34;).attr(&#34;style&#34;, &#34;display:none&#34;);\n    $(&#34;#container&#34;).attr(&#34;style&#34;, &#34;&#34;).addClass(&#34;gitment_container&#34;);\n    var gitment = new Gitment({\n      id: decodeURI(window.location.pathname),\n      theme: myTheme,\n      owner: &#39;detectiveHLH&#39;,\n      repo: &#39;detectiveHLH.github.io&#39;,\n      oauth: {\n        client_id: &#39;xxx&#39;,\n        client_secret: &#39;xxx&#39;\n      }\n    });\n    gitment.render(&#39;container&#39;);\n  }\n\n  showGitment();\n&lt;/script&gt;\n&lt;% } %&gt;</code></pre></div><p>将上面代码中的owner、repo、oauth中的信息换成你自己的就可以了，client_id和client_secret<br/>就是第一步申请github应用得到的。我查了网上很多教程，都是需要点击按钮才能显示评论，我做了一点改动，引用之后可以直接的显示评论。然后打source/css/_partial/_gitment.styl，如果没有就新建文件。添加如下代码。<br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">gitment_title</span><span class=\"p\">:</span><span class=\"nd\">hover</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n  <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"mh\">#0a9caf</span><span class=\"p\">;</span>\n  <span class=\"k\">background-image</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"n\">background-position-x</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"n\">background-position-y</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">background-size</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"n\">background-repeat-x</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"n\">background-repeat-y</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">background-attachment</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">background-origin</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">background-clip</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">gitment_title</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"mh\">#0a9caf</span><span class=\"p\">;</span>\n  <span class=\"k\">border-top-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">);</span>\n  <span class=\"k\">border-top-style</span><span class=\"p\">:</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n  <span class=\"k\">border-top-width</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-right-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">);</span>\n  <span class=\"k\">border-right-style</span><span class=\"p\">:</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n  <span class=\"k\">border-right-width</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-bottom-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">);</span>\n  <span class=\"k\">border-bottom-style</span><span class=\"p\">:</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n  <span class=\"k\">border-bottom-width</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-left-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">);</span>\n  <span class=\"k\">border-left-style</span><span class=\"p\">:</span> <span class=\"kc\">solid</span><span class=\"p\">;</span>\n  <span class=\"k\">border-left-width</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-image-source</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">border-image-slice</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">border-image-width</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">border-image-outset</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">border-image-repeat</span><span class=\"p\">:</span> <span class=\"kc\">initial</span><span class=\"p\">;</span>\n  <span class=\"k\">border-radius</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-top-left-radius</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-top-right-radius</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-bottom-right-radius</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">border-bottom-left-radius</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">gitment_title</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">inline</span><span class=\"o\">-</span><span class=\"kc\">block</span><span class=\"p\">;</span>\n  <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">15</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">padding-top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">padding-right</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">padding-bottom</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">padding-left</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#0a9caf</span><span class=\"p\">;</span>\n  <span class=\"k\">cursor</span><span class=\"p\">:</span> <span class=\"kc\">pointer</span><span class=\"p\">;</span>\n  <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>然后打开source/css/style.styl，在原有文件后面添加如下代码，引入gitment相关的样式。</p><div class=\"highlight\"><pre><code class=\"language-less\">@import &#34;partial/_gitment.styl&#34;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>结束</b><br/><br/>到此为止，更新你的博客。就可以看到评论了。<br/></p><a href=\"https://link.zhihu.com/?target=https%3A//detectivehlh.github.io\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">detectiveHLH</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5bd1b33ff5d7d28c8dcbf45a7b44fe6d_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">detectiveHLH (detectiveHLH)</a><p></p>", 
            "topic": [
                {
                    "tag": "GitHub", 
                    "tagLink": "https://api.zhihu.com/topics/19566035"
                }, 
                {
                    "tag": "Hexo", 
                    "tagLink": "https://api.zhihu.com/topics/19851557"
                }, 
                {
                    "tag": "博客", 
                    "tagLink": "https://api.zhihu.com/topics/19550419"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40211152", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "Koa中更方便简单发送响应的方式", 
            "content": "<p><b>背景</b></p><p>最近做了很多node的后台项目，写了很多接口，但是发现随着接口的慢慢增多，需要写越来越来越多类似于下面这种代码。</p><div class=\"highlight\"><pre><code class=\"language-text\">ctx.body = {\n    data: {\n        name: &#39;test&#39;\n    },\n    status: {\n        code: 0,\n        message: success\n    }\n}</code></pre></div><p>写成这样还好，至少做到了所有接口返回的格式统一，如果没有在这方面做规范，那么后台的接口返回不统一，将会给前端带来很多的问题。而且每个接口都要写这么一大堆的代码。感觉是个特别麻烦的事。</p><p>所以koa2-response就这么诞生了。其实在写这篇文章之前，我已经在我的项目里面用了一段时间了，方便了我们的操作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>安装</b></p><div class=\"highlight\"><pre><code class=\"language-text\">npm install koa2-response</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>用法</b></p><div class=\"highlight\"><pre><code class=\"language-text\">const koa = require(&#39;koa&#39;);\nconst router = require(&#39;koa-router&#39;)();\nconst app = new koa();\nconst response = require(&#39;koa2-response&#39;);\n\nconst code = {\n  UNKNOWN_ERROR: [1, &#39;Sorry, you seem to have encountered some unknown errors.&#39;]\n}\n\nrouter\n  .get(&#39;/&#39;, (ctx, next) =&gt; {\n    response.success(ctx, {\n      name: &#39;test&#39;\n    })\n  })\n  .get(&#39;/error_test&#39;, (ctx, next) =&gt; {\n    response.error(ctx, code.UNKNOWN_ERROR);\n  })\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\napp.listen(3000);</code></pre></div><p>就这样很简单的就可以统一后端的返回数据，这个方法让我在项目中节约了很多时间。这个中间件还是在持续更新中，现在已经有的方法是response.success和response.error。</p><p>我打算继续更新一个方法叫response.throw，这可以让后台自定义返回的http状态码以及错误信息。例如，用户没有权限，http的状态码就应该是401，而不应该是我们自定义的code了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>写在后面</b></p><p>大家如果有更好的解决方案，希望不吝赐教。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/koa2-response\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5bd1b33ff5d7d28c8dcbf45a7b44fe6d_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">detectiveHLH/koa2-response</a><p></p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40210919", 
            "userName": "LunhaoHu", 
            "userLink": "https://www.zhihu.com/people/e061598b78e5abaf98fc327f79255ce4", 
            "upvote": 0, 
            "title": "koa2-response了解一下？", 
            "content": "<p><b>背景</b><br/>前不久把项目中用了很久的一个伪中间件撸成了一个npm包发布了出去。为什么叫伪中间件？正常的中间件的引用方式， 就拿body-parser为例。</p><div class=\"highlight\"><pre><code class=\"language-text\">var Koa = require(&#39;koa&#39;);\nvar bodyParser = require(&#39;koa-bodyparser&#39;);\n\nvar app = new Koa();\napp.use(bodyParser());\n\napp.use(async ctx =&gt; {\n  // the parsed body will store in ctx.request.body\n  // if nothing was parsed, body will be an empty object {}\n  ctx.body = ctx.request.body;\n});</code></pre></div><p>反观我撸的伪中间件的引用方式。长这样。</p><div class=\"highlight\"><pre><code class=\"language-text\">const response = require(&#39;../uitls/Response&#39;);\nconst data = {};\nresponse.success(ctx, data);</code></pre></div><p>为什么要这么干呢...纯粹是因为这个伪中间件与现有项目的耦合度太高了，为（就）了（是）方（懒）便在项目里面把这个伪中间件的引用方式从本地工具组件换成从node_modules里引用。例如这样。</p><div class=\"highlight\"><pre><code class=\"language-text\">const response = require(&#39;koa2-response&#39;);\nconst data = {};\nresponse.success(ctx, data);</code></pre></div><p>经过一番折腾，项目中的引用方式全部替换完了。然后我的学弟就看不下去了。。。提了一个pullrequest给我。把这个着实封装成了一个中间件。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>优化</b></p><p>首先是改变了引用方式，之前的方式是直接导出了一个对象，这个对象有两个方法，分别是success和error。使用这种方式，就必须要在每个controller中都引用一次，如下。</p><div class=\"highlight\"><pre><code class=\"language-text\">const response = require(&#39;../utils/Response&#39;);</code></pre></div><p>优化之后，只需要在node的入口文件中做如下操作就好。</p><div class=\"highlight\"><pre><code class=\"language-text\">const koa = require(&#39;koa&#39;);\nconst app = new koa();\nconst router = require(&#39;koa-router&#39;)();\nconst response = require(&#39;koa2-response&#39;);\n\nconst code = {\n  UNKNOWN_ERROR: [1, &#39;Sorry, you seem to have encountered some unknown errors.&#39;]\n}\n\nrouter\n  .get(&#39;/&#39;, (ctx, next) =&gt; {\n    ctx.success({\n      name: &#39;test&#39;\n    })\n  })\n  .get(&#39;/error_test&#39;, (ctx, next) =&gt; {\n     ctx.error(code.UNKNOWN_ERROR);\n  })\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\napp.listen(3000);\n\nconsole.log(`Server is running on port 3000`);</code></pre></div><p>对比两种方式可能有有些疑问，第一种方式，需要传入ctx，而改良之后的方式没有了ctx。那是因为在中间件中做了如下处理。</p><div class=\"highlight\"><pre><code class=\"language-text\">const { success, error } = require(&#39;./util&#39;);\n\nmodule.exports = async (ctx, next) =&gt; {\n    ctx.success = success.bind(null, ctx);\n    ctx.error = error.bind(null, ctx);\n    await next();\n}</code></pre></div><p>这样一来，koa的上下文ctx就会被当作ctx.success的默认第一个参数。针对不同模块的controller，不需要再去单独引用一次依赖包，可以直接通过ctx对中间件进行调用。相对于最初的版本，这样大大的提高了开发的效率。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>写在后面</b></p><p>对于这个，还是有些顾虑。如果koa之后更新的时候，也出现了success和error的方法，再引入这个包，就会覆盖掉koa方法。不知道会不会带来什么问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/koa2-response/pull/2\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-ba1cdd748ad8cb127bd4cf29055d16e0_ipico.jpg\" data-image-width=\"150\" data-image-height=\"150\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【优化】优化调用方式，真正实现koa2的中间件模式 by songchengen · Pull Request #2 · detectiveHLH/koa2-response</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/detectiveHLH/koa2-response\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5bd1b33ff5d7d28c8dcbf45a7b44fe6d_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">detectiveHLH/koa2-response</a><a href=\"https://link.zhihu.com/?target=https%3A//detectivehlh.github.io\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">detectiveHLH</a><p></p>", 
            "topic": [
                {
                    "tag": "koa", 
                    "tagLink": "https://api.zhihu.com/topics/20009619"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/detectiveHLH"
}
