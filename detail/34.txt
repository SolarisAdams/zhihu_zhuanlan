{
    "title": "UNIX网络编程入门", 
    "description": "UNIX网络编程入门", 
    "followers": [
        "https://www.zhihu.com/people/feng-ling-qing-yang", 
        "https://www.zhihu.com/people/tan-xiao-yang-95", 
        "https://www.zhihu.com/people/zhang-tong-xue-16", 
        "https://www.zhihu.com/people/xiao-bai-xiang-39", 
        "https://www.zhihu.com/people/nie-bing-yu", 
        "https://www.zhihu.com/people/ze-ran-74", 
        "https://www.zhihu.com/people/luoweisong", 
        "https://www.zhihu.com/people/xxbing8", 
        "https://www.zhihu.com/people/jackieastro", 
        "https://www.zhihu.com/people/wa-ha-ha-97-1", 
        "https://www.zhihu.com/people/liu-cheng-51-70", 
        "https://www.zhihu.com/people/nightwish-73", 
        "https://www.zhihu.com/people/j99999999955555", 
        "https://www.zhihu.com/people/silence-86-12", 
        "https://www.zhihu.com/people/zhangsan-97-39", 
        "https://www.zhihu.com/people/neko-44-39", 
        "https://www.zhihu.com/people/neko-28-33", 
        "https://www.zhihu.com/people/topcoder", 
        "https://www.zhihu.com/people/chen-xiao-dong-72-56", 
        "https://www.zhihu.com/people/po-wang-69", 
        "https://www.zhihu.com/people/yaolai-4", 
        "https://www.zhihu.com/people/lan-yu-yizhi", 
        "https://www.zhihu.com/people/luckydog-81", 
        "https://www.zhihu.com/people/feedbeef", 
        "https://www.zhihu.com/people/20181004-13", 
        "https://www.zhihu.com/people/du-du-27-4", 
        "https://www.zhihu.com/people/ji-zhi-shao-nian-14", 
        "https://www.zhihu.com/people/chu-yan-ze-31-31", 
        "https://www.zhihu.com/people/spongebob-53-24", 
        "https://www.zhihu.com/people/wang-song-77-47", 
        "https://www.zhihu.com/people/zhi-nan-er-jin-16", 
        "https://www.zhihu.com/people/zheng-xiang-bo-64", 
        "https://www.zhihu.com/people/li-sheng-guo-36", 
        "https://www.zhihu.com/people/aneng-57", 
        "https://www.zhihu.com/people/gong-he-wei-hong", 
        "https://www.zhihu.com/people/dong-wen-97", 
        "https://www.zhihu.com/people/038704", 
        "https://www.zhihu.com/people/cheng-hai-38-83", 
        "https://www.zhihu.com/people/xia-luo-di-74", 
        "https://www.zhihu.com/people/liang-fei-long-71", 
        "https://www.zhihu.com/people/zheng-si-wen", 
        "https://www.zhihu.com/people/xiao-kai-jun-70", 
        "https://www.zhihu.com/people/zhou-zeso", 
        "https://www.zhihu.com/people/charles-meng-17", 
        "https://www.zhihu.com/people/struct-78", 
        "https://www.zhihu.com/people/alx-52-14", 
        "https://www.zhihu.com/people/lao-cao-81-98", 
        "https://www.zhihu.com/people/dao-suan", 
        "https://www.zhihu.com/people/Gentle_Mei", 
        "https://www.zhihu.com/people/liu-yong-zhi-85", 
        "https://www.zhihu.com/people/apppur", 
        "https://www.zhihu.com/people/mu-zhi-dong-49", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/dfwe2015", 
        "https://www.zhihu.com/people/nj82930", 
        "https://www.zhihu.com/people/zhe-ge-11-93", 
        "https://www.zhihu.com/people/lan-se-hai-yang-54-23", 
        "https://www.zhihu.com/people/shallow-75-50", 
        "https://www.zhihu.com/people/matthew-chen", 
        "https://www.zhihu.com/people/si-wei-35-60", 
        "https://www.zhihu.com/people/leowin", 
        "https://www.zhihu.com/people/baondongchen", 
        "https://www.zhihu.com/people/osra7777", 
        "https://www.zhihu.com/people/tao-ba-79", 
        "https://www.zhihu.com/people/yourheart-84", 
        "https://www.zhihu.com/people/lu-jian-peng-22", 
        "https://www.zhihu.com/people/gongmw", 
        "https://www.zhihu.com/people/qwert25681mf", 
        "https://www.zhihu.com/people/liu-bing-kun-71", 
        "https://www.zhihu.com/people/luo-bing-31-48", 
        "https://www.zhihu.com/people/bihuchao", 
        "https://www.zhihu.com/people/zha-kan-feng-yun", 
        "https://www.zhihu.com/people/SteveDevin", 
        "https://www.zhihu.com/people/yang-yang-yang-62", 
        "https://www.zhihu.com/people/deng-yu-55", 
        "https://www.zhihu.com/people/zhui-ru-ku-hai-xiao-chen-gou", 
        "https://www.zhihu.com/people/qing-lin-25-67", 
        "https://www.zhihu.com/people/howard-wang-34", 
        "https://www.zhihu.com/people/duan-fang-liang", 
        "https://www.zhihu.com/people/houguagua", 
        "https://www.zhihu.com/people/nan-ke-2", 
        "https://www.zhihu.com/people/quan-bo-mian", 
        "https://www.zhihu.com/people/gameending", 
        "https://www.zhihu.com/people/wen-jie-16-47", 
        "https://www.zhihu.com/people/zhu-tou-san-8", 
        "https://www.zhihu.com/people/hu-michael", 
        "https://www.zhihu.com/people/li-zheng-cao-94", 
        "https://www.zhihu.com/people/gao-pei-gen", 
        "https://www.zhihu.com/people/syaka", 
        "https://www.zhihu.com/people/noeltoby", 
        "https://www.zhihu.com/people/kaiser-4-29", 
        "https://www.zhihu.com/people/song-yong-bin-26", 
        "https://www.zhihu.com/people/ming-que-89", 
        "https://www.zhihu.com/people/loading-chen", 
        "https://www.zhihu.com/people/zealoussnow", 
        "https://www.zhihu.com/people/nan-cheng-23-1-52", 
        "https://www.zhihu.com/people/AjenPan", 
        "https://www.zhihu.com/people/lan-zhi-hui", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/20tou", 
        "https://www.zhihu.com/people/nan-di-12-82", 
        "https://www.zhihu.com/people/hoverwinter", 
        "https://www.zhihu.com/people/iliuyao", 
        "https://www.zhihu.com/people/zong-you-72-38", 
        "https://www.zhihu.com/people/defei-wu", 
        "https://www.zhihu.com/people/kuang-zhuai-gua-niu", 
        "https://www.zhihu.com/people/xiao-feng-tao-8", 
        "https://www.zhihu.com/people/jia-zhou-91-16", 
        "https://www.zhihu.com/people/snow_wolf", 
        "https://www.zhihu.com/people/limbo-mr", 
        "https://www.zhihu.com/people/nai-he-qiao-shang-shuo-xiang-sheng", 
        "https://www.zhihu.com/people/rwj-85", 
        "https://www.zhihu.com/people/su-kan-kan-5591", 
        "https://www.zhihu.com/people/world-game-20171002", 
        "https://www.zhihu.com/people/openthedoors", 
        "https://www.zhihu.com/people/yangxs99", 
        "https://www.zhihu.com/people/jade-shan-10", 
        "https://www.zhihu.com/people/xiao-bei-1-78-43", 
        "https://www.zhihu.com/people/wu-jun-35", 
        "https://www.zhihu.com/people/huang-han-tao-54", 
        "https://www.zhihu.com/people/chen-tong-wang", 
        "https://www.zhihu.com/people/wu-wu-xu", 
        "https://www.zhihu.com/people/jian-kong-86", 
        "https://www.zhihu.com/people/shan-qing-xin-45", 
        "https://www.zhihu.com/people/yan-zi-ming-36-12", 
        "https://www.zhihu.com/people/jet-97-48", 
        "https://www.zhihu.com/people/she-sheng-45", 
        "https://www.zhihu.com/people/ldc-15", 
        "https://www.zhihu.com/people/zhi-hu-zhe-ye-26-42-69", 
        "https://www.zhihu.com/people/zzz-67-99-99", 
        "https://www.zhihu.com/people/paranoid-h", 
        "https://www.zhihu.com/people/yafeisun", 
        "https://www.zhihu.com/people/chen-kai-7-76", 
        "https://www.zhihu.com/people/mei-er-luo-si-92", 
        "https://www.zhihu.com/people/gong-cheng-shi-15-10", 
        "https://www.zhihu.com/people/lsl-1", 
        "https://www.zhihu.com/people/sale-48", 
        "https://www.zhihu.com/people/yi-yong-xiong-di", 
        "https://www.zhihu.com/people/fang-xing-70-64", 
        "https://www.zhihu.com/people/yao-yi-zheng-84", 
        "https://www.zhihu.com/people/li-hao-97-7-38", 
        "https://www.zhihu.com/people/alpha1-32", 
        "https://www.zhihu.com/people/LonelyWolfOfMobei", 
        "https://www.zhihu.com/people/han-junpengh", 
        "https://www.zhihu.com/people/xie-xiao-rong-23", 
        "https://www.zhihu.com/people/0x6a79", 
        "https://www.zhihu.com/people/devilsm", 
        "https://www.zhihu.com/people/ha-ha-17-96-16", 
        "https://www.zhihu.com/people/123-31-57-95", 
        "https://www.zhihu.com/people/zeroskyrim", 
        "https://www.zhihu.com/people/wang-zhe-50-20", 
        "https://www.zhihu.com/people/xiao-feng-can-yue-54-54-8", 
        "https://www.zhihu.com/people/lbnnewdm", 
        "https://www.zhihu.com/people/zhang-hong-jie-61", 
        "https://www.zhihu.com/people/fanyonglei", 
        "https://www.zhihu.com/people/luo-feng-84-73", 
        "https://www.zhihu.com/people/zhang-zhang-50-71", 
        "https://www.zhihu.com/people/gguu-35", 
        "https://www.zhihu.com/people/liu-zi-ming-30-47", 
        "https://www.zhihu.com/people/yue-si-26", 
        "https://www.zhihu.com/people/qianhuai", 
        "https://www.zhihu.com/people/yx-xkant", 
        "https://www.zhihu.com/people/hei-ming-17-20", 
        "https://www.zhihu.com/people/dan-dan-de-you-shang-48-33", 
        "https://www.zhihu.com/people/smu2015", 
        "https://www.zhihu.com/people/ziranjuanchow", 
        "https://www.zhihu.com/people/cocoon-51-77", 
        "https://www.zhihu.com/people/dalei", 
        "https://www.zhihu.com/people/li-yi-jun-7-90", 
        "https://www.zhihu.com/people/liu-jia-yi-72-51", 
        "https://www.zhihu.com/people/aguage", 
        "https://www.zhihu.com/people/you-ai-wu-wei-hao-qing-nian-58", 
        "https://www.zhihu.com/people/imsmart", 
        "https://www.zhihu.com/people/william-zhu-82", 
        "https://www.zhihu.com/people/xiao-han-13-60", 
        "https://www.zhihu.com/people/guo-zhao-xin-97", 
        "https://www.zhihu.com/people/jiang-jun-2-83-1", 
        "https://www.zhihu.com/people/Dots_", 
        "https://www.zhihu.com/people/zou-sheng-fu", 
        "https://www.zhihu.com/people/lian-zhi-wen", 
        "https://www.zhihu.com/people/yang-xa", 
        "https://www.zhihu.com/people/ma-ma-ma-26-54-17", 
        "https://www.zhihu.com/people/716g", 
        "https://www.zhihu.com/people/null-lui", 
        "https://www.zhihu.com/people/buerse", 
        "https://www.zhihu.com/people/chen-bo-cheng-80-73", 
        "https://www.zhihu.com/people/rjgcjt", 
        "https://www.zhihu.com/people/zhang-yan-9-8", 
        "https://www.zhihu.com/people/liu-wei-75-8-77", 
        "https://www.zhihu.com/people/yu-jian-45", 
        "https://www.zhihu.com/people/le-le-15-78-34", 
        "https://www.zhihu.com/people/zeng-yan-jian", 
        "https://www.zhihu.com/people/xuanxuan-zhu", 
        "https://www.zhihu.com/people/ye-qu-di-qi-zhang-m", 
        "https://www.zhihu.com/people/chen-yi-10-45", 
        "https://www.zhihu.com/people/BlackPwn", 
        "https://www.zhihu.com/people/Zou.yu", 
        "https://www.zhihu.com/people/inner-peace-86", 
        "https://www.zhihu.com/people/lao-zi-deng-chang-75", 
        "https://www.zhihu.com/people/tang-ao-23", 
        "https://www.zhihu.com/people/wei-sheng-60-67"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/70726694", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 12, 
            "title": "C/C++代码常规检查", 
            "content": "<p>一个不会写C/C++代码的黑客不是好黑客，那么如何提高自己的代码水平呢？我觉得是不停的写代码，不停的去犯错误，在错误中快速成长，然后3年之内，你就一览众山小了，因为加班状态下3年就是10000小时的专家定律，哈哈。</p><p>C/C++ Coding检查必须要做的2项：一个是cppcheck静态检查，一个是valgrind动态检查。</p><h2>C/C++代码静态检查</h2><p>Ubuntu下安装：<code>apt-get install cppcheck</code> </p><p>cppcheck静态检查整个代码目录：</p><div class=\"highlight\"><pre><code class=\"language-bash\">cppcheck demo</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a49b319d1bf5cdf7824a01a3ee3b57da_b.jpg\" data-rawwidth=\"486\" data-rawheight=\"322\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"486\" data-original=\"https://pic3.zhimg.com/v2-a49b319d1bf5cdf7824a01a3ee3b57da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;486&#39; height=&#39;322&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"486\" data-rawheight=\"322\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"486\" data-original=\"https://pic3.zhimg.com/v2-a49b319d1bf5cdf7824a01a3ee3b57da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a49b319d1bf5cdf7824a01a3ee3b57da_b.jpg\"/></figure><h2>C++代码动态检查</h2><p>Ubuntu下安装：<code>ap-get install valgrind</code> </p><p>valgrind使用方式如下，跟踪子进程，检查是否有内存泄露：</p><div class=\"highlight\"><pre><code class=\"language-bash\">valgrind --tool<span class=\"o\">=</span>memcheck --leak-check<span class=\"o\">=</span>full --show-reachable<span class=\"o\">=</span>yes --trace-children<span class=\"o\">=</span>yes ./phplib &lt; tx</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dc2464d49ac404939da3134fbbbf0256_b.jpg\" data-rawwidth=\"747\" data-rawheight=\"206\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"747\" data-original=\"https://pic3.zhimg.com/v2-dc2464d49ac404939da3134fbbbf0256_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;747&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"747\" data-rawheight=\"206\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"747\" data-original=\"https://pic3.zhimg.com/v2-dc2464d49ac404939da3134fbbbf0256_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dc2464d49ac404939da3134fbbbf0256_b.jpg\"/></figure><p>一般来说主要是关注以下2点，直接内存泄漏和间接内存泄漏：</p><ul><li>definitely lost: 0 bytes in 0 blocks</li><li>indirectly lost: 0 bytes in 0 blocks</li></ul><p>很好，上面静态检查和动态检查都没有问题。只有通过了这2项检查的代码，才能合入svn代码库。</p>", 
            "topic": [
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/66789758", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 1, 
            "title": "端口服务getservbyname函数&getservport函数", 
            "content": "<p>像主机IP地址有域名一样，服务也对应着端口号，可以在<code>/etc/service</code>文件中查看，<code>getservbyname</code>函数用于给定名字和协议查找相应的服务，<code>getservbyport</code>函数用于根据端口号和协议查找相应的服务。</p><p><code>getservbyname</code>函数原型：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;netdb.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">struct</span> <span class=\"n\">servent</span> <span class=\"o\">*</span><span class=\"nf\">getservbyname</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">proto</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">servent</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">s_name</span><span class=\"p\">;</span>       <span class=\"cm\">/* 服务名 */</span>\n    <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">s_aliases</span><span class=\"p\">;</span>    <span class=\"cm\">/* 别名 */</span>\n    <span class=\"kt\">int</span>    <span class=\"n\">s_port</span><span class=\"p\">;</span>       <span class=\"cm\">/* 端口号，网络字节序 */</span>\n    <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">s_proto</span><span class=\"p\">;</span>      <span class=\"cm\">/* 协议 */</span>\n<span class=\"p\">}</span></code></pre></div><p><code>getservbyport</code>函数原型：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"n\">servent</span> <span class=\"o\">*</span><span class=\"nf\">getservbyport</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">proto</span><span class=\"p\">);</span>\n<span class=\"cm\">/* port 参数是网络字节序 */</span></code></pre></div><p>运行本地<code>daytime</code>服务器，然后跑<code>daytimetcpcli1</code>程序，运行结果如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fdfa08c9b9fb58d78af0fede1d20bd4d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb\" width=\"722\" data-original=\"https://pic2.zhimg.com/v2-fdfa08c9b9fb58d78af0fede1d20bd4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;722&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"722\" data-original=\"https://pic2.zhimg.com/v2-fdfa08c9b9fb58d78af0fede1d20bd4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fdfa08c9b9fb58d78af0fede1d20bd4d_b.png\"/></figure><p>测试h3c是否开启<code>daytime</code>服务，运行结果如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-741c0046bf05f9057d133e245e1c741a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"775\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb\" width=\"775\" data-original=\"https://pic3.zhimg.com/v2-741c0046bf05f9057d133e245e1c741a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;775&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"775\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"775\" data-original=\"https://pic3.zhimg.com/v2-741c0046bf05f9057d133e245e1c741a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-741c0046bf05f9057d133e245e1c741a_b.png\"/></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>                <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">in_addr</span>      <span class=\"o\">**</span><span class=\"n\">pptr</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">in_addr</span>      <span class=\"o\">*</span><span class=\"n\">inetaddrp</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"k\">struct</span> <span class=\"n\">in_addr</span>      <span class=\"n\">inetaddr</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">hostent</span>      <span class=\"o\">*</span><span class=\"n\">hp</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">servent</span>      <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;usage: daytimetcpcli1 &lt;hostname&gt; &lt;service&gt;&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">hp</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyname</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inet_aton</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">inetaddr</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;hostname error for %s: %s&#34;</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">hstrerror</span><span class=\"p\">(</span><span class=\"n\">h_errno</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">inetaddrp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">inetaddr</span><span class=\"p\">;</span>\n            <span class=\"n\">inetaddrp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"n\">pptr</span> <span class=\"o\">=</span> <span class=\"n\">inetaddrp</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">pptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"o\">**</span><span class=\"p\">)</span> <span class=\"n\">hp</span><span class=\"o\">-&gt;</span><span class=\"n\">h_addr_list</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">getservbyname</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s\">&#34;tcp&#34;</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;getservbyname error for %s&#34;</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">pptr</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"n\">pptr</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n        <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n        <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">sp</span><span class=\"o\">-&gt;</span><span class=\"n\">s_port</span><span class=\"p\">;</span>\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">pptr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">));</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;trying %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span>\n               <span class=\"n\">Sock_ntop</span><span class=\"p\">((</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">)));</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>      <span class=\"cm\">/* success */</span>\n        <span class=\"n\">err_ret</span><span class=\"p\">(</span><span class=\"s\">&#34;connect error&#34;</span><span class=\"p\">);</span>\n        <span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pptr</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;unable to connect&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"cm\">/* null terminate */</span>\n        <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>程序需要2个参数，一个主机名，一个服务名。</p><ul><li>如果主机名是域名的话，那么走域名解析<code>gethostbyname</code> ，拿到IPv4地址网络序</li><li>如果主机名是IP地址的话，那么走IPv4地址网络序<code>inet_aton</code> </li></ul><p><code>getservbyname</code>获取服务网络序端口号，尝试<code>socket</code>连接每个服务器主机IPv4地址。如果<code>connect</code>连接成功，就<code>break</code>出循环，否则输出一个出错消息并关闭当前连接。</p><p>如果出循环没有一个<code>connect</code>连接成功，就退出程序。否则，读取服务器的应答，并在服务器关闭连接后终止程序（<code>read()</code>返回不大于0）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/66546717", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "域名系统gethostbyname函数&gethostbyaddr函数", 
            "content": "<p>查找主机名最基本的函数是<code>gethostbyname()</code>，如果调用成功，就返回一个指向hostent结构的指针，该结构中含有所查寻主机的所有IPv4地址。<code>getaddrinfo()</code>函数能够同时处理IPv4地址和IPv6地址。</p><p>函数原型：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;netdb.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"n\">h_errno</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"o\">*</span><span class=\"nf\">gethostbyname</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"p\">{</span>\n               <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">h_name</span><span class=\"p\">;</span>            <span class=\"cm\">/* 查询主机的规范名字 */</span>\n               <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">h_aliases</span><span class=\"p\">;</span>         <span class=\"cm\">/* 别名 */</span>\n               <span class=\"kt\">int</span>    <span class=\"n\">h_addrtype</span><span class=\"p\">;</span>        <span class=\"cm\">/* AF_INET */</span>\n               <span class=\"kt\">int</span>    <span class=\"n\">h_length</span><span class=\"p\">;</span>          <span class=\"cm\">/* 4 */</span>\n               <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">h_addr_list</span><span class=\"p\">;</span>       <span class=\"cm\">/* IPv4地址 */</span>\n           <span class=\"p\">}</span></code></pre></div><p>当发生错误时，它不设置<code>errno</code>变量，而是设置全局变量<code>h_errno</code>。<code>hstrerror()</code>函数以<code>h_errno</code>为参数，返回一个<code>const char*</code>指针，指向相应错误的说明。 </p><p>下面的程序，它为任意数目的命令行参数调用<code>gethostbyname()</code>，并显示返回的所有信息。</p><p>运行结果如下图。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7280b76832cb2976978a71f458be9e06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb\" width=\"635\" data-original=\"https://pic3.zhimg.com/v2-7280b76832cb2976978a71f458be9e06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;635&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"635\" data-original=\"https://pic3.zhimg.com/v2-7280b76832cb2976978a71f458be9e06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7280b76832cb2976978a71f458be9e06_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>            <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">pptr</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>            <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">INET_ADDRSTRLEN</span><span class=\"p\">];</span>\n    <span class=\"k\">struct</span> <span class=\"n\">hostent</span>  <span class=\"o\">*</span><span class=\"n\">hptr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">argc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"o\">*++</span><span class=\"n\">argv</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">hptr</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyname</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">err_msg</span><span class=\"p\">(</span><span class=\"s\">&#34;gethostbyname error for host: %s: %s&#34;</span><span class=\"p\">,</span>\n                    <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">hstrerror</span><span class=\"p\">(</span><span class=\"n\">h_errno</span><span class=\"p\">));</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;official hostname: %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">hptr</span><span class=\"o\">-&gt;</span><span class=\"n\">h_name</span><span class=\"p\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">pptr</span> <span class=\"o\">=</span> <span class=\"n\">hptr</span><span class=\"o\">-&gt;</span><span class=\"n\">h_aliases</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">pptr</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"n\">pptr</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\t</span><span class=\"s\">alias: %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">pptr</span><span class=\"p\">);</span>\n\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">hptr</span><span class=\"o\">-&gt;</span><span class=\"n\">h_addrtype</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span>\n            <span class=\"n\">pptr</span> <span class=\"o\">=</span> <span class=\"n\">hptr</span><span class=\"o\">-&gt;</span><span class=\"n\">h_addr_list</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">pptr</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"n\">pptr</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\t</span><span class=\"s\">address: %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span>\n                    <span class=\"n\">Inet_ntop</span><span class=\"p\">(</span><span class=\"n\">hptr</span><span class=\"o\">-&gt;</span><span class=\"n\">h_addrtype</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">pptr</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)));</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"n\">err_ret</span><span class=\"p\">(</span><span class=\"s\">&#34;unknown address type&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><p><code>gethostbyaddr()</code>函数试图由一个二进制的IP地址找到相应的主机名，与<code>gethostbyname()</code>相反，函数原型如下。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;netdb.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/socket.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"n\">h_errno</span><span class=\"p\">;</span>\n<span class=\"c1\">//struct hostent *gethostbyname(const char *name);\n</span><span class=\"c1\"></span><span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"o\">*</span><span class=\"nf\">gethostbyaddr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"n\">socklen_t</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">type</span><span class=\"p\">);</span></code></pre></div><p><code>gethostbyaddr()</code>返回也是一个指向<code>hostent</code>结构的指针，<code>gethostbyaddr()</code>在<code>in_addr.arpa</code>域中向一个名字服务器查询<code>PTR</code>记录。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p><p></p>", 
            "topic": [
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59761006", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 7, 
            "title": "基本UDP套接字编程入门", 
            "content": "<p>UDP是无连接不可靠的数据报协议，非常不同于TCP提供的面向连接的可靠字节流。UDP常见领域：DNS（域名系统）、NFS（网络文件系统）和SNMP（简单网络管理协议）。</p><p>典型的UDP程序：客户不与服务器建立连接，而是只管使用sendto函数给服务器发送数据报，其中必须指定目的地的地址作为参数。同样，服务器不接受来自客户端的连接，而是只管调用recvfrom函数，等待来自某个客户的数据到达。recvfrom将与所接收的数据报一道返回客户的协议地址，因此服务器可以把相应发送给正确的客户。</p><p>recvfrom和sendto函数简介</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/socket.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">ssize_t</span> <span class=\"nf\">recvfrom</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">flags</span><span class=\"p\">,</span>\n                        <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">src_addr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"o\">*</span><span class=\"n\">addrlen</span><span class=\"p\">);</span>\n\n<span class=\"n\">ssize_t</span> <span class=\"nf\">sendto</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">flags</span><span class=\"p\">,</span>\n                      <span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">dest_addr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">addrlen</span><span class=\"p\">);</span></code></pre></div><ul><li>sockfd 描述符</li><li>buf 指向读入或写出缓冲区的指针</li><li>len 读写字节数</li><li>flags 暂时不管，设为0即可</li><li>src_addr 指向一个将由该地址在返回时填写数据报发送者的协议地址的套接字地址结构</li><li>addrlen 该套接字地址结构中填写的字节数</li><li>dest_addr 指向一个含有数据报接收者的协议地址的套接字地址结构</li><li>addrlen 指定套接字地址结构大小</li></ul><blockquote>坑：对于放在epoll事件中的sockfd，recvfrom的最后一个参数必须初始化。</blockquote><p><b>简单的UDP回射服务端</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">dg_echo</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"n\">pcliaddr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">clilen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>         <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">socklen_t</span>   <span class=\"n\">len</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>        <span class=\"n\">mesg</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">clilen</span><span class=\"p\">;</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Recvfrom</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">mesg</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pcliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">);</span>\n\n        <span class=\"n\">Sendto</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">mesg</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pcliaddr</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"n\">cliaddr</span><span class=\"p\">;</span>\n\n    <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_DGRAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">dg_echo</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">));</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>简单的UDP回射客户端</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">dg_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"n\">pservaddr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">servlen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"n\">Sendto</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pservaddr</span><span class=\"p\">,</span> <span class=\"n\">servlen</span><span class=\"p\">);</span>\n\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Recvfrom</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"cm\">/* null terminate */</span>\n        <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;usage: udpcli &lt;IPaddress&gt;&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n    <span class=\"n\">Inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n\n    <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_DGRAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">dg_cli</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d07f28050a70993634970671acc0b534_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-d07f28050a70993634970671acc0b534_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;61&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-d07f28050a70993634970671acc0b534_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d07f28050a70993634970671acc0b534_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3e9fab32d2fbac7675063f161fe4921d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"633\" data-original=\"https://pic2.zhimg.com/v2-3e9fab32d2fbac7675063f161fe4921d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;633&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"633\" data-original=\"https://pic2.zhimg.com/v2-3e9fab32d2fbac7675063f161fe4921d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3e9fab32d2fbac7675063f161fe4921d_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59754243", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "套接字层与IP层的套接字选项汇总", 
            "content": "<p>在之前的栗子里，我们遇到过一些坑，就是因为没有添加选项，而让我们脑壳生疼，对于一个套接字，咱们必须要给它设置一些选项，比如<code>SO_REUSEADDR</code>。</p><p><code>SO_REUSEADDR</code>套接字选项作用：</p><ol><li>允许启动一个监听服务器并捆绑其众所周知端口，即使以前建立的将该端口用作它们的本地端口的连接依然存在。</li><li>允许在同一端口上启动同一服务器的多个实例，只要每个实例捆绑不同的本地IP地址即可。</li><li>允许单个进程捆绑同一端口到多个套接字上，只要每次捆绑指定不同的本地IP地址即可。</li><li>允许完全重复的捆绑（UDP协议支持） </li></ol><p><code>IP_HDRINCL</code>套接字选项作用： </p><p>对于写原始套接字的同学，做源地址伪造攻击，就一定要看<code>IP_HDRINCL</code>选项。一般情况，数据报的IP首部是由内核构造的，不过对于原始套接字，可以自己构造IP首部。</p><p>内核依然帮我们做一些事：</p><ul><li>IP首部校验和</li><li>IP标识为0，内核将设置该字段</li><li>源IP为<code>INADDR_ANY</code>，内核将把它设置为外出接口的主IP地址 </li></ul><hr/><p>常见套接字层与IP层的套接字选项汇总：</p><p><code>SOL_SOCKET</code></p><ul><li><code>SO_BROADCAST</code> 允许发送广播数据报</li><li><code>SO_DEBUG</code> 开启调试跟踪 </li><li><code>SO_DONTROUTE</code> 绕过外出路由表查询</li><li><code>SO_ERROR</code> 获取待处理错误并清除</li><li><code>SO_KEEPALIVE</code> 周期性测试连接是否仍然存活</li><li><code>SO_LINGER</code> 若有数据待发送则延迟关闭</li><li><code>SO_OOBINLINE</code> 让接收到的带外数据继续在线存留</li><li><code>SO_RCVBUF</code> 接收缓冲区大小</li><li><code>SO_SNDBUF</code> 发送缓冲区大小</li><li><code>SO_RCVLOWAT</code> 接收缓冲区低水平标记</li><li><code>SO_SNDLOWAT</code> 发送缓冲区低水平标记</li><li><code>SO_RCVTIMEO</code> 接收超时</li><li><code>SO_SNDTIMEO</code> 发送超时</li><li><code>SO_REUSEADDR</code> 允许重用本地地址</li><li><code>SO_REUSEPORT</code> 允许重用本地端口</li><li><code>SO_TYPE</code> 取得套接字类型</li><li><code>SO_USELOOPBACK</code> 路由套接字取得所发送数据的副本</li></ul><p><code>IPPROTO_IP</code></p><ul><li><code>IP_HDRINCL</code> 随数据包含的IP首部 </li><li><code>IP_OPTIONS</code>  IP首部选项</li><li><code>IP_RECVDSTADDR</code> 返回目的IP地址</li><li><code>IP_RECVIF</code> 返回接收接口索引</li><li><code>IP_TOS</code> 服务类型和优先权</li><li><code>IP_TTL</code> 存活时间</li></ul><p><code>IPPROTO_TCP</code></p><ul><li><code>TCP_MAXSEG</code> TCP最大分节大小</li><li><code>TCP_NODELAY</code> 禁止Nagle算法</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》 </p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59712124", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 5, 
            "title": "套接字选项入门", 
            "content": "<p><b>getsockopt和setsockopt函数解读</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;          /* See NOTES */</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/socket.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">getsockopt</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">optname</span><span class=\"p\">,</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">optval</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"o\">*</span><span class=\"n\">optlen</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"nf\">setsockopt</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">optname</span><span class=\"p\">,</span><span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">optval</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">optlen</span><span class=\"p\">);</span></code></pre></div><ol><li>sockfd：指向一个打开的套接字描述符</li><li>level：通用套接字代码</li><li>optname：选项名字</li><li>optval：指向某个变量的指针，setsockopt从<code>*optval</code>中取得选项待设置的新值，getsockopt把已获取的选项当前值存放在<code>*optval</code>中。</li><li>optlen：<code>*optval</code>的大小由optlen指定，setsockopt是一个值参数，getsockopt是一个<code>值-结果</code>参数。 </li></ol><p>套接字选项两大基本类型：</p><ul><li>启用或禁止某个特性的二元选项</li><li>取得并返回我们可以设置或检查的特定值的选项</li></ul><p>setsockopt函数需要一个不为0的<code>*optval</code>值来启用选项，一个为0的<code>*optval</code>值来禁用选项。getsockopt函数获得的<code>*optval</code>是0表示相应选项被禁止，不为0表示相应选项被启用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3b3974d098ed388db4eaf150bd71ce6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb\" width=\"552\" data-original=\"https://pic2.zhimg.com/v2-3b3974d098ed388db4eaf150bd71ce6d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;552&#39; height=&#39;589&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"552\" data-original=\"https://pic2.zhimg.com/v2-3b3974d098ed388db4eaf150bd71ce6d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3b3974d098ed388db4eaf150bd71ce6d_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span>    <span class=\"cpf\">&lt;netinet/tcp.h&gt;     /* for TCP_xxx defines */</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span>               <span class=\"n\">i_val</span><span class=\"p\">;</span>\n  <span class=\"kt\">long</span>              <span class=\"n\">l_val</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">linger</span>     <span class=\"n\">linger_val</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">timeval</span>    <span class=\"n\">timeval_val</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">sock_str_flag</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">sock_str_int</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">sock_str_linger</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">sock_str_timeval</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">sock_opts</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"kt\">char</span>       <span class=\"o\">*</span><span class=\"n\">opt_str</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span>       <span class=\"n\">opt_level</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span>       <span class=\"n\">opt_name</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span>   <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">opt_val_str</span><span class=\"p\">)(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"n\">sock_opts</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_BROADCAST&#34;</span><span class=\"p\">,</span>       <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_BROADCAST</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_DEBUG&#34;</span><span class=\"p\">,</span>           <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_DEBUG</span><span class=\"p\">,</span>       <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_DONTROUTE&#34;</span><span class=\"p\">,</span>       <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_DONTROUTE</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_ERROR&#34;</span><span class=\"p\">,</span>           <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_ERROR</span><span class=\"p\">,</span>       <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_KEEPALIVE&#34;</span><span class=\"p\">,</span>       <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_KEEPALIVE</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_LINGER&#34;</span><span class=\"p\">,</span>          <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_LINGER</span><span class=\"p\">,</span>      <span class=\"n\">sock_str_linger</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_OOBINLINE&#34;</span><span class=\"p\">,</span>       <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_OOBINLINE</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_RCVBUF&#34;</span><span class=\"p\">,</span>          <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_RCVBUF</span><span class=\"p\">,</span>      <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_SNDBUF&#34;</span><span class=\"p\">,</span>          <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_SNDBUF</span><span class=\"p\">,</span>      <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_RCVLOWAT&#34;</span><span class=\"p\">,</span>        <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_RCVLOWAT</span><span class=\"p\">,</span>    <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_SNDLOWAT&#34;</span><span class=\"p\">,</span>        <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_SNDLOWAT</span><span class=\"p\">,</span>    <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_RCVTIMEO&#34;</span><span class=\"p\">,</span>        <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_RCVTIMEO</span><span class=\"p\">,</span>    <span class=\"n\">sock_str_timeval</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_SNDTIMEO&#34;</span><span class=\"p\">,</span>        <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_SNDTIMEO</span><span class=\"p\">,</span>    <span class=\"n\">sock_str_timeval</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_REUSEADDR&#34;</span><span class=\"p\">,</span>       <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n<span class=\"cp\">#ifdef  SO_REUSEPORT\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_REUSEPORT&#34;</span><span class=\"p\">,</span>       <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_REUSEPORT</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_REUSEPORT&#34;</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SO_TYPE&#34;</span><span class=\"p\">,</span>            <span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span> <span class=\"n\">SO_TYPE</span><span class=\"p\">,</span>        <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"c1\">//{ &#34;SO_USELOOPBACK&#34;,     SOL_SOCKET, SO_USELOOPBACK, sock_str_flag },\n</span><span class=\"c1\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IP_TOS&#34;</span><span class=\"p\">,</span>             <span class=\"n\">IPPROTO_IP</span><span class=\"p\">,</span> <span class=\"n\">IP_TOS</span><span class=\"p\">,</span>         <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;IP_TTL&#34;</span><span class=\"p\">,</span>             <span class=\"n\">IPPROTO_IP</span><span class=\"p\">,</span> <span class=\"n\">IP_TTL</span><span class=\"p\">,</span>         <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n<span class=\"cp\">#ifdef  IPV6_DONTFRAG\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IPV6_DONTFRAG&#34;</span><span class=\"p\">,</span>      <span class=\"n\">IPPROTO_IPV6</span><span class=\"p\">,</span><span class=\"n\">IPV6_DONTFRAG</span><span class=\"p\">,</span> <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IPV6_DONTFRAG&#34;</span><span class=\"p\">,</span>      <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\">#ifdef  IPV6_UNICAST_HOPS\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IPV6_UNICAST_HOPS&#34;</span><span class=\"p\">,</span>  <span class=\"n\">IPPROTO_IPV6</span><span class=\"p\">,</span><span class=\"n\">IPV6_UNICAST_HOPS</span><span class=\"p\">,</span><span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IPV6_UNICAST_HOPS&#34;</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\">#ifdef  IPV6_V6ONLY\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IPV6_V6ONLY&#34;</span><span class=\"p\">,</span>        <span class=\"n\">IPPROTO_IPV6</span><span class=\"p\">,</span><span class=\"n\">IPV6_V6ONLY</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;IPV6_V6ONLY&#34;</span><span class=\"p\">,</span>        <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;TCP_MAXSEG&#34;</span><span class=\"p\">,</span>         <span class=\"n\">IPPROTO_TCP</span><span class=\"p\">,</span><span class=\"n\">TCP_MAXSEG</span><span class=\"p\">,</span>     <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s\">&#34;TCP_NODELAY&#34;</span><span class=\"p\">,</span>        <span class=\"n\">IPPROTO_TCP</span><span class=\"p\">,</span><span class=\"n\">TCP_NODELAY</span><span class=\"p\">,</span>    <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n<span class=\"cp\">#ifdef  SCTP_AUTOCLOSE\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_AUTOCLOSE&#34;</span><span class=\"p\">,</span>     <span class=\"n\">IPPROTO_SCTP</span><span class=\"p\">,</span><span class=\"n\">SCTP_AUTOCLOSE</span><span class=\"p\">,</span><span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_AUTOCLOSE&#34;</span><span class=\"p\">,</span>     <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\">#ifdef  SCTP_MAXBURST\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_MAXBURST&#34;</span><span class=\"p\">,</span>      <span class=\"n\">IPPROTO_SCTP</span><span class=\"p\">,</span><span class=\"n\">SCTP_MAXBURST</span><span class=\"p\">,</span> <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_MAXBURST&#34;</span><span class=\"p\">,</span>      <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\">#ifdef  SCTP_MAXSEG\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_MAXSEG&#34;</span><span class=\"p\">,</span>        <span class=\"n\">IPPROTO_SCTP</span><span class=\"p\">,</span><span class=\"n\">SCTP_MAXSEG</span><span class=\"p\">,</span>   <span class=\"n\">sock_str_int</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_MAXSEG&#34;</span><span class=\"p\">,</span>        <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\">#ifdef  SCTP_NODELAY\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_NODELAY&#34;</span><span class=\"p\">,</span>       <span class=\"n\">IPPROTO_SCTP</span><span class=\"p\">,</span><span class=\"n\">SCTP_NODELAY</span><span class=\"p\">,</span>  <span class=\"n\">sock_str_flag</span> <span class=\"p\">},</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"s\">&#34;SCTP_NODELAY&#34;</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">{</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span>                 <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"mi\">0</span><span class=\"p\">,</span>              <span class=\"nb\">NULL</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">fd</span><span class=\"p\">;</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">len</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sock_opts</span>    <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">sock_opts</span><span class=\"p\">;</span> <span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_str</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"n\">ptr</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s: &#34;</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_str</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_val_str</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;(undefined)</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_level</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"nl\">SOL_SOCKET</span><span class=\"p\">:</span>\n            <span class=\"k\">case</span> <span class=\"nl\">IPPROTO_IP</span><span class=\"p\">:</span>\n            <span class=\"k\">case</span> <span class=\"nl\">IPPROTO_TCP</span><span class=\"p\">:</span>\n                <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"cp\">#ifdef  IPV6\n</span><span class=\"cp\"></span>            <span class=\"k\">case</span> <span class=\"nl\">IPPROTO_IPV6</span><span class=\"p\">:</span>\n                <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET6</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\">#ifdef  IPPROTO_SCTP\n</span><span class=\"cp\"></span>            <span class=\"k\">case</span> <span class=\"nl\">IPPROTO_SCTP</span><span class=\"p\">:</span>\n                <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_SEQPACKET</span><span class=\"p\">,</span> <span class=\"n\">IPPROTO_SCTP</span><span class=\"p\">);</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;Can&#39;t create fd for level %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_level</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">getsockopt</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_level</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_name</span><span class=\"p\">,</span>\n                           <span class=\"o\">&amp;</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">err_ret</span><span class=\"p\">(</span><span class=\"s\">&#34;getsockopt error&#34;</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;default = %s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">opt_val_str</span><span class=\"p\">)(</span><span class=\"o\">&amp;</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">strres</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">];</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">sock_str_flag</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">))</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span> <span class=\"s\">&#34;size (%d) not sizeof(int)&#34;</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span>\n                 <span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">i_val</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"s\">&#34;off&#34;</span> <span class=\"o\">:</span> <span class=\"s\">&#34;on&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">sock_str_int</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">))</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span> <span class=\"s\">&#34;size (%d) not sizeof(int)&#34;</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span> <span class=\"s\">&#34;%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">i_val</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">sock_str_linger</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">linger</span>   <span class=\"o\">*</span><span class=\"n\">lptr</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">linger_val</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">linger</span><span class=\"p\">))</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span>\n                 <span class=\"s\">&#34;size (%d) not sizeof(struct linger)&#34;</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span> <span class=\"s\">&#34;l_onoff = %d, l_linger = %d&#34;</span><span class=\"p\">,</span>\n                 <span class=\"n\">lptr</span><span class=\"o\">-&gt;</span><span class=\"n\">l_onoff</span><span class=\"p\">,</span> <span class=\"n\">lptr</span><span class=\"o\">-&gt;</span><span class=\"n\">l_linger</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">sock_str_timeval</span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"n\">val</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">timeval</span>  <span class=\"o\">*</span><span class=\"n\">tvptr</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">ptr</span><span class=\"o\">-&gt;</span><span class=\"n\">timeval_val</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">timeval</span><span class=\"p\">))</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span>\n                 <span class=\"s\">&#34;size (%d) not sizeof(struct timeval)&#34;</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">),</span> <span class=\"s\">&#34;%d sec, %d usec&#34;</span><span class=\"p\">,</span>\n                 <span class=\"n\">tvptr</span><span class=\"o\">-&gt;</span><span class=\"n\">tv_sec</span><span class=\"p\">,</span> <span class=\"n\">tvptr</span><span class=\"o\">-&gt;</span><span class=\"n\">tv_usec</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">strres</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>检查我们Ubuntu支持的选项，并获取默认值：</p><p><b>声明可能值的union</b></p><p>这里我们就用到getsockopt函数，对于这个函数每个可能的返回值，我们的union类型中都有一个成员。</p><p><b>定义输出函数原型</b></p><p>我们为用于输出给定套接字选项的值的4个函数，定义原型。</p><p><b>定义结构并初始化数组</b></p><p>我们的<code>sock_opts</code>结构包含了每个套接字选项调用getsockopt并输出其当前值所需要的所有信息， 它的最后一个成员<code>opt_val_str</code>是指向上面的4个函数原型。我们分配并初始化这个结构的一个数组，它的每个元素代表一个套接字选项。</p><p><b>遍历所有选项</b></p><p>我们遍历<code>sock_opts[]</code>数组中的所有元素，如果某个元素的<code>opt_val_str</code>指针为空，那么该实现没有定义相应的选项。</p><p><b>创建套接字</b></p><p>我们创建一个用于测试选项的套接字。</p><ul><li>测试套接字层、TCP层、IPv4层套接字选项： IPv4的TCP套接字</li><li>测试IPv6层套接字选项：IPv6的TCP套接字</li><li>测试SCTP层套接字选项：IPv4的SCTP套接字</li></ul><p><b>调用getsockopt</b></p><p>我们调用getsockopt。</p><p><b>输出选项的默认值</b></p><p>如果getsockopt返回成功，那么我们调用相应的选项值输出函数，将选项值转换为一个字符串输出。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p><p></p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59570458", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 5, 
            "title": "Poll版回射服务器探索", 
            "content": "<p></p><p>使用poll代替select重写TCP回射服务器。在select版本中，我们必须分配一个client数组和一个名为rset的描述符集合。改用poll后，我们只需分配一个pollfd结构的数组来维护客户的信息，而不必分配另外一个数组。</p><p><b>步骤一：分配pollfd结构体数组</b></p><p>我们申明的pollfd数组中存在<code>OPEN_MAX</code>个元素，确定一个进程任何时刻能打开的最大描述符是不容易的，这里我们使用一个常值。</p><p><b>步骤二：初始化</b></p><p>我们把client数组的第一项用于监听套接字，其余项的描述符置为-1。给第一项设置<code>POLLRDNORM</code>事件，当有新的连接准备好被接受时poll将通知我们。maxi始终保持为client数组当前正在使用的最大下标值。</p><p><b>步骤三：调用poll检查新的连接</b></p><p>我们调用poll以等待新的连接，或者现有连接上有数据可读。当一个新的连接被接受后，我们在client数组中查找第一个描述符成员为负值的可用项。找到第一个可用项后，我们把新连接的描述符保存在其中，并设置<code>POLLRDNORM</code>事件。</p><p><b>步骤四：检查某个现有连接上的数据</b></p><p>我们检查的两个返回事件<code>POLLRDNORM</code>和<code>POLLERR</code>， 你也可以把<code>POLLWRNORM</code>加上。我们检查<code>POLLERR</code>的原因在于：有些实现在一个连接上接收到RST时返回<code>POLLERR</code>事件，而其他实现返回<code>POLLRDNORM</code>事件。</p><p>不论哪种情形，我们都调用read，当有错误发生时，read将返回这个错误。当一个现有连接由它的客户终止时，我们就把它的fd成员置为-1。 </p><hr/><p>Poll版本服务端代码：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* poll */</span>\n<span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span>    <span class=\"cpf\">&lt;limits.h&gt;      /* for OPEN_MAX */</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#define OPEN_MAX 128\n</span><span class=\"cp\"></span><span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">maxi</span><span class=\"p\">,</span> <span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">nready</span><span class=\"p\">;</span>\n    <span class=\"n\">ssize_t</span>             <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>                <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">clilen</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pollfd</span>       <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">OPEN_MAX</span><span class=\"p\">];</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n    <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">listenfd</span><span class=\"p\">;</span>\n    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">POLLRDNORM</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">OPEN_MAX</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>      <span class=\"cm\">/* -1 indicates available entry */</span>\n    <span class=\"n\">maxi</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>                   <span class=\"cm\">/* max index into client[] array */</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">nready</span> <span class=\"o\">=</span> <span class=\"n\">Poll</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">maxi</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">INFTIM</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">revents</span> <span class=\"o\">&amp;</span> <span class=\"n\">POLLRDNORM</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"cm\">/* new client connection */</span>\n            <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n            <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">);</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">OPEN_MAX</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>  <span class=\"cm\">/* save descriptor */</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">OPEN_MAX</span><span class=\"p\">)</span>\n                <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;too many clients&#34;</span><span class=\"p\">);</span>\n\n            <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">POLLRDNORM</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxi</span><span class=\"p\">)</span>\n                <span class=\"n\">maxi</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>               <span class=\"cm\">/* max index in client[] array */</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">nready</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>               <span class=\"cm\">/* no more readable descriptors */</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">maxi</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"cm\">/* check all clients for data */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">revents</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">POLLRDNORM</span> <span class=\"o\">|</span> <span class=\"n\">POLLERR</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">ECONNRESET</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">);</span>\n                        <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span> <span class=\"k\">else</span>\n                        <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;read error&#34;</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">);</span>\n                    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span>\n                    <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">nready</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>              <span class=\"cm\">/* no more readable descriptors */</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX环境高级编程（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/19705459"
                }
            ], 
            "comments": [
                {
                    "userName": "ustcsse308", 
                    "userLink": "https://www.zhihu.com/people/e8fc969969577f1bc3095920add2d448", 
                    "content": "<p>每次你点赞，我就多几个关注 你现在已经是大V了 哈哈</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "知乎不像CSDN，这里需要一个积累的过程，然后一个10万的大v看到了点了一个赞，瞬间就能拿1000粉[捂脸]前面都是指数式的慢启动。<a href=\"https://pic4.zhimg.com/v2-e3f586ae9ceedefefe38242db0d666bb_qhd.jpg\" class=\"comment_img\" data-width=\"198\" data-height=\"185\">查看图片</a>", 
                            "likes": 0, 
                            "replyToAuthor": "ustcsse308"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59562404", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "多路复用poll函数探索", 
            "content": "<p></p><p>poll提供的功能与select类似，poll的函数原型如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;poll.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"kt\">int</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">pollfd</span> <span class=\"o\">*</span><span class=\"n\">fds</span><span class=\"p\">,</span> <span class=\"n\">nfds_t</span> <span class=\"n\">nfds</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">timeout</span><span class=\"p\">);</span></code></pre></div><p>第一个参数是指向一个结构体数组第一个元素的指针，数组的每个元素都是pollfd结构，用于指定测试某个给定描述符fd的条件：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"n\">pollfd</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span>   <span class=\"n\">fd</span><span class=\"p\">;</span>         <span class=\"cm\">/* file descriptor */</span>\n        <span class=\"kt\">short</span> <span class=\"n\">events</span><span class=\"p\">;</span>     <span class=\"cm\">/* requested events */</span>\n        <span class=\"kt\">short</span> <span class=\"n\">revents</span><span class=\"p\">;</span>    <span class=\"cm\">/* returned events */</span>\n           <span class=\"p\">};</span></code></pre></div><p>要测试的条件由events成员指定，函数在响应的revents成员中返回该描述符的状态。</p><p>注意：</p><ul><li>每个描述符都有两个变量，一个为调用者，另一个为返回结果，从而避免使用值-结果参数。</li><li>select函数的中间三个参数都是值-结果参数。</li></ul><p>常用的events或revents标志：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">//可读：\n</span><span class=\"c1\"></span><span class=\"n\">POLLIN</span> <span class=\"c1\">// 普通或优先级带数据可读\n</span><span class=\"c1\"></span><span class=\"n\">POLLRDNORM</span> <span class=\"c1\">// 普通数据可读\n</span><span class=\"c1\">//可写：\n</span><span class=\"c1\"></span><span class=\"n\">POLLOUT</span> <span class=\"c1\">// 普通数据可写\n</span><span class=\"c1\"></span><span class=\"n\">POLLWRNORM</span> <span class=\"c1\">// 普通数据可写\n</span><span class=\"c1\">//错误：\n</span><span class=\"c1\"></span><span class=\"n\">POLLERR</span> <span class=\"c1\">// 发生错误\n</span><span class=\"c1\"></span><span class=\"n\">POLLHUP</span> <span class=\"o\">//</span> <span class=\"err\">发生挂起</span></code></pre></div><p>什么情况下设置这些标志呢？</p><ul><li>所有正规TCP数据和UDP数据都被认为是普通数据</li><li>TCP读半部关闭时，也被认为是普通数据，随后读操作将返回0</li><li>TCP连接存在错误也可以认为是普通数据，随后的读操作返回-1，错误码从errno中获得</li><li>监听套接字上有新的连接也可以认为是普通数据</li></ul><p>结构体数组中元素的个数是由nfds参数指定的。</p><p>timeout参数指定poll函数返回前等待多长时间。</p><ul><li><code>INFTIM</code>：永远等待</li><li><code>0</code>：立即返回，不阻塞进程</li><li><code>&gt;0</code>：等待指定数目的毫秒数</li></ul><p>当发生错误时，poll函数的返回-1，若定时器到时之前没有任何描述符就绪，返回0，否则返回就绪描述符的个数，即revents成员值非0的描述符个数。</p><p>如果我们不关心某个特定描述符，可以把它对应的pollfd结构的fd成员设置成一个负值，poll函数会忽略这样的pollfd结构的events成员，非常适合初始化。</p><p><b>与Select的对比：</b></p><p><code>select</code>最大描述符一般为1024，那么咱们可以算一下<code>fd_set</code>的结构<code>1024/32=32</code>，可以是一个包含32个<code>int32</code>类型的数组。select的第一个参数一般是<code>max(待测描述符)</code>，而poll就不要这样了，因为分配了一个pollfd结构的数组，并把数组元素个数通知内核，内核不再需要知道类似<code>fd_set</code>的固定大小的数据类型，说白了poll的大小是动态的，不受1024限制的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》 </p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59525608", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "select版服务端回射程序拒绝服务", 
            "content": "<p>UNP书上说select版服务端回射程序依然存在问题，如果存在一个已连接的恶意客户端，发送若干字节的数据（没有换行符），然后死等。服务端调用read，它从客户读入若干字节后阻塞于下一个read调用，喵喵喵，这里书上说错了。</p><p>但是启发还是很好的，当一个服务器在处理多个客户时，它绝对不能阻塞于只与单个客户相关的函数调用，否则可能导致服务器被挂起，拒绝为其他客户提供服务。</p><p>解决方案：</p><ul><li>使用非阻塞IO</li><li>每个客户由单独的线程处理</li><li>对IO操作设置超时时间</li></ul><blockquote>新作者注：2版本的read是readline函数中封装的read，总是要读到换行或EOF才返回。</blockquote><p>下面是实验验证，第3版UNP的代码是没毛病的。</p><p>启动服务端：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-524e036b96048e2e546ae57921bc8af6_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"55\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic3.zhimg.com/v2-524e036b96048e2e546ae57921bc8af6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;55&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"55\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic3.zhimg.com/v2-524e036b96048e2e546ae57921bc8af6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-524e036b96048e2e546ae57921bc8af6_b.png\"/></figure><p>启动客户端1：客户端1发送没有EOF的文本，导致自己被挂住了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-44fd385395979e74dba822cf19bc4e02_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"647\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb\" width=\"647\" data-original=\"https://pic3.zhimg.com/v2-44fd385395979e74dba822cf19bc4e02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;647&#39; height=&#39;52&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"647\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"647\" data-original=\"https://pic3.zhimg.com/v2-44fd385395979e74dba822cf19bc4e02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-44fd385395979e74dba822cf19bc4e02_b.png\"/></figure><p>启动客户端2：客户端2发送正常文本，可以正常回射。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8da83a8deccbb2e58562c758af98804e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"105\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic3.zhimg.com/v2-8da83a8deccbb2e58562c758af98804e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;105&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"105\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic3.zhimg.com/v2-8da83a8deccbb2e58562c758af98804e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8da83a8deccbb2e58562c758af98804e_b.png\"/></figure><p>其中客户端1的输入<code>1.txt</code>，是一个没有EOF的文件： </p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">};</span>\n  <span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"s\">&#34;1.txt&#34;</span><span class=\"p\">,</span><span class=\"s\">&#34;w+&#34;</span><span class=\"p\">);</span>\n  <span class=\"n\">fwrite</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n  <span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></div><hr/><p>第三版UNP代码：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">maxi</span><span class=\"p\">,</span> <span class=\"n\">maxfd</span><span class=\"p\">,</span> <span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">nready</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">FD_SETSIZE</span><span class=\"p\">];</span>\n    <span class=\"n\">ssize_t</span>             <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">fd_set</span>              <span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"n\">allset</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>                <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">clilen</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n    <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n    <span class=\"n\">maxfd</span> <span class=\"o\">=</span> <span class=\"n\">listenfd</span><span class=\"p\">;</span>           <span class=\"cm\">/* initialize */</span>\n    <span class=\"n\">maxi</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>                  <span class=\"cm\">/* index into client[] array */</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">FD_SETSIZE</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>         <span class=\"cm\">/* -1 indicates available entry */</span>\n    <span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n    <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n\n\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rset</span> <span class=\"o\">=</span> <span class=\"n\">allset</span><span class=\"p\">;</span>      <span class=\"cm\">/* structure assignment */</span>\n        <span class=\"n\">nready</span> <span class=\"o\">=</span> <span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">maxfd</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>    <span class=\"cm\">/* new client connection */</span>\n            <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n            <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">);</span>\n\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">FD_SETSIZE</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">connfd</span><span class=\"p\">;</span> <span class=\"cm\">/* save descriptor */</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">FD_SETSIZE</span><span class=\"p\">)</span>\n                <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;too many clients&#34;</span><span class=\"p\">);</span>\n\n            <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>    <span class=\"cm\">/* add new descriptor to set */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">connfd</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxfd</span><span class=\"p\">)</span>\n                <span class=\"n\">maxfd</span> <span class=\"o\">=</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>         <span class=\"cm\">/* for select */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxi</span><span class=\"p\">)</span>\n                <span class=\"n\">maxi</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>               <span class=\"cm\">/* max index in client[] array */</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">nready</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>               <span class=\"cm\">/* no more readable descriptors */</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">maxi</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"cm\">/* check all clients for data */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"cm\">/*4connection closed by client */</span>\n                    <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">);</span>\n                    <span class=\"n\">FD_CLR</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n                    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span>\n                    <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">nready</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>              <span class=\"cm\">/* no more readable descriptors */</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59519322", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "select版客户端批量输入解决方案", 
            "content": "<p></p><p>这次客户端使用了select和shutdown，另外废弃了以文本行为中心的代码，改为全部针对缓冲区的操作（read、write）：</p><ul><li>select：只要服务端关闭了连接，客户端就会收到通知。</li><li>shutdown：正确处理批量输入问题。</li></ul><p>stdineof是一个初始化为0的标志，0表示标准输入没有读到EOF，1表示标准输入读到EOF。</p><p>当我们在套接字上读到EOF，如果我们在标准输入上遇到EOF，那么就是正常结束；如果我们在标准输入上没有遇到EOF，那么就是服务器过早终止。</p><p>当我们在标准输入上遇到EOF，我们把标志stdineof置1，并调用<code>Shutdown(sockfd, SHUT_WR)</code>发送FIN报文。 </p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>         <span class=\"n\">maxfdp1</span><span class=\"p\">,</span> <span class=\"n\">stdineof</span><span class=\"p\">;</span>\n    <span class=\"n\">fd_set</span>      <span class=\"n\">rset</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>        <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span>     <span class=\"n\">n</span><span class=\"p\">;</span>\n\n    <span class=\"n\">stdineof</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">stdineof</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n        <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n        <span class=\"n\">maxfdp1</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">maxfdp1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"cm\">/* socket is readable */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">stdineof</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>     <span class=\"cm\">/* normal termination */</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">),</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"cm\">/* input is readable */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">stdineof</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">Shutdown</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">SHUT_WR</span><span class=\"p\">);</span>  <span class=\"cm\">/* send FIN */</span>\n                <span class=\"n\">FD_CLR</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59511892", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "什么是全双工通信？", 
            "content": "<p>先来回忆一下单双工通道，那个双向高速公路上只有一辆车的例子。我们知道一个分组从管道的一端发送到达管道的另一端存在延时，如果用单双工的管道，在上个例子中我们仅仅使用了管道容量的<code>1/8</code>，这种停等方式对于交互式输入是没毛病的。由于UNIX的shell环境下可以轻松的把标准输入和标准输出重定向到文件中，也就是批量喂食数据，在同一台设备下运行没发现毛病，但是客户端和服务器在两台设备上的时候，我们震惊的发现：客户端发送了2000行数据，服务端只接收到了74行，这对于回射服务器是不正常的，为什么会这样呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6b9c0cb4eb2e36fc47bdbdd63000fd5b_b.jpg\" data-rawwidth=\"574\" data-rawheight=\"99\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"574\" data-original=\"https://pic4.zhimg.com/v2-6b9c0cb4eb2e36fc47bdbdd63000fd5b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;574&#39; height=&#39;99&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"574\" data-rawheight=\"99\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"574\" data-original=\"https://pic4.zhimg.com/v2-6b9c0cb4eb2e36fc47bdbdd63000fd5b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6b9c0cb4eb2e36fc47bdbdd63000fd5b_b.jpg\"/></figure><p>在批量模式下，也就是文件重定向模式下，客户端能以网络可以接受的最快速度持续发送请求，服务端以相同的速度处理它们并发回应答，这就导致时刻7时管道充满：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mi\">7</span><span class=\"o\">:</span> \n<span class=\"mi\">08</span> <span class=\"mo\">07</span> <span class=\"mo\">06</span> <span class=\"mo\">05</span>\n<span class=\"mi\">11</span> <span class=\"mi\">12</span> <span class=\"mi\">13</span> <span class=\"mi\">14</span>\n<span class=\"mi\">8</span><span class=\"err\">：</span>\n<span class=\"mi\">09</span> <span class=\"mi\">08</span> <span class=\"mo\">07</span> <span class=\"mo\">06</span>\n<span class=\"mi\">12</span> <span class=\"mi\">13</span> <span class=\"mi\">14</span> <span class=\"mi\">15</span></code></pre></div><p>备注：0时刻开始发送数据，数字前面0表示发送，1表示应答，数字表示报文序号。</p><p>假设输入文件只有9行，最后一行在时刻8发送，然而时刻8客户端程序就退出了。但是，管道中仍有请求和应答在路上。问题就出在我们对标准输入中的EOF的处理，标准输入中的EOF并不意味着我们同时也完成了从套接字的读入。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n\n        <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n    <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n    <span class=\"n\">Inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"s\">&#34;ip_addr&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Connect</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">str_cli</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">);</span>     <span class=\"cm\">/* do it all */</span>\n\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>我们需要的是一种关闭TCP连接其中一半的方法：我们给服务器发送一个FIN，告诉它我们已经完成了数据发送，但是仍然保持套接字描述符打开以便于读取，这就需要shutdown函数了。终止网络连接的通常方法是调用close函数，不过close有2个限制：</p><ol><li>close函数把描述符的引用计数减1，仅在该计数变为0时才关闭套接字。</li><li>close函数终止读和写两个方向的数据传送。</li></ol><p>shutdown函数可以不管引用计数就激发TCP的正常连接终止序列，shutdown的函数原型：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/socket.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"kt\">int</span> <span class=\"nf\">shutdown</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">howto</span><span class=\"p\">);</span></code></pre></div><ul><li>SHUT_RD（0）：关闭连接的读，套接字中不再有数据可接收。</li><li>SHUT_WR（1）：关闭连接的写，半关闭状态，当前套接字发送缓冲区中的数据将被全部发送掉，后跟TCP的正常连接终止序列，进程不能对这样的套接字调用任何写函数。</li><li>SHUT_RDWR（2）：关闭连接的读和写。</li></ul><p>小测试：</p><p>客户端发送2000行，服务端只收到74行，请问当前网络RTT大约多少时间单位？</p><ul><li>A：<code>2000-74</code> </li><li>B：<code>1/(2000-74)</code> </li><li>C：其他</li></ul><p>最后给出维基百科的定义：</p><blockquote>全双工（<b>full-duplex</b>）的系统允许二台设备间同时进行双向数据传输。一般的电话、手机就是全双工的系统，因为在讲话时同时也可以听到对方的声音。全双工的系统可以用一般的双向车道形容。两个方向的车辆因使用不同的车道，因此不会互相影响。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59401719", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 24, 
            "title": "Linux定时器与Epoll探究", 
            "content": "<ul><li>ailx10：这里我想让程序定时2秒，打印一个tick，我要怎么做？</li><li>大黑客：这不很简单吗？</li><li>ailx10：sleep就是个弟弟，能不能不用sleep做定时器？</li><li>大黑客：不用sleep怎么定时啊？</li><li>ailx10：<code>Epoll + timerfd</code> </li><li>大黑客：要不要这么专业啊？</li><li>ailx10： 嘿嘿，我可是做hacker的男人，能不专业吗？</li><li>大黑客：那就开始你的表演吧 ...</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a70454eef1b2a22928a7be3c03f7b0ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"208\" class=\"origin_image zh-lightbox-thumb\" width=\"472\" data-original=\"https://pic3.zhimg.com/v2-a70454eef1b2a22928a7be3c03f7b0ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;472&#39; height=&#39;208&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"208\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"472\" data-original=\"https://pic3.zhimg.com/v2-a70454eef1b2a22928a7be3c03f7b0ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a70454eef1b2a22928a7be3c03f7b0ee_b.jpg\"/></figure><p>这里有一个坑，我在写timer定时器的时候，发现read函数返回-1，错误码errno=22，说是参数错误，你绝对想不到第2个参数必须是<code>uint64_t</code>类型。</p><p>read的函数原型：（大雾！定时器这里需要小心）</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"n\">ssize_t</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">filedes</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">nbyetes</span><span class=\"p\">);</span></code></pre></div><p>主函数：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// main.c by ailx10\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;epoll.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;timer.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ep_init</span><span class=\"p\">();</span>\n  <span class=\"n\">timer_cre</span><span class=\"p\">();</span>\n  <span class=\"n\">ep_wait</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><hr/><p>Epoll事件驱动函数：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// epoll.c by ailx10\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/epoll.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;epoll.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"n\">g_epfd</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ep_init</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">epfd</span> <span class=\"o\">=</span> <span class=\"n\">epoll_create</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n   <span class=\"n\">g_epfd</span> <span class=\"o\">=</span> <span class=\"n\">epfd</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ep_add</span><span class=\"p\">(</span><span class=\"n\">ep_entry_s</span><span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">epoll_event</span> <span class=\"n\">stEpEvent</span><span class=\"p\">;</span>\n  <span class=\"n\">stEpEvent</span><span class=\"p\">.</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">EPOLLIN</span> <span class=\"o\">|</span> <span class=\"n\">EPOLLHUP</span> <span class=\"o\">|</span> <span class=\"n\">EPOLLERR</span><span class=\"p\">;</span>\n  <span class=\"n\">stEpEvent</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">p</span><span class=\"p\">;</span>\n  <span class=\"n\">epoll_ctl</span><span class=\"p\">(</span><span class=\"n\">g_epfd</span><span class=\"p\">,</span><span class=\"n\">EPOLL_CTL_ADD</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">stEpEvent</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ep_del</span><span class=\"p\">(</span><span class=\"n\">ep_entry_s</span><span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">epoll_event</span> <span class=\"n\">stEpEvent</span><span class=\"p\">;</span>\n  <span class=\"n\">stEpEvent</span><span class=\"p\">.</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">EPOLLIN</span> <span class=\"o\">|</span> <span class=\"n\">EPOLLHUP</span> <span class=\"o\">|</span> <span class=\"n\">EPOLLERR</span><span class=\"p\">;</span>\n  <span class=\"n\">stEpEvent</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">p</span><span class=\"p\">;</span>\n  <span class=\"n\">epoll_ctl</span><span class=\"p\">(</span><span class=\"n\">g_epfd</span><span class=\"p\">,</span><span class=\"n\">EPOLL_CTL_DEL</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">stEpEvent</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ep_exit</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">g_epfd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ep_wait</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"n\">ep_entry_s</span><span class=\"o\">*</span> <span class=\"n\">pstp</span><span class=\"p\">;</span>\n  <span class=\"n\">ep_callback_func</span> <span class=\"n\">fcallback</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">epoll_event</span> <span class=\"n\">astEvent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">epoll_wait</span><span class=\"p\">(</span><span class=\"n\">g_epfd</span><span class=\"p\">,</span><span class=\"n\">astEvent</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"n\">fd</span><span class=\"p\">;</span><span class=\"o\">++</span><span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">pstp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ep_entry_s</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">astEvent</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n      <span class=\"n\">fcallback</span> <span class=\"o\">=</span> <span class=\"n\">pstp</span><span class=\"o\">-&gt;</span><span class=\"n\">fCallback</span><span class=\"p\">;</span>\n      <span class=\"n\">fcallback</span><span class=\"p\">(</span><span class=\"n\">astEvent</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">events</span><span class=\"p\">,</span><span class=\"n\">pstp</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>对应的头文件：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// epoll.h by ailx10\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">typedef</span> <span class=\"nf\">int</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ep_callback_func</span><span class=\"p\">)(</span><span class=\"kt\">int</span> <span class=\"n\">event</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">);</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">tagEpEntry</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">;</span>\n  <span class=\"n\">ep_callback_func</span> <span class=\"n\">fCallback</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"n\">ep_entry_s</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">ep_init</span><span class=\"p\">();</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ep_add</span><span class=\"p\">(</span><span class=\"n\">ep_entry_s</span><span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ep_del</span><span class=\"p\">(</span><span class=\"n\">ep_entry_s</span><span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ep_exit</span><span class=\"p\">();</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ep_wait</span><span class=\"p\">();</span></code></pre></div><hr/><p>定时器函数：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// timer.c by ailx10\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/epoll.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/timerfd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;epoll.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;timer.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">static</span> <span class=\"n\">ep_entry_s</span> <span class=\"n\">g_ep_entry</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nb\">NULL</span><span class=\"p\">};</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">_callback</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">event</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">uint64_t</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"n\">EPOLLIN</span> <span class=\"o\">&amp;</span> <span class=\"n\">event</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">));</span>\n    <span class=\"c1\">//printf(&#34;%d\\n&#34;,n);\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;tick.</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">timer_cre</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">itimerspec</span> <span class=\"n\">timer</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">timerfd</span> <span class=\"o\">=</span> <span class=\"n\">timerfd_create</span><span class=\"p\">(</span><span class=\"n\">CLOCK_MONOTONIC</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;timefd=%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">timerfd</span><span class=\"p\">);</span>\n  <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">timer</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">timer</span><span class=\"p\">));</span>\n  <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">it_interval</span><span class=\"p\">.</span><span class=\"n\">tv_sec</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">it_value</span><span class=\"p\">.</span><span class=\"n\">tv_sec</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"n\">timerfd_settime</span><span class=\"p\">(</span><span class=\"n\">timerfd</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">timer</span><span class=\"p\">,</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"n\">g_ep_entry</span><span class=\"p\">.</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">timerfd</span><span class=\"p\">;</span>\n  <span class=\"n\">g_ep_entry</span><span class=\"p\">.</span><span class=\"n\">fCallback</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ep_callback_func</span><span class=\"p\">)</span><span class=\"n\">_callback</span><span class=\"p\">;</span>\n  <span class=\"n\">ep_add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">g_ep_entry</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">_timer_del</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ep_del</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">g_ep_entry</span><span class=\"p\">);</span>\n  <span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">g_ep_entry</span><span class=\"p\">.</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n  <span class=\"n\">g_ep_entry</span><span class=\"p\">.</span><span class=\"n\">fCallback</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>对应的头文件：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// timer.h by ailx10\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"nf\">timer_cre</span><span class=\"p\">();</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>谢谢阅读 ~</p>", 
            "topic": [
                {
                    "tag": "epoll", 
                    "tagLink": "https://api.zhihu.com/topics/19594919"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "定时器（程序开发）", 
                    "tagLink": "https://api.zhihu.com/topics/19655962"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59293217", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 1, 
            "title": "什么是半双工通信？", 
            "content": "<p>首先我们来做一个小实验，记录ping命令的往返时间，这里我手头上就一台空闲设备，所以就自己ping自己了，可能有些误差，但是问题不大，咱们ping一下自己的往返时间（RTT）的时间为5.7毫秒/100下，下面是对应的小脚本：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">():</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;./1.txt&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">():</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">&#39;time=([0123456789.]+) &#39;</span><span class=\"p\">,</span><span class=\"n\">line</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"p\">:</span>\n                <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"k\">print</span> <span class=\"n\">num</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;__main__&#34;</span><span class=\"p\">:</span>\n    <span class=\"n\">add</span><span class=\"p\">()</span> </code></pre></div><p>然后，我们写一个记录时间的宏函数，来统计批量输入下的时间消耗，我们的文本是2000行，每行约50字节，耗时约92毫秒。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/time.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#define TIME_START \\\n</span><span class=\"cp\"></span>  <span class=\"k\">struct</span> <span class=\"n\">timeval</span> <span class=\"n\">time1</span><span class=\"p\">,</span><span class=\"n\">time2</span><span class=\"p\">;</span> \\\n  <span class=\"n\">gettimeofday</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">time1</span><span class=\"p\">,</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n<span class=\"cp\">#define TIME_END \\\n</span><span class=\"cp\"></span>  <span class=\"n\">gettimeofday</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">time2</span><span class=\"p\">,</span><span class=\"nb\">NULL</span><span class=\"p\">);</span> \\\n  <span class=\"kt\">double</span> <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">time2</span><span class=\"p\">.</span><span class=\"n\">tv_sec</span> <span class=\"o\">-</span> <span class=\"n\">time1</span><span class=\"p\">.</span><span class=\"n\">tv_sec</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">10000</span> <span class=\"o\">+</span> \\\n  <span class=\"p\">(</span><span class=\"n\">time2</span><span class=\"p\">.</span><span class=\"n\">tv_usec</span> <span class=\"o\">-</span> <span class=\"n\">time1</span><span class=\"p\">.</span><span class=\"n\">tv_usec</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">1000</span><span class=\"p\">;</span>\\\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;delta:%lf(ms)</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">delta</span><span class=\"p\">);</span>\n\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"n\">TIME_START</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//Fputs(recvline, stdout);\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"n\">TIME_END</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b2b529771732b4f4dc2fa98af500a969_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"628\" data-rawheight=\"44\" class=\"origin_image zh-lightbox-thumb\" width=\"628\" data-original=\"https://pic2.zhimg.com/v2-b2b529771732b4f4dc2fa98af500a969_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;628&#39; height=&#39;44&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"628\" data-rawheight=\"44\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"628\" data-original=\"https://pic2.zhimg.com/v2-b2b529771732b4f4dc2fa98af500a969_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b2b529771732b4f4dc2fa98af500a969_b.png\"/></figure><p>咱们计算一下5.7毫秒/100下，那么2000下就是114毫秒，和92毫秒相差不大。</p><p>注意：</p><p>一个Ping命令，一般是长度84字节的ICMP报文，而50字节+20字节IP首部+20字节TCP首部=90字节的TCP报文，基本上和Ping分组差不多。那么，如果我们知道了客户与服务器之间的RTT，是不是可以线性估计回射一个给定大小的文件需要的时间花费？？</p><p><b>半双工就是Ping包，停等方式的收发包。</b></p><p>客户在时刻0发出请求，我们假设RTT为8个时间单位，如下所示：</p><p>1表示报文路过管道，0表示管道空闲。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 请求\n</span><span class=\"c1\"></span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">1000</span>\n  <span class=\"mo\">0000</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mo\">0100</span>\n  <span class=\"mo\">0000</span>\n<span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mo\">0010</span>\n  <span class=\"mo\">0000</span>\n<span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mo\">0001</span>\n  <span class=\"mo\">0000</span>\n<span class=\"c1\">// 应答\n</span><span class=\"c1\"></span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mo\">0000</span>\n  <span class=\"mo\">0001</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mo\">0000</span>\n  <span class=\"mo\">0010</span>\n<span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mo\">0000</span>\n  <span class=\"mo\">0100</span>\n<span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mo\">0000</span>\n  <span class=\"mi\">1000</span></code></pre></div><p>对于半双工模式的这个双向管道来说，每个时刻都浪费了7块空间，所以写这样的半双工程序是对性能的浪费。如何理解半双工呢？可以想象一下，双向高速路上，只有一辆车在跑。</p><p>最后给出维基百科的解释：</p><blockquote>半双工（<b>half-duplex</b>）的系统允许二台设备之间的双向数据传输，但不能同时进行。因此同一时间只允许一设备发送数据，若另一设备要发送数据，需等原来发送数据的设备发送完成后再处理。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/58582837", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "如何写一个简单的客户端UDP心跳程序？", 
            "content": "<p>需求：</p><ol><li>客户端每秒发送一次UDP请求，请求内容是<code>hello ailx10</code>字符串。</li><li>服务端在线：5秒内服务端有应答，应答内容是客户端发送的字符串。</li><li>服务端离线：5秒内服务端无应答，客户端直接退出程序。</li></ol><p>实际运行结果如下：</p><ol><li>客户端上线的前3秒钟，服务端在线。</li><li>第3秒后，服务端离线。</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-eb9eb1b563867d55d79a58d9cb5b2f94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb\" width=\"677\" data-original=\"https://pic1.zhimg.com/v2-eb9eb1b563867d55d79a58d9cb5b2f94_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;677&#39; height=&#39;151&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"677\" data-original=\"https://pic1.zhimg.com/v2-eb9eb1b563867d55d79a58d9cb5b2f94_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-eb9eb1b563867d55d79a58d9cb5b2f94_b.jpg\"/></figure><p>注意：</p><ol><li>这个简单的心跳作用是检测服务端是否在线，服务端充当回射服务器，也就是客户端发什么，服务端收到就应答什么。</li><li>客户端的for循环中，每秒都会发生一个UDP请求，请求的内容可以是自己定义的字符串。</li><li>客户端sendto数据之后，就一直阻塞等待服务端的响应。</li><li>客户端在5秒内recvfrom收到数据，打印到终端上，进入下一轮循环。</li><li>客户端在5秒内recvfrom没有收到数据，说明服务端不在线，客户端则退出程序。</li><li>一般来说，心跳服务都作为一个线程来跑，对服务端与客户端进行保活探测。</li></ol><hr/><p>客户端：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">/////////////////////////// dg_timeout.c\n</span><span class=\"c1\"></span>\n<span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sig_alrm</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n\n<span class=\"kt\">void</span>\n<span class=\"nf\">dg_timeout</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"n\">pservaddr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">servlen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"n\">sprintf</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span><span class=\"s\">&#34;%s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"s\">&#34;hello ailx10&#34;</span><span class=\"p\">);</span>\n    <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">SIGALRM</span><span class=\"p\">,</span><span class=\"n\">sig_alrm</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">Sendto</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pservaddr</span><span class=\"p\">,</span> <span class=\"n\">servlen</span><span class=\"p\">);</span>\n        <span class=\"n\">alarm</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Recvfrom</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">))</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n                <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span><span class=\"s\">&#34;scoket timeout</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;recvfrom timeout.</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">alarm</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n            <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"cm\">/* null terminate */</span>\n            <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sig_alrm</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">signo</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">///////////////////////////// udptimeout.c\n</span><span class=\"c1\"></span>\n<span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;usage: udpcli &lt;IPaddress&gt;&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n    <span class=\"n\">Inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n\n    <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_DGRAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">dg_timeout</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>服务端代码：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">//  udpserv01.c\n</span><span class=\"c1\"></span>\n<span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"n\">cliaddr</span><span class=\"p\">;</span>\n\n    <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_DGRAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">dg_echo</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">));</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "UDP", 
                    "tagLink": "https://api.zhihu.com/topics/19567494"
                }, 
                {
                    "tag": "心跳", 
                    "tagLink": "https://api.zhihu.com/topics/19673649"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57968980", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 16, 
            "title": "如何基于TCP写一个自己的Tiny-QQ程序？", 
            "content": "<ul><li>ailx10：hi大黑客，写一个通讯类的Tiny-QQ需要哪些知识背景？</li><li>大黑客：其实你是可以滴，你只需要学过C语言，剩下的交给我来告诉你吧~</li><li>ailx10：你可不要骗我啊，我可是小白啊，很白很白的白。</li><li>大黑客：那....那我坑你，你不会怪我吧？</li><li>ailx10：你最好不要坑我，不然我会在世界频道买喇叭骂你的！（认真脸）</li><li>大黑客：好好好，先看看视频入门吧，<a href=\"https://www.zhihu.com/lives/1078679070698651648\" class=\"internal\">如何基于TCP写一个自己的QQ程序？</a></li></ul><blockquote>知乎live中免费附赠视频代码解说，核心讲解Tiny-QQ程序的select IO多路复用处理网络描述符和客户终端文件描述符，以及对异常的信号处理，穿插几道经典的网络通信面试题讲解，适用人群为计算机网络小白菜，大佬就不用来凑热闹了。</blockquote><hr/><p>一碟小菜：什么是计算机网络？</p><ul><li>8年前，2011.1.26 知乎成立。</li><li>19年前，2000.1.1 百度在北京成立。</li><li>20年前，1999.4.4 阿里巴巴在杭州成立。</li><li>21年前，1998.11.11 腾讯在深圳成立。</li><li>21年前，1998.11 新浪成立。</li><li>21年前，1998.2 搜狐成立。</li><li>22年前，1997.6 网易成立。</li><li>25年前，1994.5.17 兔子接入互联网。</li><li>26年前，1993年， 世界互联网诞生。</li><li><b>50年前的1969年，鹰酱国防部创建了第一个分组交换网络用于军事传递消息。</b></li><li>82年前，1937年，第二次世界大战。</li><li>105年前，1914年，第一次世界大战。</li><li>123年前的1896年，无线电诞生。</li><li>175年前的1844年，电报诞生。</li></ul><p>你问我什么是计算机网络？</p><ul><li>OSI的七层协议：物理层，数据链路层，网络层，运输层，会话层，表示层，应用层。</li><li>TCP、IP四层协议：网络接口层，网际层，运输层，应用层</li><li>五层协议：物理层，数据链路层，网络层，运输层，应用层</li></ul><p>计算机网络就是一层一层学习里面的协议</p><ol><li>大学入门教程：《计算机网络》（谢希仁编著）</li><li>进阶教程：《计算机网络：自顶向下方法》</li></ol><hr/><p>套接字地址结构长什么样？</p><p>协议族，端口，IP地址。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f2fee158778db75a75e35783ab0170be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb\" width=\"783\" data-original=\"https://pic3.zhimg.com/v2-f2fee158778db75a75e35783ab0170be_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;783&#39; height=&#39;478&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"783\" data-original=\"https://pic3.zhimg.com/v2-f2fee158778db75a75e35783ab0170be_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f2fee158778db75a75e35783ab0170be_b.jpg\"/></figure><p>怎么理解主机序和网络序？</p><ul><li>大端：高字节在低位</li><li>小端：高字节在高位</li></ul><p>当你在大端上看到一头可爱的猪的时候，你在小端上可能看到的是，额可能是一个猪屁股和一个猪头。 请问：下面这头猪占几个字节？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b67c3f63dd7090637ad90a85cd04313a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"741\" class=\"origin_image zh-lightbox-thumb\" width=\"472\" data-original=\"https://pic3.zhimg.com/v2-b67c3f63dd7090637ad90a85cd04313a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;472&#39; height=&#39;741&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"472\" data-rawheight=\"741\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"472\" data-original=\"https://pic3.zhimg.com/v2-b67c3f63dd7090637ad90a85cd04313a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b67c3f63dd7090637ad90a85cd04313a_b.jpg\"/></figure><p>趁热打铁：当你在网络序（大端）上看到一个数字，<code>0x0A0B0C0D</code>，那么站着主机序（小端）上的你的朋友将看到什么？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61762182538d04e4d62ed9cd5d33d0ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"583\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;583&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"583\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic2.zhimg.com/v2-61762182538d04e4d62ed9cd5d33d0ed_b.jpg\"/></figure><p>思考题：IPv4地址如何存储最省空间？（偷偷告诉你：其实都是面试题omz.）</p><p>比如：（延伸知识：你知道为什么有ABCD类IP地址吗？）</p><ul><li>A类地址：&#34;100.2.3.4&#34;</li><li>B类地址：&#34;150.1.2.3&#34;</li><li>C类地址：&#34;200.1.2.3&#34;</li><li>D类地址：&#34;240.1.2.3&#34;</li></ul><blockquote>学霸提示：记住数字串最好的方式就是把它设置为你的密码。</blockquote><hr/><p>写一个Tiny-QQ需要掌握哪些函数？</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>什么时候用套接字选项？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7331bc0ec4de3f5dcfcd87c4ce6e74f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-7331bc0ec4de3f5dcfcd87c4ce6e74f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;568&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-7331bc0ec4de3f5dcfcd87c4ce6e74f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7331bc0ec4de3f5dcfcd87c4ce6e74f8_b.jpg\"/></figure><p>你有没有这样的尴尬？异常退出程序之后，发现再运行就报错了~</p><p>嘿嘿，选项轻松帮你搞定。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-39ae7b4285a117060a4e449eb6573507_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1800\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"1800\" data-original=\"https://pic4.zhimg.com/v2-39ae7b4285a117060a4e449eb6573507_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1800&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1800\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1800\" data-original=\"https://pic4.zhimg.com/v2-39ae7b4285a117060a4e449eb6573507_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-39ae7b4285a117060a4e449eb6573507_b.jpg\"/></figure><hr/><p>Tiny-QQ源码解读：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-992b950bca20b6d9dfefbb01f7a47f81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1216\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb\" width=\"1216\" data-original=\"https://pic2.zhimg.com/v2-992b950bca20b6d9dfefbb01f7a47f81_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1216&#39; height=&#39;422&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1216\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1216\" data-original=\"https://pic2.zhimg.com/v2-992b950bca20b6d9dfefbb01f7a47f81_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-992b950bca20b6d9dfefbb01f7a47f81_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// tiny-qq 服务器\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#define MAX_CLI 2\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">maxfd</span><span class=\"p\">,</span> <span class=\"n\">listenfd</span><span class=\"p\">,</span><span class=\"n\">connfd</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">nready</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">MAX_CLI</span><span class=\"p\">];</span>\n    <span class=\"n\">ssize_t</span>             <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">fd_set</span>              <span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"n\">allset</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>                <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">clilen</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n    <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEPORT</span> <span class=\"o\">|</span> <span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">on</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">on</span><span class=\"p\">)))</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">&#34;setsockopt failed&#34;</span><span class=\"p\">);</span>\n        <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n    <span class=\"n\">maxfd</span> <span class=\"o\">=</span> <span class=\"n\">listenfd</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">MAX_CLI</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> \n    <span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n    <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rset</span> <span class=\"o\">=</span> <span class=\"n\">allset</span><span class=\"p\">;</span>\n        <span class=\"n\">nready</span> <span class=\"o\">=</span> <span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">maxfd</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;nready=%d</span><span class=\"se\">\\t</span><span class=\"s\">maxfd=%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">nready</span><span class=\"p\">,</span><span class=\"n\">maxfd</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> \n        <span class=\"p\">{</span>\n            <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n            <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">);</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">MAX_CLI</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">connfd</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxfd</span><span class=\"p\">)</span>\n                <span class=\"n\">maxfd</span> <span class=\"o\">=</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">nready</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">MAX_CLI</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> \n                <span class=\"p\">{</span>\n                    <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n                    <span class=\"n\">FD_CLR</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">allset</span><span class=\"p\">);</span>\n                    <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">else</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">MAX_CLI</span><span class=\"p\">],</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// tiny-qq 客户端处理主函数\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">fd_set</span>  <span class=\"n\">rset</span><span class=\"p\">,</span><span class=\"n\">allrset</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">nready</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">maxfd</span><span class=\"p\">;</span>\n    <span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">allrset</span><span class=\"p\">);</span>\n\n    <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">allrset</span><span class=\"p\">);</span>\n    <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span><span class=\"o\">&amp;</span><span class=\"n\">allrset</span><span class=\"p\">);</span>\n\n    <span class=\"n\">maxfd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">))</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">);</span>\n\n\n    <span class=\"k\">for</span><span class=\"p\">(;;)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">rset</span> <span class=\"o\">=</span> <span class=\"n\">allrset</span><span class=\"p\">;</span>\n        <span class=\"n\">nready</span> <span class=\"o\">=</span> <span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">maxfd</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n           <span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">);</span>\n           <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n            <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n\n<span class=\"c1\">// tiny-qq 客户端\n</span><span class=\"c1\"></span>\n<span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n\n    <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n    <span class=\"n\">Inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"s\">&#34;127.0.0.1&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Connect</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">str_cli</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">);</span>\n\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><p>Tiny-QQ启动和关闭的有哪些需要注意的细节操作？</p><p>如何优雅的退出程序？</p><ul><li>大黑客：我准备退出tiny-qq的聊天了。</li><li>ailx10：我也准备退出tiny-qq的聊天了。</li><li>tiny-qq服务器：boOm我炸了....</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-34366d0177c8f615f2680677a83faf50_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"648\" data-original=\"https://pic1.zhimg.com/v2-34366d0177c8f615f2680677a83faf50_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;648&#39; height=&#39;482&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"648\" data-original=\"https://pic1.zhimg.com/v2-34366d0177c8f615f2680677a83faf50_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-34366d0177c8f615f2680677a83faf50_b.jpg\"/></figure><p>然后我突然想起来，这个和之前的并发服务器不一样，这里没有子进程，所以那个<code>SIGCHLD</code>信号是无效的。然后我就老老实实的GDB跟踪了一把，看看到底在哪里翻车的？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9f69ef1a6b24b1348b1692c09f1dd69d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb\" width=\"877\" data-original=\"https://pic2.zhimg.com/v2-9f69ef1a6b24b1348b1692c09f1dd69d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;877&#39; height=&#39;588&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"877\" data-original=\"https://pic2.zhimg.com/v2-9f69ef1a6b24b1348b1692c09f1dd69d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9f69ef1a6b24b1348b1692c09f1dd69d_b.jpg\"/></figure><p>其实很简单，问题出在<code>FD_ISSET</code>检测的第一个参数是负数了，只要加一句判断就ok啦。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e31593a4857c8a19b467da30dd46b865_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"663\" data-original=\"https://pic2.zhimg.com/v2-e31593a4857c8a19b467da30dd46b865_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;663&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"663\" data-original=\"https://pic2.zhimg.com/v2-e31593a4857c8a19b467da30dd46b865_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e31593a4857c8a19b467da30dd46b865_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p><p></p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "腾讯 QQ", 
                    "tagLink": "https://api.zhihu.com/topics/19550333"
                }, 
                {
                    "tag": "通信", 
                    "tagLink": "https://api.zhihu.com/topics/19560870"
                }
            ], 
            "comments": [
                {
                    "userName": "solomon-ma", 
                    "userLink": "https://www.zhihu.com/people/4e4f4ce0617924dba6731ee6ad9f9841", 
                    "content": "这个不是刚进科大的时候，被计算机网络课程当做实验做过的吗", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "<p>马总好记性呀</p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-fa3cb6bc9ec57da84ab53a60f48d0c6f.gif\" data-width=\"\" data-height=\"\">[棒]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "solomon-ma"
                        }
                    ]
                }, 
                {
                    "userName": "吉薇艾尔", 
                    "userLink": "https://www.zhihu.com/people/63571e9ade0fb541380552fc58519314", 
                    "content": "所以大小端我还是没搞懂[捂脸]", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "哈哈 知乎live有视频解说😂<a href=\"https://pic2.zhimg.com/v2-4d9d4b6069098f246c8b99522be8b5fd_qhd.jpg\" class=\"comment_img\" data-width=\"250\" data-height=\"202\">查看图片</a>", 
                            "likes": 0, 
                            "replyToAuthor": "吉薇艾尔"
                        }
                    ]
                }, 
                {
                    "userName": "清醒的抑郁者", 
                    "userLink": "https://www.zhihu.com/people/565aa129c9b05a38930e3ea48a51877c", 
                    "content": "厉害厉害", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57545662", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "select版客户端实现分析", 
            "content": "<p>通过select重写<code>str_cli</code>客户端程序，目的是服务器进程一终止，客户就能马上得到通知。新版程序不是阻塞套接字事件或IO调用上，而是阻塞于select调用，或是等待套接字，或是等待标准IO输入，处于薛定谔状态。</p><p>客户的套接字上的处理条件：</p><ol><li>如果对端TCP发送数据，那么套接字变为可读，并且read返回一个大于0的值</li><li>如果对端TCP发送一个FIN（对端进程终止），那么套接字变为可读，并且read返回0（EOF）</li><li>如果对端TCP发送一个RST（对端主机崩溃并重启），那么套接字变为可读，并且返回-1</li></ol><p><b>调用select的注意点：</b></p><p>我们只需要一个用于检查可读性的描述符集，该集合由<code>FD_ZERO</code>初始化，并用<code>FD_SET</code>打开两位：一位对应于标准IO文件指针fp，一位对应于套接字sockfd。计算出两个描述符中的较大值后，调用select。</p><p>写集合和异常集合的指针都是空，因为我不关心这些。</p><p>最后一个时间参数也是空，因为我们希望本调用阻塞到某个描述符就绪为止。</p><p>注意：<code>fileno()</code>函数把标准IO文件指针转换为对应的描述符。 </p><p>select事件的注意点：</p><p>如果在select返回时套接字是可读的，那就先用readline读入一行数据，再fputs输出。</p><p>如果在select返回时标准输入可读，那就先fgets读入一行数据，再writen把它写入套接字中。</p><hr/><p>改版后：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>         <span class=\"n\">maxfdp1</span><span class=\"p\">;</span>\n    <span class=\"n\">fd_set</span>      <span class=\"n\">rset</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>        <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n    <span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n        <span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n        <span class=\"n\">maxfdp1</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">maxfdp1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"cm\">/* socket is readable */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n            <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FD_ISSET</span><span class=\"p\">(</span><span class=\"n\">fileno</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"cm\">/* input is readable */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>     <span class=\"cm\">/* all done */</span>\n            <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>改版前：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n\n        <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57543000", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "select的最大描述符数是多少？", 
            "content": "<p>早期大多数应用程序不会用到许多描述符，我们很少能找到一个使用几百个套接字描述符的应用程序。然而，使用那么多描述符的应用程序确实存在，他们往往使用select来复选描述符。</p><p>最初设计select的时候，操作系统通常对每个进程可用的最大描述符设置了上限，select就使用相同的上限值。然而，现在的UNIX版本允许每个进程不限制描述符上限，这对select有什么影响？</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#define FD_SETSIZE      256</span></code></pre></div><p>我们尝试增大<code>FD_SETSIZE</code>的值以增大select所用描述符集的大小，不幸的是，这样做通常不行。想增大描述符集大小，唯一可行的方法是限增大<code>FD_SETSIZE</code>的值，再从新编译内核。</p><p>小测试：</p><p>将<code>FD_SETSIZE</code>定义成1024，不重新编译内核，select支持的最大描述符是1024吗？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57540430", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "描述符准备就绪的条件是什么？", 
            "content": "<p>我们一直在讨论等待某个描述符准备好IO（读或写），或是等待其上发生一个等待处理的异常条件（带外数据）。尽管可读性和可写性对于普通文件这样的描述符显而易见，然而对于引起select返回套接字“就绪”的条件，我们来详细讨论。</p><ul><li><b>满足下面4个条件中的任何一个，一个套接字准备好读。</b></li></ul><ol><li>该套接字接收缓冲区中的数据字节数大于等于套接字接收缓冲区低水平标记的当前大小。这个标记值一般是1，对这样的套接字读，将返回一个大于0的值，也就是返回准备好的数据。</li><li>该连接的读半部关闭（也就是收到FIN的TCP连接），对这样的套接字读，将不阻塞直接返回0（EOF）。</li><li>该套接字是一个监听套接字，且已完成的连接数不为0，对这样的套接字accept通常不会阻塞。</li><li>其上有一个套接字错误等待处理，对这样的套接字读，将不阻塞直接返回-1。</li></ol><ul><li><b>满足下面4个条件中的任何一个，一个套接字准备好写。</b></li></ul><ol><li>该套接字发送缓冲区中的可用空间字节数大于等于套接字发送缓冲区低水位标记的当前大小。如果该套接字设置成非阻塞，写操作将不阻塞返回一个正值，标记值通常是2048。</li><li>该连接的写半部分关闭，对这样的套接字写，将产生SIGPIPE信号。</li><li>使用非阻塞connect的套接字已建立连接，或者connect已经以失败告终。</li><li>其上有一个套接字错误待处理，对这样的套接字写，将不阻塞直接返回-1。</li></ol><ul><li><b>如果一个套接字存在带外数据或仍处于带外标记，那么它有异常条件待处理。</b></li></ul><p>当某个套接字上发生错误时，它将又select标记既可读又可写。</p><p>注意：</p><p>接收低水平标记和发送低水平标记的目的在于：允许应用进程控制在select返回可读或可写条件之前有多少数据可读或有多大空间可用于写。举个栗子，如果我们知道除非至少存在64个字节的数据，否则我们的应用进程没有任何有效工作，那么我们可以把接收低水平位标记为64，以防止少于64个字节的数据准备好读时select唤醒我们。</p><p>小测试：</p><p>当UDP套接字的发送低水平标记小于等于发送缓冲区大小时，这时该套接字可写吗？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p><p></p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/57439225", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "什么是Select函数？", 
            "content": "<p>Select函数：允许进程指示内核等待多个事件中的任何一个发生，并只在有一个或多个事件发生或经历一段指定的时间后才唤醒它。</p><p>举个栗子，我们可以调用Select，告诉内核仅仅在下列情况发生时才返回：</p><ul><li>集合{1,4,5}中任何描述符准备好读</li><li>集合{2,7}中任何描述符准备好写</li><li>集合{1,4}中任何描述符由异常条件待处理</li><li>已经经历了10秒</li></ul><p>我们调用Select告诉内核对哪些描述符感兴趣以及等待多长时间。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* According to POSIX.1-2001 */</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/select.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/* According to earlier standards */</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/time.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">nfds</span><span class=\"p\">,</span> <span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">readfds</span><span class=\"p\">,</span> <span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">writefds</span><span class=\"p\">,</span>\n          <span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">exceptfds</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">timeval</span> <span class=\"o\">*</span><span class=\"n\">timeout</span><span class=\"p\">);</span></code></pre></div><ul><li><code>int nfds</code> 指定待测试的描述符个数，它应该被设置为待测试的最大数目+1。fd_set通常支持的最大描述符是1023+1。</li></ul><hr/><p>如何设置下面3个参数中的每个参数指定一个还是多个描述符值是一个设计上的问题。select采用描述符集，通常是一个整数数组，其中每个整数中的每一位对应一个描述符。</p><p>举个栗子：假设使用32位整数，那么该数组的每一个元素对应于描述符<code>0-31</code>，第二个元素对应于描述符<code>32-63</code>，以此类推。 </p><div class=\"highlight\"><pre><code class=\"language-c\">       <span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/select.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n       <span class=\"cm\">/* According to earlier standards */</span>\n       <span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/time.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>       <span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>       <span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n       <span class=\"kt\">void</span> <span class=\"nf\">FD_CLR</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">set</span><span class=\"p\">);</span>\n       <span class=\"kt\">int</span>  <span class=\"nf\">FD_ISSET</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">set</span><span class=\"p\">);</span>\n       <span class=\"kt\">void</span> <span class=\"nf\">FD_SET</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">set</span><span class=\"p\">);</span>\n       <span class=\"kt\">void</span> <span class=\"nf\">FD_ZERO</span><span class=\"p\">(</span><span class=\"n\">fd_set</span> <span class=\"o\">*</span><span class=\"n\">set</span><span class=\"p\">);</span></code></pre></div><p>我们可以分配一个<code>fd_set</code>数据类型的描述符集，并用这些宏设置或测试该集合中的每一位。 </p><p>举个栗子：我们定义一个<code>fd_set</code>类型的变量，然后打开描述符1、4、5对应的位。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">fd_set</span> <span class=\"n\">rset</span><span class=\"p\">;</span>\n<span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n<span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n<span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span>\n<span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">rset</span><span class=\"p\">);</span></code></pre></div><p>如果对readset、writeset、exceptset中的某一个条件不感兴趣，我们可以把它设置为空指针。</p><ul><li><code>fd_set *readfds</code> 指定让内核测试读条件的描述符</li><li><code>fd_set *writefds</code> 指定让内核测试写条件的描述符 </li></ul><hr/><ul><li><code>fd_set *exceptfds</code> 指定让内核测试异常条件的描述符 </li></ul><p>目前支持的异常条件：</p><ol><li>某个套接字的带外数据到达。</li><li>某个已设置为分组模式的伪终端存在可从其主端读取的控制状态信息。</li></ol><hr/><ul><li><code>struct timeval *timeout</code> </li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"n\">timeval</span> <span class=\"p\">{</span>\n     <span class=\"kt\">long</span>     <span class=\"n\">tv_sec</span><span class=\"p\">;</span>     <span class=\"cm\">/* seconds */</span>\n     <span class=\"kt\">long</span>    <span class=\"n\">tv_usec</span><span class=\"p\">;</span>    <span class=\"cm\">/* microseconds */</span>\n<span class=\"p\">};</span></code></pre></div><ol><li> 把该参数设置为NULL，阻塞，仅在有一个描述符准备好IO时才返回。</li><li><code>tv_sec != 0 || tv_usec != 0</code> ，超时返回，或在有一个描述符准备好IO时返回。</li><li><code>tv_sec == 0 || tv_usec == 0</code> ，立即返回，这称为<b>轮训</b>。</li></ol><hr/><p>select函数修改由指针readset，writeset，exceptset所指向的描述符集，这3个参数都是值-结果参数。调用的时候，我们指定所关心的描述符值。返回的时候，结果将指示这些描述符已经就绪。函数返回后，我们使用<code>FD_ISSET</code>宏测试<code>fd_set</code>数据类型中的描述符。 </p><p>通俗的说：调用的时候指定关心的描述符，返回的时候告诉该描述符是否就绪。</p><p>最后，返回值INT，表示跨所有描述符集的已就绪的总位数。如果在任何描述符就绪之前，定时器到时了，那么就返回0，返回-1表示出错，比如被信号中断。</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56832245", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "什么是IO复用？", 
            "content": "<p>在前面的例子中，TCP客户端同时处理两个输入：</p><ul><li>标准输入</li><li>TCP套接字</li></ul><p>我们遇到的问题就是，在客户端阻塞于标准输入Fgets调用时，突然服务器子进程被干掉。服务器TCP虽然正确的给客户端发生一个FIN，但是客户端阻塞在标准输入等待用户输入，看不到这个EOF，直至从标准输入读到数据才能看到EOF，这时黄花菜已经凉凉了。</p><p>这时候我们的进程就需要一种预先告知内核的能力，使得内核一旦发现进程指定的一个或多个IO条件就绪，就通知进程。这种能力就叫IO复用（multiplexing）。</p><blockquote>最常见的场景：一个TCP服务器既要处理监听套接字，又要处理已连接套接字。</blockquote><h2>什么是阻塞式IO？</h2><p>举个栗子，UDP的<code>recvfrom</code>，直到数据报到达且被复制到用户进程的缓冲区或发生错误才返回。（最常见的错误是系统调用被信号中断。）<code>recvfrom</code>成功返回后，应用进程开始处理数据报。通俗的说就是进入<code>recvfrom</code>进程就卡住了，直到<code>recvfrom</code>返回。</p><h2>什么是非阻塞式IO？</h2><p>进程把一个套接字设置成非阻塞是在通知内核：当请求的IO操作把本进程投入睡眠，不要把本进程投入睡眠，而是返回一个错误。应用进程持续轮询内核，查看某个操作是否准备就绪，当数据准备就绪，就把数据从内核复制到用户空间。</p><h2>什么是IO复用？</h2><p>我们把IO阻塞在select或poll系统调用上，而不是阻塞在真正的IO系统调用上。这样做的好处是：允许进程指示内核等待多个事件中的任何一个发生，并只在一个或多个事件发生或经历一段指定的时间后才唤醒它。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "IO多路复用", 
                    "tagLink": "https://api.zhihu.com/topics/20054206"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56824467", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 1, 
            "title": "向收到RST和FIN的套接字写入数据会怎样？", 
            "content": "<p>当一个进程向某个已收到RST的套接字执行写操作时，内核会向该进程发一个<code>SIGPIPE</code>信号，这个信号的默认行为是终止进程。</p><p>怎么模拟呢？其实很简单，客户端修改一下，写2次，中间睡一秒，让RST飞一会 ~</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;--------------</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n\n        <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><ol><li>我们输入<code>1234567890</code> </li><li>然后发现返回了<code>-----------</code> </li><li>随后杀死所有服务器子进程</li><li>触发<code>SIGCHLD</code>信号处理函数，打印5条终止记录，并输出<code>11234567890</code> </li></ol><ul><li><b>为什么会这样呢？1出现了2次，并且没有换行？</b></li><li>因为第一次<code>write()</code>写了一个<code>1</code>，触发一个RST。 </li><li>第二次<code>write()</code>少写了一个<code>\\n</code>，触发一个<code>SIGPIPE</code>信号。 </li></ul><p><b>那还有一个问题，不知道读者有没有注意到，上面的2中仅仅输出了<code>-------</code>，没有立即输出<code>11234567890</code>，这是为何？ </b></p><p>其实，很简单，因为<b><code>readline()</code></b>是：需要读到<code>\\n</code>或<code>EOF</code>才处理一行文本的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-07c152fd73340c5b871b993a1c7add45_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"649\" data-original=\"https://pic2.zhimg.com/v2-07c152fd73340c5b871b993a1c7add45_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;649&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"649\" data-original=\"https://pic2.zhimg.com/v2-07c152fd73340c5b871b993a1c7add45_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-07c152fd73340c5b871b993a1c7add45_b.jpg\"/></figure><p>那么，小结一下：</p><ol><li>当一个进程向某个已收到RST的套接字执行写操作时，内核会向该进程发一个<code>SIGPIPE</code>信号，这个信号的默认行为是终止进程。</li><li>当一个进程向某个已收到FIN的套接字执行写操作时，没有任何毛病！</li></ol><p><b>小提问：你知道最后的<code>--------</code>，发生了什么吗？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "TCP/IP", 
                    "tagLink": "https://api.zhihu.com/topics/19614019"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56722497", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 7, 
            "title": "服务器进程先终止会发生什么？", 
            "content": "<p>我们启动服务端和客户端，然后杀死服务器子进程，模拟服务器进程终止的场景，现在来看看有什么发生？步骤如下：</p><ol><li>我们在同一个主机上启动服务端和客户端程序，并在客户端输入一行文字，验证正常。</li><li>找到服务器子进程的PID，并执行kill命令，子进程的所有打开的描述符都被关闭，这将导致服务端向客户端发送一个FIN，期待客户端TCP回应一个ACK。</li><li>SIGCHLD信号被发送给服务器父进程，调用wait优雅的让子进程退出。</li><li>而客户进程阻塞在fgets调用，在等待用户输入。</li><li>这时候通过netstat发现客户端和服务器子进程都进入四次挥手的前半阶段。</li><li>在客户端再次输入一行文本，客户端TCP把数据发送给服务器。</li><li>当服务器TCP接收到来自客户的数据时，发现服务器子进程已经终止，于是回应一个RST。</li><li>然而客户端看不到这个RST，因为客户端调用writen后，立即调用readline，由于收到第2步中的FIN，所调用的readline立即返回0，然后客户端进程退出。</li></ol><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>    <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n\n        <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>9. 当客户进程终止时，所有的客户端描述符被关闭。</p><hr/><p><b>真实场景模拟过程如下：</b></p><p>刚刚启动服务端和客户端的情景如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d6250d81b6cf367ea1162c43ce8d850d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb\" width=\"837\" data-original=\"https://pic2.zhimg.com/v2-d6250d81b6cf367ea1162c43ce8d850d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;837&#39; height=&#39;349&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"837\" data-original=\"https://pic2.zhimg.com/v2-d6250d81b6cf367ea1162c43ce8d850d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d6250d81b6cf367ea1162c43ce8d850d_b.jpg\"/></figure><p>我们找到服务器子进程：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d2cf6ec15169f3738c0b37bbe475b0a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"https://pic4.zhimg.com/v2-d2cf6ec15169f3738c0b37bbe475b0a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;863&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"863\" data-original=\"https://pic4.zhimg.com/v2-d2cf6ec15169f3738c0b37bbe475b0a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d2cf6ec15169f3738c0b37bbe475b0a3_b.jpg\"/></figure><p>随便杀死一个子进程PID=23147：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3aec2b26370597978e86c317da4c3c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb\" width=\"813\" data-original=\"https://pic1.zhimg.com/v2-3aec2b26370597978e86c317da4c3c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;813&#39; height=&#39;242&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"813\" data-original=\"https://pic1.zhimg.com/v2-3aec2b26370597978e86c317da4c3c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3aec2b26370597978e86c317da4c3c78_b.jpg\"/></figure><ul><li>服务器子进程进入FIN_WAIT2状态</li><li>客户端进入CLOSE_WAIT状态</li></ul><p>再看看客户端，信号处理函数成功执行了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6dbfcbd157f31ee049d113b937c5b450_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"142\" class=\"origin_image zh-lightbox-thumb\" width=\"665\" data-original=\"https://pic1.zhimg.com/v2-6dbfcbd157f31ee049d113b937c5b450_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;665&#39; height=&#39;142&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"142\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"665\" data-original=\"https://pic1.zhimg.com/v2-6dbfcbd157f31ee049d113b937c5b450_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6dbfcbd157f31ee049d113b937c5b450_b.jpg\"/></figure><p>我们输入一行文本试试，发现回射功能正常：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7e97bfb8cc3f6998314f230bd29b118e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-7e97bfb8cc3f6998314f230bd29b118e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;634&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-7e97bfb8cc3f6998314f230bd29b118e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7e97bfb8cc3f6998314f230bd29b118e_b.jpg\"/></figure><p>我们杀死其他4个服务器子进程，现在服务器子进程全部干掉了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6656c5bd8113837fd7270dfb3f4bc1b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"818\" data-original=\"https://pic2.zhimg.com/v2-6656c5bd8113837fd7270dfb3f4bc1b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;818&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"818\" data-original=\"https://pic2.zhimg.com/v2-6656c5bd8113837fd7270dfb3f4bc1b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6656c5bd8113837fd7270dfb3f4bc1b1_b.jpg\"/></figure><p>我们直接输入一个回车，发现客户端挂了，why：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e8b42721903ee6354311f485bd38fecb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb\" width=\"672\" data-original=\"https://pic4.zhimg.com/v2-e8b42721903ee6354311f485bd38fecb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;672&#39; height=&#39;270&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"672\" data-original=\"https://pic4.zhimg.com/v2-e8b42721903ee6354311f485bd38fecb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e8b42721903ee6354311f485bd38fecb_b.jpg\"/></figure><p>通过tcpdump抓包：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-18d5b97dd02b3aa097fa16ca25d7d2bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic4.zhimg.com/v2-18d5b97dd02b3aa097fa16ca25d7d2bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic4.zhimg.com/v2-18d5b97dd02b3aa097fa16ca25d7d2bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-18d5b97dd02b3aa097fa16ca25d7d2bb_b.jpg\"/></figure><ul><li>长度20=19个<code>d</code>加1个<code>\\n</code> </li><li>长度13 = <code>hello hacker</code>（12个字符）加1个<code>\\n</code> </li></ul><p> 和下图中的数据对上了~</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5b2d2ef38889085221fc73a01f960f4b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1521\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb\" width=\"1521\" data-original=\"https://pic4.zhimg.com/v2-5b2d2ef38889085221fc73a01f960f4b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1521&#39; height=&#39;319&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1521\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1521\" data-original=\"https://pic4.zhimg.com/v2-5b2d2ef38889085221fc73a01f960f4b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5b2d2ef38889085221fc73a01f960f4b_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n    <span class=\"n\">pid_t</span>               <span class=\"n\">childpid</span><span class=\"p\">;</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">clilen</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>                <span class=\"n\">sig_chld</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n\n    <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">SIGCHLD</span><span class=\"p\">,</span> <span class=\"n\">sig_chld</span><span class=\"p\">);</span>  <span class=\"cm\">/* must call waitpid() */</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>       <span class=\"cm\">/* back to for() */</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;accept error&#34;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">childpid</span> <span class=\"o\">=</span> <span class=\"n\">Fork</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"cm\">/* child process */</span>\n            <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">);</span>    <span class=\"cm\">/* close listening socket */</span>\n            <span class=\"n\">str_echo</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>   <span class=\"cm\">/* process the request */</span>\n            <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>          <span class=\"cm\">/* parent closes connected socket */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "TCP/IP", 
                    "tagLink": "https://api.zhihu.com/topics/19614019"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56530986", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "wait和waitpid是干啥用的？", 
            "content": "<p>我们调用wait或waitpid来处理已终止的子程序。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/wait.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">pid_t</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">status</span><span class=\"p\">);</span>\n<span class=\"n\">pid_t</span> <span class=\"nf\">waitpid</span><span class=\"p\">(</span><span class=\"n\">pid_t</span> <span class=\"n\">pid</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">options</span><span class=\"p\">);</span></code></pre></div><p>函数wait和waitpid均返回2个值，已终止的子进程的PID，以及出参返回的INT型终止状态。我们可以调用宏函数，来检查终止状态，可以辨别子进程是正常终止，由某个信号杀死，还是由作业控制停止。如果调用wait的进程，没有已终止子进程，那么wait将阻塞直到有一个子进程终止。waitpid函数给我们更多的控制，比如等待哪个进程，是否阻塞。其中，pid参数允许我们指定想等待的进程ID，-1表示等待第一个终止的子进程。option选项设置为<code>WNOHANG</code>，则告诉内核在没有已终止子进程时不要阻塞。</p><p>函数wait和waitpid有什么区别？</p><p>客户端与服务器建立5个TCP连接：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>  <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;usage: tcpcli &lt;IPaddress&gt;&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sockfd</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n        <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n        <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n        <span class=\"n\">Inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n\n        <span class=\"n\">Connect</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">str_cli</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>      <span class=\"cm\">/* do it all */</span>\n\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>当客户终止时，所有打开的描述符由内核自动关闭，且所有5个连接基本在同一时刻终止。这样引发了5个FIN报文，每个连接一个，导致服务器的5个子进程在同一时刻终止，基本在同一时刻引发了5个SIGCHLD信号递交给父进程。</p><ul><li>第一次咱们跑，5个子进程终止引发的5个SIGCHLD信号都处理了</li><li>第二次咱们跑，5个子进程终止引发的2个SIGCHLD型号被处理，剩下3个变成僵尸进程</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-211db1be8351ad758f77b4a604d77e4e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"688\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb\" width=\"688\" data-original=\"https://pic3.zhimg.com/v2-211db1be8351ad758f77b4a604d77e4e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;688&#39; height=&#39;266&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"688\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"688\" data-original=\"https://pic3.zhimg.com/v2-211db1be8351ad758f77b4a604d77e4e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-211db1be8351ad758f77b4a604d77e4e_b.jpg\"/></figure><ul><li><b>为什么会出现这种不确定事件呢？</b></li></ul><p>因为建立一个信号处理函数并在其中调用wait并不能完全防止出现僵尸进程，这个问题在于：5个信号都是信号处理函数执行之前产生，而信号处理函数只执行一次，而产生的信号一般又不排队，第一个信号还没执行结束，第二个相同的信号就到达了，导致后面一些子进程没法wait。</p><ul><li><b>有什么解决办法呢？</b></li></ul><p>正确的解决办法是调用waitpid代替wait。我们在一个循环里调用waitpid，以获取所有已终止子进程的状态，我们必须指定<code>WNOHANG</code>选项，它告诉waitpid，在有尚未终止的子进程运行时不要阻塞。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">sig_chld</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">signo</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">pid_t</span>   <span class=\"n\">pid</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>     <span class=\"n\">stat</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">pid</span> <span class=\"o\">=</span> <span class=\"n\">waitpid</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">stat</span><span class=\"p\">,</span> <span class=\"n\">WNOHANG</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;i = %d</span><span class=\"se\">\\t</span><span class=\"s\">child %d terminated</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">pid</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>嘿嘿嘿，现在是不是输入EOF之后，所有的僵尸进程都会被干掉了呀~</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-329b25147dedb7cdbf4de25cc13d9c2d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"793\" data-original=\"https://pic2.zhimg.com/v2-329b25147dedb7cdbf4de25cc13d9c2d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;793&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"793\" data-original=\"https://pic2.zhimg.com/v2-329b25147dedb7cdbf4de25cc13d9c2d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-329b25147dedb7cdbf4de25cc13d9c2d_b.jpg\"/></figure><p>为了更清晰的查看效果，我自己加了一个序号i，先看第一次运行结果：</p><ul><li>前面2个信号，都分别触发了信号处理函数。</li><li>后面3个信号，只触发一次信号处理函数。</li></ul><p><b>这说明什么问题了呢？</b>简单来说，第一个信号被捕获，处理函数执行完后，第二个信号还没有被捕获到，waitpid直接返回了0。第二个信号被捕获，同第一个一样。第三个信号被捕获，处理函数执行完后，发现剩下的2个信号也被捕获了，所以while循环继续。</p><p>再看第二次运行结果，正好反过来了。正确的服务端代码如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n    <span class=\"n\">pid_t</span>               <span class=\"n\">childpid</span><span class=\"p\">;</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">clilen</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>                <span class=\"n\">sig_chld</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n\n    <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">SIGCHLD</span><span class=\"p\">,</span> <span class=\"n\">sig_chld</span><span class=\"p\">);</span>  <span class=\"cm\">/* must call waitpid() */</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>       <span class=\"cm\">/* back to for() */</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;accept error&#34;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">childpid</span> <span class=\"o\">=</span> <span class=\"n\">Fork</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"cm\">/* child process */</span>\n            <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">);</span>    <span class=\"cm\">/* close listening socket */</span>\n            <span class=\"n\">str_echo</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>   <span class=\"cm\">/* process the request */</span>\n            <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>          <span class=\"cm\">/* parent closes connected socket */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p><p></p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "信号", 
                    "tagLink": "https://api.zhihu.com/topics/19555369"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56520942", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 1, 
            "title": "如何处理SIGCHLD信号？", 
            "content": "<p>设置僵尸（zombie）状态的目的是维护子进程的信息，以便于父进程在某个时刻获取。这里面包含：子进程的进程ID、终止状态以及资源利用信息（CPU时间、内存使用量）。如果一个进程终止，而该进程有子进程处于僵尸状态，那么它的所有僵尸子进程的父进程会变成<code>init</code>进程，进程ID=1。<code>init</code>进程会清理（wait）这些僵尸进程。</p><p>如何处理僵尸进程呢？</p><blockquote>处理僵尸进程的可移植方法是：捕获SIGCHLD信号，并调用wait或waitpid。</blockquote><p>无论何时我们fork子进程都得wait它们，以防子进程变成僵尸进程。所以，我们建立一个捕获SIGCHLD信号的信号处理函数，在函数体中调用wait处理僵尸子进程。在fork之前，我们建立信号处理函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n    <span class=\"n\">pid_t</span>               <span class=\"n\">childpid</span><span class=\"p\">;</span>\n    <span class=\"n\">socklen_t</span>           <span class=\"n\">clilen</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>                <span class=\"n\">sig_chld</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n\n    <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n    <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n    <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">SIGCHLD</span><span class=\"p\">,</span> <span class=\"n\">sig_chld</span><span class=\"p\">);</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n        <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">childpid</span> <span class=\"o\">=</span> <span class=\"n\">Fork</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"cm\">/* child process */</span>\n            <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">);</span>    <span class=\"cm\">/* close listening socket */</span>\n            <span class=\"n\">str_echo</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>   <span class=\"cm\">/* process the request */</span>\n            <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>          <span class=\"cm\">/* parent closes connected socket */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>信号处理函数如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>    <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">sig_chld</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">signo</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">pid_t</span>   <span class=\"n\">pid</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>     <span class=\"n\">stat</span><span class=\"p\">;</span>\n\n    <span class=\"n\">pid</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">stat</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;child %d terminated</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">pid</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0b40dd12e8e2cf24a25c4d49722d611e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"215\" class=\"origin_image zh-lightbox-thumb\" width=\"666\" data-original=\"https://pic3.zhimg.com/v2-0b40dd12e8e2cf24a25c4d49722d611e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;666&#39; height=&#39;215&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"215\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"666\" data-original=\"https://pic3.zhimg.com/v2-0b40dd12e8e2cf24a25c4d49722d611e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0b40dd12e8e2cf24a25c4d49722d611e_b.jpg\"/></figure><ol><li>后台启动服务器程序</li><li>前台启动客户端程序</li><li>输入一段文字，复读机会返回给你这段文字</li><li>输入EOF（Ctrl+D）</li><li>输出<code>child 17546 terminated</code></li><li>输入jobs，输出<code>[1]+  Running ./tcpserv02 &amp; </code> </li></ol><p>咱们来分析一下，这背后的故事吧：</p><ol><li>输入EOF终止客户端，客户端TCP发送一个FIN给服务器，服务器回答一个ACK。</li><li>收到客户的FIN导致服务器传递一个EOF给子进程的readline，从而子进程结束。</li><li>子进程结束，伴随SIGCHLD信号递交，父进程阻塞。</li><li>sig_chld表演，打印PID（进程ID），之后返回。</li></ol><p>该信号是在父进程阻塞于慢系统调用（accept）时由父进程捕获，内核就会使accept返回一个EINTR错误（被中断的系统调用），父进程没有处理这个错误。这个例子是告诉我们，在编写捕获信号的网络程序时，我们必须认清被中断的系统调用并处理它们，有些系统会重启系统调用，有些系统不会重启，里面的坑遇到在填吧。</p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "信号", 
                    "tagLink": "https://api.zhihu.com/topics/19555369"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55635650", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 8, 
            "title": "什么是信号处理？", 
            "content": "<p>信号（signal）就是告知某个进程发生了某个事件，也叫软件中断（software interrupt），信号通常是异步发生的，也就是进程不知道信号的准备发生时刻。信号可以：</p><ul><li>由一个进程发给另一个进程（发给自己也行）</li><li>由内核发给某个进程</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><code>SIGCHLD</code> 信号就是由内核在任何一个进程挂掉的时候，发给自己父进程的一个信号。</p><p>每个信号都有一个与之关联的行为（action），也叫处置（disposition）。我们通过调用<code>sigation</code> 函数来设定一个信号的行为，一共有3种行为。</p><ol><li>我们提供一个函数，只要特定信号发生就去调用这个函数（信号处理函数，signal handler）。这种行为叫捕获信号（capture），有2种信号不被捕获，一个叫<code>SIGKILL</code>，一个叫<code>SIGSTOP</code>。信号处理函数由信号值这唯一参数来调用，没有返回值。对于大多数你看到的信号，调用sigaction函数并指定信号发生时所调用的函数就是捕获信号所需做的全部工作，少数有例外。</li><li>我们可以把某个信号的行为设置为<code>SIG_IGN</code>来忽略它，但是凡事都有例外，<code>SIGKILL</code>和<code>SIGSTOP</code>这个兄弟俩不能被忽略。</li><li>我们还可以把某个信号设置为<code>SIG_DFL</code>来启用默认行为，默认行为一般就是清理战场，结束进程，凡事都有例外，咱们实验下的<code>SIGCHLD</code>信号的默认行为就是忽略。</li></ol><p>我们说呀，调用<code>sigation</code>函数来设定一个信号的行为！只不过稍微有点复杂，如下第一个：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">Sigfunc</span> <span class=\"o\">*</span>\n<span class=\"nf\">signal</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">signo</span><span class=\"p\">,</span> <span class=\"n\">Sigfunc</span> <span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sigaction</span>    <span class=\"n\">act</span><span class=\"p\">,</span> <span class=\"n\">oact</span><span class=\"p\">;</span>\n\n    <span class=\"n\">act</span><span class=\"p\">.</span><span class=\"n\">sa_handler</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">;</span>\n    <span class=\"n\">sigemptyset</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">act</span><span class=\"p\">.</span><span class=\"n\">sa_mask</span><span class=\"p\">);</span>\n    <span class=\"n\">act</span><span class=\"p\">.</span><span class=\"n\">sa_flags</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">signo</span> <span class=\"o\">==</span> <span class=\"n\">SIGALRM</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"cp\">#ifdef  SA_INTERRUPT\n</span><span class=\"cp\"></span>        <span class=\"n\">act</span><span class=\"p\">.</span><span class=\"n\">sa_flags</span> <span class=\"o\">|=</span> <span class=\"n\">SA_INTERRUPT</span><span class=\"p\">;</span>   <span class=\"cm\">/* SunOS 4.x */</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n<span class=\"cp\">#ifdef  SA_RESTART\n</span><span class=\"cp\"></span>        <span class=\"n\">act</span><span class=\"p\">.</span><span class=\"n\">sa_flags</span> <span class=\"o\">|=</span> <span class=\"n\">SA_RESTART</span><span class=\"p\">;</span>     <span class=\"cm\">/* SVR4, 44BSD */</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sigaction</span><span class=\"p\">(</span><span class=\"n\">signo</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">act</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">oact</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">SIG_ERR</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">oact</span><span class=\"p\">.</span><span class=\"n\">sa_handler</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* end signal */</span>\n\n<span class=\"n\">Sigfunc</span> <span class=\"o\">*</span>\n<span class=\"nf\">Signal</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">signo</span><span class=\"p\">,</span> <span class=\"n\">Sigfunc</span> <span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">)</span>    <span class=\"cm\">/* for our signal() function */</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Sigfunc</span> <span class=\"o\">*</span><span class=\"n\">sigfunc</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">sigfunc</span> <span class=\"o\">=</span> <span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">signo</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">SIG_ERR</span><span class=\"p\">)</span>\n        <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;signal error&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">sigfunc</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p><code>signal</code>函数是对<code>sigaction</code>函数的封装，第一个参数是信号名，第二个参数是函数指针（或者是常值<code>SIG_IGN</code>或<code>SIG_DFL</code>）。来看看<code>signal</code>函数原型：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">Sigfunc</span> <span class=\"o\">*</span><span class=\"nf\">Signal</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">Sigfunc</span> <span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">void</span>    <span class=\"nf\">Sigfunc</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span></code></pre></div><p>这个函数的返回值和第二个参数都是指向信号处理函数的指针。</p><ol><li>信号处理函数：<code>act.sa_handler = func;</code> </li><li><code>sigemptyset(&amp;act.sa_mask);</code>把<code>sa_mask</code>设置成空集，意味着该信号处理函数运行期间，不阻塞额外的信号。POSIX保证被捕获的信号，在其信号处理函数运行期间总是阻塞的。</li><li>调用<code>sigaction</code>函数，并将相应信号的旧行为作为<code>signal</code>函数的返回值。<code>oact</code>里的<code>o</code>原来是<code>old</code>的意思。</li></ol><hr/><p>POSIX 信号总结：</p><ol><li>一旦安装了信号处理函数，它就一直安装着</li><li>在一个信号处理函数运行期间，正被递交的信号是阻塞的。并且，安装处理函数时在传递给<code>sigaction</code>函数的<code>sa_mask</code>信号集中指定的任何额外信号都是被阻塞的。设置为空表示，除了被捕获的信号外，没有额外信号被阻塞。</li><li>如果一个信号在被阻塞期间产生了一次或多次，那么该信号被阻塞之后，通常只递交一次。</li><li>利用<code>sigprocmask</code>函数选择性的阻塞或解阻塞一组信号是可能的，这可以让我们实现，在一段临界区代码执行期间，防止捕获某些信号，以保护这段代码。</li></ol><p>哈哈哈哈，不懂没关系。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55491084", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 6, 
            "title": "TCP回射服务器正常启动关闭", 
            "content": "<h2>正常启动</h2><p>我们一起来学习使用netstat调试网络程序。</p><p>启动服务器程序：<code>./tcpserv01 &amp;</code> （<code>&amp;</code>表示后台启动）</p><p>服务器程序启动后，调用socket bind listen 和 accept，并阻塞于accept 调用。运行netstat程序来检查服务器监听套接字的状态，如下：<code>LISTEN</code>。有没有注意到<code>-a</code>选项可以查看所有监听套接字。我们的监听端口是9877，监听地址是通配地址0。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-84b94267c80d9bf215552f8489dc039e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"879\" data-original=\"https://pic3.zhimg.com/v2-84b94267c80d9bf215552f8489dc039e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;879&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"879\" data-original=\"https://pic3.zhimg.com/v2-84b94267c80d9bf215552f8489dc039e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-84b94267c80d9bf215552f8489dc039e_b.png\"/></figure><p>启动客户程序：<code>./tcpcli01</code> 我修改了代码中IP地址为环回地址（<code>127.0.0.1</code>）</p><p>客户端调用<code>socket</code> 和 <code>connect</code>，引起TCP三次握手，这是服务器的<code>accept</code> 开始忙活了，当三次握手完成，客户端的<code>connect</code> 和服务端的<code>accept</code> 均返回，连接建立。</p><ol><li>客户端：调用<code>str_cli</code>函数，该函数阻塞于<code>fgets</code> 调用。</li><li>服务端：调用fork，由子进程调用<code>str_echo</code>函数，该函数阻塞于<code>read</code> 调用。</li><li>服务端：父进程再次阻塞于<code>accept</code> 函数并阻塞，等待下一个客户连接。 </li></ol><p>提示：客户端<code>connect</code> 在接收到三次握手的第二个握手报文返回，服务端<code>accept</code> 在接收到三次握手的第三个握手报文返回。</p><p>可以看出我们的子进程和客户端建立了TCP连接，服务端端口是9877，客户端端口是42120。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-15ab4022783502e2ac25c1b45440d063_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"909\" data-original=\"https://pic4.zhimg.com/v2-15ab4022783502e2ac25c1b45440d063_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;909&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"909\" data-original=\"https://pic4.zhimg.com/v2-15ab4022783502e2ac25c1b45440d063_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-15ab4022783502e2ac25c1b45440d063_b.png\"/></figure><p>通过<code>ps</code> 来看看进程间的关系：<code>ps -t pts/0 -o pid,ppid,tty,stat,args,wchan</code> </p><p>提示：我在这里重启了客户端和服务端的程序，所以进程ID、端口可能会发生变化。</p><ul><li>pts/0：0号伪终端，服务端跑的终端</li><li>pts/1：1号伪终端，客户端跑的终端</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>注意：<code>STAT</code>列的<code>S</code>表示进程在为等待某些资源而睡眠，有<code>+</code>号表示光标在该进程，可以输入数据。 当进程阻塞于<code>accept</code>或<code>connect</code>时，输出<code>inet_csk_accept</code>。当进程阻塞于套接字输入或输出时，输出<code>sk_wait_data</code>。当进程阻塞于终端IO时，输出<code>wait_woken</code>。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6eba798f5283b31065142da2de40ab69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb\" width=\"876\" data-original=\"https://pic2.zhimg.com/v2-6eba798f5283b31065142da2de40ab69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;876&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"876\" data-original=\"https://pic2.zhimg.com/v2-6eba798f5283b31065142da2de40ab69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6eba798f5283b31065142da2de40ab69_b.jpg\"/></figure><h2>正常关闭</h2><p>提示：在分析正常关闭网络程序的时候，我们再次重启了程序，而这是不必要的，如果你时间充裕，能一次性把这些东西都研究懂，当下是正常启动后。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7e2ba9493bd61a572a7e4a591b3d9803_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic4.zhimg.com/v2-7e2ba9493bd61a572a7e4a591b3d9803_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;204&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic4.zhimg.com/v2-7e2ba9493bd61a572a7e4a591b3d9803_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7e2ba9493bd61a572a7e4a591b3d9803_b.jpg\"/></figure><p>现在们试图关闭客户端连接，我们输入<code>EOF</code>（Control+D）结束客户端连接，再看看连接状态，发现刚刚连接着的服务端没了，客户端状态变成<code>TIME_WAIT</code>，监听服务器不变，依然在等待。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0fc86a44236233fe37f5bdbbde689c98_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"945\" data-rawheight=\"122\" class=\"origin_image zh-lightbox-thumb\" width=\"945\" data-original=\"https://pic1.zhimg.com/v2-0fc86a44236233fe37f5bdbbde689c98_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;945&#39; height=&#39;122&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"945\" data-rawheight=\"122\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"945\" data-original=\"https://pic1.zhimg.com/v2-0fc86a44236233fe37f5bdbbde689c98_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0fc86a44236233fe37f5bdbbde689c98_b.png\"/></figure><ol><li>当输入<code>EOF</code>字符，<code>fgets</code> 返回一个空指针，于是<code>str_cli</code> 返回。</li><li><code>str_cli</code> 返回到客户端的<code>main</code> 函数时，调用<code>exit</code> 结束进程。</li><li>结束进程会做很多事，其中包括关闭所有打开的描述符。所以，客户打开的套接字描述符由内核关闭，这将触发客户TCP发一个FIN报文给服务端，服务端收到FIN报文将回送一个ACK报文。此时，服务器套接字处于<code>CLOSE_WAIT</code>状态，客户套接字处于<code>FIN_WAIT_2</code>状态。</li><li>当服务端TCP上层接收到FIN报文时，处于阻塞状态的<code>readline</code> 函数返回0，str_echo返回。</li><li><code>str_echo</code> 返回到服务端的<code>main</code> 函数时，调用<code>exit</code> 结束进程。</li><li>服务端子进程中打开的所有描述符随即关闭，关闭服务端套接字将会触发TCP四次挥手的最后2个阶段，服务端内核将发送一个FIN报文给客户端，客户端收到FIN报文，发送一个ACK报文。至此，连接完全终止，客户套接字进入<code>TIME_WAIT</code> 状态。（上图）</li><li>服务端还需要注意一点，进程结束还需要做一件事：服务端子进程结束时，给父进程发送一个<code>SIGCHLD</code> 信号，由于我们没有在代码里捕获这个信号，并且这个信号的默认行为是被忽略。所以，就是下图我们看到的，父进程没有处理，子进程变成僵尸进程。</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bcd49c83203eee1919131f0033689797_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"167\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic4.zhimg.com/v2-bcd49c83203eee1919131f0033689797_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;167&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"167\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic4.zhimg.com/v2-bcd49c83203eee1919131f0033689797_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bcd49c83203eee1919131f0033689797_b.jpg\"/></figure><p>我们在运行一个客户端，然后发送<code>EOF</code> 字符，再次观察，如下图所示，我们发现又多了一个僵尸进程。（<code>Z</code> 表示僵尸进程）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-031a29a14d19578de4849c5e79949e0e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic3.zhimg.com/v2-031a29a14d19578de4849c5e79949e0e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic3.zhimg.com/v2-031a29a14d19578de4849c5e79949e0e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-031a29a14d19578de4849c5e79949e0e_b.jpg\"/></figure><p>接下来，咱们一起学习一下如何徒手打僵尸，很简单擒贼先擒王，手动kill 掉僵尸的爸爸。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6445afe0ae9946bf9326ee1da48bf546_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"704\" data-original=\"https://pic3.zhimg.com/v2-6445afe0ae9946bf9326ee1da48bf546_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;704&#39; height=&#39;304&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"704\" data-original=\"https://pic3.zhimg.com/v2-6445afe0ae9946bf9326ee1da48bf546_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6445afe0ae9946bf9326ee1da48bf546_b.jpg\"/></figure><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "TCP", 
                    "tagLink": "https://api.zhihu.com/topics/19614026"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55039925", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 8, 
            "title": "如何写一个自己的聊天机器人？", 
            "content": "<p><b>回射服务器简介：（其实可以做成一个自动回复机器人，如下图所示，比较傻）</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-557a10f4a428d4369b4587403afcfb7c_b.jpg\" data-rawwidth=\"1182\" data-rawheight=\"468\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://pic1.zhimg.com/v2-557a10f4a428d4369b4587403afcfb7c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1182&#39; height=&#39;468&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1182\" data-rawheight=\"468\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1182\" data-original=\"https://pic1.zhimg.com/v2-557a10f4a428d4369b4587403afcfb7c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-557a10f4a428d4369b4587403afcfb7c_b.jpg\"/></figure><ol><li>客户从标准输入读入一行文本，并写给服务端</li><li>服务端从网络读入这行文本，并回射给客户端</li><li>客户端从网络读入这行文本，并显示在标准输出</li></ol><p><b>TCP回射服务端程序：main函数</b></p><p>创建TCP套接字，填充了一个通配地址和一个知名端口。</p><ul><li>通配地址：<code>INADDR_ANY</code>，实际上是全32位全0。 </li><li>自定义知名端口（lib/unp.h）：<code>#define SERV_PORT 9877 /* TCP and UDP */</code> </li></ul><p>服务端阻塞在accpet调用，等待客户来连接。</p><p>fork为每个客户端派生一个处理他们的子程序，子进程调用<code>str_echo</code>函数处理业务。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span>  <span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n  <span class=\"n\">pid_t</span> <span class=\"n\">childpid</span><span class=\"p\">;</span>\n  <span class=\"n\">socklen_t</span> <span class=\"n\">clilen</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n  <span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n  <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n  <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n  <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n\n  <span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n  <span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">clilen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cliaddr</span><span class=\"p\">);</span>\n    <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">childpid</span> <span class=\"o\">=</span> <span class=\"n\">Fork</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"cm\">/* child process */</span>\n      <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">);</span>\t<span class=\"cm\">/* close listening socket */</span>\n      <span class=\"n\">str_echo</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>\t<span class=\"cm\">/* process the request */</span>\n      <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>\t<span class=\"cm\">/* parent closes connected socket */</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p><b>TCP回射服务端程序：str_echo函数</b></p><ul><li>read函数从套接字读入数据，并写到缓冲区buf</li><li>writen函数把缓冲区buf中的内容，写进套接字</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_echo</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ssize_t</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n<span class=\"nl\">again</span><span class=\"p\">:</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n    <span class=\"k\">goto</span> <span class=\"n\">again</span><span class=\"p\">;</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;str_echo: read error&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><p><b>TCP回射客户端程序：main函数</b></p><p>创建一个TCP套接字，用服务器的IP地址和端口号填充网际套接字地址结构。</p><p>端口是自定义的全局端口，在上面的服务器代码已经说了（<code>#define SERV_PORT  9877</code>）</p><p><code>connect</code>建立与服务器的连接，<code>str_cli</code>函数做客户端的处理工作。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;usage: tcpcli &lt;IPaddress&gt;&#34;</span><span class=\"p\">);</span>\n\n  <span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n  <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n  <span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">SERV_PORT</span><span class=\"p\">);</span>\n  <span class=\"n\">Inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n\n  <span class=\"n\">Connect</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n  <span class=\"n\">str_cli</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">sockfd</span><span class=\"p\">);</span>\t\t<span class=\"cm\">/* do it all */</span>\n  <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>TCP回射客户端程序：str_cli函数</b></p><ul><li>fgets读入一行文本，writen把这行文本发送给服务器。</li><li>readline从服务器读入回射行，fputs把它写到标准输出。</li><li>读到<code>EOF</code>会返回一个NULL结束客户端。</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">str_cli</span><span class=\"p\">(</span><span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> <span class=\"c1\">// #define MAXLINE 4096\n</span><span class=\"c1\"></span>  <span class=\"kt\">char</span> <span class=\"n\">sendline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">],</span> <span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">Fgets</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">sendline</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">sendline</span><span class=\"p\">));</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Readline</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;str_cli: server terminated prematurely&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 读\n</span><span class=\"c1\"></span><span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">Fgets</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">rptr</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">rptr</span> <span class=\"o\">=</span> <span class=\"n\">fgets</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ferror</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">))</span>\n    <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;fgets error&#34;</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">rptr</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 写\n</span><span class=\"c1\"></span><span class=\"kt\">void</span>\n<span class=\"nf\">Fputs</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">FILE</span> <span class=\"o\">*</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fputs</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">EOF</span><span class=\"p\">)</span>\n    <span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;fputs error&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>看看函数原型：我发现我越来越喜欢看英文定义了。（terminating：终止）</p><p><code>char *fgets(char *s, int size, FILE *stream);</code></p><blockquote>fgets() reads in at most one less than <code>size</code> characters from <code>stream</code> and stores them into the buffer pointed to by <code>s</code>.  Reading stops after an EOF or a newline.  If a newline is read, it is stored into the buffer.  A terminating null byte (&#39;\\0&#39;) is stored after the last character in the buffer. </blockquote><p><code>int fputs(const char *s, FILE *stream);</code> </p><blockquote>fputs() writes the string <code>s</code> to <code>stream</code>, without its terminating null byte (&#39;\\0&#39;). </blockquote><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54721489", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 5, 
            "title": "基础套接字函数入门2", 
            "content": "<p>想知道一个程序a.out是怎么从shell终端运行的吗？想知道并发服务的框架吗？想知道服务器怎么知道客户端的IP地址和端口吗？</p><h2>1 fork函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// /usr/include/unistd.h\n</span><span class=\"c1\"></span><span class=\"k\">extern</span> <span class=\"n\">__pid_t</span> <span class=\"nf\">fork</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"n\">__THROWNL</span><span class=\"p\">;</span></code></pre></div><p>调用一次fork有2次返回：</p><ul><li>在调用进程（父进程）中返回子进程的ID号，</li><li>在子进程中返回0。</li></ul><p>父进程中调用fork，之前打开的所有描述符在fork返回后由子进程共享。fork有两种经典用法：</p><ol><li>一个进程创建一个自己的副本，每个副本独立工作。</li><li>一个进程想要执行另一个程序。先调用fork，然后子进程调用exec，把自己替换成新的程序。</li></ol><p><b>面试题：存放在硬盘上的可执行程序文件能够被UNIX执行的唯一办法是什么？</b></p><p>调用exec函数（共有6种）中的某一个，exec把当前进程映像替换成新的程序文件，而且该新程序通常从main函数开始执行。进程ID并不改变，我们称调用exec的进程为<b>调用进程</b>，称新执行的程序为<b>新程序</b>。注意哈，这里没有创建新进程哦，只有fork才会。</p><h2>2 exec函数</h2><p>6个exec函数之间的区别：</p><ul><li>带执行的程序文件是文件名还是路径名。</li><li>新程序的参数是一个一个列出还是一个指针数组。</li><li>把调用进程的环境传递给新程序还是给新程序指定新的环境变量。</li></ul><p>一般来说，只有execve是内核中的系统调用，其他5个都是调用execve的库函数。</p><p>注意：这里使用的指针数组，最后一个元素一定要是<code>NULL</code>，因为没有指定数组元素个数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// /usr/include/unistd.h\n</span><span class=\"c1\"></span><span class=\"cm\">/*路径名，指针数组，显示指定一个环境变量列表*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">execve</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__path</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"k\">const</span> <span class=\"n\">__argv</span><span class=\"p\">[],</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"k\">const</span> <span class=\"n\">__envp</span><span class=\"p\">[])</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__nonnull</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"cm\">/*路径名，指针数组，使用外部变量environ作为新程序的环境变量*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">execv</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__path</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"k\">const</span> <span class=\"n\">__argv</span><span class=\"p\">[])</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__nonnull</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"cm\">/*路径名，参数，显示指定一个环境变量列表*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">execle</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__path</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__arg</span><span class=\"p\">,</span> <span class=\"p\">...,</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"k\">const</span> <span class=\"n\">__envp</span><span class=\"p\">)</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__nonnull</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"cm\">/*路径名，参数，使用外部变量environ作为新程序的环境变量*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">execl</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__path</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__arg</span><span class=\"p\">,</span> <span class=\"p\">...)</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__nonnull</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"cm\">/*文件名，指针数组，使用外部变量environ作为新程序的环境变量*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">execvp</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__file</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"k\">const</span> <span class=\"n\">__argv</span><span class=\"p\">[])</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__nonnull</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"cm\">/*文件名，参数，使用外部变量environ作为新程序的环境变量*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">execlp</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__file</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__arg</span><span class=\"p\">,</span> <span class=\"p\">...)</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__nonnull</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span></code></pre></div><h2>3 并发服务器简介</h2><p>当一个连接建立时，accept返回，服务器接着调用fork，然后由子进程服务客户，父进程继续监听等待新的连接。需要注意的是fork之后，文件描述符的引用计数会自动加1，所以父进程需要close掉已经建立连接的connfd，子进程需要close掉监听描述符listenfd。<br/>典型的并发服务器代码框架：</p><div class=\"highlight\"><pre><code class=\"language-text\">pid_t pid;\nint listenfd,connfd;\nlistenfd = Sokcet(...);\nBind(listenfd,...);\nListen(listenfd,LISTENQ);\nfor(;;)\n{\n  connfd = Accept(listenfd,...);\n  if( (pid = Fork()) == 0)\n  {\n    /*子进程*/\n    Close(listenfd);\n    doit(connfd);\n    CLose(connfd);\n    exit(0);\n  }\n  /*父进程*/\n  Close(connfd);\n}</code></pre></div><h2>4 getsockname函数</h2><p>返回与某个套接字关联的本地协议地址，<code>__len</code>是值-结果参数，<code>__addr</code>需要被内核装填。 </p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">getsockname</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">,</span> <span class=\"n\">__SOCKADDR_ARG</span> <span class=\"n\">__addr</span><span class=\"p\">,</span><span class=\"n\">socklen_t</span> <span class=\"o\">*</span><span class=\"n\">__restrict</span> <span class=\"n\">__len</span><span class=\"p\">)</span> \n<span class=\"n\">__THROW</span><span class=\"p\">;</span></code></pre></div><p>使用场景：</p><ul><li>没有调用bind的TCP客户端：connect返回成功后，getsockname可以获取该连接的本地IP地址和本地端口号。（客户端）</li><li>通配IP地址调用bind的TCP服务器：accept返回成功后，getsockname可以获取该链接的本地IP地址和本地端口号。（服务端）</li></ul><h2>5 getpeername函数</h2><p>返回与某个套接字关联的外地协议地址，<code>__len</code>是值-结果参数，<code>__addr</code>需要被内核装填。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">getpeername</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">,</span> <span class=\"n\">__SOCKADDR_ARG</span> <span class=\"n\">__addr</span><span class=\"p\">,</span><span class=\"n\">socklen_t</span> <span class=\"o\">*</span><span class=\"n\">__restrict</span> <span class=\"n\">__len</span><span class=\"p\">)</span> \n<span class=\"n\">__THROW</span><span class=\"p\">;</span></code></pre></div><p>使用场景：</p><ul><li>当一个服务器是由调用过accept的某个进程，通过调用exec执行程序时，它能够获取客户身份的<b>唯一</b>途径就是调用getpeername。</li></ul><p>注意：getpeername需要connfd，这个fd获得有两种方法：</p><ol><li>调用exec的进程可以把这个描述符格式化成一个字符串，再把它当做作为一个命令行参数传递给新程序。</li><li>约定在调用exec之前，总是把某个特定描述符置为所接受的已连接套接字的描述符。后面的inetfd采用该方法，总是把描述符0、1、2置为所接受的连接套接字的描述符。</li></ol><p>例子：</p><p>运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b6a79d16fd4b4e0a25f74bc4bf000b12_b.jpg\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic3.zhimg.com/v2-b6a79d16fd4b4e0a25f74bc4bf000b12_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;546&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"546\" data-original=\"https://pic3.zhimg.com/v2-b6a79d16fd4b4e0a25f74bc4bf000b12_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b6a79d16fd4b4e0a25f74bc4bf000b12_b.jpg\"/><figcaption>值-结构参数：没有初始化</figcaption></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 服务端代码\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;time.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span>\t\t\t\t\t<span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"n\">cliaddr</span><span class=\"p\">;</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"n\">servaddr</span><span class=\"p\">;</span>\n        <span class=\"n\">socklen_t</span> <span class=\"n\">clilen</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span>\t\t\t\t<span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\t<span class=\"n\">time_t</span>\t\t\t\t<span class=\"n\">ticks</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n\t<span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">);</span>\t<span class=\"cm\">/* daytime server */</span>\n\n\t<span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n\t<span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n    \n\t<span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n\t  <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n          <span class=\"n\">getpeername</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">,(</span><span class=\"n\">SA</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">clilen</span><span class=\"p\">);</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;client ip:%s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">sock_ntop</span><span class=\"p\">((</span><span class=\"n\">SA</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">cliaddr</span><span class=\"p\">,</span><span class=\"n\">clilen</span><span class=\"p\">));</span>\n          <span class=\"n\">ticks</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n          <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">),</span> <span class=\"s\">&#34;%.24s</span><span class=\"se\">\\r\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ctime</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ticks</span><span class=\"p\">));</span>\n          <span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">));</span>\n\t  <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><ul><li>咦？第一行什么鬼？我们说值-结果参数，这个值一定赋值对，要不然会出错。</li></ul><p>声明变量的时候，给个初始化大小即可。<code>socklen_t clilen = sizeof(cliaddr);</code> </p><ul><li>那为什么其他的都正确呢？</li></ul><p>因为这个clilen变量的作用域内，已经在第一次getpeername后被内核赋予正确的值了呀，下一次的getpeername的值-结果参数就没问题了，这样才能保证<code>sockaddr_in</code>地址结构被正确填写。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-57a6bee58595a56e3f1acb345ac69b7c_b.jpg\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb\" width=\"547\" data-original=\"https://pic1.zhimg.com/v2-57a6bee58595a56e3f1acb345ac69b7c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;547&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"547\" data-original=\"https://pic1.zhimg.com/v2-57a6bee58595a56e3f1acb345ac69b7c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-57a6bee58595a56e3f1acb345ac69b7c_b.jpg\"/><figcaption>值-结果参数，给对这个值很重要</figcaption></figure><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54706273", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 14, 
            "title": "基础套接字函数入门1", 
            "content": "<p>想不想自己写一个简单的QQ？想不想自己写一个聊天室？想不想知道2000年的人是如何上网的？本节讲解一些基础的网络函数，带你看看，编写一个完整的TCP客户端、服务端需要掌握哪些函数？之后，我们要开发自己的QQ。</p><h2>1 socket函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"cm\">/* 使用协议__protocol在域__domain中创建一个__type类型的新套接字。 \n</span><span class=\"cm\">   如果__protocol为零，则自动选择一个。 \n</span><span class=\"cm\">   返回新套接字的文件描述符，或者返回-1表示错误。\n</span><span class=\"cm\">*/</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">socket</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__domain</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">__type</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">__protocol</span><span class=\"p\">)</span> <span class=\"n\">__THROW</span><span class=\"p\">;</span></code></pre></div><ul><li><code>__domain</code>：即family，<code>AF_INET</code>IPv4协议，<code>AF_INET6</code>IPv6协议 </li><li><code>__type</code>：<code>SOCK_STREAM</code>字节流套接字，<code>SOCK_DGRAM</code>数据报套接字，<code>SOCK_RAW</code>原始套接字 </li><li><code>__protocol</code>：<code>IPPROTO_TCP</code>TCP传输协议，<code>IPPROTO_UDP</code>UDP传输协议 </li></ul><p>socket函数在成功时返回一个小的非负整数值，它与文件描述符类似，我们把它称为套接字描述符（socket descriptor），简称socketfd。</p><p><code>AF_</code>前缀表示地址族，<code>PF_</code>前缀表示协议族 ，因为历史上曾想让一个协议族（PF）支持多个地址族（AF），用PF来创建套接字，用AF来创建套接字地址结构，然而就只是想想，没有实现。现在AF和PF的值是相等的。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// bits/socket.h\n</span><span class=\"c1\"></span><span class=\"cm\">/* Protocol families.  */</span>\n<span class=\"cp\">#define PF_INET     2   </span><span class=\"cm\">/* IP protocol family.  */</span><span class=\"cp\">\n</span><span class=\"cp\">#define PF_INET6    10  </span><span class=\"cm\">/* IP version 6.  */</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"cm\">/* Address families.  */</span>\n<span class=\"cp\">#define AF_INET     PF_INET\n</span><span class=\"cp\">#define AF_INET6    PF_INET6 </span></code></pre></div><h2>2 connect函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"cp\">#define __CONST_SOCKADDR_ARG   const struct sockaddr *\n</span><span class=\"cp\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">connect</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">,</span> <span class=\"n\">__CONST_SOCKADDR_ARG</span> <span class=\"n\">__addr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">__len</span><span class=\"p\">);</span></code></pre></div><ul><li><code>__fd</code>：socket函数返回的套接字描述符</li><li><code>__addr</code>：指向套接字结构地址的指针</li><li><code>__len</code>：该套接字的大小</li></ul><p>TCP客户用connect函数和TCP服务器建立连接。客户在调用connect函数前可以不调用bind函数，因为如果有需要，内核会确定本机IP地址，并选择一个临时端口作为源端口。</p><h2>3 bind函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"cm\">/* 把一个本地协议地址赋值给一个套接字 */</span>\n<span class=\"cp\">#define __CONST_SOCKADDR_ARG   const struct sockaddr *\n</span><span class=\"cp\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">bind</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">,</span> <span class=\"n\">__CONST_SOCKADDR_ARG</span> <span class=\"n\">__addr</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">__len</span><span class=\"p\">)</span> <span class=\"n\">__THROW</span><span class=\"p\">;</span></code></pre></div><ul><li>对于IPv4来说，协议地址是32位的IPv4地址和16位的端口号组合。</li><li>对于IPv6来说，协议地址是128位的IPv6地址和16位的端口号组合。</li></ul><p>绑定操作涉及3个对象：套接字，地址和端口。其中套接字是捆绑的主体，地址和端口是捆绑的客体。在套接字上绑定地址和端口表示：该地址和端口已经被套接字使用。</p><ul><li>如果指定端口号为0，那么内核在bind被调用的时候选择一个临时端口。</li><li>如果指定IP地址是通配地址，那么内核将等到套接字已连接（TCP）或在套接字上发出数据报（UDP）时才选择一个本地IP地址。</li></ul><p>对于IPv4来说，通配地址是0（<code>INADDR_ANY</code>），如果让内核帮套接字选择一个端口，那么必须注意，bind函数并不返回所选择的端口号。因为bind函数的_addr参数有const限定词，它无法返回所选的值。为了拿到内核选择的临时端口，必须调用<code><b>getsockname</b></code>函数来返回协议地址。</p><h2>4 listen函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">listen</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">__n</span><span class=\"p\">)</span> <span class=\"n\">__THROW</span><span class=\"p\">;</span></code></pre></div><p>listen函数仅有TCP服务器调用，它做两件事：</p><ol><li>当socket函数创建一个套接字时，默认是主动套接字，listen函数将它变成被动套接字，指示内核应接受指向该套接字的连接请求。调用listen将导致套接字从<code>CLOSED</code>状态转换到<code>LISTEN</code>状态。</li><li>第二个参数<code>__n</code>规定了内核应该为相应套接字排队的最大连接个数。内核为任意一个<b>监听套接字</b>维护两个队列，一个叫<code>未完成连接队列</code>，一个叫<code>已完成队列</code>。 </li></ol><ul><li>未完成连接队列：每个处于三次握手中的TCP连接，套接字处于<code>SYN_RCVD</code>状态。</li><li>已完成连接队列：每个已完成三次握手的TCP连接，套接字处于<code>ESTABLISHED</code>状态。</li></ul><p>这2个队列之和不能超过<code>__n</code>，否则就无法新建TCP连接，这就是SYN Flood攻击的原理。 </p><h2>5 accept函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// sys/socket.h\n</span><span class=\"c1\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">accept</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">,</span> <span class=\"n\">__SOCKADDR_ARG</span> <span class=\"n\">__addr</span><span class=\"p\">,</span><span class=\"n\">socklen_t</span> <span class=\"o\">*</span><span class=\"n\">__restrict</span> <span class=\"n\">__addr_len</span><span class=\"p\">);</span></code></pre></div><p>accept函数由TCP服务器调用，用于从<code>已完成连接队列</code>的队头返回下一个已完成连接。如果该队列为空，那么进程被投入睡眠。（默认套接字为阻塞方式）</p><p>参数<code>__addr</code>和<code>__addr_len</code>返回已连接的对端进程的协议地址，即返回客户端的协议地址。<code>__addr_len</code>是值-结果参数，返回内核存放在协议地址中实际的字节数。如果对客户端的协议地址不感兴趣，可以将指针置为NULL。</p><blockquote>注意：<br/><b>如果accept成功，返回值是又内核自动生成的全新描述符，称为<code>已连接套接字</code>。服务端与客户通信，将用这个套接字，服务完成后，这个套接字就被关闭。</b> <br/><b>而参数<code>__fd</code>称为<code>监听套接字</code>， 一个服务仅仅创建一个<code>监听套接字</code>。</b></blockquote><h2>6 close函数</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// /usr/include/unistd.h\n</span><span class=\"c1\"></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">close</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">__fd</span><span class=\"p\">);</span></code></pre></div><p>close函数一般可以用来关闭套接字，并终止TCP连接。但是在并发服务器中，close函数仅仅将套接字描述符引用计数减1。所以并不能一定在TCP连接上发送FIN报文，如果想在TCP连接上发送FIN报文，可以用<code><b>shutdown</b></code>函数。</p><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": [
                {
                    "userName": "假装是个明白人", 
                    "userLink": "https://www.zhihu.com/people/4513559460d6c04b48c6bdab949e97b1", 
                    "content": "该评论已删除", 
                    "likes": 2, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "点个赞就够好了，赞赏我就有压力了[飙泪笑]就像收了钱，却交不出货<a href=\"https://pic4.zhimg.com/v2-6c8d98c5cf08b736cf63612a3794b47b_qhd.jpg\" class=\"comment_img\" data-width=\"440\" data-height=\"440\">查看图片</a>", 
                            "likes": 1, 
                            "replyToAuthor": "假装是个明白人"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54691255", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "readn、writen和readline函数分析", 
            "content": "<p>字节流套接字上的read和write函数所表现的行为不同于通常的文件IO。字节流套接字上调用read和write输入或输出的字节数可能比请求的数量少，因为内核中用于套接字的缓冲区是有限制的，需要调用者多次调用read或write函数。</p><blockquote>提示：readn、writen和readline是对read和wirte的封装。</blockquote><h2>readn(int fd,void *vptr, size_t n)</h2><p><b>从描述符fd中读取n个字节，存入vptr指针的位置。思路如下：</b></p><ol><li>当剩余长度大于0的时候就一直读啊读</li><li>当read的返回值小于0的时候，做异常检测</li><li>当read的返回值等于0的时候，退出循环</li><li>当read的返回值大于0的时候，拿剩余长度减read的返回值，拿到新的剩余长度，读的入口指针加上read的返回值，进入步骤1</li><li>返回参数n减去剩余长度，即实际读取的总长度</li></ol><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* include readn */</span>\n<span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">ssize_t</span>\t\t\t\t\t\t<span class=\"cm\">/* Read &#34;n&#34; bytes from a descriptor. */</span>\n<span class=\"n\">readn</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">vptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">size_t</span>\t<span class=\"n\">nleft</span><span class=\"p\">;</span>\n\t<span class=\"n\">ssize_t</span>\t<span class=\"n\">nread</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span>\t<span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">vptr</span><span class=\"p\">;</span>\n\t<span class=\"n\">nleft</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">nleft</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">nread</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">nleft</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">nread</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t\t<span class=\"cm\">/* and call read() again */</span>\n\t\t\t<span class=\"k\">else</span>\n\t\t\t\t<span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nread</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\t\t\t\t<span class=\"cm\">/* EOF */</span>\n\n\t\t<span class=\"n\">nleft</span> <span class=\"o\">-=</span> <span class=\"n\">nread</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">ptr</span>   <span class=\"o\">+=</span> <span class=\"n\">nread</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">nleft</span><span class=\"p\">);</span>\t\t<span class=\"cm\">/* return &gt;= 0 */</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* end readn */</span>\n\n<span class=\"n\">ssize_t</span>\n<span class=\"n\">Readn</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">nbytes</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ssize_t</span>\t\t<span class=\"n\">n</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">readn</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;readn error&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><h2>writen(int fd,const void* vptr, size_t n)</h2><p><b>像描述符fd中写入n个字节，从vptr位置开始写。思路如下：</b></p><ol><li>当要写入的剩余长度大于0的时候就一直写啊写</li><li>当write的返回值小于0的时候，做异常检测</li><li>当write的返回值等于0的时候，出错退出程序</li><li>当write的返回值大于0的时候，拿剩余长度减去write的返回值，拿到新的剩余长度，写的入口指针加上write的返回值，进入步骤1</li><li>返回参数n的值，即期望写入的总长度</li></ol><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* include writen */</span>\n<span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">ssize_t</span>\t\t\t\t\t\t<span class=\"cm\">/* Write &#34;n&#34; bytes to a descriptor. */</span>\n<span class=\"n\">writen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">vptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">size_t</span>\t\t<span class=\"n\">nleft</span><span class=\"p\">;</span>\n\t<span class=\"n\">ssize_t</span>\t\t<span class=\"n\">nwritten</span><span class=\"p\">;</span>\n\t<span class=\"k\">const</span> <span class=\"kt\">char</span>\t<span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">vptr</span><span class=\"p\">;</span>\n\t<span class=\"n\">nleft</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">nleft</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">nwritten</span> <span class=\"o\">=</span> <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">nleft</span><span class=\"p\">))</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nwritten</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">nwritten</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t\t<span class=\"cm\">/* and call write() again */</span>\n\t\t\t<span class=\"k\">else</span>\n\t\t\t\t<span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\t\t\t<span class=\"cm\">/* error */</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"n\">nleft</span> <span class=\"o\">-=</span> <span class=\"n\">nwritten</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">ptr</span>   <span class=\"o\">+=</span> <span class=\"n\">nwritten</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* end writen */</span>\n\n<span class=\"kt\">void</span>\n<span class=\"n\">Writen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">nbytes</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">writen</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">nbytes</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;writen error&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><h2>readline(int fd,void *vptr, size_t maxlen)</h2><p><b>从描述符fd中读一行文本，长度不超过maxlen，一次读1个字节。思路如下：</b></p><ol><li>当读取的次数小于maxlen的时候就一直读啊读</li><li>当read的返回值等于1的时候，将读到的值赋值给<code>ptr++</code>，判断是不是<code>\\n</code> </li><li>当read的返回值等于0的时候，读完了</li><li>当read的返回值小于0的时候，做异常检测</li><li>进入步骤1</li><li>返回实际读取的长度</li></ol><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* include readline */</span>\n<span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"cm\">/* PAINFULLY SLOW VERSION -- example only */</span>\n<span class=\"cm\">/*        痛苦 慢速版 -- 仅供示例         */</span>\n<span class=\"n\">ssize_t</span>\n<span class=\"nf\">readline</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">vptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">maxlen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ssize_t</span>\t<span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span>\t<span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">vptr</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxlen</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nl\">again</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\t<span class=\"cm\">/* newline is stored, like fgets() */</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\t<span class=\"cm\">/* EOF, n - 1 bytes were read */</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">goto</span> <span class=\"n\">again</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\t\t<span class=\"cm\">/* error, errno set by read() */</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t<span class=\"cm\">/* null terminate like fgets() */</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* end readline */</span>\n\n<span class=\"n\">ssize_t</span>\n<span class=\"nf\">Readline</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">maxlen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ssize_t</span>\t\t<span class=\"n\">n</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">readline</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;readline error&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><h2>readline(int fd,void *vptr, size_t maxlen)</h2><p><b>my_read(int fd,char *ptr) 替换 read(fd,&amp;c,1)，实现一个较快速版本。思路如下：</b></p><ol><li>当读取的次数小于maxlen的时候就一直读啊读</li><li>进入<code>my_read</code>函数，这个函数每次最多读MAXLINE个字符，然后每次返回一个字符</li><li>将读到的值赋值给<code>ptr++</code>，判断是不是<code>\\n</code> </li><li>当read的返回值等于0的时候，读完了</li><li>当read的返回值小于0的时候，做异常检测</li><li>进入步骤1</li><li>返回实际读取的长度</li></ol><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* include readline */</span>\n<span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span>\t<span class=\"n\">read_cnt</span><span class=\"p\">;</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span>\t<span class=\"o\">*</span><span class=\"n\">read_ptr</span><span class=\"p\">;</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span>\t<span class=\"n\">read_buf</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\n<span class=\"k\">static</span> <span class=\"n\">ssize_t</span>\n<span class=\"nf\">my_read</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">read_cnt</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nl\">again</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">read_cnt</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">read_buf</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">read_buf</span><span class=\"p\">)))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">EINTR</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">goto</span> <span class=\"n\">again</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">read_cnt</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">read_ptr</span> <span class=\"o\">=</span> <span class=\"n\">read_buf</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"n\">read_cnt</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t<span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">read_ptr</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ssize_t</span>\n<span class=\"nf\">readline</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">vptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">maxlen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ssize_t</span>\t<span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span>\t<span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">vptr</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxlen</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">my_read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\t<span class=\"cm\">/* newline is stored, like fgets() */</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\t<span class=\"cm\">/* EOF, n - 1 bytes were read */</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">else</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\t\t<span class=\"cm\">/* error, errno set by read() */</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t<span class=\"cm\">/* null terminate like fgets() */</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ssize_t</span>\n<span class=\"nf\">readlinebuf</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">**</span><span class=\"n\">vptrptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">read_cnt</span><span class=\"p\">)</span>\n\t\t<span class=\"o\">*</span><span class=\"n\">vptrptr</span> <span class=\"o\">=</span> <span class=\"n\">read_ptr</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">read_cnt</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* end readline */</span>\n\n<span class=\"n\">ssize_t</span>\n<span class=\"nf\">Readline</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">maxlen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ssize_t</span>\t\t<span class=\"n\">n</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">readline</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;readline error&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": [
                {
                    "userName": "ALX", 
                    "userLink": "https://www.zhihu.com/people/7b4217a7d0b6d9592c53ae121f7d5bf5", 
                    "content": "readn函数怎么是传值呢？", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "read有很多种[捂脸]", 
                            "likes": 0, 
                            "replyToAuthor": "ALX"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54683930", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "sock_包裹函数简介", 
            "content": "<blockquote>提示：对结果进行静态存储导致该函数不可重入且非线程安全。</blockquote><ol><li><code>sock_bind_wild</code>：将通配地址和一个临时端口捆绑到一个套接字。</li><li><code>sock_cmp_addr</code>：比较两个套接字地址结构的地址部分。</li><li><code>sock_cmp_port</code>：比较两个套接字地址结构的端口部分。</li><li><code>sock_get_port</code>：只返回端口号。</li><li><code>sock_ntop_host</code>：把一个套接字地址结构中的主机部分转换成表达式。</li><li><code>sock_set_addr</code>：设置一个套接字地址结构中的地址部分置为指针所指的值。</li><li><code>sock_set_port</code>：设置一个套接字地址结构中的端口号部分。</li><li><code>sock_set_wild</code>： 把一个套接字地址结构的地址部分置为通配地址。</li></ol><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">sock_bind_wild</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">family</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">socklen_t</span>\t<span class=\"n\">len</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"n\">sin</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">));</span>\n\t\t<span class=\"n\">sin</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">sin</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">sin</span><span class=\"p\">.</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\t<span class=\"cm\">/* bind ephemeral port */</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">getsockname</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">.</span><span class=\"n\">sin_port</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span>\t<span class=\"n\">sin6</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sin6</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sin6</span><span class=\"p\">));</span>\n\t\t<span class=\"n\">sin6</span><span class=\"p\">.</span><span class=\"n\">sin6_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET6</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">sin6</span><span class=\"p\">.</span><span class=\"n\">sin6_addr</span> <span class=\"o\">=</span> <span class=\"n\">in6addr_any</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">sin6</span><span class=\"p\">.</span><span class=\"n\">sin6_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\t<span class=\"cm\">/* bind ephemeral port */</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">sin6</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sin6</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">sin6</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">getsockname</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">sin6</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">sin6</span><span class=\"p\">.</span><span class=\"n\">sin6_port</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">Sock_bind_wild</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">family</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span>\t\t<span class=\"n\">port</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">sock_bind_wild</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">family</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;sock_bind_wild error&#34;</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tHAVE_SOCKADDR_DL_STRUCT\n</span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;net/if_dl.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">sock_cmp_addr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa2</span><span class=\"p\">,</span>\n\t\t\t <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sa1</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span> <span class=\"o\">!=</span> <span class=\"n\">sa2</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa1</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">memcmp</span><span class=\"p\">(</span> <span class=\"o\">&amp;</span><span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa1</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">,</span>\n\t\t\t\t\t   <span class=\"o\">&amp;</span><span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa2</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">,</span>\n\t\t\t\t\t   <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">)));</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">memcmp</span><span class=\"p\">(</span> <span class=\"o\">&amp;</span><span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa1</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_addr</span><span class=\"p\">,</span>\n\t\t\t\t\t   <span class=\"o\">&amp;</span><span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa2</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_addr</span><span class=\"p\">,</span>\n\t\t\t\t\t   <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in6_addr</span><span class=\"p\">)));</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tAF_UNIX\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_UNIX</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">strcmp</span><span class=\"p\">(</span> <span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_un</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa1</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"p\">,</span>\n\t\t\t\t\t   <span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_un</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa2</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"p\">));</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tHAVE_SOCKADDR_DL_STRUCT\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_LINK</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\t\t<span class=\"cm\">/* no idea what to compare here ? */</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tHAVE_SOCKADDR_DL_STRUCT\n</span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;net/if_dl.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">sock_cmp_port</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa2</span><span class=\"p\">,</span>\n\t\t\t <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sa1</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span> <span class=\"o\">!=</span> <span class=\"n\">sa2</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa1</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span> <span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa1</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_port</span> <span class=\"o\">==</span>\n\t\t\t\t<span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa2</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_port</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span> <span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa1</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_port</span> <span class=\"o\">==</span>\n\t\t\t\t<span class=\"p\">((</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa2</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_port</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n\t<span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">sock_get_port</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"o\">*</span><span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_port</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span>\t<span class=\"o\">*</span><span class=\"n\">sin6</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">sin6</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_port</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"p\">}</span>\n\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\t\t<span class=\"cm\">/* ??? */</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tHAVE_SOCKADDR_DL_STRUCT\n</span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;net/if_dl.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">sock_ntop_host</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">];</span>\t\t<span class=\"cm\">/* Unix domain is largest */</span>\n\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"o\">*</span><span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inet_ntop</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">sin</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span>\t<span class=\"o\">*</span><span class=\"n\">sin6</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inet_ntop</span><span class=\"p\">(</span><span class=\"n\">AF_INET6</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">sin6</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_addr</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tAF_UNIX\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_UNIX</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_un</span>\t<span class=\"o\">*</span><span class=\"n\">unp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_un</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t\t<span class=\"cm\">/* OK to have no pathname bound to the socket: happens on\n</span><span class=\"cm\">\t\t\t   every connect() unless client calls bind() first. */</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">unp</span><span class=\"o\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"s\">&#34;(no pathname bound)&#34;</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">else</span>\n\t\t\t<span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">),</span> <span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">unp</span><span class=\"o\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifdef\tHAVE_SOCKADDR_DL_STRUCT\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_LINK</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_dl</span>\t<span class=\"o\">*</span><span class=\"n\">sdl</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_dl</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sdl</span><span class=\"o\">-&gt;</span><span class=\"n\">sdl_nlen</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">),</span> <span class=\"s\">&#34;%*s&#34;</span><span class=\"p\">,</span>\n\t\t\t\t\t <span class=\"n\">sdl</span><span class=\"o\">-&gt;</span><span class=\"n\">sdl_nlen</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">sdl</span><span class=\"o\">-&gt;</span><span class=\"n\">sdl_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">else</span>\n\t\t\t<span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">),</span> <span class=\"s\">&#34;AF_LINK, index=%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">sdl</span><span class=\"o\">-&gt;</span><span class=\"n\">sdl_index</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\n\t\t<span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">),</span> <span class=\"s\">&#34;sock_ntop_host: unknown AF_xxx: %d, len %d&#34;</span><span class=\"p\">,</span>\n\t\t\t\t <span class=\"n\">sa</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">,</span> <span class=\"n\">salen</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">Sock_ntop_host</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">char</span>\t<span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"n\">sock_ntop_host</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">salen</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;sock_ntop_host error&#34;</span><span class=\"p\">);</span>\t<span class=\"cm\">/* inet_ntop() sets errno */</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">sock_set_addr</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"o\">*</span><span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sin</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">,</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">));</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span>\t<span class=\"o\">*</span><span class=\"n\">sin6</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sin6</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_addr</span><span class=\"p\">,</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in6_addr</span><span class=\"p\">));</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"p\">}</span>\n\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">sock_set_port</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"o\">*</span><span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">sin</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span>\t<span class=\"o\">*</span><span class=\"n\">sin6</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in6</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">sa</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">sin6</span><span class=\"o\">-&gt;</span><span class=\"n\">sin6_port</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\t<span class=\"p\">}</span>\n\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">sock_set_wild</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">socklen_t</span> <span class=\"n\">salen</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">const</span> <span class=\"kt\">void</span>\t<span class=\"o\">*</span><span class=\"n\">wildptr</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">-&gt;</span><span class=\"n\">sa_family</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">static</span> <span class=\"k\">struct</span> <span class=\"n\">in_addr</span>\t<span class=\"n\">in4addr_any</span><span class=\"p\">;</span>\n\n\t\t<span class=\"n\">in4addr_any</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">wildptr</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">in4addr_any</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"cp\">#ifdef\tIPV6\n</span><span class=\"cp\"></span>\t<span class=\"k\">case</span> <span class=\"nl\">AF_INET6</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">wildptr</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">in6addr_any</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n\t<span class=\"k\">default</span><span class=\"o\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">sock_set_addr</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"p\">,</span> <span class=\"n\">salen</span><span class=\"p\">,</span> <span class=\"n\">wildptr</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：《UNIX网络编程 卷1：套接字联网API》</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54658794", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 50, 
            "title": "面试题：存储IPv4地址最小需要多大内存？", 
            "content": "<p>IPv4地址范围：<code>0.0.0.0</code> ~ <code>255.255.255.255</code> ，存储这样的IPv4地址，其实只需要4个字节，也就是一个<code>int32</code>大小，怎么做到的呢？</p><p>本节要讲的2类函数：地址转换函数。</p><ol><li><code>inet_aton</code>：将C字符串的点分十进制IP地址转换为网络字节序。（仅支持IPv4，淘汰）</li><li><code>inet_ntoa</code>：将网络字节序转换为C字符串的点分十进制IP地址。（仅支持IPv4，淘汰）</li><li><code>inet_pton</code>：将C字符串的点分十进制IP地址转换为网络字节序。</li><li><code>inet_ntop</code>：将网络字节序转换为C字符串的点分十进制IP地址。</li></ol><blockquote>提示：<br/><code>a</code>可以理解为ASCII码字符串。<br/><code>n</code>可以理解为network网络字节序，也可以理解为number数字，其实是numeric数值。<br/><code>p</code>可以理解为 presentation表达式。</blockquote><p><b>1 <code>inet_aton</code>：将C字符串的点分十进制IP地址转换为网络字节序。</b></p><p><b>4 <code>inet_pton</code>：是对<code>inet_aton</code>的封装，支持IPv4和IPv6。</b> </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8352c1d40b3760f4e5f06057ccd58113_b.jpg\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"164\" class=\"origin_image zh-lightbox-thumb\" width=\"632\" data-original=\"https://pic4.zhimg.com/v2-8352c1d40b3760f4e5f06057ccd58113_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;632&#39; height=&#39;164&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"164\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"632\" data-original=\"https://pic4.zhimg.com/v2-8352c1d40b3760f4e5f06057ccd58113_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8352c1d40b3760f4e5f06057ccd58113_b.jpg\"/><figcaption>127.0.0.1 --&amp;amp;gt; 16777343</figcaption></figure><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// ailx.c\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;netinet/in.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"n\">ap</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span> <span class=\"o\">=</span> <span class=\"s\">&#34;127.0.0.1&#34;</span><span class=\"p\">;</span>\n  <span class=\"n\">inet_aton</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">ap</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s--&gt;%d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">cp</span><span class=\"p\">,</span><span class=\"n\">ap</span><span class=\"p\">.</span><span class=\"n\">s_addr</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// inet_aton.c\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;netinet/in.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"c1\">// cp : &#34;127.0.0.1&#34;   ap : 出参 保存计算结果\n</span><span class=\"c1\"></span><span class=\"n\">inet_aton</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"o\">*</span><span class=\"n\">ap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dots</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"n\">u_long</span> <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">char</span> <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;2&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;3&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;4&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;5&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;6&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;7&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;8&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"o\">:</span>\n\t    <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">cc</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">);</span>\n\t    <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;.&#39;</span><span class=\"o\">:</span>\n\t    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">dots</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t    <span class=\"p\">}</span>\n\t    <span class=\"cm\">/* Fall through */</span>\n\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"o\">:</span>\n\t    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">acc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t    <span class=\"p\">}</span>\n\t    <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">addr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span> <span class=\"o\">|</span> <span class=\"n\">acc</span><span class=\"p\">;</span>\n\t    <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t    <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">default</span><span class=\"o\">:</span>\n\t    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n    <span class=\"cm\">/* Normalize the address */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dots</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">addr</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">8</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"n\">dots</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/* Store it if requested */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">ap</span><span class=\"o\">-&gt;</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    \n<span class=\"p\">}</span></code></pre></div><p><b>2 <code>inet_ntoa</code>：将网络字节序转换为C字符串的点分十进制IP地址。（淘汰）</b></p><p><b>3 <code>inet_ntop_ipv4</code>：将网络字节序转换为C字符串的点分十进制IP地址。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-41b939f4cfdb4c6dcfd8c7782467ea28_b.jpg\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic1.zhimg.com/v2-41b939f4cfdb4c6dcfd8c7782467ea28_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;658&#39; height=&#39;170&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"658\" data-original=\"https://pic1.zhimg.com/v2-41b939f4cfdb4c6dcfd8c7782467ea28_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-41b939f4cfdb4c6dcfd8c7782467ea28_b.jpg\"/><figcaption>16777343--&amp;amp;gt;127.0.0.1</figcaption></figure><p>我们的10进制数字<code>16777343</code>的16进制形式是：<code>0100007F</code>，16进制数字<code>7F</code>的10进制形式是：<code>127</code>。</p><p><img src=\"https://www.zhihu.com/equation?tex=16777343_%7B10%7D+\" alt=\"16777343_{10} \" eeimg=\"1\"/> = <img src=\"https://www.zhihu.com/equation?tex=0100007F_%7B16%7D\" alt=\"0100007F_{16}\" eeimg=\"1\"/> </p><p>因为小端设备，低字节在低位，所以数组起始是数字的个位，所以</p><ul><li>p[0] = 127</li><li>p[1] = 0</li><li>p[2] = 0</li><li>p[3] = 1</li></ul><p>以网络字节序的IP地址求ASCII码的IP字符串的实现非常巧妙，代码如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// inet_ntop_ipv4_ailx.c\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/types.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/socket.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;netinet/in.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;errno.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#ifndef\tINET_ADDRSTRLEN\n</span><span class=\"cp\">#define\tINET_ADDRSTRLEN 16\n</span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/* include inet_ntop */</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">inet_ntop</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">family</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">addrptr</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">strptr</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> <span class=\"cm\">/********           16777343 =    0x0100007F  ******************/</span>\n\t<span class=\"k\">const</span> <span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">addrptr</span><span class=\"p\">;</span><span class=\"c1\">// &amp; 01 00 00 127\n</span><span class=\"c1\"></span>  <span class=\"cm\">/********  小端设备:低字节在低位 数组起始是数字的个位   ********/</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">family</span> <span class=\"o\">==</span> <span class=\"n\">AF_INET</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">char</span>\t<span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">INET_ADDRSTRLEN</span><span class=\"p\">];</span>\n  <span class=\"cm\">/************  snprintf 将后面的按照格式存入参数1中    *********/</span>\n\t\t<span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">),</span> <span class=\"s\">&#34;%d.%d.%d.%d&#34;</span><span class=\"p\">,</span>\n\t\t\t\t <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">errno</span> <span class=\"o\">=</span> <span class=\"n\">ENOSPC</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n  <span class=\"cm\">/**********  strcpy 将参数2字符串复制到参数1字符串中    *********/</span>\n\t\t<span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">strptr</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">strptr</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">errno</span> <span class=\"o\">=</span> <span class=\"n\">EAFNOSUPPORT</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* end inet_ntop */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"n\">addr</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"o\">*</span><span class=\"n\">addrptr</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">INET_ADDRSTRLEN</span><span class=\"p\">];</span>\n  <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"mi\">16777343</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">inet_ntop</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"p\">,</span><span class=\"n\">addrptr</span><span class=\"p\">,</span><span class=\"n\">str</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">));</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%d--&gt;%s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span><span class=\"p\">,</span><span class=\"n\">str</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": [
                {
                    "userName": "hakase", 
                    "userLink": "https://www.zhihu.com/people/5b133234ac61e9b2d65383bd61b9bf40", 
                    "content": "0xffffffff  [调皮]", 
                    "likes": 3, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "<a href=\"https://pic2.zhimg.com/v2-036a99274338dabb88ecb6ea2d5753d5_qhd.jpg\" class=\"comment_img\" data-width=\"80\" data-height=\"78\">查看图片</a>", 
                            "likes": 1, 
                            "replyToAuthor": "hakase"
                        }
                    ]
                }, 
                {
                    "userName": "雨枫", 
                    "userLink": "https://www.zhihu.com/people/8539e1eb249439cd983ab7f24b0845eb", 
                    "content": "<p>我觉得 无符号整型更合适一点 </p>", 
                    "likes": 3, 
                    "childComments": [
                        {
                            "userName": "ailx10", 
                            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
                            "content": "in_addr_t貌似IPv4确实是unsigned int[飙泪笑]<a href=\"https://pic4.zhimg.com/v2-f4f2d5d553e5f9d74fd96f9cb9e66767_qhd.jpg\" class=\"comment_img\" data-width=\"512\" data-height=\"512\">查看图片</a>", 
                            "likes": 1, 
                            "replyToAuthor": "雨枫"
                        }, 
                        {
                            "userName": "雨枫", 
                            "userLink": "https://www.zhihu.com/people/8539e1eb249439cd983ab7f24b0845eb", 
                            "content": "<p>毕竟ip地址不可能有负数出现 无符号就可以更精确合理 也不会引入一些莫名其妙的bug</p><a class=\"comment_sticker\" href=\"https://pic3.zhimg.com/v2-6eeb544aa5ce6be1e6a6add75e436746.gif\" data-width=\"\" data-height=\"\">[哈哈]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "ailx10"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54481787", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "Berkeley字节操纵函数", 
            "content": "<h2>字节操纵函数</h2><p>操纵多字节字段的函数有2组：</p><p>Berkeley函数和ANSI C函数。</p><p>它们既不对数据作解释，也不假设数据是以<code>\\0</code>结束的C字符串。</p><p>为什么需要这样的函数呢？因为我们需要操作诸如IP地址这样的字段，这些字段可能包含值为<code>\\0</code>的字节，但是并不是C字符串。</p><ul><li>第一类：以<code>b</code>（字节）开头的Berkeley函数</li><li>第二类：以<code>mem</code>（内存）开头的ANSI C函数（本节不介绍，因为太复杂了）</li></ul><blockquote>科普：以<code>\\0</code>结尾的C字符串处理函数一般都在&lt;string.h&gt;头文件中定义，名字以str开头。</blockquote><p><b>带大家感受一下26年前（1993年）的代码！</b></p><p>很明显大家都能看到<code>b</code>、 <code>mem</code>、 <code>str</code>函数的特点：</p><p>提示：下面这些函数都是Berkeley函数，现在2019年了，都用GLIBC库函数，函数实现及其复杂，有机会拜读一下，里面会出现大量汇编代码，为了提高速度。</p><p>本节核心是带大家认识一个概念，什么叫字节操纵函数！以<code>b</code>和mem开头，有长度参数的。</p><ul><li><code>b</code>、<code>mem</code> 都有长度参数，</li><li><code>str</code>没有长度参数，因为是处理字符串，默认有<code>\\0</code>限定。</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)bzero.c\t8.1 (Berkeley) 6/11/93\n</span><span class=\"cm\"> * This is designed to be small, not fast.\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">bzero</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">unsigned</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"o\">*</span><span class=\"n\">t</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">n</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)bcopy.c\t8.1 (Berkeley) 6/11/93\n</span><span class=\"cm\"> * This is designed to be small, not fast.\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">void</span>\n<span class=\"nf\">bcopy</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"p\">;</span>\n\t<span class=\"kt\">unsigned</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"o\">*</span><span class=\"n\">t</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">f</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">n</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)memcmp.c\t8.1 (Berkeley) 6/4/93\n</span><span class=\"cm\"> * Compare memory regions.\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">memcmp</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">do</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">++</span> <span class=\"o\">!=</span> <span class=\"o\">*</span><span class=\"n\">p2</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*--</span><span class=\"n\">p1</span> <span class=\"o\">-</span> <span class=\"o\">*--</span><span class=\"n\">p2</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)memchr.c\t8.1 (Berkeley) 6/4/93\n</span><span class=\"cm\">*/</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span>\n<span class=\"nf\">memchr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">do</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)strstr.c\t8.1 (Berkeley) 6/4/93\n</span><span class=\"cm\"> * Find the first occurrence of find in s.\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">strstr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">find</span><span class=\"p\">)</span>\n\t<span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">find</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">sc</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"n\">size_t</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">find</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">find</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">do</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">do</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sc</span> <span class=\"o\">!=</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">strncmp</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">find</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">s</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* (#)strlen.c\t8.1 (Berkeley) 6/4/93 \n</span><span class=\"cm\">*/</span>\n<span class=\"n\">size_t</span>\n<span class=\"nf\">strlen</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>\n\t<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">s</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)strncmp.c\t8.1 (Berkeley) 6/4/93\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">strncmp</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"k\">do</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s1</span> <span class=\"o\">!=</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">s1</span> <span class=\"o\">-</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">--</span><span class=\"n\">s2</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"o\">++</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* @(#)memchr.c\t8.1 (Berkeley) 6/4/93\n</span><span class=\"cm\">*/</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span>\n<span class=\"nf\">memchr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\t<span class=\"k\">register</span> <span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">do</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n\t\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：<a href=\"https://link.zhihu.com/?target=https%3A//svnweb.freebsd.org/base/head/lib/libc/string/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">svnweb.freebsd.org/base</span><span class=\"invisible\">/head/lib/libc/string/</span><span class=\"ellipsis\"></span></a> .</p>", 
            "topic": [
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54474800", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "面试题：如何判断主机序？", 
            "content": "<h2>字节序排序函数</h2><p>一个16位整数由2个字节组成，内存中存储这两个字节有2种方法。</p><ul><li>低字节存低位（小端）例子：数字0x0102：1存储在高位，2存储在低位</li><li>低字节存高位（大端）例子：数字0x0102：1存储在低位，2存储在高位</li></ul><p>我们把给定系统所用的字节序称为：主机字节序（host byte order）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bbeeb63c9c7e0fd8152685388c203e3f_b.jpg\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"577\" data-original=\"https://pic4.zhimg.com/v2-bbeeb63c9c7e0fd8152685388c203e3f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;577&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"577\" data-original=\"https://pic4.zhimg.com/v2-bbeeb63c9c7e0fd8152685388c203e3f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bbeeb63c9c7e0fd8152685388c203e3f_b.jpg\"/><figcaption>小端设备</figcaption></figure><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// byteorder.c\n</span><span class=\"c1\"></span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">union</span> <span class=\"p\">{</span>\n\t  <span class=\"kt\">short</span>  <span class=\"n\">s</span><span class=\"p\">;</span>\n          <span class=\"kt\">char</span>   <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">short</span><span class=\"p\">)];</span>\n    <span class=\"p\">}</span> <span class=\"n\">un</span><span class=\"p\">;</span>\n\n    <span class=\"n\">un</span><span class=\"p\">.</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mh\">0x0102</span><span class=\"p\">;</span><span class=\"c1\">// 2Byte\n</span><span class=\"c1\"></span>    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s: &#34;</span><span class=\"p\">,</span> <span class=\"n\">CPU_VENDOR_OS</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">short</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">un</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">un</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\t       <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;big-endian</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">un</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">un</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        \t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;little-endian</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t<span class=\"k\">else</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;unknown</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span> \n        <span class=\"k\">else</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;sizeof(short) = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">short</span><span class=\"p\">));</span>\n\n\t<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>解析：</p><p>1 操作系统默认字符串：</p><p><code>#define CPU_VENDOR_OS &#34;x86_64-unknown-linux-gnu&#34;</code> </p><p>2 小端：数组0（低字节）放最低位。</p><p>3 主机字节序有大端有小端</p><p>4 网络字节序全部都是大端</p><hr/><p>这2种字节序之间的转换函数：</p><ul><li>h代表host</li><li>n代码network</li><li>s代表short，16位的值</li><li>l代表long，32位的值</li></ul><p>定义在&lt;netinet/in.h&gt;文件中：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">extern</span> <span class=\"n\">uint32_t</span> <span class=\"nf\">ntohl</span> <span class=\"p\">(</span><span class=\"n\">uint32_t</span> <span class=\"n\">__netlong</span><span class=\"p\">)</span>\n     <span class=\"n\">__THROW</span> <span class=\"n\">__attribute__</span> <span class=\"p\">((</span><span class=\"n\">__const__</span><span class=\"p\">));</span>\n\n<span class=\"k\">extern</span> <span class=\"n\">uint16_t</span> <span class=\"nf\">ntohs</span> <span class=\"p\">(</span><span class=\"n\">uint16_t</span> <span class=\"n\">__netshort</span><span class=\"p\">)</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__attribute__</span> <span class=\"p\">((</span><span class=\"n\">__const__</span><span class=\"p\">));</span>\n\n<span class=\"k\">extern</span> <span class=\"n\">uint32_t</span> <span class=\"nf\">htonl</span> <span class=\"p\">(</span><span class=\"n\">uint32_t</span> <span class=\"n\">__hostlong</span><span class=\"p\">)</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__attribute__</span> <span class=\"p\">((</span><span class=\"n\">__const__</span><span class=\"p\">));</span>\n\n<span class=\"k\">extern</span> <span class=\"n\">uint16_t</span> <span class=\"nf\">htons</span> <span class=\"p\">(</span><span class=\"n\">uint16_t</span> <span class=\"n\">__hostshort</span><span class=\"p\">)</span>\n      <span class=\"n\">__THROW</span> <span class=\"n\">__attribute__</span> <span class=\"p\">((</span><span class=\"n\">__const__</span><span class=\"p\">));</span>\n\n <span class=\"cp\">#ifdef __OPTIMIZE__\n</span><span class=\"cp\"></span> <span class=\"cm\">/* We can optimize calls to the conversion functions.  Either nothing has\n</span><span class=\"cm\">    to be done or we are using directly the byte-swapping functions which\n</span><span class=\"cm\">    often can be inlined.  */</span>\n <span class=\"cp\"># if __BYTE_ORDER == __BIG_ENDIAN\n</span><span class=\"cp\"></span> <span class=\"cm\">/* The host byte order is the same as network byte order,\n</span><span class=\"cm\">    so these functions are all just identity.  */</span> <span class=\"c1\">// 大端\n</span><span class=\"c1\"></span> <span class=\"cp\"># define ntohl(x)   (x)\n</span><span class=\"cp\"></span> <span class=\"cp\"># define ntohs(x)   (x)\n</span><span class=\"cp\"></span> <span class=\"cp\"># define htonl(x)   (x)\n</span><span class=\"cp\"></span> <span class=\"cp\"># define htons(x)   (x)\n</span><span class=\"cp\"></span> <span class=\"cp\"># else\n</span><span class=\"cp\"></span> <span class=\"cp\">#  if __BYTE_ORDER == __LITTLE_ENDIAN   </span><span class=\"c1\">// 小端\n</span><span class=\"c1\"></span> <span class=\"cp\">#   define ntohl(x) __bswap_32 (x)\n</span><span class=\"cp\"></span> <span class=\"cp\">#   define ntohs(x) __bswap_16 (x)\n</span><span class=\"cp\"></span> <span class=\"cp\">#   define htonl(x) __bswap_32 (x)\n</span><span class=\"cp\"></span> <span class=\"cp\">#   define htons(x) __bswap_16 (x)\n</span><span class=\"cp\"></span> <span class=\"cp\">#  endif\n</span><span class=\"cp\"></span> <span class=\"cp\"># endif\n</span><span class=\"cp\"></span> <span class=\"cp\">#endif</span></code></pre></div><p>我们在&lt;bits/byteswap-16.h&gt;和&lt;bits/byteswap.h&gt; 文件中看一个<code>ntohs(x)</code>实现：</p><div class=\"highlight\"><pre><code class=\"language-c\">  <span class=\"n\">define</span> <span class=\"nf\">ntohs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">__bswap_16</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  \n\n  <span class=\"k\">static</span> <span class=\"kr\">__inline</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">short</span> <span class=\"kt\">int</span>\n  <span class=\"n\">__bswap_16</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">short</span> <span class=\"kt\">int</span> <span class=\"n\">__bsx</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">__bswap_constant_16</span> <span class=\"p\">(</span><span class=\"n\">__bsx</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n \n  <span class=\"cp\">#define __bswap_constant_16(x) \\\n</span><span class=\"cp\"></span>      <span class=\"p\">((</span><span class=\"kt\">unsigned</span> <span class=\"kt\">short</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">((((</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(((</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)))</span></code></pre></div><p><code>ntohs(x)</code>将网络序转化成小端设备的主机序。</p><p>以<code>0x0102</code>位例子：</p><p><code>((x) &gt;&gt; 8) &amp; 0xff)</code> --&gt; <code>0x01</code> 先右移，低位变高位，高位变0</p><p><code>((x) &amp; 0xff) &lt;&lt; 8)</code> --&gt; <code>0x0200</code> 先拿到低位，然后升为高位</p><p><code>0x01 | 0x0200</code> --&gt; <code>0x0201</code> 位或运算，相当于加法操作</p><p>这样就将一个16位数字翻转字节序 ~</p><hr/><p>IPv4首部的前32位：</p><div class=\"highlight\"><pre><code class=\"language-text\">0                   1\n0 1 2 3 4 5 6 7 8 9 0 1\n+ - - - - - - - - - -\n|version|  IHL  |  \n+ - - - - - - - - - -         </code></pre></div><p>科普：</p><p>互联网中表示8位的量，最早不是字节byte，而是八位组（octet）。</p><p>网络上最左边的是最早出现的，是最高有效位，编号为0，也就是<b>高字节在低位</b>（大端）。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "大端序/网络字节序（big-endian）", 
                    "tagLink": "https://api.zhihu.com/topics/20168828"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54066226", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 2, 
            "title": "套接字编程简介", 
            "content": "<h2>套接字地址结构</h2><p><b>1 IPv4套接字地址结构</b></p><p>在<code>/usr/include/netinet/in.h</code>文件中</p><div class=\"highlight\"><pre><code class=\"language-c\"> <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"cm\">/* 16字节 */</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">__SOCKADDR_COMMON</span> <span class=\"p\">(</span><span class=\"n\">sin_</span><span class=\"p\">);</span><span class=\"cm\">/* 协议簇 */</span>\n    <span class=\"n\">in_port_t</span> <span class=\"n\">sin_port</span><span class=\"p\">;</span>                 <span class=\"cm\">/* 端口号 */</span>\n    <span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"n\">sin_addr</span><span class=\"p\">;</span>            <span class=\"cm\">/* 网络地址  */</span>\n    <span class=\"cm\">/* 填充`struct sockaddr&#39;.  */</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">sin_zero</span><span class=\"p\">[</span><span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr</span><span class=\"p\">)</span> <span class=\"o\">-</span>\n                           <span class=\"n\">__SOCKADDR_COMMON_SIZE</span> <span class=\"o\">-</span>\n                           <span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"n\">in_port_t</span><span class=\"p\">)</span> <span class=\"o\">-</span>\n                           <span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">)];</span>\n  <span class=\"p\">};</span></code></pre></div><p>我们来看看这个宏：</p><p><code>#define __SOCKADDR_COMMON(sa_prefix)  sa_family_t sa_prefix##family</code> </p><p>等价于<code>sa_family_t sin_family</code> 这里不支持长度，</p><p>所以<code>sa_family_t</code> 是一个16位无符号整数。</p><p>找了一下，发现定义在：<code>&lt;bits/sockaddr.h&gt;</code> 文件中！</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#define __SOCKADDR_COMMON(sa_prefix) \\\n</span><span class=\"cp\"></span>  <span class=\"n\">sa_family_t</span> <span class=\"n\">sa_prefix</span><span class=\"cp\">##family\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#define __SOCKADDR_COMMON_SIZE  (sizeof (unsigned short int)) // 2Byte = 16 bit</span></code></pre></div><p>POSIX规范要求IPv4套接字地址结构必须包含：</p><ul><li>sin_family</li><li>sin_addr</li><li>sin_port</li></ul><p>IPv4地址，TCP端口号、UDP端口号在套接字地址结构中必须用<code>网络字节序</code>（大端）存储。</p><hr/><p><b> 2 通用套接字地址结构</b></p><p>说是在&lt;sys/socket.h&gt;中，但是进去发现其实包含在另一个头文件中，&lt;bits/socket.h&gt;，定义如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"n\">sockaddr</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">__SOCKADDR_COMMON</span> <span class=\"p\">(</span><span class=\"n\">sa_</span><span class=\"p\">);</span>    <span class=\"cm\">/* Common data: address family and length.  */</span>\n    <span class=\"kt\">char</span> <span class=\"n\">sa_data</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>           <span class=\"cm\">/* Address data.  */</span>\n  <span class=\"p\">};</span></code></pre></div><p>当作为一个参数传递进任何套接字函数时，套接字地址结构以指向该结构的指针来传递。</p><p>然而，以这样的指针作为参数之一的任何套接字函数必须处理来自所支持的任何协议簇的套接字地址结构。</p><p>在如何申明所传递的数据类型上存在一个问题。</p><p>有了ANSI C后解决办法很简单：void*是通用的指针类型。</p><p>然而，套接字函数在ANSI C之前定义的。</p><p>在1982年采取的办法是定义一个通用的套接字地址结构。</p><p>通用套接字地址结构的唯一用途：对指向特定协议的套接字地址结构的指针执行类型转换。</p><hr/><p><b>3 值-结果参数</b></p><p>当往一个套接字函数传递一个套接字地址结构时，传递的是指向该结构的指针。</p><p>该结构的长度也作为一个参数传递，不过期传递方式取决于该结构的传递方向：</p><ul><li>进程--内核</li><li>内核--进程</li></ul><p>1）从进程到内核传递套接字地址结构的函数有3个：</p><ul><li>bind</li><li>connect</li><li>sendto</li></ul><p>这些函数的一个参数是指向某个套接字地址结构的指针，另一个参数是该结构的整数大小。</p><p>指针和指针所指内容的大小都传递给了内核，那么内核就知道到底需要从进程复制多少数据。</p><p>2）从内核到进程传递套接字地址结构的函数有4个：</p><ul><li>accept</li><li>recvfrom</li><li>getsockname</li><li>getpeername</li></ul><p>这些函数有2个参数是指针，一个是指向某个套接字地址结构的指针，另一个是指向该结构大小的整数变量的指针。</p><p>当函数被调用时，【<code>值</code>】告诉内核该结构的大小，这样内核在写该结构的时候不至于越界；当函数返回时，结构大小又是【<code>结果</code>】，它告诉进程，内核在该结构中存储了多少数据。 </p><p></p>", 
            "topic": [
                {
                    "tag": "Socket", 
                    "tagLink": "https://api.zhihu.com/topics/19604051"
                }, 
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53970102", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 3, 
            "title": "一个简单的时间获取服务器程序分析", 
            "content": "<h2>代码概述：</h2><ul><li>创建TCP套接字</li><li>把服务器的众所周知端口绑定到套接字</li><li>把套接字转换成监听套接字</li><li>接受客户连接，发送应答</li><li>终止连接</li></ul><h2>代码详解：</h2><p><code>servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</code></p><p>指定IP为<code>INADDR_ANY</code>，如果服务器主机有多个网络接口，服务器进程可以在任意网络接口上接受客户连接。 </p><hr/><p><code>Listen(listenfd, LISTENQ);</code> 把套接字变成监听套接字。</p><p><code>#define LISTENQ 1024</code> 指定内核允许在这个监听描述符上排队的最大客户数。</p><hr/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n    <span class=\"n\">ticks</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n    <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">),</span> <span class=\"s\">&#34;%.24s</span><span class=\"se\">\\r\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ctime</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ticks</span><span class=\"p\">));</span>\n    <span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">));</span>\n    <span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>服务器进程在<code>accept</code>调用中被投入睡眠，等待客户端的来访。对于TCP来说，<code>accept</code>底层是三次握手建立连接，握手完毕后<code>accept</code>返回，返回值是新的socket描述符，我们叫它已连接描述符（connected descriptor）。</p><p><code>ticks =time(NULL);</code> 返回1970年1月1日0点到当前的秒数。</p><p><code>ctime(&amp;ticks);</code> 把整数值转换成人话，即年月日时分秒。</p><p>接下来我们来看看安全编程，防止缓冲区溢出的函数：<code>snprintf()</code> </p><p><code>snprintf(buff, sizeof(buff), &#34;%.24s\\r\\n&#34;, ctime(&amp;ticks));</code> </p><p>本质上是对<code>sprintf()</code>的安全封装，这里参数2限制了缓冲区的大小，对于没有做长度检验的不安全写函数，很多黑客疯狂伪造<code>ctime()</code>返回的字符串，制造缓冲区溢出灾难。</p><p>下面是<code>snprintf()</code>的实现： </p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;stdarg.h&gt;\t\t/* ANSI C header file */</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">snprintf</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"p\">...)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">va_list</span> <span class=\"n\">ap</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">va_start</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"p\">);</span>\n\t<span class=\"n\">vsprintf</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">ap</span><span class=\"p\">);</span>\t<span class=\"cm\">/* Sigh, some vsprintf&#39;s return ptr, not length */</span>\n\t<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">);</span>\n\t<span class=\"n\">va_end</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;snprintf: &#39;%s&#39; overflowed array&#34;</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>服务端调用close()，4次挥手关闭与客户端的连接。</p><hr/><h2>参考代码：</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span>\t<span class=\"cpf\">&lt;time.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span>\t\t\t\t\t<span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">connfd</span><span class=\"p\">;</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span>\t\t\t\t<span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span><span class=\"p\">];</span>\n\t<span class=\"n\">time_t</span>\t\t\t\t<span class=\"n\">ticks</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">listenfd</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n\t<span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span>      <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">INADDR_ANY</span><span class=\"p\">);</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>        <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">);</span>\t<span class=\"cm\">/* daytime server */</span>\n\n\t<span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\n\t<span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"n\">LISTENQ</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">connfd</span> <span class=\"o\">=</span> <span class=\"n\">Accept</span><span class=\"p\">(</span><span class=\"n\">listenfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"n\">ticks</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n        <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">),</span> <span class=\"s\">&#34;%.24s</span><span class=\"se\">\\r\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">ctime</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ticks</span><span class=\"p\">));</span>\n        <span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">,</span> <span class=\"n\">buff</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">buff</span><span class=\"p\">));</span>\n\n\t\t<span class=\"n\">Close</span><span class=\"p\">(</span><span class=\"n\">connfd</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：《UNIX网络编程卷1：套接字联网API》第三版</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53879915", 
            "userName": "ailx10", 
            "userLink": "https://www.zhihu.com/people/09db43fb8deee2076d66d4c78ac96208", 
            "upvote": 4, 
            "title": "一个简单的时间获取客户程序分析", 
            "content": "<h2>运行结果：</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dc6811dae6f790358c8c4f9e4fa1acf3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"629\" data-original=\"https://pic4.zhimg.com/v2-dc6811dae6f790358c8c4f9e4fa1acf3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;629&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"629\" data-original=\"https://pic4.zhimg.com/v2-dc6811dae6f790358c8c4f9e4fa1acf3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dc6811dae6f790358c8c4f9e4fa1acf3_b.jpg\"/></figure><h2>代码概述：</h2><ul><li>创建TCP套接字</li><li>指定服务器的IP地址和端口</li><li>建立与服务器的连接</li><li>读入并输出服务器的应答</li><li>终止程序</li></ul><hr/><h2>代码详解：</h2><p><code>#define bzero(ptr,n) memset(ptr, 0, n)</code> 本质还是memset，将一块地址清0</p><hr/><p>服务地址包含：协议，端口，IP地址。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>   <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">);</span>\t<span class=\"cm\">/* daytime server */</span>\n<span class=\"n\">inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">);</span></code></pre></div><p> 看看inet_pton的实现，这个函数将点分十进制的IP地址转换为一个整数：</p><p>写的非常巧妙，我已经在代码中添加了注释了。</p><p><img src=\"https://www.zhihu.com/equation?tex=1111+1111+%5CRightarrow2%5E%7B8%7D-1%3D255+\" alt=\"1111 1111 \\Rightarrow2^{8}-1=255 \" eeimg=\"1\"/> </p><p><code>addr = addr &lt;&lt; 8 | acc;</code> 这里<code>addr</code>就是一个32位<code>unsigned int</code>数。</p><p>成功返回1，失败返回&lt;=0。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">int</span> <span class=\"c1\">//cp=&#34;127.0.0.1&#34; ap:出参\n</span><span class=\"c1\"></span><span class=\"n\">inet_aton</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">in_addr</span> <span class=\"o\">*</span><span class=\"n\">ap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dots</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"n\">u_long</span> <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">do</span> <span class=\"p\">{</span> <span class=\"cm\">/* register 定义最快的关键字*/</span>\n\t<span class=\"k\">register</span> <span class=\"kt\">char</span> <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">;</span>\n\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;2&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;3&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;4&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;5&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;6&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;7&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;8&#39;</span><span class=\"o\">:</span>\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"o\">:</span>\n\t    <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">cc</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">);</span>\n\t    <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;.&#39;</span><span class=\"o\">:</span><span class=\"cm\">/* . 的个数大于3就返回0 */</span>\n\t    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">dots</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t    <span class=\"p\">}</span>\n\t    <span class=\"cm\">/* Fall through */</span>\n\n\t<span class=\"k\">case</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"o\">:</span><span class=\"cm\">/* 字符串结尾! 上面的 . 没有break 下面一定会走*/</span>\n\t    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">acc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* 每个.里的数字不能大于255 */</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t    <span class=\"p\">}</span>\n\t    <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">addr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span> <span class=\"o\">|</span> <span class=\"n\">acc</span><span class=\"p\">;</span><span class=\"cm\">/*127左移8位*/</span>\n\t    <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t    <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">default</span><span class=\"o\">:</span>\n\t    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n\n    <span class=\"cm\">/* Normalize the address */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dots</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// ?\n</span><span class=\"c1\"></span>\t<span class=\"n\">addr</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">8</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"n\">dots</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/* Store it if requested */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">ap</span><span class=\"o\">-&gt;</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">htonl</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">);</span><span class=\"cm\">/*addr主机序转网络序保存到出参*/</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    \n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"c1\">//strptr=&#34;127.0.0.1&#34; addrptr:出参\n</span><span class=\"c1\"></span><span class=\"n\">inet_pton</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">family</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">strptr</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">addrptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">family</span> <span class=\"o\">==</span> <span class=\"n\">AF_INET</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//IPv4 \n</span><span class=\"c1\"></span>    \t<span class=\"k\">struct</span> <span class=\"n\">in_addr</span>  <span class=\"n\">in_val</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inet_aton</span><span class=\"p\">(</span><span class=\"n\">strptr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">in_val</span><span class=\"p\">))</span> <span class=\"p\">{</span><span class=\"cm\">/*将点分十进制IP地址strptr转化为unsigned int型数字in_val*/</span>\n            <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">addrptr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">in_val</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">));</span><span class=\"cm\">/*将in_val复制到addrptr*/</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\t<span class=\"n\">errno</span> <span class=\"o\">=</span> <span class=\"n\">EAFNOSUPPORT</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><hr/><p>建立与服务器连接：connect</p><p><code>#define SA struct sockaddr</code> 通用套接字地址结构</p><p>每当一个socket函数需要一个指向某个套接字地址结构的指针时，这个指针必须强制转换成一个指向通用套接字地址结构的指针，因为早期void*指针类型还不可以用。</p><p><code>connect(sockfd, (SA *) &amp;servaddr, sizeof(servaddr)</code> </p><hr/><p>读入并输出服务器的应答：TCP是一个没有记录边界的字节流协议，通常read返回一个TCP分节，但是如果数据量太大，一次read不完，那就会多次返回。我们不确定一次read是否能读取完，所以read函数必须放在一个循环中，当read返回0（表明对端关闭连接）或者负值（表明发送错误）时终止循环。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t<span class=\"cm\">/* null terminate */</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">EOF</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;fputs error&#34;</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;read error&#34;</span><span class=\"p\">);</span></code></pre></div><p>终止程序：</p><p><code>exit(0)</code>，Unix在一个进程终止时，总是关闭该进程所有打开的描述符。 </p><hr/><h2>参考代码：</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span>\t<span class=\"cpf\">&#34;unp.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span>\t\t\t\t\t<span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span>\t\t\t\t<span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">MAXLINE</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\t<span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>\t<span class=\"n\">servaddr</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;usage: a.out &lt;IPaddress&gt;&#34;</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">sockfd</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;socket error&#34;</span><span class=\"p\">);</span>\n\n\t<span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">));</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n\t<span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span>   <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">);</span>\t<span class=\"cm\">/* daytime server */</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_quit</span><span class=\"p\">(</span><span class=\"s\">&#34;inet_pton error for %s&#34;</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">SA</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">servaddr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">servaddr</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;connect error&#34;</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">sockfd</span><span class=\"p\">,</span> <span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">MAXLINE</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">recvline</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t<span class=\"cm\">/* null terminate */</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fputs</span><span class=\"p\">(</span><span class=\"n\">recvline</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">EOF</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;fputs error&#34;</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">err_sys</span><span class=\"p\">(</span><span class=\"s\">&#34;read error&#34;</span><span class=\"p\">);</span>\n\n\t<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>参考文献：《UNIX网络编程卷1：套接字联网API》第三版</p>", 
            "topic": [
                {
                    "tag": "网络编程", 
                    "tagLink": "https://api.zhihu.com/topics/19611616"
                }, 
                {
                    "tag": "UNIX网络编程卷1（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20135111"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/unix1"
}
