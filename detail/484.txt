{
    "title": "数据分析师学习笔记", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/hanran-74", 
        "https://www.zhihu.com/people/xierqionedoge", 
        "https://www.zhihu.com/people/liu-ye-dao-47", 
        "https://www.zhihu.com/people/zhang-sheng-wei-24", 
        "https://www.zhihu.com/people/tian-lai-13-99", 
        "https://www.zhihu.com/people/chen-yiyi-77-22", 
        "https://www.zhihu.com/people/sun-ao-29", 
        "https://www.zhihu.com/people/cao-fei-97-41", 
        "https://www.zhihu.com/people/chen-huang-85", 
        "https://www.zhihu.com/people/dingawm", 
        "https://www.zhihu.com/people/zhen-shui-wu-xiang-53", 
        "https://www.zhihu.com/people/xia-tian-de-feng-61-39-84", 
        "https://www.zhihu.com/people/zheng-cheng-88-75", 
        "https://www.zhihu.com/people/cui-xiao-2", 
        "https://www.zhihu.com/people/frankccshen", 
        "https://www.zhihu.com/people/h-hanyone", 
        "https://www.zhihu.com/people/alex-29-1", 
        "https://www.zhihu.com/people/li-xin-wei-91-72", 
        "https://www.zhihu.com/people/yang-tai-shang-de-ma-ge-li-te", 
        "https://www.zhihu.com/people/chowkaiyat", 
        "https://www.zhihu.com/people/xiao-shu-57-13", 
        "https://www.zhihu.com/people/ba-ge-bu-shi-ge", 
        "https://www.zhihu.com/people/ming-wang-80", 
        "https://www.zhihu.com/people/jin-zi-13525", 
        "https://www.zhihu.com/people/aaron-25-87", 
        "https://www.zhihu.com/people/zheng-xiang-yu-12-43", 
        "https://www.zhihu.com/people/obiwannng", 
        "https://www.zhihu.com/people/tian-si-16-91", 
        "https://www.zhihu.com/people/top-21-87-39", 
        "https://www.zhihu.com/people/zhang-kang-92", 
        "https://www.zhihu.com/people/hokit-p", 
        "https://www.zhihu.com/people/katiesun", 
        "https://www.zhihu.com/people/abopaper", 
        "https://www.zhihu.com/people/dan-se-yang-guang-21", 
        "https://www.zhihu.com/people/heywee", 
        "https://www.zhihu.com/people/hades-31-93", 
        "https://www.zhihu.com/people/yao-jing-86-97", 
        "https://www.zhihu.com/people/tjaustin", 
        "https://www.zhihu.com/people/yang-chen-72-92-38", 
        "https://www.zhihu.com/people/wu-li-ying", 
        "https://www.zhihu.com/people/la-la-la-la-la-la-la-59-74", 
        "https://www.zhihu.com/people/iamshaw", 
        "https://www.zhihu.com/people/chen-21-80-69", 
        "https://www.zhihu.com/people/han-yao-bin-178", 
        "https://www.zhihu.com/people/wu-ming-ying", 
        "https://www.zhihu.com/people/sohala", 
        "https://www.zhihu.com/people/wang-xin-32-30-96", 
        "https://www.zhihu.com/people/wang-hua-min-1", 
        "https://www.zhihu.com/people/lu-xiao-man-20-69", 
        "https://www.zhihu.com/people/mo-gu-39-75", 
        "https://www.zhihu.com/people/chaolong-chen", 
        "https://www.zhihu.com/people/li-jiang-45-83", 
        "https://www.zhihu.com/people/fei-yi-69-34", 
        "https://www.zhihu.com/people/yun-nuo-1-27", 
        "https://www.zhihu.com/people/david-yan-88", 
        "https://www.zhihu.com/people/cheng-xiao-lin-43", 
        "https://www.zhihu.com/people/bai-yang-feng-yue-xiao-hong-chen", 
        "https://www.zhihu.com/people/11223-45-50", 
        "https://www.zhihu.com/people/xiaoxiao-zhao-50", 
        "https://www.zhihu.com/people/liu-yu-12-83", 
        "https://www.zhihu.com/people/fwang16", 
        "https://www.zhihu.com/people/zhang-yu-32-60-71", 
        "https://www.zhihu.com/people/gegeju168", 
        "https://www.zhihu.com/people/wu-xu-35-30", 
        "https://www.zhihu.com/people/liuren-leo", 
        "https://www.zhihu.com/people/yydxlv", 
        "https://www.zhihu.com/people/ta-ma-de-16", 
        "https://www.zhihu.com/people/jing-16-19", 
        "https://www.zhihu.com/people/zhang-hai-bo-20", 
        "https://www.zhihu.com/people/zhang-tao-44-8", 
        "https://www.zhihu.com/people/hypergroups", 
        "https://www.zhihu.com/people/xifengwugu", 
        "https://www.zhihu.com/people/naranja-little", 
        "https://www.zhihu.com/people/zhi-duo-duo-78", 
        "https://www.zhihu.com/people/shenyinian", 
        "https://www.zhihu.com/people/Gtesla-10-49-76", 
        "https://www.zhihu.com/people/he-he-38-44-75", 
        "https://www.zhihu.com/people/kailun-wang-24", 
        "https://www.zhihu.com/people/yiwen-san-bu-zhi-22", 
        "https://www.zhihu.com/people/zhao-zhuang-shui", 
        "https://www.zhihu.com/people/gao-xing-5-99", 
        "https://www.zhihu.com/people/li-zi-yu-64", 
        "https://www.zhihu.com/people/superfls", 
        "https://www.zhihu.com/people/innocence-9-47", 
        "https://www.zhihu.com/people/ramos-25-67", 
        "https://www.zhihu.com/people/qing-qing-duo", 
        "https://www.zhihu.com/people/jin-shuo-wei-3", 
        "https://www.zhihu.com/people/tan-loser", 
        "https://www.zhihu.com/people/dennis-yan", 
        "https://www.zhihu.com/people/wu-yuan-82-97", 
        "https://www.zhihu.com/people/ta-de-qiang-xiong-zhu", 
        "https://www.zhihu.com/people/guo-wen-hui-58-16", 
        "https://www.zhihu.com/people/bandian-79", 
        "https://www.zhihu.com/people/zuckgo", 
        "https://www.zhihu.com/people/ma-qia-er-69", 
        "https://www.zhihu.com/people/xiao-tang-29", 
        "https://www.zhihu.com/people/wang-yang-18-92", 
        "https://www.zhihu.com/people/xia-mo-88-4", 
        "https://www.zhihu.com/people/xiangyu-zhou-55", 
        "https://www.zhihu.com/people/yes-god", 
        "https://www.zhihu.com/people/xiaolanmao-93", 
        "https://www.zhihu.com/people/stanley-chang-46", 
        "https://www.zhihu.com/people/po-shi-hao", 
        "https://www.zhihu.com/people/alwaysnow", 
        "https://www.zhihu.com/people/Combray", 
        "https://www.zhihu.com/people/chen-jiao-70", 
        "https://www.zhihu.com/people/xu-qian-zheng", 
        "https://www.zhihu.com/people/lu-zi-long", 
        "https://www.zhihu.com/people/zheng-bo-yang-78", 
        "https://www.zhihu.com/people/wu-ze-92", 
        "https://www.zhihu.com/people/sam.lin", 
        "https://www.zhihu.com/people/you-da-xue-cheng", 
        "https://www.zhihu.com/people/lucillegyl", 
        "https://www.zhihu.com/people/su-su-80-29-16", 
        "https://www.zhihu.com/people/liang-zhi-90-46", 
        "https://www.zhihu.com/people/cindy-45-67", 
        "https://www.zhihu.com/people/huang-xin-12-50", 
        "https://www.zhihu.com/people/zhou-bai-ta", 
        "https://www.zhihu.com/people/du-ming-xin-yue", 
        "https://www.zhihu.com/people/chen-xi-47-3", 
        "https://www.zhihu.com/people/a-ceng-gloria", 
        "https://www.zhihu.com/people/shi-tou-de-gu-zhi-ni-bu-dong", 
        "https://www.zhihu.com/people/jiu-ye-20-63", 
        "https://www.zhihu.com/people/luo-wei-24-35", 
        "https://www.zhihu.com/people/mu-bao-60", 
        "https://www.zhihu.com/people/ma-xin-17-96", 
        "https://www.zhihu.com/people/submarine-39", 
        "https://www.zhihu.com/people/zhao-wen-di-69", 
        "https://www.zhihu.com/people/li-cheng-98-82", 
        "https://www.zhihu.com/people/zj-zz", 
        "https://www.zhihu.com/people/xiao-hou-84-13", 
        "https://www.zhihu.com/people/lzh-95-1", 
        "https://www.zhihu.com/people/ru-guo-mei-you-ni-83", 
        "https://www.zhihu.com/people/chen-peng-90-60", 
        "https://www.zhihu.com/people/gao-shan-72-16", 
        "https://www.zhihu.com/people/cao-jing-9-30", 
        "https://www.zhihu.com/people/zhuang-zhi-die-10", 
        "https://www.zhihu.com/people/zhang-li-tao-4-11", 
        "https://www.zhihu.com/people/nick-86-61", 
        "https://www.zhihu.com/people/meng-jian-zi-ran-xing", 
        "https://www.zhihu.com/people/huang-he-shui-29", 
        "https://www.zhihu.com/people/chu-zhong-51", 
        "https://www.zhihu.com/people/ma-ma-142857", 
        "https://www.zhihu.com/people/goth-85", 
        "https://www.zhihu.com/people/chu-ban-jing-jing", 
        "https://www.zhihu.com/people/renqx-32", 
        "https://www.zhihu.com/people/CCiceBear", 
        "https://www.zhihu.com/people/braveany", 
        "https://www.zhihu.com/people/bin789", 
        "https://www.zhihu.com/people/xiao-wu-gui-82-68", 
        "https://www.zhihu.com/people/su-jun-feng-21", 
        "https://www.zhihu.com/people/chilingkitty", 
        "https://www.zhihu.com/people/dingtianxiang", 
        "https://www.zhihu.com/people/shao-xiao-60-96", 
        "https://www.zhihu.com/people/lawrencehoon32", 
        "https://www.zhihu.com/people/la-la-la-15-65", 
        "https://www.zhihu.com/people/alex-20-60", 
        "https://www.zhihu.com/people/han-feng-98-63", 
        "https://www.zhihu.com/people/rhoplus", 
        "https://www.zhihu.com/people/shenxiaolao", 
        "https://www.zhihu.com/people/garfie-lx", 
        "https://www.zhihu.com/people/tu-zi-xian-sheng-50-89", 
        "https://www.zhihu.com/people/yang-zhi-ming-24", 
        "https://www.zhihu.com/people/wang-qian-qian-30-6", 
        "https://www.zhihu.com/people/wayne-lee-67"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/65043322", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 0, 
            "title": "Pandas 中如何遍历数据集（for 循环和 apply 函数对比）", 
            "content": "<p>以一个小数据集为例：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2d9ce9b9350cfca0aa6facb8fe39cbad_b.jpg\" data-size=\"normal\" data-rawwidth=\"206\" data-rawheight=\"317\" class=\"content_image\" width=\"206\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;206&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"206\" data-rawheight=\"317\" class=\"content_image lazy\" width=\"206\" data-actualsrc=\"https://pic2.zhimg.com/v2-2d9ce9b9350cfca0aa6facb8fe39cbad_b.jpg\"/><figcaption>数据集示例</figcaption></figure><p>我们想要实现的需求是：将 df 中价格小于 10 的水果价格翻倍。</p><h3>1. for 循环</h3><p>做到这个项目的同学都有一定的 Python 编程基础，想到遍历，可能最先想到的就是使用 for 循环：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span> <span class=\"c1\">#为了不混淆效果，每个方法创建一个副本</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func_for</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span><span class=\"mi\">10</span><span class=\"p\">:</span>\n            <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"n\">df</span>\n\n<span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">func_for</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">)</span><span class=\"c1\"># 这里的 df 是作为参数传入 for_func 函数的</span></code></pre></div><h3>2. 对 dataframe 数据集使用 apply</h3><p>axis=1 相当于对 df 中的每一行数据进行函数调用，apply_func 函数的参数是每一行数据</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func_df_apply</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"n\">item</span>\n\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"n\">func_df_apply</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span></code></pre></div><h3>3. 对数据集中的列 Series 对象使用 apply</h3><p>此时函数内的参数 cost 就是每一个价格</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">df3</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func_series_apply</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">cost</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cost</span><span class=\"o\">*</span><span class=\"mi\">2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cost</span>\n\n<span class=\"n\">df3</span><span class=\"p\">[</span><span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df3</span><span class=\"p\">[</span><span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"n\">func_series_apply</span><span class=\"p\">)</span></code></pre></div><h3>4. 结合匿名函数 lambda 使用 apply</h3><p>当需要实现的函数功能非常简单时，可以直接使用匿名函数：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">df4</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">df4</span><span class=\"p\">[</span><span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df4</span><span class=\"p\">[</span><span class=\"s1\">&#39;价格&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">&lt;</span><span class=\"mi\">10</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"p\">)</span></code></pre></div><h3>更多相关文章推荐</h3><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//www.oudahe.com/p/51918/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python遍历pandas数据方法总结</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/dev_csdn/article/details/78594615\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Pandas初学者代码优化指南</a></li></ul><p></p>", 
            "topic": [
                {
                    "tag": "Pandas(Python)", 
                    "tagLink": "https://api.zhihu.com/topics/20179633"
                }, 
                {
                    "tag": "数据分析", 
                    "tagLink": "https://api.zhihu.com/topics/19559424"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>建议使用df.loc[df['价格']&lt;10, '价格'] = df['价格'] * 2。</p>", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "IvyLee", 
                    "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
                    "content": "嗯嗯，确实很多的处理都可以使用 pandas 的特定语法来完成！之前只是想突出对比如何遍历数据，所以没有列出来。。<br>感谢提出！[赞同]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41202576", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 34, 
            "title": "Pandas SettingwithCopy 警告解决方案", 
            "content": "<p><i>原文链接：<a href=\"https://link.zhihu.com/?target=https%3A//www.dataquest.io/blog/settingwithcopywarning/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">dataquest.io/blog/setti</span><span class=\"invisible\">ngwithcopywarning/</span><span class=\"ellipsis\"></span></a></i><br/><i>原文标题：Understanding SettingwithCopyWarning in pandas</i><br/><i>原文发布时间：5 JULY 2017（需要注意时效性，文中有一些方法已经弃用，比如</i> <i><code>ix</code>）</i><br/><i>作者：<a href=\"https://link.zhihu.com/?target=https%3A//www.dataquest.io/blog/author/ben/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Benjamin Pryke</a></i><br/><i>译者：Ivy Lee</i></p><p>学习 Python 数据分析的同学总是遇到这个警告，查询中文资料，一般只能找到个别的解决办法，不一定适用于自己遇到的情况。查到的最常见解决办法就是直接设置为不显示警告。这实际上并不能解决问题，搜索资料发现这篇英文讲解<code>SettingWithCopyWarning</code>原理非常系统的文章，翻译了一下，分享给大家。</p><h2>太长不看</h2><blockquote>一、解决方案：学会识别链式索引，不惜一切代价避免使用链式索引<br/><b>注意：如果你看不懂这里的解决方案，请阅读此文的前半部分，直到真正理解如何去做</b><br/>1. 如果要更改原始数据，请使用单一赋值操作（<code>loc</code>）：</blockquote><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></code></pre></div><blockquote>2. 如果想要一个副本，请确保强制让 Pandas 创建副本：</blockquote><div class=\"highlight\"><pre><code class=\"language-text\">winners = data.loc[data.bid == data.price].copy()\nwinners.loc[304, &#39;bidder&#39;] = &#39;therealname&#39;</code></pre></div><blockquote>二、强烈不推荐直接关闭警告，不过还是提供一下关闭警告的设置方法：</blockquote><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode.chained_assignment&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span></code></pre></div><blockquote>三、深度解析底层代码和历史演变（可选阅读）</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>以下是正文部分：</p><p><code>SettingWithCopyWarning</code> 是人们在学习 Pandas 时遇到的最常见的障碍之一。搜索引擎可以搜索到 Stack Overflow 上的问答、GitHub issues 和一些论坛帖子，分别提供了该警告在某些特定情况下的含义。会有这么多人同样遇到这个警告并不奇怪：有很多方法可以索引 Pandas 数据结构，每种数据结构都有各自的细微差别，甚至 Pandas 本身并不能保证两行代码的运行结果看起来完全相同。</p><p>本指南包含了生成警告的原因及解决方案，其中还包括一些底层细节，让你更好地了解代码内部的运行机制，最后提供了有关该话题的一些历史情况，解释代码底层以这样的方式运行的原因。</p><p>为了探索 <code>SettingWithCopyWarning</code>，我们将使用 eBay 3 天拍卖出售的 Xbox 的价格数据集，该数据集出自 <a href=\"https://link.zhihu.com/?target=http%3A//www.modelingonlineauctions.com/datasets\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Modelling Online Auctions</a> 一书。先来了解下数据的基本结构：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">Pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;xbox-3-day-auctions.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cf2ad2460122919fec1956d4bd9c1ae2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic3.zhimg.com/v2-cf2ad2460122919fec1956d4bd9c1ae2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic3.zhimg.com/v2-cf2ad2460122919fec1956d4bd9c1ae2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cf2ad2460122919fec1956d4bd9c1ae2_b.jpg\"/></figure><p>如你所见，数据集的每一行都是某一次 eBay Xbox 出价信息。下面是对数据集中每列的简要说明：</p><ul><li><code>auctionid</code> - 每次拍卖的唯一标识符</li><li><code>bid</code> - 本次拍卖出价</li><li><code>bidtime</code> - 拍卖的时长，以天为单位，从投标开始累计</li><li><code>bidder</code> - 投标人的 eBay 用户名</li><li><code>bidderrate</code> - 投标人的 eBay 用户评级</li><li><code>openbid</code> - 卖方为拍卖设定的开标价</li><li><code>price</code> - 拍卖结束时的中标价</li></ul><h2><b>什么是 SettingWithCopyWarning？</b></h2><p>首先要理解的是，<code>SettingWithCopyWarning</code> 是一个警告 Warning，而不是错误 Error。</p><p>错误表明某些内容是“坏掉”的，例如无效语法（invalid syntax）或尝试引用未定义的变量；警告的作用是提醒编程人员，他们的代码可能存在潜在的错误或问题，但是这些操作在该编程语言中依然合法。在这种情况下，警告很可能表明一个严重但不容易意识到的错误。</p><p><code>SettingWithCopyWarning</code> 告诉你，你的操作可能没有按预期运行，需要检查结果以确保没有出错。</p><p>如果代码确实按预期工作，那么我们会很容易忽略该警告，但是 <code>SettingWithCopyWarning</code><b>不应该</b>被忽略。在进行下一步操作之前，我们需要花点时间了解这一警告显示的原因。</p><p>要了解 <code>SettingWithCopyWarning</code>，首先要知道，Pandas 中的某些操作会返回数据的视图（View），某些操作会返回数据的副本（Copy）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6f64163c28bd47bc59e170691885b304_b.jpg\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb\" width=\"958\" data-original=\"https://pic1.zhimg.com/v2-6f64163c28bd47bc59e170691885b304_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;958&#39; height=&#39;472&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"958\" data-original=\"https://pic1.zhimg.com/v2-6f64163c28bd47bc59e170691885b304_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6f64163c28bd47bc59e170691885b304_b.jpg\"/><figcaption>View VS Copy</figcaption></figure><p>如上所示，左侧的视图 <code>df2</code> 只是原始数据 <code>df1</code> 一个子集，而右侧的副本创建了一个新的对象 <code>df2</code>。</p><p>当我们尝试对数据集进行更改时，这可能会出现问题：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b074b726623d68e878f2dcde0b86cd69_b.jpg\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic2.zhimg.com/v2-b074b726623d68e878f2dcde0b86cd69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic2.zhimg.com/v2-b074b726623d68e878f2dcde0b86cd69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b074b726623d68e878f2dcde0b86cd69_b.jpg\"/><figcaption>修改视图或副本</figcaption></figure><p>根据需求，我们可能想要修改原始 <code>df1</code>（左），也可能想要修改 <code>df2</code>（右）。警告提醒我们，代码可能并没有符合需求，修改到的可能并不是我们想要修改的那个数据集。</p><p>稍后会深入研究这个问题，但是现在先来了解一下，警告出现的两个主要原因以及对应的解决方案。</p><h2><b>链式赋值（Chained Assignment）</b></h2><p>当 Pandas 检测到链式赋值（Chained Assignment）时会生成警告。为了方便后续的解释，先来解释一些术语：</p><ul><li>赋值（Assignment） - 设置某些变量值的操作，例如 <code>data = pd.read_csv(&#39;xbox-3-day-auctions.csv&#39;)</code> ，有时会将这个操作称之为 <b>设置（Set）</b> </li><li>访问（Access） - 返回某些值的操作，具体参照下方的索引和链式索引示例。有时会将这个操作称之为 <b>获取（Get）</b> </li><li>索引（Indexing） - 任何引用数据子集的赋值或访问方法，例如 <code>data[1:5]</code> </li><li>链式索引（Chaining） - 连续使用多个索引操作，例如<code>data[1:5][1:3]</code> </li></ul><p>链式赋值是链式索引和赋值的组合。先快速浏览一下之前加载的数据集，稍后将详细介绍。在这个例子中，假设我们了解到用户<code>&#39;parakeet2004&#39;</code>的<code>bidderrate</code>值不正确，需要修改这个<code>bidderrate</code>值，那么先来查看一下用户<code>&#39;parakeet2004&#39;</code>的当前值：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">]</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8ed5bb4ed573a30f044f3c15f91cf166_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-8ed5bb4ed573a30f044f3c15f91cf166_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;708&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-8ed5bb4ed573a30f044f3c15f91cf166_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8ed5bb4ed573a30f044f3c15f91cf166_b.jpg\"/></figure><p>有三行数据需要更新<code>bidderrate</code>字段，继续操作：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mi\">36</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">ipykernel</span><span class=\"o\">/</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">SettingWithCopyWarning</span><span class=\"p\">:</span> \n<span class=\"n\">A</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"nb\">set</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"nb\">slice</span> <span class=\"kn\">from</span> <span class=\"nn\">aDataFrame.</span>\n<span class=\"n\">Try</span> <span class=\"n\">using</span> <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">row_indexer</span><span class=\"p\">,</span><span class=\"n\">col_indexer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"n\">instead</span>\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">caveats</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span><span class=\"p\">:</span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">Pandas</span><span class=\"o\">.</span><span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">-</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">/</span><span class=\"n\">indexinghtml</span><span class=\"c1\">#indexing-view-versus-copy</span>\n  <span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span></code></pre></div><p>神奇！我们“创造”出了<code>SettingWithCopyWarning</code>！</p><p>检查一下用户<code>&#39;parakeet2004&#39;</code>的相关值，可以看到值没有按预期改变：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">]</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-28321adb6cc3ec2b8dcb61d491190ea8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"707\" data-original=\"https://pic1.zhimg.com/v2-28321adb6cc3ec2b8dcb61d491190ea8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;707&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"707\" data-original=\"https://pic1.zhimg.com/v2-28321adb6cc3ec2b8dcb61d491190ea8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-28321adb6cc3ec2b8dcb61d491190ea8_b.jpg\"/></figure><p>这次警告是因为将两个索引操作链接在一起，直接使用了两次方括号的链式索引比较容易理解。但如果使用其他访问方法，例如<code>.bidderrate</code>、<code>.loc[]</code>、<code>.iloc[]</code>、<code>.ix[]</code>，也会如此，这次的链式操作有：</p><ul><li><code>data[data.bidder == &#39;parakeet2004&#39;]</code></li><li><code>[&#39;bidderrate&#39;] = 100</code></li></ul><p>以上两个链式操作一个接一个地独立执行。第一次链式操作是为了 Get，返回一个 DataFrame，其中包含所有 <code>bidder</code> 等于 <code>&#39;parakeet2004&#39;</code> 的行；第二次链式操作是为了 Set，是在这个新返回的 DataFrame 上运行的，并没有修改原始的 DataFrame。</p><p>这种情况对应的解决方案很简单：使用 <code>loc</code> 将两次链式操作组合成一步操作，确保 Pandas 进行 Set 的是原始 DataFrame。Pandas 始终确保下面这样的非链式 Set 操作起作用：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"c1\"># 设置新值</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"c1\"># 检查结果</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span>\n\n<span class=\"mi\">6</span>    <span class=\"mi\">100</span>\n<span class=\"mi\">7</span>    <span class=\"mi\">100</span>\n<span class=\"mi\">8</span>    <span class=\"mi\">100</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">bidderrate</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">int64</span></code></pre></div><p>这就是警告的文本（<code>Try using .loc[row_indexer,col_indexer] = value instead</code>）中建议的操作，在这种情况下完美适用。</p><h2><b>隐蔽的链式操作（Hidden chaining）</b></h2><p>现在来看遇到<code>SettingWithCopyWarning</code>的第二种常见方式。创建一个新的 DataFrame 来探索中标者数据，因为现在已经学习了链式赋值的内容，请注意使用 <code>loc</code>：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">]</span>\n<span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a9aa5a1e598dfaaf91f6a9da574d75f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"793\" data-original=\"https://pic2.zhimg.com/v2-a9aa5a1e598dfaaf91f6a9da574d75f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;793&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"793\" data-original=\"https://pic2.zhimg.com/v2-a9aa5a1e598dfaaf91f6a9da574d75f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a9aa5a1e598dfaaf91f6a9da574d75f9_b.jpg\"/></figure><p><code>winners</code>变量可能会被用来编写一些后续代码：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">mean_win_time</span> <span class=\"o\">=</span> <span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">bidtime</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"c1\"># 20 lines of code</span>\n<span class=\"n\">mode_open_bid</span> <span class=\"o\">=</span> <span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">openbid</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">()</span></code></pre></div><p>我们在偶然间发现了一个数据错误：标记为<code>304</code>的行中缺少了<code>bidder</code>值：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span>\n\n<span class=\"n\">nan</span></code></pre></div><p>对这个例子来说，假设我们已知该投标人的真实用户名，并据此更新数据：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span>\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mi\">36</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">517</span><span class=\"p\">:</span><span class=\"n\">SettingWithCopyWarning</span><span class=\"p\">:</span> \n<span class=\"n\">A</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"nb\">set</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"nb\">slice</span> <span class=\"kn\">from</span> <span class=\"nn\">aDataFrame.</span>\n<span class=\"n\">Try</span> <span class=\"n\">using</span> <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">row_indexer</span><span class=\"p\">,</span><span class=\"n\">col_indexer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"n\">instead</span>\n\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">caveats</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">Pandas</span><span class=\"o\">.</span><span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">-</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"c1\">#indexing-view-versus-copy</span>\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span></code></pre></div><p><code>SettingWithCopyWarning</code>又出现啦！但是这次使用了<code>loc</code>，为什么还会出现？来看代码的结果：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">])</span>\n\n<span class=\"n\">therealname</span></code></pre></div><p>代码确实起了预期的作用，为什么仍然出现警告？</p><p>链式索引可能在一行代码内发生，也可能跨越两行代码。因为 <code>winners</code> 变量是作为 Get 操作的输出创建的（<code>data.loc[data.bid == data.price]</code>），它可能是原始 DataFrame 的副本，也可能不是，除非检查，否则我们不能确认。对 <code>winners</code> 进行索引时，实际上使用的就是链式索引。</p><p>这意味着当我们尝试修改 <code>winners</code> 时，可能也修改了 <code>data</code>。</p><p>在实际的代码中，相关的两行链式索引代码之间，可能相距很多行其他代码，追踪问题可能会更困难，但大致情况是与示例类似的。</p><p>这种情况下的警告解决方案是：创建新 DataFrame 时明确告知 Pandas 创建一个副本：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">])</span>\n\n<span class=\"n\">therealname</span>\n<span class=\"n\">nan</span></code></pre></div><p>就这么简单！</p><p>窍门就是，学会识别链式索引，不惜一切代价避免使用链式索引。如果要更改原始数据，请使用单一赋值操作。如果你想要一个副本，请确保你强制让 Pandas 创建副本。这样既可以节省时间，也可以使代码保持逻辑严密。</p><p>另外请注意，即使 <code>SettingWithCopyWarning</code> 只在你进行 Set 时才会发生，但在进行 Get 操作时，最好也避免使用链式索引。链式操作代码效率较低，而且只要稍后进行赋值，就会导致问题。</p><h2><b>处理 SettingWithCopyWarning 的提示和技巧</b></h2><p>在进行下面更深入的分析之前，让我们看看<code>SettingWithCopyWarning</code>的更多细节。</p><h2><b>关闭警告</b></h2><p>如果不讨论如何明确地控制 <code>SettingWithCopy</code> 警告设置，本文则不够完整。Pandas 的 <code>mode.chained_assignment</code> 选项可以采用以下几个值之一：</p><ul><li><code>&#39;raise&#39;</code> - 抛出异常（exception）而不是警告</li><li><code>&#39;warn&#39;</code> - 生成警告（默认）</li><li><code>None</code> - 完全关闭警告</li></ul><p>例如，如果要关闭警告：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode.chained_assignment&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></code></pre></div><p>这样没有给出任何提示或警告，除非完全了解代码的运行情况，否则请不要尝试。只要你对想要实现的代码功能有任何一丁点疑问，不要关闭警告。有些开发者非常重视<code>SettingWithCopy</code>甚至选择将其提升为异常，如下所示：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode.chained_assignment&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;raise&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"n\">SettingWithCopyError</span>                      <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"o\">-</span><span class=\"mf\">80e3669</span><span class=\"n\">cab86</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n      <span class=\"mi\">1</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode.chained_assignment&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;raise&#39;</span><span class=\"p\">)</span><span class=\"o\">----&gt;</span> <span class=\"mi\">2</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.6</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"mi\">2427</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"mi\">2428</span>             <span class=\"c1\"># set column-&gt; 2429             self._set_item(key, value)   2430 </span>\n   <span class=\"mi\">2431</span>     <span class=\"k\">def</span> <span class=\"nf\">_setitem_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.6</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">_set_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n   <span class=\"mi\">2500</span>         <span class=\"c1\"># value exception to occur first</span>\n   <span class=\"mi\">2501</span>         <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span><span class=\"o\">-&gt;</span> <span class=\"mi\">2502</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_setitem_copy</span><span class=\"p\">()</span>    <span class=\"mi\">2503</span> \n   <span class=\"mi\">2504</span>     <span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loc</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">allow_duplicates</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.6</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">_check_setitem_copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stacklevel</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"p\">)</span>\n   <span class=\"mi\">1758</span> \n   <span class=\"mi\">1759</span>             <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;raise&#39;</span><span class=\"p\">:</span><span class=\"o\">-&gt;</span> <span class=\"mi\">1760</span>                 <span class=\"k\">raise</span> <span class=\"n\">SettingWithCopyError</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>   <span class=\"mi\">1761</span>             <span class=\"k\">elif</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;warn&#39;</span><span class=\"p\">:</span>\n   <span class=\"mi\">1762</span>                 <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">SettingWithCopyWarning</span><span class=\"p\">,</span> <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"n\">stacklevel</span><span class=\"p\">)</span>\n\n<span class=\"n\">SettingWithCopyError</span><span class=\"p\">:</span> \n<span class=\"n\">A</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"nb\">set</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"nb\">slice</span> <span class=\"kn\">from</span> <span class=\"nn\">a</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span>\n<span class=\"n\">Try</span> <span class=\"n\">using</span> <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">row_indexer</span><span class=\"p\">,</span><span class=\"n\">col_indexer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"n\">instead</span>\n\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">caveats</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">Pandas</span><span class=\"o\">.</span><span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">-</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"c1\">#indexing-view-versus-copy</span></code></pre></div><p>如果你正与缺乏经验的 Pandas 开发人员合作开发项目，或者正在开发需要高度严谨的项目，这可能特别有用。</p><p>更精确使用此设置的方法是使用 <a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fjeffknupp.com%252Fblog%252F2016%252F03%252F07%252Fpython-with-context-managers%252F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">上下文管理器 context manager</a> 。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"c1\"># resets the option we set in the previous code segment</span>\n<span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">reset_option</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode.chained_assignment&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">option_context</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode.chained_assignment&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></code></pre></div><p>如你所见，这种方法可以实现针对性的警告设置，而不影响整个环境。</p><h2><b>is_copy 属性</b></h2><p>避免警告的另一个技巧是修改 Pandas 用于解释<code>SettingWithCopy</code>的工具之一。每个 DataFrame 都有一个<code>is_copy</code>属性，默认情况下为<code>None</code>，但如果它是副本，则会使用<code><a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fdocs.python.org%252F3%252Flibrary%252Fweakref.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">weakref</a></code>引用原始 DataFrame 。通过将<code>is_copy</code>设置为<code>None</code>，可以避免生成警告。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">]</span>\n<span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">is_copy</span> <span class=\"o\">=</span> <span class=\"n\">Nonewinners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span></code></pre></div><p>但是请注意，这<b>并不会</b>奇迹般地解决问题，反而会使错误检测变得更加困难。</p><h2><b>单类型 VS 多类型对象</b></h2><p>值得强调的另一点是单类型对象和多类型对象之间的差异。如果 DataFrame 所有列都具有相同的 dtype，则它是单类型的，例如：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">single_dtype_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">single_dtype_df</span><span class=\"o\">.</span><span class=\"n\">dtypes</span><span class=\"p\">)</span>\n<span class=\"n\">single_dtype_df</span>\n\n<span class=\"n\">A</span>    <span class=\"n\">float64</span>\n<span class=\"n\">B</span>    <span class=\"n\">float64</span>\n<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">object</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-47716cfa5ca915bc1377e4a6135e7643_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"218\" data-rawheight=\"207\" class=\"content_image\" width=\"218\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;218&#39; height=&#39;207&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"218\" data-rawheight=\"207\" class=\"content_image lazy\" width=\"218\" data-actualsrc=\"https://pic4.zhimg.com/v2-47716cfa5ca915bc1377e4a6135e7643_b.jpg\"/></figure><p>如果 DataFrame 的列不是全部具有相同的 dtype，那么它是多类型的，例如：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">multiple_dtype_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">)})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">multiple_dtype_df</span><span class=\"o\">.</span><span class=\"n\">dtypes</span><span class=\"p\">)</span>\n<span class=\"n\">multiple_dtype_df</span>\n\n<span class=\"n\">A</span>    <span class=\"n\">float64</span>\n<span class=\"n\">B</span>     <span class=\"nb\">object</span>\n<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">object</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-310a5ebc904f4eb5825e6d56ae72bd2a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"145\" data-rawheight=\"209\" class=\"content_image\" width=\"145\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;145&#39; height=&#39;209&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"145\" data-rawheight=\"209\" class=\"content_image lazy\" width=\"145\" data-actualsrc=\"https://pic3.zhimg.com/v2-310a5ebc904f4eb5825e6d56ae72bd2a_b.jpg\"/></figure><p>由于下面<b>历史</b>部分中所述的原因，对多类型对象的索引 Get 操作将始终返回副本。而为了提高效率，索引器对单类型对象的操作几乎总是返回一个视图，需要注意的是，这取决于对象的内存布局，并不能完全保证。</p><h2><b>误报</b></h2><p>误报，即无意中报告链式赋值的情况，曾经在早期版本的 Pandas 中比较常见，但此后大部分都被解决了。为了完整起见，在本文中包含一些已修复的误报示例也是有用的。如果你在使用早期版本的 Pandas 时遇到以下任何情况，则可以安全地忽略或抑制警告（或通过升级 Pandas 版本完全避免警告！）</p><p>使用当前列的值，将新列添加到 DataFrame 会<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fstackoverflow.com%252Fq%252F42105859%252F604687\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">生成警告</a>，但这已得到修复。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;bidtime_hours&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidtime</span><span class=\"o\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-266b734b30ced144db118c5ec1da48ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb\" width=\"861\" data-original=\"https://pic3.zhimg.com/v2-266b734b30ced144db118c5ec1da48ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;861&#39; height=&#39;107&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"861\" data-original=\"https://pic3.zhimg.com/v2-266b734b30ced144db118c5ec1da48ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-266b734b30ced144db118c5ec1da48ea_b.jpg\"/></figure><p>在一个 DataFrame 切片上使用<code>apply</code>方法进行 Set 时，<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fstackoverflow.com%252Fq%252F42190175%252F604687\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">也会出现误报</a>，不过这也已得到修复。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"s1\">&#39;bidtime_hours&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidtime</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3eb539d0e64d1bb5137fbd7365704d89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"106\" class=\"origin_image zh-lightbox-thumb\" width=\"857\" data-original=\"https://pic2.zhimg.com/v2-3eb539d0e64d1bb5137fbd7365704d89_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;857&#39; height=&#39;106&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"106\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"857\" data-original=\"https://pic2.zhimg.com/v2-3eb539d0e64d1bb5137fbd7365704d89_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3eb539d0e64d1bb5137fbd7365704d89_b.jpg\"/></figure><p>直到 0.17.0 版本前，<code><a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttp%253A%252F%252FPandas.pydata.org%252FPandas-docs%252Fstable%252Fgenerated%252FPandas.DataFrame.sample.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DataFrame.sample</a></code>方法中存在一个错误，导致<code>SettingWithCopy</code>警告误报。现在，<code>sample</code>方法每次都会返回一个副本。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"s1\">&#39;price&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a26fec04bf2e8c4f3e9e68a4d5cb2856_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"110\" class=\"origin_image zh-lightbox-thumb\" width=\"876\" data-original=\"https://pic3.zhimg.com/v2-a26fec04bf2e8c4f3e9e68a4d5cb2856_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;876&#39; height=&#39;110&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"110\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"876\" data-original=\"https://pic3.zhimg.com/v2-a26fec04bf2e8c4f3e9e68a4d5cb2856_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a26fec04bf2e8c4f3e9e68a4d5cb2856_b.jpg\"/></figure><h2><b>链式赋值深度解析</b></h2><p>让我们重用之前的例子：试图更新<code>data</code>中<code>bidder</code>值为<code>&#39;parakeet2004&#39;</code>的所有行的<code>bidderrate</code>字段。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.6</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">ipykernel</span><span class=\"o\">/</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">SettingWithCopyWarning</span><span class=\"p\">:</span> \n<span class=\"n\">A</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"nb\">set</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"nb\">slice</span> <span class=\"kn\">from</span> <span class=\"nn\">a</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span>\n<span class=\"n\">Try</span> <span class=\"n\">using</span> <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">row_indexer</span><span class=\"p\">,</span><span class=\"n\">col_indexer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"n\">instead</span>\n\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">caveats</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">Pandas</span><span class=\"o\">.</span><span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">-</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"c1\">#indexing-view-versus-copy</span>\n  <span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span></code></pre></div><p>Pandas 用 <code>SettingWithCopyWarning</code> 告诉我们的是，代码的行为是模棱两可的，要理解原因和警告的措辞，以下概念将会有所帮助。</p><p>之前简要了解了视图（View）和副本（Copy）。有两种方法可以访问 DataFrame 的子集：可以创建对内存中原始数据的引用（视图），也可以将子集复制到新的较小的 DataFrame 中（副本）。视图是查看 <b>原始</b> 数据特定部分的一种方式；副本是将该数据 <b>复制</b> 到内存中的新位置。正如之前的图表所示，修改视图将修改原始变量，而修改副本则不会。</p><p>由于某些原因（本文稍后介绍），Pandas 中 Get 操作的输出无法保证。索引 Pandas 数据结构时，视图或副本都可能被返回，也就是说：对某一 DataFrame 进行 Get 操作返回一个新的 DataFrame，新的数据可能是：</p><ul><li>来自原始对象的数据副本</li><li>没有复制，而是直接对原始对象的引用</li></ul><p>因为不确定返回的对象是什么，而且每种可能性都有非常不同后续影响，所以忽略警告就是“玩火”。</p><p>为了更清楚地解释视图、副本和其中的歧义，我们创建一个简单的 DataFrame 并对其进行索引：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">df1</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6d4145a561eb4d614f6c5efdd0fd9ae3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"70\" data-rawheight=\"142\" class=\"content_image\" width=\"70\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;70&#39; height=&#39;142&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"70\" data-rawheight=\"142\" class=\"content_image lazy\" width=\"70\" data-actualsrc=\"https://pic4.zhimg.com/v2-6d4145a561eb4d614f6c5efdd0fd9ae3_b.jpg\"/></figure><p>将 <code>df1</code> 的子集赋值给 <code>df2</code>：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">df2</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c7f33071da6c759ca90e701c26d8e47f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"74\" data-rawheight=\"110\" class=\"content_image\" width=\"74\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;74&#39; height=&#39;110&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"74\" data-rawheight=\"110\" class=\"content_image lazy\" width=\"74\" data-actualsrc=\"https://pic4.zhimg.com/v2-c7f33071da6c759ca90e701c26d8e47f_b.jpg\"/></figure><p>根据刚才学到的知识，我们知道 <code>df2</code> 可能是 <code>df1</code> 的视图或 <code>df1</code> 子集的副本。</p><p>在解决问题之前，我们还需要再看一下链式索引。扩展一下 <code>&#39;parakeet2004&#39;</code> 示例，将两个索引操作链接在一起：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">__intermediate__</span><span class=\"p\">[</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></code></pre></div><p><code>__intermediate__</code>表示第一个调用的输出，对我们是完全不可见的。请记住，如果我们使用了属性访问（<code>.</code>+列名形式的访问），会得到相同的有问题的结果：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bidderrate</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></code></pre></div><p>这同样适用于任何其他形式的链式调用，<b>因为我们正在生成中间对象</b> 。</p><p>在底层代码中，链式索引意味着对 <code>__getitem__</code> 或 <code>__setitem__</code> 进行多次调用以完成单个操作。这些是 <a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fdocs.python.org%252F3%252Freference%252Fdatamodel.html%2523special-method-names\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特殊的 Python 方法</a>，通过在实现它们类的实例上使用方括号，可以调用这些方法，这是一种<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fen.wikipedia.org%252Fwiki%252FSyntactic_sugar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">语法糖</a>。下面看一下 Python 解释器如何执行示例中的内容。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"c1\"># Our code</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"c1\"># Code executed</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span></code></pre></div><p>你可能已经意识到，<code>SettingWithCopyWarning</code> 是由此链式 <code>__setitem__</code> 调用生成的。可以自己尝试一下 - 上面这些代码的功能相同。为清楚起见，请注意第二个 <code>__getitem__</code> 调用（对 <code>bidder</code> 列）是嵌套的，而不是链式问题的所有部分。</p><p>通常，如上面所述，Pandas 不保证 Get 操作是返回视图还是副本。如果示例中返回了一个视图，则链式赋值中的第二个表达式将是对原始对象 <code>__setitem__</code> 的调用。但是，如果返回一个副本，那么将被修改的是副本 - 原始对象不会被修改。</p><p>这就是警告中 “a value is trying to be set on a copy of a slice from a DataFrame” 的含义。由于没有对此副本的引用，它最终将被<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fen.wikipedia.org%252Fwiki%252FGarbage_collection_%252528computer_science%252529\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">回收</a> 。<code>SettingWithCopyWarning</code> 让我们知道 Pandas 无法确定第一个 <code>__getitem__</code> 调用是否返回了视图或副本，因此不清楚该赋值是否更改了原始对象。换一种说法就是：“我们是否正在修改原始数据？”这一问题的答案是未知的。</p><p>如果确实想要修改原始文件，警告建议的解决方案是使用 <code>loc</code> 将这两个单独的链式操作转换为单个赋值操作。这样代码中没有了链式索引，就不会再收到警告。修改后的代码及其扩展版本如下所示：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"c1\"># Our code</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"c1\"># Code executed</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">((</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">),</span> <span class=\"mi\">100</span><span class=\"p\">)</span></code></pre></div><p>DataFrame 的<code>loc</code>属性保证是原始 DataFrame 本身，具有扩展的索引功能。</p><h2><b>假阴性（False negatives）</b></h2><p>使用<code>loc</code>并没有结束问题，因为使用<code>loc</code>的 Get 操作仍然可以返回一个视图或副本，下面是个有点复杂的例子。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bid&#39;</span><span class=\"p\">)]</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-93367d7efe66c2605b8f7bfd27f55db0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"201\" data-rawheight=\"139\" class=\"content_image\" width=\"201\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;201&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"201\" data-rawheight=\"139\" class=\"content_image lazy\" width=\"201\" data-actualsrc=\"https://pic1.zhimg.com/v2-93367d7efe66c2605b8f7bfd27f55db0_b.jpg\"/></figure><p>这次拉出了两列而不是一列。下面尝试 Set 所有的<code>bid</code>值。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bid&#39;</span><span class=\"p\">)][</span><span class=\"s1\">&#39;bid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bid&#39;</span><span class=\"p\">)]</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e1910408481e677ad2b524fabc351bfa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"201\" data-rawheight=\"143\" class=\"content_image\" width=\"201\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;201&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"201\" data-rawheight=\"143\" class=\"content_image lazy\" width=\"201\" data-actualsrc=\"https://pic3.zhimg.com/v2-e1910408481e677ad2b524fabc351bfa_b.jpg\"/></figure><p>没有效果，也没有警告！我们在切片的副本上 Set 了一个值，但是 Pandas 没有检测到它 - 这就是假阴性。这是因为，使用 <code>loc</code> 之后并不意味着可以再次使用链式赋值。这个特定的 bug，有一个未解决的 <a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fgithub.com%252FPandas-dev%252FPandas%252Fissues%252F9767\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub issue</a> 。</p><p>正确的解决方法如下：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bidder</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;parakeet2004&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;bidderrate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bid&#39;</span><span class=\"p\">)]</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-aaf40e9912c677d9fb50fadcae54f488_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"181\" data-rawheight=\"140\" class=\"content_image\" width=\"181\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;181&#39; height=&#39;140&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"181\" data-rawheight=\"140\" class=\"content_image lazy\" width=\"181\" data-actualsrc=\"https://pic1.zhimg.com/v2-aaf40e9912c677d9fb50fadcae54f488_b.jpg\"/></figure><p>你可能怀疑，是否真的有人会在实践中遇到这样的问题。其实这比你想象的更容易出现。当我们像下一节中这样做：将 DataFrame 查询的结果赋值给变量。</p><h2><b>隐藏的链式索引</b></h2><p>再看一下之前隐藏的链式索引示例，我们试图设置<code>winners</code>变量中，标记为<code>304</code>行的<code>bidder</code>字段。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">]</span>\n<span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span>\n\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.6</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">517</span><span class=\"p\">:</span> <span class=\"n\">SettingWithCopyWarning</span><span class=\"p\">:</span> \n<span class=\"n\">A</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"nb\">set</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"nb\">slice</span> <span class=\"kn\">from</span> <span class=\"nn\">a</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span>\n<span class=\"n\">Try</span> <span class=\"n\">using</span> <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">row_indexer</span><span class=\"p\">,</span><span class=\"n\">col_indexer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"n\">instead</span>\n\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">caveats</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">Pandas</span><span class=\"o\">.</span><span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">-</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"c1\">#indexing-view-versus-copy</span>\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span></code></pre></div><p>尽管使用了 <code>loc</code>，还是得到了 <code>SettingWithCopyWarning</code> 。这可能令人非常困惑，因为警告信息建议的方法，我们已经做过了。</p><p>不过，想一下 <code>winners</code> 变量究竟是什么？由于我们通过 <code>data.loc[data.bid == data.price]</code> 将它初始化，无法知道它是原始 <code>data</code> 的视图还是副本（因为 Get 操作返回视图或副本）。将初始化与生成警告的行组合在一起可以清楚地表明我们的错误。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span>\n\n\n<span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.6</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">517</span><span class=\"p\">:</span> <span class=\"n\">SettingWithCopyWarning</span><span class=\"p\">:</span> \n<span class=\"n\">A</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"nb\">set</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"nb\">slice</span> <span class=\"kn\">from</span> <span class=\"nn\">a</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span>\n<span class=\"n\">Try</span> <span class=\"n\">using</span> <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">row_indexer</span><span class=\"p\">,</span><span class=\"n\">col_indexer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"n\">instead</span>\n\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">caveats</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">Pandas</span><span class=\"o\">.</span><span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">Pandas</span><span class=\"o\">-</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">/</span><span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"c1\">#indexing-view-versus-copy</span>\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span></code></pre></div><p>再次使用了链式赋值，只是这次它被分在了两行代码中。思考这个问题的另一种方法是，问一个问题：“这个操作会修改一个对象，还是两个对象？”在示例中，答案是未知的：如果 <code>winners</code> 是副本，那么只有 <code>winners</code> 受到影响，但如果是视图，则 <code>winners</code> 和 <code>data</code> 都将被更新。这种情况可能发生在脚本或代码库中相距很远的行之间，这使问题很难被追根溯源。</p><p>此处警告的意图是提醒，自以为代码将修改原始 DataFrame，实际没有修改成功，或者说我们将修改副本而不是原始数据。<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fgithub.com%252FPandas-dev%252FPandas%252Fissues%252F6757%2523issuecomment-39204438\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入研究 Pandas GitHub repo 中的 issue，可以看到开发人员自己对这个问题的解释。</a></p><p>如何解决这个问题在很大程度上取决于自己的意图。如果想要使用原始数据的副本，解决方案就是强制 Pandas 制作副本。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">])</span> <span class=\"c1\"># Original</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">])</span> <span class=\"c1\"># Copy</span>\n\n\n<span class=\"n\">nan</span>\n<span class=\"n\">therealname</span></code></pre></div><p>另一方面，如果需要更新原始 DataFrame，那么应该使用原始 DataFrame 而不是重新赋值一些具有未知行为的其他变量。之前的代码可以修改为：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"c1\"># Finding the winners</span>\n<span class=\"n\">winner_mask</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bid</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span>\n\n<span class=\"c1\"># Taking a peek</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">winner_mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Doing analysis</span>\n<span class=\"n\">mean_win_time</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">winner_mask</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidtime&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"c1\"># 20 lines of code</span>\n<span class=\"n\">mode_open_bid</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">winner_mask</span><span class=\"p\">,</span> <span class=\"s1\">&#39;openbid&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Updating the username</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">304</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bidder&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;therealname&#39;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>在更复杂的情况下，例如修改 DataFrame 子集的子集，不要使用链式索引，可以在原始 DataFrame 上通过<code>loc</code>进行修改。例如，可以更改上面的新<code>winner_mask</code>变量或创建一个选择中标者子集的新变量，如下所示：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">high_winner_mask</span> <span class=\"o\">=</span> <span class=\"n\">winner_mask</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">&gt;</span> <span class=\"mi\">150</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">high_winner_mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-10e40b376dea42cc0d91c404d960e69c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb\" width=\"943\" data-original=\"https://pic1.zhimg.com/v2-10e40b376dea42cc0d91c404d960e69c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;943&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"943\" data-original=\"https://pic1.zhimg.com/v2-10e40b376dea42cc0d91c404d960e69c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-10e40b376dea42cc0d91c404d960e69c_b.jpg\"/></figure><p>这种技术会使未来的代码库维护和扩展地更加稳健。</p><h2><b>历史</b></h2><p>你可能想知道为什么要造成这么混乱的现状，为什么不明确指定索引方法是返回视图还是副本，来完全避免 <code>SettingWithCopy</code> 问题。要理解这个问题，必须研究 Pandas 的过去。</p><p>Pandas 确定返回一个视图还是一个副本的逻辑，源于它对 NumPy 库的使用，这是 Pandas 库的基础。视图实际上是通过 NumPy 进入 Pandas 的词库的。实际上，视图在 NumPy 中很有用，因为它们能够可预测地返回。由于 NumPy 数组是单一类型的，因此 Pandas 尝试使用最合适的 <a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fdocs.scipy.org%252Fdoc%252Fnumpy%252Freference%252Farrays.dtypes.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dtype</a> 来最小化内存处理需求。因此，包含单个 dtype 的 DataFrame 切片可以作为单个 NumPy 数组的视图返回，这是一种高效处理方法。但是，多类型的切片不能以相同的方式存储在 NumPy 中。Pandas 兼顾多种索引功能，并且保持高效地使用其 NumPy 内核的能力。</p><p>最终，Pandas 中的索引被设计为有用且通用的方式，其核心并不完全与底层 NumPy 数组的功能相结合。随着时间的推移，这些设计和功能元素之间的相互作用，导致了一组复杂的规则，这些规则决定了返回视图还是副本。经验丰富的 Pandas 开发者通常都很满意 Pandas 的做法，因为他们可以轻松地浏览其索引行为。</p><p>不幸的是，对于 Pandas 的新手来说，链式索引几乎不可避免，因为 Get 操作返回的就是可索引的 Pandas 对象。此外，用 Pandas 的核心开发人员之一 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Pandas-dev/Pandas/issues/10954%23issuecomment-136446453\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Jeff Reback 的话来说</a>，“从语言的角度来看，直接检测链式索引是不可能的，必须经过推断才能了解”（It is simply not possible from a language perspective to detect chain indexing directly; it has to be inferred）。</p><p>因此，在 2013 年底的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Pandas-dev/Pandas/pull/5390\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">0.13.0 版本</a>中引入了警告，作为许多开发者遇到链式赋值导致的<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/16553298/pandas-re-assigning-values-to-a-block-of-a-data-frame\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">无声失败</a>的解决方案。</p><p>在 0.12 版本之前，ix 索引器是最受欢迎的（在 Pandas 术语中，“索引器”比如 <code>ix</code>，<code>loc</code> 和 <code>iloc</code>，是一种简单的结构，允许使用方括号来索引对象，就像数组一样，但具有一些特殊的用法）。但是大约在 2013 年 ，Pandas 项目开始意识到日益增加的新手用户的重要性，有动力开始提高新手用户的使用体验。自从此版本发布以来，<code>loc</code> 和 <code>iloc</code>索引器因其更明确的性质和更易于解释的用法而受到青睐。（<i>译者注：pandas v0.23.3 (July 7, 2018)，其中</i> <code><i>ix</i></code> <i>方法已经被弃用</i>）</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1e48371ce1c8347c5f9cb484d234a739_b.jpg\" data-size=\"normal\" data-rawwidth=\"1152\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"1152\" data-original=\"https://pic2.zhimg.com/v2-1e48371ce1c8347c5f9cb484d234a739_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1152&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1152\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1152\" data-original=\"https://pic2.zhimg.com/v2-1e48371ce1c8347c5f9cb484d234a739_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1e48371ce1c8347c5f9cb484d234a739_b.jpg\"/><figcaption>Google Trends: Pandas</figcaption></figure><p><code>SettingWithCopyWarning</code> 在推出后持续改进，多年来在许多 GitHub issue 中得到了<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Pandas-dev/Pandas/issues/10954\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">热烈的讨论</a> ，甚至还在<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttp%253A%252F%252FPandas.pydata.org%252FPandas-docs%252Fstable%252Fwhatsnew.html%253Fhighlight%253Dsettingwithcopywarning\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不断更新</a> ，但是要理解它，仍然是成为 Pandas 专家的关键。</p><h2>总结</h2><p><code>SettingWithCopyWarning</code> 的基础复杂性是 Pandas 库中为数不多的坑。这个警告的源头深深嵌在库的底层中，不应被忽视。Jeff Reback <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Pandas-dev/Pandas/issues/8730%23issuecomment-61717234\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">自己的话</a> ，“Their are no cases that I am aware that you should actually ignore this warning. ……If you do certain types of indexing it will never work, others it will work. You are really playing with fire.”</p><p>幸运的是，解决警告只需要<b>识别链式赋值并将其修复</b>——看完本文你唯一需要理解的事。</p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "数据分析", 
                    "tagLink": "https://api.zhihu.com/topics/19559424"
                }, 
                {
                    "tag": "Pandas(Python)", 
                    "tagLink": "https://api.zhihu.com/topics/20179633"
                }
            ], 
            "comments": [
                {
                    "userName": "泰勒不会展开", 
                    "userLink": "https://www.zhihu.com/people/8927ad52411042e9929ceb5628c72d9c", 
                    "content": "<p>好文章</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "水獭飞行员", 
                    "userLink": "https://www.zhihu.com/people/9d62160f71b15b7765e6c88bf33ece49", 
                    "content": "<p>看了之后终于知道我为什么每次修改都没有改变原数据了...我以为返回的是视图，其实是副本...</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "韦三", 
                    "userLink": "https://www.zhihu.com/people/682d4d92ea1746e88263fbc431688f9e", 
                    "content": "<p>写的超清楚，非常感谢！</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32152734", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 13, 
            "title": "OpenStreetMap 数据整理实践", 
            "content": "<h2>1. 选定区域</h2><p><b>Hong Kong, China</b></p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//www.openstreetmap.org/relation/913110\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://www.openstreetmap.org/relation/913110</a></li></ul><p>选取的区域是香港的一部分，<code>hong-kong.osm</code> 大小 92.6M。经纬度边界：22.2233, 114.115, 22.3475, 114.275，题图为选取区域截图。</p><h2>2. 选择区域的原因</h2><p>香港是一个神奇的城市，你可以在这里享受购物的快乐、世界各地的美食，也可以体验独特的香港文化。很喜欢在香港的街头闲逛，总是会有很多惊喜。那么，如果在香港街道数据中“闲逛”，又会发现什么呢？</p><hr/><h2>3. 地图数据中的问题</h2><p>我将下载后的 <code>hong-kong.osm</code> 通过 <code>make_a_simple.py</code> 代码，转换为一个小型的 <code>sample.osm</code>文件，对数据进行审查。</p><h2>3.1. key 审查</h2><ul><li>使用 <code>tags.py</code> 审查没有发现问题 key（problemchars 类型），将 other 类型的 key 打印出来发现有一部分是因为有 2 个冒号，除去两个冒号的，其他有：</li><ul><li><b><code>naptan:Bearing</code></b>: 在 <a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//wiki.openstreetmap.org/wiki/NaPTAN/Tag_mappings\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NaPTAN Wiki</a> 中搜索到相关信息，<b><code>Direction along street in which vehicle is pointing when stopped at stopping point.</code></b> 表示的是：车辆停在这个位置时，车头的朝向方位是什么。</li><li><b><code>ref:CBNW</code></b>: 在 <a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//wiki.openstreetmap.org/wiki/Key%3Aref\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Key:ref Wiki</a> 上可以查到，<code>ref:CBNW</code> 更通用的写法应该是 <code>ref:ctb</code>，可以修正一下，不过对本次查询没有影响，暂时未修改；</li><li><b><code>socket:bs1363</code></b>: 在 <a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//wiki.openstreetmap.org/wiki/Cs%3ATag%3Aamenity%253Dcharging_station\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">charging_station Wiki</a> 是充电站正常的 key，表示的是插座的一种类型；</li><li><b><code>name:zh-yue</code></b>: 应该代表的是粤语，但是没有找到对应的 Wiki，而且中文或者粤语，文字应该是没有区别的，香港都是使用的繁体字，zh-yue 似乎没有必要，只是在下方处理的时候需要注意；</li><li><b><code>boundary_1</code></b>: 关于边界，没有找到 boundary_1 相关信息，暂时忽略；</li><li><b><code>NRG</code></b>: 没有找到相关信息，也暂时忽略。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>整理数据后想要探索的相关 key：</li><ul><li>街道地址：<b><code>addr:street</code></b></li><li>生活设施：<b><code>amenity</code></b></li><li>餐厅：<b><code>restaurant</code></b></li><li>菜系：<b><code>cuisine</code></b>，这其中发现一个问题是，cuisine 的值如果有多个，被用分号分开了，所以需要处理一下。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.2. 街道地址的审查</h2><ul><li>因为历史原因与地域原因，香港是一个国际化的大都市，常用语言有好几种：中文、粤语、英文、葡文等。所以地址的名称一般情况下都是中英文结合并且是先中后英的形式；</li><li>很多 <code>name</code> 的 key 后面都跟着几个 <code>name:zh</code>, <code>name:en</code> 等区分语言的名称（这里多处理一步，如果没有 <code>name:zh</code>，也要搜索一下 <code>name:zh-yue</code>）；</li><li>后续可以整理查看 <code>name:zh</code>, <code>name:en</code> 的值是否都在 <code>name</code> 中，如果没有，则将 <code>name</code> 修改为 <code>name:zh</code> 与 <code>name:en</code> 用空格连接的字符串</li><li>通过使用 <code>audit.py</code> 进行审查发现地址的格式还是比较整齐的，只修改了一个以 Roadww 结尾的地址为 Road 结尾。</li></ul><hr/><h2>4. 问题数据的改进</h2><h2>4.1. cuisine 菜系数据的 value 处理</h2><p>处理方式：</p><ul><li>在写入 csv 文件的时候，查找 cuisine 值中包含分号的值；</li><li>用分号将这个值分割为一个列表；</li><li>对列表中的项进行遍历，每一项创建一个新的 tag，key 为 cuisine，value 为正在遍历的项</li></ul><p>以下代码节选自 <code>data.py</code> 主要用来处理多个 <code>cuisine</code> 的情况</p><div class=\"highlight\"><pre><code class=\"language-text\">def multi_cuisine_apart(tag_dict):\n    &#34;&#34;&#34;\n    将有多个菜系的 cuisine，用 ; 分开，整理为一个列表\n    如果只有一个菜系，则为一个元素的列表\n    最终返回这个菜系列表 cuisine_list\n    &#34;&#34;&#34;\n    cuisine_list=[]\n    if &#34;;&#34; in tag_dict[&#39;value&#39;]:\n        cuisine_list = tag_dict[&#39;value&#39;].split(&#39;;&#39;)\n        # print cuisine_list\n    else:\n        cuisine_list.append(tag_dict[&#39;value&#39;])\n    return cuisine_list </code></pre></div><p>…… 在 <code>data.py</code> 的 <code>shape_element</code> 函数中，将原来的 <code>tags.append(tag_dict)</code> 改为了以下语句</p><div class=\"highlight\"><pre><code class=\"language-text\">               if (tag_dict[&#39;key&#39;] == &#39;name&#39;) and zh_en_name:    \n                # 如果 key 为 name，并且 zh 和 en 都不为空\n                    tag_dict[&#34;value&#34;] = zh_en_name \n                    # 则修改 name 对应的 value\n                if tag_dict[&#39;key&#39;] == &#39;cuisine&#39;:\n                # 处理 key 为 cuisine 的数据\n                    cuisine_list = multi_cuisine_apart(tag_dict)\n                    for cuisine in cuisine_list:\n                        tag_dict_cuisine = tag_dict.copy()\n                        tag_dict_cuisine[&#34;value&#34;] = cuisine\n                        tags.append(tag_dict_cuisine)\n                else:\n                    tags.append(tag_dict) </code></pre></div><h2>4.2. name 与 name:zh、name:en 的结合</h2><p>处理方式：</p><ul><li>遍历 node</li><li>判断该 nodeid 中是否有 name:zh 和 name:en</li><li>如果满足以上条件则给 name key 对应的 value 赋值为：name:zh 的值 + 一个空格 + name:en 的值</li></ul><p>以下代码为 <code>data.py</code> 的 <code>find_zh_en_name</code> 函数</p><div class=\"highlight\"><pre><code class=\"language-text\">def find_zh_en_name(elem):\n    &#34;&#34;&#34;\n    name:zh 和 name:en 将被分别储存在 zh 和 en 中并最终组合为 zh_en_name 返回\n    同时返回值还有 has_name 用来解决有 name:zh 和 name:en 却没有 name key 时的情况\n    &#34;&#34;&#34;\n    zh = &#34;&#34;\n    en = &#34;&#34;\n    zh_en_name=&#34;&#34;\n    has_name = False\n    for child in elem:\n        if child.tag == &#34;tag&#34;:\n            if ((child.attrib[&#39;k&#39;] == &#34;name:zh&#34;) \n               or (child.attrib[&#39;k&#39;] == &#34;name:zh-yue&#34;)):\n                # 中文要处理 zh-yue 的情况\n                zh = child.attrib[&#39;v&#39;]\n            if child.attrib[&#39;k&#39;] == &#34;name:en&#34;:\n                en = child.attrib[&#39;v&#39;]\n            if child.attrib[&#39;k&#39;] == &#34;name&#34;:\n                has_name = True\n    if zh and en:\n        zh_en_name = zh + &#34; &#34; + en   \n    return zh_en_name, has_name </code></pre></div><p>……在实现了上述步骤之后，debug 时发现有一些既有 en 又有 zh 名称的 tag，可能没有 name 这个 key，这种情况下，添加了以下代码来处理这个问题，位置在 <code>data.py</code> 下面的 <code>shape_element</code> 函数中，<code>for child in element:</code> 之前：</p><div class=\"highlight\"><pre><code class=\"language-text\">   zh_en_name, has_name = find_zh_en_name(element) \n    # 调用函数查看是否有 name，zh 和 en\n    if (zh_en_name) and (not has_name):\n        # 如果没有 name，但是有 zh 和 en，则创建一个新的 name 条目\n        tag_dict_name={}\n        tag_dict_name[&#34;id&#34;] = node_id\n        tag_dict_name[&#34;key&#34;] = &#34;name&#34;\n        tag_dict_name[&#34;value&#34;] = zh_en_name\n        tag_dict_name[&#34;type&#34;] = default_tag_type\n        tags.append(tag_dict_name) </code></pre></div><h2>4.3. 数据整理中遇到的问题</h2><ul><li>因为对 xml 文件的写入不熟悉，所以直接在写入 CSV 文件的时候进行了整理，所以有一个问题是，如何在 xml 文件中做出这些整理的操作，并写入到 xml 文件中</li><li>关于 name 的整理中，在实现了上述功能之后，浏览文件时发现：有一些既有 en 又有 zh 名称的 tag，可能没有 name 这个 key，这种情况下，我的解决思路是：需要添加一个 &#34;name&#34; 的 key，并赋予它 zh + &#34; &#34; + en 这个值，并按照正常 name 一样，type 设置为 regular。这部分内容在以上代码中也有所体现。</li></ul><hr/><h2>5. 用 SQL 查询数据</h2><p>将整个 <code>hong-kong.osm</code> 整理为 csv 文件，并导入到 sql 中，代码文件为：</p><ul><li><code>data.py</code> —— 将 xml 写入 csv 文件</li><li><code>trans_db.ipynb</code> —— 将 csv 文件写入数据库</li></ul><h2>5.1. 文件大小</h2><ul><li>hong-kong.osm: 92.6 MB</li><li>mydb.db: 49.8 MB</li><li>nodes_csv: 31.6 MB</li><li>nodes_tags.csv: 3.2 MB</li><li>ways_csv: 2.86 MB</li><li>ways_nodes.csv: 11.4 MB</li><li>ways_tags.csv: 7.02 MB</li></ul><h2>5.2. node 数量</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT COUNT(*) FROM nodes; </code></pre></div><p>nodes 数量查询结果</p><p>400770</p><h2>5.3. way 数量</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT COUNT(*) FROM ways; </code></pre></div><p>ways 数量查询结果</p><p>50217</p><h2>5.4.唯一用户数量</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT COUNT(DISTINCT(sq.uid)) as &#39;Number of unique users&#39;           \nFROM (SELECT uid FROM nodes UNION ALL SELECT uid FROM ways) as sq; </code></pre></div><p>唯一用户数量查询结果</p><p>907</p><h2>5.5. 贡献前 10 的用户</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT e.user, COUNT(*) as num\nFROM (SELECT user FROM nodes UNION ALL SELECT user FROM ways) e\nGROUP BY e.user\nORDER BY num DESC\nLIMIT 10; </code></pre></div><p>贡献前 10 用户查询结果</p><p>hlaw|150311</p><p>KX675|34879</p><p>FlyTy|29769</p><p>Philip C|21372</p><p>R17466|18735</p><p>Wrightbus|18673</p><p>jc86035|13973</p><p>cartogram|12350</p><p>eversone|11475</p><p>bTonyB|8980</p><h2>5.6. 排名前 10 的咖啡店</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT nodes_tags.value, COUNT(*) as num\nFROM nodes_tags\n    JOIN (SELECT DISTINCT(id) FROM nodes_tags WHERE value=&#39;cafe&#39;) i\n    ON nodes_tags.id=i.id\nWHERE nodes_tags.key=&#39;name&#39;\nGROUP BY nodes_tags.value\nORDER BY num DESC\nLIMIT 10;\n</code></pre></div><p>前 10 咖啡馆查询结果</p><p>星巴克咖啡 Starbucks Coffee|30</p><p>太平洋咖啡 Pacific Coffee|24</p><p>Starbucks|23</p><p>Pacific Coffee|5</p><p>Starbucks Coffee|3</p><p>Délifrance|2</p><p>Pacific Coffee Company|2</p><p>Paradise|2</p><p>新釗記|2</p><p>18 grams|1</p><h2>5.7. 规模前 10 的快餐店</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT nodes_tags.value, COUNT(*) as num\nFROM nodes_tags\n    JOIN (SELECT DISTINCT(id) FROM nodes_tags WHERE value=&#39;fast_food&#39;) i\n    ON nodes_tags.id=i.id\nWHERE nodes_tags.key=&#39;name&#39;\nGROUP BY nodes_tags.value\nORDER BY num DESC\nLIMIT 10;\n</code></pre></div><p>快餐前 10 查询结果</p><p>麥當勞 McDonald&#39;s|63</p><p>McDonald&#39;s|29</p><p>大家樂 Café de Coral|25</p><p>吉野家 Yoshinoya|10</p><p>肯德基 KFC|10</p><p>大快活 Fairwood|9</p><p>KFC|8</p><p>Maxim MX|5</p><p>賽百味 Subway|4</p><p>Subway|3</p><h2>5.8. 最受欢迎的菜系前 10 名</h2><div class=\"highlight\"><pre><code class=\"language-text\">SELECT nodes_tags.value, COUNT(*) as num\nFROM nodes_tags \n    JOIN (SELECT DISTINCT(id) FROM nodes_tags WHERE value=&#39;restaurant&#39;) i\n    ON nodes_tags.id=i.id\nWHERE nodes_tags.key=&#39;cuisine&#39;\nGROUP BY nodes_tags.value\nORDER BY num DESC\nLimit 10;\n</code></pre></div><p>前 10 菜系查询结果</p><p>chinese|73</p><p>japanese|39</p><p>noodle|25</p><p>pizza|20</p><p>indian|17</p><p>noodles|14</p><p>thai|14</p><p>american|11</p><p>sushi|11</p><p>vegetarian|11</p><hr/><h2>6. 额外的想法</h2><h2>6.1. 更多问题与改进方法</h2><p>在进行了 SQL 查询之后，发现了更多问题。比如：</p><ol><li>有些名称有不同的版本，比如 Starbucks Coffee、Starbucks、Starbucks Reserve 都是星巴克，可以只使用最有标识性的名称，比如 Starbucks，在数据整理时，如果有相关的需求，也可以回过头去获取 name 中包含 Starbucks 的值，全部修改为一致的名称；</li><li>name 有的还是存在只有英文的情况，比如 麥當勞 McDonald&#39;s 和 McDonald&#39;s、星巴克咖啡 Starbucks Coffee 和 Starbucks Coffee，已经做了一定的改进，比如查找到有 name:zh 和 name_en 的 node，则将 name 修改为它们的连接字符串，但是很有可能出现没有细分语言的 name 的情况，；</li><li>甚至一些有规定样式的，也有不同的用法，比如 noodles 和 noodle，在 <a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//wiki.openstreetmap.org/wiki/Key%3Acuisine\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Key:cuisine-wiki</a> 上可以看到应该统一为 noodle；</li><li>cuisine，这个表示的是：For describing the type of food served at an eating place.中文翻译为：用来记录一个餐饮场所的食物风味。但是我们看到 cuisine 的值，既有按地域分类的，比如 chinese、japanese，又有按照食物种类分类的 noodle、pizza，个人感觉这两种并不是同一种分类，比如 noodle 种类，有可能是中餐也有可能是日本拉面，这两种分类是交叉重合的。</li></ol><h2>6.2. 改进后的预期问题</h2><ol><li>前 3 条问题都可以归纳为一个问题，那就是贡献者的贡献信息参差不齐。当然可以做出各种规定性的标准，但是类似 noodles 那一项也可以看出，有时候做出了规定，但是贡献值自身如果不小心还是会提供有差异的信息。如果可以像 Github 那样，有更多的志愿者来 review 新贡献者的贡献， review 通过后才可以被添加进去。这样的问题就是可能没有那么多志愿者维护。</li><li>cuisine，可以添加另一个分类，菜系和食物种类并不相同，可以加一个食物种类的分类，就叫 food，这样可以将菜系和食物分类区分开，但是有可能的问题是，food，包含的东西太多，可能贡献者会提供并不像 noodle 和 pizza 这样有代表性的分类性质的词，而是添加很多无关紧要的食物名称；</li><li>cuisine，还有一个解决办法是，在 <a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//wiki.openstreetmap.org/wiki/Key%3Acuisine\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Key:cuisine-wiki</a> 页面上也可以看到：“It was suggested <a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//lists.openstreetmap.org/pipermail/tagging/2015-January/020996.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[1]</a> to use culture=* instead of cuisine=* for other ethnic, cultural and/or regional services like hairdresser or clothes.”这个解决办法比上一条要好，但是还是有一些不够明确的地方，个人觉得，可以只将地域风格作为一个新的 key，这是比较容易区分和定义的，但是在日常生活中，我们确实会将中餐和 pizza 当作并列的选项来提供，如果在 OSM 中，提供了另外的分类，肯定也会引起混乱。</li></ol><h2>7. 结论</h2><p>经过本次整理，数据在一致性和完整性上有了一定的提升。虽然整理后的数据依然存在问题，但是也已经对数据整理进行了深入的实践和体会了。</p><p>在本次数据整理和思考的过程中，无疑可以看出 OpenStreetMap 的数据确实有很多不规范的地方，这也是开源项目不可避免会出现的问题。如果真的有需要使用这些数据进行数据分析工作，一定要进行很多的数据整理，并且这些工作还可能会随着分析的深入需要反复进行。第一次窥探到现实世界数据分析工作的冰山一角，很有挑战性！</p>", 
            "topic": [
                {
                    "tag": "数据清洗", 
                    "tagLink": "https://api.zhihu.com/topics/20043496"
                }, 
                {
                    "tag": "SQL", 
                    "tagLink": "https://api.zhihu.com/topics/19553557"
                }, 
                {
                    "tag": "优达学城（Udacity）", 
                    "tagLink": "https://api.zhihu.com/topics/19696060"
                }
            ], 
            "comments": [
                {
                    "userName": "ash692", 
                    "userLink": "https://www.zhihu.com/people/14e7526c8a2d7dd88793fea163e5bf20", 
                    "content": "<p>博主可以分享一下源代码吗</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26886121", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 9, 
            "title": "编程入门——如何解决问题", 
            "content": "请参见 Udacity 编程入门纳米学位 课程23：如何解决问题。<p>以上。</p><br/><p>开个玩笑！课程23教会我们的是解决大多数程序问题的方法，比如你想要用代码实现一个特定功能或算法时，可以遵循课程教导的步骤来做，会很有帮助。</p><p>但是我们作为初学者，而且还是非英语母语的编程菜鸟，可能有时我们想到了解决办法，但是却不知道如何实现；或者知道某个函数却不知道这个函数该如何用；甚至很多时候我们都不知道我们遇到的问题该如何问，这才是最致命的。</p><p>今天我想分享一下自己学习的过程中如何解决问题。简而言之：Google 搜索 + Google 翻译。</p><p>当有同学问我怎么解决问题的时候，我直接告诉她要用好搜索引擎。她问我说，怎么样算用好？确实，Dave 老师在课程中讲的很对，不结合具体问题来讲如何解决问题是没有意义的。那么就举一个最近的小例子。</p><h2>1. 简单的搜索——&lt;li&gt; 标签</h2><p>可能很多同学做P1的时候都用过。最近看到群里有同学问，为什么&lt;div&gt;内用&lt;li&gt;会报错，我就去搜索了一下。直接搜索关键词【li 标签】，可以直接看到你想要的信息。</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-d1e2bed06981a3889dea022548cca0ca_b.png\" data-rawwidth=\"1046\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb\" width=\"1046\" data-original=\"https://pic3.zhimg.com/v2-d1e2bed06981a3889dea022548cca0ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1046&#39; height=&#39;537&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1046\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1046\" data-original=\"https://pic3.zhimg.com/v2-d1e2bed06981a3889dea022548cca0ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d1e2bed06981a3889dea022548cca0ca_b.png\"/></figure><br/><p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-ee0271a21603970498dbb136cfc19ec4_b.png\" data-rawwidth=\"1008\" data-rawheight=\"726\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\" data-original=\"https://pic1.zhimg.com/v2-ee0271a21603970498dbb136cfc19ec4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1008&#39; height=&#39;726&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1008\" data-rawheight=\"726\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1008\" data-original=\"https://pic1.zhimg.com/v2-ee0271a21603970498dbb136cfc19ec4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ee0271a21603970498dbb136cfc19ec4_b.png\"/></figure>这个例子中，百度和某哥都能搜到你要的结果。然而我们发现，两个比较系统的网站上（W3school和菜鸟教程），发现了一个有点不同的地方：</p><p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-2220d4aa770f1891ddda4be9b70fc8d6_b.png\" data-rawwidth=\"816\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"816\" data-original=\"https://pic3.zhimg.com/v2-2220d4aa770f1891ddda4be9b70fc8d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;816&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"816\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"816\" data-original=\"https://pic3.zhimg.com/v2-2220d4aa770f1891ddda4be9b70fc8d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2220d4aa770f1891ddda4be9b70fc8d6_b.png\"/></figure><figure><noscript><img src=\"https://pic4.zhimg.com/v2-7b9e13c7532b6f93ac34b9291d0ca423_b.png\" data-rawwidth=\"1069\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"1069\" data-original=\"https://pic4.zhimg.com/v2-7b9e13c7532b6f93ac34b9291d0ca423_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1069&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1069\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1069\" data-original=\"https://pic4.zhimg.com/v2-7b9e13c7532b6f93ac34b9291d0ca423_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7b9e13c7532b6f93ac34b9291d0ca423_b.png\"/></figure>那么谁说的对呢？P3 的 Kunal 老师告诉我们，不要相信别人，自己去查询技术文档。</p><p>最保险的是去看<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTML/Element/li\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">技术文档</a>（如果不知道去哪个网站查看技术文档，可以搜索“li html 文档”，将你需要的语言的技术文档页面收藏起来，你会频繁用到：<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Web 技术文档</a>——这里包括了HTML和CSS；<a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/2/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python 2.7.13 documentation</a>——这里是2.7版本的Python技术文档），在&lt;li&gt;标签技术文档的第一段就可以看到：</p><br/><p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-963a8cfb04fa352685cc8e6fec65e90e_b.png\" data-rawwidth=\"856\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb\" width=\"856\" data-original=\"https://pic3.zhimg.com/v2-963a8cfb04fa352685cc8e6fec65e90e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;856&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"856\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"856\" data-original=\"https://pic3.zhimg.com/v2-963a8cfb04fa352685cc8e6fec65e90e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-963a8cfb04fa352685cc8e6fec65e90e_b.png\"/></figure>我们知道了该同学用错了父标签。</p><p>我最开始做P1的时候还不知道这个标签，是用这样的方式写笔记知识点的：“● 某个知识点加&lt;br&gt;来换行”。我知道这样的方式比较笨，如果当时聪明一点，可以去搜索“html 列表标签”。但是作为一个菜鸟，有时你真的不知道怎样去搜索。然而当你知道有这样的方法——&lt;li&gt;标签，却不知道为什么用错了的时候，是不是应该去搜索一下它的用法呢？</p><p>养成遇到问题先搜索一下的习惯，之后的课程中，很多老师也会提到这一点（在【记不住也没关系】这一小节中提到，记不住这么多标签也没关系，只需要在用到的时候搜索就可以了；P3的课程视频中，老师在教学的过程中，就是使用搜索的办法寻找解决方案的；同样的方法，也出现在数据分析入门这个可选项目的教学视频中）。</p><h2>2.错误信息搜索</h2><p>遇到报错，直接搜索错误信息，一般就可以找到答案。</p><h2>3.复杂的搜索</h2>一下子搜不到怎么办？小窍门：变换近义词、添加更多关键词作为限定条件、搜索英文结果等。百度搜不到换谷歌，谷歌搜不到换专有资源网站。（比如我们做游戏找参考图，如果百度搜不到合适的，会去花瓣网这样的专业图片网站搜索。对编程学习来说，可以去 stackoverflow 搜索，一般初学者遇到的问题在这里都可以找到答案。）<br/><h2>4.有用的网站分享：</h2><p><a href=\"https://www.zhihu.com/question/20161362\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/2016</span><span class=\"invisible\">1362</span><span class=\"ellipsis\"></span></a>如何用好搜索引擎？ - 知乎：<a href=\"https://www.zhihu.com/question/20161362\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/2016</span><span class=\"invisible\">1362</span><span class=\"ellipsis\"></span></a><br/></p><br/><p><a href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">stackoverflow.com/quest</span><span class=\"invisible\">ions</span><span class=\"ellipsis\"></span></a>国外的编程问题网站stackoverflow：<a href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">stackoverflow.com/quest</span><span class=\"invisible\">ions</span><span class=\"ellipsis\"></span></a></p><br/><p>前端工程师纳米学位样式指南：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/udacity/frontend-nanodegree-styleguide-zh/blob/master/%25E5%2589%258D%25E7%25AB%25AF%25E5%25B7%25A5%25E7%25A8%258B%25E5%25B8%2588%25E7%25BA%25B3%25E7%25B1%25B3%25E5%25AD%25A6%25E4%25BD%258D%25E6%25A0%25B7%25E5%25BC%258F%25E6%258C%2587%25E5%258D%2597%2520-%2520CSS.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">udacity/frontend-nanodegree-styleguide-zh</a><br/></p><p>W3School：<a href=\"https://link.zhihu.com/?target=https%3A//www.w3schools.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">w3schools.com/</span><span class=\"invisible\"></span></a><br/></p><p>菜鸟教程 <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/python/python-tutorial.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">runoob.com/python/pytho</span><span class=\"invisible\">n-tutorial.html</span><span class=\"ellipsis\"></span></a><br/></p><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">developer.mozilla.org/z</span><span class=\"invisible\">h-CN/docs/Web</span><span class=\"ellipsis\"></span></a>Web 技术文档： <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">developer.mozilla.org/z</span><span class=\"invisible\">h-CN/docs/Web</span><span class=\"ellipsis\"></span></a> <br/></p><p>Python2 技术文档：<a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/2/index.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.python.org/2/index</span><span class=\"invisible\">.html</span><span class=\"ellipsis\"></span></a></p><p>Python3 技术文档：<a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/3/index.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.python.org/3/index</span><span class=\"invisible\">.html</span><span class=\"ellipsis\"></span></a></p><br/><p><a href=\"https://link.zhihu.com/?target=https%3A//google.github.io/styleguide/pyguide.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">google.github.io/styleg</span><span class=\"invisible\">uide/pyguide.html</span><span class=\"ellipsis\"></span></a>Google 代码风格指南（英文）：<a href=\"https://link.zhihu.com/?target=https%3A//google.github.io/styleguide/pyguide.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">google.github.io/styleg</span><span class=\"invisible\">uide/pyguide.html</span><span class=\"ellipsis\"></span></a><br/></p><p>Google 代码风格指南（中文）：<a href=\"https://link.zhihu.com/?target=http%3A//zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">zh-google-styleguide.readthedocs.io</span><span class=\"invisible\">/en/latest/google-python-styleguide/contents/</span><span class=\"ellipsis\"></span></a><br/></p><p>美化HTML代码格式：<a href=\"https://link.zhihu.com/?target=http%3A//htmlformatter.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">htmlformatter.com/</span><span class=\"invisible\"></span></a><br/></p><p>检查代码错误：</p><a href=\"https://link.zhihu.com/?target=http%3A//countwordsfree.com/js-formatter\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Javascript Formatter and Beautifier</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//countwordsfree.com/css-formatter\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Css Formatter and Beautifier</a><br/><a href=\"https://link.zhihu.com/?target=https%3A//validator.w3.org/nu/%23textarea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ready to check - Nu Html Checker</a><br/><br/><br/><h2>5.英文如何提升</h2><p>看英文字幕，看英文文档，试着自己翻译。看懂了英文后，再自己组织语言文字表达出来，这样的理解才是最深刻的。你可能说，我一直英语就不好怎么办？借助 Google 翻译啊！现在Google 翻译的机器翻译已经达到很高的水平了。我做字幕组组长都是靠 Google 翻译（捂脸）。</p><p>具体提升渠道如下：</p><br/><p>渠道1：Udacity 字幕组</p><p>渠道2：为开源社区做贡献</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-8736fd08380ea0e807694f85c9f2f8cd_b.png\" data-rawwidth=\"902\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https://pic2.zhimg.com/v2-8736fd08380ea0e807694f85c9f2f8cd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;902&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"902\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"902\" data-original=\"https://pic2.zhimg.com/v2-8736fd08380ea0e807694f85c9f2f8cd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8736fd08380ea0e807694f85c9f2f8cd_b.png\"/></figure><p>渠道3：尝试翻译英文技术文章（以下是我目前想翻译的一篇文章，关于棒球数据分析的）<br/><a href=\"https://link.zhihu.com/?target=http%3A//adilmoujahid.com/posts/2014/07/baseball-analytics/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Baseball Analytics: An Introduction to Sabermetrics using Python</a><br/></p><br/><p>要培养习惯是不容易的，有些问题自己搜索肯定没有直接问老师快，看英文肯定没有看中文快，这样可能会在一开始放慢你的学习速度，但是也比囫囵把似是而非的理解吞下肚要好太多了。入门时养成好的习惯，才是最有价值的！</p>", 
            "topic": [
                {
                    "tag": "编程入门指南", 
                    "tagLink": "https://api.zhihu.com/topics/20015713"
                }, 
                {
                    "tag": "优达学城（Udacity）", 
                    "tagLink": "https://api.zhihu.com/topics/19696060"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/26474162", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 6, 
            "title": "Udacity 学习小结", 
            "content": "<h2>初识<br/></h2><p>2016年10月份，在即刻看到文章——阮一峰的网络日记<a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2016/10/online_education.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《网络文凭，你要不要》</a>是我第一次知道 Udacity。很多大公司都认可的学位证书还是很有吸引力的，也刷新了我对线上教育的认知。于是就去探索了一下优达学城网站，从此一发不可收拾！</p><h2>免费课程</h2><a href=\"https://link.zhihu.com/?target=https%3A//cn.udacity.com/course/intro-to-computer-science--cs101\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机科学导论（CS101）</a>是我在 Udacity 加入的第一门课程，应该也是 Udacity 比较前期开发的课程之一。计算机科学导论，顾名思义，就是对计算机科学的一项入门级课程。讲师 Dave 通过一个贯穿全课程的主题：制作自己的搜索引擎，使用 Python2 编程语言，讲解了很多计算机科学知识。你可以在这门课程中了解到计算机的各种原理，计算机科学的过去、现在和未来。<p>因为自己并不单纯的目的（很多纳米学位有要求 Python 编程基础作为先修条件，据说学完 CS101 就达到要求），也为了便于自己认知，我将这门课程理解为，在学习 Python 的同时，学到计算机科学的知识。最有意思的地方，每次当我很单纯地以为我在学 Python 编程的时候，然后就会发现老师其实只是利用了 Python 作为一种工具，讲解某个计算机科学中的概念或原理。</p><p>其实上面的这种思考方式才是最大的收获，编程语言只是你的工具，你真正要 focus 的是你最终想要实现的是什么。Udacity 的教学理念也是如此，它不会按部就班的给你讲解某种语言，从语法到结构到算法，几乎都是根据实际应用来教学的。</p><h2>纳米学位</h2><p>第一个报名的是<a href=\"https://link.zhihu.com/?target=http%3A//cn.udacity.com/dand/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据分析纳米学位</a>，结果现在还没毕。当时还没有区分入门和进阶，所以项目比较多（找个借口(*/ω＼*)）。这里有个深刻的经验教训，就是一定不要中断学习很长时间，哪怕每天学习10分钟。我就是在过年期间中断了学习，刚好也卡在一个项目上，结果就捡不起来了。当时学到数据分析入门的课程，选择了棒球数据集来做数据分析，由于对棒球规则不熟悉，对 Python 也不熟悉（当时还没学完 CS101），最后还是决定先学一下<a href=\"https://link.zhihu.com/?target=https%3A//cn.udacity.com/course/intro-to-programming-nanodegree--nd000-cn-basic\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">编程入门基石纳米学位</a>再回来！</p><p>好消息是，我已经从编程入门毕业啦！毕业项目正是做的棒球数据分析，过两天整理一下分享出来！（立?）</p><br/><figure><noscript><img src=\"https://pic1.zhimg.com/v2-085e65cc892964fb17ce2c94b0f4c590_b.png\" data-rawwidth=\"996\" data-rawheight=\"660\" class=\"origin_image zh-lightbox-thumb\" width=\"996\" data-original=\"https://pic1.zhimg.com/v2-085e65cc892964fb17ce2c94b0f4c590_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;996&#39; height=&#39;660&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"996\" data-rawheight=\"660\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"996\" data-original=\"https://pic1.zhimg.com/v2-085e65cc892964fb17ce2c94b0f4c590_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-085e65cc892964fb17ce2c94b0f4c590_b.png\"/></figure><br/><p>编程入门是新改版的纳米学位，Udacity 也在做很多尝试，强调学习社群的作用。我也是 Udacity 的深度用户了。。一开始就报名加入了优等生互助班，要面试，还有很正式的开班仪式。在互助班有导师 Frankie 指导，可以隔周预约一次导师一对一，隔周有导师直播讲解课程疑难，还有一个月一次知乎分享学习经验总结。我觉得这些都很棒，开学仪式，自我介绍，导师一对一，直播答疑，知乎分享，我都参与也做到了，真的帮助很大，如果你也在优等生互助班，希望你可以珍惜这些资源，这些才是最有价值的。</p><p>后来又有通关群的概念，这个就更松散一点，相同进度的同学都在同一个通关群，有什么问题都可以互相帮助和解答。通关群有完全由同学组成的互助小班，班长是同学去报名竞选的，这个小班，我自己感受是大家的关系更贴近，因为都是同一期学员，问问题也不怕问错。我当时就是报名了班长，当时的竞选目标是全班毕业，目前毕业两枚，也是不容易，哈哈。。因为做班长的时候比较打鸡血，很喜欢帮助人，所以毕业后就被任命做了通关群 Mentor（相当于助教的概念）。做 Mentor 又是另一番经历啦！会另外分享一篇的！（立?）</p><p>其实学完编程入门，<b>真的只是刚刚进入</b>编程学习的门槛，Udacity 讲解的不是系统化的编程知识，通过这个入门课程，<b>学会如何学习编程</b>，才是最重要的。在学完编程入门的课程后，我又在 Sololearn 上自学了 Python 3 的教程，比较基础，但是覆盖面挺全的，推荐 ?</p><h2>感想</h2><p>很多人都说，离开校园，就很难再静下心学习。我之前也一直很认同这个观念，也尝试过自学编程从入门到放弃。但是在 Udacity 学习的半年多时间，让我重新爱上了学习这件事。每天的日常，从看小说、玩游戏，变成了看教程、做翻译和刷题。幸运的是，这个过程是<b>快乐且</b><b>自发的</b>。Udacity 想要用<b>教育改变世界</b>，我得承认，我的世界已经被改变了。</p><p>Keep Learning and Stay Udacious!</p>", 
            "topic": [
                {
                    "tag": "优达学城（Udacity）", 
                    "tagLink": "https://api.zhihu.com/topics/19696060"
                }, 
                {
                    "tag": "编程入门", 
                    "tagLink": "https://api.zhihu.com/topics/19612231"
                }, 
                {
                    "tag": "线上教育", 
                    "tagLink": "https://api.zhihu.com/topics/19866299"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27650167", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 6, 
            "title": "棒球数据分析", 
            "content": "<h2>阅读说明</h2><ul><li>此报告是优达学城数据分析师纳米学位-数据分析入门项目</li><li>使用 Jupyter Notebook，Python 2.7 版本</li><li>对棒球的理解还很肤浅，分析仅供学习数据分析过程</li><li>棒球数据集：<a href=\"https://link.zhihu.com/?target=http%3A//www.seanlahman.com/baseball-archive/statistics/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Lahman’s Baseball Database</a></li><li>标题棒球图片出处：<a href=\"https://link.zhihu.com/?target=http%3A//profilerehab.com/theme/facebook/baseball_in_grass_cover_2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Baseball in Grass Facebook Cover</a></li></ul><h2>初步了解数据集</h2><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E9%9B%86\"></a><p>MLB棒球数据集，内容包含了各个层面，包括从 1871 年到 2014 年完整的棒球赛击球和投球数据，还包括防守数据、排名、球队数据、管理记录、季后赛数据等等。由于棒球运动在中国并不是很流行，所以很多学生对棒球运动几乎一无所知，我也是这样，但是通过搜索了解，还是可以获得一些粗浅的棒球知识，可以从中找到自己想要分析的问题。</p><p><b>数据简介</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E6%95%B0%E6%8D%AE%E7%AE%80%E4%BB%8B\"></a><ol><li>BMI指数（即身体质量指数，简称体质指数又称体重，英文为Body Mass Index，简称BMI），是用体重公斤数除以身高米数平方得出的数字，是目前国际上常用的衡量人体胖瘦程度以及是否健康的一个标准。但是对于运动员来说，肥胖标准代表的可能是强壮。BMI = weight(kg)/height(m)**2</li><li>服役年限：career_years = yearID - debut.dt.year</li><li>IsoP：纯长打率（英文：Isolated Power）纯长打率可用来评断一位打者的长打能力。纯长打率 = 长打率 - 打击率。其中打击率是棒球运动中，评量打者（击球员）成绩的重要指标。长打率为一般衡量长打能力的数字。字面上的解释应该是“出现长打的概率”，但事实上，更深层的意义是“每一次打击可以贡献几个垒包”。纯长打率计算公式如下：<figure><noscript><img src=\"https://pic2.zhimg.com/v2-b7ec04720eec5c13e38b20669b80d891_b.png\" data-rawwidth=\"696\" data-rawheight=\"97\" class=\"origin_image zh-lightbox-thumb\" width=\"696\" data-original=\"https://pic2.zhimg.com/v2-b7ec04720eec5c13e38b20669b80d891_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;696&#39; height=&#39;97&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"696\" data-rawheight=\"97\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"696\" data-original=\"https://pic2.zhimg.com/v2-b7ec04720eec5c13e38b20669b80d891_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b7ec04720eec5c13e38b20669b80d891_b.png\"/></figure></li></ol><p><b>检查公式所需数据</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E6%A3%80%E6%9F%A5%E5%85%AC%E5%BC%8F%E6%89%80%E9%9C%80%E6%95%B0%E6%8D%AE\"></a><p>通过检查，发现缺少一个数据：1B —— 一垒安打，查询<a href=\"https://link.zhihu.com/?target=http%3A//www.wikihow.com/Calculate-Slugging-Percentage\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何计算长打率</a>得到长打率替代公式：<strong>SLG = (H + 2B + (2 x 3B) + (3 x HR))/AB</strong></p><p>即 <strong>IsoP = (H + 2B + (2 x 3B) + (3 x HR))/AB - H/AB</strong></p><h3>提出问题<a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E6%8F%90%E5%87%BA%E9%97%AE%E9%A2%98\"></a></h3><ol><li>出生月份是否与成为明星球员有相关性？（受到冰球运动员的数据启发）</li><li>身体条件（BMI标准体重）与纯长打率（衡量长打能力的指标）的相关性</li><li>服役年限与当年纯长打率的相关性</li></ol><h3>问题预测</h3><ol><li>没有明显猜测，只是单纯好奇，很大可能不相关</li><li>猜测 BMI 值处于标准和偏胖的人（猜测这个范围内的人有更强的力量）有更好的长打能力体现</li><li>对于运动员来说，通常在服役年限前期，应该是能力的上升期，而在服役年限的后期，应该是能力的下降区域。</li></ol><h2>熟悉数据集：</h2><p><b>导入数据表</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E8%A1%A8\"></a><ul><li>导入库</li></ul><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span> \n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"kn\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">seaborn</span> <span class=\"kn\">as</span> <span class=\"nn\">sns</span></code></pre></div><ul><li>从CSV文件中导入数据</li></ul><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">beating_df</span>  <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&#34;Batting.csv&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">players_df</span>  <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&#34;Master.csv&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">awards_players_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&#34;AwardsPlayers.csv&#34;</span><span class=\"p\">)</span>\n</code></pre></div><p><b>熟悉数据</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E7%86%9F%E6%82%89%E6%95%B0%E6%8D%AE\"></a><p>使用 info 查看数据信息，我们发现需要的数据项有：</p><p><b>beating_df</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#beating_df\"></a><ul><li>playerID —— 球员ID</li><li>yearID —— 当年年份</li><li>stint —— 球员在同一赛季的服役顺序</li><li>G —— 比赛场数（Games）</li><li>AB —— 打数（At Bats）打者完成一次打击，且这次打击并非是成功的牺牲触击、保送、高飞牺牲打的次数</li><li>R —— 得分（Runs）合法及安全回到本垒的次数</li><li>H —— 安打（Hits）在没有失误的情况下，打者把投手投出来的球，击出到界内，使打者本身能至少安全上到一垒</li><li>2B —— 二垒（Doubles）能使打者在没有守备失误的情况下，安全到达二垒的打击</li><li>3B —— 三垒（Triples）能使打者在没有守备失误的情况下，安全到达三垒的打击</li><li>HR —— 本垒打（Homeruns）在没有失误的情况下，跑者一次跑完四个垒包</li></ul><p><b>players_df</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#players_df\"></a><ul><li>playerID —— 球员ID</li><li>birthYear —— 出生年</li><li>birthMonth —— 出生月</li><li>birthDay —— 出生日</li><li>weight —— 体重（单位：磅 pound）</li><li>height —— 身高（单位：英寸 inch）</li><li>debut —— 在大联盟的首次出场日期</li><li>finalGame —— 在大联盟的最后一场比赛日期（如果仍在活跃则为空）</li></ul><p><b>awards_players_df</b></p><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#awards_players_df\"></a><ul><li>playerID —— 球员ID</li><li>awardID —— 奖项ID</li><li>yearID —— 年份</li></ul><br/><h2>数据整理</h2><a class=\"\" href=\"file:///D:/download/Baseball_Data_Analysis.html#%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86\"></a><p>现在我们需要的数据都有了，那么根据我们提出的问题，将数据进行处理：</p><br/><br/><p><b>问题 1 相关数据</b></p><br/><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#合并获奖球员信息和球员信息，获取每个球员的出生月份</span>\n<span class=\"n\">award_process</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">awards_players_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;awardID&#39;</span><span class=\"p\">]],</span> <span class=\"n\">players_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;birthMonth&#39;</span><span class=\"p\">]],</span> \n                         <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">],</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#填充缺失值为 0</span>\n<span class=\"n\">players_type</span> <span class=\"o\">=</span> <span class=\"n\">award_process</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">({</span><span class=\"s1\">&#39;birthMonth&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">})</span>\n\n<span class=\"c1\">#取出出生月份不等于 0 的数据，根据出生月份将数据分组，计数</span>\n<span class=\"n\">players_type</span> <span class=\"o\">=</span> <span class=\"n\">players_type</span><span class=\"p\">[</span><span class=\"n\">players_type</span><span class=\"p\">[</span><span class=\"s1\">&#39;birthMonth&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">players_grouped</span> <span class=\"o\">=</span> <span class=\"n\">players_type</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;birthMonth&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">([</span><span class=\"s1\">&#39;count&#39;</span><span class=\"p\">])</span>\n</code></pre></div><p><b>问题2相关数据</b></p><a class=\"\" href=\"file:///C:/Users/ivyle/Documents/GitHub/Baseball_Data_Analysis/Baseball_Data_Analysis.html#%E9%97%AE%E9%A2%982%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE\"></a><p>公式：</p><ul><li>IsoP = (H + 2B + (2 x 3B) + (3 x HR))/AB - H/AB</li><li>BMI = weight(kg)/(height(m)/*height(m))</li></ul><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#累加每个球员的所有能力指标数据备用</span>\n<span class=\"n\">beating_select</span> <span class=\"o\">=</span> <span class=\"n\">beating_df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;2B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;3B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;HR&#39;</span><span class=\"p\">]]</span>\n<span class=\"n\">beating_grouped</span> <span class=\"o\">=</span> <span class=\"n\">beating_select</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">],</span> <span class=\"n\">as_index</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nb\">sum</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#AB打数太少，计算纯长打率的价值不大，截取AB大于100的数据进行研究</span>\n<span class=\"n\">beating_grouped</span> <span class=\"o\">=</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#按公式进行向量计算，求IsoP</span>\n<span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s2\">&#34;IsoP&#34;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;2B&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;3B&#39;</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;HR&#39;</span><span class=\"p\">]))</span> <span class=\"o\">/</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">]</span> \n\n<span class=\"c1\">#截取IsoP大于0的数据进行分析并查看各项描述统计学数据</span>\n<span class=\"n\">beating_grouped</span> <span class=\"o\">=</span> <span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"n\">beating_grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#选择球员数据中的身高和体重，填充空值为0</span>\n<span class=\"n\">players_select</span> <span class=\"o\">=</span> <span class=\"n\">players_df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#选择身高和体重数据大于0的球员，转换身高和体重的单位</span>\n<span class=\"n\">players_select</span> <span class=\"o\">=</span> <span class=\"n\">players_select</span><span class=\"p\">[(</span><span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight_kg&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mf\">0.4535924</span>\n<span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;height_m&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mf\">0.0254</span>\n<span class=\"k\">del</span> <span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span>\n<span class=\"k\">del</span> <span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#按照公式求 BMI</span>\n<span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight_kg&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;height_m&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;height_m&#39;</span><span class=\"p\">])</span>\n\n<span class=\"c1\">#BMI值直方图分布</span>\n<span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">distplot</span><span class=\"p\">(</span><span class=\"n\">players_select</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">])</span>\n</code></pre></div><figure><noscript><img src=\"https://pic2.zhimg.com/v2-8b4c0f54e9f60db562b3e8542a0208d1_b.png\" data-rawwidth=\"597\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic2.zhimg.com/v2-8b4c0f54e9f60db562b3e8542a0208d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;597&#39; height=&#39;428&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"597\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic2.zhimg.com/v2-8b4c0f54e9f60db562b3e8542a0208d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8b4c0f54e9f60db562b3e8542a0208d1_b.png\"/></figure><p>根据以上分布情况，发现球员基本上处于20-35的区间内，这也是有道理的，因为运动员需要有基本的身体素质，所以可以只在标准、超重和肥胖的范围内分析。<br/></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#合并以上两个处理后的数据集，选取需要的数据项</span>\n<span class=\"n\">beating_players_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">beating_grouped</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">]],</span> <span class=\"n\">players_select</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">]],</span> \n                              <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">],</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;inner&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 按照(18.5,23],(23,25],(25,27],(27,30],(30,40]分类，对应名称&#39;Normal_1&#39;,&#39;Normal_2&#39;,&#39;Overweight_1&#39;,&#39;Overweight_2&#39;,&#39;Obese&#39;</span>\n<span class=\"c1\"># 对应标准1、标准2、超重1、超重2、肥胖（对于运动员来说应该是强壮，以下用强壮代指Obese阶段）</span>\n<span class=\"n\">bmi_array</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">18.5</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"mi\">27</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"n\">bmi_level</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Normal_1&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Normal_2&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Overweight_1&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Overweight_2&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Obese&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI_level&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"p\">,</span><span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">bmi_level</span><span class=\"p\">)</span>\n</code></pre></div><p>通过 <a href=\"https://link.zhihu.com/?target=http%3A//beating_players_df.info%28%29\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">beating_players_df.info()</span><span class=\"invisible\"></span></a> 我们看到 BMI_level 只有 2 项缺失值，说明只有 2 个数据没有被我们的分组包含在内，这是可以接受的。我们可以将缺失值的数据项去掉。<br/></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#滤除缺失数据</span>\n<span class=\"n\">beating_players_df</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>\n</code></pre></div><p><b>问题3相关数据</b></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#问题3中涉及到日期格式，需要转换</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dateutil.parser</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse_date</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">):</span>\n    <span class=\"s1\">&#39;&#39;&#39;该函数接收一个数据，如果其为字符串格式，则转换为日期格式并返回&#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">StringType</span><span class=\"p\">:</span>\n        <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">date</span></code></pre></div><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#选出问题3需要的数据项</span>\n<span class=\"n\">players_select2</span> <span class=\"o\">=</span> <span class=\"n\">players_df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;debut&#39;</span><span class=\"p\">]]</span>\n<span class=\"n\">beating_select2</span> <span class=\"o\">=</span> <span class=\"n\">beating_df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;yearID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;2B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;3B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;HR&#39;</span><span class=\"p\">]]</span>\n\n<span class=\"c1\">#按每个队员每年来分组，计算各项指标和（因为球员每年也有可能不只在一个球队）</span>\n<span class=\"n\">beating_grouped2</span> <span class=\"o\">=</span> <span class=\"n\">beating_select2</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;yearID&#39;</span><span class=\"p\">],</span> <span class=\"n\">as_index</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nb\">sum</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#选出打数AB超过50的球员进行分析（太少没有参考价值，可能不是专职击球员）</span>\n<span class=\"n\">beating_grouped2</span> <span class=\"o\">=</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#按照公式计算每年的IsoP，选择1995年之后的数据进行研究（1995年后是新赛制规则，避免因为赛制规则产生的变化）</span>\n<span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;2B&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;3B&#39;</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;HR&#39;</span><span class=\"p\">]))</span> <span class=\"o\">/</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;AB&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">beating_grouped2</span> <span class=\"o\">=</span> <span class=\"n\">beating_grouped2</span><span class=\"p\">[(</span><span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">beating_grouped2</span><span class=\"p\">[</span><span class=\"s1\">&#39;yearID&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1995</span><span class=\"p\">)]</span>\n\n<span class=\"c1\">#合并球员服役数据和球员每年的IsoP指标数据</span>\n<span class=\"n\">beating_players_year</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">beating_grouped2</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;yearID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">]],</span> <span class=\"n\">players_select2</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;debut&#39;</span><span class=\"p\">]],</span> \n                              <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">],</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;inner&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#用我们之前定义的 parse_date 函数将 debut 转换为日期格式</span>\n<span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;debut&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;debut&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"n\">parse_date</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#用当前yearID减去首次出场（debut）的年份，得出服役年限</span>\n<span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;yearID&#39;</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;debut&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">year</span>\n<span class=\"k\">del</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;yearID&#39;</span><span class=\"p\">]</span>\n<span class=\"k\">del</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;debut&#39;</span><span class=\"p\">]</span></code></pre></div><h3>数据分析<a class=\"\" href=\"file:///C:/Users/ivyle/Documents/GitHub/Baseball_Data_Analysis/Baseball_Data_Analysis.html#%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90\"></a></h3><p><b>问题1 分析</b></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#所有球员的生日月份分布，绿色线是每个出生月份的球员平均值</span>\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">players_grouped</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axhline</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#23e342&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span></code></pre></div><p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-3372e16fc382486aa9b4956b92b4c38c_b.png\" data-rawwidth=\"611\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"611\" data-original=\"https://pic1.zhimg.com/v2-3372e16fc382486aa9b4956b92b4c38c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;611&#39; height=&#39;414&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"611\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"611\" data-original=\"https://pic1.zhimg.com/v2-3372e16fc382486aa9b4956b92b4c38c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3372e16fc382486aa9b4956b92b4c38c_b.png\"/></figure>整体球员的分布，相对比较均匀。下面查看一下获奖球员的分布<br/></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#获奖球员的生日月份分布，绿色线是每个出生月份的获奖球员平均值</span>\n<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">players_grouped</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;awardID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axhline</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;awardID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#23e342&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span></code></pre></div><figure><noscript><img src=\"https://pic1.zhimg.com/v2-55f6abf51157c7d1ed70cad51fdf481c_b.png\" data-rawwidth=\"598\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"598\" data-original=\"https://pic1.zhimg.com/v2-55f6abf51157c7d1ed70cad51fdf481c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;598&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"598\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"598\" data-original=\"https://pic1.zhimg.com/v2-55f6abf51157c7d1ed70cad51fdf481c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-55f6abf51157c7d1ed70cad51fdf481c_b.png\"/></figure><p>获奖球员中看到，1、6、7月较为偏低，而4、5、11月则较为偏高，因为每个月份的球员总数不同，我们可以查看一下每个出生月份，获奖球员占总体球员的比例：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#每个出生月，获奖球员占总球员比例分布，绿色线为获奖球员占全体球员的比例</span>\n<span class=\"p\">(</span><span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;awardID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)]</span><span class=\"o\">/</span><span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)])</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axhline</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;awardID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"nb\">sum</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mf\">1.0</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">players_grouped</span><span class=\"p\">[(</span><span class=\"s1\">&#39;playerID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"nb\">sum</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#23e342&#39;</span><span class=\"p\">)</span></code></pre></div><figure><noscript><img src=\"https://pic1.zhimg.com/v2-6ffc41e9ed4611c10acc6a7f5d1d9000_b.png\" data-rawwidth=\"610\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic1.zhimg.com/v2-6ffc41e9ed4611c10acc6a7f5d1d9000_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;610&#39; height=&#39;449&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"610\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"610\" data-original=\"https://pic1.zhimg.com/v2-6ffc41e9ed4611c10acc6a7f5d1d9000_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6ffc41e9ed4611c10acc6a7f5d1d9000_b.png\"/></figure><p><b>问题1 结论</b></p><p>通过以上可视化可以看出，1月份的获奖球员占比最低，而4、5、11月的占比突出得高，这跟我们一开始的猜测不太相符，我们猜测应该是相对均匀的分布。那么有什么原因导致该现象？通过查询相关的资料，棒球球员在年龄较小的时候，都是在自己的学校球队接受棒球的训练，而没有像冰球运动员那样有个固定的选拔，最终没有找到确切的原因，很遗憾。</p><p><b>问题2 分析</b></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\"># 直接通过点状图查看 BMI 值和 IsoP 值的相关性</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">],</span> <span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">])</span></code></pre></div><figure><noscript><img src=\"https://pic1.zhimg.com/v2-edfc1fc29df2e1b2d3bec82df8ad2114_b.png\" data-rawwidth=\"607\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb\" width=\"607\" data-original=\"https://pic1.zhimg.com/v2-edfc1fc29df2e1b2d3bec82df8ad2114_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;607&#39; height=&#39;416&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"607\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"607\" data-original=\"https://pic1.zhimg.com/v2-edfc1fc29df2e1b2d3bec82df8ad2114_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-edfc1fc29df2e1b2d3bec82df8ad2114_b.png\"/></figure><p>通过点状图看不出什么明显的相关性，我们查看一下BMI值分组后的信息，以下图表分别是：</p><ul><li>每个BMI_level的IsoP的均值分布</li><li>每个BMI_level的IsoP的箱线图比较</li></ul><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">barplot</span><span class=\"p\">(</span><span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI_level&#39;</span><span class=\"p\">],</span> <span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">],</span> <span class=\"n\">palette</span><span class=\"o\">=</span><span class=\"s2\">&#34;Blues_d&#34;</span><span class=\"p\">)</span></code></pre></div><figure><noscript><img src=\"https://pic4.zhimg.com/v2-48a93f30f5a6e899934963d9fd14b843_b.png\" data-rawwidth=\"626\" data-rawheight=\"444\" class=\"origin_image zh-lightbox-thumb\" width=\"626\" data-original=\"https://pic4.zhimg.com/v2-48a93f30f5a6e899934963d9fd14b843_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;626&#39; height=&#39;444&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"626\" data-rawheight=\"444\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"626\" data-original=\"https://pic4.zhimg.com/v2-48a93f30f5a6e899934963d9fd14b843_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-48a93f30f5a6e899934963d9fd14b843_b.png\"/></figure><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">boxplot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">&#34;BMI_level&#34;</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s2\">&#34;IsoP&#34;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">beating_players_df</span><span class=\"p\">,</span> <span class=\"n\">palette</span><span class=\"o\">=</span><span class=\"s2\">&#34;Blues_d&#34;</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span></code></pre></div><figure><noscript><img src=\"https://pic1.zhimg.com/v2-5cf90e30d401ed5e7a7281ae0b332a8c_b.png\" data-rawwidth=\"659\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"659\" data-original=\"https://pic1.zhimg.com/v2-5cf90e30d401ed5e7a7281ae0b332a8c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;659&#39; height=&#39;433&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"659\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"659\" data-original=\"https://pic1.zhimg.com/v2-5cf90e30d401ed5e7a7281ae0b332a8c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5cf90e30d401ed5e7a7281ae0b332a8c_b.png\"/></figure><p>以上两个可视化图表都表现出了较为明显的正相关趋势，我们可以计算查看一下各项统计学信息：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#按照BMI值的分组标准，计算每个分组内的各项统计学数据</span>\n<span class=\"n\">isop_bmi_togroup</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;BMI_level&#39;</span><span class=\"p\">]]</span>\n<span class=\"n\">functions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;count&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;median&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;max&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;min&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">isop_bmi_grouped</span> <span class=\"o\">=</span> <span class=\"n\">isop_bmi_togroup</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;BMI_level&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">functions</span><span class=\"p\">)</span>\n<span class=\"n\">isop_bmi_grouped</span></code></pre></div><figure><noscript><img src=\"https://pic3.zhimg.com/v2-b94fad9b925f1260bdc15ed075c3a53e_b.png\" data-rawwidth=\"530\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic3.zhimg.com/v2-b94fad9b925f1260bdc15ed075c3a53e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"530\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic3.zhimg.com/v2-b94fad9b925f1260bdc15ed075c3a53e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b94fad9b925f1260bdc15ed075c3a53e_b.png\"/></figure><p>按照以上信息，强壮等级的数量较少，其他几个阶段的样本量还是比较多的，比较有参考价值。根据图表可以看出一个正相关的趋势，我们可以用相关系数来证明一下这个结论是否合理：<br/></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">corrcoef</span><span class=\"p\">(</span><span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;BMI&#39;</span><span class=\"p\">],</span> <span class=\"n\">beating_players_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">])</span></code></pre></div><p>输出为：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.</span>        <span class=\"p\">,</span>  <span class=\"mf\">0.29846092</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">0.29846092</span><span class=\"p\">,</span>  <span class=\"mf\">1.</span>        <span class=\"p\">]])</span></code></pre></div><p><b>问题2 结论</b></p><p>通过整理数据并可视化分析，可以看出，各 BMI 阶段的 IsoP 均值分布和箱线图的分布趋势，都是随着BMI阶段的提升而提升的。BMI值和球员的长打能力确实有一定的正相关性。一开始的猜测为，标准和超重两个范围内会较强，这个有点想当然了，运动员基本上不会有极端的体形，本来就集中在标准和超重这两个范围内。而在这些范围内，BMI和IsoP呈现了一定的正相关。通过计算相关系数，得到了0.2985（保留了4位小数），在相关系数的范围判断上，小于0.3表示两者相关程度极弱，大于等于0.3且小于0.5为中度相关，而我们得到了一个近似0.3的结果，可以得出两者有较弱的正相关关系。即BMI值越高，运动员的纯长达能力就有（较小的）可能越强。</p><p><b>问题3 分析</b></p><p>服役年限越长，样本数量级越小，服役15年以上的基本上都很少了，数量级少的时候，纯长打率的分布比较分散，不太有参考价值。可以截取前15年的数据看一下分布情况。<br/></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#按照服役年数进行分组</span>\n<span class=\"n\">beating_players_year_count</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_year</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#截取服役0-15年的数据</span>\n<span class=\"n\">beating_players_year</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">]</span><span class=\"o\">&lt;=</span><span class=\"mi\">15</span><span class=\"p\">)]</span>\n\n<span class=\"c1\">#随着服役年限的递增，IsoP的均值分布</span>\n<span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">barplot</span><span class=\"p\">(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">],</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">],</span> <span class=\"n\">palette</span><span class=\"o\">=</span><span class=\"s2\">&#34;Blues_d&#34;</span><span class=\"p\">)</span></code></pre></div><figure><noscript><img src=\"https://pic1.zhimg.com/v2-7d0f61d3fb8f7692df23c0e6fb6c79fc_b.png\" data-rawwidth=\"620\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic1.zhimg.com/v2-7d0f61d3fb8f7692df23c0e6fb6c79fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"620\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic1.zhimg.com/v2-7d0f61d3fb8f7692df23c0e6fb6c79fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7d0f61d3fb8f7692df23c0e6fb6c79fc_b.png\"/></figure><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#随着服役年限的递增，IsoP的箱线图分布</span>\n<span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">boxplot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">&#34;career&#34;</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s2\">&#34;IsoP&#34;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">beating_players_year</span><span class=\"p\">,</span> <span class=\"n\">palette</span><span class=\"o\">=</span><span class=\"s2\">&#34;Blues_d&#34;</span><span class=\"p\">)</span></code></pre></div><figure><noscript><img src=\"https://pic2.zhimg.com/v2-ca1109f35ab2be5ce169e30b47d050f9_b.png\" data-rawwidth=\"633\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"633\" data-original=\"https://pic2.zhimg.com/v2-ca1109f35ab2be5ce169e30b47d050f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;633&#39; height=&#39;428&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"633\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"633\" data-original=\"https://pic2.zhimg.com/v2-ca1109f35ab2be5ce169e30b47d050f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ca1109f35ab2be5ce169e30b47d050f9_b.png\"/></figure><p>单纯看0-3年的数据情况，可以看到均值和中位数都是递增的，然而幅度很小。对于0-15年整体来看，每年纯长打率均值和箱线图分布，可以看出没有特别大的变化，并不能证明这个范围内有什么正相关或负相关。那么我们来计算一下相关系数看看：<br/></p><br/><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c1\">#整体的相关系数</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">corrcoef</span><span class=\"p\">(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">],</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">])</span></code></pre></div>输出：<br/><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.</span>        <span class=\"p\">,</span>  <span class=\"mf\">0.07576242</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">0.07576242</span><span class=\"p\">,</span>  <span class=\"mf\">1.</span>        <span class=\"p\">]])</span></code></pre></div><p>可以看到这个相关系数是非常小的，可以视为不相关，那么我们来看一下前4年的相关性：<br/></p><br/><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">beating_players_year</span> <span class=\"o\">=</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">]</span><span class=\"o\">&lt;=</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">corrcoef</span><span class=\"p\">(</span><span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;career&#39;</span><span class=\"p\">],</span> <span class=\"n\">beating_players_year</span><span class=\"p\">[</span><span class=\"s1\">&#39;IsoP&#39;</span><span class=\"p\">])</span></code></pre></div>输出：<br/><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.</span>        <span class=\"p\">,</span>  <span class=\"mf\">0.05446384</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">0.05446384</span><span class=\"p\">,</span>  <span class=\"mf\">1.</span>        <span class=\"p\">]])</span></code></pre></div><p>0-3年的相关系数甚至更小了，看来可视化图表上的微小上升趋势并不能说明它们具有相关性。</p><p><b>问题3结论</b></p><br/><a class=\"\" href=\"file:///C:/Users/ivyle/Documents/GitHub/Baseball_Data_Analysis/Baseball_Data_Analysis.html#%E9%97%AE%E9%A2%983%E7%BB%93%E8%AE%BA\"></a><p>通过可视化和相关系数的计算，虽然对于棒球运动来说，运动员的运动生涯已经比其他的运动项目的时间长，然而如果一个人在经历过自己的能力高峰之后，状态下滑太明显，可能就会选择退役，或者被球队所淘汰了。所以整体没有一个特别大的变化也是比较合理的。</p><br/><h2>总结<a class=\"\" href=\"file:///C:/Users/ivyle/Documents/GitHub/Baseball_Data_Analysis/Baseball_Data_Analysis.html#%E6%80%BB%E7%BB%93\"></a></h2><p><b>问题结论汇总</b></p><a class=\"\" href=\"file:///C:/Users/ivyle/Documents/GitHub/Baseball_Data_Analysis/Baseball_Data_Analysis.html#%E9%97%AE%E9%A2%98%E7%BB%93%E8%AE%BA%E6%B1%87%E6%80%BB\"></a><ol><li>出生月份是否与成为明星球员有相关性？提出问题只是因为冰球运动员的那个数据分析结论，猜测不相关，实际1月份确实分布较小，4、5、11月分布较多，具体原因未查明。</li><li>身体条件（BMI标准体重）与纯长打率（衡量长打能力的指标）的相关性？猜测处于标准和超重的人有更好的长打能力。事实是，大部分的球员都处于这两个范围内，而在将标准和超重分别分为两部分，再加上“肥胖”，一共5个范围分析后发现，BMI值越高的范围，纯长打率越可能高，长达能力越强。（均值，中位数，箱线图分布证明有相关性，相关系数证明相关性较小）</li><li>服役年限与当年纯长打率的相关性？猜测为服役前期上升，服役后期下降。然而整体来看没有特别大的差异，相关系数也特别小。对于运动员来说，如果后期能力下降太多，可能就会选择退役了，如果退役，就没有了数据体现。</li></ol><p><b>局限性和改进空间</b></p><ol><li>对棒球运动不是足够了解，很多相关知识只是通过搜素引擎来获取，不一定准确，对棒球运动更了解，才更能明白每个数据的真正内涵。这告诉了我们一个道理，对于数据分析师来说，数据分析是需要建立在具体业务之上的。不是所有的数据都可以直接拿来分析，需要对数据集有更深的了解，才能更深层次地挖掘数据中的秘密！</li><li>BMI值，对于运动员来说，超重和肥胖，其实代表了身体的脂肪和肌肉两种物质，在本次分析中，更多是看作“BMI值越大，运动员越强壮，肌肉越发达”。如果有真正的可以衡量运动员肌肉的数据，那么相关性可能会更大一点。PS：根据后来了解的棒球知识，纯长达率，不应该只看运动员的力量，还有他的速度，因为还需要跑垒。所以，一个球员BMI值越大，可能力量会很大，但是速度却有可能下降，这也是 BMI 值与纯长达率不那么相关的一个重要原因；</li><li>每年的纯长打率随着服役年限的变化，是否有相应的变化。这个问题研究的是整体数据，按照服役年限分组，有可能同一组中的球员是不同时代的球员，虽然有控制截取1995年以后的球员数据，然而影响纯长打率有很多其他因素没有得到控制，单纯只分析服役年限和当年的纯长打率，可参考性并不大。服役年限与运动员的能力的关系，受到其他方面的影响，比如首次参与比赛时的年龄，是否有伤病，打球位置的更换等等。如果想要证明运动员前期是状态提升期，后期是状态下降期，也不能只看纯长打率，应该是全面提升的，或者针对不同部位的球员，不同的能力有对应的提升和下降。要区分不同的场上位置，而且很多球员也会随着时间的推移改变自己的场上位置。比较复杂，对棒球数据还是需要进一步的了解才能解决这个问题了。</li></ol><br/><br/><h2>参考网站：</h2><a href=\"https://link.zhihu.com/?target=http%3A//terryex.pixnet.net/blog/post/36215363\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">轻松看懂棒球统计数据</a><a href=\"https://link.zhihu.com/?target=http%3A//terryex.pixnet.net/blog/post/36215363\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">terryex.pixnet.net/blog</span><span class=\"invisible\">/post/36215363</span><span class=\"ellipsis\"></span></a><a href=\"https://link.zhihu.com/?target=http%3A//terryex.pixnet.net/blog/post/36215363\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">打击数据篇</a><br/><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%25A3%2592%25E7%2590%2583%25E7%25B5%25B1%25E8%25A8%2588\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">棒球统计-维基百科</a><br/><a href=\"https://link.zhihu.com/?target=https%3A//movie.douban.com/subject/3023164/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《点球成金》豆瓣电影</a><br/><a href=\"https://link.zhihu.com/?target=https%3A//www.sportsv.net/articles/13549\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浅谈如何判别打击三围</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//twbsball.dils.tku.edu.tw/wiki/index.php/%25E6%2589%2593%25E6%2593%258A%25E4%25B8%2589%25E5%259C%258D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">打击三围-台湾棒球维基馆</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//www.wikihow.com/Calculate-Slugging-Percentage\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何计算长打率</a><br/><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25B4%2594%25E9%2595%25B7%25E6%2589%2593%25E7%258E%2587\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">纯长打率-维基百科</a><br/><br/><h2>参考书：</h2><ul><li>《利用Python进行数据分析》</li></ul>", 
            "topic": [
                {
                    "tag": "数据分析", 
                    "tagLink": "https://api.zhihu.com/topics/19559424"
                }, 
                {
                    "tag": "MLB", 
                    "tagLink": "https://api.zhihu.com/topics/19662179"
                }, 
                {
                    "tag": "优达学城（Udacity）", 
                    "tagLink": "https://api.zhihu.com/topics/19696060"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27637791", 
            "userName": "IvyLee", 
            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
            "upvote": 7, 
            "title": "字幕组", 
            "content": "<p>在 Udacity 做字幕翻译和校对的时间，几乎与真正学习课程的时间一样长。这也很神奇，因为我发现做翻译和校对，对理解课程的帮助特别大。Udacity 的课程都是以英文来开发的，虽然现在已经做了很多本地化的工作，然而当你真正做翻译的时候，才会深刻理解每一句话的意思，几乎每次做翻译或者校对都会对课程内容有新的认识。当然，这可能跟个人性格十分相关，个人特别喜欢校对各种东西，处女座强迫症路过\\(￣︶￣*\\))……</p><p>其实我英文并不是特别好，当时只是试一试，没想到门槛并不高！非常感谢本地化负责人，曹晨巍大大?！当时在学习<a href=\"https://link.zhihu.com/?target=https%3A//cn.udacity.com/course/intro-to-computer-science--cs101\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机科学导论（CS101）</a>，这个课程还没有人组织翻译，只是偶尔有些 Youtube 上的野生字幕菌贡献。我就在这样没有翻译经验的情况硬着头皮成了牵头组织者，成立了 CS101 字幕组。<br/></p><p>在CS101字幕组中，用到的项目管理工具是 Trello，作为组长需要将任务整理到卡片中，及时更新任务的状态。后来因为有很多野生字幕会被直接跳过不校对，又重新整理校对了一遍所有未认领的任务中的野生字幕。与普通组员一样，需要做的翻译任务，除了字幕文件，还有课程页面的文本。</p><p>在做字幕组的时候，从零学会了使用 Trello、Github 等团队协作工具，也是一份额外收获了！</p><br/><p><i>CS101 Trello 小组</i><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-2ecebed1e39dfb4b9634323f256ad93a_b.png\" data-rawwidth=\"1908\" data-rawheight=\"806\" class=\"origin_image zh-lightbox-thumb\" width=\"1908\" data-original=\"https://pic3.zhimg.com/v2-2ecebed1e39dfb4b9634323f256ad93a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1908&#39; height=&#39;806&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1908\" data-rawheight=\"806\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1908\" data-original=\"https://pic3.zhimg.com/v2-2ecebed1e39dfb4b9634323f256ad93a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2ecebed1e39dfb4b9634323f256ad93a_b.png\"/></figure><p><i>偷偷炫耀下当前的 Github 贡献度，国服第一哦！</i>?</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-873927bff2066982f80c0469042484cf_b.png\" data-rawwidth=\"609\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb\" width=\"609\" data-original=\"https://pic4.zhimg.com/v2-873927bff2066982f80c0469042484cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;609&#39; height=&#39;246&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"609\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"609\" data-original=\"https://pic4.zhimg.com/v2-873927bff2066982f80c0469042484cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-873927bff2066982f80c0469042484cf_b.png\"/></figure><p>我一般是使用翻译工具 Google Translator Toolkit。这个工具支持上传 SRT 字幕文件，不会对时间轴误操作。而且现在 Google 翻译的中译英机器翻译已经很好了，英文水平比较普通也可以翻译校对。但是要注意断句的情况，有时一句话在两行，翻译效果就不好了。</p><br/><p>现在，因为志愿者流动性比较大，翻译效率较低，字幕组规则重新调整，翻译由专门的翻译公司来做，每个纳米学位组成专门的翻译小组，由学习或学过这个纳米学位的同学报名参与（因为专业性比较强，报名帖：<a href=\"https://link.zhihu.com/?target=https%3A//discussions.youdaxue.com/t/topic/2956\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">加入优达学城字幕组，帮助更多学习者，还有优惠券拿哦！</a>），进行校对工作。在报名编程入门纳米学位的同时（20170401新版第一期开课），我也加入了编程入门校对小组，目前已经完成大部分内容的校对了！纳米学位校对小组，主要使用 Google Spreadsheets 来进行共享协作，另外还有尚未推广开的 Slack 小组。</p><br/><p>很多志愿者并不能很长久地坚持做字幕组，因为大家的终极目的就是学习，当你学过这部分内容后，就很难再静下心来好好做校对。但是对于我自己来说，翻译和校对是一种“课外休闲活动”，学不进去的时候做做校对，既可以复习到知识，又可以帮助到别人，感觉自己没有虚度光阴(*/ω＼*)</p>", 
            "topic": [
                {
                    "tag": "字幕组", 
                    "tagLink": "https://api.zhihu.com/topics/19584538"
                }, 
                {
                    "tag": "优达学城（Udacity）", 
                    "tagLink": "https://api.zhihu.com/topics/19696060"
                }, 
                {
                    "tag": "字幕翻译", 
                    "tagLink": "https://api.zhihu.com/topics/19663850"
                }
            ], 
            "comments": [
                {
                    "userName": "莫威权在B612", 
                    "userLink": "https://www.zhihu.com/people/265ff300984a8663cef048d12e561922", 
                    "content": "很开心！能跟你合作😊", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "IvyLee", 
                            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
                            "content": "<p>😄同开心！</p>", 
                            "likes": 0, 
                            "replyToAuthor": "莫威权在B612"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>优达学城中国区 cs101 看不了  弱弱的问一下 这个字幕翻译进展咋样了 </p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "IvyLee", 
                            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
                            "content": "<p>这个课程目前应该是可以看的吧，字幕也是全部翻译的状态了，链接是： <a href=\"http://link.zhihu.com/?target=https%3A//cn.udacity.com/course/intro-to-computer-science--cs101\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cn.udacity.com/course/i</span><span class=\"invisible\">ntro-to-computer-science--cs101</span><span class=\"ellipsis\"></span></a></p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "Benbinbin", 
                    "userLink": "https://www.zhihu.com/people/a2a9294be93e5db4e1bbfcb95ece88f0", 
                    "content": "<p>还收人咩？附上自己的半成品<a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/172229779/%23/channel/detail%3Fcid%3D19880\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">半成品</a></p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "IvyLee", 
                            "userLink": "https://www.zhihu.com/people/2f53233174af3810feaeae03e11988ac", 
                            "content": "<p>赞！不过现在没有志愿者组成的字幕组啦，改为官方处理本地化翻译问题，因为志愿者的质量不好把控~</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Benbinbin"
                        }
                    ]
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/ivylee"
}
