{
    "title": "JavaFX", 
    "description": "实践并验证JavaFX与模式化开发的结合，以及如何运用到企业级应用开发中。", 
    "followers": [
        "https://www.zhihu.com/people/zhaowenfeng45", 
        "https://www.zhihu.com/people/zhang-xi-xi-31-72", 
        "https://www.zhihu.com/people/cao-zhong-hui-20", 
        "https://www.zhihu.com/people/ibaud.com", 
        "https://www.zhihu.com/people/lukeshuo", 
        "https://www.zhihu.com/people/javayi-nan-za-zheng-zhuan-zhi", 
        "https://www.zhihu.com/people/cpp001", 
        "https://www.zhihu.com/people/waylanpunch", 
        "https://www.zhihu.com/people/zhang-yiran-6", 
        "https://www.zhihu.com/people/da-bin-ge-69", 
        "https://www.zhihu.com/people/mo-xiao-ru-49", 
        "https://www.zhihu.com/people/xu-ming-17", 
        "https://www.zhihu.com/people/bo-cheng-5", 
        "https://www.zhihu.com/people/huo-jun-long-44", 
        "https://www.zhihu.com/people/tu-jing-yao", 
        "https://www.zhihu.com/people/zhengying", 
        "https://www.zhihu.com/people/zhang-yun-fei-29-76", 
        "https://www.zhihu.com/people/zero-53-1", 
        "https://www.zhihu.com/people/er-kou-bu-er", 
        "https://www.zhihu.com/people/qian-rui-96-23", 
        "https://www.zhihu.com/people/wu-wei-di-89", 
        "https://www.zhihu.com/people/yu-lei-33-89", 
        "https://www.zhihu.com/people/lithium148", 
        "https://www.zhihu.com/people/mhye", 
        "https://www.zhihu.com/people/yaoyao-liu", 
        "https://www.zhihu.com/people/wang-wei-34-84-68", 
        "https://www.zhihu.com/people/xiao-zhao-tong-xue-73-90", 
        "https://www.zhihu.com/people/hailang-you", 
        "https://www.zhihu.com/people/131520", 
        "https://www.zhihu.com/people/da-ding-1897", 
        "https://www.zhihu.com/people/chen-tu-xian", 
        "https://www.zhihu.com/people/zhao-tong-qing-37", 
        "https://www.zhihu.com/people/lu-di-28", 
        "https://www.zhihu.com/people/zhe-ji-chen-sha-17", 
        "https://www.zhihu.com/people/mikemelon", 
        "https://www.zhihu.com/people/zhao-xiu-huan", 
        "https://www.zhihu.com/people/ci-ren-shen-jing-o", 
        "https://www.zhihu.com/people/xue-zheng-26", 
        "https://www.zhihu.com/people/he-chun-guang-90", 
        "https://www.zhihu.com/people/lei-lei-56-73-58", 
        "https://www.zhihu.com/people/legendlink", 
        "https://www.zhihu.com/people/xming", 
        "https://www.zhihu.com/people/digitalgoing", 
        "https://www.zhihu.com/people/guo-da-ye-54", 
        "https://www.zhihu.com/people/zoupython", 
        "https://www.zhihu.com/people/liu-zhang-yi-6", 
        "https://www.zhihu.com/people/remering", 
        "https://www.zhihu.com/people/deng-gao-feng-41", 
        "https://www.zhihu.com/people/guan-li-ming-81", 
        "https://www.zhihu.com/people/deepinno", 
        "https://www.zhihu.com/people/huang-kang-36-86", 
        "https://www.zhihu.com/people/clumsykeyuan", 
        "https://www.zhihu.com/people/keysking", 
        "https://www.zhihu.com/people/mo-tai-xian", 
        "https://www.zhihu.com/people/lu-jin-71-83", 
        "https://www.zhihu.com/people/ge-huan-shi-na-ge-ge-46", 
        "https://www.zhihu.com/people/liang-qiu-lao-hei", 
        "https://www.zhihu.com/people/li-hong-jiang-53", 
        "https://www.zhihu.com/people/nutterp", 
        "https://www.zhihu.com/people/ishare20", 
        "https://www.zhihu.com/people/QuincyDai", 
        "https://www.zhihu.com/people/xjwangliang", 
        "https://www.zhihu.com/people/newliuli", 
        "https://www.zhihu.com/people/tan-suo-zhe-43-98", 
        "https://www.zhihu.com/people/wei-xu-hong", 
        "https://www.zhihu.com/people/lu-hao-yu-1-36", 
        "https://www.zhihu.com/people/uptonking", 
        "https://www.zhihu.com/people/xiao-ding-33-75", 
        "https://www.zhihu.com/people/zhang-peng-lei", 
        "https://www.zhihu.com/people/zhang-jing-yu-27", 
        "https://www.zhihu.com/people/yang-xiao-yao-9-80", 
        "https://www.zhihu.com/people/atnow-fu", 
        "https://www.zhihu.com/people/xu-xi-31", 
        "https://www.zhihu.com/people/chen-zhi-yuan-5-68", 
        "https://www.zhihu.com/people/zhou-yu-32-18", 
        "https://www.zhihu.com/people/leng-ka-pei-28", 
        "https://www.zhihu.com/people/yafengli", 
        "https://www.zhihu.com/people/xia-mu-hai-tang", 
        "https://www.zhihu.com/people/gaoc", 
        "https://www.zhihu.com/people/yang-yang-15-29-59-29", 
        "https://www.zhihu.com/people/shuai-de-bu-yao-bu-yao-de-27-18", 
        "https://www.zhihu.com/people/dai-ru-gang", 
        "https://www.zhihu.com/people/ye-tong-39-71", 
        "https://www.zhihu.com/people/chen-jia-yin-92", 
        "https://www.zhihu.com/people/cyberniuniu", 
        "https://www.zhihu.com/people/dao-cheng-qi-feng-87", 
        "https://www.zhihu.com/people/tiao-dao-di-fa-30", 
        "https://www.zhihu.com/people/jing-jing-jing-23-52", 
        "https://www.zhihu.com/people/zh1663960128", 
        "https://www.zhihu.com/people/song-lin-zhang", 
        "https://www.zhihu.com/people/zonelim", 
        "https://www.zhihu.com/people/twiliness", 
        "https://www.zhihu.com/people/imlige", 
        "https://www.zhihu.com/people/lin-zu-xiang", 
        "https://www.zhihu.com/people/pan-jin-feng", 
        "https://www.zhihu.com/people/wang-fang-21-84", 
        "https://www.zhihu.com/people/ben-qin", 
        "https://www.zhihu.com/people/yu-shou-xi-ji-67", 
        "https://www.zhihu.com/people/makelifebetter", 
        "https://www.zhihu.com/people/dong-dong-93-18", 
        "https://www.zhihu.com/people/zhao-chang-tai", 
        "https://www.zhihu.com/people/aall-ql", 
        "https://www.zhihu.com/people/david-78-86", 
        "https://www.zhihu.com/people/keyboard2109", 
        "https://www.zhihu.com/people/zang-xi-yang", 
        "https://www.zhihu.com/people/wen-yin-ping", 
        "https://www.zhihu.com/people/weiweiqiao", 
        "https://www.zhihu.com/people/hahahaha123567", 
        "https://www.zhihu.com/people/xie-xiao-ming-51"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/37066504", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 1, 
            "title": "J3005.JavaFX组件扩展（五）——LRTableView", 
            "content": "<p>在“J1002.JavaFX简介”中，对JavaFX的一些比较重要的基础组件在功能、应用方式上的不足进行了描述。今天我们将基于JavaFX TableView扩展生成新的组件，主要演示解决以下问题：</p><p>1、无数据时，不绘制表格线。通过CSS实现。</p><p>2、增加“行号”列。</p><p>3、通过自定义的TextFieldTableCell，解决TableCell失去焦点时自动CancelEdit的问题。（只显示对String类型的处理）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一、通过CSS控制无数据时不绘制表格线。该CSS从网上获取。</p><div class=\"highlight\"><pre><code class=\"language-text\">.table-row-cell {\n    -fx-cell-size: 2.35em; /*25px;*/\n}\n\n.text-field {\n    -fx-padding: 0.3em 0.3em 0.3em 0.1em;\n    -fx-border-insets: 0;\n}\n\n.table-cell {\n    -fx-padding: 0em;\n    -fx-border-insets: 0;\n    -fx-alignment: CENTER-LEFT;\n}\n\n.table-view, .table-view:focused {\n    -fx-padding: 0;\n    -fx-background-insets: 0;\n}\n\n.table-row-cell:empty {\n    -fx-background-color: white;\n}\n\n.table-row-cell:empty .table-cell {\n    -fx-border-width: 0px;\n}\n\n/*.table-view {*/\n/*-fx-border-color: derive(gray, 80%);*/\n/*}*/\n\n/* The main scrollbar CSS class of ListView */\n.table-view .scroll-bar:horizontal, .table-view .scroll-bar:vertical {\n    -fx-background-color: transparent;\n}\n\n/* The increment and decrement button CSS class of scrollbar */\n.table-view .increment-button, .table-view .decrement-button {\n    -fx-background-color: transparent;\n    -fx-border-color: derive(gray, 80%);\n    -fx-padding: 3px;\n}\n\n/* The main scrollbar **track** CSS class  */\n.table-view .scroll-bar:horizontal .track, .table-view .scroll-bar:vertical .track {\n    -fx-background-color: transparent;\n    -fx-border-color: derive(gray, 80%);\n    -fx-background-radius: 0em;\n}\n\n/* The main scrollbar **thumb** CSS class which we drag every time (movable) */\n.table-view .scroll-bar:horizontal .thumb, .table-view .scroll-bar:vertical .thumb {\n    -fx-background-color: derive(gray, 80%);\n    -fx-background-insets: 1, 0, 0;\n    -fx-background-radius: 0em;\n}\n\n/* ------------------------------------------------------------------------------------- */\n/** EVENT CSS **/\n/* ------------------------------------------------------------------------------------- */\n\n/* The main scrollbar **track** CSS class on event of &#34;hover&#34; and &#34;pressed&#34; */\n.table-view .scroll-bar:horizontal:hover .track, .table-view .scroll-bar:horizontal:pressed .track,\n.table-view .scroll-bar:vertical:hover .track, .table-view .scroll-bar:vertical:pressed .track {\n    -fx-background-color: derive(#434343, 20%);\n    -fx-opacity: 0.2;\n    -fx-background-radius: 0em;\n}\n\n/* The main scrollbar **thumb** CSS class on event of &#34;hover&#34; and &#34;pressed&#34; */\n.table-view .scroll-bar .thumb:hover, .table-view .scroll-bar .thumb:pressed {\n    -fx-background-color: derive(black, 50%);\n}\n\n.table-view .increment-button:hover, .table-view .decrement-button:hover {\n    -fx-background-color: derive(gray, 90%);\n    -fx-border-color: derive(gray, 80%);\n}</code></pre></div><p>二、用于在表格中显示的值对象（较少字段的“集团基本信息”）</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3005.table.vo;\n\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-05-20\n * @since 9.0.4\n */\npublic class GroupVO {\n\n    /**\n     * 主键\n     */\n    private StringProperty pk_group = new SimpleStringProperty();\n\n\n    /**\n     * 编码\n     */\n    private StringProperty group_code = new SimpleStringProperty();\n\n    /**\n     * 名称\n     */\n    private StringProperty group_name = new SimpleStringProperty();\n\n    public String getPk_group() {\n\n        return pk_group.get();\n    }\n\n    public StringProperty pk_groupProperty() {\n\n        return pk_group;\n    }\n\n    public void setPk_group(String pk_group) {\n\n        this.pk_group.set(pk_group);\n    }\n\n    public String getGroup_code() {\n\n        return group_code.get();\n    }\n\n    public StringProperty group_codeProperty() {\n\n        return group_code;\n    }\n\n    public void setGroup_code(String group_code) {\n\n        this.group_code.set(group_code);\n    }\n\n    public String getGroup_name() {\n\n        return group_name.get();\n    }\n\n    public StringProperty group_nameProperty() {\n\n        return group_name;\n    }\n\n    public void setGroup_name(String group_name) {\n\n        this.group_name.set(group_name);\n    }\n}\n</code></pre></div><p>三、用于生成表格栏位和测试数据的测试类</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3005;\n\nimport com.lirong.javafx.demo.j3005.table.cell.LRTextFieldTableCell;\nimport com.lirong.javafx.demo.j3005.table.vo.GroupVO;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.cell.PropertyValueFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-05-20\n * @since 9.0.4\n */\npublic class TableViewTestUtil {\n\n    private TableViewTestUtil() {\n\n    }\n\n    /**\n     * 生成用于显示Group的Columns\n     *\n     * @return\n     */\n    public static List&lt;TableColumn&lt;GroupVO, ?&gt;&gt; createGroupTableColumns() {\n\n        List&lt;TableColumn&lt;GroupVO, ?&gt;&gt; list = new ArrayList&lt;&gt;();\n\n        TableColumn&lt;GroupVO, String&gt; colPK = new TableColumn&lt;&gt;(&#34;主键&#34;);\n        colPK.setCellValueFactory(new PropertyValueFactory(&#34;pk_group&#34;));\n        colPK.setMinWidth(120);\n\n        list.add(colPK);\n\n        TableColumn&lt;GroupVO, String&gt; colCode = new TableColumn&lt;&gt;(&#34;编码&#34;);\n        colCode.setCellValueFactory(new PropertyValueFactory(&#34;group_code&#34;));\n        colCode.setCellFactory(cellData -&gt; new LRTextFieldTableCell(&#34;group_code&#34;, 64));\n        colCode.setMinWidth(230);\n\n        list.add(colCode);\n\n        TableColumn&lt;GroupVO, String&gt; colName = new TableColumn&lt;&gt;(&#34;名称&#34;);\n        colName.setCellValueFactory(new PropertyValueFactory(&#34;group_name&#34;));\n        colName.setCellFactory(cellData -&gt; new LRTextFieldTableCell(&#34;group_name&#34;, 64));\n        colName.setMinWidth(360);\n\n        list.add(colName);\n\n        return list;\n    }\n\n    /**\n     * 生成10条测试数据\n     *\n     * @return\n     */\n    public static ObservableList&lt;GroupVO&gt; createGroupList() {\n\n        ObservableList&lt;GroupVO&gt; listData = FXCollections.observableArrayList();\n\n        for (int i = 0; i &lt; 10; i++) {\n\n            GroupVO groupVO = new GroupVO();\n            groupVO.setPk_group(String.format(&#34;GroupPK_%s&#34;, i));\n            groupVO.setGroup_code(String.format(&#34;GroupCode_%s&#34;, i));\n            groupVO.setGroup_name(String.format(&#34;GroupName_%s&#34;, i));\n\n            listData.add(groupVO);\n        }\n\n        return listData;\n    }\n}</code></pre></div><p>四、行号Column</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3005.table.cell;\n\nimport javafx.beans.NamedArg;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\nimport javafx.util.Callback;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-01-05\n */\npublic class RowNumberTableCellFactory&lt;S, T&gt; implements Callback&lt;TableColumn&lt;S, T&gt;, TableCell&lt;S, T&gt;&gt; {\n\n    private final int startNumber;\n\n    public RowNumberTableCellFactory(@NamedArg(&#34;startNumber&#34;) int startNumber) {\n\n        super();\n        this.startNumber = startNumber;\n    }\n\n    public RowNumberTableCellFactory() {\n\n        this(1);\n    }\n\n    public static class NumberTableCell&lt;S, T&gt; extends TableCell&lt;S, T&gt; {\n\n        private final int startNumber;\n\n        public NumberTableCell(int startNumber) {\n\n            this.startNumber = startNumber;\n        }\n\n\n        @Override\n        public void updateItem(T item, boolean empty) {\n\n            super.updateItem(item, empty);\n\n            setText(empty ? &#34;&#34; : String.format(&#34;%s　&#34;, Integer.toString(startNumber + getIndex())));\n        }\n    }\n\n    @Override\n    public TableCell&lt;S, T&gt; call(TableColumn&lt;S, T&gt; param) {\n\n        return new NumberTableCell&lt;&gt;(startNumber);\n    }\n\n    public static &lt;T&gt; TableColumn&lt;T, Void&gt; createNumberColumn(String text, int startNumber) {\n\n        TableColumn&lt;T, Void&gt; column = new TableColumn&lt;&gt;(text);\n        column.setSortable(false);\n        column.setEditable(false);\n        column.setMinWidth(30);\n        column.setPrefWidth(53);\n        column.setMaxWidth(67);\n        column.setCellFactory(new RowNumberTableCellFactory&lt;&gt;(startNumber));\n        column.setStyle(&#34;-fx-alignment: CENTER-RIGHT;&#34;);\n        return column;\n    }\n\n}</code></pre></div><p>五、失去输入焦点时，自动提交的TextField</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3005.table.cell;\n\nimport com.lirong.javafx.demo.j3002.StringField;\nimport com.lirong.javafx.demo.j3005.table.vo.GroupVO;\nimport javafx.scene.control.ContentDisplay;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.input.KeyCode;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-11-07\n */\npublic class LRTextFieldTableCell&lt;S, T&gt; extends TableCell&lt;GroupVO, String&gt; {\n\n    private final StringField textField = new StringField();\n\n    private String oldValue;\n\n    private final String propertyName;\n\n    public LRTextFieldTableCell(String propertyName, Integer maxLength) {\n\n        this.propertyName = propertyName;\n        // 限制最长输入\n        textField.setMaxLength(maxLength);\n        textProperty().bind(itemProperty());\n        setGraphic(textField);\n        setContentDisplay(ContentDisplay.TEXT_ONLY);\n\n        setOnKeyPressed(aEvent -&gt; {\n            if (aEvent.getCode() == KeyCode.ESCAPE) {\n                textField.setText(oldValue);\n                if (isEditing()) {\n                    cancelEdit();\n                }\n            }\n        });\n\n        textField.setOnAction(evt -&gt; {\n            commitEdit(textField.getText());\n        });\n\n        textField.focusedProperty().addListener((obs, wasFocused, isNowFocused) -&gt; {\n            if (!isNowFocused) {\n                commitEdit(textField.getText());\n            }\n        });\n    }\n\n    @Override\n    public void startEdit() {\n\n        super.startEdit();\n        textField.setText(getItem());\n        oldValue = getItem();\n        setContentDisplay(ContentDisplay.GRAPHIC_ONLY);\n        textField.requestFocus();\n    }\n\n    @Override\n    public void cancelEdit() {\n\n        super.cancelEdit();\n        setContentDisplay(ContentDisplay.TEXT_ONLY);\n    }\n\n    @Override\n    public void commitEdit(String text) {\n\n        super.commitEdit(text);\n        GroupVO vo = getTableView().getItems().get(getIndex());\n        // TODO only for test\n        if (&#34;group_code&#34;.equalsIgnoreCase(this.propertyName)) {\n            vo.setGroup_code(text);\n        } else if (&#34;group_name&#34;.equalsIgnoreCase(this.propertyName)) {\n            vo.setGroup_name(text);\n        }\n        setContentDisplay(ContentDisplay.TEXT_ONLY);\n    }\n}\n</code></pre></div><p>六、对TableView进行扩展</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3005.table;\n\nimport com.lirong.javafx.demo.j3005.table.cell.RowNumberTableCellFactory;\nimport javafx.scene.control.TableView;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-05-20\n * @since 9.0.4\n */\npublic class LRTableView&lt;S&gt; extends TableView&lt;S&gt; {\n\n    /* 就否显示行号 */\n    private Boolean showRowNumberColumn = Boolean.TRUE;\n\n    public LRTableView(final Boolean showRowNumber) {\n\n        super();\n        // 初始化样式\n        getStylesheets().add(LRTableView.class.getClassLoader().getResource(&#34;css/control/table-view.css&#34;).toExternalForm());\n        setShowRowNumberColumn(showRowNumber);\n    }\n\n    public Boolean getShowRowNumberColumn() {\n\n        return showRowNumberColumn;\n    }\n\n    public void setShowRowNumberColumn(Boolean showRowNumberColumn) {\n\n        this.showRowNumberColumn = showRowNumberColumn;\n        setShowRowNumber();\n    }\n\n    private void setShowRowNumber() {\n\n        if (getShowRowNumberColumn() &amp;&amp; (getColumns().isEmpty() || (getColumns().get(0) != null &amp;&amp; !&#34;#&#34;.equals(getColumns().get(0).getText())))) {\n            getColumns().add(0, RowNumberTableCellFactory.createNumberColumn(&#34;#&#34;, 1));\n        }\n        if (!getShowRowNumberColumn() &amp;&amp; (!getColumns().isEmpty() &amp;&amp; getColumns().get(0) != null &amp;&amp; &#34;#&#34;.equals(getColumns().get(0).getText()))) {\n            getColumns().remove(0);\n        }\n    }\n}</code></pre></div><p>七、测试类</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3005;\n\nimport com.lirong.javafx.demo.j3005.table.LRTableView;\nimport com.lirong.javafx.demo.j3005.table.vo.GroupVO;\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-05-20\n * @since 9.0.4\n */\npublic class HelloLRTableView extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        LRTableView&lt;GroupVO&gt; lrTableView = new LRTableView&lt;&gt;(Boolean.TRUE);\n\n        lrTableView.getItems().setAll(TableViewTestUtil.createGroupList());\n\n        lrTableView.getColumns().addAll(TableViewTestUtil.createGroupTableColumns());\n\n        lrTableView.setEditable(Boolean.TRUE);\n\n        Scene scene = new Scene(lrTableView, 1024, 768);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n}\n</code></pre></div><p>八、运行效果</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/981499856774356992\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic2.zhimg.com/80/v2-6cf27bf03aeff5a84c2678120320c70d_b.jpg\" data-lens-id=\"981499856774356992\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/80/v2-6cf27bf03aeff5a84c2678120320c70d_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/981499856774356992</span></span></a><p></p>", 
            "topic": [
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }, 
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>我写了个类，继承了一个TableView，但是它有问题。不知道怎么回事。</p><p><br></p><p>import javafx.beans.property.SimpleStringProperty;<br>import javafx.collections.FXCollections;<br>import javafx.collections.ObservableList;<br>import javafx.scene.control.TableView;<br>import javafx.scene.control.TableColumn;<br>import javafx.scene.control.cell.PropertyValueFactory;<br><br><br>public class ZTableView2 extends TableView {<br>    public ZTableView2(){<br>        //数据<br>        ObservableList&lt;Person&gt; data = FXCollections.observableArrayList(<br>                new Person(\"1\",\"n1\",\"10\"),<br>                new Person(\"2\",\"n2\",\"11\"),<br>                new Person(\"3\",\"n3\",\"12\")<br>        );<br><br>        //各列<br>        TableColumn&lt;Person, String&gt; c1 = new TableColumn&lt;&gt;(\"id\");<br>        c1.setCellValueFactory(new PropertyValueFactory&lt;Person, String&gt;(\"Id\"));<br>        c1.setMinWidth(50);<br><br>        TableColumn&lt;Person, String&gt; c2 = new TableColumn&lt;&gt;(\"name\");<br>        c2.setCellValueFactory(new PropertyValueFactory&lt;Person, String&gt;(\"Name\"));<br>        c2.setMinWidth(50);<br><br>        TableColumn&lt;Person, String&gt; c3 = new TableColumn&lt;&gt;(\"age\");<br>        c3.setCellValueFactory(new PropertyValueFactory&lt;Person, String&gt;(\"Age\"));<br>        c3.setMinWidth(50);<br><br>        this.setItems(data);<br><br>        this.getColumns().add(c1);<br>        this.getColumns().add(c2);<br>        this.getColumns().add(c3);<br>        this.setEditable(false);<br>    }<br><br>    static class Person{<br>        private final SimpleStringProperty id;<br>        private final SimpleStringProperty name;<br>        private final SimpleStringProperty age;<br><br>        public Person(String _id, String _name, String _age){<br>            this.id = new SimpleStringProperty((_id));<br>            this.name = new SimpleStringProperty(_name);<br>            this.age = new SimpleStringProperty(_age);<br>        }<br><br><br>        public String getId(){<br>            return id.get();<br>        }<br><br><br>        public String getName(){<br>            return name.get();<br>        }<br><br><br>        public String getAge(){<br>            return age.get();<br>        }<br><br><br>        public void setId(String _id){<br>            id.set(_id);<br>        }<br><br><br>        public void setName(String _name){<br>            name.set(_name);<br>        }<br><br><br>        public void setAge(String _age){<br>            age.set(_age);<br>        }<br><br>    }<br>}</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36252956", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 0, 
            "title": "J3004.JavaFX组件扩展（四）——ReferenceField", 
            "content": "<p>在前面几篇文章中，基于普遍的业务需求，对JavaFX提供的基础组件进行扩展，以满足不同业务场景下，对数据展现及控制的要求。</p><p>像StringField、各种NumbricField以及EnumComboBox这类组件，比较常用，实现起来也比较容易。但对于参照来说，如果只是特定的参照，实现方式也可以比较简单，如果需要设计比较通用的、能够大范围复用的参照组件，感觉基于JavaFX的实现就比较繁琐了。</p><p>但前述这些组件在企业级应用开发中属性最基础的组件，如果没有它们，则我们在处理基于TableView、FormView就会比较棘手，几乎什么数据类型都无法很好地处理，或者相同的代码需要到处拷贝。</p><p>参照(Reference)是数据库外键在代码层面的映射，不同的人可能有不同的定义。看一下就知道了：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"768\" src=\"https://pic1.zhimg.com/v2-9ee2cfb3945461450f73fd906180da3c_b.gif\" data-size=\"normal\" data-rawwidth=\"1024\" data-thumbnail=\"https://pic1.zhimg.com/v2-9ee2cfb3945461450f73fd906180da3c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-9ee2cfb3945461450f73fd906180da3c_r.jpg\"/></noscript><img data-rawheight=\"768\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1024\" data-thumbnail=\"https://pic1.zhimg.com/v2-9ee2cfb3945461450f73fd906180da3c_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-9ee2cfb3945461450f73fd906180da3c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9ee2cfb3945461450f73fd906180da3c_b.gif\"/><figcaption>参照是啥</figcaption></figure><br/><br/><br/><br/><p>先来看一下示例工程的代码结构：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"595\" src=\"https://pic1.zhimg.com/v2-7a3f7d3adf5b6334b5014035fd1c35f4_b.jpg\" data-size=\"normal\" data-rawwidth=\"519\" class=\"origin_image zh-lightbox-thumb\" width=\"519\" data-original=\"https://pic1.zhimg.com/v2-7a3f7d3adf5b6334b5014035fd1c35f4_r.jpg\"/></noscript><img data-rawheight=\"595\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;519&#39; height=&#39;595&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"519\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"519\" data-original=\"https://pic1.zhimg.com/v2-7a3f7d3adf5b6334b5014035fd1c35f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7a3f7d3adf5b6334b5014035fd1c35f4_b.jpg\"/></figure><p>dialog：点击“...”按钮，弹出的（模态）窗口。</p><p>field：参照TextField的基类。</p><p>user.ref：基于“用户信息”实现的ReferenceField示例。</p><p>vo：参照对象基类。</p><p>我们的目标是：所有ReferenceDataVO的子类，都可以比较方便地实现参照管理机制。</p><p><b>一、先来看参照基类。</b></p><p>我们约定，一个参照至少要有pk、code、name这三个字段。pk用于持久化，实现外键关系，code和name用于在界面上展现：</p><p>1、接口类</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.vo;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic interface IReferenceData extends Comparable&lt;Object&gt; {\n\n    String getPk();\n\n    void setPk(String pk);\n\n    void setCode(String code);\n\n    String getCode();\n\n    void setName(String name);\n\n    String getName();\n}\n</code></pre></div><p>2、参照基类：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.vo;\n\nimport java.io.Serializable;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class ReferenceDataVO implements IReferenceData, Serializable {\n\n    public String pk;\n\n    public String code;\n\n    public String name;\n\n    public ReferenceDataVO() {\n\n        super();\n    }\n\n    public ReferenceDataVO(String pk) {\n\n        super();\n        this.pk = pk;\n    }\n\n    public ReferenceDataVO(String pk, String code, String name) {\n\n        super();\n        this.pk = pk;\n        this.code = code;\n        this.name = name;\n    }\n\n    @Override\n    public int compareTo(Object o) {\n\n        ReferenceDataVO oldvp = (ReferenceDataVO) o;\n        String pk = getPk();\n        String oldpk = oldvp.getPk();\n        return pk.compareTo(oldpk);\n    }\n\n    public String getCode() {\n\n        return code;\n    }\n\n    public String getName() {\n\n        return name;\n    }\n\n    public String getPk() {\n\n        return pk;\n    }\n\n    public void setCode(String code) {\n\n        this.code = code;\n    }\n\n    public String getPrimaryKey() {\n\n        return pk;\n    }\n\n    public void setName(String name) {\n\n        this.name = name;\n    }\n\n    public void setPk(String pk) {\n\n        this.pk = pk;\n    }\n\n    @Override\n    public String toString() {\n\n        return pk;\n    }\n\n    public boolean equals(Object anObject) {\n\n        if (this == anObject) {\n            return true;\n        }\n\n        if (anObject == null) {\n            return false;\n        }\n\n        if (!this.getClass().equals(anObject.getClass())) {\n            return false;\n        }\n\n        ReferenceDataVO aRefVO = (ReferenceDataVO) anObject;\n        if (aRefVO.getPk() == null || this.getPk() == null) {\n            return false;\n        }\n        return aRefVO.getPk().equals(this.getPk());\n\n    }\n}\n</code></pre></div><p><b>二、参照弹出对话框</b></p><p>1、对话框返回数据约定：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.dialog;\n\nimport com.lirong.javafx.demo.j3004.vo.ReferenceDataVO;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic interface ReferenceResult&lt;T extends ReferenceDataVO&gt; {\n\n    T getReferenceDataVO();\n}\n</code></pre></div><p>2、对话框：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.dialog;\n\nimport com.lirong.javafx.demo.j3004.vo.ReferenceDataVO;\nimport javafx.scene.Node;\nimport javafx.scene.control.ButtonType;\nimport javafx.scene.control.Dialog;\nimport javafx.scene.control.DialogPane;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * &lt;p&gt;Description: &lt;/p&gt;\n * &lt;p&gt;Copyright: Copyright (c) 2015&lt;/p&gt;\n * &lt;p&gt;Company: lrJAP.com&lt;/p&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2016年7月29日\n */\npublic class ReferenceValueSelectDialog&lt;T extends ReferenceDataVO&gt; extends Dialog {\n\n    public ReferenceValueSelectDialog(final String headerText, ReferenceResult referencePane) {\n\n        if (!(referencePane instanceof Node)) {\n            throw new RuntimeException(&#34;错误：参照容器必须是Node类的子类。&#34;);\n        }\n\n        final DialogPane dialogPane = getDialogPane();\n\n        setTitle(&#34;参照选择&#34;);\n        dialogPane.setHeaderText(headerText);\n        dialogPane.getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);\n        dialogPane.setContent((Node) referencePane);\n\n        // 设置对话框的返回数据\n        setResultConverter(dialogButton -&gt; dialogButton == ButtonType.OK ? referencePane.getReferenceDataVO() : null);\n    }\n}\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三、参照Field基类</b></p><p>1、Field定义：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.field;\n\nimport com.lirong.javafx.demo.j3002.StringField;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleObjectProperty;\nimport javafx.scene.Node;\nimport javafx.scene.control.Skin;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class ReferenceTextField extends StringField {\n\n    private ObjectProperty&lt;Node&gt; left = new SimpleObjectProperty&lt;&gt;(this, &#34;left&#34;);\n\n    private ObjectProperty&lt;Node&gt; right = new SimpleObjectProperty&lt;&gt;(this, &#34;right&#34;);\n\n    public ReferenceTextField() {\n\n        super();\n        getStylesheets().add(ReferenceTextField.class.getClassLoader().getResource(&#34;css/control/reference-textfield.css&#34;).toExternalForm());\n        getStyleClass().add(&#34;reference-text-field&#34;);\n    }\n\n    public final ObjectProperty&lt;Node&gt; leftProperty() {\n\n        return left;\n    }\n\n    public final Node getLeft() {\n\n        return left.get();\n    }\n\n    public final void setLeft(Node value) {\n\n        left.set(value);\n    }\n\n    public final ObjectProperty&lt;Node&gt; rightProperty() {\n\n        return right;\n    }\n\n    public final Node getRight() {\n\n        return right.get();\n    }\n\n    public final void setRight(Node value) {\n\n        right.set(value);\n    }\n\n    @Override\n    protected Skin&lt;?&gt; createDefaultSkin() {\n\n        return new ReferenceTextFieldSkin(this) {\n\n            @Override\n            public ObjectProperty&lt;Node&gt; leftProperty() {\n\n                return left;\n            }\n\n            @Override\n            public ObjectProperty&lt;Node&gt; rightProperty() {\n\n                return right;\n            }\n        };\n    }\n}\n</code></pre></div><p>2、皮肤，用于控制显示位置等</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.field;\n\nimport javafx.beans.property.ObjectProperty;\nimport javafx.css.PseudoClass;\nimport javafx.geometry.Pos;\nimport javafx.scene.Node;\nimport javafx.scene.control.TextField;\nimport javafx.scene.control.skin.TextFieldSkin;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.text.HitInfo;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * &lt;p&gt;Description: &lt;/p&gt;\n * &lt;p&gt;Copyright: Copyright (c) 2015&lt;/p&gt;\n * &lt;p&gt;Company: lrJAP.com&lt;/p&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2016年9月6日\n */\npublic abstract class ReferenceTextFieldSkin extends TextFieldSkin {\n\n    private static final PseudoClass HAS_NO_SIDE_NODE = PseudoClass.getPseudoClass(&#34;no-side-nodes&#34;);\n    private static final PseudoClass HAS_LEFT_NODE = PseudoClass.getPseudoClass(&#34;left-node-visible&#34;);\n    private static final PseudoClass HAS_RIGHT_NODE = PseudoClass.getPseudoClass(&#34;right-node-visible&#34;);\n\n    private Node left;\n    private StackPane leftPane;\n    private Node right;\n    private StackPane rightPane;\n\n    private final TextField control;\n\n    public ReferenceTextFieldSkin(final TextField control) {\n\n        super(control);\n\n        this.control = control;\n        updateChildren();\n\n        registerChangeListener(leftProperty(), e -&gt; updateChildren());\n        registerChangeListener(rightProperty(), e -&gt; updateChildren());\n    }\n\n    public abstract ObjectProperty&lt;Node&gt; leftProperty();\n\n    public abstract ObjectProperty&lt;Node&gt; rightProperty();\n\n    private void updateChildren() {\n\n        Node newLeft = leftProperty().get();\n        if (newLeft != null) {\n            getChildren().remove(leftPane);\n            leftPane = new StackPane(newLeft);\n            leftPane.setAlignment(Pos.CENTER_LEFT);\n            leftPane.getStyleClass().add(&#34;left-pane&#34;);\n            getChildren().add(leftPane);\n            left = newLeft;\n        }\n\n        Node newRight = rightProperty().get();\n        if (newRight != null) {\n            getChildren().remove(rightPane);\n            rightPane = new StackPane(newRight);\n            rightPane.setAlignment(Pos.CENTER_RIGHT);\n            rightPane.getStyleClass().add(&#34;right-pane&#34;);\n            getChildren().add(rightPane);\n            right = newRight;\n        }\n\n        control.pseudoClassStateChanged(HAS_LEFT_NODE, left != null);\n        control.pseudoClassStateChanged(HAS_RIGHT_NODE, right != null);\n        control.pseudoClassStateChanged(HAS_NO_SIDE_NODE, left == null &amp;&amp; right == null);\n    }\n\n    @Override\n    protected void layoutChildren(double x, double y, double w, double h) {\n\n        final double fullHeight = h + snappedTopInset() + snappedBottomInset();\n\n        final double leftWidth = leftPane == null ? 0.0 : snapSize(leftPane.prefWidth(fullHeight));\n        final double rightWidth = rightPane == null ? 0.0 : snapSize(rightPane.prefWidth(fullHeight));\n\n        final double textFieldStartX = snapPosition(x) + snapSize(leftWidth);\n        final double textFieldWidth = w - snapSize(leftWidth) - snapSize(rightWidth);\n\n        super.layoutChildren(textFieldStartX, 0, textFieldWidth, fullHeight);\n\n        if (leftPane != null) {\n            final double leftStartX = 0;\n            leftPane.resizeRelocate(leftStartX, 0, leftWidth, fullHeight);\n        }\n\n        if (rightPane != null) {\n            final double rightStartX = rightPane == null ? 0.0 : w - rightWidth + snappedLeftInset();\n            rightPane.resizeRelocate(rightStartX, 0, rightWidth, fullHeight);\n        }\n    }\n\n    @Override\n    public HitInfo getIndex(double x, double y) {\n\n        final double leftWidth = leftPane == null ? 0.0 : snapSize(leftPane.prefWidth(getSkinnable().getHeight()));\n        return super.getIndex(x - leftWidth, y);\n    }\n\n    @Override\n    protected double computePrefWidth(double h, double topInset, double rightInset, double bottomInset, double leftInset) {\n\n        final double pw = super.computePrefWidth(h, topInset, rightInset, bottomInset, leftInset);\n        final double leftWidth = leftPane == null ? 0.0 : snapSize(leftPane.prefWidth(h));\n        final double rightWidth = rightPane == null ? 0.0 : snapSize(rightPane.prefWidth(h));\n\n        return pw + leftWidth + rightWidth;\n    }\n\n    @Override\n    protected double computePrefHeight(double w, double topInset, double rightInset, double bottomInset, double leftInset) {\n\n        final double ph = super.computePrefHeight(w, topInset, rightInset, bottomInset, leftInset);\n        final double leftHeight = leftPane == null ? 0.0 : snapSize(leftPane.prefHeight(-1));\n        final double rightHeight = rightPane == null ? 0.0 : snapSize(rightPane.prefHeight(-1));\n\n        return Math.max(ph, Math.max(leftHeight, rightHeight));\n    }\n}</code></pre></div><p>3、使用到的css</p><div class=\"highlight\"><pre><code class=\"language-text\">.reference-text-field {\n    -fx-text-fill: -fx-text-inner-color;\n    -fx-highlight-fill: derive(-fx-control-inner-background, -20%);\n    -fx-highlight-text-fill: -fx-text-inner-color;\n    -fx-prompt-text-fill: derive(-fx-control-inner-background, -30%);\n    -fx-background-color: linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),\n    linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);\n    -fx-background-insets: 0, 1;\n    -fx-background-radius: 3, 2;\n}\n\n.reference-text-field:no-side-nodes {\n    -fx-padding: 0.333333em 0.583em 0.333333em 0.583em;\n}\n\n.reference-text-field:left-node-visible {\n    -fx-padding: 0.333333em 0.583em 0.333333em 0;\n}\n\n.reference-text-field:right-node-visible {\n    -fx-padding: 0.333333em 0 0.333333em 0.583em;\n}\n\n.reference-text-field:left-node-visible:right-node-visible {\n    -fx-padding: 0.333333em 0 0.333333em 0;\n}\n\n.reference-text-field:left-node-visible .left-pane {\n    -fx-padding: 0 3 0 3;\n}\n\n.reference-text-field:right-node-visible .right-pane {\n    -fx-padding: 0 3 0 3;\n}\n\n.reference-text-field:focused,\n.reference-text-field:text-field-has-focus {\n    -fx-highlight-fill: -fx-accent;\n    -fx-highlight-text-fill: white;\n    -fx-background-color: -fx-focus-color,\n    -fx-control-inner-background,\n    -fx-faint-focus-color,\n    linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);\n    -fx-background-insets: -0.2, 1, -1.4, 3;\n    -fx-background-radius: 3, 2, 4, 0;\n    -fx-prompt-text-fill: transparent;\n}\n\n.clearable-field .clear-button {\n    -fx-padding: 0 3 0 0;\n}\n\n.clearable-field .clear-button &gt; .graphic {\n    -fx-background-color: #949494;\n    -fx-scale-shape: false;\n    -fx-padding: 4.5 4.5 4.5 4.5; /* Graphic is 9x9 px */\n    -fx-shape: &#34;M395.992,296.758l1.794-1.794l7.292,7.292l-1.795,1.794 L395.992,296.758z M403.256,294.992l1.794,1.794l-7.292,7.292l-1.794-1.795 L403.256,294.992z&#34;;\n}\n\n.clearable-field .clear-button:hover &gt; .graphic {\n    -fx-background-color: #ee4444;\n}\n\n.clearable-field .clear-button:pressed &gt; .graphic {\n    -fx-background-color: #ff1111;\n}</code></pre></div><p>4、组合Field和Dialog</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.field;\n\nimport com.lirong.javafx.demo.j3004.dialog.ReferenceValueSelectDialog;\nimport com.lirong.javafx.demo.j3004.user.ref.UserReferenceTableView;\nimport com.lirong.javafx.demo.j3004.user.ref.UserReferenceVO;\nimport com.lirong.javafx.demo.j3004.vo.ReferenceDataVO;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleObjectProperty;\nimport javafx.beans.property.StringProperty;\nimport javafx.scene.Cursor;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.Priority;\nimport javafx.scene.layout.StackPane;\n\nimport java.util.Optional;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic abstract class AbstractReferenceValueField&lt;T extends ReferenceDataVO&gt; extends HBox {\n\n    private static final Image image = loadImage(&#34;images/commons/open-editor.png&#34;);\n\n    private final ReferenceTextField textField = new ReferenceTextField();\n\n    // 参照信息\n    private ObjectProperty&lt;T&gt; objectProperty = new SimpleObjectProperty&lt;&gt;();\n\n    public AbstractReferenceValueField() {\n\n        super(1);\n        setFocusTraversable(Boolean.TRUE);\n        textField.setFocusTraversable(Boolean.TRUE);\n\n        StackPane button = new StackPane(new ImageView(image));\n        button.setCursor(Cursor.DEFAULT);\n\n        button.setOnMouseReleased(e -&gt; {\n            if (MouseButton.PRIMARY == e.getButton()) {\n                final T result = edit(objectProperty.get());\n                objectProperty.set(result);\n            }\n        });\n\n        textField.setRight(button);\n        getChildren().add(textField);\n        HBox.setHgrow(textField, Priority.ALWAYS);\n\n        objectProperty.addListener((o, oldValue, newValue) -&gt; textProperty().set(objectToString(newValue)));\n\n        focusedProperty().addListener((observable, oldValue, newValue) -&gt; {\n            if (newValue) {\n                textField.requestFocus();\n            }\n        });\n    }\n\n    protected StringProperty textProperty() {\n\n        return textField.textProperty();\n    }\n\n    public ObjectProperty&lt;T&gt; getObjectProperty() {\n\n        return objectProperty;\n    }\n\n    protected String objectToString(T object) {\n\n        return object == null ? &#34;&#34; : object.toString();\n    }\n\n    protected abstract Class&lt;T&gt; getType();\n\n    protected T edit(T object) {\n\n        ReferenceValueSelectDialog&lt;UserReferenceVO&gt; dlg = new ReferenceValueSelectDialog(&#34;请选择一个用户信息：&#34;, new UserReferenceTableView());\n        Optional&lt;T&gt; optionalRef = dlg.showAndWait();\n        if (optionalRef.isPresent()) {\n            return optionalRef.get();\n        } else {\n            return object;\n        }\n    }\n\n    public void setText(String text) {\n\n        textField.setText(text);\n    }\n\n    public ReferenceTextField getTextField() {\n\n        return textField;\n    }\n\n    // 应该工具化\n    public static Image loadImage(String absFileName) {\n\n        try {\n            return new Image(AbstractReferenceValueField.class.getClassLoader().getResourceAsStream(absFileName));\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return null;\n        }\n    }\n}\n</code></pre></div><p>使用到的按钮背景图：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"16\" src=\"https://pic3.zhimg.com/v2-43a8f01bd72202da513915e5347caf2e_b.jpg\" data-size=\"normal\" data-rawwidth=\"16\" class=\"content_image\" width=\"16\"/></noscript><img data-rawheight=\"16\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;16&#39; height=&#39;16&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"16\" class=\"content_image lazy\" width=\"16\" data-actualsrc=\"https://pic3.zhimg.com/v2-43a8f01bd72202da513915e5347caf2e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>四、用户参照</b></p><p>1、用户参照类，只有pk、code、name。所以直接继承基类。</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.user.ref;\n\nimport com.lirong.javafx.demo.j3004.vo.ReferenceDataVO;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class UserReferenceVO extends ReferenceDataVO {\n\n}\n</code></pre></div><p>2、用户参照TableView，用于在Dialog中显示，以便于操作人员选择。来源数据随机生成，仅用于测试。</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.user.ref;\n\nimport com.lirong.javafx.demo.j3004.dialog.ReferenceResult;\nimport com.lirong.javafx.demo.j3004.vo.ReferenceDataVO;\nimport javafx.beans.property.ListProperty;\nimport javafx.beans.property.SimpleListProperty;\nimport javafx.collections.FXCollections;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.cell.PropertyValueFactory;\n\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class UserReferenceTableView extends TableView implements ReferenceResult {\n\n    // 用于展示在TableView中的待选数据\n    private ListProperty&lt;UserReferenceVO&gt; listDatas = new SimpleListProperty&lt;&gt;(FXCollections.observableArrayList());\n\n    public UserReferenceTableView() {\n\n        super();\n        initColumns();\n        initListData();\n        itemsProperty().bind(this.listDatas);\n    }\n\n    /**\n     * 返回选中的数据\n     *\n     * @return\n     */\n    @Override\n    public ReferenceDataVO getReferenceDataVO() {\n\n        return (ReferenceDataVO) getSelectionModel().getSelectedItem();\n    }\n\n    // 初始化Columns\n    private void initColumns() {\n\n        TableColumn&lt;String, UserReferenceVO&gt; col_pk = new TableColumn&lt;&gt;(&#34;主键&#34;);\n        col_pk.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&#34;pk&#34;));\n\n        TableColumn&lt;String, UserReferenceVO&gt; col_code = new TableColumn&lt;&gt;(&#34;编码&#34;);\n        col_code.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&#34;code&#34;));\n\n        TableColumn&lt;String, UserReferenceVO&gt; col_name = new TableColumn&lt;&gt;(&#34;名称&#34;);\n        col_name.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&#34;name&#34;));\n\n        getColumns().setAll(col_pk, col_code, col_name);\n    }\n\n    // 初始化用于参照选择的数据\n    private void initListData() {\n\n        for (int i = 0; i &lt; 10; i++) {\n            UserReferenceVO vo = new UserReferenceVO();\n            vo.setPk(String.format(&#34;pk_%d&#34;, i));\n            vo.setCode(String.format(&#34;code_%d&#34;, i));\n            vo.setName(String.format(&#34;name_%d&#34;, i));\n\n            listDatas.add(vo);\n        }\n    }\n}\n</code></pre></div><p>3、用户参照Field</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004.user.ref;\n\nimport com.lirong.javafx.demo.j3004.field.AbstractReferenceValueField;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class UserReferenceField extends AbstractReferenceValueField&lt;UserReferenceVO&gt; {\n\n    private UserReferenceTableView userReferenceTableView;\n\n    public UserReferenceField(UserReferenceTableView userReferenceTableView) {\n\n        super();\n        this.userReferenceTableView = userReferenceTableView;\n    }\n\n    @Override\n    protected Class&lt;UserReferenceVO&gt; getType() {\n\n        return UserReferenceVO.class;\n    }\n}\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>五、测试类：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3004;\n\nimport com.lirong.javafx.demo.j3004.user.ref.UserReferenceField;\nimport com.lirong.javafx.demo.j3004.user.ref.UserReferenceTableView;\nimport com.lirong.javafx.demo.j3004.user.ref.UserReferenceVO;\nimport javafx.application.Application;\nimport javafx.geometry.HPos;\nimport javafx.geometry.Insets;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.layout.ColumnConstraints;\nimport javafx.scene.layout.GridPane;\nimport javafx.stage.Stage;\n\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class TestReferenceField extends Application {\n\n    public static void main(String[] args) {\n\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label lblUser = new Label(&#34;选择用户：&#34;);\n        UserReferenceField userReferenceField = new UserReferenceField(new UserReferenceTableView());\n\n        GridPane gridPane = new GridPane();\n        gridPane.setPadding(new Insets(10));\n        gridPane.setVgap(10);\n        gridPane.setHgap(10);\n\n        ColumnConstraints col1 = new ColumnConstraints();\n        col1.setPercentWidth(40);\n\n        ColumnConstraints col2 = new ColumnConstraints();\n        col2.setPercentWidth(60);\n\n        gridPane.getColumnConstraints().addAll(col1, col2);\n\n        gridPane.add(lblUser, 0, 0);\n        gridPane.add(userReferenceField, 1, 0);\n\n        GridPane.setHalignment(lblUser, HPos.RIGHT);\n\n        Button buttonPrint = new Button(&#34;打印参照信息&#34;);\n        buttonPrint.setPrefHeight(30);\n        gridPane.add(buttonPrint, 0, 1);\n\n        TextArea textConsole = new TextArea();\n        gridPane.add(textConsole, 0, 2, 2, 2);\n\n        buttonPrint.setOnAction(action -&gt; {\n            UserReferenceVO userReferenceVO = userReferenceField.getObjectProperty().get();\n            if (userReferenceVO != null) {\n                textConsole.appendText(String.format(&#34;Reference pk=%s, code=%s, name=%s.%s&#34;, userReferenceVO.getPk(), userReferenceVO.getCode(), userReferenceVO.getName(), System.getProperty(&#34;line.separator&#34;)));\n            }\n        });\n\n\n        Scene scene = new Scene(gridPane, 400, 300);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n}\n</code></pre></div><p>运行效果见本文最上方。</p>", 
            "topic": [
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36252311", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 1, 
            "title": "J3003.JavaFX组件扩展（三）——EnumComboBox", 
            "content": "<p>对于枚举类，我们希望在数据库中存放一个有意义的英文字符串，在界面上显示一个有意义的中文字符串。所以为枚举类设置两个属性，如以下DataStatusEnum（数据状态枚举）：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3003;\n\n/**\n * &lt;p&gt;Title: 平台公共 -- 值对象&lt;/p&gt;\n * &lt;p&gt;Description: &lt;/p&gt;\n * &lt;p&gt;Copyright: Copyright (c) 2015&lt;/p&gt;\n * &lt;p&gt;Compary: lrJAP.com&lt;/p&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-04\n */\npublic enum DataStatusEnum {\n\n    INIT(&#34;Init&#34;, &#34;初始化&#34;),\n    NORMAL(&#34;Normal&#34;, &#34;正常&#34;),\n    FROZEN(&#34;Frozen&#34;, &#34;冻结&#34;),\n    DISCARD(&#34;Discard&#34;, &#34;作废&#34;);\n\n    private String code;\n    private String value;\n\n    DataStatusEnum(String code, String value) {\n\n        this.code = code;\n        this.value = value;\n    }\n\n    public String getCode() {\n\n        return code;\n    }\n\n    public void setCode(String code) {\n\n        this.code = code;\n    }\n\n    public String getValue() {\n\n        return value;\n    }\n\n    public void setValue(String value) {\n\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n\n        return getValue();\n    }\n}</code></pre></div><p>DataStatusEnum中，code用于持久化到数据库中，value用于在界面上展示。其中有四个枚举值。</p><p>测试类：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3003;\n\nimport javafx.application.Application;\nimport javafx.geometry.HPos;\nimport javafx.geometry.Insets;\nimport javafx.scene.Scene;\nimport javafx.scene.control.ComboBox;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.layout.ColumnConstraints;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Priority;\nimport javafx.stage.Stage;\n\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class TestEnumComboBox extends Application {\n\n    public static void main(String[] args) {\n\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label lblEnum = new Label(&#34;数据状态：&#34;);\n        ComboBox&lt;DataStatusEnum&gt; comboEnum = new ComboBox&lt;&gt;();\n\n        TextArea textConsole = new TextArea();\n\n        GridPane gridPane = new GridPane();\n        gridPane.setPadding(new Insets(10));\n        gridPane.setVgap(10);\n        gridPane.setHgap(10);\n\n        ColumnConstraints col1 = new ColumnConstraints();\n        col1.setPercentWidth(40);\n\n        ColumnConstraints col2 = new ColumnConstraints();\n        col2.setPercentWidth(60);\n\n        gridPane.getColumnConstraints().addAll(col1, col2);\n        gridPane.addRow(0, lblEnum, comboEnum);\n\n        // label右对齐\n        GridPane.setHalignment(lblEnum, HPos.RIGHT);\n        // 使用Combobox充满整个Cell\n        comboEnum.setMaxWidth(Double.MAX_VALUE);\n        GridPane.setHgrow(comboEnum, Priority.ALWAYS);\n        // 为ComboBox赋值\n        comboEnum.getItems().setAll(DataStatusEnum.values());\n\n        // 监听ComboBox变化\n        comboEnum.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -&gt;\n                textConsole.appendText(String.format(&#34;选中的枚举信息，code=%s, value=%s。%s&#34;, newValue.getCode(), newValue.getValue(), System.getProperty(&#34;line.separator&#34;))))\n        ;\n\n        gridPane.add(textConsole, 0, 1, 2, 2);\n\n        Scene scene = new Scene(gridPane, 400, 300);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n}\n\n</code></pre></div><p>运行效果：</p><figure data-size=\"normal\"><noscript><img data-rawheight=\"578\" src=\"https://pic4.zhimg.com/v2-42cb3193b2012a776a6fd6e73659cb63_b.jpg\" data-size=\"normal\" data-rawwidth=\"702\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic4.zhimg.com/v2-42cb3193b2012a776a6fd6e73659cb63_r.jpg\"/></noscript><img data-rawheight=\"578\" src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;578&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"702\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic4.zhimg.com/v2-42cb3193b2012a776a6fd6e73659cb63_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-42cb3193b2012a776a6fd6e73659cb63_b.jpg\"/></figure>", 
            "topic": [
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36251684", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 3, 
            "title": "J3002.JavaFX组件扩展（二）——StringField", 
            "content": "<p>我们在界面上处理String类型的数据时，一般需要做到以下基本控制：</p><p>一、提供默认值；</p><p>二、确认是否可以为空；</p><p>三、限定最大输入长度（支持中文判断）；</p><p>JavaFX提供的TextField并没有提供上述功能，所以我们需要对其进行扩展。</p><p>StringField类：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3002;\n\nimport javafx.beans.property.IntegerProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.scene.control.TextField;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class StringField extends TextField {\n\n    private IntegerProperty maxLength = new SimpleIntegerProperty();\n\n    public StringField() {\n\n        this(-1, null);\n    }\n\n    public StringField(final Integer maxLength) {\n\n        this(maxLength, null);\n    }\n\n    public StringField(Integer maxLength, final String defaultValue) {\n\n        super();\n        // 限制输入最大长度\n        textProperty().addListener((observableValue, oldValue, newValue) -&gt; {\n\n            if (!checkValueLengthValid(newValue)) {\n                setText(oldValue);\n            }\n        });\n        // 设置最大允许长度\n        if (maxLength == null) {\n            maxLength = -1;\n        }\n        setMaxLength(maxLength);\n        if (isNotBlank(defaultValue)) {\n            // 设置默认值\n            setText(defaultValue);\n        }\n    }\n\n    protected boolean checkValueLengthValid(final String value) {\n\n        if (getMaxLength() != null &amp;&amp; getMaxLength() &gt; 0 &amp;&amp; isNotBlank(getText()) &amp;&amp; lenOfChinesString(value) &gt; getMaxLength()) {\n            return Boolean.FALSE;\n        }\n        return Boolean.TRUE;\n    }\n\n    public Integer getMaxLength() {\n\n        return maxLength.get();\n    }\n\n    public IntegerProperty maxLengthProperty() {\n\n        return maxLength;\n    }\n\n    public void setMaxLength(Integer maxLength) {\n\n        this.maxLength.set(maxLength);\n    }\n\n    // 建议使用apache commons-lang3中提供的StringUtils类\n    public static boolean isNotBlank(final String str) {\n\n        return (str != null &amp;&amp; !&#34;&#34;.equalsIgnoreCase(str));\n    }\n\n    // 应作为工具方法\n    public static int lenOfChinesString(final String str) {\n\n        int len = 0;\n        for (int i = 0; i &lt; str.length(); i++) {\n            char c = str.charAt(i);\n            if (c &gt;= &#39;\\u4e00&#39; &amp;&amp; c &lt;= &#39;\\u9fa5&#39;) {\n                len += 2;\n            } else {\n                len++;\n            }\n        }\n        return len;\n    }\n}\n</code></pre></div><p>测试类：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j3002;\n\nimport javafx.application.Application;\nimport javafx.geometry.HPos;\nimport javafx.geometry.Insets;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Label;\nimport javafx.scene.layout.ColumnConstraints;\nimport javafx.scene.layout.GridPane;\nimport javafx.stage.Stage;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrJAP.com&lt;br&gt;\n * Company: lrJAP.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2018-04-29\n * @since 9.0.4\n */\npublic class TestStringField extends Application {\n\n    public static void main(String[] args) {\n\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        GridPane gridPane = new GridPane();\n        gridPane.setPadding(new Insets(10));\n        gridPane.setVgap(10);\n        gridPane.setHgap(10);\n\n        ColumnConstraints col1 = new ColumnConstraints();\n        col1.setPercentWidth(40);\n\n        ColumnConstraints col2 = new ColumnConstraints();\n        col2.setPercentWidth(60);\n\n        gridPane.getColumnConstraints().addAll(col1, col2);\n\n        // 在GridPane中放置两个StringField\n        Label lblCode = new Label(&#34;编码：&#34;);\n        StringField stringCode = new StringField();\n        // 设置最大输入长度\n        stringCode.setMaxLength(8);\n\n        Label lblName = new Label(&#34;名称：&#34;);\n        // 设置最大输入长度以及默认值\n        StringField stringName = new StringField(16, &#34;DemoName&#34;);\n\n        // label右对齐\n        GridPane.setHalignment(lblCode, HPos.RIGHT);\n        GridPane.setHalignment(lblName, HPos.RIGHT);\n\n        gridPane.addRow(0, lblCode, stringCode);\n        gridPane.addRow(1, lblName, stringName);\n\n        Scene scene = new Scene(gridPane, 400, 300);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n}\n</code></pre></div><p>运行效果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-84dd8d0cf79caec55a9af1105ece14c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic1.zhimg.com/v2-84dd8d0cf79caec55a9af1105ece14c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;578&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic1.zhimg.com/v2-84dd8d0cf79caec55a9af1105ece14c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-84dd8d0cf79caec55a9af1105ece14c0_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "这个例子非常好啊", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36251626", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 5, 
            "title": "J3001.JavaFX组件扩展（一）——IntegerField、DecimalField和CurrencyField", 
            "content": "<p>我们在处理界面展现时，对于整型、浮点型、金额类型的数据时，希望界面组件至少已经处理了以下事项：</p><p>1、不接受非法输入。如对于整型来说，只能输入数字、负号，并且不允许超过当前平台上整形数值的最大值。</p><p>2、使用千分位对输入的数据进行格式化。</p><p>3、如果是货币型，则获取当前所在区域的货币符号等信息，并据此进行数据格式化。</p><p>对于界面处理人员来说，这是对开发组件库最基本的要求。但是实际上，JavaFX没有提供这些或相似的组件。开源组件中也没有找到类似的组件。著名的ControlsFX组件库的开发者额外提供了一个MoneyField，但功能比较弱，并且支持也不算好。</p><p>使用Java做界面，你得有这样一种觉悟：JDK提供的界面功能，有时候是比较弱的，甚至是比较弱智的，得自行不断丰富、完善自己的组件库。有时可以采用一些第三方的类库，有时一些特别基础的组件，也得自己写。可能Oracle认为每一个Java界面开发者首先都是合格的界面组件开发人员。</p><p>想写这三个组件很久了，一直没有时间。昨天我下班后，坐在新电脑前，发了一会儿呆后，花了几个小时实现了这三个组件。今天上班前，测试完善了一下，感觉可以放出来，供大家参考了。</p><p>先看一下效果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-99d8c854d748e89b532333a10b3e6b56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb\" width=\"1052\" data-original=\"https://pic3.zhimg.com/v2-99d8c854d748e89b532333a10b3e6b56_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1052&#39; height=&#39;578&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1052\" data-original=\"https://pic3.zhimg.com/v2-99d8c854d748e89b532333a10b3e6b56_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-99d8c854d748e89b532333a10b3e6b56_b.jpg\"/></figure><p>有三个输入框，分别只接受Integer、Decimal（4位小数）、Currency类型的数据。并提供两个按钮，一个是打印数值，一个是通过setText()的方式给Decimal赋值。</p><p>直接放代码。</p><p>NumberTypeEnum枚举类，用于区分不同类型的输入数据，以便于基类分别处理。</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.foundation.ui.javafx.control;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: AbstractNumberField及其子类支持的数据类型 &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-27\n */\npublic enum NumberTypeEnum {\n    INTEGER,\n    CURRENCY,\n    DECIMAL;\n}\n</code></pre></div><p>AbstractNumberField基类，封装了大多数行为，这是最重要的一个类。</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.foundation.ui.javafx.control;\n\nimport java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyEvent;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: 整数、高精度浮点数、货币 数值输入框的虚拟基类，自动校验输入合法性，自动增加货币符号、千分位 &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-27\n */\npublic abstract class AbstractNumberField extends TextField {\n\n    private NumberTypeEnum numberType;\n\n    private static final String DEFAULT_NUMBER_SEPARTOR_FORMAT = &#34;,###&#34;;\n\n    private final static DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n\n    public AbstractNumberField(NumberTypeEnum numberType) {\n\n        super();\n        this.numberType = numberType;\n        setAlignment(Pos.CENTER_RIGHT);\n        // 输入时的有效性检查\n        addEventFilter(KeyEvent.KEY_TYPED, event -&gt; {\n\n            if (!isValid(getText())) {\n                event.consume();\n            }\n        });\n        // 格式化\n        textProperty().addListener((observableValue, oldValue, newValue) -&gt; {\n\n            if (!isValid(newValue)) {\n                setText(oldValue);\n            }\n            setText(formatValue(getFormatter()));\n        });\n    }\n\n    /**\n     * 格式化数值\n     *\n     * @param valueFormatter 格式\n     * @return\n     */\n    private String formatValue(final String valueFormatter) {\n\n        if (&#34;-&#34;.equals(getText())) {\n            return getText();\n        }\n        String currString = null;\n        if (StringUtils.isNotBlank(getText())) {\n            if (getText().endsWith(&#34;.&#34;) || getText().endsWith(getCurrencySymbols())) {\n                return getText();\n            }\n            DecimalFormat numberFormatter = new DecimalFormat(valueFormatter);\n            if (NumberTypeEnum.INTEGER == this.numberType) {\n                Integer currValue = getIntegerValue();\n                currString = numberFormatter.format(currValue);\n            } else {\n                BigDecimal currValue = getDecimalValue();\n                currString = numberFormatter.format(currValue);\n            }\n        }\n        return currString;\n    }\n\n    /**\n     * 数值有效性检查\n     *\n     * @param value 带格式的字符串\n     * @return\n     */\n    private boolean isValid(final String value) {\n\n        if (StringUtils.isBlank(value) || value.equals(&#34;-&#34;)) {\n            return true;\n        }\n\n        try {\n            if (NumberTypeEnum.INTEGER == this.numberType) {\n                getIntegerValue();\n            } else if (NumberTypeEnum.CURRENCY == this.numberType) {\n                getDecimalValue();\n            } else {\n                getCurrencyValue();\n            }\n            return true;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * 转为整型\n     *\n     * @return\n     */\n    protected Integer getIntegerValue() {\n\n        if (StringUtils.isBlank(getText()) || &#34;-&#34;.equals(getText())) {\n            return null;\n        }\n        return Integer.valueOf(getText().replace(&#34;,&#34;, &#34;&#34;));\n    }\n\n    /**\n     * 转为BigDecimal\n     *\n     * @return\n     */\n    protected BigDecimal getDecimalValue() {\n\n        return getDecimalValue(&#39;.&#39;);\n    }\n\n    /**\n     * 转为货币\n     *\n     * @return\n     */\n    protected BigDecimal getCurrencyValue() {\n\n        return getDecimalValue(getCurrencySeparator());\n    }\n\n    private BigDecimal getDecimalValue(final char separator) {\n\n        if (StringUtils.isBlank(getText()) || &#34;-&#34;.equals(getText())) {\n            return null;\n        }\n        int pos = getText().indexOf(separator);\n        if (pos &gt; -1) {\n            final String subStr = getText().substring(pos + 1, getText().length());\n            if (subStr.length() &gt; decimalScale()) {\n                throw new NumberFormatException(&#34;Scale error.&#34;);\n            }\n        }\n        return new BigDecimal(getText().replace(&#34;,&#34;, &#34;&#34;).replace(getCurrencySymbols(), &#34;&#34;));\n    }\n\n    /**\n     * 生成用于格式化数据的字符串\n     *\n     * @return\n     */\n    protected String getFormatter() {\n\n        if (this.numberType == null) {\n            throw new RuntimeException(&#34;Type error.&#34;);\n        }\n        if (NumberTypeEnum.INTEGER == this.numberType) {\n            return getIntegerFormatter();\n        } else if (NumberTypeEnum.CURRENCY == this.numberType) {\n            return getCurrencyFormatter();\n        } else {\n            return getDecimalFormatter();\n        }\n    }\n\n    protected String getIntegerFormatter() {\n\n        return DEFAULT_NUMBER_SEPARTOR_FORMAT;\n    }\n\n    protected String getCurrencyFormatter() {\n\n        return String.format(&#34;%s%s%s&#34;, getCurrencySymbols(), DEFAULT_NUMBER_SEPARTOR_FORMAT, getScaleFormatter());\n    }\n\n    protected String getDecimalFormatter() {\n\n        return String.format(&#34;%s%s&#34;, DEFAULT_NUMBER_SEPARTOR_FORMAT, getScaleFormatter());\n    }\n\n    public abstract Integer decimalScale();\n\n    /**\n     * 为BigDecimal和货币型数据生成小数占位信息，有多少有效小数位就生成多少个占位符\n     *\n     * @return\n     */\n    protected String getScaleFormatter() {\n\n        String currFormatter = &#34;&#34;;\n        if (decimalScale() == 0) {\n            return currFormatter;\n        } else {\n            if (NumberTypeEnum.CURRENCY == this.numberType) {\n                currFormatter += getCurrencySeparator();\n            } else {\n                currFormatter += &#34;.&#34;;\n            }\n            Integer tempScale = decimalScale();\n            while (tempScale &gt; 0) {\n                currFormatter += &#34;#&#34;;\n                tempScale--;\n            }\n            return currFormatter;\n        }\n    }\n\n    /**\n     * 获取货币符号\n     *\n     * @return\n     */\n    protected static String getCurrencySymbols() {\n\n        return symbols.getCurrencySymbol();\n    }\n\n    /**\n     * 获取货币分隔符\n     *\n     * @return\n     */\n    protected static char getCurrencySeparator() {\n\n        return symbols.getMonetaryDecimalSeparator();\n    }\n\n    /**\n     * 虚拟方法。用于子类返回指定类型的数值\n     *\n     * @return\n     */\n    public abstract Object getValue();\n}\n</code></pre></div><p>以下分别是三个实现类，主要是对小数位数、返回值的类型进行处理。</p><p>CurrencyField：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.foundation.ui.javafx.control;\n\nimport java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\nimport java.util.Locale;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-27\n */\npublic class CurrencyField extends AbstractNumberField {\n\n    public CurrencyField() {\n\n        super(NumberTypeEnum.CURRENCY);\n    }\n\n    @Override\n    public Integer decimalScale() {\n\n        Locale locale = Locale.getDefault();\n        DecimalFormat formatter = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);\n        return formatter.getCurrency().getDefaultFractionDigits();\n    }\n\n    @Override\n    public BigDecimal getValue() {\n\n        return getCurrencyValue();\n    }\n}\n</code></pre></div><p>DecimalField：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.foundation.ui.javafx.control;\n\nimport java.math.BigDecimal;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-27\n */\npublic class DecimalField extends AbstractNumberField {\n\n    private Integer scale = 2;\n\n    public DecimalField() {\n\n        super(NumberTypeEnum.DECIMAL);\n    }\n\n    public DecimalField(final Integer scale) {\n\n        this();\n        if (scale &lt; 0) {\n            throw new NumberFormatException(&#34;Scale must great than equals to 0.&#34;);\n        }\n        this.scale = scale;\n    }\n\n    @Override\n    public Integer decimalScale() {\n\n        return this.scale;\n    }\n\n    @Override\n    public BigDecimal getValue() {\n\n        return getDecimalValue();\n    }\n}\n</code></pre></div><p>IntegerField：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.foundation.ui.javafx.control;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-27\n */\npublic class IntegerField extends AbstractNumberField {\n\n    public IntegerField() {\n\n        super(NumberTypeEnum.INTEGER);\n    }\n\n    @Override\n    public Integer decimalScale() {\n\n        return Integer.valueOf(0);\n    }\n\n    @Override\n    public Integer getValue() {\n\n        return getIntegerValue();\n    }\n}\n</code></pre></div><p>测试类：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.test.ui.javafx.decimalfiled;\n\nimport com.lirong.foundation.ui.javafx.control.CurrencyField;\nimport com.lirong.foundation.ui.javafx.control.DecimalField;\nimport com.lirong.foundation.ui.javafx.control.IntegerField;\nimport java.math.BigDecimal;\nimport javafx.application.Application;\nimport javafx.geometry.HPos;\nimport javafx.geometry.Insets;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.layout.*;\nimport javafx.stage.Stage;\n\n/**\n * &lt;p&gt;Title: LiRong Java Application Platform&lt;/p&gt;\n * Description: &lt;br&gt;\n * Copyright: CorpRights lrjap.com&lt;br&gt;\n * Company: lrjap.com&lt;br&gt;\n *\n * @author yujj\n * @version 1.1.1\n * @date 2017-12-27\n */\npublic class TestNumberField extends Application {\n\n    public static void main(String[] args) {\n\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n\n        ColumnConstraints columnLabel = new ColumnConstraints();\n        columnLabel.setPrefWidth(120);\n        columnLabel.setHalignment(HPos.RIGHT);\n\n        ColumnConstraints columnControll = new ColumnConstraints();\n        columnControll.setHgrow(Priority.ALWAYS);\n\n        GridPane gridPane = new GridPane();\n        gridPane.setPadding(new Insets(10));\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.getColumnConstraints().addAll(columnLabel, columnControll);\n\n        Label lblInteger = new Label(&#34;Integer：&#34;);\n        IntegerField integerTextField = new IntegerField();\n        integerTextField.setPromptText(&#34;Please input a integer value&#34;);\n        gridPane.add(lblInteger, 0, 0);\n        gridPane.add(integerTextField, 1, 0);\n\n        Label lblDecimal = new Label(&#34;Decimal：&#34;);\n        DecimalField decimalField = new DecimalField(4);\n        decimalField.setPromptText(&#34;Please input a decimal value&#34;);\n        gridPane.add(lblDecimal, 0, 1);\n        gridPane.add(decimalField, 1, 1);\n\n        Label lblCurrency = new Label(&#34;Currency：&#34;);\n        CurrencyField currencyField = new CurrencyField();\n        currencyField.setPromptText(&#34;Please input a currency value&#34;);\n        gridPane.add(lblCurrency, 0, 2);\n        gridPane.add(currencyField, 1, 2);\n\n        TextArea textConsole = new TextArea();\n        textConsole.setEditable(Boolean.FALSE);\n        gridPane.add(textConsole, 0, 6, 2, 6);\n\n        HBox toolBar = new HBox();\n        toolBar.setPadding(new Insets(10));\n        toolBar.setSpacing(10);\n\n        Button buttonPrintValue = new Button(&#34;PrintValue&#34;);\n        buttonPrintValue.setMinSize(75, 30);\n        buttonPrintValue.setOnAction(action -&gt; {\n\n            final String LINE_SEP = System.getProperty(&#34;line.separator&#34;);\n\n            StringBuilder sbInfo = new StringBuilder();\n            sbInfo.append(String.format(&#34;%s=%s&#34;, &#34;IntegerField Value&#34;, integerTextField.getValue())).append(LINE_SEP).append(LINE_SEP);\n            sbInfo.append(String.format(&#34;%s=%s&#34;, &#34;DecimalField Value&#34;, decimalField.getValue())).append(LINE_SEP).append(LINE_SEP);\n            sbInfo.append(String.format(&#34;%s=%s&#34;, &#34;CurrencyField Value&#34;, currencyField.getValue())).append(LINE_SEP);\n            textConsole.setText(sbInfo.toString());\n        });\n\n        Button buttonSetValue = new Button(&#34;SetValue&#34;);\n        buttonSetValue.setMinSize(75, 30);\n        buttonSetValue.setOnAction(action -&gt; decimalField.setText(new BigDecimal(&#34;2080280808.2223&#34;).toString()));\n\n        toolBar.getChildren().addAll(buttonPrintValue, buttonSetValue);\n        gridPane.add(toolBar, 0, 4, 2, 2);\n\n        BorderPane container = new BorderPane();\n        container.setCenter(gridPane);\n\n        Scene scene = new Scene(container, 600, 300);\n        primaryStage.setTitle(&#34;IntegerField、DecimalField、CurrencyField 测试&#34;);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n}\n</code></pre></div><p>当然，估计使用正则可能会有更简单的实现方式。有时间我再研究一下。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": [
                {
                    "userName": "keyboard2109", 
                    "userLink": "https://www.zhihu.com/people/6f329b1b86501003f1f4a8aebab029c7", 
                    "content": "可能也有观点会说判断输入是否合法这样的活应该算业务逻辑，不应该做到泛用的界面组件里吧。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤独前行的老余", 
                            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
                            "content": "<p>首先，组件要支持这些特性；然后才是业务数据根据业务逻辑，确认是否使用这些特性。我理解是这样。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "keyboard2109"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30882888", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 1, 
            "title": "J1003.JavaFX属性和绑定01——简单对象", 
            "content": "<p><b>JavaBean扩展</b></p><p>为了实现基于JavaBean的属性、绑定以及事件机制，JavaFX对JavaBean进行了扩展，JavaBean不再是POJO，显得更加“重量级”一些。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>JavaFX属性</b></p><p>JavaFX为Java通用包装类提供了通用的属性包装类，以实现事件监听、数据绑定等功能。如下表：</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-3ca63cc0471aec46f63a571cef9a5a6c_b.jpg\" data-caption=\"\" data-rawwidth=\"438\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb\" width=\"438\" data-original=\"https://pic1.zhimg.com/v2-3ca63cc0471aec46f63a571cef9a5a6c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;438&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"438\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"438\" data-original=\"https://pic1.zhimg.com/v2-3ca63cc0471aec46f63a571cef9a5a6c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3ca63cc0471aec46f63a571cef9a5a6c_b.jpg\"/></figure><p>所有这些类都是Observable接口的实现类，以上只是示例了部分，详细类见javafx.beans.property包下。</p><p>JavaFX中的Property体系没有实现Serializable接口，所以无法跨JVM传递。也就是说，应用服务器无法向客户端返回这类信息；客户端也无法将这类信息传递给应用服务器。这给我们开发B/S应用系统造成了困扰。</p><p>由于需要进行值监听等操作，所以JavaFX的Property对空属性比较敏感，我们在写代码时要特别关注。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>JavaFX Property对空属性的敏感</b></p><p>如果Property没有初始化，则对其操作时会报出空指针。</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j1003;\n\nimport javafx.beans.property.StringProperty;\n\npublic class DemoFXBean {\n\n   /**\n    * 编码\n    */\n   private StringProperty test_code;\n\n   /**\n    * 名称\n    */\n   private StringProperty test_name;\n\n   public String getTest_code() {\n\n       return test_code.get();\n   }\n\n   public StringProperty test_codeProperty() {\n\n       return test_code;\n   }\n\n   public void setTest_code(String test_code) {\n\n       this.test_code.set(test_code);\n   }\n\n   public String getTest_name() {\n\n       return test_name.get();\n   }\n\n   public StringProperty test_nameProperty() {\n\n       return test_name;\n   }\n\n   public void setTest_name(String test_name) {\n\n       this.test_name.set(test_name);\n   }\n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>我们可以看到，J<b>avaFX Bean中，每个属性都会有三个方法</b>：</p><p>1、getter值的方法，如getTest_code();</p><p>2、setter值的方法，如setTest_code(String test_code);</p><p>3、获取属性的方法，如test_codeProperty();</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当我们使用以下代码进行测试时：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j1003;\n\npublic class TestFXBean {\n\n   public static void main(String[] args) {\n\n       DemoFXBean demoFXBean = new DemoFXBean();\n       demoFXBean.setTest_code(&#34;TestCode&#34;);\n   }\n}</code></pre></div><p>控制台打印如下错误信息：</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-a419a6411a6ddbac01aadb84319f65b4_b.jpg\" data-caption=\"\" data-rawwidth=\"734\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb\" width=\"734\" data-original=\"https://pic1.zhimg.com/v2-a419a6411a6ddbac01aadb84319f65b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;734&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"734\" data-rawheight=\"134\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"734\" data-original=\"https://pic1.zhimg.com/v2-a419a6411a6ddbac01aadb84319f65b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a419a6411a6ddbac01aadb84319f65b4_b.jpg\"/></figure><p>从DemoFXBean的代码可以看出，对属性操作的三个方法，都是基于Property进行的。所以如果不初始化Property，get、set时，就会发生空指针异常。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一个简单的JavaFX Bean</b></p><p>当Bean中某个字段值发生变化时，打印信息并修改其它值。我们把DemoFXBean修改一下：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j1003;\n\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\n\npublic class DemoFXBean {\n\n   /**\n    * 编码\n    */\n   private StringProperty test_code = new SimpleStringProperty();\n\n   /**\n    * 名称\n    */\n   private StringProperty test_name = new SimpleStringProperty();\n\n   public DemoFXBean() {\n\n       super();\n       initListener();\n   }\n\n   private void initListener() {\n\n       // 监听test_code属性的变化，同时修改其它属性值\n       test_codeProperty().addListener((observable, oldValue, newValue) -&gt; {\n\n           System.out.println(String.format(&#34;test_code changed. oldValue=%s, newValue=%s&#34;, oldValue, newValue));\n           // 设置其它属性值\n           setTest_name(String.format(&#34;%s 的名称&#34;, newValue));\n       });\n\n       // 监听test_name属性的变化\n       test_nameProperty().addListener((observable, oldValue, newValue) -&gt; {\n\n           System.out.println(String.format(&#34;test_name changed. oldValue=%s, newValue=%s&#34;, oldValue, newValue));\n       });\n   }\n\n   public String getTest_code() {\n\n       return test_code.get();\n   }\n\n   public StringProperty test_codeProperty() {\n\n       return test_code;\n   }\n\n   public void setTest_code(String test_code) {\n\n       this.test_code.set(test_code);\n   }\n\n   public String getTest_name() {\n\n       return test_name.get();\n   }\n\n   public StringProperty test_nameProperty() {\n\n       return test_name;\n   }\n\n   public void setTest_name(String test_name) {\n\n       this.test_name.set(test_name);\n   }\n}</code></pre></div><p>主要修改了以下内容：</p><p>1、初始化Property；</p><p>2、增加监听器；</p><p>再运行TestFXBean测试类时，控制台打印如下信息：</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-03cccfc0863053c02ec4758148234ce4_b.jpg\" data-caption=\"\" data-rawwidth=\"551\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb\" width=\"551\" data-original=\"https://pic1.zhimg.com/v2-03cccfc0863053c02ec4758148234ce4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;551&#39; height=&#39;118&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"551\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"551\" data-original=\"https://pic1.zhimg.com/v2-03cccfc0863053c02ec4758148234ce4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-03cccfc0863053c02ec4758148234ce4_b.jpg\"/></figure><p>可以看到，两个监听器都产生了预期的动作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>JavaBean的属性监听机制</b></p><p>如前所述，JavaFX的Property由于没有实现序列化，所以无法跨JVM传递。所以我们要有一种JavaFX Bean和JavaBean之间的包装、转换机制，使Bean能够跨JVM。这种机制是我们后续在B/S框架中使用JavaFX的必要准备。</p><p>我们的方法是：改造javaBean，通过改造后的JavaBean包装生成JavaFX Bean，并使JavaBean和JavaFX Bean之间的属性实现双向联动。</p><p><b>增加一个DemoJavaBean，为其实现属性监听</b>：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j1003;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport java.io.Serializable;\n\npublic class DemoJavaBean implements Serializable {\n\n   private static final long serialVersionUID = -6499105304636177551L;\n\n   protected final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);\n\n   /**\n    * 编码\n    */\n   private String test_code;\n\n   /**\n    * 名称\n    */\n   private String test_name;\n\n   public String getTest_code() {\n\n       return test_code;\n   }\n\n   public void setTest_code(String test_code) {\n\n       final String oldValue = this.test_code;\n       this.test_code = test_code;\n       propertyChangeSupport.firePropertyChange(&#34;test_code&#34;, oldValue, this.test_code);\n   }\n\n   public String getTest_name() {\n\n       return test_name;\n   }\n\n   public void setTest_name(String test_name) {\n\n       final String oldValue = this.test_name;\n       this.test_name = test_name;\n       propertyChangeSupport.firePropertyChange(&#34;test_name&#34;, oldValue, this.test_name);\n   }\n\n   public void addPropertyChangeListener(PropertyChangeListener listener) {\n\n       propertyChangeSupport.addPropertyChangeListener(listener);\n   }\n\n   public void removePropertyChangeListener(PropertyChangeListener listener) {\n\n       propertyChangeSupport.removePropertyChangeListener(listener);\n   }\n}</code></pre></div><p>需要注意的是：</p><p>1、为DemoJavaBean增加了PropertyChangeSupport属性，并增加了两个相关方法addPropertyChangeListener和removePropertyChangeListener；</p><p>2、在setter中，产生属性变化事件，并传递修改前、修改后的值；</p><p>3、该类实现了序列化接口；</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>增加DemoJavaFXBean类：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j1003;\n\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\nimport javafx.beans.property.adapter.JavaBeanStringPropertyBuilder;\n\npublic class DemoJavaFXBean {\n\n   private DemoJavaBean javaBean;\n\n   /**\n    * 编码\n    */\n   private StringProperty test_code = new SimpleStringProperty();\n\n   /**\n    * 名称\n    */\n   private StringProperty test_name = new SimpleStringProperty();\n\n   /**\n    * DemoJavaFXBean的构造器，必须传入一个DemoJavaBean，用于初始化属性\n    *\n    * @param javaBean\n    */\n   public DemoJavaFXBean(DemoJavaBean javaBean) {\n\n       super();\n       this.javaBean = javaBean;\n       initProperty();\n   }\n\n   /**\n    * 通过 DemoJavaBean 初始化 DemoJavaFXBean 的属性\n    */\n   private void initProperty() {\n\n       // 根据JavaBean初始化JavaFX Bean的属性\n       try {\n           /* 编码 */\n           test_code = JavaBeanStringPropertyBuilder.create().bean(this.javaBean).name(&#34;test_code&#34;).build();\n           /* 名称 */\n           test_name = JavaBeanStringPropertyBuilder.create().bean(this.javaBean).name(&#34;test_name&#34;).build();\n       } catch (Exception ex) {\n           throw new RuntimeException(ex);\n       }\n   }\n\n   public DemoJavaBean getJavaBean() {\n\n       return javaBean;\n   }\n\n   public void setJavaBean(DemoJavaBean javaBean) {\n\n       this.javaBean = javaBean;\n       // 设置JavaBean后，需要重新初始化JavaFX Bean\n       initProperty();\n   }\n\n   public String getTest_code() {\n\n       return test_code.get();\n   }\n\n   public StringProperty test_codeProperty() {\n\n       return test_code;\n   }\n\n   public void setTest_code(String test_code) {\n\n       this.test_code.set(test_code);\n   }\n\n   public String getTest_name() {\n\n       return test_name.get();\n   }\n\n   public StringProperty test_nameProperty() {\n\n       return test_name;\n   }\n\n   public void setTest_name(String test_name) {\n\n       this.test_name.set(test_name);\n   }\n}</code></pre></div><p>需要注意的是：</p><p>1、DemoJavaFXBean的构造器，授受一个DemoJavaBean，以进行本类的属性初始化；</p><p>2、通过initProperty方法进行属性初始化；</p><p>3、该类没有实现序列化接口；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>测试类TestJavaBeanFX，主要用于测试属性修改是否在JavaFX Bean和JavaBean之间自动联动：</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.lirong.javafx.demo.j1003;\n\npublic class TestJavaBeanFX {\n\n   public static void main(String[] args) {\n\n       DemoJavaBean demoJavaBean = new DemoJavaBean();\n\n       DemoJavaFXBean demoJavaFXBean = new DemoJavaFXBean(demoJavaBean);\n\n       final String strFormatter = &#34;JavaFX Bean PropertyName=%s, PropertyValue=%s; Java Bean PropertyName=%s, PropertyValue=%s&#34;;\n       // 修改Java Bean的属性，查看JavaFX Bean相应的属性是否同步修改了\n       demoJavaFXBean.getJavaBean().setTest_code(&#34;TestCode&#34;);\n       System.out.println(String.format(strFormatter, &#34;Code&#34;, demoJavaFXBean.getTest_code(), &#34;Code&#34;, demoJavaFXBean.getJavaBean().getTest_code()));\n\n       // 修改JavaFX Bean的属性，查看Java Bean相应的属性是否同步修改了\n       demoJavaFXBean.setTest_name(&#34;TestName&#34;);\n       System.out.println(String.format(strFormatter, &#34;Name&#34;, demoJavaFXBean.getTest_name(), &#34;Name&#34;, demoJavaFXBean.getJavaBean().getTest_name()));\n   }\n}</code></pre></div><p>控制台输出以下信息：</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-315be7ffb4242a59685565f7e85bd497_b.jpg\" data-caption=\"\" data-rawwidth=\"967\" data-rawheight=\"119\" class=\"origin_image zh-lightbox-thumb\" width=\"967\" data-original=\"https://pic4.zhimg.com/v2-315be7ffb4242a59685565f7e85bd497_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;967&#39; height=&#39;119&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"967\" data-rawheight=\"119\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"967\" data-original=\"https://pic4.zhimg.com/v2-315be7ffb4242a59685565f7e85bd497_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-315be7ffb4242a59685565f7e85bd497_b.jpg\"/></figure><p>我们可以看到，修改JavaFX Bean或Java Bean的属性值，将同步两个Bean的属性值。</p><p>需要注意的是：</p><p>1、必须为JavaBean实现属性变化监听事件机制；</p><p>2、通过JavaBean构造JavaFX Bean，并实现属性初始化；</p><p>通过本例也可以进一步看出：<b>在JavaFX属性机制中，属性不可为空，属性值可以为空</b>。我们在TestJavaBeanFX类中实例化DemoJavaBean时，没有为它的任何属性赋值。但在初始化DemoJavaFXBean时，通过JavaFX的PropertyBuilder产生属性值为空的非空属性。</p>", 
            "topic": [
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30840407", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 5, 
            "title": "J1002.JavaFX简介", 
            "content": "<p><b>引言</b></p><p>2008年12月05日，SUN发布了JavaFX第一个正式版本，以期望Java在UI端能够更好地应用于开发富客户端的互联网应用(Rich Internet Cliet)。</p><p>2011年发布的JavaFX2.0取消之前基于Script的模式，改为使用原生Java结合CSS等进行了重构。</p><p>2014年发布的JavaFX8.0，与JDK1.8进行整合，并运用JDK8的新特性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们在上一篇文章中，已经简要地介绍了JavaUI框架的发展历史及特性。从这篇文章开始介绍JavaFX的特性，使用方法，优缺点以及注意事项等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>总体来说，使用JavaFX开发界面，要比Swing、SWT等要快捷一些。但作为一个已经发展了10多年的“主流”Java UI框架，在功能丰富程度以及一些处理细节上，还有比较多的欠缺甚至不方便、官方无解的问题。举几个例子：</p><p>1、JavaFX的Alert对话话比Swing提供的好用、漂亮，但是在Swing中使用JavaFX Alert时，由于其各自的派遣线程的问题，无法使用Modal模式。这种问题简直让人抓狂。</p><p>2、TableView在样式、某些处理机制方面，同样不可理喻。默认情况下，不管TableView中有多少数据，都会为整个表格绘制表格线；在编辑单元格时，必须敲回车键才能提交修改，如果点击其它单元格、其它行，或者敲Tab键，TableView将自动Cancel修改的内容；提供的TableCell太少，功能太弱。像必须敲回车才能提交修改的问题，开发人员N久以前就作为Bug提交给SUN/Oracle了，有人说JDK9会修复这个问题，但实际上我看了JDK9.0.1中相关的源代码，并没有。开发人员写了几行较详细的注释，说明这个问题不是他的责任，你们自行想办法。</p><p>这类问题都留给开发人员自行解决，个人感觉是十分说不过去的。在开发lrJAP平台的过程中，我数次被这样的问题折腾，甚至在日志中写下了这样一段话：</p><p><i>2017-08-25，越来越感觉JavaFX与主流JS(如ExtJS)有差距，今天已经特别想放弃JavaFX，而且特别到一定要把这句话记下来。唉。</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p>拔特，问题总是能够被解决的，所以我们继续。先介绍介绍一下JavaFX与JS类框架相比的一些特性。</p><p>1、JavaFX已经与JDK融合，理论上可以使用JDK所有功能，以及所有的第三方Java类库，只要资源能够加载到JVM中，JavaFX就可以使用这些资源。这为我们在各方面都提供了便利。并且降低了上手的难度。</p><p>2、提供了较丰富的基础UI组件以及布局。特别是BorderPane，有利于界面模式的开发。可以通过CSS进行代码风格控制。</p><p>3、提供了基础的数据绑定功能，可以实现View-Model之间的双向数据(属性)绑定，并能够实现较复杂的事件处理机制。简化了与数据展现、控制相关的代码。</p><p>4、提供了使用比较方便的事件机制，并且可以与JDK8提供的Lamda结合，简化事件处理的代码。</p><p>5、提供了一些基本的图表。如饼图、折线图等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>个人感觉，JavaFX比较适用于以下业务场景：</p><p>1、基于企业内部局域网的应用，或基于相对比较封闭的网络环境下的集团级应用。也就是应用于传统的企业内部管理、业务系统的开发。</p><p>2、适用于业务数据结构复杂、业务处理逻辑复杂、有一定的性能需求，但对界面炫酷程度没有极端要求的应用。</p><p>3、功能界面可以被抽象、归类，希望在此基础上，实现快速开发。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>基于JavaFX的应用如果运行在Internet环境中，则安全、带宽等方面要有相应的保证。个人感觉，对于一般用户来说，使用基于JavaFX的应用，主要困难在于下载、安装、配置JRE，以及基于信任、安全方面的考虑。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第一个JavaFX程序：HelloWorld</b></p><p>所有示例程序，除非特别说明，否则一律基于以下主要环境：Win10，IntelliJ IDEA，JDK 1.8_151。</p><p>为了能够更清楚地说明代码结构以及处理细节，代码中的注释有点过度：</p><p>package com.lirong.javafx.demo;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>import javafx.application.Application;</p><p>import javafx.geometry.Insets;</p><p>import javafx.scene.Scene;</p><p>import javafx.scene.control.Alert;</p><p>import javafx.scene.control.Button;</p><p>import javafx.scene.layout.BorderPane;</p><p>import javafx.scene.layout.HBox;</p><p>import javafx.stage.Stage;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>public class HelloWorldUI extends Application {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>   private static final double DEFAULT_BUTTOH_HEIGHT = 30;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>   public static void main(String[] args) {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 启动应用</p><p>       Application.launch(args);</p><p>   }</p><p class=\"ztext-empty-paragraph\"><br/></p><p>   @Override</p><p>   public void start(Stage stage) throws Exception {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       Button buttonHelloWorld = new Button(&#34;HelloWorld&#34;);</p><p>       // 设置按钮大小</p><p>       buttonHelloWorld.setPrefSize(100, DEFAULT_BUTTOH_HEIGHT);</p><p>       // 事件处理</p><p>       buttonHelloWorld.setOnAction(action -&gt; {</p><p>           // 弹出模态对话框</p><p>           Alert alert = new Alert(Alert.AlertType.INFORMATION);</p><p>           alert.setContentText(&#34;Hello World!&#34;);</p><p>           alert.initOwner(stage);</p><p>           alert.showAndWait();</p><p>       });</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 用于验证ToolBar中组件之间间隔的按钮，仅显示，无事件处理</p><p>       Button buttonOther = new Button(&#34;Other&#34;);</p><p>       buttonOther.setPrefSize(80, DEFAULT_BUTTOH_HEIGHT);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 模拟工具栏效果</p><p>       HBox toolBar = new HBox();</p><p>       // 设置ToolBar中控件与边界上、下、左、右的距离</p><p>       toolBar.setPadding(new Insets(10));</p><p>       // 设置ToolBar中控件之间的间隔</p><p>       toolBar.setSpacing(10);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 为ToolBar增加元素</p><p>       toolBar.getChildren().addAll(buttonHelloWorld, buttonOther);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 设置最外层的容器</p><p>       BorderPane container = new BorderPane();</p><p>       container.setTop(toolBar);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 处理应用场景，默认窗口大小为800*600</p><p>       Scene scene = new Scene(container, 800, 600);</p><p>       stage.setTitle(&#34;&#39;Hello World&#39; JavaFX Application&#34;);</p><p>       stage.setScene(scene);</p><p>       stage.show();</p><p>   }</p><p>}</p><p>运行效果如下图：</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-c3c21db360464832bf704f397d996d16_b.jpg\" data-caption=\"\" data-rawwidth=\"802\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb\" width=\"802\" data-original=\"https://pic3.zhimg.com/v2-c3c21db360464832bf704f397d996d16_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;802&#39; height=&#39;631&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"802\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"802\" data-original=\"https://pic3.zhimg.com/v2-c3c21db360464832bf704f397d996d16_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c3c21db360464832bf704f397d996d16_b.jpg\"/></figure><p>与程序逻辑无关的代码量比较少，默认的界面风格还说得过去。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第一个JavaFX Embedded in Swing程序</b></p><p>通过JavaFX提供的JFXPanel，可以“较方便”地在Swing程序中使用JavaFX组件。如下代码演示如何在JFrame中显示一个使用JavaFX控件模拟的表单信息：</p><p>首先，构造一个4列10行的JavaFX GridPane：</p><p>package com.lirong.javafx.demo.j1002.swing;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>import javafx.geometry.HPos;</p><p>import javafx.geometry.Insets;</p><p>import javafx.geometry.Pos;</p><p>import javafx.scene.control.Label;</p><p>import javafx.scene.control.TextField;</p><p>import javafx.scene.layout.ColumnConstraints;</p><p>import javafx.scene.layout.GridPane;</p><p>import javafx.scene.layout.Priority;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>public class TestGridPaneUI extends GridPane {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>   public TestGridPaneUI() {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       super();</p><p>       initUI();</p><p>   }</p><p class=\"ztext-empty-paragraph\"><br/></p><p>   private void initUI() {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 显示网格线</p><p>       setGridLinesVisible(Boolean.TRUE);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 设置间隔</p><p>       setVgap(5);</p><p>       setHgap(5);</p><p>       setPadding(new Insets(5));</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 设置为4列</p><p>       ColumnConstraints col1 = new ColumnConstraints();</p><p>       col1.setPercentWidth(20);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       ColumnConstraints col2 = new ColumnConstraints();</p><p>       col2.setPercentWidth(30);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       ColumnConstraints col3 = new ColumnConstraints();</p><p>       col3.setPercentWidth(20);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       ColumnConstraints col4 = new ColumnConstraints();</p><p>       col4.setPercentWidth(30);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       getColumnConstraints().addAll(col1, col2, col3, col4);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       // 填充控件</p><p>       int row = 0;</p><p>       int col = 0;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       while (row &lt; 10) {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           Label label01 = new Label(String.format(&#34;Row-%d,Col-%d:&#34;, row + 1, col + 1));</p><p>           label01.setAlignment(Pos.CENTER_RIGHT);</p><p>           // 右对齐</p><p>           GridPane.setHalignment(label01, HPos.RIGHT);</p><p>           add(label01, col, row);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           col++;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           if (col &gt; 3) {</p><p>               row++;</p><p>               col = 0;</p><p>           }</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           TextField text01 = new TextField();</p><p>           // 填充整个单元格</p><p>           GridPane.setHgrow(text01, Priority.ALWAYS);</p><p>           add(text01, col, row);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           col++;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           if (col &gt; 3) {</p><p>               row++;</p><p>               col = 0;</p><p>           }</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           Label label02 = new Label(String.format(&#34;Row-%d,Col-%d:&#34;, row + 1, col + 1));</p><p>           add(label02, col, row);</p><p>           // 右对齐</p><p>           GridPane.setHalignment(label02, HPos.RIGHT);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           col++;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           if (col &gt; 3) {</p><p>               row++;</p><p>               col = 0;</p><p>           }</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           TextField text02 = new TextField();</p><p>           // 填充整个单元格</p><p>           GridPane.setHgrow(text02, Priority.ALWAYS);</p><p>           add(text02, col, row);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           col++;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>           if (col &gt; 3) {</p><p>               row++;</p><p>               col = 0;</p><p>           }</p><p>       }</p><p>   }</p><p>}</p><p class=\"ztext-empty-paragraph\"><br/></p><p>然后把这个GridPane显示在JFrame中：</p><p>package com.lirong.javafx.demo.j1002.swing;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>import javafx.embed.swing.JFXPanel;</p><p>import javafx.scene.Scene;</p><p>import javax.swing.JFrame;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>public class TestSwingFX {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>   public static void main(String[] args) {</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       JFrame frame = new JFrame();</p><p>       frame.setTitle(&#34;Swing JavaFX Test&#34;);</p><p>       frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);</p><p>       frame.setSize(800, 600);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       JFXPanel jfxPanel = new JFXPanel();</p><p>       TestGridPaneUI gridPaneUI = new TestGridPaneUI();</p><p>       jfxPanel.setScene(new Scene(gridPaneUI));</p><p>       frame.add(jfxPanel);</p><p>       frame.setVisible(Boolean.TRUE);</p><p>   }</p><p>}</p><p class=\"ztext-empty-paragraph\"><br/></p><p>运行效果如下：</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-8f9cbc1d666fcef0303326ba7f535569_b.jpg\" data-caption=\"\" data-rawwidth=\"786\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb\" width=\"786\" data-original=\"https://pic2.zhimg.com/v2-8f9cbc1d666fcef0303326ba7f535569_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;786&#39; height=&#39;593&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"786\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"786\" data-original=\"https://pic2.zhimg.com/v2-8f9cbc1d666fcef0303326ba7f535569_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8f9cbc1d666fcef0303326ba7f535569_b.jpg\"/></figure><p>取消网格线后的效果：</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-6d9db8d5c56ea86862e15d50517c536e_b.jpg\" data-caption=\"\" data-rawwidth=\"786\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb\" width=\"786\" data-original=\"https://pic3.zhimg.com/v2-6d9db8d5c56ea86862e15d50517c536e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;786&#39; height=&#39;593&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"786\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"786\" data-original=\"https://pic3.zhimg.com/v2-6d9db8d5c56ea86862e15d50517c536e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6d9db8d5c56ea86862e15d50517c536e_b.jpg\"/></figure><p>关键类为JFXPanel，它是处理Swing和JavaFX界面、事件等交互的中介。</p><p>在拖放JFrame时，GridPanel将根据我们设置的比例自动缩放。</p>", 
            "topic": [
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30694468", 
            "userName": "孤独前行的老余", 
            "userLink": "https://www.zhihu.com/people/b1bd5074e274ca3754d66e7f74280947", 
            "upvote": 9, 
            "title": "J1001.Java原生桌面及Web开发浅谈", 
            "content": "<p>自从Java问世以来，在服务端开发方面取得了巨大的发展。但是在桌面/Web开发方面，一直没有得到大的发展。从最初的AWT，到Swing，再到JavaFX，Java从来没有在桌面/Web解决方案中取得重要席位，更别提占居主导地位了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>AWT</b></p><p>AWT(Abstract Window ToolKit，抽象窗口工具包)是SUN在1996年推出的UI框架。由于需要跨平台，所以AWT只能支持主流平台共有的界面组件和特性(交集），例如标签、按钮等，这就导致了AWT在组件丰富程度以及功能性等方面必然有欠缺。AWT通过创建一个与操作系统对应的Peer(对等组件)来实现组件在界面上的显示，依靠操作系统本地方法实现图形功能，属于重量级的UI框架。也就是说，当我们使用AWT构建图形界面时，实际上是调用操作系统图形库的功能，在不同的操作系统上有不同的表现。</p><p>AWT这种重型的UI框架，无论是历史还是将来，都只会作为基础设施，不会成为桌面应用的解决方案。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Swing</b></p><p>Swing是在AWT基础上构建的UI框架，全部使用Java编写。Swing提供了比AWT更轻量级、更丰富的UI组件，如树、列表、表格等。AWT是基于操作系统本地方法，所以运行速度较快，Swing是基于AWT的Java程序，采用解释方法执行。Swing绘制的界面在不同的操作系统上表现一致。虽然SUN推出Swing是希望解决AWT面临的问题，然而并没有。</p><p>国内很多开发人员对Swing颇有微词，特别是.Net和基于JS的开发人员。即使Swing基于MVC优雅地对AWT进行轻量级封装，但由于一直以来需要跨平台等问题，导致默认情况下Swing构造的应用界面巨丑无比——个人或一般的公司没有能力也没有必要实现复杂的LookAndFeel。同时，Swing一直存在易用性问题，没有像Visual Studio这样的IDE提供可视化支持，一个简单的表格界面都需要手写n多个类才能实现，实在是不胜其烦，特别是对于初学者来说更是如此。</p><p>国内很少使用原生Java来开发Web应用的，估计桌面应用都很少。但是Swing在国外还是有一定市场占有的，特别是一些大型的软硬件公司，如IBM、Oracle等，他们的软件跨平台特性是刚需，所以我们经常可以看到一些基于Swing实现的安装程序、管理工具等等。</p><p>实际上，只要拥有一定的技术实力、愿意付出足够的资源和代价，Swing也可以做得很漂亮、易用性很好。比如说我们每天都要使用的Eclipse、IntelliJ IDEA，用友NC6，以及2BizBox ERP系统等。还有诸如提供皮肤和UI组件的Substance、SwingX等第三方开源库。</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-c3ab489b0956cfdebb655ee0f078b264_b.jpg\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-c3ab489b0956cfdebb655ee0f078b264_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-c3ab489b0956cfdebb655ee0f078b264_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c3ab489b0956cfdebb655ee0f078b264_b.jpg\"/><figcaption>IntelliJ IDEA</figcaption></figure><figure><noscript><img src=\"https://pic2.zhimg.com/v2-bf382ec40861011d44d9ec87df86c0c5_b.jpg\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-bf382ec40861011d44d9ec87df86c0c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-bf382ec40861011d44d9ec87df86c0c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bf382ec40861011d44d9ec87df86c0c5_b.jpg\"/><figcaption>用友NC6</figcaption></figure><figure><noscript><img src=\"https://pic4.zhimg.com/v2-2a13c98633f4a967668dd5b7412d6507_b.jpg\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-2a13c98633f4a967668dd5b7412d6507_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1024&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-2a13c98633f4a967668dd5b7412d6507_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a13c98633f4a967668dd5b7412d6507_b.jpg\"/><figcaption>2BizBox ERP</figcaption></figure><p>上述列举的，是我见过的基于Swing实现的、效果比较炫酷的桌面应用和Web应用的代表。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>相比于桌面应用，Swing在Web方面的应用效果印证了那句话：没有最惨，只有更惨。要想让Swing能够在浏览器中运行，除了最基础的JRE之外，还需要Applet作为Swing在浏览器中显示的容器——Applet显示在浏览器中，Swing显示在Applet中。Applet能够显示在浏览器中，是基于Netscape公司当年提出的NPAPI(Netscape Plugin Application Programming Interface)技术，这家公司是最早实现浏览器商业化的，但早已经被巨硬公司用免费的IE给搞死了。让我们永远有免费的浏览器可以使用，这是微软公司做过的好事之一，虽然它本意并非如此。</p><p>随着时代的发展和技术的进步，人们对网络安全的要求越来越高，对浏览器的安全性要求也越来越高。NPAPI这种十多年前的技术，已经明显不能满足如今的要求。Google Chrome已经连JRE都禁用了，这其中有没有Oracle基于Java告Google侵权要求巨额赔偿的因素就不得而知了；微软公司也在IE中提升了对JRE的限制级别——以前还有“低”选项，如今是“较高”起步。</p><p>实际上，就我个人看来，当年Sun公司是有机会对Java的Web开发进行尝试甚至试错的——只要它愿意。结果却是Sun公司把Java一并卖给了Oracle。在IT硬件公司还没有能够把“卖服务”作为自己的利润支撑时，像IBM、Sun这样的公司，软件是为硬件服务的，甚至可以买我的小型机送你软件。</p><p>中肯一点说，基于Java的主流的MVC框架，其基本概念都和SWing有千丝万缕的关系。如果作为企业内部网使用的管理型系统、网络环境有保证、允许把一些前台UI类下载到客户端（其实我认为这是优势，应用的入口都是通过浏览器，以一点空间换取相对加快的UI响应速度，我认为还是非常值得的），使用Swing作为界面展现技术还是有优势的。即使在广域网环境中，如果能够保证每客户端与服务器之间有一定的带宽、速率、安全性等前提条件，Swing也能够有较好的表现。</p><p>Sun在发展Java桌面/Web能力方面一直心不在焉，也没有实质性推动改进或重新制定Java与浏览器相关的协议和安全标准。反而是JavaScript、HTML5等脚本类语言伴随着浏览器的发展，逐渐成为Web前端开发的主流。从AWT，到Swing，再到JavaFX，其提供的UI组件看上去都是为了解决“有没有”的问题，并不没有真正站在用户，特别是企业级应用开发的角度上去考虑提供丰富、好用的组件，解决快速开发的问题。以最常见的表格为例，Swing要写一堆代码，如果不自己封装，开箱即用、复用性几乎为零。JavaFX应该说比较Swing有一些进步，但在数据类型、操作便利性方便，与企业级应用开发的基本要求仍相去甚远，需要写一堆的TableColumn，需要自己处理复杂数据类型等。再比如Swing的布局就过于技术化，易用性太差，扩展又太麻烦。界面越复杂，代码的复杂越是呈非线性增长。</p><p>如上面几个界面所示，Java在桌面开发方面，以Sun/Oracle的标准来讲，恐怕是什么效果都能实现的，但从实际开发人员的角度来讲，只有“狗带”了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>既不注重协议和标准，又不注重易用性，让我们这些不会写JS的老程序员想起来就愤怒——写了十多年的代码了，突然发现自己不会写界面。</p><p>从Java桌面/Web前端开发所处的尴尬地位，也能够看出，前端真是不好搞。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>UI端框架的技术实现并不比服务端更复杂，但服务端主要是基于标准的容器，跟CPU、内存、存储、网络等这些具有标准、规范的基础设施打交道，而UI端的实现受制于操作系统，显得规范性不足，各显神通，所以就显得更琐碎、麻烦。有兴趣的同学，可以自行看一下JLabel这种基础Swing界面组件的实现代码。给大家瞻仰一张相关的类图：</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-8d6cbe30c80060b5b263d30cd5861d5c_b.jpg\" data-caption=\"\" data-rawwidth=\"971\" data-rawheight=\"959\" class=\"origin_image zh-lightbox-thumb\" width=\"971\" data-original=\"https://pic1.zhimg.com/v2-8d6cbe30c80060b5b263d30cd5861d5c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;971&#39; height=&#39;959&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"971\" data-rawheight=\"959\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"971\" data-original=\"https://pic1.zhimg.com/v2-8d6cbe30c80060b5b263d30cd5861d5c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8d6cbe30c80060b5b263d30cd5861d5c_b.jpg\"/></figure><p>只是一小部分主要的类和个别接口，这几个类，源代码超过5K行的也不少见。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>SWT</b></p><p>SWT(Standard Widget Toolkit，标准窗口部件）是IBM推出的开源UI组件库，希望解决AWT和Swing运用方面的问题。</p><p>SWT没有被包含在JDK或JRE中，不属性JAVA原生的UI框架。但SWT的运用较广泛，如Eclipse、WebSphere等安装程序、MAT等。SWT提供了比Swing更丰富好用的界面组件以及特性，与AWT一样，SWT通过Peer调用操作系统本地方法。同时，SWT通过使用特定操作系统的特性，加快UI组件响应时间，所以SWT需要为不同的操作系统准备安装包。与AWT一样，没有Swing的LookAndFeel功能。来看一张IBM MAT的界面：</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-ee1f506c0ddd7c47a70ac43ac5358eb9_b.jpg\" data-caption=\"\" data-rawwidth=\"804\" data-rawheight=\"573\" class=\"origin_image zh-lightbox-thumb\" width=\"804\" data-original=\"https://pic2.zhimg.com/v2-ee1f506c0ddd7c47a70ac43ac5358eb9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;804&#39; height=&#39;573&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"804\" data-rawheight=\"573\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"804\" data-original=\"https://pic2.zhimg.com/v2-ee1f506c0ddd7c47a70ac43ac5358eb9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ee1f506c0ddd7c47a70ac43ac5358eb9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>JavaFX</b></p><p>Sun在被Oracle收购前的2008年年底推出JavaFX 1.0，希望Java在RIA（RIch Internet Application）方面有所建树。JavaFX 1.0是一种Script，个人感觉巨丑无比。Oracle在2011年与JDK8一起推出了基于原生Java重构的JavaFX2.0，放弃了原先采用JavaFX Script机制。在2014年，与JDK8一起发布了JavaFX8，从此JavaFX成为JDK的一部分。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>关于JavaFX的详细介绍以及特性，可以参考Oracle官网以及相关资料。之所以写这些文章，并尝试基于JavaFX开发一款应用框架，主要考虑到JavaFX和Swing、JavaScript相比，有以下优势：</p><p>1、JavaFX与JDK已经结合在一起(特指从JDK1.8开始的JavaFX8)，JavaFX可以直接使用所有的Java资源，包括第三方类库，这为开发提供了极大的便利——不再需要学习类似JS这类前台框架的语法和特性，从UI端到业务实现都使用Java，并且做到技术和经验通用，能够降低学习成本，开发人员也不必再分什么前后端，每个开发人员都可以具备从前做到后的基本技能。</p><p>2、有JRE就可以运行，有时候这是缺点，但在企业应用中应该是可以接受的。</p><p>3、提供比较丰富的基础组件库，如ListView、TableView、HTML编辑器等，能够较便捷地设计UI基类和基本框架。</p><p>4、提供了较丰富、易用的布局器。如果没有BorderPane（上下左右中布局）等特性，我们是不会使用JavaFX的。</p><p>5、提供了界面定义工具（Oracle Scene Builder），虽然还比较土，还没有好意思提供Eclipse Plugin，但对我们来说已经基本够用，况且我们也不会依赖Scene Builder来进行界面构建，而是使用基于Spring Bean实现的“模式+装配”的方式实现界面构建。</p><p>6、支持使用CSS自定义界面风格，支持HTML5。</p><p>7、提供了较丰富的图形组件。</p><p>8、原生打印支持。</p><p>9、便于实现Activiti流程图定义、基于Excel的BI工具等对UI要求比较高的组件，这是我们比较想实现的基础组件，在Swing上我们是不敢想象的，编码工作量会十分巨大。</p><p>10、JavFX可以很方便地使用到Eclipse Plugin开发中，不需要进行额外的配置等工作，有利于开发基于Eclipse Plugin体系的可视化MDE开发工具。</p><p>使用JavaFX + Spring Bean装配机制以利于实现UI模式化开发，是我们选择JavaFX主要的情结。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，必须得忍受以下不便或问题：</p><p>1、客户端必须安装JRE。</p><p>2、JavaFX来得太晚，并且还不是很成熟。大家都在说RIA已经过时，必须使用HTML5了。要承担被人指为“老古板”的风险。但是我们认为，企业级应用中，稳定、高效才是首先要追求的目标。</p><p>3、会在客户端保存一些UI资源(jar包、配置信息等)作为Cache，以提升UI响应速度——虽然我们坚持认为在企业级应用中这是优点，但也有可能被攻击为“不是纯B/S”。</p><p>4、可能会存在安全性问题——虽然在企业级应用中，这是个大概率的伪命题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>嗯，以上四条我都看不见。</p><p></p>", 
            "topic": [
                {
                    "tag": "JavaFX", 
                    "tagLink": "https://api.zhihu.com/topics/19681096"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_137489705"
}
