{
    "title": "征服 C++", 
    "description": "也可以是你的 C++ 进化之路！", 
    "followers": [
        "https://www.zhihu.com/people/xiao-tian-long-51", 
        "https://www.zhihu.com/people/lue-lue-lue-37-50-91", 
        "https://www.zhihu.com/people/lin-xiao-xiao-25-1", 
        "https://www.zhihu.com/people/yildhd-wang", 
        "https://www.zhihu.com/people/ni-bu-dong-wo-de-shang-19", 
        "https://www.zhihu.com/people/ji-zhi-shao-nian-14", 
        "https://www.zhihu.com/people/oliver-kahn-60", 
        "https://www.zhihu.com/people/cheng-zhi-yang-89", 
        "https://www.zhihu.com/people/yohoro", 
        "https://www.zhihu.com/people/7264-1", 
        "https://www.zhihu.com/people/huang-ji-chen-66", 
        "https://www.zhihu.com/people/wang-lang-32-21", 
        "https://www.zhihu.com/people/leo-lee-58-57", 
        "https://www.zhihu.com/people/xing-kong-de-meng-shi", 
        "https://www.zhihu.com/people/po-lu-shu-kuang-29", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/bukuzao", 
        "https://www.zhihu.com/people/noeltoby", 
        "https://www.zhihu.com/people/stephen-34-51", 
        "https://www.zhihu.com/people/xin-yang-huan-zai-kong-zhong", 
        "https://www.zhihu.com/people/kingsam-61-44", 
        "https://www.zhihu.com/people/pony-lee-19", 
        "https://www.zhihu.com/people/hu-hu-ha-mo", 
        "https://www.zhihu.com/people/louis-82-71", 
        "https://www.zhihu.com/people/wei-zhang-dong-wu-13", 
        "https://www.zhihu.com/people/wxclovewzq", 
        "https://www.zhihu.com/people/dang-liu-xing-hua-guo-ni-de-bi-an", 
        "https://www.zhihu.com/people/li-yang-95-23", 
        "https://www.zhihu.com/people/shi-mi-te-shang-xiao", 
        "https://www.zhihu.com/people/zuo-yan-41-58", 
        "https://www.zhihu.com/people/ghustwb", 
        "https://www.zhihu.com/people/ANTIDARKSTAR", 
        "https://www.zhihu.com/people/jiu-qian-shi-wen", 
        "https://www.zhihu.com/people/haoxia57", 
        "https://www.zhihu.com/people/WoodYuan", 
        "https://www.zhihu.com/people/marksim-37", 
        "https://www.zhihu.com/people/da-mao-88", 
        "https://www.zhihu.com/people/dong-ting-bo-xi-mu-xie-xia-99", 
        "https://www.zhihu.com/people/shang-qin", 
        "https://www.zhihu.com/people/si-huo-fan-xing", 
        "https://www.zhihu.com/people/featherwit", 
        "https://www.zhihu.com/people/dong-yao", 
        "https://www.zhihu.com/people/ju-zhong-mi-1", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/xiesh0427", 
        "https://www.zhihu.com/people/lao-chai-gang", 
        "https://www.zhihu.com/people/su-zhu-95-16", 
        "https://www.zhihu.com/people/an-zi-91-34", 
        "https://www.zhihu.com/people/systemverilog-51", 
        "https://www.zhihu.com/people/yang-gang-69-84", 
        "https://www.zhihu.com/people/zhou-yi-92-47", 
        "https://www.zhihu.com/people/akjarjash", 
        "https://www.zhihu.com/people/lambda-Ran"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/66632654", 
            "userName": "seniusen", 
            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
            "upvote": 0, 
            "title": "二维数组和指针", 
            "content": "<h3>1. 指针是变量的地址</h3><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"o\">*</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 3\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 3\n</span><span class=\"c1\"></span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>如上面这段程序所示，通过取地址符 &amp;，指针 p 获得了变量 a 的地址，那么解引用符 * 就可以从 p 中得到变量 a 的值。</p><p>也就是说，<code>p=&amp;a</code> 和 <code>*p=a</code> 是等价的。p 是变量 a 的地址，从 p 中就可以取出 a 的值。反之，能从 p 中取出 a 的值，p 也就是变量 a 的地址。</p><h3>2. 一维数组的数组名是数组的首地址</h3><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// 一维数组的数组名就是数组的首地址\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">};</span>\n\n    <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>      <span class=\"c1\">// 2\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>    <span class=\"c1\">// 2\n</span><span class=\"c1\"></span>\n    <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>      <span class=\"c1\">// 2\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>    <span class=\"c1\">// 2\n</span><span class=\"c1\"></span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>一维数组的数组名是数组的首地址，所以 <code>int *p1 = data;</code> 让指针 p1 也指向了数组首地址。这时候 *p1 是数组的第一个元素，*(p1+1) 也即是数组的第二个元素。</p><p>又因为 *p1 是数组的第一个元素，说明 p1 是数组第一个元素的地址，所以 <code>int *p2 = &amp;data[0];</code> 与上面等效。</p><h3>3. 二维数组是数组的数组，其数组名是外层数组的首地址</h3><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n\n    int data[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n\n    // 行指针\n    //int (*p)[3] = &amp;data[0];\n    int (*p)[3] = data;\n\n    cout &lt;&lt; p[1][2] &lt;&lt; endl; // 6\n    cout &lt;&lt; (*(p+1))[2] &lt;&lt; endl; // 6\n    cout &lt;&lt; *(p[1] + 2) &lt;&lt; endl; // 6\n    cout &lt;&lt; *(*(p+1)+2) &lt;&lt; endl; // 6\n\n    return 0;\n}</code></pre></div><p>data[3][3] 相当于是数组 data[data[0], data[1], data[2]]，data[0], data[1], data[2] 都是有 3 个元素的一维数组，而 data 则是有 3 个这样数组的一维数组。</p><p>int (*p)[3] 表示行指针 p 指向一个有三个元素的数组，也就是指向外层数组的首地址，而 <code>data</code> 和 <code>&amp;data[0]</code> 是等价的。第一次解引用得到它指向的数组，第二次解引用才得到数组中的值。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">}};</span>\n\n    <span class=\"c1\">// 列指针\n</span><span class=\"c1\"></span>    <span class=\"c1\">//int *p = *data;\n</span><span class=\"c1\"></span>    <span class=\"c1\">//int *p = data[0];\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>列指针是将二维数组展开成一维数组看待，所以列指针指向二维数组的第一个元素。<code>&amp;data[0][0]</code>、<code>data[0]</code>、<code>*data</code> 三者都代表第一个元素的地址，访问元素需要一次解引用，<code>[]</code> 和 <code>*</code> 等价。</p><p>获取更多精彩，请关注「seniusen」! </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0da0c7d648fdb6cc8c70e40b775bcb42_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-0da0c7d648fdb6cc8c70e40b775bcb42_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-0da0c7d648fdb6cc8c70e40b775bcb42_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0da0c7d648fdb6cc8c70e40b775bcb42_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "指针（C / C++）", 
                    "tagLink": "https://api.zhihu.com/topics/19959489"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52477267", 
            "userName": "seniusen", 
            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
            "upvote": 6, 
            "title": "C++ 学习笔记之——STL 库 queue", 
            "content": "<h2>1. 队列</h2><p>queue 队列是一种容器适配器，专门用来满足先进先出的操作，也就是元素在容器的一端插入并从另一端提取。</p><ul><li><code>bool empty() const;</code> 返回队列是否为空；</li><li><code>size_type size() const;</code> 返回队列中元素的数量；</li><li><code>reference&amp; back();</code> 返回队列中最后一个元素也即最新的元素的引用；</li><li><code>reference&amp; front();</code> 返回队列中的下一个元素也即最旧的元素的引用；</li><li><code>void push (const value_type&amp; val);</code> 在队尾插入一个元素；</li><li><code>void pop();</code> 弹出队列的下一个元素也即最旧的元素，队头元素。</li></ul><h2>2. 优先级队列</h2><p>优先级队列是一种容器适配器，根据一些严格的弱排序标准，专门设计使其第一个元素始终是它包含的最值元素。其本质上就是一个大顶堆或者小顶堆，会在需要时自动调用函数 make_heap，push_heap 和 pop_heap 自动完成堆化，比如插入新元素或者弹出堆顶元素。</p><ul><li><code>bool empty() const;</code> 返回优先级队列是否为空；</li><li><code>size_type size() const;</code> 返回优先级队列中元素的数量；</li><li><code>const_reference top() const;</code> 返回优先级队列的顶部元素，也即比较优先级最高的元素；</li><li><code>void push (const value_type&amp; val);</code> 在优先级队列中插入一个元素；</li><li><code>void pop();</code> 弹出优先级队列的顶部元素。</li></ul><p>下面的例子中展示了构建优先级队列，将两个降序的 vector 合并成一个新的降序的 vector。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">class</span> <span class=\"n\">mycomparison</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">big_heap</span><span class=\"p\">;</span> <span class=\"c1\">// 大顶堆标志位，也就是所有元素比堆顶元素小\n</span><span class=\"c1\"></span><span class=\"nl\">public</span><span class=\"p\">:</span>\n    <span class=\"n\">mycomparison</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">bool</span><span class=\"o\">&amp;</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span><span class=\"n\">big_heap</span> <span class=\"o\">=</span> <span class=\"n\">param</span><span class=\"p\">;}</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">operator</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vec1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vec2</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">big_heap</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">vec2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"k\">else</span> <span class=\"nf\">return</span> <span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">vec2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vec1</span><span class=\"p\">;</span>\n    <span class=\"n\">vec1</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n    <span class=\"n\">vec1</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">);</span>\n    <span class=\"n\">vec1</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">);</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vec2</span><span class=\"p\">;</span>\n    <span class=\"n\">vec2</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span>\n    <span class=\"n\">vec2</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">96</span><span class=\"p\">);</span>\n    <span class=\"n\">vec2</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">);</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vec3</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// priority_queue&lt;vector&lt;int&gt;, vector&lt; vector&lt;int&gt;&gt;, mycomparison&gt; q(mycomparison(false));\n</span><span class=\"c1\"></span>   <span class=\"c1\">// priority_queue&lt;vector&lt;int&gt;, vector&lt; vector&lt;int&gt;&gt;, mycomparison&gt; q(false);\n</span><span class=\"c1\"></span>    <span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"n\">mycomparison</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n\n    <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">);</span>\n    <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">vec2</span><span class=\"p\">);</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span>\n        <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"n\">vec3</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">());</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">vec3</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">vec3</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"n\">it</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bffc6564bbdc2866151a3ccdaf336907_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"https://pic4.zhimg.com/v2-bffc6564bbdc2866151a3ccdaf336907_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;485&#39; height=&#39;347&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"485\" data-original=\"https://pic4.zhimg.com/v2-bffc6564bbdc2866151a3ccdaf336907_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bffc6564bbdc2866151a3ccdaf336907_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/vector/vector/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">参考资料 [http://www.cplusplus.com]</a></p><p>获取更多精彩，请关注「seniusen」!  </p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/PilRSSfErnrRrWMq93ws\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/PilRSSf</span><span class=\"invisible\">ErnrRrWMq93ws</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }, 
                {
                    "tag": "STL", 
                    "tagLink": "https://api.zhihu.com/topics/19583423"
                }, 
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/51662906", 
            "userName": "seniusen", 
            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
            "upvote": 3, 
            "title": "C++ 学习笔记之——字符串和字符串流", 
            "content": "<h2>1. 字符数组</h2><p>字符数组，也就是存放字符类型数据的数组，只不过<b>字符数组的结尾必须是 &#39;\\0&#39;</b>。C++ 已经提供了一些字符串处理函数，这些函数被封装在头文件和 &lt;string.h&gt; 中。</p><h2>1.1. 字符串复制</h2><ul><li><code>void * memcpy ( void * destination, const void * source, size_t num );</code>从 source 指针指向的内存拷贝 num 个字节到 destination 指针指向的内存；拷贝的是二进制数据，与两个指针类型没有关系；不检查字符串结束符，只是拷贝对应字节的数据；两个指针指向的数组大小至少都大于 num 个字节而且不应该有重叠。</li><li><code>void * memmove ( void * destination, const void * source, size_t num );</code>和 memcpy 类似，只不过<b>支持内存重叠</b>，就好像是有一个中间缓冲区一样。</li><li><code>char * strcpy ( char * destination, const char * source );</code>将 source 指针指向的字符串拷贝到 destination 指针指向的数组，包括终止字符， destination 指针指向的数组必须有足够的大小来容纳待拷贝字符串，并且不支持内存重叠。</li><li><code>char * strncpy ( char * destination, const char * source, size_t num );</code>将 source 指针指向的前 num 个字符串拷贝到 destination 指针指向的数组，不支持内存重叠。<b>如果 source 字符串长度大于 num，那么 destination 字符串将没有终止字符</b>；如果 source 字符串长度小于 num，那么 destination 字符串会填充 0 直到总共有 num 个字符写入。</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstring&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">];</span>\n  <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">person_copy</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">myname</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"s\">&#34;seniusen&#34;</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* 用 memcpy 拷贝字符串*/</span>\n    <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">myname</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">myname</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">person</span><span class=\"p\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">22</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* 用 memcpy 拷贝结构体*/</span>\n    <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">person_copy</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">));</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;person_copy: %s, %d </span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">person_copy</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">person_copy</span><span class=\"p\">.</span><span class=\"n\">age</span> <span class=\"p\">);</span>\n\n    <span class=\"cm\">/* memmove 支持重叠内存的拷贝*/</span>\n    <span class=\"kt\">char</span> <span class=\"n\">str</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"s\">&#34;seniusen works very hard.....!&#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">memmove</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"o\">+</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"o\">+</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">);</span>\n    <span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cf4000300fc7fe23e03dd2baa43f2fe3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb\" width=\"630\" data-original=\"https://pic4.zhimg.com/v2-cf4000300fc7fe23e03dd2baa43f2fe3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;630&#39; height=&#39;158&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"630\" data-original=\"https://pic4.zhimg.com/v2-cf4000300fc7fe23e03dd2baa43f2fe3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cf4000300fc7fe23e03dd2baa43f2fe3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>1.2. 字符串拼接</h2><ul><li><code>char * strcat ( char * destination, const char * source );</code>将 source 指针指向的字符串拼接到 destination 指针指向的数组后，destination 的终止字符将被 source 的第一个字符覆盖，同时拼接后的字符串末尾会添加一个终止字符，不支持内存重叠。</li><li><code>char * strncat ( char * destination, const char * source, size_t num );</code>将 source 指针指向的前 num 个字符串拼接到 destination 指针指向的数组，不支持内存重叠。如果 source 字符串长度小于 num，那么只拼接终止字符 &#39;\\0&#39; 前面的内容。</li></ul><h2>1.3. 字符串比较</h2><ul><li><code>int strcmp ( const char * str1, const char * str2 );</code>比较两个字符串 str1 和 str2，从第一个字符开始比较，如果相同则继续往下比较，直到遇到不同字符或者终止字符结束比较。</li><li><code>int strncmp ( const char * str1, const char * str2, size_t num );</code>和 strcmp 类似，只不过是直到遇到不同字符或者终止字符或者已经比较了 num 个字符串就结束比较。</li><li><code>int memcmp ( const void * ptr1, const void * ptr2, size_t num );</code>和 strcmp 类似，只不过是<b>遇到终止字符不会结束比较</b>。</li><li><code>int strcoll ( const char * str1, const char * str2 );</code>由当前所选 C 语言环境的 LC_COLLATE 类别来定义比较规则，比如汉字可以按照拼音来比较。</li><li><code>size_t strxfrm ( char * destination, const char * source, size_t num );</code>根据当前所选 C 语言环境的 LC_COLLATE 类别来转换 source 指向的字符串，并将转换后字符串的前 num 个字符复制到 destination，返回其长度。如果指定 destination 为空指针，num 为 0，此函数可以返回字符串的长度。</li></ul><h2>1.4. 字符串搜索</h2><ul><li><code>const void * memchr ( const void * ptr, int value, size_t num );</code>查找 ptr 指向内存的前 num 个字节，看是否存在 value，如果存在则返回指向它的指针，<b>value 和 ptr 指向的数组都被转化为无符号字符型数据</b>来进行比较。</li><li><code>const char * strchr ( const char * str, int character );</code>查找 str 指向的字符数组中是否存在 character，如果存在则返回第一个指向它的指针，<b>character 被转化为字符型数据</b>来进行比较，<b>终止字符也可以被定位</b>。</li><li><code>const char * strrchr ( const char * str, int character );</code>与 strchr 类似，只不过是返回<b>最后一个指向它的指针</b>。</li><li><code>size_t strcspn ( const char * str1, const char * str2 );</code>扫描在字符串 str1 中出现的第一个任意 str2 中的字符，返回找到时已经从 str1 中读取的字符个数，包括<b>终止字符的搜索</b>，也就是说，若 str2 中没有字符存在于str1 中，则返回 str1 的长度。</li><li><code>const char * strpbrk ( const char * str1, const char * str2 );</code>扫描在字符串 str1 中出现的第一个任意 str2 中的字符，返回指向那个字符的指针，不包括终止字符的搜索但会在终止字符处结束，也就是说，若 str2 中没有字符存在于str1 中，则返回空指针。</li><li><code>size_t strspn ( const char * str1, const char * str2 );</code>返回字符串 str1 中只包含 str2 中字符的部分的长度。如果 str1 中第一个字符就不在 str2 中，则返回 0；如果 str1 中所有字符都在 str2 中，则返回 str1 的长度；</li><li><code>const char * strstr ( const char * str1, const char * str2 );</code>扫描字符串 str2 在 str1 中第一次出现的位置，不包括终止字符的搜索但会在终止字符处结束。</li><li><code>char * strtok ( char * str, const char * delimiters );</code>在字符串 str 中先找到第一个不在 delimiters 中的字符，也就是口令的起始位置，然后以此为起点再继续找到第一个位于 delimiters 中的字符，这是口令的结束位置。然后通过传入一个 NULL 指针和新的 delimiters，函数会继续从上一个口令结束位置的下一个字符继续查找。</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/* strtok example */</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">str</span><span class=\"p\">[]</span> <span class=\"o\">=</span><span class=\"s\">&#34;- This, a sample string.&#34;</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">pch</span><span class=\"p\">;</span>\n  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">&#34;Splitting string </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> into tokens:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">str</span><span class=\"p\">);</span>\n  <span class=\"n\">pch</span> <span class=\"o\">=</span> <span class=\"n\">strtok</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span><span class=\"s\">&#34; ,.-&#34;</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pch</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">&#34;%s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span><span class=\"n\">pch</span><span class=\"p\">);</span>\n    <span class=\"n\">pch</span> <span class=\"o\">=</span> <span class=\"n\">strtok</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"s\">&#34; ,.-&#34;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-21ea9a49184bfa5aadc9d7c5daf92bfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb\" width=\"491\" data-original=\"https://pic4.zhimg.com/v2-21ea9a49184bfa5aadc9d7c5daf92bfb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;491&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"203\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"491\" data-original=\"https://pic4.zhimg.com/v2-21ea9a49184bfa5aadc9d7c5daf92bfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-21ea9a49184bfa5aadc9d7c5daf92bfb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>1.5. 其它</h2><ul><li><code>size_t strlen ( const char * str );</code>返回字符串的长度，也就是终止字符前面字符的个数。</li><li><code>void * memset ( void * ptr, int value, size_t num );</code>将 ptr 指针指向内存区域前 num 个字节数据设置成 value，value 被转化为无符号字节型数据。</li><li><code>char * strerror ( int errnum );</code>将 errnum 转化为描述错误情况的字符串。</li></ul><h2>2. 字符串类</h2><p>此外，为了更方便地对字符串进行操作，C++ 中定义了一个 string 类，可以在使用的时候包含头文件。</p><h2>2.1. 构造函数</h2><ul><li><code>string();</code>默认构造函数。</li><li><code>string (const string&amp; str);</code>复制构造函数，定义一个对 str 进行复制的字符串。</li><li><code>string (const string&amp; str, size_t pos, size_t len = npos);</code>以字符串 str 的 pos 位置开始长度为 len 的子字符串进行构造。</li><li><code>string (const char* s);</code>从字符数组构造。</li><li><code>string (const char* s, size_t n);</code>从 s 指向内存的前 n 个字符构造。</li><li><code>string (size_t n, char c);</code>构造一个具有 n 个字符 c 的字符串。</li><li><code>template &lt;class InputIterator&gt; string (InputIterator first, InputIterator last);</code>以 [first,last) 区间的字符串进行构造。</li></ul><p>此外，可以用一个字符串类变量或者字符数组或者字符直接对字符串类变量进行赋值，两个字符串变量拼接则可以直接用加法来实现。</p><h2>2.2. 迭代器</h2><ul><li><code>iterator begin();</code>指向字符串第一个元素的迭代器。</li><li><code>iterator end();</code>指向字符串最后一个元素后面位置的迭代器，如果字符串为空，则与 begin() 相同。</li><li><code>reverse_iterator rbegin();</code>指向字符串最后一个元素的反向迭代器。</li><li><code>reverse_iterator rend();</code>指向字符串第一个元素前面位置的反向迭代器。</li></ul><h2>2.3. 容量</h2><ul><li><code>size_t size() const;</code>字符串的长度。</li><li><code>size_t length() const;</code>字符串的长度，与 size() 等价。</li><li><code>size_t max_size() const;</code>字符串理论上的最大程度。</li><li><code>void resize (size_t n, char c);</code>重新设置字符串为 n 个字符的长度。如果 n 比现有字符串长度小，则只保留前 n 个字符；如果 n 比现有字符串长度大，则填充字符 c 或者 NULL。</li><li><code>size_t capacity() const;</code>返回字符串当前内存支持的最大长度，这个数字是动态变化的。</li><li><code>void reserve (size_t n = 0);</code>保证字符串至少能容纳 n 个字符。</li><li><code>void clear();</code>清空字符串的内容。</li><li><code>bool empty() const;</code>返回字符串是否为空。</li><li><code>void shrink_to_fit();</code>让字符串的容量等于其长度。</li></ul><h2>2.4. 元素访问</h2><ul><li><code>char&amp; operator[] (size_t pos);</code>像数组一样访问位置 pos 处的字符。</li><li><code>char&amp; at (size_t pos);</code>访问位置 pos 处的字符，<b>会检查是否越界</b>。</li><li><code>char&amp; front();</code>返回字符串第一个字符。</li><li><code>char&amp; back();</code>返回字符串最后一个字符。</li></ul><h2>2.5. 修改字符串</h2><ul><li><code>string&amp; operator+= (const string&amp; str);</code>在字符串末尾添加元素，可以是字符数组、字符或者字符串类变量。</li><li><code>string&amp; append (const string&amp; str);</code><a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/string/string/append/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在字符串末尾添加元素</a>。</li><li><code>void push_back (char c);</code>在字符串末尾添加一个字符。</li><li><code>void pop_back();</code>在字符串末尾删除一个字符。</li><li><code>string&amp; assign (const string&amp; str);</code>给字符串分配新的内容，<a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/string/string/assign/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">与构造函数有同样的情况</a>。</li><li><code>void swap (string&amp; str);</code>与另一个字符串 str 进行交换。</li><li><code>string&amp; erase (size_t pos = 0, size_t len = npos);</code><a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/string/string/erase/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">清除字符串的部分元素</a>。</li><li><code>string&amp; replace (size_t pos, size_t len, const string&amp; str);</code><a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/string/string/replace/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">替换字符串的部分元素</a>。</li><li><code>string&amp; insert (size_t pos, const string&amp; str);;</code><a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/string/string/insert/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在 pos 位置前面插入元素</a>。</li></ul><h2>2.6. 其它字符串操作</h2><p>此外，字符串类还支持将字符串类变量转化为字符数组，在字符串中从前向后查找、从后向前查找等操作。<a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/string/string/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">更多方法见此</a>。</p><h2>3. 字符串流</h2><p>字符串流是以<b>内存中的字符串类对象或者字符数组为输入输出对象</b>的数据流，也即是将数据输出到字符串流对象或者从字符串流对象读入数据，也称之为内存流。</p><ul><li><code>explicit ostringstream (const string&amp; str, ios_base::openmode which = ios_base::out);</code>建立输出字符串流对象。</li><li><code>explicit istringstream (const string&amp; str, ios_base::openmode which = ios_base::in);</code>建立输入字符串流对象。</li><li><code>explicit stringstream (const string&amp; str, ios_base::openmode which = ios_base::in | ios_base::out);</code>建立输入输出输出字符串流对象。</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sstream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">string</span> <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"s\">&#34;Hello, seniusen!&#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">string</span> <span class=\"n\">str2</span><span class=\"p\">(</span><span class=\"n\">str1</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ostringstream</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">str1</span><span class=\"p\">);</span>                  <span class=\"c1\">// 默认在字符串起始位置添加\n</span><span class=\"c1\"></span>    <span class=\"n\">ostringstream</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">str2</span><span class=\"p\">,</span> <span class=\"n\">ios_base</span><span class=\"o\">::</span><span class=\"n\">ate</span><span class=\"p\">);</span>  <span class=\"c1\">// 在字符串末尾位置添加\n</span><span class=\"c1\"></span>\n\n    <span class=\"n\">foo</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; Hi,  seniusen! &#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">bar</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; Well done!&#34;</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"n\">istringstream</span> <span class=\"n\">strin</span><span class=\"p\">(</span><span class=\"n\">str1</span><span class=\"p\">);</span>\n    <span class=\"n\">string</span> <span class=\"n\">str3</span><span class=\"p\">;</span>\n\n    <span class=\"n\">strin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">str3</span><span class=\"p\">;</span> <span class=\"c1\">// 遇到空格停止插入\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">str3</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 生成一个文件名\n</span><span class=\"c1\"></span>    <span class=\"n\">string</span> <span class=\"n\">str4</span><span class=\"p\">;</span>\n    <span class=\"n\">stringstream</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;/home/seniusen/&#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n    <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;_noise_image_&#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n    <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;.jpg&#34;</span><span class=\"p\">;</span>\n    <span class=\"n\">ss</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">str4</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">str4</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1f0af77aef56c6c1c1ba49c88eb7a7f2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"482\" data-original=\"https://pic3.zhimg.com/v2-1f0af77aef56c6c1c1ba49c88eb7a7f2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;482&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"482\" data-original=\"https://pic3.zhimg.com/v2-1f0af77aef56c6c1c1ba49c88eb7a7f2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1f0af77aef56c6c1c1ba49c88eb7a7f2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>获取更多精彩，请关注「seniusen」!</p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/PilRSSfErnrRrWMq93ws\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/PilRSSf</span><span class=\"invisible\">ErnrRrWMq93ws</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }, 
                {
                    "tag": "字符串", 
                    "tagLink": "https://api.zhihu.com/topics/19660131"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/51010933", 
            "userName": "seniusen", 
            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
            "upvote": 0, 
            "title": "C++ 学习笔记之——STL 库 vector", 
            "content": "<p>vector 是一种顺序容器，可以看作是可以改变大小的数组。</p><p>就像数组一样，vector 占用连续的内存地址来存储元素，因此可以像数组一样用偏移量来随机访问，但是它的大小可以动态改变，容器会自动处理内存分配问题。</p><p>在内部，vector 使用动态分配的数组来存储元素，当新元素插入时，如果现有的存储空间已经占满，则需要重新再分配一个新的数组，并且将之前的元素都移动到新的内存上。这个过程是非常耗时的，因此，vector 并不会在每次插入新元素时都重新分配内存。</p><p>相反，vector 容器可能会分配一些额外的内存来适应其大小的增长，因此，其真实容量可能比存储这些元素实际需要的内存要大。库通过不同的策略来平衡内存占用和空间再分配，但无论如何，空间分配只应在 vector 大小以对数增长的时候发生，以便在向量末尾插入单个元素可以做到<b>均摊情况下是常数级的时间复杂度</b>。</p><p>因此，相对于数组，vector 会消耗更多的内存来换取更有效地对内存进行管理并且动态增长。</p><p>相对于其他动态容器，vector 支持随机访问，并且能相对高效地在末尾插入或者删除元素，但如果要在其他位置插入或者删除元素，vector 就会表现得很差，而且迭代器和引用也不是那么方便。</p><h2>构造函数</h2><ul><li><code>explicit vector (const allocator_type&amp; alloc = allocator_type());</code>默认构造函数，构造出一个不包含任何元素的空的 vector；</li><li><code>explicit vector (size_type n);</code>构造出一个包含<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个元素的 vector，默认会初始化为 0；</li><li><code>explicit vector (size_type n, const value_type&amp; val, const allocator_type&amp; alloc = allocator_type());</code>构造出一个包含<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个值为<img src=\"https://www.zhihu.com/equation?tex=val\" alt=\"val\" eeimg=\"1\"/>的 vector；</li><li><code>vector (InputIterator first, InputIterator last, const allocator_type&amp; alloc = allocator_type());</code>构造出一个包含迭代器<img src=\"https://www.zhihu.com/equation?tex=%5Bfirst%2C+end%29\" alt=\"[first, end)\" eeimg=\"1\"/>范围内元素的 vector，注意左闭右开；</li><li><code>vector (const vector&amp; x);</code>复制构造函数，构造出一个和<img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/>相同的 vector；</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">first</span><span class=\"p\">;</span>                                 <span class=\"c1\">// 空的 vector\n</span><span class=\"c1\"></span>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">second</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">);</span>                       <span class=\"c1\">// 包含 4 个值为 100 元素的 vector，[100, 100, 100, 100]\n</span><span class=\"c1\"></span>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">third</span> <span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span> <span class=\"c1\">// 包含 second 起始迭代器到终止迭代器区间元素的 vector，[100, 100, 100, 100]\n</span><span class=\"c1\"></span>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">fourth</span> <span class=\"p\">(</span><span class=\"n\">third</span><span class=\"p\">);</span>                       <span class=\"c1\">// 对 third 的复制，[100, 100, 100, 100]\n</span><span class=\"c1\"></span>\n    <span class=\"c1\">// 数组也可以用来作为迭代器初始化 vector\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"n\">myints</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">};</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">fifth</span> <span class=\"p\">(</span><span class=\"n\">myints</span><span class=\"p\">,</span> <span class=\"n\">myints</span> <span class=\"o\">+</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">myints</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">);</span> <span class=\"c1\">//[16, 2, 77, 29]\n</span><span class=\"c1\"></span>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">sixth</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span> <span class=\"c1\">// [0, 0, 0, 0]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;The contents of fifth are:&#34;</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">fifth</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">fifth</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">it</span><span class=\"p\">)</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39; &#39;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">it</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>赋值运算</h2><p>赋值运算会给容器赋予新的内容，替换掉旧的内容，同时改变其大小。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">foo</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">bar</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Size of foo: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 0\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Size of bar: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 3\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>迭代器</h2><ul><li><code>iterator begin();</code>返回指向 vector 中第一个元素的迭代器；</li><li><code>iterator end();</code>返回一个迭代器，引用向量容器中的 past-the-end 元素，也即最后一个元素之后的理论元素；</li><li><code>reverse_iterator rbegin();</code>返回指向 vector 中最后一个元素的反向迭代器，增加反向迭代器会使它们向前移动；</li><li><code>reverse_iterator rend();</code>返回一个反向迭代器，指向向量中第一个元素之前的理论元素；</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myvector</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"n\">it</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">reverse_iterator</span> <span class=\"n\">rit</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">rbegin</span><span class=\"p\">();</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">rit</span> <span class=\"o\">!=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">rend</span><span class=\"p\">();</span> <span class=\"n\">rit</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">rit</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 0    1   2   3   4\n</span><span class=\"c1\">// 4    3   2   1   0\n</span></code></pre></div><p>也可以对向量建立指针，然后通过指针来访问成员函数。或者建立引用。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myvector</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">myvector</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">reverse_iterator</span> <span class=\"n\">rit</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rbegin</span><span class=\"p\">();</span>\n    <span class=\"c1\">//   vector&lt;int&gt;::reverse_iterator rit = (*p).rbegin();\n</span><span class=\"c1\"></span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">rit</span> <span class=\"o\">!=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rend</span><span class=\"p\">();</span> <span class=\"n\">rit</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">rit</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">ref_myvector</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">;</span>\n    <span class=\"n\">ref_myvector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">ref_myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">ref_myvector</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"n\">it</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 5    4    3   2   1   0\n</span><span class=\"c1\">// 0    1   2   3   4   5   6\n</span></code></pre></div><h2>容量</h2><ul><li><code>size_type size() const;</code>返回向量中元素的个数；</li><li><code>size_type max_size() const;</code>返回向量中最大可能包含的元素个数，但这只是理论上的；</li><li><code>void resize (size_type n, value_type val = value_type());</code>重新设置向量的大小使之包含<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个元素；如果<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>小于现有向量大小，则只保留前<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个元素；如果<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>大于现有向量大小，那么在末尾插入元素来使向量大小达到<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>；如果<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>大于现有向量容量，那么会自动重新分配内存；</li><li><code>size_type capacity() const;</code>返回向量当前分配的内存可以包含多少个元素；</li><li><code>bool empty() const;</code>返回当前向量是否为空，也就是大小是否为零；</li><li><code>void reserve (size_type n);</code>让向量当前分配的内存至少可以包含<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个元素；</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myvector</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;max_size: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">max_size</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 添加元素的过程中容量会不断增大\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;size: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;capacity: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">othervector</span><span class=\"p\">;</span>\n    <span class=\"n\">othervector</span><span class=\"p\">.</span><span class=\"n\">reserve</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 添加元素的过程中大小不超过 100 就不会增大\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">othervector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;size: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">othervector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;capacity: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">othervector</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d582e482098255f19070e84bbc0f86ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-d582e482098255f19070e84bbc0f86ff_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-d582e482098255f19070e84bbc0f86ff_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d582e482098255f19070e84bbc0f86ff_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>元素访问</h2><ul><li><code>reference operator[] (size_type n);</code>像数组一样访问位置<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>处的元素，但不会进行边界检测；</li><li><code>reference at (size_type n);</code>访问位置<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>处的元素，但会进行边界检测；</li><li><code>reference front();</code>返回向量中第一个元素的引用；</li><li><code>reference back();</code>返回向量中最后一个元素的引用；</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myvector</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 此处越界访问向量，不会提示\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 此处越界访问向量，会抛出一个 out_of_range 异常\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8a7b41d327be5fb8fadd2349ffb6a499_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"677\" data-original=\"https://pic2.zhimg.com/v2-8a7b41d327be5fb8fadd2349ffb6a499_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;677&#39; height=&#39;357&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"677\" data-original=\"https://pic2.zhimg.com/v2-8a7b41d327be5fb8fadd2349ffb6a499_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8a7b41d327be5fb8fadd2349ffb6a499_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>向量修改</h2><ul><li><code>void assign (InputIterator first, InputIterator last);</code>给向量重新分配迭代器<img src=\"https://www.zhihu.com/equation?tex=%5Bfirst%2C+end%29\" alt=\"[first, end)\" eeimg=\"1\"/>范围内的元素，注意左闭右开；</li><li><code>void assign (size_type n, const value_type&amp; val);</code>给向量重新分配<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个值<img src=\"https://www.zhihu.com/equation?tex=val\" alt=\"val\" eeimg=\"1\"/>的元素；</li><li><code>void push_back (const value_type&amp; val);</code>在向量末尾添加一个元素；</li><li><code>void pop_back();</code>从向量末尾删除一个元素；</li><li><code>iterator insert (iterator position, const value_type&amp; val);</code>在迭代器位置前面插入一个元素，<b>返回指向第一个新插入元素的迭代器</b>；</li><li><code>void insert (iterator position, size_type n, const value_type&amp; val);</code>在迭代器位置前面插入<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/>个值<img src=\"https://www.zhihu.com/equation?tex=val\" alt=\"val\" eeimg=\"1\"/>的元素；</li><li><code>void insert (iterator position, InputIterator first, InputIterator last);</code>在迭代器位置前面插入迭代器<img src=\"https://www.zhihu.com/equation?tex=%5Bfirst%2C+end%29\" alt=\"[first, end)\" eeimg=\"1\"/>范围内的元素；</li><li><code>iterator erase (iterator position);</code>删除迭代器位置的元素，<b>返回最后一个被删除元素的后面一个元素的迭代器</b>；</li><li><code>iterator erase (iterator first, iterator last);</code>删除迭代器<img src=\"https://www.zhihu.com/equation?tex=%5Bfirst%2C+end%29\" alt=\"[first, end)\" eeimg=\"1\"/>范围内的元素，<b>返回最后一个被删除元素的后面一个元素的迭代器</b>；</li><li><code>void swap (vector&amp; x);</code>和向量<img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/>进行交换，两个向量元素类型相同，但大小可能不同；</li><li><code>void clear();</code>清空向量；</li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">first</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">second</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">third</span><span class=\"p\">;</span>\n\n    <span class=\"n\">first</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">);</span>             <span class=\"c1\">// [100, 100, 100, 100, 100, 100, 100]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span><span class=\"p\">;</span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// [100, 100, 100, 100, 100]\n</span><span class=\"c1\"></span>\n    <span class=\"kt\">int</span> <span class=\"n\">myints</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1776</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">};</span>\n    <span class=\"n\">third</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">myints</span><span class=\"p\">,</span> <span class=\"n\">myints</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">);</span>   <span class=\"c1\">// [1776, 7, 4]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Size of first: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Size of second: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Size of third: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"n\">third</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myvector</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">);</span> <span class=\"c1\">// [100, 100, 100]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">);</span> <span class=\"c1\">// [100, 200, 100, 100]，此时 it 指向新插入的元素 200\n</span><span class=\"c1\"></span>\n    <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">);</span> <span class=\"c1\">// [100, 300, 300, 200, 100, 100]，此时 it 无效了\n</span><span class=\"c1\"></span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">anothervector</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">);</span>  <span class=\"c1\">// [400, 400]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">it</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">anothervector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">anothervector</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"c1\">// [100, 300, 400, 400, 300, 200, 100, 100]\n</span><span class=\"c1\"></span>\n    <span class=\"kt\">int</span> <span class=\"n\">myarray</span> <span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">501</span><span class=\"p\">,</span> <span class=\"mi\">502</span><span class=\"p\">,</span> <span class=\"mi\">503</span><span class=\"p\">};</span>\n    <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">myarray</span><span class=\"p\">,</span> <span class=\"n\">myarray</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"c1\">// [501, 502, 503, 100, 300, 400, 400, 300, 200, 100, 100]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;myvector contains:&#34;</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">it</span> <span class=\"o\">&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"n\">it</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39; &#39;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">it</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"c1\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</span><span class=\"c1\"></span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n    <span class=\"c1\">// [1, 2, 3, 4, 5, 7, 8, 9, 10]，此时 it 指向 6 后面的元素 7\n</span><span class=\"c1\"></span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"c1\">// [4, 5, 7, 8, 9, 10]，此时 it 指向 3 后面的元素 4\n</span><span class=\"c1\"></span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;myvector contains:&#34;</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39; &#39;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myvector</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c39d301e3277b6e4bcbcef9dcfdf3b00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic1.zhimg.com/v2-c39d301e3277b6e4bcbcef9dcfdf3b00_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;440&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic1.zhimg.com/v2-c39d301e3277b6e4bcbcef9dcfdf3b00_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c39d301e3277b6e4bcbcef9dcfdf3b00_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cplusplus.com/reference/vector/vector/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">参考资料 [http://www.cplusplus.com]</a></p><p>获取更多精彩，请关注「seniusen」!</p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/PilRSSfErnrRrWMq93ws\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/PilRSSf</span><span class=\"invisible\">ErnrRrWMq93ws</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49757495", 
            "userName": "seniusen", 
            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
            "upvote": 3, 
            "title": "C++ 学习笔记之——文件操作和文件流", 
            "content": "<h2>1. 文件的概念</h2><p>对于用户来说，常用到的文件有两大类：程序文件和数据文件。而根据文件中数据的组织方式，则可以将文件分为<b>ASCII 文件</b>和<b>二进制文件</b>。</p><ul><li>ASCII 文件，又称字符文件或者文本文件，它的每一个字节放一个 ASCII 代码，代表一个字符。</li><li>二进制文件，又称内部格式文件或字节文件，是把内存中的数据按其在内存中的存储形式原样输出到磁盘上存放。</li></ul><p>数字 64 在内存中表示为 0100 0000，若将其保存为 ASCII 文件，则要分别存放十位 6 和个位 4 的 ASCII 码，为 0011 0110 0011 0100，占用两个字节；若将其保存为二进制文件，则按内存中形式直接输出，为 0100 0000，占用一个字节。</p><p>ASCII 文件中数据与字符一一对应，一个字节代表一个字符，可以直接在屏幕上显示或打印出来，这种方式使用方便，比较直观，便于阅读，但一般占用存储空间较大，而且输出时要将二进制转化为 ASCII 码比较花费时间。</p><p>二进制文件，输出时不需要进行转化，直接将内存中的形式输出到文件中，占用存储空间较小，但一个字节并不对应一个文件，不能直观显示文件中的内容。</p><h2>2. 文件流和文件流对象</h2><p>文件流是以外存文件未输入输出对象的数据流。输出文件流是从内存流向外存文件的数据，输入文件流是从外存文件流向内存的数据。每一个文件流都有一个内存缓冲区与之对应。</p><p>C++ 中有三个用于文件操作的文件类：</p><ul><li>ifstream 类，它是从 istream 类派生来的，用于支持从磁盘文件的输入。</li><li>ofstream 类，它是从 ostream 类派生来的，用于支持向磁盘文件的输出。</li><li>fstream 类，它是从 iostream 类派生来的，用于支持对磁盘文件的输入输出。</li></ul><p>要以磁盘文件为对象进行输入输出，必须定义一个文件流类的对象，通过文件流对象将数据从内存输出到磁盘文件，或者将磁盘文件输入到内存。</p><p>定义文件流对象后，我们还需要将文件流对象和指定的磁盘文件建立关联，以便使文件流流向指定的磁盘文件，并确定文件的工作方式（输入还是输出，二进制还是 ASCII）。我们可以在定义流对象的时候指定参数来调用构造函数，或者通过成员函数 open 来进行文件流对象和指定文件的关联。</p><h2>3. 对 ASCII 文件的操作</h2><p>然后，我们就可以用类似 cin 或者 cout 的方式将数据读出或写入文件，只不过是输入输出的对象变成了文件而已。当然，在对磁盘文件完成读写操作后，我们可以通过 close 方法来解除磁盘文件和文件流对象的关联。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ofstream</span> <span class=\"n\">outfile</span><span class=\"p\">(</span><span class=\"s\">&#34;a.txt&#34;</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">out</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">outfile</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Failed to open the file!&#34;</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 写入数字 1-5 到文件中\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">outfile</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n    <span class=\"n\">ifstream</span> <span class=\"n\">infile</span><span class=\"p\">(</span><span class=\"s\">&#34;a.txt&#34;</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">in</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">infile</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Failed to open the file!&#34;</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">char</span> <span class=\"n\">data</span><span class=\"p\">;</span>  <span class=\"c1\">// 从文件中读出数字 1-5 \n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">infile</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>也可以利用文件流对象的成员函数 get, put 等，其用法就和<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/seniusen/article/details/83512970\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">标准输入输出</a>介绍的一样。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ofstream</span> <span class=\"n\">outfile</span><span class=\"p\">(</span><span class=\"s\">&#34;a.txt&#34;</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">out</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">outfile</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Failed to open the file!&#34;</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"sc\">&#39;6&#39;</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// 输出一个字符到文件中去\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n    <span class=\"n\">ifstream</span> <span class=\"n\">infile</span><span class=\"p\">(</span><span class=\"s\">&#34;a.txt&#34;</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">in</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">infile</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Failed to open the file!&#34;</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/*char a;\n</span><span class=\"cm\">    for (int i = 0; i &lt; 5; i++)\n</span><span class=\"cm\">    {\n</span><span class=\"cm\">        infile.get(a); // 从文件中读出 1 个字符\n</span><span class=\"cm\">        cout &lt;&lt; a &lt;&lt; &#39;\\n&#39;;\n</span><span class=\"cm\">    }*/</span>\n\n    <span class=\"kt\">char</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n    <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">);</span> <span class=\"c1\">// 从文件中读出 5 个字符\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>4. 对二进制文件的操作</h2><p>二进制文件的操作需要在打开文件的时候指定打开方式为 ios::binary，并且还可以指定为既能输入又能输出的文件，我们通过成员函数 read 和 write 来读写二进制文件。</p><ul><li><code>istream&amp; read (char* s, streamsize n);</code></li><li><code>ostream&amp; write (const char* s, streamsize n);</code></li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ofstream</span> <span class=\"n\">outfile</span><span class=\"p\">(</span><span class=\"s\">&#34;a.txt&#34;</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">outfile</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Failed to open the file!&#34;</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">char</span> <span class=\"n\">a</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sc\">&#39;h&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;l&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;l&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;o&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;,&#39;</span><span class=\"p\">};</span>\n    <span class=\"kt\">char</span> <span class=\"n\">b</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sc\">&#39;s&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;i&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;u&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;s&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;!&#39;</span><span class=\"p\">};</span>\n\n    <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">);</span> <span class=\"c1\">// 将以 a 为首地址的 6 个字符写入文件\n</span><span class=\"c1\"></span>    <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">);</span>\n    <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n    <span class=\"n\">ifstream</span> <span class=\"n\">infile</span><span class=\"p\">(</span><span class=\"s\">&#34;a.txt&#34;</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">infile</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Failed to open the file!&#34;</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">char</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n    <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">);</span>  <span class=\"c1\">// 从文件中读出 6 个字符到以 data 为首地址的字符数组中\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">char</span> <span class=\"n\">datb</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n    <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">datb</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">datb</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在磁盘文件中有一个文件指针，用来指明当前读写的位置。每次写入或者读出一个字节，指针就向后移动一个字节。对于二进制文件，允许对指针进行控制，使它移动到所需的位置，以便在该位置上进行读写。</p><ul><li><code>ostream&amp; seekp (streampos pos);</code>将输出文件中指针移动到指定的位置</li><li><code>ostream&amp; seekp (streamoff off, ios_base::seekdir way);</code>以参照位置为基准对输出文件中的指针移动若干字节</li><li><code>streampos tellp();</code>返回输出文件指针当前的位置</li><li><code>istream&amp; seekg (streampos pos);</code>将输入文件中指针移动到指定的位置</li><li><code>istream&amp; seekg (streamoff off, ios_base::seekdir way);</code>以参照位置为基准对输入文件中的指针移动若干字节</li><li><code>streampos tellg();</code>返回输入文件指针当前的位置</li></ul><p>其中，参照位置有以下几个选择：</p><ul><li><code>ios_base::beg</code>文件开始位置</li><li><code>ios_base::cur</code>文件当前位置</li><li><code>ios_base::end</code>文件末尾位置</li></ul>", 
            "topic": [
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }
            ], 
            "comments": [
                {
                    "userName": "easy lol", 
                    "userLink": "https://www.zhihu.com/people/eabe62da75a4c139d79e867419bbc3ca", 
                    "content": "楼主，这个二进制文件操作中，数组datb的定义是不是有问题[捂脸]", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "seniusen", 
                            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
                            "content": "<p>恩，应该是 9，疏忽了</p>", 
                            "likes": 0, 
                            "replyToAuthor": "easy lol"
                        }
                    ]
                }, 
                {
                    "userName": "成一", 
                    "userLink": "https://www.zhihu.com/people/01af1772b76cf4b29dd63f90ce947684", 
                    "content": "<p>楼主，我最近遇到一个问题，我需要重复读取一个TXT文件（10m左右），第一次较慢，但之后都很快，什么原因？找了好久搞不懂为什么会这样</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47970043", 
            "userName": "seniusen", 
            "userLink": "https://www.zhihu.com/people/26fab5a04c730dc7cd030a50dda3ca5f", 
            "upvote": 1, 
            "title": "C++ 学习笔记之——输入和输出", 
            "content": "<blockquote>在 C++ 中，我们通过调用输入输出流库中的流对象 cin 和 cout 来实现输入和输出。</blockquote><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">c</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\t&#39;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"mi\">56</span>       <span class=\"n\">Enter</span>\n<span class=\"mf\">5.36</span>     <span class=\"n\">Enter</span>\n<span class=\"n\">a</span>        <span class=\"n\">Enter</span>\n<span class=\"mi\">56</span>  <span class=\"mf\">5.36</span>  <span class=\"n\">a</span>\n</code></pre></div><p>在用 cin 进行输入时，我们不用指定具体的数据类型，系统会根据变量的类型从输入流中提取相应长度的字节。同样，用 cout 进行输出时，系统也会自动判别输出数据的类型使输出的数据按相应的类型输出。</p><p>通过 cin 读入数据时，会自动跳过输入流中的空格、tab 键和换行字符。当遇到无效字符或者文件结束符时，输入 cin 就会处于出错状态，我们可以通过判断 cin 的值来判断流对象是否处于正常状态和提取操作是否成功。</p><p>另外，我们还可以使用控制符来设置输入输出的格式。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iomanip&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">256</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415926525</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>                               <span class=\"c1\">// 设置精度\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setiosflags</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">fixed</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>    <span class=\"c1\">// 设置小数点位数\n</span><span class=\"c1\"></span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">hex</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>                               <span class=\"c1\">// 十六进制输出\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">dec</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setfill</span><span class=\"p\">(</span><span class=\"sc\">&#39;*&#39;</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>    <span class=\"c1\">// 设置域宽和填充\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">setiosflags</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">showpos</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>         <span class=\"c1\">// 显示符号\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">resetiosflags</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">showpos</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>       <span class=\"c1\">// 取消显示符号\n</span><span class=\"c1\"></span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"mf\">3.14159</span>\n<span class=\"mf\">3.14159274</span>\n<span class=\"mf\">3.24</span>\n\n<span class=\"mi\">256</span>\n<span class=\"mi\">100</span>\n<span class=\"o\">**</span><span class=\"mi\">256</span>\n<span class=\"o\">+</span><span class=\"mi\">256</span>\n<span class=\"mi\">256</span>\n</code></pre></div><p>也可以使用 cout 的成员函数来设置输入输出的格式。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">256</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415926525</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">precision</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">);</span>              <span class=\"c1\">// 设置精度\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">precision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">setf</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">fixed</span><span class=\"p\">);</span>         <span class=\"c1\">// 设置固定小数点位数\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">setf</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">hex</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">basefield</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"sc\">&#39;*&#39;</span><span class=\"p\">);</span>             <span class=\"c1\">// 设置填充\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>              <span class=\"c1\">// 设置域宽\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">setf</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">showpos</span><span class=\"p\">);</span>      <span class=\"c1\">// 显示符号\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">unsetf</span><span class=\"p\">(</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">showpos</span><span class=\"p\">);</span>     <span class=\"c1\">// 取消显示符号\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"mf\">3.14159</span>\n<span class=\"mf\">3.14159274</span>\n<span class=\"mf\">3.24</span>\n\n<span class=\"mi\">256</span>\n<span class=\"mi\">100</span>\n<span class=\"o\">**</span><span class=\"mi\">256</span>\n<span class=\"o\">+</span><span class=\"mi\">256</span>\n<span class=\"mi\">256</span>\n</code></pre></div><p>为了与 C 语言兼容，C++ 保留了 C 中的  scanf 和 printf 函数进行输入输出，以及 getchar 和 putchar 函数进行单个字符的输入输出。</p><p>此外，我们还可以用输入输出流对象的一些成员函数来实现输入和输出。</p><ul><li><code>cout.put()</code>输出单个字符，可以连续输出</li><li><code>cin.get()</code>读入一个字符（包括空白字符），返回读入成功的字符，如遇到文件结束符，返回 EOF</li><li><code>cin.get(ch)</code>读入一个字符并赋值给变量 ch，成功读入则返回真</li><li><code>cin.get</code>(字符数组或指针，字符个数 n，终止字符) 读入 n-1 个字符，如遇到终止字符则提前结束</li><li><code>cin.getline</code>(字符数组或指针，字符个数 n，终止字符) 与上面的 cin.get 类似，但是遇到终止字符时，<b>字符指针会移到该终止字符后面，而 cin.get 则会停留在原位置</b></li></ul><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>          <span class=\"c1\">// 读入 1\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span>    <span class=\"c1\">// 读入 2\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>      <span class=\"c1\">// 读入 3\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"sc\">&#39;/&#39;</span><span class=\"p\">);</span>  <span class=\"c1\">// 读入 123 之后的第一个回车以及 &#39;hello, seniusen! h&#39; 共计 19 个字符\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"sc\">&#39;/&#39;</span><span class=\"p\">);</span>    <span class=\"c1\">// 读入&#39;ello, seniusen!&#39; 共计 15 个字符，遇到终止字符 ‘/’ 停止\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"sc\">&#39;/&#39;</span><span class=\"p\">);</span>  <span class=\"c1\">// 当前字符指针还停留在字符 ‘/’ 处，直接停止读入，字符指针后移一位指向空格\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"sc\">&#39;/&#39;</span><span class=\"p\">);</span>   <span class=\"c1\">// 读入&#39; hello, seniusen!&#39; 共计 17 个字符，遇到终止字符 ‘/’ 停止\n</span><span class=\"c1\"></span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ch</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"mi\">123</span>    <span class=\"n\">Enter</span>\n<span class=\"mi\">1</span>\n<span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"n\">hello</span><span class=\"p\">,</span> <span class=\"n\">seniusen</span><span class=\"o\">!</span> <span class=\"n\">hello</span><span class=\"p\">,</span> <span class=\"n\">seniusen</span><span class=\"o\">!/</span> <span class=\"n\">hello</span><span class=\"p\">,</span> <span class=\"n\">seniusen</span><span class=\"o\">!/</span>    <span class=\"n\">Enter</span>\n\n<span class=\"n\">hello</span><span class=\"p\">,</span> <span class=\"n\">seniusen</span><span class=\"o\">!</span> <span class=\"n\">h</span>\n<span class=\"n\">ello</span><span class=\"p\">,</span> <span class=\"n\">seniusen</span><span class=\"o\">!</span>\n\n <span class=\"n\">hello</span><span class=\"p\">,</span> <span class=\"n\">seniusen</span><span class=\"o\">!</span>\n</code></pre></div><p>一些其他的成员函数：</p><ul><li><code>cin.eof()</code>如果到达文件末尾（遇文件终止符）返回真，否则返回假</li><li><code>cin.peek()</code>返回当前指针指向的字符，但只是观测，指针仍然停留在当前位置</li><li><code>cin.putback(ch)</code>将字符 ch 返回到输入流，插入到当前指针位置</li><li><code>cin.ignore</code>(n, 终止字符) 跳过输入流中 n 个字符，若遇到终止符提前结束，此时指向终止字符后面一个位置</li></ul>", 
            "topic": [
                {
                    "tag": "笔记", 
                    "tagLink": "https://api.zhihu.com/topics/19554982"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1040175282791165952"
}
