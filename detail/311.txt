{
    "title": "基于数据结构与算法的思考", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/hu-chang-an-49", 
        "https://www.zhihu.com/people/li-yi-heng-60-80", 
        "https://www.zhihu.com/people/dong-fang-yu-85", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/ning-meng-xin-73-58", 
        "https://www.zhihu.com/people/ying-huo-chong-fei-ba", 
        "https://www.zhihu.com/people/cui-hao-liang-38", 
        "https://www.zhihu.com/people/yao-shi-zhi-hui", 
        "https://www.zhihu.com/people/woshiamiaojiang", 
        "https://www.zhihu.com/people/ming-tian-52-30-63", 
        "https://www.zhihu.com/people/dsc-debian", 
        "https://www.zhihu.com/people/qing-chun-63", 
        "https://www.zhihu.com/people/monk-32", 
        "https://www.zhihu.com/people/lin-jin-28", 
        "https://www.zhihu.com/people/lizhengxu", 
        "https://www.zhihu.com/people/leixiaoan", 
        "https://www.zhihu.com/people/pin-king", 
        "https://www.zhihu.com/people/wzz-74-1", 
        "https://www.zhihu.com/people/Micro-Kun", 
        "https://www.zhihu.com/people/wang-yu-3-82", 
        "https://www.zhihu.com/people/tan-jin-tao-70", 
        "https://www.zhihu.com/people/zhe-shi-dui-na-shi-cuo-46", 
        "https://www.zhihu.com/people/AlwaysSe7en.Chan", 
        "https://www.zhihu.com/people/yin-sheng-wang-75", 
        "https://www.zhihu.com/people/moda1113", 
        "https://www.zhihu.com/people/wang-wan-wei-34", 
        "https://www.zhihu.com/people/jiu-ye-20-63"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/33137837", 
            "userName": "独玄", 
            "userLink": "https://www.zhihu.com/people/86f995c182924fa000759155587cd0e2", 
            "upvote": 16, 
            "title": "剑指offer杂说", 
            "content": "<p>     在写文章之前，有个之前我常犯的误区说说，我相信应该有同学跟我一样在写数据结构时不动笔，老是在那儿掰扯着想怎么实现，这样实际来说多数时间都在考虑怎么实现，而没有考虑解决问题，效率很低。即使题目不难，估计也是想挺久，这是个很大的误区。所以还是拿本本子画画吧，我觉得你会发现这效率倍增，貌似是之前看了左神的视频被熏陶到了。</p><p>     有道题：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">用2</span><span class=\"o\">*</span><span class=\"n\">1的小矩形横着或者竖着去覆盖更大的矩形</span><span class=\"err\">，</span><span class=\"n\">请问用8个2</span><span class=\"o\">*</span><span class=\"n\">1的小矩形无重叠地覆盖一个2</span><span class=\"o\">*</span><span class=\"n\">8的大矩形</span>\n<span class=\"err\">，</span><span class=\"n\">总共有多少种方法</span><span class=\"err\">？</span><span class=\"o\">(</span><span class=\"n\">如下图所示</span><span class=\"o\">)</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-870edfae8ed97f97a7cdcc46f5febf34_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"94\" class=\"content_image\" width=\"379\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;379&#39; height=&#39;94&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"94\" class=\"content_image lazy\" width=\"379\" data-actualsrc=\"https://pic1.zhimg.com/v2-870edfae8ed97f97a7cdcc46f5febf34_b.jpg\"/></figure><p>     这道题更多考虑的是一种建模思维，我们可以将2*1横放或者竖放，那么其实可以这么当横放时，意味着将会消耗2列格子，而当竖放只会消耗1列格子，那么就可以采用f(n-1)+f(n-2)的斐波纳契数列式的模式，所以提取出模式挺重要的。</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">     * @param n 矩形列数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findRectangleWay</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">){</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">&lt;</span><span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">==</span><span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">findRectangleWay</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)+</span><span class=\"n\">findRectangleWay</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">2</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 优化递归造成的重复计算\n</span><span class=\"cm\">     * @param n\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sortRectangleWay</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">result</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">2</span><span class=\"o\">};</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">&lt;</span><span class=\"n\">3</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"o\">=</span><span class=\"n\">2</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">second</span><span class=\"o\">=</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">resultNum</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">3</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"n\">resultNum</span><span class=\"o\">=</span><span class=\"n\">first</span><span class=\"o\">+</span><span class=\"n\">second</span><span class=\"o\">;</span>\n            <span class=\"n\">second</span><span class=\"o\">=</span><span class=\"n\">first</span><span class=\"o\">;</span>\n            <span class=\"n\">first</span><span class=\"o\">=</span><span class=\"n\">resultNum</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">resultNum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>     有道题(牛客看到的*条面试题目)</p><div class=\"highlight\"><pre><code class=\"language-text\">根据输入的字符串输出最短的循环子串,比如输入123231,那么输出23</code></pre></div><p>     思路:看到这题目前，第一感我也觉得用栈，但是验证之后不行</p><p>     采用挪动字符串来比较，可以将一个字符串当成两个字符串，一个固定不动，另一个往前挪动</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-578fcf0cb172231c4b36ae6efa58b08a_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-578fcf0cb172231c4b36ae6efa58b08a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-578fcf0cb172231c4b36ae6efa58b08a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-578fcf0cb172231c4b36ae6efa58b08a_b.jpg\"/></figure><p>固定数组的下标0开始，移动数组的下标从1开始，依次比较上下数是否相等；如果不等，则指针都跳过；如果相等，则保存当前的字符串，继续下一个，如果下一个不一致，则获取固定数组的当前指针的下标与移动数组的当前指针的下标，如果相差1，则将当前字符串的长度与全局的最小长度相比较，并更新该变量。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-13029e4bd947aee713da504991d25a7e_b.jpg\" data-size=\"small\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-13029e4bd947aee713da504991d25a7e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-13029e4bd947aee713da504991d25a7e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-13029e4bd947aee713da504991d25a7e_b.jpg\"/><figcaption>(2)</figcaption></figure><p>从图2可以看到，当到阶段2时，由于挪动到固定数组1下标对应移动数组下标3,2对应4时，刚好3-2=1，刚好相邻，那么也就可以更新全局保存的最小量。当然，这不意味着停止，因为我们可能拿到最优解但也许只是个可行解，需要继续往下判断。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">findShortRepeactSequence</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">fixedArr</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span><span class=\"o\">=</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">=-</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">end</span><span class=\"o\">=-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">1</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">fixedArr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"n\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">linkedList</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">fixEnd</span><span class=\"o\">=-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">moveStart</span><span class=\"o\">=-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">;</span><span class=\"n\">q</span><span class=\"o\">&lt;</span><span class=\"n\">fixedArr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">q</span><span class=\"o\">++,</span><span class=\"n\">p</span><span class=\"o\">++){</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fixedArr</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]==</span><span class=\"n\">fixedArr</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">moveStart</span><span class=\"o\">=</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()?</span><span class=\"nl\">q:</span><span class=\"n\">moveStart</span><span class=\"o\">;</span>\n                    <span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">fixedArr</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]);</span>\n                    <span class=\"n\">fixEnd</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">moveStart</span><span class=\"o\">-</span><span class=\"n\">fixEnd</span><span class=\"o\">==</span><span class=\"n\">1</span><span class=\"o\">){</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">&gt;</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()){</span>\n                                <span class=\"n\">min</span><span class=\"o\">=</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n                                <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">fixEnd</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n                                <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">moveStart</span><span class=\"o\">;</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n                        <span class=\"n\">fixEnd</span><span class=\"o\">=-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n                        <span class=\"n\">moveStart</span><span class=\"o\">=-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">moveStart</span><span class=\"o\">-</span><span class=\"n\">fixEnd</span><span class=\"o\">==</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">&gt;</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()){</span>\n                        <span class=\"n\">min</span><span class=\"o\">=</span><span class=\"n\">linkedList</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n                        <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">fixEnd</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span>\n                        <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">moveStart</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">end</span><span class=\"o\">+</span><span class=\"n\">min</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">++){</span>\n            <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">fixedArr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>     题目：矩阵中的路径</p><div class=\"highlight\"><pre><code class=\"language-text\">请设计一个函数，用来推断在一个矩阵中是否存在一条包括某字符串全部字符的路径。路径能够从矩阵中\n随意一格開始。每一步能够在矩阵中间向左、右、上、下移动一格。假设一条路径经过了矩阵的某一格，\n那么该路径不能再次进入该格子。\n\n比如在以下的3*4的矩阵中包括一条字符串”bcced”的路径。\n但矩阵中不包括字符串“abcb”的路径，因为字符串的第一个字符b占领了矩阵中的第一行第二格子之后，\n路径不能再次进入这个格子。\n\na b c e\ns f c s\na d e e</code></pre></div><p>      这道题采用回溯法，回溯法也挺直白的，不行就回退，所以在实现方面需要有内存去存放上一步，以防走不下去，还有对于这种存在边界问题的题目，可以考虑先把边界写出来，防止出现null。</p>", 
            "topic": [
                {
                    "tag": "剑指Offer（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121522"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": [
                {
                    "userName": "bluetrees", 
                    "userLink": "https://www.zhihu.com/people/0a0fc842926d92af434a4bc6738c4fb1", 
                    "content": "<p>我是看见图进来的。然后完全没看内容。</p>", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "justjavac", 
                    "userLink": "https://www.zhihu.com/people/ced30ef2e460b4febfd77ef3038167ce", 
                    "content": "把图片交出来我就点赞", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "SimpleYoung", 
                    "userLink": "https://www.zhihu.com/people/7e733b51ec21f2227e8287835d016fef", 
                    "content": "为什么都喜欢配这种骚骚的封面图😳", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "独玄", 
                            "userLink": "https://www.zhihu.com/people/86f995c182924fa000759155587cd0e2", 
                            "content": "喜欢吗？哈哈哈", 
                            "likes": 0, 
                            "replyToAuthor": "SimpleYoung"
                        }
                    ]
                }, 
                {
                    "userName": "热牛奶", 
                    "userLink": "https://www.zhihu.com/people/6b0c87fecd7e2d1f20644a1161edafc8", 
                    "content": "左神是谁？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "janzzz", 
                    "userLink": "https://www.zhihu.com/people/b2eaeac836345e4a6ce3a5dbfe296cbc", 
                    "content": "左神是谁？我想看他的视频", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_138506449"
}
