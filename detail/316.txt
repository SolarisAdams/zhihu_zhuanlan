{
    "title": "软件开发知路", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/xiao-qi-13-17-21", 
        "https://www.zhihu.com/people/zui-chu-cai", 
        "https://www.zhihu.com/people/chen-lei-50", 
        "https://www.zhihu.com/people/da-ming-xiang-shui", 
        "https://www.zhihu.com/people/vincent-shi-62", 
        "https://www.zhihu.com/people/joker-78-24-86", 
        "https://www.zhihu.com/people/ko-artist", 
        "https://www.zhihu.com/people/liang-zhou-ming-12", 
        "https://www.zhihu.com/people/feng-kuang-de-xiao-liu-8", 
        "https://www.zhihu.com/people/tian-simon-6", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/chaoticfanzhe", 
        "https://www.zhihu.com/people/arron-98-60", 
        "https://www.zhihu.com/people/clarens.cheuk", 
        "https://www.zhihu.com/people/parry-nee", 
        "https://www.zhihu.com/people/xue-chang-qing-30", 
        "https://www.zhihu.com/people/gao-xiao-dui", 
        "https://www.zhihu.com/people/li-sha-23-2", 
        "https://www.zhihu.com/people/a-jian-47-26", 
        "https://www.zhihu.com/people/happycodingfordream", 
        "https://www.zhihu.com/people/hjforever", 
        "https://www.zhihu.com/people/lu-li-qun-99", 
        "https://www.zhihu.com/people/tian-tang-shang-de-ji-mo", 
        "https://www.zhihu.com/people/di-mo-64", 
        "https://www.zhihu.com/people/ye-ling-ye-83", 
        "https://www.zhihu.com/people/zhaoweijing", 
        "https://www.zhihu.com/people/hrsonion", 
        "https://www.zhihu.com/people/scofined", 
        "https://www.zhihu.com/people/mo-mo-65-38", 
        "https://www.zhihu.com/people/wcjyfry-78", 
        "https://www.zhihu.com/people/dan-xiao-de-xie-er-dun", 
        "https://www.zhihu.com/people/ma-bai-xue-37", 
        "https://www.zhihu.com/people/liu-yang-49-92-94", 
        "https://www.zhihu.com/people/hu-dong-peng-13", 
        "https://www.zhihu.com/people/0xfintech", 
        "https://www.zhihu.com/people/feng-zhong-de-yi-han-83", 
        "https://www.zhihu.com/people/zhang-zi-yi-31-40", 
        "https://www.zhihu.com/people/chen-jun-li-90", 
        "https://www.zhihu.com/people/jie-gou-37", 
        "https://www.zhihu.com/people/luo-san-85", 
        "https://www.zhihu.com/people/liu-gang-16-36", 
        "https://www.zhihu.com/people/zzx-47-7", 
        "https://www.zhihu.com/people/luozhongbin", 
        "https://www.zhihu.com/people/osn7500", 
        "https://www.zhihu.com/people/shi-yu-fei-51-35", 
        "https://www.zhihu.com/people/hh2012", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/avenger-82-18", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/glaver", 
        "https://www.zhihu.com/people/xu-xiao-sheng-18", 
        "https://www.zhihu.com/people/luoweisong", 
        "https://www.zhihu.com/people/mu-xiao-er-93", 
        "https://www.zhihu.com/people/shan-liang-ren-78-62", 
        "https://www.zhihu.com/people/gong-sun-xuan-yuan-2601", 
        "https://www.zhihu.com/people/xie-xie-ni-81-18", 
        "https://www.zhihu.com/people/xiao-he-cai-dao", 
        "https://www.zhihu.com/people/xu-jia-hao-88", 
        "https://www.zhihu.com/people/yu-sheng-65-39", 
        "https://www.zhihu.com/people/zhu-jack-10", 
        "https://www.zhihu.com/people/wang-feng-13-74", 
        "https://www.zhihu.com/people/ji-mo-xiao-ran", 
        "https://www.zhihu.com/people/feng-seven-48", 
        "https://www.zhihu.com/people/ceidion", 
        "https://www.zhihu.com/people/walter-32", 
        "https://www.zhihu.com/people/macone", 
        "https://www.zhihu.com/people/lao-cao-de-bi-chu", 
        "https://www.zhihu.com/people/melon123", 
        "https://www.zhihu.com/people/shi-jiang-yong", 
        "https://www.zhihu.com/people/i.PSD", 
        "https://www.zhihu.com/people/honylee", 
        "https://www.zhihu.com/people/jiang-niao-mu", 
        "https://www.zhihu.com/people/liu-xiao-ting-49", 
        "https://www.zhihu.com/people/huang-jia-ming-37", 
        "https://www.zhihu.com/people/xionglai", 
        "https://www.zhihu.com/people/quan-zheng-29", 
        "https://www.zhihu.com/people/hu-xiao-qiang-94-19", 
        "https://www.zhihu.com/people/z494627", 
        "https://www.zhihu.com/people/yang-yi-28-87-27", 
        "https://www.zhihu.com/people/xiao-lin-zi-14-81", 
        "https://www.zhihu.com/people/yu-ze-feng", 
        "https://www.zhihu.com/people/guo-jia-nan-52", 
        "https://www.zhihu.com/people/yun-he-73-56", 
        "https://www.zhihu.com/people/walkingway", 
        "https://www.zhihu.com/people/pasteh", 
        "https://www.zhihu.com/people/Radon86", 
        "https://www.zhihu.com/people/su-chang-60-5", 
        "https://www.zhihu.com/people/xiao-yi-9-67", 
        "https://www.zhihu.com/people/lucien-65-14", 
        "https://www.zhihu.com/people/lukyman", 
        "https://www.zhihu.com/people/haaaaa-25", 
        "https://www.zhihu.com/people/wang-sir-90-57", 
        "https://www.zhihu.com/people/chen-chao-420", 
        "https://www.zhihu.com/people/roysite", 
        "https://www.zhihu.com/people/a-fei-xi-ya-65", 
        "https://www.zhihu.com/people/jueying2015", 
        "https://www.zhihu.com/people/hhstore", 
        "https://www.zhihu.com/people/chuan-ge-er-79", 
        "https://www.zhihu.com/people/mo-er-ben-de-wen-rou", 
        "https://www.zhihu.com/people/Lujango", 
        "https://www.zhihu.com/people/toby941", 
        "https://www.zhihu.com/people/njnu1115", 
        "https://www.zhihu.com/people/sun-qing-fei-88", 
        "https://www.zhihu.com/people/wang-yong-ning", 
        "https://www.zhihu.com/people/xiao-hai-zi-39-16", 
        "https://www.zhihu.com/people/need-71-78", 
        "https://www.zhihu.com/people/lan-se-you-qi-bing-22", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/ning-yuan-71", 
        "https://www.zhihu.com/people/shi-jiu-lou-xue-chang", 
        "https://www.zhihu.com/people/shen-jing-5-63", 
        "https://www.zhihu.com/people/fengbeihong", 
        "https://www.zhihu.com/people/ggff-ss", 
        "https://www.zhihu.com/people/zhou-gong-42-88", 
        "https://www.zhihu.com/people/mei-li-ren-sheng-4-42", 
        "https://www.zhihu.com/people/zhang-bin-23-59", 
        "https://www.zhihu.com/people/pan-jacky-9", 
        "https://www.zhihu.com/people/lfl-90", 
        "https://www.zhihu.com/people/HackerWangZhihu", 
        "https://www.zhihu.com/people/zhslikey", 
        "https://www.zhihu.com/people/iskwiwuay", 
        "https://www.zhihu.com/people/pang-da-hua", 
        "https://www.zhihu.com/people/dangdangzone", 
        "https://www.zhihu.com/people/wang-xin-27-77", 
        "https://www.zhihu.com/people/grady-29", 
        "https://www.zhihu.com/people/felixlisp", 
        "https://www.zhihu.com/people/javan-wen", 
        "https://www.zhihu.com/people/qian-shui-yin", 
        "https://www.zhihu.com/people/meng-mei-1992", 
        "https://www.zhihu.com/people/lao-duan-5-90", 
        "https://www.zhihu.com/people/xpower-96", 
        "https://www.zhihu.com/people/wang-xiao-shi-54-28", 
        "https://www.zhihu.com/people/gordon-alex", 
        "https://www.zhihu.com/people/mxins", 
        "https://www.zhihu.com/people/wudalu", 
        "https://www.zhihu.com/people/yang-wang-xing-kong-64-24", 
        "https://www.zhihu.com/people/hanxq-11", 
        "https://www.zhihu.com/people/kiwi-33-12", 
        "https://www.zhihu.com/people/douzi-xiao-83", 
        "https://www.zhihu.com/people/zheng-chu-hai", 
        "https://www.zhihu.com/people/zhe-shi-shen-ma", 
        "https://www.zhihu.com/people/feng-shi-7", 
        "https://www.zhihu.com/people/dongtianhui", 
        "https://www.zhihu.com/people/sun-xiao-shan-16", 
        "https://www.zhihu.com/people/huang-song-kai-60", 
        "https://www.zhihu.com/people/ying-li-59", 
        "https://www.zhihu.com/people/haha-38-55", 
        "https://www.zhihu.com/people/jack-11-20-30", 
        "https://www.zhihu.com/people/dong-xiao-hua-57-48", 
        "https://www.zhihu.com/people/heart_king", 
        "https://www.zhihu.com/people/guowei-50", 
        "https://www.zhihu.com/people/huang-yong-40-91", 
        "https://www.zhihu.com/people/cui-wei-gang-64", 
        "https://www.zhihu.com/people/louis-10-74", 
        "https://www.zhihu.com/people/kano-acker", 
        "https://www.zhihu.com/people/shan-liu-23", 
        "https://www.zhihu.com/people/shanwill", 
        "https://www.zhihu.com/people/wang-jian-lin-94", 
        "https://www.zhihu.com/people/mo-da-ming-27", 
        "https://www.zhihu.com/people/silsuer", 
        "https://www.zhihu.com/people/sun-8-61-78", 
        "https://www.zhihu.com/people/mu-yi-xiang-28", 
        "https://www.zhihu.com/people/yuyongbo-59", 
        "https://www.zhihu.com/people/xiang-wo-gu-zhang", 
        "https://www.zhihu.com/people/yun-wei-xiao-pen-you", 
        "https://www.zhihu.com/people/du-bian-wei-lai", 
        "https://www.zhihu.com/people/awen162awen", 
        "https://www.zhihu.com/people/haluowan", 
        "https://www.zhihu.com/people/niu-er-48", 
        "https://www.zhihu.com/people/taohua-daozhu", 
        "https://www.zhihu.com/people/tohchuen", 
        "https://www.zhihu.com/people/zhang-tao-21-47-70", 
        "https://www.zhihu.com/people/gu-yu-71-65", 
        "https://www.zhihu.com/people/chen-ling-68-44", 
        "https://www.zhihu.com/people/zuo-yan-2-8", 
        "https://www.zhihu.com/people/ncusoho", 
        "https://www.zhihu.com/people/ru-feng-wang-shi-9", 
        "https://www.zhihu.com/people/jj-tyro", 
        "https://www.zhihu.com/people/zi-mu-15-86", 
        "https://www.zhihu.com/people/zhao-hua-18", 
        "https://www.zhihu.com/people/ajtomato", 
        "https://www.zhihu.com/people/emmaxing-la", 
        "https://www.zhihu.com/people/knife921", 
        "https://www.zhihu.com/people/leyonh", 
        "https://www.zhihu.com/people/xianlong-chen", 
        "https://www.zhihu.com/people/lei-jia-ming", 
        "https://www.zhihu.com/people/alexzhanghc", 
        "https://www.zhihu.com/people/xiao-rui-35-73", 
        "https://www.zhihu.com/people/liuguoqing-98", 
        "https://www.zhihu.com/people/Chen_Weizhao", 
        "https://www.zhihu.com/people/jiu-ye-20-63", 
        "https://www.zhihu.com/people/wang-hai-bing-73", 
        "https://www.zhihu.com/people/ha-ha-ha-ha-ha-ha-ha-84-21", 
        "https://www.zhihu.com/people/da-wei-37-32", 
        "https://www.zhihu.com/people/wei-zhang-7", 
        "https://www.zhihu.com/people/13084386690", 
        "https://www.zhihu.com/people/sufar", 
        "https://www.zhihu.com/people/ting-46-60-51"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/35656046", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《像外行一样思考，像专家一样实践》（一）像外行一样思考，像专家一样实践（2）", 
            "content": "<p>像外行一样思考，像专家一样实践——科研成功之道，金出武雄 著，马金城 王国强 译，电子工业出版社，2006年8月第一版，2015年4月第二版。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本篇完成了第一章的内容。按照作者的理念，第一章的内容基本涵盖了后面章节的内容，因此后面章节不再赘述（也是由于时间关系）。</p><p>======================================================</p><p>7. 所谓构想力是限定问题的能力</p><p>构想力也是智慧的一种能力。拥有“智慧体力”（长时间的集中精力）的人可以在不崩坍的情况下长时间地捧着，而不高明的人将沙子捧在手里的时候就一点点往下漏，最终反而失去了所有的问题和目标。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>举了松本清张的小说《某[小仓日记]传》和《点与线》的例子，说明好小说构思优秀。我于是去图书馆借了松本清张的《点与线》和《零的焦点》，确实都值得一看。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>世界上大部分问题都很难，用共通的形式去解决是不可能的。特别是工科问题，要提炼出想实现的目标和想阐明的现象。要符合：1) 范围不能太宽广，也不能太狭窄；2）要使用的假设和前置条件不能太少，也不能太多。其标准则是提炼的解决、结果是否是实用的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果在解决问题时，能准确地限定问题的关键点，将会非常有效。作者在京都大学研究生时期的指导教师坂井利之教授说过“如果能给问题下个定义，就已经解决了60%”。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8. KISS方法——单纯地，简单地</p><p>KISS：Keep It<br/>Simple, Stupid。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>做事要坚持到底，不要在中途说做不下去了，做到最后还不行，再说做不下去还差不多。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者在高中时，古文学不是很好，在书店看到一本书《古文强化法》，封面上写着“坚持到底”，书里写“本书要反复阅读五遍。第一遍三天，第二遍一周，第三遍两周，第四遍三周，第五遍一个月”，“如果五遍都读完了，那么学习高中的古文就简单了”。作者抱着华裔的态度买了这本书，按照书上的方法去做，五遍之后果然觉得不难了。朋友们却说“只有你才会把这事情当真。”<br/> 不过我也确实不大理解这样的方法是怎么起到作用的？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其实做事只要坚持到最后，就算不成钢也会学到很多。发现一个方法行不通，就要弄清楚为什么行不通。如果都弄清楚了，虽然还是解决不了问题，但也能多多少少了解到问题的本质。明确问题的难点是非常重要的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>别想乱七八糟的方法，以KISS为原则来做。别像以前那样设计什么“巧妙”的方法，学会简单直接地处理问题是非常重要的。以计算机图形学中，以前模拟实现物体表面的光反射是仿生技术的主流做法，而现在直接为物体表面或表层的光反射、吸收等光学物理现象进行建模计算的做法已经非常盛行。该方法本质上更加正确，因此得出的结果也自然更好。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9. 智慧体力——所谓的集中力，就是让自己成为问题本身</p><p>没有那种可以打败对未知的不安、为得出研究结果而持之以恒的智慧体力，是很难研究出什么成果的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者曾经有一次读研究生的时候连续74个小时连续不断思考问题。还举了日本象棋职业棋手米长邦雄下棋时集中精力思考头皮发红的例子。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>要让自己成为问题本身。1）在头脑中描绘问题：要思考问题是怎么产生的。要想清楚这几点就好：要想清楚问题的切入点，这是肯定会有收获的。也要想到那些有可能产生但与本质无关可以暂且搁置的问题，甚至跟本质不十分相关的问题。2）集合收到的材料为研究打基础：这个阶段是最关键的。从最简单的例题开始，首先为这些例题想一些假定的解法。接着做一些复杂的例题，然后思考为什么原来的解法就不能解答了。3）把构筑好的基础不断地延展、变强：这个阶段要多尝试，即便是很小的尝试。譬如写一个计划。即便是细如针尖的材料，也要持续积累起来。这个过程，是不能中断的。一旦停止，已经积累起来的基础就会土崩瓦解。建造高楼时，高度越高根基也要越广。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>上述阶段都经历了，就可以尝试一下实际的问题了。还要思考“能不能正面这个解法是正确的啊？”，或者反过来想“我能不能做出一个该解法解不出来的例题呢？”这种逆向思维对于深刻了解解法的本质十分有效。这个过程一直反复做下去，直到有一天，感觉到自己就变成了问题本身。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>10. 越能干的人，越会迷茫</p><p>作者从小到大一直很优秀，记忆力好，考试都如同游戏一般。但研究与考试不一样。做研究的时候，并不知道解决的问题有没有价值，也不知道问题的本身有么有答案，所以研究不是那种随便想想就能完成的简单的事情。作者开始博士研究后，研究课题进行不下去，换了几个，后来他的老师长尾真老师让她研究人脸图像的识别这个具体问题，作者觉得这个具体目标能够成功，并且经过一年的艰苦努力，取得了最终的成功，而且还形成了该领域前所未有的成果。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>上述经历让作者明白了：做研究和搞开发没有具体目标是绝对不行的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>交织的不安感与成就感是智慧体力强有力的基石。研究过程中经常有两种感觉：“能不能行呢？”的不安感和“啊！成功了！”的成就感。就算是卡耐基•梅隆大学的计算机科学系和机器人研究所的博士研究生，这样世界范围内出类拔萃的精英，也避免不了这种感觉。或许说，正是这种人，才更容易陷入不安和迷茫。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>要想成功，必定迷茫！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>11. 从“做不到”重新开始</p><p>不可能的典型例子是永动机。虽然根据能量守恒定律，人们知道永动机无法实现。但人们不仅没有停止制造机器，反而根据制造永动机的经验，发现了热效率并为今后制造更好的机器提供了宝贵的经验。这就是：消极的结果却带来了积极的效应。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>科学的进步就是不断追求更高的极限。不断向前，突破极限，就很可能诞生出一种新的发展方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>《2001太空漫游》的作者阿瑟•C•克拉克曾写过三条很有趣的技术法则。</p><p>第一条：科学工作者声明某件事是可行的时候，基本上他不会错。但当他说不可能的时候，他很可能错了。</p><p>第二条：发现极限在哪里的唯一方法就是超越极限，尝试向稍微超越这个极限的领域迈进、冒险。</p><p>第三条：无论是哪种技术，只要它是非常先进的，那看起来都跟魔术没什么区别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>科学工作者说不可能的时候，他很可能错了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者在解释他研究的“折纸世界”理论（即二维图形能得到多少立体图形），讲了夏目漱石在任英语老师的时候，有学生问Possible和Probable的区别。他这样解释：“我作为一名老师，现在在讲台上倒立是Possible，但却不是Probable。”很精辟的解释！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在研究遇到阻碍时，我们只有靠自己的力量尽力避免哪些根本行不通的问题，或者说要是行不通的话就稍微改变一下策略，从反面思考一下，能不能得到一个更好的研究方向和解决办法。这种思考方法才是最重要的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>12. 在与他人的交流中完善自己的构想</p><p>与别人交流自己的构想，目的并不一定是要征求对方的回答，或听取对方的意见。即便那个人是这方面的专家也一样。把自己的构想跟他人交流，是要锤炼自己的想法，发现不完备之处，触发新的灵感，并且练习如何提取概要以便让他人了解自己的意思。Would you please be my sounding board?</p><p class=\"ztext-empty-paragraph\"><br/></p><p>日本人缺乏创新思想，这句话曾经十分盛行。但作者认为这是不对的，从诺贝尔奖得主、身边各种工业产品、游戏软件、漫画等，都能体现出日本人的创新思想。但从给美国视点来看，日本人通常缺乏一种能力：锤炼自己的想法，使之升华，将其变为更容易理解、容易接受的形式向人们表达，得到认同，并把大家都变成这种想法的信奉者。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>要升华锤炼构想，方法就是跟他人交流，在交谈中验证是不是一个有价值的想法，并且获取相关知识，修正不完备的地方。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>跟他人交流自己的构想时，会突然发现自己没有想到的地方。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>把自己的构想跟他人交流，不会被他人盗用吗？作者认为这分为三种情况：1）对方已经知道的情况下，没什么损失。2）对方还不知道，但对这个构想没什么兴趣。或者因为听到这个构想而感兴趣开始研究，但没什么结果。这也没什么。如果你取得了成果，对方还会对你产生敬意。3）对方还不知道，根据听到的构想领先一步取得成果。这会比较麻烦。但别人更晚研究，说明头脑更聪明、手段更高明。那无论你是否将构想说给他，都会败给他。所以就认了吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>13. 加上一点我的亲身经历</p><p>研究者必须知道以下三件事情：1)能得出好结果的方法，其中必有诀窍；2)结果不会像魔术一样自己跑出来；3)识别好结果的能力是很重要的。</p><p>作者出生于兵库县冰上郡，是五个兄弟姐妹中最小的。小时候家里穷，自己好奇心强，想要的东西都不会去买，而是试着自己做。钓鱼的鱼钩自己做，因为没发现回钩装置，所以失败了。小学一年级搬到神户，二年级被一个瓶盖骗钱的魔术骗了，花了10日元买了瓶盖（大概当时10日元还值不少钱吧。后面作者 说卖铜换了150日元，相当于现在1000日元。那看来10日元相当于现在67日元。），以为能源源不断出钱。事后很悔恨，但这种经验是教不来的，也成为自己人生道路上前进的原动力之一。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>14. “像专家一样思考，像外行一样实践”就糟糕了</p><p>举了EMACS的正面例子，以及日本H公司的文本编辑器的例子，该编辑器完全按照IBM卡片打孔机来做成文本编辑器，使用户体验很糟糕，例如每行只能80个字，不能一行拆成两行。这就是像专家一样思考。</p><p>像外行一样实践也举了F公司开发的多个应用程序，在设置控制地址时，数字设置不规范不一致，给用户的感觉很不好。</p><p>开发系统的人头脑中一定要有“用户是在与系统进行对话”这种概念。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>15. 关于独创和创造的三种违反常识的说法</p><p>三种正解：</p><p>1）独创不是灵光闪现。</p><p>作者认为很大一部分的构想都不是忽然闪现出来的，应该是经过长时间的思考最终得出的结果。</p><p>庞加莱上马车想到重大问题的解法，是平日里就不断思考问题，想法不断累计的结果。日本数学大家——冈洁老师，经常在奈良的一条小路上散步的时候想出好的想法。</p><p>即将得到答案的时候我自己是有感觉的，那个时候总会心情激动，心也怦怦跳。构想只能从持续不断的思考中诞生。</p><p>2）有创造能力的人在学校里成绩也好</p><p>举了有报道说2002年诺贝尔物理学奖得主小柴昌俊教授在高中时物理成绩很差，连老师都告诉他放弃的例子。作者认为这多半是媒体为了使文章有趣而编造夸张出来的。</p><p>但凡从事伟大事业的人都有一些共同的特征。首先，他们很博学。不仅局限于自身的领域，也涉猎其他的领域。其次，他们头脑反应都很快。能在交谈时迅速反应出对方说的与自己说的有什么共同点和矛盾，有什么理论联系，而且能一下引证与之相关的事实。讲东西很有趣。会开玩笑，把生活中的琐事和自己所研究的领域结合起来。</p><p>3）创造的基础是模仿</p><p>某个人首先想到的、谁也没想出来的绝佳的构想，这种情况是少之又少的。</p><p>细心调查一下过去的专利申请，特别是那些最终没有被批准的专利申请，就会发现这是个创新的宝库。</p><p>模仿、相似挺好的。最初的想法的确是相同的，但在此基础上添加东西、使之升华的水平高低才是决定胜负的关键。</p>", 
            "topic": [
                {
                    "tag": "科研", 
                    "tagLink": "https://api.zhihu.com/topics/19556895"
                }, 
                {
                    "tag": "创新", 
                    "tagLink": "https://api.zhihu.com/topics/19550587"
                }, 
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34682517", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 2, 
            "title": "《像外行一样思考，像专家一样实践》（一）像外行一样思考，像专家一样实践（1）", 
            "content": "<p>像外行一样思考，像专家一样实践——科研成功之道，金出武雄 著，马金城 王国强 译，电子工业出版社，2006年8月第一版，2015年4月第二版。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者金出武雄：生于1945年。1974年修完东京大学电子工学博士课程，取得工学博士学位。留校担任助理教授后，1980年赴美担任卡耐基·梅隆大学机器人研究所高级研究员。在该研究所担任过准教授、教授，并于1992年到2001年期间升任所长。2006年成立生活质量工程研究中心并担任中心主任。2001年在日本成立产业技术综合研究所数字人类研究中心，并在2001年到2009年间兼任中心主任，现在是该研究所的特别研究员。 在汽车、自主直升机、视觉、人脸识别、虚拟现实、第一人称视觉、机器人工学—图像识别等领域是重量的权威人物。现在还在日美两国继续进行着独创性的研究。 金出武雄是全美工学学会会员，曾获富兰克林鲍尔基金会奖、C&amp;C奖、大川奖、立石特别奖、IEEE机器人工学先锋奖等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>第一章  像外行一样思考，像专家一样实践</p><p>1. 海阔天空的构思</p><p>做研究不必太过严肃，要做有趣的事情，让自己精神上很放松，同时心里又觉得紧张期待的事情。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>荒唐无稽的想法可以催生好的创意。认真的人做事情的时候，一定会尽力避免失败，一步一个台阶迈向成功。但要产生出好的创意，发明独创的技术，必须要有极端甚至是荒唐无稽的，或者说是跳跃性的思维方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>从现状出发，一步一步推理，并得到结论，这种思维方式很难实现飞跃。要想成功的话就直接从结论起步去做，也就是说从希望的结果开始是非常必要的。这就是一种外行人的思考方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 有点幼稚、天真、牵强的想法</p><p>很多成功解决问题或取得重大成就，其最初阶段的想法实际上都是有点幼稚、天真甚至牵强的，可以说是外行人的想法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者举了德国气象学家A•韦格纳构想的大陆漂移学说，IBM沃森研究所的研究院B•曼得勃罗博士创建的分形理论，以及MIT的M•明斯基教授与学生讨论他的人工智能框架理论谈话这三个例子。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 跳出现有的成功</p><p>对研究而言，像外行人一样自由发散地想出创意、以专业人士的方法去付诸实现，这种思路是非常必要的。但作为专家，要想跳出自己的只是领域和以往的成功经验往往是非常困难的。身为专家要有舍弃固有思想、大胆创新的魄力与勇气。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>举了冯•诺依曼反对高级编程语言的例子作为反例，代表专家思维方式的可怕。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>他之前问明斯基，想出各种创新想法的秘诀是什么？明斯基说，这个很简单，只要反对大家所说的就可以了。大家都认同的好想法基本上都不太令人满意。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>举了例子，江崎玲于奈博士在大家都在降低二极管中的不纯物磷的浓度的时候，反向而行，增加不纯物的浓度，从而最终发明了隧道二极管。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者本人的例子，机器人胳膊使用齿轮与发动机相连获得动力，但摩擦产生噪音，而且会导致快速动作需要的正确预测运动模型很难只做。别人都在研究使用齿轮的更好模型，而作者与浅田春比古博士通过将齿轮拆掉，将发动机直接植入关节，做出了最早的直接驱动型机械手。由于去掉了复杂的齿轮装置，可以简单第按照牛顿公示记录机器人的运动情况，运动速度比以往的机器人快10倍以上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作者本人的另一个例子，与奥富正敏教授研究的“复数基线型立体声”，对“立体声精度，基线越长精度越高”的常识反向而行，使多个短基线的立体声得到更好的效果。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>还以炒股举例，买跌不买涨才是炒股的正确方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>举了施乐公司由于重视大型高速复印机，而忽视了办公室的潜在需求，少量、便携、现场就可以复印，被理光、佳能的小型复印机迅速取代。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 创新从省略开始</p><p>与象棋名将羽生善治交谈的例子，羽生善治说创造就是省略。棋手凭直觉选中100种下法中的两三种下法，其余没有想就舍弃了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>问题简单化的程度不够就会因为太难而不容易形成理论。一般来说，越简单化、抽象化就会产生越绝妙、鲜明的理论。但这个简单化应与目的相一致。如镜面反射、弹簧与力的关系等理论。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但是需要有预见能力，才能使得简单有价值的理论不会因为更简单而落入“不言而喻”的悬崖，就失去了成为理论的能力了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 用情景推动研究进展</p><p>以2001年1月28日，作者团队在超级碗的机器人摄像机Eye Vision系统举例。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>什么才是有意义的研究，就是当说出“我做出了这个！”的时候，听者心生“原来如此，用这个成果的话说不定那个问题也能解决了”、“什么嘛，早知是这样我也能做出来”、“那样做可以成功的话，看来我要这样做了”等震惊、出动，才是有意义的研究。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>研究某一课题经常会想一句简单的口号，这句口号不仅要能传达研究的主要目的，还要是推动研究向前发展的动力。作者的虚拟现实项目的口号是“Let’s watch the NBA on the court”。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6. 情景的关键，是对人和社会有何作用</p><p>做得很好的人，应该在开始研究或者工作之前，就做好了充足的准备和计划，而且目的明确，清楚完成研究可以对社会做出什么样的贡献。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>情景要通过对未来的构想进行描述。不要认为没用的研究才算高级。虽说是基础研究，不，正因为是基础研究，才更要将就应用情景。</p>", 
            "topic": [
                {
                    "tag": "科研", 
                    "tagLink": "https://api.zhihu.com/topics/19556895"
                }, 
                {
                    "tag": "创新", 
                    "tagLink": "https://api.zhihu.com/topics/19550587"
                }, 
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34199962", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（十五）结论", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果用桥梁建筑与编程类比，那么建设到一半的时候可能会发现，对岸比预想的要远50米，而且其材质是花岗岩而不是泥土，更糟糕的是我们最终想的是一座公路桥而不是步行桥。——Sam Newman, Building Microservices 作者</p><p><br/><br/>本章将介绍以下内容：</p><p>回顾本书中提到的内容</p><p>云原生Go开发学习和成长的后续步骤和建议</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们学到了什么</p><p>Go不是小众语言</p><p>微服务应该有多“微”：一个微服务应该只做一件事，它应该是一个独立的，基于RESTful单一责任原则（SRP）的实例。</p><p>持续交付和部署</p><p>测试一切</p><p>尽早发布，频繁发布</p><p>事件溯源、CQRS和更多首字母缩略词</p><p class=\"ztext-empty-paragraph\"><br/></p><p>下一步</p><p>现在大家已经成为了一个使用Go构建云服务的专家，接下来构建应用。提出疯狂的想法并实现它们。做贡献，回馈社区，为其他构建微服务的Go开发人员编写代码库。分享，让更多人痴迷于使用Go语言编写云原生代码。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>附录A</p><p>如果我有一个小时来解决问题，我会用55分钟来思考这个问题，用5分钟来确定解决方案。——阿尔伯特•爱因斯坦</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用日志流</p><p>当想查看应用程序出了什么问题，首先应该查看就是日志流，无论是实时数据还是存储在Splunk、ELK堆栈、Sumologic或其他工具中的历史数据，日志流都是不二之选。</p><p>应用程序发出的日志流应该被视为来自卫星轨道的遥测流，它在云端。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>健康和性能监控</p><p>应用性能监控（APM）工具</p><p>New Relic（<a href=\"https://link.zhihu.com/?target=https%3A//newrelic.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">newrelic.com</span><span class=\"invisible\"></span></a>）是此类工具之一。</p><p>通过平台监控应用程序</p><p>平台应该向应用程序开发人员和运维人员公开的指标如下。</p><p>1. 每个应用程序示例的CPU使用率。</p><p>2. 每个应用程序示例的内存消耗。</p><p>3. 每个应用示例的每个请求的响应时间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在云中调试应用程序</p><p>鼓励大家把应用程序看作部署的科学仪器，像在轨道上绕地球运行的卫星，这些应用程序不能被触及。如果本地肯定可以使用Go调试器。但对于生产环境跨区域部署的多个实例，使用调试器不会带来任何好处。应该使用日志流信息。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33806761", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（十四）创建完整应用World of FluxCraft", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>记住！独自行动是很危险的！——Old Man NPC，1986年2月21日</p><p class=\"ztext-empty-paragraph\"><br/></p><p>构建微服务其实是构建一个服务生态系统，使其产生那个真正的商业价值，让股东和客户满意，不是构建一个微小的服务就可以了。其核心是分布式系统。本章构建一个名为World of FluxCraft的游戏。</p><p>本章包括以下内容：</p><p>World of<br/>FluxCraft游戏背后的设计理念</p><p>分布式游戏系统的顶层架构</p><p>Flux GUI</p><p>命令处理器概览</p><p>事件处理程序概览</p><p>reality server概览</p><p>地图管理</p><p>分布式系统自动化验收测试概览</p><p>完整的功能示例代码</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Word of FluxCraft介绍</p><p>该游戏是一个基于浏览器的多玩家游戏，是一个为小组玩家创建的非常小巧的游戏。可以查看Github（<a href=\"https://link.zhihu.com/?target=http%3A//github.com/cloudnativego/wof-\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/wof-</span><span class=\"ellipsis\"></span></a>*）中以wof-为开头的仓库可以获取代码，查看构建该游戏应用的方法及其部署在云中的方法。</p><p>程序的上层架构如下图所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c466604b093fe3f6c1c0336dc2f500ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb\" width=\"551\" data-original=\"https://pic3.zhimg.com/v2-c466604b093fe3f6c1c0336dc2f500ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;551&#39; height=&#39;413&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"551\" data-original=\"https://pic3.zhimg.com/v2-c466604b093fe3f6c1c0336dc2f500ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c466604b093fe3f6c1c0336dc2f500ca_b.jpg\"/></figure><p>独立扩展、版本控制和部署</p><p>上图中的每个圆圈都是一个微服务，本章中的微服务设计可以确保它们能够被独立部署，进行版本控制和扩展。系统在运行时也可以完成部署，我们可以做一个蓝/绿发布来发布新的微服务。但需要尽可能避免更改公共API。可以使用语义版本控制类技术，让发送给REST的数据或资源URI（或两者）中包含版本信息。</p><p>图中的每个微服务都是无状态的，虽然图中存在持久化中间件，但服务本身是无状态的。这些服务的设计宗旨是能够快速启动并可以快速销毁。这样可以有更好的扩展性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据库不是集成层。数据库永远也不应该作为集成层。每个微服务都有自己的私有数据存储。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>单向不可变数据流。图中没有包含双向箭头或双向通信，这充分反映了React和Flux的架构设计原则，也印证了事件溯源和CQRS背后的指导原则。系统越多地采用响应式、单向流动模式，其可扩展性就越强。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Flux GUI</p><p>为了向当今数百万开发者的童年致敬，我们决定把WoF打造成一个经典的自上而下视角的八位地图爬虫游戏。可以在<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/wof-uio\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/wof-uio</span><span class=\"ellipsis\"></span></a>上找到WoF Flux GUI的完整代码。</p><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33806696", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（十三）使用Flux构建可扩展的UI", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>承担错误决定所带来的风险总比因犹豫不决而担惊受怕强的多。——Moshe ben Maimon (1135-1204年)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章将讨论：</p><p>1. Flux模式及实现方案</p><p>2. 使用Flux构建一个支持大流量场景的应用程序</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Flux介绍</p><p>Flux不是一个实现，不是库或一组代码，而是一种架构模式。可以把Flux当成是MVC的替代品，它们都是模式，各自有许多不同的实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Flux是基于React中引入的单向数据流的概念而构建的，在此基础上添加了许多其他概念，如store（数据仓库）、source（数据源）和actions（动作）。Flux的主要目标是提供一个可行的概念模型，用于将数据和应用程序的状态从视图中分离出来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>创建Flux应用程序</p><p>如果想查看完成的创建过程，可以查看Github（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/flux-zombieoutbreak\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/flux-zombieoutbreak</span><span class=\"ellipsis\"></span></a>）。</p><p>具体代码讲解内容就不在这赘述了。</p><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33444275", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（十二）使用React构建Web视图", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>Java之于JavaScript类似Car之于Carpet，根本毫不相干。——Chris Heilmann，Web布道师</p><p><br/>使用浏览器与应用程序交互，基本都会用到JavaScript，它是Web应用程序中不可忽略的一环。本章将介绍以下几个方面：</p><p>1. 了解React的基本原理，以及选择它的原因</p><p>2. 了解React的应用程序的结构</p><p>3. 构建一个基本的React应用程序</p><p>4. 介绍如何测试React应用程序</p><p>5. 更多关于学习React的建议</p><p class=\"ztext-empty-paragraph\"><br/></p><p>JavaScript的形势</p><p>有无数的框架和库可以用来解决前端、Web UI的问题。</p><p>构建单页面应用，AngularJS很合适，也可以使用Backbone、Cappuccino、Ember、Meteor、Knockout、SproutCore、React等框架。</p><p>希望有很多优秀的组件库来实现单纯的GUI，那么可以选择AngularJS或者Bootstrap、CycleJS、ExtJS、jQuery UI等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为什么选择React</p><p>React（<a href=\"https://link.zhihu.com/?target=https%3A//facebook.github.io/react/%25EF%25BC%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://facebook.github.io/react/）</a>是一个用于构建用户界面的JavaScript库，它不是一个MVC系统，也不是一个包罗万象的尝试“将一些抽象化”的库。SurviveJS（<a href=\"https://link.zhihu.com/?target=http%3A//srivivejs.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">srivivejs.com/</span><span class=\"invisible\"></span></a>）上有很有参考价值的关于React和其它框架之间的比较结果，已经一套自学教程。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>虚拟DOM</p><p>直接操作DOM（文档对象模型）非常低效，而且频繁更新时性能低下。虚拟DOM可以解决这些问题。React代码操作虚拟DOM，可以将更新汇集起来后作用到真正的DOM，可以优化性能避免写竞争。</p><p>虚拟DOM的概念是可移植的。可以是哟个React Native（<a href=\"https://link.zhihu.com/?target=https%3A//facebook.github.io/react-native\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">facebook.github.io/reac</span><span class=\"invisible\">t-native</span><span class=\"ellipsis\"></span></a>）工具，让React代码在Android和iOS等移动设备上运行。使用虚拟DOM时，更新作用于移动设备的GUI而不是浏览器DOM上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>组件组合：通过组件组合，React可以比其它的库最大程度上缩小框架设计与实际实现之间的差距。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>响应式数据流：React使用所谓的单向响应式数据流，这意味着我们构建的所有东西都是为了响应传入的状态变化。我们之所以喜爱React，是因为它在UI层面包含了事件溯源和CQRS。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>React只集中于UI。UI提供一个框架，用于构建与虚拟DOM交互的组合式组件。我们认为是性能最好，最优雅和简单的框架之一。当然比Go的世界差远了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>构建简单的React应用程序</p><p>建议大家从Github（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/react-zombieoutbreak\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/react-zombieoutbreak</span><span class=\"ellipsis\"></span></a>）或存储库的其他模版中复制完整的React应用程序示例代码，而不是自己设置每个项目的架构。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>推荐的React书籍：</p><p>Learning<br/>React Native: Building Native Mobile Apps with JavaScript, Bonnie Eisenman著</p><p>Pro<br/>React, Cassio de Sousa Antonio著</p><p>React: Up<br/>and Running: Building Web Applications, Stoyan Stefanov著</p><p>其它资料：在Udemy（<a href=\"https://link.zhihu.com/?target=http%3A//www.udemy.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">udemy.com</span><span class=\"invisible\"></span></a>）上有一个名为Build Web Apps with ReactJS and Flux的课程。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33135243", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（十一）使用WebSockets", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>简答是可靠性的先决条件。——Edsger W.Dijkstra</p><p class=\"ztext-empty-paragraph\"><br/></p><p>WebSockets和服务器发送事件（Server-Sent Event, SSE）这两种技术能够提供更直观的交互浏览器体验。</p><p>本章的主要内容有以下两方面：</p><p>1. 剖析WebSockets及其在云中的适用性</p><p>2. 使用第三方消息程序构建WebSockets式的应用程序</p><p class=\"ztext-empty-paragraph\"><br/></p><p>WebSockets与服务器发送事件对比</p><p>1. WebSockets是全双工的；SSE只能由服务器发送。</p><p>2. 由于connection upgrade，WebSockets的流量不包含在传统的HTTP连接中，这在遇到旧版本的路由器和代理时可能会出现问题。</p><p>3. 应用程序越复杂，SSE需要的HTTP连接就越多，而对于很多App，不论它们有多复杂，只要为每个用户维持一个连接即可。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>WebSockets的云原生适应性</p><p>所有真正的云原生应用程序都是无状态的。由于WebSockets的有状态性，当对其进行水平扩展时，会产生一些隐患。</p><p>不能创建孤岛式的应用程序示例，使得数据和消息通知无法跨示例传递。应将WebSockets组件从示例中抽离，将它隐藏在后端。可以自己实现或直接使用云端提供的各种消息服务。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用消息服务创建WebSockets应用</p><p>PubNub是一款消息软件，支持发布-订阅消息模式。</p><p>强烈建议大家认真查看 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/websockets\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/websockets</span><span class=\"ellipsis\"></span></a>，该代码在开始部分包含了安全认证，因此在浏览器中访问/chat页面之前，需要使用OAuth进行身份认证。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32898484", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（十）云安全", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在没有发生安全问题之前，出于安全的考虑总被认为是多余的。——Robbie<br/>Sinclair，澳大利亚新南威尔士州国家能源安全负责人</p><p class=\"ztext-empty-paragraph\"><br/></p><p>安全问题不能事后考虑。</p><p>本章将讨论以下几点：</p><p>1. 用于保护Web应用程序的选项和实现</p><p>2. 如何保护微服务</p><p>3. 关于隐私和数据安全的说明</p><p>4. 阅读练习，围绕开发安全服务建立更多的肌肉记忆</p><p class=\"ztext-empty-paragraph\"><br/></p><p>保护Web应用程序</p><p>应用程序安全性选项</p><p>1. HTTP基本验证：验证用户名和密码。虽然SSL禁止窥探密码，但存在一些其他漏洞，包括浏览器缓存密码、每次请求中传输的密码等。</p><p>2. 表单（cookie）：包含网页（而不是浏览器）产生的凭据。单独使用该方法也存在安全问题。</p><p>3. Windows身份验证：局域网和企业站点会优先选择这种方式。但不是实现云原生安全性的好选择。</p><p>4. SAML（ADFS、AD Azure、Shibboleth等）：安全断言标记语言是一种bearer token技术，其中包含用于SAML<br/>token的身份信息提供者和验证它们的应用程序。SAML是广泛用于联邦身份的行业标准，并且拥有许多支持这种编程语言和操作系统的API及服务产品。</p><p>5. OAuth/OpenID：一种开放的授权标准，在允许用户使用第三方凭据（如Facebook、Google、Twitter等）登陆的网站中非常常见。使用OAuth的效果非常好，本章中我们将使用它实现云原生安全。</p><p>6. 习惯性：那些不愿意从昔日的错误中吸取教训的人将来注定会重蹈覆辙。</p><p>警告：不要依赖底层操作系统中的任何功能、秘钥库或用户账户信息的安全机制。如果想要将它们作为支持服务，那么可以依赖它们。系统安全性需要实现，而无需考虑运行它的虚拟机是否能正常运行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>后续将开发两个代码示例：一个安全的Web应用程序和一个安全的微服务。</p><p>选择OAuth作为网络应用授权机制，有以下几个原因：</p><p>1. 无须关注底层操作系统或已经安装的功能</p><p>2. 为了允许在Web上的不同系统中共享授权声明而特别设计</p><p>3. 简单易用</p><p>4. 坚实而可靠</p><p>5. 提供简单、用于使用的Go语言库</p><p>6. 提供免费、开源的身份信息提供商服务软件</p><p>7. 有权使用基于云的身份信息提供商，如Google、Auth0和StormPath</p><p class=\"ztext-empty-paragraph\"><br/></p><p>设置Auth0账户</p><p>构建一个OAuth安全的Web应用程序</p><p>可以在<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnatiego/secureweb%25E4%25B8%258A%25E6%2589%25BE%25E5%2588%25B0server/server.go\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://github.com/cloudnatiego/secureweb 上找到 server/server.go</a>的完整源代码。</p><p>使用中间件验证。server/middleware.go代码</p><p>用户使用登录按钮转到Auth0进行登录或注册， server/home_handler.go代码</p><p class=\"ztext-empty-paragraph\"><br/></p><p>运行安全的Web应用程序</p><p>最简单的方法是从Github克隆，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/secureweb\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/secureweb</span><span class=\"ellipsis\"></span></a>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>保护微服务</p><p>这节讨论没有任何UI界面的微服务，并且不采用任何需要重定向的身份验证方案。</p><p>客户端凭据模式</p><p>很多人使用客户端证书、加密或令牌、证书和加密三者的某种组合，在这里我们将使用最简单的模式：客户端凭据。</p><p>注册成为Auth0服务的用户后，便获得了一个API key和API<br/>secret。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用客户端凭据保护微服务</p><p>server/server.go,<br/>server/middleware.go</p><p class=\"ztext-empty-paragraph\"><br/></p><p>关于SSL的注意事项</p><p>我们讨厌编写SSL代码。又很多处理SSL证书验证和SSL终端的基础架构工具，它们已经无处不在，将微服务中的代码紧密地耦合到特地的SSL实现或规则上，基本上成了反模式。应用程序不应访问底层SSL的详细信息。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32898309", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（九）使用Go构建Web应用程序", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><p>设计软件有两种方法：一种是使它足够简单以至于明显没有缺陷；另一种则是使它足够复杂以至于缺陷不是那么明显。相比起来，第一种方法要困难得多。——东尼•霍尔，1980年图灵奖获得主</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章将介绍以下几点：</p><p>1. 用Go创建一个功能齐全的网站</p><p>2. 介绍如何处理静态文件和asset</p><p>3. 结合已有的微服务知识为JavaScript客户端提供RESTful端点</p><p>4. 学习如何使用服务端模板</p><p>5. 学习如何处理HTML表单</p><p>6. 使用Wercker在云端构建并部署一个网站</p><p class=\"ztext-empty-paragraph\"><br/></p><p>处理静态文件和asset</p><p>创建一个目录结构，提供静态文件（包括HTML文件）</p><p>static-content</p><p>—— js</p><p>—— images</p><p>—— css</p><p>然后代码server.go，将虚拟URL“/”映射到了static-content目录中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>支持JavaScript客户端</p><p>创建了一个index.html文件，然后创建hello.js文件，然后创建了handler.go文件，将/api/test端点映射到initRouters函数中的handler中。</p><p>如果现在编译运行Web应用程序，将自动使用我们创建的index.html文件提供服务。然后通过运行JavaScript，从服务端点获取数据，操作段落元素。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用服务端模板</p><p>想要了解使用模板的完整示例，请查看<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/web-application-template\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/web-application-template</span><span class=\"ellipsis\"></span></a>。</p><p>此示例的main.go文件与其他文件相同，我们要执行的所有操作都在server.go文件中。这个示例不是通过服务端点来暴露要动态呈现的数据，而是将该对象的引用注入到模板处理器中，以便在发送到客户端浏览器之前可以操作HTML。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>处理表单</p><p>Go使得表单处理变得非常简单。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用cookie和会话状态</p><p>在Go中处理cookie很简单，cookie已经成为标准库net/http中的一部分，所以不必再去寻找第三方包。</p><p>不要在cookie中存储秘密或敏感信息。不要在cookie中存储用户凭据等内容，如果必须存储唯一标识信息，请确保它即使落入坏人之手也不会造成损失。还有一个好的方案是专门为cookie生成随机标识，并且该ID标识仅在服务器要接收到验证请求后才会映射到有用的信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用Wercker构建和部署</p><p>在构建之前，应该确保应用程序在持续交付的流水线上。为此，将使用Wercker。可以在<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/web-application\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/web-application</span><span class=\"ellipsis\"></span></a> 中查看此示例的Wercker构建定义。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32715566", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（八）事件溯源和CQRS", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>现实只是一种幻觉，尽管它挥之不去。——阿尔伯特 • 爱因斯坦</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章将讨论如何解决极大规模下的架构设计问题。讲讨论两种模式：事件溯源（Event Sourcing）模式和CQRS（Command Query Responsibility Segregation，命令查询职责分离）模式，这两种模式都可以解决巨大请求量和吞吐量场景下的应用程序响应问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章涉及的主题有以下几个：</p><p>1. 介绍事件溯源模式</p><p>2. 介绍CQRS模式</p><p>3. 构建高级的ES+CQRS代码示例。</p><p>——构建一个命令处理器服务</p><p>——构建一个事件处理器</p><p>——构建一个查询处理器服务</p><p class=\"ztext-empty-paragraph\"><br/></p><p>现实源自事件</p><p>大脑对现实的感知建立在感官收到的刺激，现实就是一个运行在输入事件流上的函数，也就是应用程序当前状态的合集。</p><p>在传统的状态管理方法中，我们经常维护一些代表所有状态的内存结构。当接收到事件时便根据需要改变状态，而很少关心事件的顺序和状态是如何改变的。这种模型在大流量的场景下会使人陷入困境。</p><p>在事件溯源系统中，每收到一个事件，我们都会将其应用到之前算出的状态上，同时产生一个新的状态。</p><p>事件溯源的应用程序要遵守以下准则：</p><p>1. 幂等：事件溯源的业务逻辑必须是幂等的。在真正的事件溯源系统中，f(e, …)若传入相同的事件序列，那么得到的state也总是相同的。</p><p>2. 隔离：事件溯源的业务逻辑不能依赖于事件流之外的数据。例如，使用外部时钟将会很糟糕。</p><p>3. 可测试：如果正确的构建事件溯源应用程序，那么该程序将会非常易于测试。</p><p>4. 可再现，可恢复：事件溯源应用程序通常需要被优化以支持再现和恢复。</p><p>5. 大数据：事件溯源应用程序通常会生成大量的数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>拥抱最终一致性</p><p>当应用程序被设计用来处理事件时，其经常被设计成“即发即弃”的模式。事件从不同的源中异步得到，然后可能由一个完全独立的组件异步处理。这种解耦的方式允许事件接收器和事件处理器分开扩展，它还允许接收器、日志记录器和处理器都具有它们各自的可靠性模型。这是超大规模流量下的微服务模型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>CQRS简介</p><p>CQRS（命令查询责任分离）是一种奇特的模式，表示解耦系统的输入输出。在典型的单例应用程序中，一般同时拥有数据库的写入端点和读取端点。两者都操作相同的数据库，并且通常在数据库接收到确认或事务提交消息之前，不会收到写入端点的答复。但这在大规模、高吞吐量的需要对事件进行复杂处理的情况下，会导致系统整体性能的急剧下降。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>示例：使用Rabbit MQ构建命令处理程序服务。</p><p>构建命令处理器服务。代码可参考<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/drones-cmds\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/drones-cmds</span><span class=\"ellipsis\"></span></a></p><p>构建事件处理器。代码可参考<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/drones-events\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/drones-events</span><span class=\"ellipsis\"></span></a> </p><p>构建查询处理程序服务。</p><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32715407", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（七）构建数据服务", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>即使是傻瓜也能写出被计算机理解的代码，而只有优秀的程序员才可以写出人类能读懂的代码。——Martin Fowler</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章涵盖的内容有以下几个方面：</p><p>1. 在MongoDB中构建存储库(test-first)</p><p>2. 使用新的存储库来更新Go服务</p><p>3. 集成数据库的测试</p><p class=\"ztext-empty-paragraph\"><br/></p><p>MongoDB本质上是一个文档数据库，它可以用来存储和检索JSON文档。同一个集合中的两个文档不必具有相同的schema。</p><p>通过Go来操作MongoDB。目前唯一被官方支持的Go驱动程序mgo，<a href=\"https://link.zhihu.com/?target=https%3A//godoc.org/labix.org/v2/mgo%25E3%2580%2582%2520%25E5%259C%25A8%25E4%25BA%2591%25E4%25B8%25AD%25E4%25BD%25BF%25E7%2594%25A8mgo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://godoc.org/labix.org/v2/mgo。 在云中使用mgo</a>时，有时候连接会丢失，有时候主机名或IP会漂移。我们开发了一个cfmgo包，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/cfmgo\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/cfmgo</span><span class=\"ellipsis\"></span></a> 。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>集成临时MongoDB数据库。每次构建应用程序时使用Wercker和Docker启动一个空的MongoDB数据库。构建完成后，数据库就会消失。</p><p>编写一个集成测试</p><p>在云中运行</p><p>后端服务的配置</p><p>可以使用REST工具（如Chrome的Postman插件）发出请求来创建match、添加move、删除和查询match详情等。</p><p>可以使用MongoLab dashboard程序来查看数据库详细信息。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32689124", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 3, 
            "title": "《Cloud Native Go》笔记（六）运用后端服务", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>将业务推倒云上，再把注意力放在自己的技术核心上。——Tom Cochran，美国国务院平台副协调员</p><p><br/>本章将会涵盖以下内容：</p><p>1. 设计服务系统</p><p>2. 怎样让TDD适用于互相依赖的后端服务</p><p>3．用于在服务之间共享数据的设计模式</p><p>4．服务绑定与外部配置</p><p>5．运行时动态服务发现</p><p>设计服务系统</p><p>以test-first方式构建依赖服务</p><p>fulfillment服务：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/backing-fulfillment\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/backing-fulfillment</span><span class=\"ellipsis\"></span></a>。</p><p>在服务之间共享结构化数据</p><p>fulfillment服务需要维护一个结构体，这个结构体代表了服务的状态，可以被服务操作并序列化成JSON数据。catalog服务也要维护一个结构体，这个结构体代表了同样的服务状态，所以需要读取fulfillment服务暴露出来的JSON数据，并将其填充到catalog商品的详细结果中。</p><p>目前存在一个核心问题，就是数据模型的共享问题。通常可以用三种方法来解决这个问题：</p><p>1. 客户端引用服务端包</p><p>将fulfillmentStatus变成FulfillmentStatus，可以在catalog服务中直接读取。</p><p>表面上来看这是一个好主意，可以最大化复用代码，但实际上存在危险的副作用。最大的副作用产生在读取fulfillment服务暴露出来的所有数据这一环节。两个服务紧耦合。如果fulfillment服务发生更改，但没有改公共约定，但也很可能会导致catalog服务编译或运行失败。</p><p>2. 客户端复制服务端结构</p><p>两个服务都自定义结构体并附带JSON序列化标签。服务端与客户端可以有完全不一样的内部结构定义，它们都是API返回数据的组成部分。这样服务端与客户端可以随意改变自己的内部代码并维持自己的版本发布节奏。举个例子，可以用不同的结构体来组成相同的JSON结构。</p><p>各服务之间的重复代码远远比服务内部的重复代码糟糕的多。——Sam<br/>Newman</p><p>3. 客户端与服务端引用共享包</p><p>从客户端和服务端中提取共享数据结构，将它们移动到共享和中立的地方提供所有的服务引用。</p><p>这不是一个好方法，它具有第一种方法的所有缺点，让多个服务之间共享依赖。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用服务捆绑来外部化地址与元数据</p><p class=\"ztext-empty-paragraph\"><br/></p><p>服务发现</p><p>动态服务发现，Netflix的服务发现系统Eureka。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32688968", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（五）在Go中构建微服务", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>黄金法则：你可以在不更改任何其他代码的前提下更改服务并重新部署吗？——Sam Newman, Building Microservices 作者</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们构建的每个服务都应该是微服务。我们会采用API First方式，在编写代码之前首先设计服务的RESTful接口。</p><p>本章将介绍以下几个方面：</p><p>1. API First开发准则和实践</p><p>2. 创建微服务框架</p><p>3. 向服务添加测试，并迭代地添加代码，使通过测试</p><p>4. 向云端部署和运行微服务</p><p class=\"ztext-empty-paragraph\"><br/></p><p>创建API First的服务</p><p>Markdown是编写文档和其他文件的首选工具。它是一个简单的纯文本格式，不需要使用IDE或其他臃肿的编辑工具，同时可以转换成PDF、网页等无数的格式。我们通常习惯在微服务中使用Markdown文档。这样能够允许其他开发人员快速获得所有服务的REST资源、URI模式和请求/响应有效载荷的列表。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>有一种Markdown的特殊使用格式可以专门用于记录RESTful API：API Blueprint.<br/>大家可在网站<a href=\"https://link.zhihu.com/?target=https%3A//apiblueprint.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">apiblueprint.org/</span><span class=\"invisible\"></span></a>上查看相关资料。本章的GitHub仓库（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudnativego/gogo-service%25EF%25BC%2589%2520%25E5%258F%25AF%25E4%25BB%25A5%25E7%259C%258B%25E5%2588%25B0%25E4%25B8%2580%25E4%25B8%25AA%25E5%2590%258D%25E4%25B8%25BAapiary.apib\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://github.com/cloudnativego/gogo-service） 可以看到一个名为apiary.apib</a>的文件。此文件包含Markdown格式的内容，表示GoGo服务支持的RESTful接口的文档和规范。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>通过Apiary测试和发布文档</p><p>Apiary是一个网站，它能实现以交互方式设计RESTful API。Apiary可以生成返回JSON有效数据的模拟服务器，这样节省了必须自己搭建模拟服务器的时间，并同时允许保持API First方式，直到通过制定API的草稿阶段。除提供模拟器外，还可以在编写服务器代码之前使用生成的多种编程语言的客户端代码进一步协助团队验证API。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>架设微服务</p><p>例子代码引入了第三方库Negroni和Gorilla Mux。Negroni用于在Go内置的net/http包上构建路有接口，Gorilla Mux作为路由库。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>构建Test First的服务</p><p>正常情况下，我们应该会花费95%的时间编写测试，花费5%的时间编写代码。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在云端部署和运行</p><p>本书选择Cloud Foundary的PCF Dev和Pivotal Web Services (PWS)作为部署对象。</p><p>创建PWS帐户</p><p>配置PCF开发环境</p><p>提交到Cloud Foundary</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32521648", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（四）持续交付", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>编程不是一种零和游戏。将知识传授给程序员同行并不会减少自身的知识储备。——John Carmack</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章将介绍：</p><ol><li>Docker和Docker Hub，基于云CI和不可变部件的强大工具。</li><li>Wercker，一种适用于独立开发者、初创公司甚至是完整企业的CI工具。</li><li>在每次提交Git后自动构建项目。</li><li>将构建工作作为CI流水线的一部分自动部署。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>Docker介绍</p><p>有关Docker的信息，可以参考Karl Matthias和Sean P. Kane的书《Docker Up<br/>and Running》O’Reilly Media.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>安装Docker</p><p>Mac上安装的话首选安装Docker Toolbox，如果不打算用Docker Toolbox，那么需要通过Homebrew安装Docker、Docker Machine和VirtualBox。</p><p>启动Docker Machine</p><p>$ docker-machine start default</p><p>打印配置</p><p>$ docker-machine env default</p><p>配置正确的Docker环境所需的Shell命令，要使这些配置在启动Docker时生效，可以用下面命令：</p><p>$ eval “$(docker-machine env default)”</p><p>运行Docker镜像：</p><p>$ docker run -p 8080:8080 cloudnativego/book-hello</p><p>查看Docker机器的IP地址：</p><p>$ docker-machine ip default</p><p>清理Dockder缓存镜像：</p><p>删除所有Docker容器： docker rm $(docker ps -a -q)</p><p>删除所有Docker镜像：docker rmi $(docker images -q)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>与Wercker的持续集成</p><p>持续集成的最佳实践</p><p>1. 维护代码仓库</p><p>2. 自动化构建</p><p>3. 使构建自测试</p><p>4. 每天向主库提交代码</p><p>5. 每个提交都执行构建</p><p>6. 保持构建速度</p><p>7. 在生产队的克隆环境中测试</p><p>8. 易于获得交付成果</p><p>9. 每个人都可以看到最新的构建结果</p><p>10. 自动部署</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用Wercker搭建CI环境之需要经过三个基本步骤：</p><p>1. 在Wercker网站中创建一个应用程序</p><p>2. 将wercker.yml添加到应用程序的代码库中</p><p>3. 选择打包和部署的位置</p><p>如果希望在本地进行Wercker构建，需要使用Wercker CLI。</p><p>可以使用Glide工具来帮助管理和获取Go依赖项，相关文档可查看<a href=\"https://link.zhihu.com/?target=http%3A//github.com/Masterminds/glide\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.com/Masterminds/</span><span class=\"invisible\">glide</span><span class=\"ellipsis\"></span></a> 。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32521599", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（三）Go入门", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>我喜欢Go语言中的很多设计理念，基本上我喜欢它的全部。——Martin Odersky, Scala 创始人</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章介绍：</p><p>1. 一个”hello world”示例</p><p>2. 介绍函数</p><p>3. 通过结构体操作和存储数据</p><p>4. 通过结构体使用方法</p><p>5. 使用包</p><p>6. 创建自己的包</p><p>如果需要深入学习Go语言，建议看Mark<br/>Summerfield所著的《Programming in Go: Creating Applications for<br/>the 21st Century》以及Alan A. A. Donaovan与Brian W.kernighan合著的《The Go<br/>Programming Language》。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章内容是对Go的基本编程介绍，可以参考上述书，本笔记中就不介绍了。</p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32503204", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Cloud Native Go》笔记（二）开始", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>获得成功的秘诀是尽早开始。 ——马克•吐温</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章将讨论以下几点：</p><p>1. 安装Git，确保有一个GitHub帐号</p><p>2. 安装和配置Go命令行工具</p><p>3. 测试并验证工作环境</p><p class=\"ztext-empty-paragraph\"><br/></p><p>正确的工具</p><p>配置Git</p><p>Linux或虚拟机：apt-get一次性安装git, mercurial和bazaar</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Windows：建议安装Windows 10 anniversary edition，并安装Bash</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Mac：安装Homebrew</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在GitHub上创建帐号。</p><p>然后阅读Go官方“入门”页面：<a href=\"https://link.zhihu.com/?target=https%3A//golang.org/doc/install\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">golang.org/doc/install</span><span class=\"invisible\"></span></a> (写笔记注：国内访问目前要采用特定姿势)。</p><p>然后配置Go工作区，$GOPATH环境变量，$PATH包含$GOPATH/bin，$GOPATH要包含工作区目录（如/Users/goguu/Go），工作区的/bin目录（/Users/goguu/Go/bin）添加到$PATH中。</p><p>然后检查环境：$ go get <a href=\"https://link.zhihu.com/?target=http%3A//github.com/cloudnativego/hello\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.com/cloudnativeg</span><span class=\"invisible\">o/hello</span><span class=\"ellipsis\"></span></a></p><p>在本地目录：$ go build .</p><p>$<br/>./hello</p><p>[negroni]<br/>listening on : 8080</p><p>$ curl <a href=\"https://link.zhihu.com/?target=http%3A//localhost%3A8080/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://localhost:8080</a></p><p>Hello<br/>from Go!</p><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 语言", 
                    "tagLink": "https://api.zhihu.com/topics/19625982"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32503083", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 2, 
            "title": "《Cloud Native Go》笔记（一）云之道", 
            "content": "<p>Cloud Native Go：构建基于Go和React的云原生Web应用与微服务。Kevin Hoffman, Dan Nemeth著，TalkingData:宋净超，吴迎松，徐蓓，马超 译，电子工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>生大材，不遇其时，其势定衰。生平庸，不化其势，其性定弱。——老子</p><p class=\"ztext-empty-paragraph\"><br/></p><p>云之道的优点</p><p>软件开发应该是艺术品，云之道能让大家重新感受到这点。遵循下面的准则能够在最大程度上创建云上的可扩展、可靠、可预期的软件。</p><p>1. 遵循简单</p><p>云之道：所做的任何事都要简化。</p><p>IDE是否可选？</p><p>能否通过命令行构建和部署？</p><p>团队的新成员能否很快理解代码？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 测试优先，测试一切</p><p>云之道：采用测试驱动进行开发。测试一切，处处测试。</p><p>采用测试驱动开发，必须测试所构建的每个服务的一切内容，不管是内部还是外部的，以此建立对服务的信心。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 尽早发布，频繁发布</p><p>云之道：将每次代码提交都当作潜在的生产发布，并通过持续交付流水线进行部署。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 自动化一切</p><p>云之道：所有可以自动化的，都应被自动化。</p><p>任何每天做的超过一次的事情，都适合自动化。</p><p>流程中任何时常重复的部分，如果不能按钮或者脚本代替，那么就属于过于复杂、脆弱或两者兼有的部分。</p><p>只有当拥抱自动化，并可以自动将代码提交到云端时，才能真正开始从云端开发中受益，并从构建单一的微服务扩展到构建微服务生态系统。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 建立服务生态系统</p><p>云之道：任何事物都是服务，包括应用。</p><p>微服务只是遵循了单一责任原则（SRP）这一松散定义的服务。SRP源自面向对象的设计模式，即一个服务只负责一个功能。</p><p>应用程序也只是具有一个或多个GUI（例如HTML）的微服务而已。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为什么使用Go</p><p>1. 简单</p><p>2. 开源</p><p>3. 易于自动化和IDE自由化</p><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "Go 语言", 
                    "tagLink": "https://api.zhihu.com/topics/19625982"
                }, 
                {
                    "tag": "Cloud Native Go（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20134089"
                }
            ], 
            "comments": [
                {
                    "userName": "东方不嫁", 
                    "userLink": "https://www.zhihu.com/people/296dbde65781ea166d4bf3982ed45bb2", 
                    "content": "从云之道到账过一笔两百的款 然后再也没有到过。。", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32302693", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《Python数据挖掘》笔记（九）挖掘数据异常", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>9.1 什么是数据异常</p><p>异常指的意料之外、或者偏离规范的事物。</p><p>9.1.1 缺失数据</p><p>1. 定位缺失数据</p><p>2. 零值</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9.1.2 修复缺失数据</p><p>1. 忽略问题行</p><p>2. 人工修复问题</p><p>3. 使用伪造的值</p><p>4. 使用中心性计量</p><p>5. 使用末次观察推进法</p><p>6. 使用类似值</p><p>7. 使用最可能值</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9.1.3 数据错误</p><p>1. 截断的字段</p><p>2. 数据类型和字符集错误</p><p>3. 逻辑或者语义错误</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9.1.4 离群值</p><p>1. 离群值的可视化挖掘</p><p>2. 离群值的统计检测</p><p>3. 用修正Z得分检测离群值</p><p>Grubbs检验，或者最大规格化残差检验。Grubbs检验在有许多离群值或者很小的数据集上效果不好。</p><p>4. 结合统计和可视化挖掘以检测离群值</p><p>箱线图</p><p>5. 用机器学习检测离群值</p><p>基于聚类的方法（如采用Scikit-Learn）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9.2 小结</p><p>用机器学习检测离群值的有趣之处在于，我们可以使用数据挖掘技术更好地进行数据挖掘。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32302652", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《Python数据挖掘》笔记（八）文本中的主题建模", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>在本章中，我们将学习：</p><p>a. 什么是主题建模？我们可以用哪些常见技术完成这项任务？</p><p>b. 目前在Python中有哪些程序库和工具可以应用于主题建模？它们是如何工作的？</p><p>c. 如何根据产生的结果，比较主题建模方法的效能？</p><p>d. 如何在现实问题上应用主题建模？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.1 什么是主题建模</p><p>主题建模比本文摘要不同的是其焦点更多的是主题和概念，而不仅是文本摘要。</p><p>无监督主题建模的关键组成部分是，不需要预先构造关键词和主题列表。相反，主题列表是主题建模程序生成和组合而成的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.2 潜在狄利克雷分配</p><p>常用的技术是潜在狄利克雷分配（Latent Dirichlet Allocation, LDA）。LDA是一种概率主题建模技术。使用主题建模，我们的主要目标是找出这个文档集中隐含的主题结构。主题结构包括三个部分：主题本身、主题在文档中的统计分布以及文档中包含主题的词语。</p><p>本文使用的LDA实现是Gensim LDA，使用的简化技术在2010年论文《Online Learning for Latent Dirichlet Allocation》中第一次描述。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.3 Gensim主题建模</p><p>使用gensim.models.ldamodel.LdaModel.</p><p>8.3.1 理解Gensim LDA主题</p><p>Gensim将构建主题列表，人们可以根据每个主题包含的词为该主题指定一些人类容易理解的伞形词语，也就是概括一下主题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.3.2 理解Gensim LDA的遍数</p><p>LDA使用随机性，因此每次运行，主题集会稍有不同。可以增加在数据上重复的遍数，减小随机性对小数据集的影响，使结果收敛于最重要的主题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.3.3 对新文档应用Gensim LDA模型</p><p>建好LDA主题模型后，就可以用其预测新文档的主题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.3.4 序列化Gensim LDA对象</p><p>可以将构建好的主题模型通过序列化保存到硬盘，在需要的时候读回。</p><p>1 序列化一个字典</p><p>可以使用字典对象上的save()函数。</p><p>2 序列化语料库</p><p>Gensim有4种内建的方法可以序列化语料库。第一种为矩阵市场MM格式。使用corpora.MmCorpus.serialize()。其它三种可以在Gensim文档中查询。</p><p>3. 序列化模型</p><p>lda = LdaModel(corpus,<br/>id2word=dictionary, num_topics=4, passes=20)</p><p>lda.save()</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.4 用于更大项目的Gensim LDA</p><p>对Linus发送给LKML的所有邮件（22546封） 进行LDA分析，可以发现不同时间人们关心的问题/主题也在变化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8.5 小结</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32301818", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 2, 
            "title": "《Python数据挖掘》笔记（七） 自动化文本摘要", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>文本摘要的目标是编写一个能够减小文本尺寸，同时保留其主要意义的程序。有个摘要机器人叫autotldr，创建于2011年，在Reddit上有独立的用户页面。</p><p>在本章中，我们将学习：</p><p>a. 什么是文本摘要，为什么它很重要？</p><p>b. 我们如何从头构建一个简单的文本摘要？</p><p>c. 如何实现更精密的文本摘要系统并比较其效能？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7.1 什么是自动化文本摘要</p><p>H.P.Luhn在1958年的论文《The automatic creation of literature abstracts》中描述了一种文本摘要方法：计算机读取文章中的每个句子，提取频繁出现的词语，然后找出包含最多有效词语的句子。这是本文摘要提炼方法的早期范例。</p><p>还有抽象摘要方法，试图提取文本中的关键思路，将其重新打包成人类可读的合成文本。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7.2 文本摘要工具</p><p>三种方法：简单的基于NTLK的方法，基于Gensim的方法，称为Sumy的Python摘要程序包。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7.2.1 使用NTLK的简单文本摘要</p><p>以Luhn在《The automatic creation<br/>of literature abstracts》中描述的方法为基础，构造简单的文本摘要程序。这个基本的提炼程序首先为文本样本中的每个句子分词，然后选择出现最频繁的词语，排除不重要的词语（称为停用词），最后找出包含重要词语的句子。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/megansquire/masteringDM/tree/master/ch7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github代码</a></p><p>python代码中用到的模块包括：tokenize.word_tokenize, tokenize.sent_tokenize,<br/>probability.FreqDist, collections.stopwords。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7.2.2 使用Gensim的文本摘要</p><p>Gensim主题建模程序包包含了一种稍微复杂一些的文本摘要方法。Gensim寻找文本中重要句子的方法始于一个无向加权图的构建，该图中的节点是句子，节点之间的链接是句子相互之间相似性的计量。这种方法称为TextRank，和用于网页查找的PageRank相似。在TextRank中，相似性由两个句子共享的常见词法标记数量计量。为了避免像朴素Luhn方法中的给长句更多特权，TextRank考虑句子的长度，对相似性得分进行规格化。构建图之后，提取具有最高权值的句子作为整个文本的代表性摘要。</p><p>代码使用Gensim中的summarization库。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7.2.3 使用Sumy的文本摘要</p><p>Sumy是一个内建多种算法的成熟文本摘要库。代码展示了Sumy实现的4种不同文本摘要算法：Luhn方法、TextRank方法、LSA（潜在语义分析Latent Semantic Analysis）方法、Edmundson方法。除了英语外，Sumy还有捷克语、法语、德语、葡萄牙语、斯洛伐克语和西班牙语的停用词。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>LSA技术建立一个矩阵，行代表词语，列代表句子。行和列的交叉点的值是每个词在每个句子中出现的次数。相似性确定方法是，首先从数学上简化矩阵，然后比较简化矩阵中向量角的余弦，找出相似的行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Edmundson与Luhn的主要差异在于，分析师可以注入某些词语，作为与句子重要性高度相关的提示。指向重要句子的单词例子称为取正值的褒义词，与此相反的是取负值的贬义词，也就是对句子重要性有负面影响的词语。无效词则是对句子的重要性是中性（无关）的。在Sumy的Edmunson实现中，用户必须配置褒义词、贬义词和无效词列表。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7.3 小结</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32301769", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 3, 
            "title": "《Python数据挖掘》笔记（六） 文本中的命名实体识别", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>本章将学习：</p><p>a. 命名实体的定义，以及搜索它们的原因。</p><p>b. 寻找命名实体的不同技术及各自的优点。</p><p>c. 如何找出文本中的命名实体，包括如何将它们与其他标记的词性区分开来。</p><p>d. 如何在真实数据上应用这些命名实体识别技术。</p><p>e. 如何确定命名实体识别是否成功。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6.1 为什么寻找命名实体？</p><p>命名实体识别（NER）是找出较大文本体中的某些人、地点和事物的行为。命名实体识别绝对是由应用目的驱动的。如果要显示的实体数量和类型很少，可以使用简单的模式匹配，和词汇表进行比较。另一方面，具有更高目标的NER应用将试图在不依靠预设已知实体列表的情况下提取命名实体。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>面临的难题包括：电影名称、科技缩略语、公司缩略语等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6.2 命名实体识别技术</p><p>大小写状态和词性虽然不完美，但是可以很好地指示文本中哪些词语或者短语可能是命名实体。下一个关键步骤是找出名词和名词短语，这是命名实体的极佳标志。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>词性标记。要找出句子中每个单词的词性（POS），可以用称为词性标记器的软件。</p><p>语料库是一个文本集合，带注解的语料库是已经标记的语料库，例如标记了每个单词的正确词性。</p><p>著名的如布朗语料库，1961年创建，包含500个文档，每个文档约2000个词，总共标记了大约100万个词。</p><p>NTLK默认使用的语料库称为宾州树图（Penn Treebank）标记器。</p><p>命名实体分类：常用类型包括个人、组织、GPE（地理学或者地点实体）等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6.3 NER系统的构建和评估</p><p>NER系统的构建从以下步骤开始：</p><p>a. 将文档分割为句子；</p><p>b. 将句子分割为单词；</p><p>c. 标记每个单词的词性；</p><p>d. 从标记单词集中识别命名实体；</p><p>e. 识别每个命名实体的分类。</p><p>第5步确定实体正确分类，往往要用到机器学习算法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>NER和部分匹配</p><p>严格评分、宽松评分（将部分匹配当成真阳性）、部分评分（为部分匹配建立规则而进行打分）。</p><p>CORRET = 猜对边界和分类之和</p><p>GUESSED = 猜测的边界和分类之和</p><p>POSSIBLE = 边界的可能猜测数和分类的可能猜测数之和</p><p>精度 = CORRECT / GUESSED</p><p>召回率 = CORRECT / POSSIBLE</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6.4 命名实体识别项目</p><p>简单的NER工具，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/megansquire/masteringDM/tree/master/ch6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github代码</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>6.5 总结</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32090198", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 5, 
            "title": "《Python数据挖掘》笔记（五） 文本情绪分析", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>本章将学习：</p><p>a. 情绪分析是什么，我们为什么要关心这种分析？</p><p>b. 如何理解在文本中找到情绪的最常用技术，哪些软件工具可用于实施这些技术？</p><p>c. 如何在两组实际文本中应用情绪分析？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5.1 什么是情绪分析</p><p>情绪分析寻找作者在文本中表现的主观感觉，尝试为文本打上相应的标签。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5.2 情绪分析基础知识</p><p>观点挖掘和情绪分析被视为更大的领域——自然语言处理（NLP）的子问题。情绪挖掘的目标不是理解人们所做的陈述，而只是了解他们的语气。</p><p>5.2.1 观点的结构</p><p>每个观点通常都有一个目标，观点的目标有时候称为实体。观点中的每个实体也可能有成分（子部件），实体或者组件则有属性或者主题词。</p><p>含蓄、讽刺、惯用语和条件语句是情绪识别的挑战。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5.2.2 文档级和句子级分析</p><p>可以在文档和句子级别上分析观点。本章主要关注文档级情绪分析。</p><p>5.2.3 观点的重要特征</p><p>重要特征是文本中使用的词语。词语包含单词和短语，还包含标点符号、表情符号和表情图标，因为这些符号也隐含着情绪或者感觉。我们可以确定正面或负面情绪的单词称为情绪词或者观点词。</p><p>除训练词外，可能表示情绪的文本特征还包括：</p><p>a. 所用单词的稀有性</p><p>b. 单词在文本中的位置</p><p>c. 否定词或者其他所谓的观点转移词的存在</p><p>d. 文本中出现的词性</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5.3 情绪分析算法</p><p>通用数据集</p><p>a. 胡敏清（音译）和刘冰的情绪分析词典：6800个词</p><p>b. SentiWordNet：117000个单词， 13MB的gzip压缩文件</p><p>c. Vader<br/>sentiment：佐治亚理工学院开发，转门为社交媒体数据做了调整，特别是推文等微博数据。包含表情符号和缩写词。Vader还是NTLK自带的分类器之一。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5.4 情绪挖掘应用</p><p>本节用NTLK进行文本情绪分析。分析了两个聊天室的情绪积极度比较。还分析了Linus Torvalds发给LKML的电子邮件集合中，哪一封最能体现linusrants（Linus咆哮）。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/megansquire/masteringDM/tree/master/ch5\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github代码</a><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32089538", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《Python数据挖掘》笔记（四） 网络分析", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p>这章将学到：</p><p>a. 网络理论的基础知识，包括如何计量网络</p><p>b. 为什么我们在网络中能够找到的不同形状很有趣</p><p>c. 如何将现实世界的数据组织为可以网络形式分析的结构</p><p>d. 如何用Python和NetworkX寻找和解读现实世界数据中的这些模式</p><p>e. 如何比较网络的多个版本，以了解网络如何随时间而变化</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.1 什么是网络</p><p>网络指的是可以由节点和链接组成的图表示的系统。节点是相互联系的事务，链接是节点之间的关系。所有节点和链接的集合称为图。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.2 网络计量</p><p>4.2.1 网络的度数</p><p>节点的度数是与其相连的边数。对于无向图，节点的度是从其出发的所有边数。对于有向图，节点的入边为入度，节点的出边为出度。入度和出度相加，为节点的总度数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.2.2 网络直径</p><p>两个点之间的距离是连接它们所需要的最小跳数（最短路径）。图的直径是图中任意两点的最长距离（最长最短路径）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.2.3 网络中的通路、路径和迹</p><p>图中的通路指的是遍历节点之间的链接。</p><p>图中的迹指的是遍历图时对每条链接最多使用一次，但是节点可以使用多次。</p><p>图中的路径指的是节点和链接在遍历中都不重复使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.2.4 网络的成分</p><p>如果每个节点都可以从所有其他节点到达，则该图称为连接图。如果图具有多个非连通子图，在这些子图中一个节点到某些其他节点没有路径，我们称该图包含多个成分。</p><p>只包含一个节点的成分称为孤立节点。这些节点的度数为0.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.2.5 图的中心性</p><p>a. 接近中心性：首先计算网络中每对节点之间的最短路径距离；接着对每个节点，计算它与所有其他节点的距离总和；最后将该数值除以网络的可能最小距离（节点数量减1）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>b. 度中心性：度中心性只考虑网络总体大小的情况下，给定节点连接的节点数。其计算方法为其度数（边数）除以网络中的总结点数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>c. 中介中心性</p><p>判别对图的连通性起到关键作用的节点。中介性越高，对图的顺利运行越重要。计算方法：首先计算网络上每对节点之间的最短路径，然后对每个节点计算有多少条网络最短路径包含该节点但是不起止于该节点。最后将该数量除以节点配对总数，即：（节点数-1）*（节点数-2）/2。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>d. 其他中心性测度</p><p>还有许多其他的方法，如PageRank算法。NetworkX可以轻松计算复杂网络中数百个节点的各类中心性测度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.3 图数据的表示</p><p>4.3.1. 邻接矩阵</p><p>A B C</p><p>A 0 1 0</p><p>B 1 0 1</p><p>C 0 1 0</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.3.2. 边表和邻接表</p><p>边表：</p><p>A,B</p><p>B,A</p><p>B,C</p><p>C,B</p><p>邻接表：</p><p>A: (B)</p><p>B: (A, C)</p><p>C: (B)</p><p>这种方式可以用哈希表、Python中的字典结构或者JSON中的一组键值对形式实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.3.3. 图数据结构之间的差别</p><p>Python的NetworkX包可以用节点和边的列表创建图，不管我们想用邻接矩阵、边表还是邻接表表示图，都有内建的函数可以使用。但是在NetworkX内部，它采用Python的字典数据结构，以邻接表形式存储图。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.3.4. 将数据导入图结构中</p><p>NetworkX支持10种以上的不同文件格式：包括邻接表格式、边表格式、GEXF和GraphML格式、GDF格式、Pickle格式、JSON格式、JSON节点和链接系列、JSON树、Pajek格式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.4 真实项目</p><p>对RubyForge开发人员的社交网络进行分析。进行了以下操作：</p><p>生成网络文件</p><p>生成简单网络指标</p><p>尝试网络参数</p><p>分析子图</p><p>分析子图中的团和中心性</p><p>寻找一段时间内的变化</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/megansquire/masteringDM/tree/master/ch4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github代码</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>4.5 小结</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": [
                {
                    "userName": "大海航行靠舵手", 
                    "userLink": "https://www.zhihu.com/people/286a6a63f7c58f5aed708e9ac5132556", 
                    "content": "请问楼主知道图与网络分析中双向有权图的closeness centrality和betweeness centrality怎么算吗，我在网上搜到的都是无向图", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32089476", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《Python数据挖掘》笔记（三）实体匹配", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>=======================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本章关心的是实体（或者事物）的精确识别，以及匹配实体的正确指定。</p><p>本章将学习：</p><p>a. 实体匹配的常见策略，包括属性匹配、互斥集、上下文匹配和典型匹配分析；</p><p>b. 如何评估所选择方法的效率，包括结果集精度、召回率和F-度量的计算；</p><p>c. 如何对一个现实世界问题应用实体匹配方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1 什么是实体匹配</p><p>当数据集合并时，识别重复项。该任务有许多别称：实体歧义消除、对象合并、重复识别、合并/清除和记录连接等。</p><p>3.1.1 数据合并</p><p>数据合并意味着需要从物理上或者逻辑上组合多个数据集。在数据合并之前牢记几个数据质量原则：</p><p>a. 通常，应该尽可能多地保留数据。</p><p>b. 纯净的数据更好。合并后的数据应该尽可能统一，使用标准化的字符集、格式等。</p><p>c. 数据应该具有原子性。必须尽可能将其分解为最小的部件，而不使其失去意义。单独的地址、城市、州和邮政编码字段可能比一个包含地址各部分的巨型字段更有用。</p><p>数据合并的方式：</p><p>a. 数据的垂直合并：就是添加行。</p><p>b. 数据的水平合并：就是添加列。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.2 匹配技术</p><p>没有最佳的匹配技术或算法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.3 基于属性的相似度匹配</p><p>给属性建立相似度函数，给属性相似度打分。</p><p>a. 成对比较时要留心：可能组合数量很大，要煞费苦心地减少可能匹配的集合，可能需要使用持久化存储。</p><p>b. 利用稀有值：可以利用非常稀有的值提高匹配精度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.4 属性匹配方法</p><p>a. 基于范围或者与目标的距离</p><p>b. 字符串编辑距离（包括海明距离和Levenshtein距离）</p><p>c. 海明距离：一个字符串变成另一个字符串所需要替换的字符数，但不允许插入和删除。</p><p>d. Levenshtein距离：将一个字符串变成另一个字符串需要的最少替换、删除或者插入数量。</p><p>e. 声索引Soundex：计算字符串发音的相似度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.5 利用不相交数据集</p><p>不相交数据集指的是一个数据集与另一个数据集的属性相互重叠但不完全相等的情况。给不同属性之间建立一定约束关系来辅助共同属性的匹配。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.6 基于上下文的相似度匹配</p><p>考虑在某种上下文空间内每个实体相互关联的方式。想象为每个数据集建立一个层次或者图形结构，并根据在图中的相似位置匹配实体。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.7 基于机器学习的实体匹配</p><p>采用机器学习算法，如贝叶斯分类器、支持向量机或者决策树等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.1.8 实体匹配技术的评估</p><p>a. 效率——匹配需要花费多长时间</p><p>通过分块方法减少配对列表大小，通过数值范围、日期范围、字符串编辑距离和声索引可减少比较次数，还可以减少需要比较的属性数量以及过程中的总体比较次数和复杂度。</p><p>b. 效率——我们生成的匹配有多精确</p><p>真阳性：相同的实体被正确匹配</p><p>真阴性：不同的实体不被匹配</p><p>假阳性：不同的实体被匹配</p><p>假阴性：相同的实体没被匹配</p><p>召回率：正确的猜测（真阳性）除以实际匹配的总数（真阳性+假阴性）</p><p>准确度：正确猜测数量除以所有猜测的总数</p><p>特异度：真阴性数量除以猜测的阴性数量和真阴性数量的总和</p><p>c. 实用性——使用匹配过程的可行性问题</p><p>实用指的是使用的过程可以推广，包含的人工步骤最少。可推广意味着实体匹配过程广泛适用于许多情况。这些情况可能包括不同的领域、不同时间或者不同系统。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.2 实体匹配项目</p><p>以RubyForge和RubyGem两个网站的项目做匹配。采用了几种属性匹配：</p><p>a. 根据项目名称匹配</p><p>b. 根据人名匹配</p><p>c. 根据URL匹配</p><p>d. 按照主题和描述关键词匹配</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/megansquire/masteringDM/tree/master/ch3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github代码</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.3 小结</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30687331", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 3, 
            "title": "《Python数据挖掘》笔记（二）关联规则挖掘", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>2.1 什么是频繁项集</p><p>频繁项集是数据集中出现频率较高的项集。频繁项集挖掘的目的是发现一组交易中共同出现的有趣项目组合。</p><p>2.1.1 都市传奇“尿布与啤酒”</p><p>作者怀疑故事的真实性。</p><p>2.1.2 频繁项集挖掘基础知识</p><p>三个概念：市场、篮子、商品。</p><p>需要满足的假设条件：</p><p>a. 商品和篮子之间是多对多的关系。</p><p>b. 不考虑商品的数量。</p><p>c. 某件商品可能不出现在任何一个篮子里，但是任何篮子都包含至少一件商品。</p><p>d. 篮子中商品的顺序无关紧要。</p><p>有两个项目的项集称为2-项集或配对，有3个项目的项集称为3-项集（或者三元组），以此类推。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.2 迈向关联规则</p><p>2.2.1 支持度</p><p>支持度表示项集出现的频率。最小支持阈值决定了频繁项集的评判标准。</p><p>2-项集的支持度通常用概率表示：</p><p>support(X-&gt;Y) = P(XuY)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.2.2 置信度</p><p>confidence(X-&gt;Y) = P(X|Y) = support(XuY) / support(X)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.2.3 关联规则</p><p>从支持度和置信度，可以建立频繁项集中项目之间的关联规则。例如：香草威化-&gt;香蕉，奶油。[支持度=1%， 置信度=40%]。规则可以读作：在所有篮子中，有1%包含香草威化、香蕉和生奶油的组合；在购买香草威化的客户中，有40%同时购买了香蕉和生奶油。</p><p>规则左侧是先导，右侧是后继。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.2.4 包含数据的示例</p><p>2.2.5 附加值——修复计划中的漏洞</p><p>避免有些商品自身的表现好于作为关联规则后继时的表现。通过附加值考虑其关联的合理性。</p><p>附加值 = 规则置信度 – 右侧的支持度</p><p>如果附加值是大的正数，那么规则是好的、有用的。如果附加值接近于0，则这条规则可能是正确的，但是没太大用处。如果附加值是大的负数，那么规则中的商品实际上是负相关的，这时单独使用表现会更好。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.2.6 寻找频繁项集的方法</p><p>快速寻找频繁项集的一条重要原则：向上闭包属性。向上闭包指的是，只有在项集的所有项目都频繁出现时，该项集才是频繁项集。</p><p>Apriori算法：</p><p>a. 设置一个支持阈值</p><p>b. 构建一个1-项集列表，根据支持度得到SingletonList列表</p><p>c. 从SingletonList中选择项集构建DoubletonList</p><p>d. 从DoubletonList中选择项集构建TripletionList。</p><p>e. 重复d步，从前面构建的列表中的单项生成n-项集，直到频繁集用完。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.3 项目——发现软件项目标签中的关联规则</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/megansquire/masteringDM/tree/master/ch2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github代码</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>2.4 小结</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687195\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30687195", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 4, 
            "title": "《Python数据挖掘》笔记（一）扩展你的数据挖掘工具箱", 
            "content": "<p>Python数据挖掘：概念、方法与实践。Megan Squire著，姚军译，机械工业出版社，2017年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>第一章 扩展你的数据挖掘工具箱</p><p>1.1 什么是数据挖掘</p><p>数据挖掘应被视为和KDD（数据库中的知识发现）非常相似、紧密相关的术语。</p><p>数据挖掘与机器学习、预测性分析、大数据和数据科学是什么关系？</p><p>a. 机器学习：是计算机科学中的一个非常特殊的子领域，其焦点是开发能从数据中学习以作出预测的算法。许多数据挖掘解决方案使用了来自机器学习的技术，但并不是所有数据挖掘都试图从数据中作出预测或者学习。有时候，我们只是想要找到数据中的一个模式。</p><p>b. 预测性分析：有时简称为分析，是各个领域中试图从数据中作出预测的计算解决方案的统称。同样，在数据挖掘中，并不总是对预测感兴趣。</p><p>c. 大数据：指的是处理非常大量数据的问题和解决方案，与我们是要搜索数据中的模式还是简单地存储这些数据无关。处理大数据所开发的解决方案迟早可用于解决数据挖掘问题，但这两个术语只是互为补充，不能互换使用。</p><p>d. 数据科学：是最接近KDD过程的术语，数据挖掘是它们的一个步骤。因为数据科学目前是极受欢迎的流行语，它的含义将随着这一领域的成熟而继续发展和变化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1.2 如何进行数据挖掘</p><p>1.2.1 Fayyad等人的KDD过程</p><p>Usama Fayyad等在1996年的一篇论文（The KDD Process for Extracting Useful Knowledge from Volumes of Data）中定义的过程如下：</p><p>a. 数据选择</p><p>b. 数据预处理</p><p>c. 数据变换</p><p>d. 数据挖掘</p><p>e. 数据解释/评估</p><p>1.2.2 韩家炜等人的KDD过程</p><p>韩家炜等所著的数据挖掘教科书《Data Mining: Concepts and Techniques》定义的过程如下：</p><p>a. 数据清理</p><p>b. 数据整合</p><p>c. 数据选择</p><p>d. 数据变换</p><p>e. 数据挖掘</p><p>f. 模式评估</p><p>g. 知识表示</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1.2.3 CRISP-DM过程</p><p>该方法应用于许多商业和应用领域，全称是CRoss-Industry Standard Process for Data Mining（跨行业数据挖掘标准过程），包含如下步骤：</p><p>a. 业务理解</p><p>b. 数据理解</p><p>c. 数据准备</p><p>d. 建模</p><p>e. 评估</p><p>f. 部署</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1.2.4六步过程</p><p>作者在教授数据科学入门课程时创造的，包含如下过程：</p><p>a. 问题陈述</p><p>b. 数据收集和存储</p><p>c. 格式清理</p><p>d. 数据挖掘</p><p>e. 表示和可视化</p><p>f. 问题解决</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1.3 在数据挖掘中使用哪些技术</p><p>Fayyad等人在1996年的论文（From Data Mining to Knowledge Discovery in Database）提出了6类问题：</p><p>a. 分类问题</p><p>b. 聚类问题</p><p>c. 回归问题</p><p>d. 摘要问题</p><p>e. 依赖性建模问题</p><p>f. 变化和偏差检测问题</p><p>g. 链接分析问题</p><p>h. 序列分析问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p>韩家炜分为描述性和预测性两类问题：</p><p>描述性：</p><p>a. 数据特性描述和数据区分问题：包括数据摘要或者概念特性描述</p><p>b. 频率挖掘：包括找出数据中的频繁模式、关联规则和相关性</p><p>预测性：</p><p>a. 分类，回归</p><p>b. 聚类</p><p>c. 离群值和异常检测</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/30687331\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（二）关联规则挖掘</a><a href=\"https://zhuanlan.zhihu.com/p/32089476\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（三）实体匹配</a><a href=\"https://zhuanlan.zhihu.com/p/32089538\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（四） 网络分析</a><a href=\"https://zhuanlan.zhihu.com/p/32090198\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（五） 文本情绪分析</a><a href=\"https://zhuanlan.zhihu.com/p/32301769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（六） 文本中的命名实体识别</a><a href=\"https://zhuanlan.zhihu.com/p/32301818\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（七） 自动化文本摘要</a><a href=\"https://zhuanlan.zhihu.com/p/32302652\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（八）文本中的主题建模</a><a href=\"https://zhuanlan.zhihu.com/p/32302693\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b32965d16e59612e42d20caf611ec94e_ipico.jpg\" data-image-width=\"800\" data-image-height=\"800\" class=\"internal\">BrianZhang：《Python数据挖掘》笔记（九）挖掘数据异常</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "数据挖掘", 
                    "tagLink": "https://api.zhihu.com/topics/19553534"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30686850", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 5, 
            "title": "《Pentaho Kettle解决方案》阅读笔记", 
            "content": "<p>Pentaho Kettle解决方案：使用PDI构建开源ETL解决方案。 Matt<br/>Casters, Roland Bouman, Josvan Dongen著，初建军，曹雪梅译，电子工业出版社，2014年。</p><p><br/>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>ETL： 抽取、转换和加载。将数据从OLTP系统中转移到数据仓库中的一系列操作的集合。</p><p>抽取：一般抽取过程需要连接到不同的数据源，以便为随后的步骤提供数据。这一部分看上去简单而琐碎，实际上它是ETL解决方案成功实施的一个主要障碍。</p><p>转换：在抽取和加载之间，任何对数据的处理过程都是转换。这些处理过程通常包括（但不限于）下面一些操作：</p><p>1.移动数据</p><p>2.根据规则验证数据</p><p>3.数据内容和数据结构的修改</p><p>4.集成多个数据源的数据</p><p>5.根据处理后的数据计算派生值和聚集值</p><p>加载：将数据机载到目标系统的所有操作。加载并不仅仅是将数据批量装载到目标表。加载过程还包括对代理键的管理和对维度表的管理等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ELT（抽取、加载和转换）同ETL在数据整合的方法上略微不同。ELT下，数据首先从数据源进行抽取，加载到目标数据库中，再转换为所需要的格式。所有大数据量处理全部放在目标数据库中进行。这样做的好处在于，一般情况下，数据库系统更适合处理负载在百万级以上的数据集成。数据库系统也通常会对I/O（吞吐量）进行优化，用来提高数据处理速度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据模型：星型模型，每一个维度都是一个单独的维度表。除了日期和时间维，其它每个维表都使用自增列作为代理主键。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ETL系统的四大块：抽取、清洗和更正、发布、管理。发布不仅仅是把数据写入到目标数据库中，也包括把数据写入到维度表或事实表中的那些转换。管理是对企业信息基础架构的管理。</p><p>ETL子系统被重构为34种子系统：</p><p>一、抽取</p><p>1. 数据剖析系统：目标是分析不同数据源的结构和内容。</p><p>2. 增量数据捕获系统：目标是捕获系统里数据的变化。</p><p>3. 抽取系统：从不同的数据源抽取数据，并输入到ETL流程里。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>二、清洗和更正数据</p><p>4. 数据清洗和质量处理系统</p><p>5. 错误事件处理</p><p>6. 审计维度：审计维度表是一类特殊的维度表，数据仓库里所有的事实表都和审计维度表关联，审计维度表包含了对事实表变更的元数据，加载数据的日期和时间、数据的质量指标等。</p><p>7. 排除重复记录系统</p><p>8. 数据一致性：使来源于多个业务系统的事实数据遵照相同的维度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>三、数据发布：不仅是将数据插入到目标数据库那么简单。还要生成代理键、查询正确的维度键、加载事实数据。</p><p>9. 缓慢变更维度处理：几种缓慢变更维度方法：覆盖、增加新行、增加新列、增加一个小维度表、分离历史表、混合型。</p><p>10. 代理键生成系统</p><p>11. 层次维度构建：层次可以让用户分析查看维度不同级别上的数据。</p><p>12. 特殊维度生成系统：时间维度、杂项维度（垃圾维度）、小维度、收缩的或上卷的维度、静态维度（小的字典表或参照表）、用户自定义维度。</p><p>13. 事实表加载：事务粒度加载表、周期快照事实表、累积快照事实表。</p><p>14. 代理键管道：负责抽取正确的代理键，用于加载事实表。</p><p>15. 多值维度桥接表生成系统：处理不同深度的层次时或有多个维度项和事实表或其他维度表关联时。</p><p>16. 迟到数据处理：事实表和维度表数据都可能晚到。维度表迟到会比较麻烦。</p><p>17. 维度管理系统：中心控制系统，用来准备和向数据仓库发布正确的维度。</p><p>18. 事实表管理系统：负责任何创建、组织、管理和事实表相关的任务。</p><p>19. 聚集构建：聚集表能大幅提升性能，但需要维护聚集表。</p><p>20. OLAP Cube构建系统</p><p>21. 数据整合管理系统：从数据仓库获取数据，并把数据发送到其他环境中，通常用于离线数据分析或其他特殊目的，如给特定客户发送报表。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>四、管理ETL环境</p><p>22. 作业调度</p><p>23. 备份系统。三个地方：1.抽取之后，改动之前；2.清洗、排重、更正之后；3.已经做完最后处理，写入数据仓库之前。通常数据仓库本身备份不是ETL工作。</p><p>24. 恢复和重新启动系统。</p><p>25. 版本控制子系统</p><p>26. 从开发环境到测试、生产环境的版本移植系统。</p><p>27. 工作流监控</p><p>28. 排序系统：分组、排序合并</p><p>29. 血统和依赖分析：提供血统分析和影响分析功能。</p><p>30. 问题报告系统</p><p>31. 并行/管道系统：任务的并行或在集群上执行。</p><p>32. 安全系统</p><p>33. 合规报告系统</p><p>34. 元数据资源库管理系统：目标是捕获到和ETL相关的所有业务、过程和技术元数据。重要的一部分就是系统文档化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据剖析：是指从不同源系统中搜集数据的统计信息或其他相关信息的过程。通过数据剖析获得的统计信息对后面的ETL和数据仓库的设计过程都非常重要。可以完成下面3个层次的工作：</p><p>1. 列特征分析：搜集某一列数据的统计信息。</p><p>2. 依赖性特征分析：分析表中不同列之间的依赖关系。</p><p>3. 连接特征分析：分析不同表之间的依赖关系。</p><p></p>", 
            "topic": [
                {
                    "tag": "Pentaho", 
                    "tagLink": "https://api.zhihu.com/topics/20011373"
                }, 
                {
                    "tag": "ETL", 
                    "tagLink": "https://api.zhihu.com/topics/19598046"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29217245", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（十二完结篇）复合式的数据架构", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>复合数据架构有以下几个值得关注的特征。</p><p>1. 数据的时效性。一般来说，数据越新就会离交互环境越近，数据越旧则越可能被迁移到归档环境。</p><p>2. 交互环境的关键在于应用程序的执行。数据仓库/Data Vault环境的本质就在于数据的集成。</p><p>3. 大数据组件可以分成两个主要部分，即分析型大数据部分和归档型大数据部分。</p><p>4. 元数据可以横跨不同的环境而不受限制。真正企业元数据在任何情况下都是跨数据的。元数据并不考虑数据的不同物理形态或者其他边界。</p><p>5. 在整个复合架构中存在不同层面的元数据。</p><p>6. 该复合架构中描述了企业中详细的、基础性的数据（也就是记录系统中的数据）。其他一些数据（包括汇总数据和合计数据）虽然存在于企业之中，但是在该复合架构中并未反映。（该复合架构中也并没有反映数据集市。）</p><p>7. 在该复合架构中，数据类型有着根本性区别。非结构化数据（也就是非重复型数据）并不直接与基于事务处理的数据（也就是重复型数据）相混合。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1d6b667b18ec181f90412050558d26fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3308\" data-rawheight=\"4375\" class=\"origin_image zh-lightbox-thumb\" width=\"3308\" data-original=\"https://pic3.zhimg.com/v2-1d6b667b18ec181f90412050558d26fa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3308&#39; height=&#39;4375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3308\" data-rawheight=\"4375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3308\" data-original=\"https://pic3.zhimg.com/v2-1d6b667b18ec181f90412050558d26fa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1d6b667b18ec181f90412050558d26fa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3609f14ae7981c80e55ad1878b529906_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3336\" data-rawheight=\"3784\" class=\"origin_image zh-lightbox-thumb\" width=\"3336\" data-original=\"https://pic3.zhimg.com/v2-3609f14ae7981c80e55ad1878b529906_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3336&#39; height=&#39;3784&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3336\" data-rawheight=\"3784\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3336\" data-original=\"https://pic3.zhimg.com/v2-3609f14ae7981c80e55ad1878b529906_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3609f14ae7981c80e55ad1878b529906_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7f4e96653a25e789e5e0c314f62ca2a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4573\" data-rawheight=\"2424\" class=\"origin_image zh-lightbox-thumb\" width=\"4573\" data-original=\"https://pic1.zhimg.com/v2-7f4e96653a25e789e5e0c314f62ca2a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4573&#39; height=&#39;2424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4573\" data-rawheight=\"2424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4573\" data-original=\"https://pic1.zhimg.com/v2-7f4e96653a25e789e5e0c314f62ca2a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7f4e96653a25e789e5e0c314f62ca2a8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29217179", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（十一）个人分析", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>每个企业都有两个层次的决策：企业层面的决策和个人层面的决策。企业层面决策是在一种正式的甚至是规范的环境下完成的。个人层面上的决策是即兴的、个体的和非正式的。个人分析使用最流行的工具是电子表格，有以下优点：1.自主性；2.速成；3.功能非常灵活；4.成本低廉。缺点：1.会被随意更改；2.基于电子表格创建的系统不是按照规定创建的。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29216770", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（十）作业分析2", 
            "content": "<p>数据非规范化的副作用：数据不是集成的，同样的数据单元经常会出现在多个地方，数据丧失了完整性。而且，作业系统中为了保证系统性能，仅保留最少量的历史数据。因此需要一个存储历史数据的场所，它是一种与作业应用程序不同的架构，于是出现了数据仓库。数据仓库是面向主题的、集成的、时变的、非易失的数据集，用于支持管理决策。其中存储了详细的、集成的历史数据。作为数据仓库基础最好的数据模型是关系模型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据仓库最重要的功能之一是能够作为不同组织的基础，是指能够以不同的视角查看同样的数据，同时仍然能够保持同样的数据基础。通过创建数据集市，数据仓库可以服务不同的群体。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29216733", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（九）作业分析1", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>大多数企业有两种基本的处理和决策环境：作业环境；管理决策环境。作业环境是进行详细、即时决策的场所之一。其功能包括：创建、更新和删除单个事务处理；访问数据；具备事务处理的完整性；处理大量的数据；系统性地处理数据；快速执行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了提高事务处理性能，可以减少事务处理所需的I/O次数，例如通过将所需访问的不同数据整个成单个数据库，这种设计称为非规范化设计。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>长期运行的程序和短期运行的程序混合使用会导致系统性能下降，因为长期运行程序执行时，待执行程序会在后面排队。如果必须混合运行，则可以通过划分时段来处理。另一种替代方案是在不同的DBMS和机器上执行。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29215910", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（八）非重复型分析", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>1. 非重复型数据</p><p>非重复型数据的每一个数据单元都是唯一的，与前面的数据单元有所不同。因此其相对重复型数据更难处理，其每一个数据单元在用于分析处理之前都必须单独进行解释。典型的数据有：电子邮件数据、呼叫中心数据、企业合同、质保索赔、保险索赔。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>文本数据通常是非重复型的，搜索技术是处理非重复型数据的方式之一。但有两个缺陷：搜索技术只是搜索数据，并不能产生一个可以随后用于分析的数据库；搜索技术不能查找或者提供当前被分析文本的语境。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>将非重复型数据转换为结构化数据库格式数据的过程叫做文本消歧或者文本ETL。步骤：1.选定数据单元；2.选定数据单元中感兴趣的数据；3.“解析”感兴趣的数据；4.确定基本属性和语境；5.创建基本数据库记录。文本消歧中包含的基本逻辑活动：1.语境化：识别和捕获数据的语境；2.标准化：标准化文本的特定类型；3.基本编辑功能：对文本进行基本的编辑。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>内联语境化（inline contextualization）。只有当文本存在重复和可预测时，才使用。它通过分析一个单词或者短语之前或之后的文本来推断其语境的过程。对一句话分析得到起始分隔符、值和结束分隔符。还可能需要指定最大字符数（告诉系统搜索多远距离）或特殊字符（结束内联语境化搜索）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>分类法/本体处理。分类法不需要文本重复且可预测，应用范围广，而且可以在外部应用。其分析结果取决于分析师选择的分类法（分类的目的或主题）。该方法通常会得到单词对。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>自定义变量。识别所创建的自定义变量。如零件编号、电话号码等固定形式的文本。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>同形异义消解。不同单词可能表达不同含义。其中包含几个要素：1.同形异义词本身；2.同形异义词分类；3.同形异义词消解；4.与同形异义词类别相关的单词。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>缩略词消解。将缩略语替换成文字值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>否定分析。对文本中说明的不会发生或未发生事情的识别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数字标注。对文中出现的数值打标签，便于分析师分析其含义。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>日期标注。对文中出现的日期进行标注。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>日期标准化。日期有多种记录格式，要将日期的格式标准化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>列表的处理。文本中会包含列表，需要识别列表，而不是作为连续的字符串。如“配方：1.大米 2.食盐 3.辣椒粉 4.洋葱…”。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>联想式词处理（associative word processing）。有时文档的重复是在结构方面，而不是词汇或内容方面。首先为数据创建一个精心定义的结构，然后根据单词的常见含义来定义该结构中的单词。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>停用词处理。停用词是指那些在正确的语法中必不可少但是在理解文本所表达的含义时却没有作用或者不必要的单词。英语中典型的停用词有a、and、the、is、that、what、for、to、by等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>提取单词词根。拉丁语系和希腊语系的单词都有词根。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>文档元数据。有时为组织所管理的文档建立索引也很有用。索引的创建可以只是索引本身，也可以将索引文本ETL中其他的可用功能一起创建。文档索引的典型内容包括：文档创建的日期、文档最后访问的日期、文档最后更新的日期、文档创建者、文档长度、文档标题等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>文档分类。可以对文档进行分类，例如按照公司业务分类：勘探、生产、提炼、存储、配送、零售等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>相近度分析（proximity analysis）。对实际的单词或者分类法（或者这些要素的组合）进行操作。分析师指定待分析的单词或分类法，根据文本的需要给出这些词的相似程度，并且为相近度变量指定名称。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>文本ETL中功能的先后顺序。文本ETL中会出现很多不同的功能，其顺序对结果有效性具有极大影响。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>内部参照完整性。为了能够对很多不同的变量和很多不同的关系保持跟踪，文本ETL具有一种复杂的内部结构。为了使文本ETL的任何给定迭代处理都正确执行，必须正确定义内部关系。为了确保所有的内部关系都得以准确定义，在文本ETL运行之前，必须执行验证处理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>预处理、后处理。预处理中的活动：1.筛选出不想要和不需要的数据；2.修复数据的模糊逻辑；3.数据的分类；4.数据的粗编辑功能；等等。后处理的活动：1.合并；2.前缀消解；3.编辑功能；等等。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 映射</p><p>映射是一个定义规范的过程，规定了如何使用文本ETL来处理一个文档。每一种待处理的文档都对应一个单独的映射。文本ETL的优良特性在于：分析师可以基于以前的映射规范来创建新的映射。下面列出了分析师在创建映射的过程中需要询问的问题。</p><p>语境化</p><p>文本是重复型的吗？——&gt;内联语境化</p><p>文本是非重复型的吗？——&gt;分类法</p><p>有没有自定义变量？——&gt;自定义变量规范</p><p>有没有同形异义词？——&gt;同形异义词消解</p><p>有没有多种日期？——&gt;日期标注</p><p>有没有多种数字？——&gt;数字标注</p><p>有没有相近度变量？——&gt;相近度变量规范</p><p>基本编辑功能</p><p>去除停用词？——&gt;停用词处理</p><p>提取词根是否有用？——&gt;提取词根</p><p>是否需要替代的拼写？——&gt;替代拼写规范</p><p>是否需要进行数字转换？——&gt;转换数字</p><p>有没有需要处理的否定词？——&gt;否定性规范</p><p>杂项</p><p>是否需要文档元数据？——&gt;文档元数据规范</p><p>是否需要对日期进行标准化？——&gt;日期标准化</p><p>是否需要对子文档进行处理？——&gt;子文档处理规范</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 分析非重复型数据</p><p>典型的非重复型数据：电子邮件、呼叫中心、企业合同、质保索赔、保险索赔和医疗记录。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>呼叫中心信息分析案例。1.通过对话录音捕获对话；2.使用语音识别技术进行转录；3.对转录副本进行映射：停用词编辑，同形异义词识别，分类法识别，缩略语消解；4.文本消歧处理转录副本，输入：原始文本、映射和分类法，输出：分析数据库。5.选择分析工具如Tableau进行分析。通过仪表板可以观察：活动处理的时间，处理的是什么活动，电话的实际内容，研究对象的统计情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29215845", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（七）重复型分析", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>1. 重复型分析——必备基础</p><p>不同种类的分析。分析有两种不同的类型：开放式连续分析和基于项目的分析。前者常用于企业的结构化数据领域，在重复型数据领域很少使用。过程是：收集数据、提炼和分析、做出决策（对现实世界产生影响）。然后再重复上述过程不断调整。后者是只做一次的分析。二者所需的基础设施极为不同。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>寻找模式。寻找模式——&gt;获得洞察力——&gt;更高效、安全、经济地自我管理。要警惕假阳性结果的出现，它的出现可能是因为大量未知和随机的原因造成的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>启发式处理。分析处理可视为启发式处理。迭代的过程：需求、开发系统、分析——&gt;重新描述需求、开发系统、分析——&gt;… 。其特征：刚开始无法知道有多少次重新开发迭代过程；在启发式过程的周期内，需求既可能很小改变，也可能完全改变；快速的开发速度和结果生成；由于要在迭代中改变算法，因此需要每次迭代的数据要保持不变，才能比较结果。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>沙箱。启发式处理在沙箱（sandbox）中进行。沙箱是一种供分析师查看和研究数据的环境。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>标准概况。被分析对象的构成情况（的概要描述）。有用性：可以使管理人员对系统中将要出现的状况一目了然；可以确定单个记录距离标准记录有多远。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>提炼、筛选。提炼处理的结果是单一结果集。筛选处理结果是对多个记录的选择和精炼。筛选处理的目标是找出所有满足某种准则的记录。前者的重点在于分析性和算法性的处理，而后者的重点在于选取记录并编辑这些记录。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>建立数据子集。通过筛选创建数据子集，可能出于以下原因：减少需要分析的数据量；处理的纯度；安全性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>筛选数据。数据的筛选可以针对数据库中某一属性或任何属性的值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>重复型数据和语境。重复型非结构化数据的语境通常是容易查找的。其中大部分数据相当普通。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>链接重复型记录。可以将重复型记录链接到一起，形成一个更大的图，他们之间形成了某种逻辑上的关联关系，可以从中推导出更加复杂的内容。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>日志磁带记录。日志磁带上的信息都是以加密方式存储的。大多数写入时不是为了分析处理，二是备份和恢复。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>分析数据点。可以通过散点图进行分析。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>按时间的推移研究数据。标准方法之一是排列图（帕累托图， Pareto chart）。必须牢记：只要时间足够长，数据度量的模式都会随着时间的推移而逐渐变化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 分析重复型数据</p><p>可将重复型数据看作以数据块、记录和属性等形式来组织的。数据块中装载了记录（数据单元），数据单元中包含了属性。需要解析数据块以发现数据的含义。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>日志数据。解析的记录类型一般是有限的。要熟悉大数据环境下的数据技术：数据的读取和解释；大规模数据的管理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据的主动/被动式索引。主动式索引（active<br/>index）：为了满足用户的数据访问需求而创建的索引。被动式索引（passive index）：按照数据的组织方式创建的，以备人们今后访问数据时使用。在大数据环境中，索引一般是通过一种名为爬虫的技术来创建。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>汇总/详细数据。汇总数据可以保存在大数据环境中，但它和原始数据不需要建立联系，因为生成的算法往往不是在大数据环境中存储的，可以编制说明生成算法的文档，放在汇总数据旁边。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大数据中的元数据。比较重要的两种形式：原始元数据和导出元数据。典型的原始元数据包括以下信息：字段名；字段长度；字段类型和标识特征的字段。导出元数据包括：对如何选择数据的描述；对何时选择数据的描述；对数据源的描述；对如何计算数据的描述。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>相互关联的数据。数据的可能联系是一种基于概率的联系，而不是一种基于实际值的联系。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 重复型分析</p><p>内部、外部数据。大数据技术的出现使得存储成本降低，可以将外部数据也存储起来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>通用标识符。一些通用度量包括：时间（格林尼治标准时间）、日期（儒略日）、货币（美元）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>安全性。加密。要考虑的问题：加密算法的安全性如何；谁能对数据进行解密；应该对需要被索引的字段进行加密吗；应该如何保护解密密钥。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>筛选、提炼。提炼可以选择和读取重复型记录，之后分析数据、查找平均值、总值、异常值等。在完成分析之后得到单一的结果。筛选与提炼过程相似，但是输出可以很多记录。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>归档结果。项目结束之后为项目创建一个存档很重要。考虑如下信息：项目中涉及什么样的数据；使用了哪些算法；在项目中有多少次迭代；项目达到了什么结果；结果存储在哪里；谁主导了该项目；该项目的实施花费了多长时间；谁赞助了该项目。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>指标。重复型分析开始时，建立一些指标，用来确定一个项目是否已经达到了目标。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29214390", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（六）数据架构", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>1. 数据架构简史</p><p>数据架构最有意义的四个方面：数据的物理表现形式、逻辑联系、内部格式、文件格式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>物理演进：纸带/穿孔卡片——&gt;磁带——&gt;磁盘存储器——&gt;并行磁盘、大数据。</p><p>逻辑演化：结构化——&gt;层级结构/网络——&gt;关系型——&gt;Data Vault。</p><p>内部格式演化：结构化、非结构化——&gt;重复型、非重复型</p><p>文件结构演化：文件——&gt;主文件——&gt;数据库——&gt;ODS、在线、数据仓库——&gt;维度模型、数据集市</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 大数据/已有系统接口</p><p>重复型原始大数据。要对每条记录进行解析，定位到感兴趣的记录之后，对感兴趣的记录进行编辑，然后将其传送给已有系统环境。</p><p>可以对重复型原始大数据进行直接分析、简单搜索，然后提炼，进入到非结构化数据库。</p><p>可以对非重复型原始大数据进行文本消歧，提炼语境，生成语境丰富的大数据，供简单搜索；也可以在提炼语境后放入非结构化数据库（可以是标准DBMS），供语境化分析。</p><p>可以对保存在非结构化数据库的中经处理的上述两类数据再结合经典数据仓库中的数据进行综合分析。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 数据仓库/作业环境接口</p><p>ETL——&gt;数据仓库</p><p>ETL——&gt;ODS——&gt;数据仓库</p><p>ETL——&gt;集结区——&gt;数据仓库</p><p>可通过日志磁带的检查来捕获变化数据，避免要将数据更新到数据仓库时去扫描整个数据库。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 数据架构——一种高层视角</p><p>数据架构的高层视角，可以看到以下几个部分：在线系统的数据库或文本记录、ODS、数据仓库、针对各部门的数据集市、归档的大数据系统。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29214301", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《数据架构》阅读笔记（五）作业环境", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>1. 作业环境——简史</p><p>2. 标准工作单元</p><p>服务等级协议（service level agreement, SLA）规定了在线事务处理环境中性能和服务可接受的等级。SLA包含平均响应时间和系统可用性，而且SLA仅涵盖工作时间。</p><p>3. 面向结构化环境的数据建模</p><p>只要粒度化的数据。数据模型仅仅是围绕着组织中粒度化的细节数据来塑造的。当数据建模师允许总数据或者合计数据进入数据模型，那么会出现以下不好的情况：a. 需要对海量数据进行建模； b. 计算汇总数据的公式变化很快，要比建模师创建和变更模型的速度快； c. 不同的人群采用了不同的计算公式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>创建模型的第一步是从数据模型中删除所有推导出来的数据（即汇总数据或合计数据）。当识别出粒度化的数据后，下一步就是对数据进行“抽象”。需要将数据抽象到其有意义的最高层级。假如公司生产跑车、轿车、SUV和卡车，在数据模型中将这些数据抽象为一个“车辆”实体。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>实体关系图。数据模型最高层次的抽象叫做实体关系图（entity relationship diagram, ERD）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据项集。实体的下一层级是数据项集（data item set, DIS），具有更多的细节，说明了实体的键、属性和关系。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>物理数据库设计。DIS中的每一个数据分组都会产生一个单独的数据库设计。数据库设计要考虑数据的物理结构、数据的物理特征、键的规范、索引的规范等。数据的物理规范的结果就是产生一个数据库设计。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>由于在同一行业中数据模型存在很大的相似性，出现了一种名为通用数据模型的模型。采用通用数据模型要比从零开始建立一个数据模型成本更低而且更快捷。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 元数据</p><p>经典定义是“关于数据的数据”。实际上，元数据是定义操作系统、数据库管理系统和应用程序中数据的重要特征的描述数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>典型元数据。数据库的典型元数据包括以下各项的定义：表名、属性、属性的物理特征、键、索引和有关系统中数据的其他描述性信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 结构化数据的数据治理</p><p>修复数据。导致数据损坏的原因有很多：同一数据有多种混杂的定义；数据根本就不是集成的、或者说集成得不正确；未能正确进行数据的获取；没有正确定义和强制执行的记录系统；计算和算法的创建不正确；业务需求发生变化而数据并未发生变化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据修复一般始于对问题的确定。当问题明确之后，就至少需要完成以下三个步骤：a. 需要重新定义数据； b. 需要重新为系统指定数据； c. 需要对支持数据的代码进行修改。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29151148", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 10, 
            "title": "《数据架构》阅读笔记（四）Data Vault", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>1. Data Vault简介</p><p>Data Vault2.0(DV2)是一个商业智能系统，包括建模、方法论、架构和实施这四个方面的最佳实践，包括以下四个组件：a. DV2建模（对模型性能和可扩展性的更改）； b. DV2方法论（遵循Scrum和敏捷最佳实践）； c. DV2架构（包含NoSQL系统和大数据系统）； d. DV2实施（基于模式、自动化生成能力成熟度模型集成（CMMI）第五层级）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>商业系统和数据仓库系统的成熟需要具备以下这些关键要素：</p><p>a. 可重复性的模式</p><p>b. 冗余架构和容错系统</p><p>c. 高可扩展性</p><p>d. 极度的灵活性</p><p>e. 可控而一致的变更吸收成本</p><p>f. 可测度的关键过程区域</p><p>g. 缺口分析</p><p>h. 大数据和非结构化数据的集成</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. Data Vault建模介绍</p><p>Data Vault模型是一种中心辐射式模型，其设计重点围绕着业务键的集成模式。这些业务键是存储在多个系统中的、针对各种信息的键（最好是主密钥），用于定位和唯一标识记录或数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>模型中有三种基本的实体（结构）：a. 中心表：唯一业务键的列表，表示了以横向方式贯穿企业的实际业务键或者主密钥集合； b. 链接表：键与键之间唯一关系的列表，表示了企业中存在于业务键之间的关系和联系；<br/>c. 卫星表：历史的描述性数据，真正的数据仓库组件，存储了岁时间推移的非易失数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Data Vault建模的基本规则：a. 业务键是按照粒度和语义内涵进行分割的； b. 关系、事件和跨两个或者多个业务键的交叉关系都要存放在链接结构中； c. 链接结构没有开始或者结束日期，他们只是对数据到达数据仓库那一时刻的关系的一种表达； d. 卫星表是按照数据类型以及变更的类别和速度进行分割的。数据类型一般都是单一的源系统。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>多链接结构是为了允许Data<br/>Vault模型中的关系随时间不断扩展，否则数据模型和ELT/ETL装载程序都需要重新构建。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>散列键代替顺序号是为了在装载数据时消除依赖性，采用顺序方式会迫使负载堆叠到一起，不仅减缓了装载过程，还扼杀了并行处理的可能性，甚至切断了参照完整性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. Data Vault架构介绍</p><p>DV基于三层数据仓库架构：集结区（登陆区）、数据仓库和信息交付层（或数据集市）。多层结构使实现人员可以对企业数据仓库去耦合化，将数据来源和获取功能与信息交付和数据供应功能分解开来。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29151022", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《数据架构》阅读笔记（三）数据仓库", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p>竖井式系统（silo system）环境：在整个架构中，数据完全存在于某个应用程序所限定的“竖井”中，而在竖井式系统环境的外部则完全没有信息的集成。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据仓库是面向决策支持系统（decision support system，DSS）的，是一个面向主题的、集成的、非易失且时变的数据集，用于支持管理决策。数据仓库的另一个术语是“事实的唯一版本”，它为可信的企业数据奠定了基础。它所表现的是整个企业的数据，而不是应用程序的数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据仓库是一套完整的基础设施，包括ETL技术和作业系统；包括数据集市，它的结构围绕着Ralph Kimball所倡导的维度技术；还包括作业数据存储（operational data store, ODS），它是整个架构的关键组成部分之一。数据仓库演化为企业信息工厂（corporate information factory, CIF），接着又演进到了DW 2.0架构。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>非结构化数据也是数据仓库领域中非常重要和关键的一个方面。元数据是基础设施不可或缺的一个组成部分。企业元数据和本地元数据同样重要。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数量众多的应用程序没有进行数据统一，包括：相同数据的命名约定；相同数据的物理属性；相同数据的属性的物理结构；相同数据的值的编码方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ETL技术使得企业数据有了统一的定义，包括：标准化命名约定；标准化数据的物理属性；标准化数据的编码值；标准化数据的计算；标准化数据的分类。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了满足各种独特视角对汇总数据和合计数据的不同需求，人们采用了一种不同的数据结构——数据集市（data mart）。每个组织都有其自己的数据视角，但所有的数据都源自数据仓库中的颗粒化数据。不同的数据部门可以对数据建立不同的解释。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>维度模型是一种优化的、用于数据集市的数据库设计。每个部门的数据集市都有一个与众不同的维度模型，而维度模型的所有数据来自于数据仓库。维度模型有时称作“星型联接”或“雪花模型”。维度模型包括一个事实表和若干维度。维度模型的主要价值在于它很容易创建并且易于分析，当需要改变维度模型时，创建一个新模型通常比维护一个旧模型更加简单。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作业数据存储（operational data store, ODS）。可以帮助对集成数据进行在线事务处理，可以对非集成且难以处理的作业系统的数据进行集成，可以帮助组织对集成数据进行在线更新（数据仓库无法支持在线更新）。作业应用程序将事务数据直接或间接（通过ETL接口）发送给ODS，ODS与数据仓库有接口。数据到了ODS之后，就可以在那里进行在线事务处理。ODS中的数据也会被集成。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ODS和数据仓库的区别。ODS：面向主题的，集成的，易失的，取当前值的。数据仓库：面向主题的，集成的，非易失的，时变的。数据仓库中保存5-10年数据很正常，ODS中很少保存超过30天的数据。二者在保存历史数据规模上有很大差别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ODS分类。I类ODS：作业环境转到ODS在毫秒级。II类ODS：若干小时。III类：第二天才更新到ODS。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据仓库的好处：从企业视角来看待数据；从集成视角来看待数据；研究跨度很长时期的数据；为组织中的多个群体提供唯一的数据基础。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据仓库不应作为进行在线高性能事务处理基础设施。a. 如果为数据捕获了快照后，又因为在线处理更改了快照数据，那么久破坏了数据的完整性；<br/>b. 针对数据仓库的查询类型众多，不像在线系统一样是同质工作负载，无法取得快速的响应时间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>不要在数据仓库中进行长时间的频繁的统计处理，其占用的资源太多，会影响一般用户的查询。如果需要经常统计，则需要建立一个探查仓库（exploration warehouse）。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29008346", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《数据架构》阅读笔记（二）大数据", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第二章 大数据</h2><p>大数据是结构化的还是非机构化的？答案取决于如何定义结构化和非结构化。目前对于“结构化”的最广泛的定义是：所有通过标准DBMS管理的数据都是结构化的。要将数据装载到DBMS中，就需要对系统的逻辑特征和物理特征进行仔细定义。所有数据（包括属性、键和索引）都需要装载到系统之前进行定义。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果结构化指的是包含带有可预见语境的重复型数据，那么可以大数据中的重复型数据是结构化的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>重复型非结构化数据容易进行分析的原因如下：a. 记录的表现形式是统一的； b. 记录通常短小而紧凑； c. 容易找到记录中的语境信息，因而容易解析。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>非重复型非结构化数据较难分析的原因如下：a. 在表现形式上非常不统一； b. 有时小，有时大，有时非常大； c. 记录的解析非常困难，很多记录是文本组成的。文本处理比较复杂。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个本体（ontology）可简单定义为一个分类法，且在这个分类法中的元素存在着相互关联的关系。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（一）企业数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29008136", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 2, 
            "title": "《数据架构》阅读笔记（一）企业数据", 
            "content": "<p>《数据架构——大数据、数据仓库以及Data Vault》，作者W.H. Inmon，DanielLinstedt，译者唐富年，人民邮电出版社，2017年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第一章 企业数据</h2><p>1. 企业数据</p><p>企业的全体数据。按照是否结构化的分法可以划分为结构化数据和非结构化数据两类。结构化数据是一种可预见、经常出现的数据格式。通常包括记录、属性、键和索引等，可以通过DBMS管理。结构化数据是定义良好的、可预测的，并且可通过复杂的基础设施进行管理。其中的大多数数据可快速定位。非结构化数据不可预见，不方便查找，例如文本。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>非结构化数据的划分。非结构化数据又可划分为重复型和非重复型。重复型数据通常是机器间交互产生的，如模拟处理、电话记录、计量、天极数据等；非重复型数据通常在形式和内容上都很少重复或根本不重复，如电子邮件、医疗记录、市场调查、呼叫中心等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>业务相关性。重复型非结构化数据中只有很少的数据具备真正的业务价值。而非重复型非结构化数据中除了垃圾信息和停用词外，几乎所有的数据都是人们感兴趣的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大数据。企业中的大数据包括重复型和非重复型的非结构化数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>分界线。重复型和非重复型非结构化数据在处理方式上截然不同，可以视为两个不同的领域。重复型通过一个管理Hadoop的固定设施来处理，其重点集中在对大数据管理器中的数据进行访问、监视、显示、分析和可视化。非重复型的重点集中在文本消歧，包括消歧的类型、输出的重新格式化、数据的上下文分析和数据的标准化等。</p><p>大陆分水岭。上面两者的分界线就如同大陆分水岭，将二者截然分开。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>企业数据全貌。企业数据包括结构化，非结构化数据。非结构化数据包括重复型和非重复型。非结构化数据属于大数据范畴。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 数据基础设施</p><p>数据管理和数据架构的秘诀是从基础设施方面来理解数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>重复型数据的两种类型。结构化重复数据和非结构化重复数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>重复型结构化数据。最基本的信息单元是数据块，而每个数据块中又含有若干数据记录。一般每条数据记录代表一次交易，包含键、属性和索引等要素。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>重复型大数据。就是重复型非结构化数据。虽然也是重复记录，但是这些记录是连在一起的形成一串，并没有明显的分隔开来，因此要查找一条记录，必须按顺序解析整个记录串。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>两种基础设施。两种设施完全不同。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>优化了什么。大数据的基础设施优化在于能管理几乎无限量的数据。结构化DBMS的优化在于能快速高效地查找任一给定数据单位。</p><p>对比两种基础设施。DBMS能高效查找，但时间推移和数据变化会导致要创建和维护基础设施，需要消耗可观的系统资源。相比而言，大数据基础设施的建立和维护非常容易。二者极为不同。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 分界线</p><p>企业数据分类。大类是结构化和非结构化数据。非结构化里面又分为重复型和非重复型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>分界线。非结构化的两类数据区别巨大：重复型关注的焦点在于Hadoop环境中的数据管理，而非重复型关注的焦点在于数据的文本消歧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>重复型非结构化数据。以Hadoop为中心。Hadoop的基本特点有以下几个：a. 能管理海量数据；b. 可以在相对便宜的存储器上管理数据；c. 采用罗马人口统计方法管理数据；d. 以非结构化方式存储数据。另外，需要一些围绕Hadoop的基础设施服务：装载、删除、访问、数据管理、可视化、分析、统计分析。在标准DBMS中，服务存在于DBMS自身，而对于Hadoop，许多服务在外部执行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>非重复型非结构化数据。强调文本消歧（textual disambiguation），包括文本抽取、转换、装载（extract、transform、load, ETL）。将数据转换成一种可通过标准分析软件分析的格式。最重要的功能是语境化（contextualization），通过阅读和分析文本而推导出上下文。这样就可以格式化为标准数据库格式，便于标准商业智能软件来阅读和分析。推导上下文的技巧包括：a. 外部分类法和本体的集成； b. 相似度分析； c. 同形异义词消解； d. 子文档处理； e. 关联文本消解； f. 缩略词消解； g. 简单停用词处理； h. 简单词根提取； i. 内联模式识别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>不同的领域。重复型非结构化数据不太需要发现数据的上下文，因为其重复度高，上下文明显或容易确定。管理和处理重复型和非重复型非结构化化数据差异很大。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 企业数据统计图</p><p>某些行业有很多重复型非结构化数据，如气象服务、制造业和公用事业。而小型零售组织可能根本没有重复型非结构化数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>业务相关性：结构化数据通常用DBMS管理，通常是业务相关的。重复型非结构化数据很小一部分是业务相关，稍大一部分是潜在相关，大部分是业务不相关。非重复型非结构化数据大部分是业务相关，小部分是业务不相关。从整体而言，与业务相关的数据中只有很少一部分来自于重复型非结构化数据，大部分来自于非重复型非结构化数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 企业数据分析</p><p>企业数据分析分为正式分析和非正式分析。正式分析要得到企业层面或者法律层面的结果。数据分析人员要注意数据的有效性和数据谱系。非正式分析通常要快速完成，并且会使用任何可用的数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>收集数据是进行企业数据分析的最早步骤，其中的最大挑战在于逻辑消解问题，即将不同来源的数据集中到一起，并且无缝读取和处理这些数据。其中的一些难点如下：a. 消解键结构； b. 消解定义；<br/>c. 消解计算； d. 消解数据结构。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一旦完成数据集成，数据被重新格式化为规范化形式。起到两个作用：a. 规范化是一种组织数据的逻辑方式； b. 在规范化数据的基础上，分析处理功能能够发挥出更好的性能。<br/>规范化后的数据具有很小的粒度，便于用多种方式进行归类和计算。规范化不一定以关系结构存放。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>规范化后的数据分析，第一步是数据归类。然后就可以做多种分析了，典型的是异常数据的识别。还有归类和计数分析，根据时间变化的分析，以及关键性能指标KPI的分析。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6. 数据的生命周期——岁时间推移理解数据</p><p>生命周期1：进入——&gt;捕获——&gt;组织——&gt;存储。</p><p>生命周期2：集成——&gt;使用——&gt;归档——&gt;丢弃。</p><p>当原始数据和汇总数据称为信息基础设施的一部分后，数据就会符合有用性曲线所描述的情形：数据在基础设施中保留的越久，则其用于分析的可能性就越低。从使用角度出发，相对较旧的数据会进入休眠状态（dormant）。但对于结构化在线数据而言，并不一定会存在休眠状态。对于一些行业如人寿保险行业的精算师或某些科研机构和制造业研究机构的分析师，可能会查看100年前或50年前的数据。但常规组织几乎都只关心最新数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>详细数据的有用性曲线比汇总数据的更加陡峭，因为刚开始详细数据的有用性更高，而随着时间推移，汇总数据的有用性则更高。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7. 数据简史</p><p>最早期采用手工接线的电路板来决定计算机如何处理数据。后来采用纸带和穿孔卡片。接着是磁带。然后是磁盘存储器。接下来是单处理器的数据库管理系统DBMS。然后是耦合（多）处理器的DBMS。然后是能够进行在线事务处理（OLTP）的在线实时系统。接着数据仓库。接着并行数据管理系统。然后是针对数据仓库改进的Data Vault。接着是大数据系统。现在是能够处理重复型和非重复型大数据的系统。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/29008346\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（二）大数据</a><a href=\"https://zhuanlan.zhihu.com/p/29151022\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（三）数据仓库</a><a href=\"https://zhuanlan.zhihu.com/p/29151148\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（四）Data Vault</a><a href=\"https://zhuanlan.zhihu.com/p/29214301\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（五）作业环境</a><a href=\"https://zhuanlan.zhihu.com/p/29214390\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（六）数据架构</a><a href=\"https://zhuanlan.zhihu.com/p/29215845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（七）重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29215910\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（八）非重复型分析</a><a href=\"https://zhuanlan.zhihu.com/p/29216733\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（九）作业分析1</a><a href=\"https://zhuanlan.zhihu.com/p/29216770\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十）作业分析2</a><a href=\"https://zhuanlan.zhihu.com/p/29217179\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十一）个人分析</a><a href=\"https://zhuanlan.zhihu.com/p/29217245\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-671ca936c473289b205878198a9ff190_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">BrianZhang：《数据架构》阅读笔记（十二完结篇）复合式的数据架构</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }, 
                {
                    "tag": "数据仓库", 
                    "tagLink": "https://api.zhihu.com/topics/19564754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29007566", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（十二完结篇）总结", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第十二章 总结</h2><p>1. 微服务的原则</p><p>围绕业务概念建模。</p><p>接受自动化文化。</p><p>隐藏内部实现的细节。</p><p>让一切都去中心化。</p><p>可独立部署。</p><p>隔离失败。</p><p>高度可观察。</p><p>2. 什么时候你不应该使用微服务</p><p>不了解一个领域的时候，找到服务的限界上下文很难。从头开发的时候，先弄稳定再拆分。</p><p>3. 临别赠言</p><p>缩小每个决策的影响范围，学会拥抱演进式架构，逐步对系统更改。持续地改变和演进系统，变化无法避免。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29007387", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 2, 
            "title": "《微服务设计》阅读笔记（十一）规模化微服务", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第十一章 规模化微服务</h2><p>1. 故障无处不在</p><p>要假定故障会发生，以这种想法来处理每一件事情，为故障做好准备。</p><p>2. 多少是太多</p><p>不同的系统对容忍的故障程度、系统的响应速度等都是不一样的，需要根据这些因素选择技术，需要让客户了解不同级别的服务对应的成本。</p><p>响应时间/延迟。可以用不同数量的用户来测量。“我期望这个网站，当每秒处理200个并发连接时，90%的响应时间在2秒以内。”</p><p>可用性。服务能出现故障吗？是24/7服务吗？</p><p>数据持久性。多大比例的数据丢失是可接受的？数据应该保存多久？</p><p>3. 功能降级</p><p>功能降级的需求要从业务角度出发。</p><p>4. 架构性安全措施</p><p>架构性安全性措施是一些组合的模式，确保如果事情真的出错了，不会引起严重的级联影响。举了一个之前网站由于下游服务响应缓慢导致级联故障的例子，采取的措施是：正确的设置超时；实现舱壁隔离不同的连接池；实现一个断路器。</p><p>5. 反脆弱的组织</p><p>《反脆弱》一书的作者Nassim Taleb认为事物实际上受益于失败和混乱。Netflix通过引发故障来确保其系统的容错性。Netflix开源了混乱猴子（Chaos Monkey）、混乱大猩猩（Chaos Gorilla）以及延迟猴子（Latency Monkey）项目，它们分别用于模拟关闭服务器、关闭可用区以及网络延迟。让软件拥抱和引发故障，从失败中学习。</p><p>超时。下游服务超时，等待太长来决定调用失败，整个系统会变慢。太短会让正常工作的调用被认为失败。没有超时，一个宕掉的下游系统会让整个系统挂起。要给所有跨进程调用设置超时，并选择一个默认时间。超时发生，记录日志。</p><p>断路器。当对下游资源的请求发生一定数量的失败后，打开断路器，请求会迅速失败。过段时间再发送检查，如果下游服务恢复正常则关掉断路器。一些断路器实现：Netflix的Hystrix库（基于JVM），.NET的Polly，Ruby的circuit_breaker mixin。</p><p>舱壁。舱壁通过隔离避免级联故障。在第4节的例子中，就是对不同服务使用了不同的连接池来隔离。还可以使用关注点分离，通过把功能分离成独立的微服务，隔离故障影响。断路器也算蜜蜂舱壁的一种自动机制。</p><p>隔离。服务间加强隔离，最好能做到上游服务可以允许下游服务离线。</p><p>6. 幂等</p><p>多次执行同一操作，与执行一次该操作效果相同。使消息的处理成为幂等能减少很多工作量。</p><p>7. 扩展</p><p>扩展系统的原因：处理失败；提升性能。</p><p>更强大的主机。这是垂直扩展。</p><p>拆分负载。单服务单主机模式扩展为多服务多主机模式。</p><p>分散风险。不要把鸡蛋放在一个篮子里。例如，不要把多个服务放在一台主机上。要考虑SAN的故障，它会引起所有虚拟机不可用。不要让所有服务运行在同一个数据中心的同一个机架上。了解云服务商的SLA（Service-Level Agreement）保证，确保和自己的需求相匹配。</p><p>负载均衡。使用负载均衡器，有硬件有软件（如mod_proxy）。能提供SSL终止功能（将HTTPS连接在内部转换为HTTP连接）的能简化单个主机运行实例的配置。负载均衡器的配置要和服务的配置一样通过版本管理系统管理起来，要能自动化应用。</p><p>基于worker的系统。该系统也可以像负载均衡一样分担负载降低脆弱性。通过待办作业列表来分配作业到不同的worker，需要一个持久化的消息代理或Zookeeper。</p><p>重新设计。前期将精力放在更重要的事情上，当确实有大量负载来了，再去考虑解决，必要时重新设计。</p><p>8. 扩展数据库</p><p>服务的可用性和数据的可用性。要意识到二者的区别。</p><p>扩展读取。通过主节点副本可以做到扩展读取，不过建议先采用缓存（简单并且性能改善显著），其次才考虑副本。</p><p>扩展写操作。数据分片解决扩展写。看看Cassandra、Mongo或者Riak这样的数据库系统。</p><p>共享数据库基础设施。可能引起单点故障。</p><p>CQRS。命令查询职责分离（Command-Query Responsibility Segregation）模式，系统一部分负责获取修改状态的请求命令并处理它，另一部分负责处理查询。内部用于处理命令和查询的模型是完全独立的，可以使用不同的服务或在不同的硬件实现，可以使用不同的数据存储，因此扩展性强。</p><p>9. 缓存</p><p>客户端、代理和服务器端缓存。代理缓存可以用反响代理或CDN；服务器端缓存可以用Redis或Memcache。</p><p>HTTP缓存。cache-control指令，Expires头部，实体标签Etag。它们的使用可以参考《REST实战》。</p><p>为写使用缓存。有爆发式写操作或同样数据可能被写入多次，后写式缓存很有作用。</p><p>为弹性使用缓存。在服务不可用时可以使用缓存代替一些服务。</p><p>隐藏源服务。缓存消失时，如果源服务无法应对大量请求，则不要请求。可以由源服务在后台重建缓存，也可以原始请求快速失败，避免级联故障。</p><p>保持简单。避免太多地方使用缓存。</p><p>缓存中毒：一个警示。需要了解数据从数据源到终点的完整缓存路径，从而真正理解它的复杂性以及使它出错的原因。</p><p>10. 自动收缩</p><p>可以根据负载趋势变化来触发自动收缩，以响应负载。另外，自动伸缩被更多应用于响应故障。</p><p>11. CAP定理</p><p>一致性（consistency）、可用性（availability）、分区容忍性（partition tolerance），三个中最多只能保证两个。</p><p>牺牲一致性。</p><p>牺牲可用性。</p><p>牺牲分区容忍性。</p><p>AP还是CP。需要根据具体情况权衡。</p><p>这不是全部或全不。不同的服务可以是不同的性质，有的是AP，有的是CP，并不是整个系统中的所有服务都保持一致。</p><p>真实世界。在真实世界中，无论系统本身如何一致，都难以做到和真实世界的一致。因此，很多情况下，AP系统是最终正确的选择。</p><p>12. 服务发现</p><p>服务实例要能够注册，其它服务要能够找到已经注册的实例。</p><p>DNS。可以使用DNS解决方案。更新DNS条目有些痛苦。亚马逊的Route53做的不错，但可选的自托管服务中，没有那么好的。</p><p>13. 动态服务注册</p><p>比DNS更适用于高度动态的环境发现节点。</p><p>Zookeeper。被用于很多场景：配置管理、服务间的数据同步、leader选举、消息队列和命名服务。Zookeeper能确保数据在多个节点之间安全地复制，并且当节点故障后仍能保持一致性。</p><p>Consul。也支持配置管理和服务发现，其杀手级特性之一是提供了现成的DNS服务器。还具有对节点进行健康检查的能力。</p><p>Eureka。Netflix开源的系统，提供了基本的负载均衡功能，支持服务实例的基本轮训和调度查找。</p><p>构造你自己的系统。可以使用AWS的API来构造。</p><p>别忘了人。要有工具能在注册中心上显示报告和仪表盘给人看。</p><p>14. 文档服务</p><p>要能生成服务的API文档。</p><p>Swagger。提供的终端用户体验不错，为超媒体核心中的增量探索概念做的很少。</p><p>HAL和HAL浏览器。Hypertext Application<br/>Language是一个描述公开的超媒体控制的标准。在使用超媒体的话，建议用HAL，没使用的话建议用Swagger。</p><p>15. 自描述系统</p><p>Martin Fowler提出的人文注册表方法，有一个地方可以让人们记录组织中有关服务的信息，和维基一样简单。从活系统中抽取一些数据，形成静态Web页面或维基是一个好的开始。</p><p>16. 小结</p><p>推荐Nygard的书《Release It！》，分享了关于系统故障的故事以及处理它们的模式，对于构建任何规模化系统都强烈推荐。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29007156", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（十）康威定律和系统设计", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>第十章 康威定律和系统设计</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>梅尔·康威于1968年4月在Datamation杂志上发表的“How Do Committees Invent”文章指出：任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。</p><p>1. 证据</p><p>松耦合组织和紧耦合组织。紧耦合组织的代表是商业产品公司，松耦合的代表是分布式开源社区。研究发现组织耦合度越低，其创建的系统的模块化约好，耦合也越低。反之亦然。</p><p>Windows Vista。对该产品的研究表明：与组织结构相关联的指标和软件质量的相关度最高。</p><p>2. Netflix和Amazon</p><p>二者都是崇尚小团队开发。</p><p>3. 我们可以做什么</p><p>看看不同组织的情况。</p><p>4. 适应沟通途径</p><p>5. 服务所有权</p><p>服务所有权：拥有服务的团队负责对该服务进行更改。延伸开来包括需求、构建、部署和运维。</p><p>6. 共享服务的原因</p><p>共享服务所有权效果不佳，采用共享服务的原因如下。</p><p>难以分割。拆分成本高。可参考第五章的建议。</p><p>特性团队。基于特性开发的团队。例如一个团队专门负责用户界面，另一个负责应用逻辑，另一个负责处理数据库。这还是服务共享，会出现大量问题。服务应根据业务建模，而不是根据技术。</p><p>交付瓶颈。共享服务，可以避免交付瓶颈。因为人员可以共享。但可以使用下面的方式避免采用共享服务。</p><p>7. 内部开源</p><p>核心提交者是代码的守护者和代码库的所有者，其他人要修改代码，向他们提交pull，核心提交者来审核。</p><p>守护者的角色。好的守护者会花大量精力与提交者进行清晰的沟通。</p><p>成熟。代码成熟后再允许外部提交者贡献代码。</p><p>工具。支持pull的分布式版本控制工具，支持讨论和修改提交申请的工具等。</p><p>8. 限界上下文和团队结构</p><p>根据限界上下文确定服务边界，与团队结构保持一致。</p><p>9. 孤儿服务</p><p>不再活跃维护的服务仍然有其所有并负责的团队。</p><p>10. 案例研究：RealEstate.com.au</p><p>每条业务线有其团队，负责自己创造的服务的整个生命周期。一个核心服务交付团队，为这些团队提供建议、指导和工具。一个业务线内的服务可以不受限制的通信，业务线之间的服务通信必须是异步批处理。</p><p>11. 反向的康威定律。</p><p>无论系统有什么设计缺陷，都不得不通过改变组织结构来推动系统的更改。</p><p>12. 人</p><p>从单块系统开发人员过渡到微服务系统开发人员需要时间来适应和改变，给他们时间，告诉他们的职责。</p><p>13. 小结</p><p>要尽量使得系统设计与组织结构相匹配。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29006983", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（九）安全", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第九章 安全</h2><p>1. 身份验证和授权</p><p>身份验证是确认他是谁的过程。对要验证的人或事，称之为主体。授权机制使得能够将主体映射到他可以进行的操作中，即他能做什么，不能做什么。</p><p>常见的单点登录实现。单点登录（Single Sign-On, SSO），在企业级领域占据统治地位的是SAML和OpenID Connect。SAML是基于SOAP的标准，使用复杂，OpenID Connect已成为OAuth 2.0具体实现的一个标准，在互联网可以用Google的外部身份提供者，但在内网则缺少身份提供者。OpenAM和Gluu也是选择。</p><p>单点登录网关。使用单点登录网关作为代理与身份提供者握手，避免每个服务都要实现与身份管理者握手的功能。Shibboleth工具和Apache一起用，能很好处理与基于SAML的身份提供者的集成。不要将所有的安全措施放在网关上（所有鸡蛋同一个篮子），不要将太多功能由网关实现（高耦合点，受攻击面越大）。</p><p>细粒度的授权。通过判定更细的角色或用户组，进行细粒度授权。这样能够减少微服务本身的处理工作量。但不要过于细，会增大系统维护的工作量。粗粒度与细粒度的权衡要结合组织架构考虑。</p><p>2. 服务间的身份验证和授权</p><p>在边界内允许一切。在边界内对服务的任何调用都是默认可信的。优点：简单。缺点：难以应对中间人攻击等入侵了网络并渗透进系统的攻击。这不是一个好的方式。</p><p>HTTP(S)基本身份验证。允许客户端在标准的HTTP头中发送用户和密码，服务端验证确定客户端权限。优点：容易理解，支持广泛。缺点：HTTP有风险，HTTPS更安全；服务端需要管理SSL证书；SSL上的流量不能被反响代理服务器（如Varnish或Squid）所缓存，需要自己做；如果已经用SSO方案，融合带来工作量；无法确认请求来源。</p><p>使用SAML或OpenID Connect。优点：有现成的解决方案，可以进行细粒度身份验证。缺点：要考虑如何安全存储凭证；实现时代码工作量较大。</p><p>客户端证书。TSL（Transport Layer Security， 安全传输层协议）是SSL在客户端证书方面的继任者，每个客户端都安装一个X.509证书。缺点：证书管理工作更加繁重。</p><p>HTTP之上的HMAC。基于哈希的消息码（Hash-based Message Authentication Code）对请求进行签名，是OAuth规范的一部分，被广泛用于AWS的S3 API。优点：可检测消息被篡改；不会发送私钥；通信能被缓存。缺点：客户端和服务端需要找到好的方式交流密钥；缺乏一个优秀、开放且有效的实现方式；</p><p>API密钥。允许服务识别出是谁在调用，然后针对性地限制。对程序比SAML更易用。解决方案在开源和商业领域有很多选项。</p><p>代理问题。小心混淆代理人问题。</p><p>3. 静态数据的安全</p><p>深度防御很重要。记住基本的原则。</p><p>使用众所周知的加密算法。静态数据加密，可以选择已实现的AES-128或AES-256。密码使用加盐密码哈希技术。</p><p>一切皆与密钥相关。密钥的存储管理，可以选择单独的安全设备来加密和解密数据，或使用单独的密钥库，或数据库内置的加密支持（如SQL Server的透明数据加密）。不要自己实现方案，而是研究和使用已有的方案。</p><p>选择你的目标。仔细研究加密哪些数据。</p><p>按需解密。第一次看到数据就加密，需要时才解密。</p><p>加密备份。</p><p>4. 深度防御</p><p>防火墙。如ModSecurity。</p><p>日志。可帮助检测发生了不好的事情，敏感信息不要存在日志中。</p><p>入侵检测（和预防）系统。</p><p>网络隔离。不同服务可以放在不同网段，通过VPN隔离，定义互连规则（peering<br/>rules）。</p><p>操作系统。打补丁自动化，微软的SCCM或红帽的Spacewalk工具。查看Linux本身安全模块的发展，如AppArmour、SELinux以及GrSSecurity这三个工具。</p><p>5. 一个示例</p><p>对于不同的请求源使用不同的安全措施，如浏览器使用HTTP&amp;HTTPS，第三方消费者使用API密钥，第三方版税系统使用客户证书。服务与外部使用网络防御，服务之间使用HTTP，客户数据进行加密。</p><p>6. 保持节俭</p><p>只存储完成业务运营或满足当地法律所需要的信息，德语Datensparsamkeit。</p><p>7. 人的因素</p><p>8． 黄金法则</p><p>不要实现自己的加密算法，不要发明自己的安全协议。</p><p>9. 内建安全</p><p>熟悉OWASP十大列表和OWASP的安全测试框架。采用帮助探测系统漏洞的自动化工具。ZAP（Zed Attack Proxy）：重现对网站的恶意攻击；针对Ruby的Brakeman：通过静态分析发现导致漏洞的编码错误。可以参考微软的安全开发生命周期（Security Development Lifecycle）中的一些模型。</p><p>10. 外部验证</p><p>找外部团队进行安全评估。</p><p>11. 小结</p><p>识别风险级别，采用不同的方案。深度防御很重要。基于浏览器的应用程序安全的概念可以参考OWASP（Open Web Application Security Projects）。密码学可参考Niels Ferguson、Bruce Schneier和Tadayoshi Kohno所写的Cryptograph Engineering。不要忽视人的因素。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29006932", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 2, 
            "title": "《微服务设计》阅读笔记（八） 监控", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>第八章 监控</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>微服务系统出了问题，要通过服务的监控、日志的筛选、网络延迟的判断等各方面去发现问题，要处理的点很多，该如何办？答案是：监控小的服务，然后聚合起来看整体。</p><p>1. 单一服务，单一服务器</p><p>首先监控主机：CPU、内存等。可以使用监控软件Nagios或者像New Relic这样的托管服务来帮助监控主机。接着查看服务器日志，可以使用命令行工具扫描日志，使用logrotate移除旧的日志。最后监控应用程序本身，至少要监控服务响应时间。可以通过查看运行服务的Web服务器或者服务日志完成。进一步可以追踪报告中错误出现的次数。</p><p>2. 单一服务，多个服务器</p><p>仍然要监控每个主机的资源使用情况，需要聚合各主机的信息来分析，也需要对单个主机信息进行深入分析。可以采用Nagios。对于日志，如果只有几个主机，可以用像ssh-multiplexers这样的工具，在多个主机上运行相同的命令。用一个大显示屏，运行grep “Error” app.log来定位错误。对于响应时间，可以在负载均衡器中跟踪，负载均衡器本身也需要跟踪。</p><p>3. 多个服务，多个服务器</p><p>通过日志和应用程序指标的集中收集和聚合来定位问题。</p><p>4. 日志，日志，更多的日志</p><p>可以用logstash，解析多种日志格式，发送到下游系统。Kibana是基于ElasticSearch查看日志的系统。</p><p>5. 多个服务的指标跟踪</p><p>需要长时间收集系统运行指标，以了解其模式，从而判断异常。可以用Graphite来方便地从新的主机收集指标，查看聚合后的数据。</p><p>6. 服务指标</p><p>Linux上安装collectd并指向Graphite时，会有大量的指标。像Nginx或Varnish这样的支撑子系统，也会提供很多信息，如响应时间、缓存命中率。对于应用程序，强烈建议公开自己服务的基本标准。这样可以：了解系统各个功能的使用情况；了解用户如何使用我们的系统，从而得知如何改进；我们永远不知道哪些数据是有用的，因此要暴露一切数据，通过指标系统来处理。Codahale的Metrics库（运行于JVM）可以存储指标，并能将数据发送给Graphite。</p><p>7. 综合监控</p><p>对于系统服务的监控，可以采用合成事务的方式，确保系统行为在语义上的正确性，这种技术因此常被称为语义监控。创建假事件给系统处理，监控处理行为就是一个合成事务的例子。</p><p>实现语义监控。可以采用针对指定服务或整个系统的端到端测试进行语义监控。但要确保测试的数据和实时的数据相匹配，还要确保不会产生副作用。</p><p>8. 关联标识</p><p>要能够像查看堆栈一样查看由请求引起的调用链。可以使用关联标识（ID），在触发第一个调用时，生成一个GUID，然后将其传递给所有的后续调用，日志中保存该关联标识，就能通过查看日志进行跟踪。每个服务都应知道传递关联标识。可用Zipkin进行跨多个系统边界跟踪调用。Zipkin有点重，需要自定义客户端并且支持收集系统。传递关联标识需要在所有服务中保持一致，可以通过统一的库来进行，实现该库时需要尽量减少其依赖。</p><p>9. 级联</p><p>级联故障很危险，监控系统之间的集成点非常关键。每个服务应该追踪和显示其下游服务的健康状态，然后将这些信息汇总，整合到一个画面。可以用库实现一个断路器网络调用，帮助你更优雅地处理级联故障和功能降级。如JVM上的Hystrix，提供了挺好的监控功能。</p><p>10. 标准化</p><p>监控领域的标准化很关键，可以利用工具，例如提供预配置的虚拟机镜像，镜像内置logstash和collectd，还有一个公用的应用程序库，使其与Graphite容易交互。</p><p>11. 考虑受众</p><p>不同的人对于数据进行深入分析的需求不一样。需要考虑：他们现在需要知道什么，他们之后想要什么，他们如何消费数据。定量信息的图形化显示可以参考Stephen Few的《Information Dashboard Design: Displaying Data for At-a-Glance Monitoring》一书。</p><p>12. 未来</p><p>存储业务指标的系统通常无法直接、实时地访问，而存储运营指标的系统却可以。如果能有通用的事件路由系统，使两者能聚合用于生成报告，则整体架构会更加简单。Riemann是一个事件服务器，允许高级的聚合和事件路由。Netflix开源的Suro类似。聚合的数据可以分发到不同的系统，如Storm、Hadoop或Kibana。</p><p>13. 总结</p><p>对每个服务：跟踪请求响应时间、错误率和应用程序级指标；跟踪所有下游服务的健康状态，如调用时间、错误率；标准化如何收集和存储指标；以标准格式讲日志记录到一个标准位置；监控底层操作系统。</p><p>对系统：聚合CPU等主机层级的指标和程序级指标；确保指标存储工具可以在系统和服务级别做聚合，也能查看单台主机信息；指标存储工具允许维护数据足够长时间，以了解趋势；使用单个可查询工具对日志进行聚合和存储；强烈考虑标准化关联标识的使用；了解什么样的情况需要行动，并构造警报和仪表盘；调查对各种指标聚合和统一化的可能性。</p><p>更多通用事件处理系统的内容可参考作者的书《Lightweight Systems for Realtime Monitoring》。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29005056", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（七）测试", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>第七章 测试</h2><p>1. 测试类型</p><p>面向技术的测试：单元测试、非功能性测试（响应时间、可扩展性、性能测试、安全测试）。面向业务的测试：验收测试、探索性测试（可用性测试、我如何破坏系统功能）。对于微服务，要尽可能扩大自动化测试范围。</p><p>2. 测试范围</p><p>Mike Cohn的《Scrum敏捷软件开发》提出了测试金字塔，底层是单元测试，中间是服务测试，上层是用户界面测试（这里称为端到端测试）。</p><p>单元测试。通常只测试一个函数和方法调用，面向技术而不是业务，能快速反馈功能是否正常，对代码重构非常重要。</p><p>服务测试。绕开用户界面，直接对服务进行测试。需要给所有外部合作者打桩。</p><p>端到端测试。模仿用户使用的测试。</p><p>权衡。三种测试在测试范围、运行时间、反馈周期、定位范围都不同，要为不同目的选择不同测试来覆盖。</p><p>比例。好的经验：下面一层的测试的数量要比上面一层的多一个数量级。</p><p>3. 实现服务测试</p><p>mock还是打桩。打桩，是指为被测服务的请求创建一些有着预设响应的打桩服务。mock，与打桩相比，mock还会进一步验证请求本身是否被正确调用，需要创建更智能的合作者。但过度使用mock会让测试变得脆弱。关于二者的权衡，可以参考弗里曼和普雷斯的书《测试驱动的面向对象软件开发》。</p><p>智能的打桩服务。Mountebank是一个打桩/mock服务器，可以避免很多重复工作。</p><p>4. 端到端测试</p><p>让多个流水线扇入到一个独立的端到端测试的阶段。也就是各个服务有自己的构建、单元测试和服务测试，但没有自己的端到端测试，所有服务都共享最后的端到端测试。</p><p>5. 端到端测试的缺点。有很多缺点（详见下面章节）。</p><p>6. 脆弱的测试</p><p>端到端测试由于依赖太多的因素，比如其它服务、网络等等，很可能出现失败时并不是由被测的那个服务所导致的。这就导致测试变得脆弱。Martin Fowler建议当出现脆弱测试时，如果不能立即修复，就将其从测试套件中移除。另外，还可以尝试用小范围测试替代脆弱测试。</p><p>谁来写这些测试。测试由所有人来写，会导致测试用例爆炸，测试失败后，都认为是别人的问题。由专门的团队来写，开发人员远离测试代码，周期变长，并且难以理解和修复测试中的问题。好的平衡在于共享端到端测试套件的代码权，对测试套件联合负责。</p><p>测试多长时间。很多端到端测试时间很长，有的要一天，有的甚至六个星期。并行测试工具如Selenium Grid可以缓解该问题。但重要的在于权衡哪些测试需要哪些可以抛弃。这很困难。</p><p>大量的堆积。测试周期长导致部署等待时间长，部署次数少，代码变更就会不断累积。因此要尽可能频繁地发布小范围的修改。</p><p>元版本。不要追求一起部署服务，以及使用相同的版本号，这会导致失去服务单独部署的能力，并且导致服务之间的耦合。</p><p>7. 测试场景，而不是故事</p><p>针对少量的核心场景进行端到端测试，避免针对庞大规模服务的端到端测试。但更好的方法可能是下面的CDC测试。</p><p>8. 拯救消费者驱动的测试</p><p>CDC(Consumer-Driven Contract)消费者驱动的契约，可以不需要使用真正的消费者也能确保新的部署不会破坏给消费者的服务。CDC测试的层次与服务测试的层次一样，都在金字塔中间，但其更侧重消费者如何使用服务。</p><p>Pact。Pact是一个开源的消费者驱动的测试工具，Ruby语言开发，支持JVM和.NET版本。Pacto是另外一个工具，名字很相近。</p><p>关于沟通。CDC需要消费者和生产服务之间有良好的沟通。</p><p>9. 还应该使用端到端测试吗</p><p>CDC可以替代端到端测试，但在语义监控进行生产系统监控时，还是会用到端到端测试。端到端测试可以在你需要的时候使用，比如尚未构建好CDC测试，完成后可以减少。</p><p>10. 部署后再测试</p><p>区分部署和上线。部署在生产环境，在真正负载之前进行测试，有助于发现特定环境的问题。还可以使用蓝/绿部署，部署两份软件，但只有一个接受真正的请求。蓝/绿部署需要能够切换生产流量到不同的主机，需要提供足够多的主机支持两个版本部署。蓝/绿部署甚至可以做到零宕机部署。</p><p>金丝雀发布。金丝雀发布是指通过将部分生产流量引流到新部署的系统，来验证系统执行情况。与蓝/绿发布不同的是，新旧版本共存的时间更长，而且经常会调整流量。</p><p>平均修复时间（MTTR）胜过平均故障间隔时间（MTBF）。要好好考虑如何监控以及从故障中恢复过来，而不仅仅是考虑充分的测试。</p><p>11. 跨功能的测试</p><p>跨功能需求（Cross-Functional Requirement, CFR）比非功能需求更好地涵盖了一个事实：这些系统行为仅仅是许多横切工作融合的结果。跨功能需求包括数据的持久性、服务的可用性、吞吐量和服务可接受的延迟等方面。CFR测试也是金字塔分层的。建议尽早去看CFR，并定期审查。</p><p>性能测试。微服务使得跨网络边界的次数增多，因此追踪延迟的根源很重要。需要一个类似生产的数据量，更多的机器。性能测试运行时间长，每次构建的时候运行性能测试并不可行。可以每天运行一个子集，每周运行一个更大的集合。还是要尽可能频繁。</p><p>12. 小结</p><p>使用不同类型测试，反馈要迅速；尽量使用CDC测试来替代端到端测试；使用CDC测试提供团队之间的对话要点；在努力测试与更快地在生产环境中发现并修复问题之间找到平衡。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29004992", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（六）部署", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>第六章 部署</h2><p>1. 持续集成（CI）。好处：能够得到关于代码质量的某种程度的快速反馈；自动生成二进制文件；代码在版本控制之下，需要的话可以重新生成某个版本的构建物；可以从部署的构建物回溯到对应版本的代码；有些CI工具可以使运行过的测试可视化。</p><p>是否真正理解CI的三个问题：你是否每天签入代码到主线？你是否有一组测试来验证修改？当构建失败后，团队是否把修复CI当作第一优先级的事情来做？</p><p>2. 把持续集成映射到微服务</p><p>微服务、CI构建、源代码三者的关系如何？分步骤开始：a. 所有代码在一个代码库、只有一个CI构建，生成多个微服务。缺点：修改某服务的一行代码，所有服务代码都需要重新构建和验证，浪费时间和资源，更会导致不知道哪些构建物要重新部署。b. 还是一个代码库，但是多个CI分别映射代码库的不同部分。优点：简化检出/检入流程。缺点：会觉得同时提交多个服务修改很简单，做出将多个服务耦合在一起的修改。c. 每个微服务都有自己的代码库和CI，微服务相关的测试应该和其本身的代码放在一起。优点：修改某个微服务后可以快速验证，修改代码只需要做该微服务的构建和测试，代码库与团队的匹配度更高。</p><p>3. 构建流水线和持续交付</p><p>流水线第一阶段运行快速测试，第二阶段运行耗时测试。在某个阶段失败，能够快速反馈，不用进行后面阶段的测试，节省时间。越接近后面阶段，越能在生产环境下工作。持续交付（CD）检查每次提交是否达到了部署到生产环境的要求，并持续反馈信息。一个示例流水线的几个阶段：编译及快速测试、耗时测试、用户验收测试、性能测试、生产环境。不要对CI工具扩展来做CD，会导致复杂化，要使用为CD设计的工具。</p><p>如果在团队初始阶段，没有很好识别出服务边界，可以将所有代码放在一个库中，所有服务放在一个构建，减轻跨服务修改所带来的代价。</p><p>4. 平台特定的构建物</p><p>各语言有自己的构建物类型和构建工具，Ruby有gem，Java有JAR包或WAR包，Python有egg。对微服务部署来说，还需要一些其它工具。Ruby和Python需要运行在Apache或Nginx中的进程管理器。为了部署和启动，需要Puppet、Chef和Ansible这样的自动化配置管理工具，它们支持多种技术栈（编程语言）的构建物。</p><p>5. 操作系统构建物</p><p>可以使用操作系统支持的构建物来取代不同技术栈的构建物避免部署的复杂性。Redhat或CentOS使用RPM，Ubuntu使用deb包，Windows使用MSI。优点：不用考虑底层技术，使用内置工具即可完成软件安装。有些OS包管理器可以完成Chef或Puppet的工作。缺点：刚开始写构建脚本会比较困难。Linux下的FPM包管理器功能比较完善，Windows的MSI原生打包系统差了不少，NuGet好一些，Chocolatey NuGet提供的功能和Linux上的很接近了。另外，如果多种操作系统部署，代价也就高了。</p><p>6. 定制化镜像</p><p>使用自动化配置管理工具，安装环境仍然耗时耗力。一种方法是创建虚拟机镜像，其中包含常用的依赖。优点：减少装环境的时间，缺点：构建镜像花时间长，镜像文件大，例如20GB。构建不同镜像工具链不同，AWS AMI、Vagrant镜像、Rackspace镜像。Packer可以简化创建过程，可以支持多种镜像。</p><p>将镜像作为构建物。不仅将环境部署在镜像中，将服务也部署进去。</p><p>不可变服务器。部署完成后，如果有人登录上去对机器做一些修改，可能导致实际配置与源代码中的配置不一致，导致配置漂移。可以在镜像创建过程中禁止SSH，确保没人能登录修改。</p><p>7. 环境。要重视测试环境和生产环境的差异性，要在测试环境尽可能接近生产环境和消耗的人力物力之间做出权衡。</p><p>8. 服务配置。服务配置的工作量应该很小，仅仅局限于环境间的不同之处。如果配置修改了服务很多基本行为，或者环境之间配置差异很大，有可能在某个环境中出现特定问题。如何处理不同环境之间的配置差异：a. 每个环境创建一个构建物，配置内建于构建物中。但这样对于测试环境生成的构建物是无法保证在生产环境能正常运行的。b. 更好的方法是只创建一个构建物，将配置单独管理。可以用专用系统来提供配置。</p><p>9. 服务与主机之间的 映射</p><p>一个主机可以运行多少服务？这里的主机（host）是指运行独立操作系统的隔离单元。没有虚拟化的话，一个主机对应的是一台物理机，采用虚拟化的话，对应的就是一个虚拟机。</p><p>单主机多服务。优点：管理主机工作量小，硬件成本低，简化开发人员工作。缺点：监控服务占用资源困难，服务之间互相影响，单一服务负载过高可能影响其它服务正常运行；服务部署困难，每个服务可能依赖不同的环境；不利于团队自治，可能需要独立团队来管理主机配置，增加协调工作；限制部署构建物的选择；增加单个服务进行扩展的复杂性，每个服务对于主机的需求未必一致。</p><p>应用程序容器。可以利用IIS的.NET应用程序部署或基于servlet容器的Java应用程序部署，将不同的服务放在同一个容器中，再把容器放在单台主机。优点：简化了管理，对多实例提供集群支持、监控等；节省语言运行时开销，因为多个服务泡在一个JVM上了。缺点：限制了技术栈的使用；其在内存中共享会话状态的方式对于微服务来说应该避免，限制了服务伸缩性；容器启动时间很长；在类似于JVM的平台上，多个应用程序处在一个进程中，分析资源使用和生命周期管理都很困难。建议：对应技术栈的自包含的微服务构建物。如.NET中的Nancy。以及Jetty嵌入式容器中就包含了非常轻量级的HTTP服务器。这样能够保证伸缩性。</p><p>每个主机一个服务。优点：避免了单主机多服务的很多问题，简化了监控和错误恢复；减少潜在的单点故障；对某一服务扩展容易；支持不同部署方式如镜像部署或不可变服务器。缺点：管理服务器工作量增加。</p><p>平台即服务（PaaS）。PaaS的工作层次比单个主机高，往往依赖于特定技术的构建物，如Java WAR包或Ruby gem等。优点：还能帮助自动配置运行，有的能透明地进行系统伸缩管理。Heroku是一个很好的PaaS平台，能管理服务并以简单的方式提供数据库等服务。缺点：出问题时解决起来较困难。越想根据应用程序使用情况来自动收缩，越难以做好。平台尽量满足的是通用需求，对于应用的特定需求，往往难以满足。</p><p>10. 自动化</p><p>软件部署、服务监控、进程查看和日志收集等工作在服务规模大的时候，应该靠自动化来解决。理想情况，开发人员使用的工具链要和部署生产环境时使用的完全一样，这样能及早发现问题。自动化能显著提高微服务的开发和部署效率。</p><p>11. 从物理机到虚拟机</p><p>管理大量主机的关键之一是，找到一些方法把物理机划分成小块。</p><p>传统的虚拟化技术。标准的虚拟化技术包括AWS、VMWare、VSphere、Xen和KVM，其架构从底层到最上层是：机器、内核、主机操作系统、hypervisor、虚拟机（又包括内核、操作系统和应用）。其中的虚拟机可以安装不同的操作系统，可被认为完全封闭的机器。Hypervisor会占用CPU、I/O和内存等资源，开的虚拟机越多，hypervisor占用的资源就越多。因此，物理机切分的越来越小的时候，收益也越小。</p><p>Vagrant。是一个部署平台，通常在开发和测试环境使用，而非生产环境。能帮助在本地机器上轻松创建类生产环境，可以同时创建多个VM，通过关闭几个测试故障模式。缺点：开发机上会有更多的资源消耗。</p><p>Linux容器。Linux容器可以创建一个隔离的进程空间，进而在这个空间中运行其他的进程。最流行的是LXC。其架构从底层到最上层是：机器、内核、主机操作系统、容器（包含操作系统和应用）。容器运行的操作系统必须要和主机操作系统相同的内核。没有了hypervisor，启动速度更快。相同硬件上能比VM运行更多的数量的容器，资源利用更高效。容器也能很好地在虚拟机上工作。缺点：需要花费工作让外界看到一台主机上的不同容器，并讲外部请求路由到容器。容器的隔离性没有VM好，某些容器进程可能会跳出容器，与其它容器进程或底层系统发生干扰。</p><p>Docker。构建在容器上的平台，进行容器管理，可以创建和部署应用。可以在Vagrant中启动单个VM，其中运行多个Docker实例，每个实例包含一个服务。这样在单机上开发和测试更便捷和省资源。CoreOS是专为Docker设计的操作系统，占用资源更少。Google的开源工具Kubernetes和CoreOS集群能进行跨集群的Docker管理和调度。有个工具Deis（<a href=\"https://link.zhihu.com/?target=http%3A//deis.io/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">deis.io/</span><span class=\"invisible\"></span></a>），试图像Heroku那样在Docker上提供PaaS。</p><p>12. 一个部署接口</p><p>参数化的命令行调用是触发任何部署的最合理的方式。需要包含微服务名字、版本和要部署的环境。Python库Fabric可以讲命令行调用映射到函数，也提供类似SSH的机制控制远程机器。Ruby可以用Capistrano，Windows可以用PowerShell。</p><p>环境定义。对微服务配置，完成微服务到计算、网络和存储资源之间的映射。可用YAML文件描述。例子中配置的资源包括：开发和生产环境下不同的节点名称、资源大小、凭证（credential），服务以及节点个数；微服务中定义了运行的Puppet文件名称、连接属性（tcp，端口号，允许范围）。构建定义系统工作量很大，Hashicorp有个工具Terraform可以帮助做这些事情。</p><p>13. 小结。服务要能够独立于其它服务部署。每个服务放到单独的主机/容器中。自动化一切。推荐Jez Humble和David Farley的《持续交付》。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28987052", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（五）分解单块系统", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第五章 分解单块系统</h2><p>1. 关键是接缝。Michael Feathers在《修改代码的艺术》一书中定义了接缝的概念。从接缝处可以抽取出相对独立的一部分代码，对这部分代码进行修改不会影响系统的其他部分。接缝即边界，前面说的限界上下文就是一个比较好的接缝。</p><p>2. 分解MusicCorp。MusicCorp是书中举的一个例子。根据业务识别出高层限界上下文。创建包结构表示这些上下文，把对应的代码挪过去。分析包之间的依赖关系，要和组织架构相匹配。使代码围绕接缝组织起来。</p><p>3. 分解单块系统的 原因。要考虑分解的速度、团队结构、安全审计、某些特殊技术实现的功能单独形成一个服务等因素。</p><p>4. 杂乱的依赖。</p><p>要使拉出来的接缝尽量少被其他组件依赖。</p><p>5. 数据库。不要用数据库集成。找到数据库中的接缝，分离出来。</p><p>6. 找到问题的关键。把数据库映射相关的代码和功能代码放在同一个上下文，根据业务来组织。另外，数据库表和表之间有约束，可以通过工具来可视化这些约束，如SchemaSpy(<a href=\"https://link.zhihu.com/?target=http%3A//schemaspy.sourceforge.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://schemaspy.sourceforge.net</a>)。</p><p>7. 例子：打破外键关系。将对属于其它上下文的表的访问转变为对其服务的访问，放弃外键关联，如果需要可以将约束从数据库转移到代码。</p><p>8. 例子：共享静态数据。像国家代码这种存在数据库的情况，可以用三种方法解决：每个包复制一份该表；这些共享静态数据放入代码（如属性文件或一个枚举），比数据库修改简单；静态数据放入一个单独的服务（有些极端）。推荐第二种。</p><p>9. 例子：共享数据。共享数据可以创建一个单独的包，提供该共享数据的服务。业务概念显性化了。</p><p>10. 例子：共享表。不同上下文的共享表按上下文实际需要的信息分开。</p><p>11. 重构数据库。数据库分离操作具体可参见Scott J. Ambler和Pramod J. Sadalage编写的Refactoring Databases。推荐先分离数据库，别先着急分离服务，观察一下效果，再考虑是否分离服务。</p><p>12. 事物边界。使用单块表结构，可以通过事务来保证多个操作的全部完成或全部回退。但按服务分表之后，无法使用事务来提供保证了。那应该怎么办呢？</p><p>再试一次。可以把操作放在队列或日志中，之后再尝试触发。最终一致性。</p><p>终止整个操作。通过补偿事务来抵消之前的操作，可能还需要重试补偿事务。</p><p>分布式事务。手动编排补偿事务会比较难，可以采用分布式事务，使用事务管理器来统一编配。处理分布式事务常用算法：两阶段提交。投票，根据投票结果实施。不要自己实现，尽量使用现有实现。</p><p>应该怎么办呢。上述方法会增加复杂性。要考虑是否一定要一致性，还是最终一致性就能满足业务需求。最终一致性的系统构建和扩展都更容易。如果一定要一致性，可以显式创建一个概念来表示这个服务，这样更容易实现补偿事务等操作。</p><p>13. 报告。存储分离后，需要考虑报告会出现的问题。</p><p>14. 报告数据库。报告需要获得各个部分的数据生出输出。在单块系统中，数据在一个数据库中，报告所需要的数据容易获得。</p><p>15. 通过服务调用来获取数据。依赖API调用获取数据只适合简单报告系统。使用SQL接口的问题在于不同的微服务暴露的API不一定能够很好适用于报告场景。缓存能够加快访问速度，但也会有无法命中的情况。可以通过提供批量API来简化过程，批量请求变为一个资源，处理好后通过共享文件给调用系统获取，减少HTTP开销。不过作者认为应该有更简单的方式。</p><p>16. 数据导出。使用一个独立的程序直接访问其他服务使用的数据库，把这些数据库导出到单独的报告数据库。虽然该程序成为了一个数据库集成程序，违反了低耦合原则，但它使得报告很简单，因此可以接受。可以通过维护团队负责将服务数据库的数据导出到报告系统数据库，缓解耦合性。也可以通过数据库技术，如使用视图创建一个聚合，使得对于报告系统来说看到的是单块数据表，但修改数据库时会增加复杂性。还是建议数据导出方式。</p><p>17. 事件数据导出。对于服务发出的事件可以通过事件订阅器导入到报告数据库中，比周期导入更及时，而且能够将服务内部实现和报告系统解耦。缺点是所需要的信息都要以事件形式广播出去，数据量大时，不容易像数据导出那样在数据库级别进行扩展。</p><p>18. 数据导出的备份。Netflix使用Cassandra作为数据备份的标准方式，开源了Aegisthus项目（一个能够处理大量数据的流水线）。</p><p>19. 走向实时。可以考虑将不同的数据按需路由到不同地方。</p><p>20. 修改的代价。做小的、增量的修改。可以用白板便于思考。可以用CRC（类-职责-交互）卡片帮助设计。</p><p>21. 理解根本原因。服务一定会慢慢变大，大到需要拆分。要及时发现需要拆分的时机。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28986734", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（四）集成", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第四章 集成</h2><p>1. 寻找理想的集成技术</p><p>避免破坏性修改。例如，响应增加字段不影响服务方。</p><p>保证API技术的无关性。微服务之间通信方式的技术无关性很重要。</p><p>使你的服务易于消费方使用。利于消费方使用任何技术来用你的服务。</p><p>隐藏内部实现细节。暴露内部实现会导致消费方去耦合内部实现，因此当修改内部实现时造成消费方不必要的修改。不要采用倾向于暴露内部细节的技术。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 为用户创建接口</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 共享数据库。基于表的共享，会使得服务消费者看到内部实现，无法实现隐藏内部细节。另外，服务实现绑定了数据库技术，导致服务消费者也必须要使用同样的数据库，无法带来技术开放性。因此，避免使用共享数据库。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 同步与异步</p><p>同步通信的协作风格是请求/响应式，异步通信的风格是基于事件。适合用异步通信的场景：运行时间长的任务、低延时的任务、移动网络及设备。基于事件的系统依赖于接收事件的系统自己判断该做什么，其协作逻辑是分布在不同的协作者中，因此耦合度低。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 编排与协同</p><p>编排，依赖于某个中心来驱动流程。而协同依靠各个部分主动协作共同完成。编排的好处在于系统实现简单，便于追踪问题。缺点是中心控制节点承担太多职责，其它服务沦为CRUD贫血服务。协同的优点在于能消除耦合。缺点是需要额外工作来监控流程，增加系统复杂度。另外，如果想用请求/相应风格的语义，又想避免耗时业务时的长等待，可以采用异步请求加回调的方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6. 远程过程调用</p><p>远程过程调用（RPC）种类很多，一些依赖于接口定义（SOAP、Thrift、protocol buffers等），容易生成客户端和服务端的桩代码，用户可以快速编程。但其代价大于快速启动的好处。</p><p>技术的耦合。Java RMI，双方必须使用Java。Thrift和protocol buffers支持不同语言，一定程度上减轻了该问题。有时候RPC技术对于互操作性有一定的限制。</p><p>本地调用和远程调用并不相同。RPC面临网络的不确定性，还要进行载荷消息的封装和解封装。用户在使用时需要额外考虑网络带来的问题，而当作本地调用时又会带来考虑不全的问题。在进行RPC调用的错误处理时，显然要麻烦的多。</p><p>脆弱性。以Java RMI为例，接口修改就要导致桩代码的修改。</p><p>RPC很糟糕吗。尽量避免使用RMI，转为使用现代的RPC如protocol buffers或者Thrift。使用RPC时，不要对远程调用过度抽象，以至于网络因素都被隐藏了；确保可以独立升级服务端接口而不用客户端强制升级；在客户端中不要隐藏是在做网络调用这个事实。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7. REST</p><p>REST使得资源在服务内和在服务对外提供的形式可以不一样，解耦了。建议看Richardson的成熟度模型（<a href=\"https://link.zhihu.com/?target=http%3A//martinfowler.com/articles/richardsonMaturityModel.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">martinfowler.com/articl</span><span class=\"invisible\">es/richardsonMaturityModel.html</span><span class=\"ellipsis\"></span></a>）。 REST没有规定底层协议，常用的是HTTP，也可以使用其它协议如串口或USB。HTTP上实现REST简单。</p><p>REST和HTTP。REST声明了一组对资源的使用方法，HTTP中有方法能与其对应。HTTP有很多支撑工具和技术。比如Varnish是HTTP缓存代理，mod_proxy是负载均衡器，还有大量HTTP监控工具，还有安全认证机制和工具。</p><p>超媒体作为程序状态的引擎。超媒体是一块包含了其它内容链接的内容。客户端与服务端应该通过超媒体进行交互。通过超媒体可以隐藏服务端内部的更改，将客户端与服务端解耦。该方式的缺点是客户端和服务端之间通信次数较多。但还是建议客户端自行发现遍历和发现API，因为这样可以解耦，不要过早优化。</p><p>JSON、XML和其他。JSON简单，内容更紧凑，比XML流行。但XML中有超链接来进行超媒体控制，JSON中没有，于是JSON有不同的自定义方式，如HAL标准。XML工具有更好支撑，提取负载特定部分可以使用XPATH工具，挺多，CSS选择器也可以用。JSON可以使用JSONPATH。</p><p>留心过多的约定。有些工具使用RESTFul Web服务框架把内部存储暴露给消费者，并不好。</p><p>基于HTTP的REST的缺点。无法像RPC一样帮助生成客户端代码。不要回到基于HTTP进行RPC的老路去构建共享库。另外，性能上的问题：基于HTTP的REST支持多种格式，如JSON或二进制，比SOAP强，但没法和Thrift这样的二进制协议比。对于低延迟通信或较小尺寸的消息不是一个好选择。不支持高级的序列化和反序列化。建议阅读《REST实战》这本书。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8. 实现基于事件的异步协作方式</p><p>技术选择。需要考虑微服务发布事件机制和消费者接收事件机制。RabbitMQ这样的消息代理可以解决上述问题，是个好选择。但尽量让这种消息中间件简单，逻辑放在自己的服务中，企业级服务总线是个不好的反例。在HTTP上，有ATOM这个符合REST规范的协议，可以用来提供资源聚合的发布服务。但是有消息中间件的话，还是建议使用消息中间件。</p><p>异步架构的复杂性。事件驱动的异步系统耦合度低，伸缩性好，但需要程序员转换思维模式，而且复杂性更高。要考虑各个流程有很好的监督，并考虑使用关联ID，它可以对跨进程请求进行追踪。强烈推荐《企业集成模式》这本书。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9. 服务即状态机。要把关键领域的生命周期显式地用状态机建模出来，避免出现贫血服务。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>10. 响应式扩展（Reactive extensions, Rx）。它提供了一种机制，可以把多个调用结果组装起来并在此基础上执行操作。调用本身可以是阻塞或非阻塞的。当需要做一些基于多个服务调用的操作时，可以尝试它，它让代码更加简单。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>11. 微服务世界中的DRY和代码重用的危险。Don’t Repeat Yourself，DRY可以得到重用性比较好的代码，可以创建一个共享库。但这在微服务中会导致服务和消费者之间过度耦合。在微服务内部不要违反DRY，在跨服务的情况下可以适当违反DRY。</p><p>客户端库。客户端库可以对服务开发进行一些封装，提升开发效率，避免重复的与服务交互的代码。但当开发服务端API和客户端API是同一拨人时，存在将服务逻辑引入客户端的问题，带来了耦合性的问题。如果要使用客户端，让它只处理底层传输协议（服务发现、故障处理等），不要加入服务逻辑。另外，客户端库可能会限制不同技术的使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>12. 按引用访问。如果对访问的资源有本地缓存，要考虑资源的过期失效问题，确保同时有一个指向原始资源的引用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>13. 版本管理</p><p>尽可能推迟。避免过早将客户端与服务端紧密绑定。客户端要尽可能灵活消费服务响应，这符合Postel法则（系统中的每个模块都应该“宽进严出”）。例如客户端可以使用XPath从服务响应中提取需要的字段，即使字段位置改变也能正确读取（容错性读取器）。</p><p>及早发现破坏性修改。建议使用消费者驱动的契约来及早定位对消费者产生的破坏性修改。</p><p>使用语义化的版本管理。语义化版本管理使得客户端仅通过查看版本号就能知道是否能与之集成。版本好：MAJOR.MINOR.PATCH。MAJOR改变意味着包含向后不兼容的修改，客户端就不能直接集成。MINOR变化意味着新功能增加，向后兼容，客户端可以直接集成。PATCH变化意味着功能缺陷修复。</p><p>不同的接口共存。接口不可避免要修改时，保留老接口，提供新接口，二者共存。给消费者时间将老接口替换为新接口的使用，然后再删除老接口。另外，可以通过将老接口的请求转换为新接口的调用。不同版本共存时，可以在请求信息中增加版本标识，也可以在URI中增加版本标识。</p><p>同时使用多个版本的服务。为了支持老用户，有时候会使用多个版本的服务共存（注意，这里不是指服务接口，而是指服务本身）。短期内合理，但更应该考虑一个服务暴露两套API，而不是两个服务共存。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>14. 用户界面</p><p>走向数字化。通过微服务的不同组合为桌面应用、移动端设备、可穿戴设备提供不同的体验。</p><p>约束。不同平台（桌面端、移动端）有不同的约束，屏幕解析度、通信方式、带宽、电池电量、UI操作。</p><p>API组合。 不同平台的API可以使用API入口（gateway），多个底层的调用会被聚合成一个调用。</p><p>UI片段的组合。相比UI主动访问所有API，再同步状态到UI控件上，更好的方法可能是服务直接暴露一部分UI，然后将这些组合到一起形成整体UI。可使用服务端模板的技术将这些片段组装起来。优势是修改服务的同时可以维护这些UI片段。</p><p>为前端服务的后端。服务端的聚合接口或API入口不要太厚重，要分成不同的后端，每个后端只为一个应用或用户界面服务（BFF， Backends for Frontends）。</p><p>一种混合方式。片段组装、BFF等可以权衡混合使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>15. 与第三方软件集成。</p><p>使用一些商业的第三方软件会有如下问题：</p><p>缺乏控制。只有软件的厂家才能控制其发展和进行技术决策。</p><p>定制化。定制化很昂贵。</p><p>意大利面式的集成。一团乱麻的服务集成。</p><p>推荐的集成方式：</p><p>在自己可控的平台进行定制化。推荐这么做，可以使用自己的服务包住第三方的服务。</p><p>绞杀者模式（Strangler Application Pattern, <a href=\"https://link.zhihu.com/?target=http%3A//martinfowler.com/bliki/StranglerApplication.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">martinfowler.com/bliki/</span><span class=\"invisible\">StranglerApplication.html</span><span class=\"ellipsis\"></span></a>），拦截对老系统的调用，把调用路由到现存的遗留代码还是新写的代码，然后逐步替换老系统。一般使用一系列的微服务来拦截，而不是单一的单块应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28985222", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记(三)如何建模服务", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第三章 如何建模服务</h2><p>好的服务是松耦合和高内聚的。这两个词在很多地方都用到了，那么在微服务中分别指什么呢？松耦合指的是服务之间耦合度低，修改一个服务不用导致另一个服务跟着修改。高内聚指的是服务内部，相关的行为都聚集在一个服务里，而不是分散在不同服务中，这样需要修改一个行为时，只要修改一个微服务即可。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>限界上下文（bounded context）来自Eric Evans的《领域驱动设计》一书，用来对现实世界领域进行建模。作者比较认同的对该词比较好的定义是“一个由显式边界限定的特定职责”。显示边界是外部与它交互的必经之路。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>要能找到限界上下文之间的共享模型，其内部和外部的表现形式往往是不一样的。应该共享特定的模型，而不是共享表示，从而避免紧耦合。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>单块系统中的模块可以较好地转化为微服务。不要过早地划分微服务，要等到服务边界清晰以后再进行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对微服务建模时，要首先考虑其业务功能，再考虑其数据。如果只考虑数据，则常常建模为CRUD这种贫血服务。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>根据业务边界，结合组织结构，由粗粒度到细粒度地逐步划分限界上下文。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28984945", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 0, 
            "title": "《微服务设计》阅读笔记（二）演化式架构师", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第二章 演化式架构师</h2><p>软件行业中的架构师和建筑行业中的建筑师在英文中都是architect一词，架构师这个概念应该也是从建筑业借用过来的，但两个角色不能简单类比。建筑师面临的物理规律和需求都是确定性的，而软件的架构师没有坚实的物理规律可以依靠，更要面对可能不断变化的需求，因此想要依靠设计大量图表和文档创建一个如同卢浮宫金字塔一样完美的软件系统方案，是难以奏效的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>与其比作建筑师，比作城市规划师可能会贴切一些。城市规划师规划城市中不同区域的功能（生活区、工业区、办公区等），而并不去对单个楼做规划设计。城市会不断变化和改造，但大部分时候区域功能是不变的。同样，架构师应对用户的需求变更， 应该是做一个允许变化的计划，而不是对未来的变化进行预测，因为对未来的预测常常会失败。要允许变化，就不能做出过于详尽的设计。架构师不仅要考虑终端用户，也要将开发人员和运维人员作为系统的用户，他们也是参与者。Frank Buschmann说：架构师的职责之一就是保证该系统适合开发人员在其上工作。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984905\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(一)微服务</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28984905", 
            "userName": "BrianZhang", 
            "userLink": "https://www.zhihu.com/people/23501b51cf2c1496a9126294690f761f", 
            "upvote": 1, 
            "title": "《微服务设计》阅读笔记(一)微服务", 
            "content": "<p>《微服务设计》，Building Microservices，作者Sam Newman，译者崔力强、张骏，人民邮电出版社，2016年。</p><p>笔记中有些内容直接引用原书。</p><p>================================================================</p><h2>第一章 微服务</h2><p>微服务强调内聚性，根据Robert C. Martin对单一职责的论述：“把因相同原因而变化的东西放在一起，而把因不同原因而变化的东西分离开来”强调了内聚性。</p><p>微服务是独立的服务，并且根据业务边界来确定服务的边界。注意，这里强调的是服务边界，而不是技术边界。传统的如N层架构，MVC架构都是基于技术边界来划分，这种分法看来是不适合划分微服务的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>微服务强调微，微即是小，多小的代码量能称为微服务。按澳大利亚RealEstate.com.au的John Eaves认为，一个微服务应该可以在两周内完全重写。作者给出的回答太含糊：“足够小即可，不要过小。”相比之下，前者的定义更好度量。后者的定义颇为主观。另外，一个微服务对应一个小团队，团队大的话就说明微服务不够微。这又归结到团队大小的度量问题，那么团队多少人算大，多少人算小呢。有一个两个Pizza的论断。一个小团队点的外卖应该两个Pizza就够了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>微服务的自治性。确保微服务的隔离性：</p><p>1. 服务之间只通过网络通信。这样能够使得服务可以独立修改，不会因为修改一个服务内部的实现而导致另外的服务不可用或跟着修改（这里指的是修改内部实现，而不是对外部接口的修改）。</p><p>2. 服务对外提供的API形式保持技术独立性。这是为了不限制其它服务的实现技术，如编程语言，操作系统等，无需与服务提供方的实现保持一致。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>微服务带来的益处：</p><p>1. 技术异构性。根据微服务所对应的业务选择技术，而不必受限于其依赖的服务所实现的技术。容易保持系统中的异构架构。而且由于架构的异构性，并且服务的修改或重构对其它服务没有影响（在保证服务接口不变的情况下），因此可以对其中的一个或部分服务尝试新技术。</p><p>当然，异构架构和新技术的尝试都是有限制的，无节制的过多的使用太多不同的技术会带来更多的复杂性。过多的操作系统种类，过多的语言，过多的运行环境与应用框架等等。</p><p>2. 弹性。这里的弹性指的是单点故障不会导致整个系统故障。单块系统中某组件故障后，很容易导致级联故障，从而使得系统不可用，解决方法可以通过多个机器节点上同时部署相同实例避免单点故障。而微服务本身就是通过网络隔离，不会像在一个机器中的单块系统那样产生连锁反应。由于微服务在每次进行外部调用时，应该会自然地考虑到外部服务不可用的情况处理。而单块系统中API调用时则很难对每次调用考虑周全，并且经常会引发级联故障。</p><p>3. 扩展。微服务对单块系统进行了切分，使得可以对相应的瓶颈微服务进行多实例部署来扩展，而不必整个单块系统扩展。对整个单块系统的扩展显然要比只对其中的一部分进行扩展要消耗更多的机器资源，因为好钢并不是全部用在刀刃上。</p><p>4. 简化部署。由于微服务功能单一，隔离性好，更改后部署如果出现问题很容易定位，也容易快速回滚。单块系统中牵一发动全身，害怕局部改动对全局产生重大负面影响，因此部署需要做足充分的准备工作。</p><p>5. 与组织结构相匹配。分布式的大团队由于沟通、组织等问题，没有小团队的效率高。因此微服务的设计理念和小团队的理念很匹配，可以提高生产率和质量。</p><p>6. 可组合性。单块系统由于内部耦合比微服务之间耦合紧密的多，因此想通过组合内部功能完成其它系统功能，比微服务的组合性要差很多。</p><p>7. 对可替代性的优化。单块系统想要重写以改进性能，比微服务改写某个服务提升性能要复杂困难许多。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>面向服务架构（SOA，Service-Oriented Architecture）是一种方法，在现实中实施并不好。面临通信协议选择，服务粒度确定，第三方中间件选择等问题。可以把微服务架构认为是SOA的一种特定方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其它分解技术还有共享库和模块，</p><p>1. 共享库：要使用共享库必须得选择相同的实现语言或者至少在同一个平台，丧失了技术独立性。如果是静态库，则每次静态库发生变化，使用的软件又需要重新编译和部署，影响关联颇大。而且，由于进程内调用API，使得级联故障发生的可能性大增。当然，共享库即使在微服务中，也是有生存空间的。例如，很多不同领域的业务都使用该功能，就可以将该功能作为共享库给各个微服务使用。</p><p>2. 模块：一些语言提供了模块分解技术如Erlang，它的模块化能力非常牛，支持对模块进行停止、重启或热升级等。但你只能使用Erlang，并且也存在故障级联的问题。语言之外就是OSGI（Open Source Gateway Initiative）了，它过于强调模块生命周期管理了，而生命周期管理在实际项目中用处并不大。而且，一个进程内也导致模块耦合度太高。OSGI带来的复杂度远大于带来的好处。</p><p>微服务不是银弹，它天然是分布式系统架构，因此会伴随着分布式系统的复杂性。需要考虑部署、测试、监控、扩展、保持弹性、分布式事务、CAP问题等等。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/28984945\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（二）演化式架构师</a><a href=\"https://zhuanlan.zhihu.com/p/28985222\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记(三)如何建模服务</a><a href=\"https://zhuanlan.zhihu.com/p/28986734\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（四）集成</a><a href=\"https://zhuanlan.zhihu.com/p/28987052\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（五）分解单块系统</a><a href=\"https://zhuanlan.zhihu.com/p/29004992\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（六）部署</a><a href=\"https://zhuanlan.zhihu.com/p/29005056\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（七）测试</a><a href=\"https://zhuanlan.zhihu.com/p/29006932\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（八） 监控</a><a href=\"https://zhuanlan.zhihu.com/p/29006983\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（九）安全</a><a href=\"https://zhuanlan.zhihu.com/p/29007156\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十）康威定律和系统设计</a><a href=\"https://zhuanlan.zhihu.com/p/29007387\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十一）规模化微服务</a><a href=\"https://zhuanlan.zhihu.com/p/29007566\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f02c325bd416510e0236cde7732cbb08_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\"internal\">BrianZhang：《微服务设计》阅读笔记（十二完结篇）总结</a><a href=\"https://zhuanlan.zhihu.com/c_124178933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-aa27c19a4a515684a3e8c5f4391e6325_ipico.jpg\" data-image-width=\"1080\" data-image-height=\"1080\" class=\"internal\">软件开发之路</a><p></p>", 
            "topic": [
                {
                    "tag": "微服务架构", 
                    "tagLink": "https://api.zhihu.com/topics/20023491"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_124178933"
}
