{
    "title": "鸽子的学习笔记", 
    "description": "只是一个个人的总结，供自己翻阅，以及和大家分享交流。肯定会有理解偏差和认识错误，希望高手可以指正", 
    "followers": [
        "https://www.zhihu.com/people/xuan-wo-ming-ren-19-77", 
        "https://www.zhihu.com/people/jiu-xiang-lai-kan-kan-5", 
        "https://www.zhihu.com/people/zhang-rui-83-97", 
        "https://www.zhihu.com/people/xu-wen-zhi-96", 
        "https://www.zhihu.com/people/yuning-huang", 
        "https://www.zhihu.com/people/dai-xin-wei-91", 
        "https://www.zhihu.com/people/chang-shi-yao", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/yan-wu-87-82", 
        "https://www.zhihu.com/people/zi-fei-yu-76-10", 
        "https://www.zhihu.com/people/qi-long-31", 
        "https://www.zhihu.com/people/constvar", 
        "https://www.zhihu.com/people/sha-mo-zhi-hu-99-83", 
        "https://www.zhihu.com/people/xyz-hh", 
        "https://www.zhihu.com/people/mao-chen-rui-53", 
        "https://www.zhihu.com/people/li-ming-89-5", 
        "https://www.zhihu.com/people/haha-wing", 
        "https://www.zhihu.com/people/li-zhi-78-3-97", 
        "https://www.zhihu.com/people/zhang-zheng-47-54", 
        "https://www.zhihu.com/people/xiao-ping-zi-42-69", 
        "https://www.zhihu.com/people/stephen-34-51", 
        "https://www.zhihu.com/people/zhou-peng-21-71", 
        "https://www.zhihu.com/people/donewell", 
        "https://www.zhihu.com/people/zi-shan-57-15", 
        "https://www.zhihu.com/people/johnny-63-54", 
        "https://www.zhihu.com/people/xuan-qiong-gao-shang-di", 
        "https://www.zhihu.com/people/yildhd-wang", 
        "https://www.zhihu.com/people/julietbai-26", 
        "https://www.zhihu.com/people/jimgreen-66", 
        "https://www.zhihu.com/people/bai-shi-jie-5", 
        "https://www.zhihu.com/people/Optimistic_Graph", 
        "https://www.zhihu.com/people/wang-song-37-72", 
        "https://www.zhihu.com/people/gua-zong-29", 
        "https://www.zhihu.com/people/beck-83-55", 
        "https://www.zhihu.com/people/ssp1152453877", 
        "https://www.zhihu.com/people/xue-zha-bi-xu-si", 
        "https://www.zhihu.com/people/mo-ran-er-yi", 
        "https://www.zhihu.com/people/ysgc", 
        "https://www.zhihu.com/people/rice-lyn", 
        "https://www.zhihu.com/people/wang-cong-1-22", 
        "https://www.zhihu.com/people/xiao-bai-79-61-4", 
        "https://www.zhihu.com/people/yang-zhen-nan-96", 
        "https://www.zhihu.com/people/hai-lan-xin", 
        "https://www.zhihu.com/people/wu-meng-60-86", 
        "https://www.zhihu.com/people/gogo-74-91", 
        "https://www.zhihu.com/people/dong-yu-long-37", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/he-ye-52", 
        "https://www.zhihu.com/people/xiao-nian-xiang-57", 
        "https://www.zhihu.com/people/he-li-73-1-40", 
        "https://www.zhihu.com/people/guange", 
        "https://www.zhihu.com/people/meng-xiang-37-7", 
        "https://www.zhihu.com/people/ikara-tasi", 
        "https://www.zhihu.com/people/xiao-liu-82-1", 
        "https://www.zhihu.com/people/yang-gang-69-84", 
        "https://www.zhihu.com/people/chen-chao-bo"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/38714396", 
            "userName": "精神病鸽", 
            "userLink": "https://www.zhihu.com/people/0553e2eb3994031d95dbbc620005bc6e", 
            "upvote": 3, 
            "title": "【OpenCV实例笔记】特征检测", 
            "content": "<p><b>写在前面：</b>理论的东西不多说，主要是做一一个实例的小笔记。</p><p><b>操作环境：</b>Ubuntu 16.04, OpenCV 3.2，C++</p><hr/><h2><b>定义</b></h2><blockquote><b>特征检测（feature detection）</b>是图像处理和计算机视觉里的一个概念。它指的是使用计算机提取图像信息，决定每个图像的点是否属于一个图像特征。特征检测的结果是把图像上的点分为不同的子集，这些子集往往属于孤立的点、连续的曲线或者连续的区域。（摘自Wikipedia）</blockquote><h2><b>分类</b></h2><ul><li>边缘检测</li></ul><p>边缘指组成两个图像区域之间边界（或边缘）的像素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-266ea342f26ec3e99ea31a39fa1599b8_b.jpg\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image\" width=\"387\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;387&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image lazy\" width=\"387\" data-actualsrc=\"https://pic1.zhimg.com/v2-266ea342f26ec3e99ea31a39fa1599b8_b.jpg\"/><figcaption>橘子的边缘</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>角检测</li></ul><p>角指图像中点似的特征，在局部它有两维结构。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_b.jpg\"/><figcaption>齿轮的角点</figcaption></figure><ul><li>区域检测</li></ul><p>与角不同的是区域描写一个图像中的一个区域性的结构，但是区域也可能仅由一个像素组成，因此许多区域检测也可以用来监测角。</p><p><b>*</b>区域检测可以被想象为把一张图像缩小，然后在缩小的图像上进行角检测。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>脊检测</li></ul><p>长条形的物体被称为脊。在实践中脊可以被看作是代表对称轴的一维曲线，此外局部针对于每个脊像素有一个脊宽度。从灰梯度图像中提取脊要比提取边缘、角和区域困难。在空中摄影中往往使用脊检测来分辨道路，在医学图像中它被用来分辨血管。</p><hr/><p>今天主要介绍的实例是<b>Harris角点检测，Canny边缘检测，Hough变换（直线和圆的检测）</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>1. Harris角点检测</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cdcb23c22a1f6eebb5e8039361976281_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-cdcb23c22a1f6eebb5e8039361976281_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-cdcb23c22a1f6eebb5e8039361976281_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cdcb23c22a1f6eebb5e8039361976281_b.jpg\"/></figure><p>源码（C++）：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#define _CRT_SECURE_NO_WARNINGS\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;opencv2/opencv.hpp&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">win_src</span> <span class=\"o\">=</span> <span class=\"s\">&#34;src&#34;</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">win_dst</span> <span class=\"o\">=</span> <span class=\"s\">&#34;dst&#34;</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"n\">img_src</span> <span class=\"o\">=</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s\">&#34;./01-01.jpg&#34;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"n\">img_gray</span><span class=\"p\">,</span> <span class=\"n\">img_dst</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">img_src</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;error&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">//彩图转灰度图\n</span><span class=\"c1\"></span>  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">img_src</span><span class=\"p\">,</span> <span class=\"n\">img_gray</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">);</span>\n  <span class=\"n\">img_src</span><span class=\"p\">.</span><span class=\"n\">copyTo</span><span class=\"p\">(</span><span class=\"n\">img_dst</span><span class=\"p\">);</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Point2f</span><span class=\"o\">&gt;</span> <span class=\"n\">corners</span><span class=\"p\">;</span>\n  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">goodFeaturesToTrack</span><span class=\"p\">(</span><span class=\"n\">img_gray</span><span class=\"p\">,</span> <span class=\"n\">corners</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">corners</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">circle</span><span class=\"p\">(</span><span class=\"n\">img_dst</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">corners</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">corners</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 生成界面窗口\n</span><span class=\"c1\"></span>  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">namedWindow</span><span class=\"p\">(</span><span class=\"n\">win_src</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">WINDOW_AUTOSIZE</span><span class=\"p\">);</span>\n  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">namedWindow</span><span class=\"p\">(</span><span class=\"n\">win_dst</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">WINDOW_AUTOSIZE</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// 显示图片\n</span><span class=\"c1\"></span>  <span class=\"c1\">//原图\n</span><span class=\"c1\"></span>  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">win_src</span><span class=\"p\">,</span> <span class=\"n\">img_src</span><span class=\"p\">);</span>\n  <span class=\"c1\">//角点图\n</span><span class=\"c1\"></span>  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">win_dst</span><span class=\"p\">,</span> <span class=\"n\">img_dst</span><span class=\"p\">);</span>\n\n  <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-19987ccbc9c3dd700ee5fd8b89f29ed4_b.jpg\"/></figure><p>这里用到一个OpenCV的函数：  </p><div class=\"highlight\"><pre><code class=\"language-text\">void cv::goodFeaturesToTrack(\n         InputArray image,                   /* 输入矩阵，8位浮动点数 */\n         OutputArray corners,                /* 输出矩阵，检测出的角点的矢量 */\n         int maxCorners,                     /* 检测角点的最大数的允许值 */\n         double qualityLevel,                /* 角点检测的最低质量允许值 */\n         double minDistance                  /* 检测出的角点间最小欧式距离的允许值 */\n);</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2. Canny边缘检测</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9d2a8f262ef5765355ec8de9f46dfefe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-9d2a8f262ef5765355ec8de9f46dfefe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-9d2a8f262ef5765355ec8de9f46dfefe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9d2a8f262ef5765355ec8de9f46dfefe_b.jpg\"/></figure><p>源码（C++）：</p><div class=\"highlight\"><pre><code class=\"language-text\">#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;opencv2/opencv.hpp&gt;\nstd::string win_src = &#34;src&#34;;\nstd::string win_dst = &#34;dst&#34;;\n\nint main()\n{\n  cv::Mat img_src = cv::imread(&#34;./01-02.jpg&#34;, 1);\n  cv::Mat img_gray, img_dst;\n\n  if (!img_src.data) {\n    std::cout &lt;&lt; &#34;error&#34; &lt;&lt; std::endl;\n    return -1;\n  }\n\n  //彩图转灰度图\n  cv::cvtColor(img_src, img_gray, cv::COLOR_BGR2GRAY);\n\n  // Canny边缘检测法\n  cv::Canny(img_gray, img_dst, 350, 1000);\n\n  // 生成界面窗口\n  cv::namedWindow(win_src, cv::WINDOW_AUTOSIZE);\n  cv::namedWindow(win_dst, cv::WINDOW_AUTOSIZE);\n\n  // 显示图片\n  cv::imshow(win_src, img_src);\n  cv::imshow(win_dst, img_dst);\n\n  cv::waitKey(0);\n\n  return 0;\n}</code></pre></div><p>运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-47f96167f65ccda856e8ccb5ed435da1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-47f96167f65ccda856e8ccb5ed435da1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-47f96167f65ccda856e8ccb5ed435da1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-47f96167f65ccda856e8ccb5ed435da1_b.jpg\"/></figure><p>这里用到一个OpenCV的函数：  </p><div class=\"highlight\"><pre><code class=\"language-text\">void cv::Canny(\n         InputArray image,                   /* 输入矩阵，8位浮动点数，单通道 */\n         OutputArray edges,                  /* 输出矩阵，检测出的边缘，8为浮动点数，单通道 */\n         double threshold,                   /* Hysteresis参数1 */\n         double threshold                    /* Hysteresis参数2 */\n);</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>3. Hough变化（直线检测）</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-92ffe1358bbd61bb4cc184c33386243c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-92ffe1358bbd61bb4cc184c33386243c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;438&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-92ffe1358bbd61bb4cc184c33386243c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-92ffe1358bbd61bb4cc184c33386243c_b.jpg\"/></figure><p>源码（C++）：</p><div class=\"highlight\"><pre><code class=\"language-text\">#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;opencv2/opencv.hpp&gt;\nstd::string win_src = &#34;src&#34;;\nstd::string win_edge = &#34;edge&#34;;\nstd::string win_dst = &#34;dst&#34;;\n\nint main()\n{\n  cv::Mat img_src = cv::imread(&#34;./01-03.jpg&#34;, 1);\n  cv::Mat img_gray, img_edge, img_dst;\n\n  if (!img_src.data) {\n    std::cout &lt;&lt; &#34;error&#34; &lt;&lt; std::endl;\n    return -1;\n  }\n  img_src.copyTo(img_dst);\n  cv::cvtColor(img_src, img_gray, cv::COLOR_BGR2GRAY);\n\n  cv::Canny(img_gray, img_edge, 200, 200);\n\n  std::vector&lt;cv::Vec2f&gt; lines;\n  // Hough变换检测直线\n  cv::HoughLines(img_edge, lines, 1, CV_PI / 180, 120);\n\n  for (int i = 0; i &lt; lines.size(); i++) {\n    double rho = lines[i][0], theta = lines[i][1];\n    double a = cos(theta), b = sin(theta);\n    double x0 = a*rho, y0 = b*rho;\n    cv::line(img_dst,\n      cv::Point(x0 - img_dst.cols*b, y0 + img_dst.cols*a),\n      cv::Point(x0 + img_dst.cols*b, y0 - img_dst.cols*a),\n      cv::Scalar(0, 0, 255), 2, cv::LINE_AA);\n  }\n\n  cv::namedWindow(win_src, cv::WINDOW_AUTOSIZE);\n  cv::namedWindow(win_dst, cv::WINDOW_AUTOSIZE);\n\n  cv::imshow(win_src, img_src);\n  cv::imshow(win_edge, img_edge);\n  cv::imshow(win_dst, img_dst);\n\n  cv::waitKey(0);\n\n  return 0;\n}</code></pre></div><p>运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-13a3f1da55fac66004fcc7af3f659b40_b.jpg\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-13a3f1da55fac66004fcc7af3f659b40_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;438&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-13a3f1da55fac66004fcc7af3f659b40_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-13a3f1da55fac66004fcc7af3f659b40_b.jpg\"/><figcaption>Canny边缘检测</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b04babd5050df58bdee0e50d5e691c8c_b.jpg\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-b04babd5050df58bdee0e50d5e691c8c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;438&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-b04babd5050df58bdee0e50d5e691c8c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b04babd5050df58bdee0e50d5e691c8c_b.jpg\"/><figcaption>Hough直线检测</figcaption></figure><p>这里用到一个OpenCV的函数：  </p><div class=\"highlight\"><pre><code class=\"language-text\">void cv::HoughLines(\n         InputArray image,                   /* 输入矩阵，8位浮动点数，单通道，二值图像 */\n         OutputArray lines,                  /* 输出矩阵，检测出的直线 */\n         double rho,                         /* 像素距离 */\n         double theta                        /* 弧度制角度 */\n         double threshold                    /* 累加平面的阈值参数，大于阈值threshold的线段\n                                                才可以被检测通过并返回到结果中。 */\n);</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>4. Hough变化（圆形检测）</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-015d35b49e8283b36f227317e906c03d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image\" width=\"387\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;387&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image lazy\" width=\"387\" data-actualsrc=\"https://pic2.zhimg.com/v2-015d35b49e8283b36f227317e906c03d_b.jpg\"/></figure><p>源码（C++）：</p><div class=\"highlight\"><pre><code class=\"language-text\">#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;opencv2/opencv.hpp&gt;\nstd::string win_src = &#34;src&#34;;\nstd::string win_edge = &#34;edge&#34;;\nstd::string win_dst = &#34;dst&#34;;\n\nint main()\n{\n  cv::Mat img_src = cv::imread(&#34;./01-04.jpg&#34;, 1);\n  cv::Mat img_gray, img_edge, img_dst;\n\n  if (!img_src.data) {\n    std::cout &lt;&lt; &#34;error&#34; &lt;&lt; std::endl;\n    return -1;\n  }\n\n  img_src.copyTo(img_dst);\n\n  cv::cvtColor(img_src, img_gray, cv::COLOR_BGR2GRAY);\n\n  cv::Canny(img_gray, img_edge, 80, 120);\n\n  std::vector&lt;cv::Vec3f&gt; circles;\n  cv::HoughCircles(img_edge, circles, cv::HOUGH_GRADIENT, 50, 100);\n\n  for (int i = 0; i &lt; circles.size(); i++) {\n    cv::Point center((int)circles[i][0], (int)circles[i][1]);\n    int radius = (int)circles[i][2];\n    cv::circle(img_dst, center, radius, cv::Scalar(0, 0, 255), 3);\n  }\n\n  cv::namedWindow(win_src, cv::WINDOW_AUTOSIZE);\n  cv::namedWindow(win_dst, cv::WINDOW_AUTOSIZE);\n\n  cv::imshow(win_src, img_src);\n  cv::imshow(win_edge, img_edge);\n  cv::imshow(win_dst, img_dst);\n\n  cv::waitKey(0);\n\n  return 0;\n}</code></pre></div><p>运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-266ea342f26ec3e99ea31a39fa1599b8_b.jpg\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image\" width=\"387\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;387&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image lazy\" width=\"387\" data-actualsrc=\"https://pic1.zhimg.com/v2-266ea342f26ec3e99ea31a39fa1599b8_b.jpg\"/><figcaption>Canny边缘检测</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-64c2cffdea045ef9dfa35c50afa7cb07_b.jpg\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image\" width=\"387\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;387&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"387\" data-rawheight=\"251\" class=\"content_image lazy\" width=\"387\" data-actualsrc=\"https://pic4.zhimg.com/v2-64c2cffdea045ef9dfa35c50afa7cb07_b.jpg\"/><figcaption>Hough圆形检测（网上找的图不是很好，效果不是很明显）</figcaption></figure><p>这里用到一个OpenCV的函数：  </p><div class=\"highlight\"><pre><code class=\"language-text\">void cv::HoughCircles(\n         InputArray image,                 /* 输入矩阵，8位浮动点数，单通道，二值图像 */\n         OutputArray circles,              /* 输出矩阵，用(x, y, radius)来表示 */\n         double method,                    /* 检测方法，现在OpenCV中只有霍夫梯度法（HOUGH_GRADIENT） */\n         double dp                         /* 累加器分辨率相对于图像分辨率的比率 */\n         double minDist                    /* 检测出的圆心之间的最小距离 */\n);</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }, 
                {
                    "tag": "图像处理", 
                    "tagLink": "https://api.zhihu.com/topics/19556376"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": [
                {
                    "userName": "萌新乔ban", 
                    "userLink": "https://www.zhihu.com/people/be85909e43fa3fc8a8a730b373e1fbb1", 
                    "content": "harris算法我按书上敲，结果说不认识什么cornersHarris函数，还有其他好多问题。用你这个代码，一copy就出结果了，好赞！", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36949260", 
            "userName": "精神病鸽", 
            "userLink": "https://www.zhihu.com/people/0553e2eb3994031d95dbbc620005bc6e", 
            "upvote": 0, 
            "title": "【Ubuntu命令】个人笔记(持续更新)", 
            "content": "<p><b>操作环境：</b><a href=\"https://link.zhihu.com/?target=http%3A//releases.ubuntu.com/16.04/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ubuntu 16.04</a></p><hr/><h2><b>1.Ubuntu软件安装方法</b></h2><h2>(1)apt安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">apt-get install &lt;packagename&gt;               #正常安装\napt-get -f install &lt;packagename&gt;            #修复\napt-get –reinstall install &lt;packagename&gt;    #重新安装</code></pre></div><h2>(2)DPKG安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">dpkg -i &lt;packagename&gt;.deb           #安装</code></pre></div><p>DPKG由Debian社区开发，Ubuntu、B2D等发行版都使用该软件管理器，用于软件的安装、更新及移除等。</p><div class=\"highlight\"><pre><code class=\"language-text\">dpkg -i &lt;packagename&gt;.deb             #安装包\ndpkg -r &lt;packagename&gt;                 #删除包\ndpkg -P &lt;packagename&gt;                 #删除包（包括配置文件）\ndpkg -L &lt;packagename&gt;                 #列出与该包关联的文件\ndpkg -l &lt;packagename&gt;                 #显示该包的版本\ndpkg --unpack &lt;packagename&gt;.deb       #解开deb包的内容\ndpkg -S keyword                       #搜索所属的包内容\ndpkg -l                               #列出当前已安装的包\ndpkg -c &lt;packagename&gt;.deb             #列出deb包的内容\ndpkg --configure &lt;packagename&gt;        #配置包\ndpkg --help                           #查看帮助</code></pre></div><h2>(3)Source code安装</h2><p>这是个习惯问题，也是鸽子所在研究室的Linux管理问题,为了便于统一管理，下载下来的源码压缩包将统一安装到一个目录下。</p><h2>I. 解压缩源码压缩包</h2><p>假设解压位置为</p><div class=\"highlight\"><pre><code class=\"language-text\">$ /home/&lt;username&gt;</code></pre></div><h2>II. 复制解压后的源码包到root下的tmp文件夹位置</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ cp -r /home/&lt;username&gt;/&lt;packagename&gt; /tmp/</code></pre></div><h2>III. 安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">cd /tmp/&lt;packagename&gt;     #转到 tmp/&lt;packagename&gt;位置下\nmkdir build               #创建一个&#34;build&#34;文件夹，目的是为了管理编译后的中间文件\ncd build                  #转到build文件夹下\ncmake ..                  #分析配置安装包\nmake                      #编译,即安装</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2.Ubuntu软件卸载方法</b></h2><h2>(1)apt卸载</h2><div class=\"highlight\"><pre><code class=\"language-text\">apt-get remove &lt;packagename&gt;             #卸载程序但保留配置文件\n\napt-get –purge remove &lt;packagename&gt;      #卸载程序及所有配置文件</code></pre></div><h2>(2)DPKG卸载</h2><div class=\"highlight\"><pre><code class=\"language-text\">dpkg -r &lt;packagename&gt;     #卸载程序但保留配置文件\n\ndpkg -P &lt;packagename&gt;     #卸载程序及所有配置文件</code></pre></div><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "Ubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19557067"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36772345", 
            "userName": "精神病鸽", 
            "userLink": "https://www.zhihu.com/people/0553e2eb3994031d95dbbc620005bc6e", 
            "upvote": 7, 
            "title": "【Eigen】从入门到放弃（二）：矩阵&向量的运算", 
            "content": "<p><b>Eigen官方教程：</b><a href=\"https://link.zhihu.com/?target=http%3A//eigen.tuxfamily.org/index.php%3Ftitle%3DMain_Page\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Eigen (Main Page)</a></p><p><b>操作环境：</b><a href=\"https://link.zhihu.com/?target=http%3A//releases.ubuntu.com/16.04/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ubuntu 16.04</a></p><hr/><p>在<a href=\"https://zhuanlan.zhihu.com/p/36706885\" class=\"internal\">【Eigen】从入门到放弃（一）：Eigen是个什么鬼？</a>，鸽粗略做了一个Eigen非常浅薄的入门知识笔记。接下来这篇将做下矩阵和向量的运算问题相关的笔记。</p><h2>1.简单的四则运算</h2><p><b>（1）加减法</b></p><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Matrix2d</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n  <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n       <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">MatrixXd</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n       <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;a + b =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//矩阵加法\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;a - b =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//矩阵减法\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Doing a += b;&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"n\">b</span><span class=\"p\">;</span><span class=\"c1\">//a = a + b，同时重新赋值a\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Now a =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">Vector3d</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n  <span class=\"n\">Vector3d</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;-v + w - v =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">-</span> <span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//向量加减法\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p><b>II. 运行结果</b></p><div class=\"highlight\"><pre><code class=\"language-text\">a + b =\n3 5\n4 8\na - b =\n-1 -1\n 2  0\nDoing a += b;\nNow a =\n3 5\n4 8\n-v + w - v =\n-1\n-4\n-6</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>（2）数乘</b></p><p>*在3中介绍“矩阵-矩阵乘法”和“矩阵-向量乘法”</p><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Matrix2d</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n  <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n       <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">Vector3d</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;a * 2.5 =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"mf\">2.5</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//矩阵数乘\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;0.1 * v =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//向量数乘\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Doing v *= 2;&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">v</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"c1\">//向量数乘，从新赋值v\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Now v =</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b>II. 运行结果</b></p><div class=\"highlight\"><pre><code class=\"language-text\">a * 2.5 =\n2.5   5\n7.5  10\n0.1 * v =\n0.1\n0.2\n0.3\nDoing v *= 2;\nNow v =\n2\n4\n6</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>2.<b>转置矩阵</b>(<img src=\"https://www.zhihu.com/equation?tex=A%5ET\" alt=\"A^T\" eeimg=\"1\"/> )<b>，共轭矩阵</b>( <img src=\"https://www.zhihu.com/equation?tex=%5Coverline%7BA%7D\" alt=\"\\overline{A}\" eeimg=\"1\"/> 或 <img src=\"https://www.zhihu.com/equation?tex=A%5EH\" alt=\"A^H\" eeimg=\"1\"/> )<b>，逆矩阵</b>( <img src=\"https://www.zhihu.com/equation?tex=A%5E%7B-1%7D\" alt=\"A^{-1}\" eeimg=\"1\"/> )</h2><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">MatrixXcf</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">MatrixXcf</span><span class=\"o\">::</span><span class=\"n\">Random</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"c1\">//定义2-by-2随机矩阵\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is the matrix a</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//矩阵a\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is the matrix a^T</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//a的转置\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is the matrix a^H</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">conjugate</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//a的共轭\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is the matrix a^{-1}</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">inverse</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//a的逆\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p><b>II. 运行结果</b></p><div class=\"highlight\"><pre><code class=\"language-text\">Here is the matrix a\n(-0.211234,0.680375) (-0.604897,0.823295)\n  (0.59688,0.566198) (0.536459,-0.329554)\nHere is the matrix a^T\n(-0.211234,0.680375)   (0.59688,0.566198)\n(-0.604897,0.823295) (0.536459,-0.329554)\nHere is the matrix a^H\n(-0.211234,-0.680375) (-0.604897,-0.823295)\n  (0.59688,-0.566198)   (0.536459,0.329554)\nHere is the matrix a^{-1}\n (0.425416,-0.480856)  (0.345496,-0.982836)\n(-0.750469,-0.375009) (-0.0039331,0.726466)</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>2.矩阵&amp;向量乘法</h2><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Matrix2d</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n  <span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n         <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">Vector2d</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m*m:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//矩阵-矩阵\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m*u:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"n\">u</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//矩阵-向量\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is u^T*m:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//向量-矩阵\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is u^T*v:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//向量-向量\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is u*v^T:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">u</span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//向量-向量\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Let&#39;s multiply m by itself&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"n\">m</span><span class=\"p\">;</span><span class=\"c1\">//矩阵-矩阵\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Now m is:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b>II. 运行结果</b></p><div class=\"highlight\"><pre><code class=\"language-text\">Here is m*m:\n 7 10\n15 22\nHere is m*u:\n1\n1\nHere is u^T*m:\n2 2\nHere is u^T*v:\n-2\nHere is u*v^T:\n-2 -0\n 2  0\nLet&#39;s multiply m by itself\nNow m is:\n 7 10\n15 22</code></pre></div><h2><br/>3.点乘&amp;叉乘</h2><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;iostream&gt;\n#include &lt;Eigen/Dense&gt;\nusing namespace std;\nusing namespace Eigen;\nint main()\n{\n  Vector3d v(1,2,3);\n  Vector3d w(0,1,2);\n  cout &lt;&lt; &#34;Dot product: &#34; &lt;&lt; v.dot(w) &lt;&lt; endl;//向量点乘\n  cout &lt;&lt; &#34;Cross product:\\n&#34; &lt;&lt; v.cross(w) &lt;&lt; endl;//向量叉乘\n}</code></pre></div><p><b>II. 运行结果</b></p><div class=\"highlight\"><pre><code class=\"language-text\">Dot product: 8\nCross product:\n 1\n-2\n 1</code></pre></div><h2><br/>4.其他</h2><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Matrix3d</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n  <span class=\"n\">m</span>   <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n         <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n\t <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.determinant():   &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">determinant</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">// 行列式\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.sum():           &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//所有元素之和\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.prod():          &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">prod</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//所有元素之积\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.mean():          &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//元素的平均数\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.minCoeff():      &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">minCoeff</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//最小元素\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.maxCoeff():      &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">maxCoeff</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//最大元素\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;Here is m.trace():         &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">trace</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//迹\n</span><span class=\"c1\">//&#34;&#34;里的空格可以让输出结果对齐\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p><b>II. 运行结果</b></p><div class=\"highlight\"><pre><code class=\"language-text\">Here is m.determinant():   4\nHere is m.sum():           16\nHere is m.prod():          0\nHere is m.mean():          1.77778\nHere is m.minCoeff():      0\nHere is m.maxCoeff():      4\nHere is m.trace():         7</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "矩阵运算", 
                    "tagLink": "https://api.zhihu.com/topics/19598145"
                }, 
                {
                    "tag": "Eigen", 
                    "tagLink": "https://api.zhihu.com/topics/20088198"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": [
                {
                    "userName": "songshiping", 
                    "userLink": "https://www.zhihu.com/people/846fd19734061a3dcc82fcf0632a84d0", 
                    "content": "<p>非常精悍、加油</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "精神病鸽", 
                            "userLink": "https://www.zhihu.com/people/0553e2eb3994031d95dbbc620005bc6e", 
                            "content": "<p>谢谢啊，互相学习</p>", 
                            "likes": 0, 
                            "replyToAuthor": "songshiping"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36706885", 
            "userName": "精神病鸽", 
            "userLink": "https://www.zhihu.com/people/0553e2eb3994031d95dbbc620005bc6e", 
            "upvote": 22, 
            "title": "【Eigen】从入门到放弃（一）：Eigen是个什么鬼？", 
            "content": "<p><b>Eigen官方教程：</b><a href=\"https://link.zhihu.com/?target=http%3A//eigen.tuxfamily.org/index.php%3Ftitle%3DMain_Page\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Eigen (Main Page)</a></p><p><b>操作环境：</b><a href=\"https://link.zhihu.com/?target=http%3A//releases.ubuntu.com/16.04/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ubuntu 16.04</a></p><hr/><h2>1.什么是Eigen？</h2><p>    Eigen 是C++语言里的一个开源模版库，支持线性代数运算，矩阵和矢量运算，数值分析及其相关的算法。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>2.如何安装Eigen？</h2><p>终端apt命令安装</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo apt-get install libeigen3-dev</code></pre></div><p>     Eigen只包含头文件，因此它不需要实现编译（只需要使用#include），指定好Eigen的头文件路径，编译项目即可。</p><p>    Eigen头文件的默认安装位置是：“/usr/include/eigen3”.</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>3.Eigen库的模块及其头文件</h2><p>    为了应对不同的需求，Eigen库被分为多个功能模块，每个模块都有自己相对应的头文件，以供调用。 其中，Dense模块整合了绝大部分的模块，而Eigen模块更是整合了所有模块（也就是整个Eigen库）。</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bc%7Cc%7Cc%7D+%5Ctext%7B%E6%A8%A1%E7%89%88%7D+%26+%5Ctext%7B%E5%A4%B4%E6%96%87%E4%BB%B6%7D%26%5Ctext%7B%E5%8A%9F%E8%83%BD%7D+%5C%5C+%5Chline+Core+%26+%5C%23include%3CEigen%2FCore%3E%26Matrix%E5%92%8CArray%E7%B1%BB%EF%BC%8C%E5%9F%BA%E7%A1%80%E7%9A%84%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E8%BF%90%E7%AE%97%E5%92%8C%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C+%5C%5C+Geometry+%26+%5C%23include%3CEigen%2FGeometry%3E+%26%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%812D%E5%92%8C3D%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%98%E6%8D%A2+%5C%5C+LU+%26+%5C%23include%3CEigen%2FLU%3E%26%E6%B1%82%E9%80%86%EF%BC%8C%E8%A1%8C%E5%88%97%E5%BC%8F%EF%BC%8CLU%E5%88%86%E8%A7%A3+%5C%5C+Cholesky+%26+%5C%23include%3CEigen%2FCholesky+%3E%26LLT%E5%92%8CLDLT+Cholesky%E5%88%86%E8%A7%A3+%5C%5C+Householder+%26+%5C%23include%3CEigen%2FHouseholder%3E%26%E8%B1%AA%E6%96%AF%E9%9C%8D%E5%B0%94%E5%BE%B7%E5%8F%98%E6%8D%A2%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E8%BF%90%E7%AE%97%5C%5C+SVD+%26+%5C%23include%3CEigen%2FSVD+%3E%26SVD%E5%88%86%E8%A7%A3%5C%5C+QR+%26+%5C%23include%3CEigen%2FQR+%3E%26QR%E5%88%86%E8%A7%A3%5C%5C+Eigenvalues+%26+%5C%23include%3CEigen%2FEigenvalues+%3E%26%E7%89%B9%E5%BE%81%E5%80%BC%EF%BC%8C%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F%E5%88%86%E8%A7%A3+%5C%5C+Sparse+%26+%5C%23include%3CEigen%2FSparse+%3E%26%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97+%5C%5C+Dense%26+%5C%23include%3CEigen%2FDense%3E%26%E5%8C%85%E5%90%AB%E4%BA%86Core%2FGeometry%2FLU%2FCholesky%2FSVD%2FQR%2FEigenvalues%E6%A8%A1%E5%9D%97+%5C%5C+Eigen%26+%5C%23include%3CEigen%2FEigen+%3E%26%E5%8C%85%E6%8B%ACDense%E5%92%8CSparse%28%E6%95%B4%E4%B8%AAEigen%E5%BA%93%29+%5C%5C+%5Cend%7Barray%7D%5C%5C\" alt=\"\\begin{array}{c|c|c} \\text{模版} &amp; \\text{头文件}&amp;\\text{功能} \\\\ \\hline Core &amp; \\#include&lt;Eigen/Core&gt;&amp;Matrix和Array类，基础的线性代数运算和数组操作 \\\\ Geometry &amp; \\#include&lt;Eigen/Geometry&gt; &amp;旋转、平移、缩放、2D和3D的各种变换 \\\\ LU &amp; \\#include&lt;Eigen/LU&gt;&amp;求逆，行列式，LU分解 \\\\ Cholesky &amp; \\#include&lt;Eigen/Cholesky &gt;&amp;LLT和LDLT Cholesky分解 \\\\ Householder &amp; \\#include&lt;Eigen/Householder&gt;&amp;豪斯霍尔德变换，用于线性代数运算\\\\ SVD &amp; \\#include&lt;Eigen/SVD &gt;&amp;SVD分解\\\\ QR &amp; \\#include&lt;Eigen/QR &gt;&amp;QR分解\\\\ Eigenvalues &amp; \\#include&lt;Eigen/Eigenvalues &gt;&amp;特征值，特征向量分解 \\\\ Sparse &amp; \\#include&lt;Eigen/Sparse &gt;&amp;稀疏矩阵的存储和一些基本的线性运算 \\\\ Dense&amp; \\#include&lt;Eigen/Dense&gt;&amp;包含了Core/Geometry/LU/Cholesky/SVD/QR/Eigenvalues模块 \\\\ Eigen&amp; \\#include&lt;Eigen/Eigen &gt;&amp;包括Dense和Sparse(整个Eigen库) \\\\ \\end{array}\\\\\" eeimg=\"1\"/> </p><h2>4.建立矩阵</h2><p><b>（1）例1</b></p><p><b>I. 创建C++文本</b></p><div class=\"highlight\"><pre><code class=\"language-text\">$ mkdir eigen_tutorials \n$ cd ~/eigen_tutorials\n$ gedit e1.cpp</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>II. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"n\">Eigen</span><span class=\"o\">::</span><span class=\"n\">MatrixXd</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">MatrixXd</span> <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"c1\">//MatrixXd表示是任意尺寸的矩阵ixj, m(2,2)代表一个2x2的方块矩阵\n</span><span class=\"c1\"></span>  <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"c1\">//代表矩阵元素a11\n</span><span class=\"c1\"></span>  <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mf\">2.5</span><span class=\"p\">;</span><span class=\"c1\">//a21\n</span><span class=\"c1\"></span>  <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"c1\">//a12\n</span><span class=\"c1\"></span>  <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"c1\">//a22=a21+a12\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"c1\">//输出矩阵m\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>III. 编译</b></p><div class=\"highlight\"><pre><code class=\"language-text\">$ g++ e1.cpp -I /usr/include/eigen3/ -o e1\n//“-o”是给编译好的执行文件起名为“e1.out”，否则生成的执行文件默认名为“a.out”</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>IV. 运行</b></p><div class=\"highlight\"><pre><code class=\"language-text\">$ ./e1</code></pre></div><p>    输出结果：</p><div class=\"highlight\"><pre><code class=\"language-text\">3  -1\n2.5 1.5</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>（2）例2</b></p><p><b>I. 编写程序</b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">MatrixXd</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MatrixXd</span><span class=\"o\">::</span><span class=\"n\">Random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"c1\">//定义3x3的随机矩阵m，各元素取值范围是[-1，1]\n</span><span class=\"c1\"></span>  <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">MatrixXd</span><span class=\"o\">::</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mf\">1.2</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mi\">50</span><span class=\"p\">;</span>\n<span class=\"c1\">//&#34;MatrixXd::Constant(3,3,1.2)&#34;定义各元素为1.2的3-by-3常数矩阵，m的取值范围变为[10，110]\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;m =&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">VectorXd</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"c1\">//定义维度为3的列向量v\n</span><span class=\"c1\"></span>  <span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"c1\">//赋值于v\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;m * v =&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b>II. 运行</b></p><div class=\"highlight\"><pre><code class=\"language-text\">m =\n94   89.8 43.5\n49.4 101  86.8\n88.3 29.8 37.8\nm * v =\n404\n512\n261</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>（3）例3</b></p><p>例3的运行结果与例2相同，只是在定义矩阵方面语法稍微有所不同</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;Eigen/Dense&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">Eigen</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Matrix3d</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Matrix3d</span><span class=\"o\">::</span><span class=\"n\">Random</span><span class=\"p\">();</span><span class=\"c1\">//&#34;Matrix3d&#34;直接定义了一个3-by-3的方块矩阵\n</span><span class=\"c1\"></span>  <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">Matrix3d</span><span class=\"o\">::</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mi\">50</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;m =&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">Vector3d</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">);</span> <span class=\"c1\">//&#34;Vector3d&#34;直接定义了一个维度为3的列向量\n</span><span class=\"c1\"></span>  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;m * v =&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }, 
                {
                    "tag": "Eigen", 
                    "tagLink": "https://api.zhihu.com/topics/20088198"
                }, 
                {
                    "tag": "矩阵运算", 
                    "tagLink": "https://api.zhihu.com/topics/19598145"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/pigeonnote"
}
