{
    "title": "Dubbo入门", 
    "description": "Dubbo边学边记", 
    "followers": [
        "https://www.zhihu.com/people/muyl", 
        "https://www.zhihu.com/people/wen-bu-sheng-59-10", 
        "https://www.zhihu.com/people/kong-tao-99-91", 
        "https://www.zhihu.com/people/zhou-xian-sen-53-6", 
        "https://www.zhihu.com/people/wang-hou-yu-sheng-1-17", 
        "https://www.zhihu.com/people/xiao-hong-55-97", 
        "https://www.zhihu.com/people/shi-jian-de-jiao-yin-42", 
        "https://www.zhihu.com/people/zhang-da-wei-49-97", 
        "https://www.zhihu.com/people/yang-mu-yang-94", 
        "https://www.zhihu.com/people/kidxt", 
        "https://www.zhihu.com/people/liudong-53-4", 
        "https://www.zhihu.com/people/xiao-kai-79-24", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/xi-te-le-86-77", 
        "https://www.zhihu.com/people/er-dong-chen-30", 
        "https://www.zhihu.com/people/zhao-chen-73-77", 
        "https://www.zhihu.com/people/wang-shi-hui-uestc", 
        "https://www.zhihu.com/people/song-ke-ru", 
        "https://www.zhihu.com/people/gong-sun-xuan-yuan-2601", 
        "https://www.zhihu.com/people/liu-lang-64", 
        "https://www.zhihu.com/people/Jzzz", 
        "https://www.zhihu.com/people/xi-shui-chang-liu-67-91", 
        "https://www.zhihu.com/people/hibernateliang-liao-ma", 
        "https://www.zhihu.com/people/chen-kai-0521", 
        "https://www.zhihu.com/people/qi-ge-shi-yao-ming-zi", 
        "https://www.zhihu.com/people/meskal", 
        "https://www.zhihu.com/people/dong-jian-44-39", 
        "https://www.zhihu.com/people/fan-lin-bo", 
        "https://www.zhihu.com/people/xi-mi-29-43", 
        "https://www.zhihu.com/people/kickegg-63", 
        "https://www.zhihu.com/people/peanut-15-36-15", 
        "https://www.zhihu.com/people/patrick-simon-78", 
        "https://www.zhihu.com/people/qiang-ni-35-26", 
        "https://www.zhihu.com/people/wang-yu-64-5", 
        "https://www.zhihu.com/people/feng-hao-tong-92", 
        "https://www.zhihu.com/people/nurenok-91", 
        "https://www.zhihu.com/people/a-la-si-jia-76", 
        "https://www.zhihu.com/people/tu-dou-38-17", 
        "https://www.zhihu.com/people/kevin-hill", 
        "https://www.zhihu.com/people/li-tao-11-48", 
        "https://www.zhihu.com/people/zhu-jun-98-96"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/51670381", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 4, 
            "title": "说一下我怎么处理分布式事务的", 
            "content": "<p>感觉TCC好难。。。</p><p>最近一周一直在研究tcc，以失败告终。</p><p>然后试了一下阿里的GTS。。望而生畏，唉~~（这家伙要联网，要被阿里云监控才可以）</p><p>烦死了！！！</p><p>关于上一篇分布式事务处理的内容我均作了测试，难度对于新手，尤其是我这种菜鸟来说有点大，而且资料也不全，没有更多的demo与解析。</p><p>最后选择使用springboot提供的分布式事务处理</p><p>这是源码：</p><a href=\"https://link.zhihu.com/?target=https%3A//gitee.com/ittqqzz/Dubbo-Demo-New\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4289307d7ca5c78f0037d75a52b14ad3_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ittqqzz/Dubbo-Demo-New</a><p>这是我的参考资料：</p><p>第一个</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/kisscatforever/article/details/79129055\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-6bdc4c27a7cd90d5ba9976d6df1d53b4_120x160.jpg\" data-image-width=\"327\" data-image-height=\"576\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【分布式事务】使用atomikos+jta解决分布式事务问题 - 我不是Tomcat的同桌，我是Tomcat - CSDN博客</a><p>第二个</p><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/entry/58a69a6c2f301e006d8e9fcf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Spring 分布式事务配置 (atomikos)</a><p></p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": [
                {
                    "userName": "tqz", 
                    "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
                    "content": "<p>有时间再研究TCC吧</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "itliusir", 
                    "userLink": "https://www.zhihu.com/people/3d01070c86b65d816b23d775daae67d6", 
                    "content": "<p>大兄弟 你这个就很真实</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/51085711", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 3, 
            "title": "初入分布式事务&小试TCC编程式补偿性事务", 
            "content": "<p>以下直接开始讲各种基本概念，追求精炼简介。</p><p>概念还是比较重要的</p><h2><b>事务简介</b></h2><blockquote>事务是用来保证一组数据操作的完整性和一致性<br/>满足ACID<br/>具有四种隔离级别、七种传播行为</blockquote><h2><b>分布式事务</b></h2><blockquote>将多个节点的事务看成一个整体处理<br/>由事务参与者、资源服务器、事务管理器等组成<br/>常见的分布式事务：支付、下单</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实现思路</b></p><blockquote>两段式事务2PC和三段式事务3PC（基础，生产环境中基本没人用）<br/>基于XA的分布式事务<br/>基于消息的最终一致性方案（常用）<br/>TCC编程式补偿性事务（目前最好）</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2PC、3PC</b></h2><ul><li>当需要一个事务的时候事务管理器（看下图）（相当于居委会大妈，是一个管理者身份）就通知全部资源管理器：“要搞事务啦，你们【准备】一下。”</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>资源管理器接收到“大妈”的通知后就开始处理业务，进行事务操作，操作结束后，但是还没有提交，就告诉“大妈”，我的事务已经做好了【就绪】，等待提交。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>“大妈”收到全部资源管理器的【就绪】消息后，就进入第二阶段，“大妈”说：“看来你们都就绪了，那就提交吧”，</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>资源管理器就开始执行【提交】，提交完成后，就告诉“大妈”，我【已提交】了。“大妈”就判断是否收到全部资源管理器的【已提交】请求，一旦没有收到全部的请求，就表示事务出现了问题。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1bb5eb777ed5e06c402046244ecf7394_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1072\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb\" width=\"1072\" data-original=\"https://pic1.zhimg.com/v2-1bb5eb777ed5e06c402046244ecf7394_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1072&#39; height=&#39;594&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1072\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1072\" data-original=\"https://pic1.zhimg.com/v2-1bb5eb777ed5e06c402046244ecf7394_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1bb5eb777ed5e06c402046244ecf7394_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>两段式的问题：</b></h2><p>比如在提交时：第一个资源管理器提交成功，并返回了，事务管理器也收到了返回的消息；</p><p>但是第二个资源管理器提交时，宕机了！！因此它不会返回任何信息，事务管理器就会一直等待，导致事务最终无法完成！</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>3PC</b></h2><p>CanCommit、PreCommit、DoCommit三个阶段</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c4898fea23b25620d9740b26c8d7f43a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb\" width=\"1268\" data-original=\"https://pic3.zhimg.com/v2-c4898fea23b25620d9740b26c8d7f43a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1268&#39; height=&#39;901&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1268\" data-original=\"https://pic3.zhimg.com/v2-c4898fea23b25620d9740b26c8d7f43a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c4898fea23b25620d9740b26c8d7f43a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在2PC的基础上，添加了超时检测，在2PC的第一阶段与第二阶段中间加入准备阶段，保证了一旦第三阶段出问题我可以全部回滚。</p><p>参照着图看下面的流程</p><p><b>CanCommit阶段</b></p><p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p><blockquote>1.事务询问 协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。<br/>2.响应反馈 参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No</blockquote><p><b>PreCommit阶段</b></p><p>协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。</p><p><b>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</b></p><blockquote>1.发送预提交请求 协调者向参与者发送PreCommit请求，并进入Prepared阶段。<br/>2.事务预提交 参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。<br/>3.响应反馈 如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</blockquote><p><b>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</b></p><blockquote>1.发送中断请求 协调者向所有参与者发送abort请求。<br/>2.中断事务 参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</blockquote><p><b>doCommit阶段</b></p><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p><p><b>执行提交</b></p><blockquote>1.发送提交请求 协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。<br/>2.事务提交 参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。<br/>3.响应反馈 事务提交完之后，向协调者发送Ack响应。<br/>4.完成事务 协调者接收到所有参与者的ack响应之后，完成事务。</blockquote><p><b>中断事务 协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</b></p><blockquote>1.发送中断请求 协调者向所有参与者发送abort请求<br/>2.事务回滚 参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。<br/>3.反馈结果 参与者完成事务回滚之后，向协调者发送ACK消息<br/>4.中断事务 协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</blockquote><p>当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大。 </p><h2><b>2PC与3PC的区别</b></h2><p>相对于2PC，3PC主要解决的单点故障问题，并减少阻塞，因为一旦参与者无法及时收到来自协调者的信息之后，他会默认执行commit。而不会一直持有事务资源并处于阻塞状态。</p><p>但是这种机制也会导致数据一致性问题，因为，由于网络原因，协调者发送的abort响应没有及时被参与者接收到，那么参与者在等待超时之后执行了commit操作。这样就和其他接到abort命令并执行回滚的参与者之间存在数据不一致的情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>XA</b></h2><p>X/OPEN推出的方案，实际业务中很少有人用。（和两段式差不多）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-213fbe74f6301f881d199d9accc0d6d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"611\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic1.zhimg.com/v2-213fbe74f6301f881d199d9accc0d6d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;814&#39; height=&#39;611&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"611\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"814\" data-original=\"https://pic1.zhimg.com/v2-213fbe74f6301f881d199d9accc0d6d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-213fbe74f6301f881d199d9accc0d6d0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>基于消息的最终一致性方案</b></h2><p>他属于：强一致性方案。只会全部成功或全部失败。</p><p>但是浪费了资源，下游应用会一直等待上游传递消息。</p><p>看图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-196e8201a14bb1a407357f650b08cccb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-196e8201a14bb1a407357f650b08cccb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;433&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-196e8201a14bb1a407357f650b08cccb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-196e8201a14bb1a407357f650b08cccb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c4f1c6abde68a3950e7e9aab135653e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-c4f1c6abde68a3950e7e9aab135653e9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;407&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-c4f1c6abde68a3950e7e9aab135653e9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c4f1c6abde68a3950e7e9aab135653e9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>TCC编程式补偿性事务</b></h2><p>Try，Confirm，Cancel的首字母缩写，蚂蚁金服一直在用（属于常用分布式事务解决方案）</p><p>调用Try接口，执行完后返回结果，都成功调用Confirm、一旦存在失败调用Cancel    </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7cba8150997c6b69686b9fe760008dd7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"417\" class=\"origin_image zh-lightbox-thumb\" width=\"840\" data-original=\"https://pic4.zhimg.com/v2-7cba8150997c6b69686b9fe760008dd7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;840&#39; height=&#39;417&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"417\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"840\" data-original=\"https://pic4.zhimg.com/v2-7cba8150997c6b69686b9fe760008dd7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7cba8150997c6b69686b9fe760008dd7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>TCC事务机制简介：</b></h2><a href=\"https://link.zhihu.com/?target=http%3A//www.bytesoft.org/tcc-intro/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TCC事务机制简介 | 百特开源</a><a href=\"https://link.zhihu.com/?target=https%3A//www.bytesoft.org/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-ac009bf865e3e117a89d12c5ed3f4b0f_180x120.jpg\" data-image-width=\"331\" data-image-height=\"188\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">百特开源</a><p><b>与</b>基于消息的最终一致性方案的<b>对比</b><a href=\"https://link.zhihu.com/?target=https%3A//www.bytesoft.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">百特开源</a><b>与</b>基于消息的最终一致性方案的<b>对比</b></p><ol><li>基于消息的事务是强一致性事务，存在资源浪费</li><li>TCC事务是柔性事务，在try阶段要对资源做预留</li><li>TCC事务在确认或取消阶段释放资源</li><li>TCC的时效性更好</li></ol><hr/><h2><b>常用分布式事务框架</b></h2><ul><li>全局事务服务GTS（收费，我试了一下5TPS下可以免费使用）（链接：<a href=\"https://link.zhihu.com/?target=https%3A//www.aliyun.com/aliware/txc%3Fspm%3Da2c4g.11174283.2.1.6eea735dFowkDU\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">全局事务服务_GTS_分布式数据库事务_多库事务_消息事务解决方案 - 阿里云</a>）</li><li>蚂蚁金服分布式事务DTX（收费）（链接：<a href=\"https://link.zhihu.com/?target=https%3A//tech.antfin.com/products/DTX\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">蚂蚁金服金融科技 - DTX</a>）</li><li>开源TCC框架：tcc-transaction（免费）（链接：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/changmingxie/tcc-transaction\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">changmingxie/tcc-transaction</a>）</li><li>开源TCC框架：ByteTcc（免费，后起之秀，文档齐全）（链接：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/liuyangming/ByteTCC\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">liuyangming/ByteTCC</a>）</li></ul><h2>如果嫌麻烦，就用阿里巴巴的GTS、DTX吧（我选择阿里！）</h2><p>不然就使用开源框架</p><h2><b>尝试使用TCC编程式补偿性事务</b></h2><p>为什么不用ByteTcc，因为它的star数没有tcc-transaction高。。更稳定，更好一些。</p><p>就是此开源项目：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/changmingxie/tcc-transaction\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-23e8a78b7eb7326eaf2fc850fad94483_ipico.jpg\" data-image-width=\"420\" data-image-height=\"420\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">changmingxie/tcc-transaction</a><p>我们先尝试一下把他跑起来，体验一下TCC编程式补偿性事务是什么感觉。</p><p>这个项目有几处需要我们手动修改的地方，请仔细。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第一步：</b>下载tcc-transaction：git clone <a href=\"mailto:git@github.com\">git@github.com</a>:changmingxie/tcc-transaction.git</p><p><b>第二步：</b>用IDEA打开下载的工程</p><p><b>第三步：</b>修改几处配置，如图所示修改即可。</p><p>项目导入后的样子如图，目前只需要看sample模块下面的http子模块</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c43ae2f10e79e0ef9548115db29930b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"455\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb\" width=\"455\" data-original=\"https://pic2.zhimg.com/v2-c43ae2f10e79e0ef9548115db29930b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;455&#39; height=&#39;645&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"455\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"455\" data-original=\"https://pic2.zhimg.com/v2-c43ae2f10e79e0ef9548115db29930b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c43ae2f10e79e0ef9548115db29930b5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后导入数据库SQL语句</p><p>把这四个文件导入到你的数据库</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-91a2f6cd57b16ba4958a0d6800513ca3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic4.zhimg.com/v2-91a2f6cd57b16ba4958a0d6800513ca3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;523&#39; height=&#39;261&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"523\" data-original=\"https://pic4.zhimg.com/v2-91a2f6cd57b16ba4958a0d6800513ca3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-91a2f6cd57b16ba4958a0d6800513ca3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>特别注意示例给的 create_db_tcc.sql 数据库字段没有IS_DELETE值，需要在创建完此库以后再手动执行以下SQL语句：</p><div class=\"highlight\"><pre><code class=\"language-sql\"><span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"o\">`</span><span class=\"n\">TCC_TRANSACTION_CAP</span><span class=\"o\">`</span> <span class=\"k\">ADD</span> <span class=\"o\">`</span><span class=\"n\">IS_DELETE</span><span class=\"o\">`</span> <span class=\"n\">tinyint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"o\">`</span><span class=\"n\">TCC_TRANSACTION_ORD</span><span class=\"o\">`</span> <span class=\"k\">ADD</span> <span class=\"o\">`</span><span class=\"n\">IS_DELETE</span><span class=\"o\">`</span> <span class=\"n\">tinyint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"o\">`</span><span class=\"n\">TCC_TRANSACTION_RED</span><span class=\"o\">`</span> <span class=\"k\">ADD</span> <span class=\"o\">`</span><span class=\"n\">IS_DELETE</span><span class=\"o\">`</span> <span class=\"n\">tinyint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"o\">`</span><span class=\"n\">TCC_TRANSACTION_UT</span><span class=\"o\">`</span> <span class=\"k\">ADD</span> <span class=\"o\">`</span><span class=\"n\">IS_DELETE</span><span class=\"o\">`</span> <span class=\"n\">tinyint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span></code></pre></div><p>如果你的版本有此字段，就算了。</p><p>然后修改此三个子模块的数据库配置文件</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0cb0a36a8de5e0b4e1734e8ab91d868c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"462\" data-original=\"https://pic1.zhimg.com/v2-0cb0a36a8de5e0b4e1734e8ab91d868c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;462&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"462\" data-original=\"https://pic1.zhimg.com/v2-0cb0a36a8de5e0b4e1734e8ab91d868c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0cb0a36a8de5e0b4e1734e8ab91d868c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第一个要修改的就是数据库连接信息，改为你的用户名与密码（三处子模块都要修改），如图</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3a69a0487926851e541f202ee03f48b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"732\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-3a69a0487926851e541f202ee03f48b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;732&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"732\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-3a69a0487926851e541f202ee03f48b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3a69a0487926851e541f202ee03f48b3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第二个就是添加Tomcat部署的时候，把这三个包部署：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7cb4d33d0d471e7d18c94a97a2f6e0c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"515\" data-original=\"https://pic3.zhimg.com/v2-7cb4d33d0d471e7d18c94a97a2f6e0c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;515&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"515\" data-original=\"https://pic3.zhimg.com/v2-7cb4d33d0d471e7d18c94a97a2f6e0c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7cb4d33d0d471e7d18c94a97a2f6e0c2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>对应部署包后面的应用上下文可以改为：order、cap、red</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-091efa53f68f8cdbfd8395cae486e777_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-091efa53f68f8cdbfd8395cae486e777_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1022&#39; height=&#39;139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1022\" data-original=\"https://pic4.zhimg.com/v2-091efa53f68f8cdbfd8395cae486e777_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-091efa53f68f8cdbfd8395cae486e777_b.jpg\"/></figure><p>然后部署发布</p><p>会有三个工程启动（速度比较慢）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-48b7acad9ceb35c387489f87d0ca0271_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"436\" data-original=\"https://pic2.zhimg.com/v2-48b7acad9ceb35c387489f87d0ca0271_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;436&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"436\" data-original=\"https://pic2.zhimg.com/v2-48b7acad9ceb35c387489f87d0ca0271_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-48b7acad9ceb35c387489f87d0ca0271_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>启动成功</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dc97a770bd2abb89ad4b33fcc53c8161_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"164\" class=\"content_image\" width=\"418\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;418&#39; height=&#39;164&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"164\" class=\"content_image lazy\" width=\"418\" data-actualsrc=\"https://pic2.zhimg.com/v2-dc97a770bd2abb89ad4b33fcc53c8161_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后访问图示连接，照着网页提示操作，就可以体验一把TCC是什么样子的了</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-90ca567cd74ecb19f54302e093173e10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic1.zhimg.com/v2-90ca567cd74ecb19f54302e093173e10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;593&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic1.zhimg.com/v2-90ca567cd74ecb19f54302e093173e10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-90ca567cd74ecb19f54302e093173e10_b.jpg\"/></figure><hr/><h2><b>下面看一下dubbo版本的TCC如何启动</b></h2><p>还是以sample为例，现在进入dubbo这个子模块，数据库sql语句不用管，上面已经搞过了，修改几处配置文件即可</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-21611cc28f46b6a93ac5c0e36b42d331_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"518\" data-original=\"https://pic2.zhimg.com/v2-21611cc28f46b6a93ac5c0e36b42d331_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;518&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"518\" data-original=\"https://pic2.zhimg.com/v2-21611cc28f46b6a93ac5c0e36b42d331_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-21611cc28f46b6a93ac5c0e36b42d331_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第一处：</b>依然是此三处的数据库配置文件，修改为自己的用户名与密码</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a9d7084989630549ee3b3d18c456dba4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic1.zhimg.com/v2-a9d7084989630549ee3b3d18c456dba4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;522&#39; height=&#39;242&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"522\" data-original=\"https://pic1.zhimg.com/v2-a9d7084989630549ee3b3d18c456dba4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a9d7084989630549ee3b3d18c456dba4_b.jpg\"/></figure><p>如图</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dc64be393018dd72c4cd7286e50a80bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"979\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb\" width=\"979\" data-original=\"https://pic4.zhimg.com/v2-dc64be393018dd72c4cd7286e50a80bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;979&#39; height=&#39;651&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"979\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"979\" data-original=\"https://pic4.zhimg.com/v2-dc64be393018dd72c4cd7286e50a80bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dc64be393018dd72c4cd7286e50a80bf_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后修改此三处的web.xml文件，一打开web.xml就会看到发红的&lt;web-app&gt;</p><p>其实这是配置的顺序写的不对，把listener放到filter之后就没问题了，</p><p>然后在&lt;display-name&gt;Sample Dubbo Capital&lt;/display-name&gt; 下面添加如下的东西</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;context-param&gt;</span>\n    <span class=\"nt\">&lt;param-name&gt;</span>webAppRootKey<span class=\"nt\">&lt;/param-name&gt;</span>\n    <span class=\"nt\">&lt;param-value&gt;</span>tcc-transaction-dubbo-capital<span class=\"nt\">&lt;/param-value&gt;</span>\n<span class=\"nt\">&lt;/context-param&gt;</span></code></pre></div><p>同理，三处子模块都要修改一下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-aab0a9ac022c6dcafc6c256549a2ab67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-aab0a9ac022c6dcafc6c256549a2ab67_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-aab0a9ac022c6dcafc6c256549a2ab67_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-aab0a9ac022c6dcafc6c256549a2ab67_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>然后部署到Tomcat的时候，也有讲究，按下图的顺序配置</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dc343b30b758dd27ad61fe5779bdc57f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"426\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic4.zhimg.com/v2-dc343b30b758dd27ad61fe5779bdc57f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1422&#39; height=&#39;426&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"426\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1422\" data-original=\"https://pic4.zhimg.com/v2-dc343b30b758dd27ad61fe5779bdc57f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dc343b30b758dd27ad61fe5779bdc57f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>因为Tomcat的插件会按此顺序加载，不然项目无法启动。</p><p>然后给order的Application context值就给默认的斜杠</p><p>另外两个分别给/red、/cap即可</p><p>最后启动tomcat，访问127.0.0.1:8080/即可体验dubbo下的TCC</p><p class=\"ztext-empty-paragraph\"><br/></p><p>未完待续。。。</p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50806537", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 1, 
            "title": "踩坑避免1", 
            "content": "<p>我之前做的Demo是从alibaba的github找的maven依赖，网站是这个：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/dubbo-spring-boot-starter/blob/master/README_zh.md\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-b1ba1caabb17132c3bbcf00d612b1267_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">alibaba/dubbo-spring-boot-starter</a><p>但是，我发现这并不是最官方的。。</p><p>他貌似是阿里巴巴的commiter维护的一个分支</p><p>其实，正儿八经的SpringBoot + Dubbo的依赖是这个网址：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/apache/incubator-dubbo-spring-boot-project\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-aafc55520348d3e1a776ef02e5078c46_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">apache/incubator-dubbo-spring-boot-project</a><p>然后我赶紧写了一个新的Demo框框。被自己蠢死，代码看链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//gitee.com/ittqqzz/Dubbo-Demo-New\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4289307d7ca5c78f0037d75a52b14ad3_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ittqqzz/Dubbo-Demo-New</a><p></p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50750996", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 2, 
            "title": "初入高可用（宕机、服务降级、容错处理）", 
            "content": "<h2><b>1、zookeeper宕机与dubbo直连</b></h2><p>现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务。</p><p>原因：</p><p><b>健壮性:</b></p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据。</li><li>数据库宕掉后，注册中心仍能通过<code>缓存</code>提供服务列表查询，但不能注册新服务。</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台。</li><li>注册中心全部宕掉后，服务提供者和服务消费者<code>仍能通过本地缓存通讯</code>。</li><li>服务提供者无状态，任意一台宕掉后，不影响使用。</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复 。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高可用：</b>通过设计，减少系统不能提供服务的时间。</p><p>面试官问： zookeeper宕机服务是否可用。答案是可以的，因为服务提供者和服务消费者仍能通过本地缓存通讯。</p><p>面试官又问：没有zookeeper可以提供服务吗？答案是可以的，因为可以使用 dubbo直连。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2、集群下dubbo负载均衡配置</b></h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用。</p><p><b>负载均衡策略：（图示）</b></p><ul><li>Random LoadBalance</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ea7daa0d8589d4786cf5bde6e63b85d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"584\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic4.zhimg.com/v2-ea7daa0d8589d4786cf5bde6e63b85d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1180&#39; height=&#39;584&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"584\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1180\" data-original=\"https://pic4.zhimg.com/v2-ea7daa0d8589d4786cf5bde6e63b85d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ea7daa0d8589d4786cf5bde6e63b85d7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>RoundRobin LoadBalance</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b174765ae0094c52388758e38f9214e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1223\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"1223\" data-original=\"https://pic4.zhimg.com/v2-b174765ae0094c52388758e38f9214e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1223&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1223\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1223\" data-original=\"https://pic4.zhimg.com/v2-b174765ae0094c52388758e38f9214e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b174765ae0094c52388758e38f9214e3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>LeastActive LoadBalance</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d14197f69485e641b18eacb143c395c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1319\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb\" width=\"1319\" data-original=\"https://pic3.zhimg.com/v2-d14197f69485e641b18eacb143c395c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1319&#39; height=&#39;574&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1319\" data-rawheight=\"574\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1319\" data-original=\"https://pic3.zhimg.com/v2-d14197f69485e641b18eacb143c395c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d14197f69485e641b18eacb143c395c2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>ConsistentHash LoadBalance</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-85d591d348fb12a5cdcf097edf8cc0c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1438\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb\" width=\"1438\" data-original=\"https://pic1.zhimg.com/v2-85d591d348fb12a5cdcf097edf8cc0c8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1438&#39; height=&#39;571&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1438\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1438\" data-original=\"https://pic1.zhimg.com/v2-85d591d348fb12a5cdcf097edf8cc0c8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-85d591d348fb12a5cdcf097edf8cc0c8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Dubbo默认用的random策略，可以从这里看出</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-598f30b441933d06e6cb4d428848008f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb\" width=\"648\" data-original=\"https://pic4.zhimg.com/v2-598f30b441933d06e6cb4d428848008f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;648&#39; height=&#39;248&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"648\" data-original=\"https://pic4.zhimg.com/v2-598f30b441933d06e6cb4d428848008f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-598f30b441933d06e6cb4d428848008f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>共有这么几种负载均衡算法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8b39c18a02b79eb145136e919f84a19d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"393\" data-rawheight=\"173\" class=\"content_image\" width=\"393\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;393&#39; height=&#39;173&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"393\" data-rawheight=\"173\" class=\"content_image lazy\" width=\"393\" data-actualsrc=\"https://pic2.zhimg.com/v2-8b39c18a02b79eb145136e919f84a19d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如何修改默认的算法？随便打开一个以上的算法，如”RoundRobinLoadBalance”</p><p>可以看到这个：<code>public static final String NAME = &#34;roundrobin&#34;;</code></p><p>拷贝算法名称，回到consumer，在引用服务的地方改成这个样子：<code>@Reference(loadbalance = &#34;roundrobin&#34;)</code>即可跟换负载均衡算法</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>为服务添加权重</b></p><p>可以在<code>@Service</code>里面使用<code>@Service(weight = 100)</code>来规定权值，但是一般不这么干。这样就写死了，因该是需要动态调整。所以需要使用admin管理工具，如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-672440caed6395ebda12a27d8071a01c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1447\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"1447\" data-original=\"https://pic1.zhimg.com/v2-672440caed6395ebda12a27d8071a01c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1447&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1447\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1447\" data-original=\"https://pic1.zhimg.com/v2-672440caed6395ebda12a27d8071a01c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-672440caed6395ebda12a27d8071a01c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>开了三个提供者，提供通过一个服务，默认权重一样。点击后面的“倍权”、“半权”可以修改当前提供的服务的权值，当前权值越大的越容易被访问。</p><h2><b>3、整合hystrix，服务熔断与降级处理</b></h2><p><b>服务降级</b></p><p>什么是服务降级？</p><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>举例：</b>双十一0点下单的时候，流量太大，服务器扛不住了，你本来应该进入支付界面的，但是你却看到了这样的提示“前方拥挤，请稍后再试”，这就叫做服务降级。将提供支付的服务降低一个档次，只给你看错误提示。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p>向注册中心写入动态配置覆盖规则：</p><p>dubbo给出两种服务降级的方式，先看如何用代码配置：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">RegistryFactory</span> <span class=\"n\">registryFactory</span> <span class=\"o\">=</span> <span class=\"n\">ExtensionLoader</span><span class=\"o\">.</span><span class=\"na\">getExtensionLoader</span><span class=\"o\">(</span><span class=\"n\">RegistryFactory</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">).</span><span class=\"na\">getAdaptiveExtension</span><span class=\"o\">();</span>\n<span class=\"n\">Registry</span> <span class=\"n\">registry</span> <span class=\"o\">=</span> <span class=\"n\">registryFactory</span><span class=\"o\">.</span><span class=\"na\">getRegistry</span><span class=\"o\">(</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"s\">&#34;zookeeper://10.20.153.10:2181&#34;</span><span class=\"o\">));</span>\n<span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"s\">&#34;override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null&#34;</span><span class=\"o\">));</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>其中：</p><ul><li>第一种降级方式：<code>mock=force:return+null</code>表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</li><li>第二种降级方式：还可以改为 <code>mock=fail:return+null</code>表示消费方对该服务的方法调用在失败后（如超时），再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>但是，一般无需撸代码。只需要在后台管理设置。</p><p>打开：首页 &gt; 服务治理 &gt; 消费者</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5a682c0b35d2b5e04027afa8704e1a46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1873\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"1873\" data-original=\"https://pic3.zhimg.com/v2-5a682c0b35d2b5e04027afa8704e1a46_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1873&#39; height=&#39;500&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1873\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1873\" data-original=\"https://pic3.zhimg.com/v2-5a682c0b35d2b5e04027afa8704e1a46_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5a682c0b35d2b5e04027afa8704e1a46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>会给出具体的接口名与版本号等信息，点击确定即可完成降级【这个方法属于第一种：mock=force:return+null 】</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ae8fc9eb42c55d27fbfc809e3421d07c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1162\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb\" width=\"1162\" data-original=\"https://pic1.zhimg.com/v2-ae8fc9eb42c55d27fbfc809e3421d07c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1162&#39; height=&#39;511&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1162\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1162\" data-original=\"https://pic1.zhimg.com/v2-ae8fc9eb42c55d27fbfc809e3421d07c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ae8fc9eb42c55d27fbfc809e3421d07c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在，换一种方式，点击【容错】，此方法就属于第二种降级方式【mock=fail:return+null】</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b7fd213d07fe286f7dc190ccc92562e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb\" width=\"1015\" data-original=\"https://pic1.zhimg.com/v2-b7fd213d07fe286f7dc190ccc92562e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1015&#39; height=&#39;462&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1015\" data-original=\"https://pic1.zhimg.com/v2-b7fd213d07fe286f7dc190ccc92562e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b7fd213d07fe286f7dc190ccc92562e0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>集群容错 </b></p><p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover ：重试。</p><p>集群容错模式：</p><ul><li>Failover Cluster【默认模式】</li></ul><p>失败自动切换。当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=&#34;2&#34; 来设置重试次数(不含第一次)，你可以设置多台机器提供同一服务，当第一次调用失败的时候，他会找其他服务器，并按重试次数来尝试连接，在重试次数内成功了就成功。</p><p>重试次数配置如下：</p><p><code>&lt;dubbo:service retries=&#34;2&#34; /&gt;</code>或<code>&lt;dubbo:reference retries=&#34;2&#34; /&gt;</code></p><p>或</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"nl\">dubbo:</span><span class=\"n\">reference</span><span class=\"o\">&gt;</span>\n<span class=\"err\">​</span>\n    <span class=\"o\">&lt;</span><span class=\"nl\">dubbo:</span><span class=\"n\">method</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;findFoo&#34;</span> <span class=\"n\">retries</span><span class=\"o\">=</span><span class=\"s\">&#34;2&#34;</span> <span class=\"o\">/&gt;</span>\n<span class=\"err\">​</span>\n<span class=\"o\">&lt;/</span><span class=\"nl\">dubbo:</span><span class=\"n\">reference</span><span class=\"o\">&gt;</span>\n<span class=\"err\">​</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>Failfast Cluster</li></ul><p>快速失败。只发起一次调用，失败立即报错，通常用于非幂等性的写操作，比如新增记录。</p><ul><li>Failsafe Cluster</li></ul><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><ul><li>Failback Cluster</li></ul><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><ul><li>Forking Cluster</li></ul><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=&#34;2&#34; 来设置最大并行数。</p><ul><li>Broadcast Cluster</li></ul><p>广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p><b>集群模式配置</b></p><p>按照以下示例在服务提供方和消费方配置集群模式</p><p><code>&lt;dubbo:service cluster=&#34;failsafe&#34; /&gt;</code>或<code>&lt;dubbo:reference cluster=&#34;failsafe&#34; /&gt;</code></p><p>但是一般都不是手动去设置容错模式，是用下面的方式：</p><p><b>整合hystrix</b></p><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能</p><p><b>配置spring-cloud-starter-netflix-hystrix</b></p><p>spring boot官方提供了对hystrix的集成，直接在pom.xml里加入依赖：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.cloud<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.4.4.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><p>然后在提供者的Application类上增加@EnableHystrix来启用hystrix starter：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@SpringBootApplication</span>\n<span class=\"nd\">@EnableHystrix</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProviderApplication</span> <span class=\"o\">{</span>\n    <span class=\"c1\">//...\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>配置Provider端</b></p><p>在Dubbo的Provider上对会出错的方法增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span>\n<span class=\"nd\">@Service</span><span class=\"o\">(</span><span class=\"n\">interfaceClass</span> <span class=\"o\">=</span> <span class=\"n\">IHelloService</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">&#34;1.0.0&#34;</span><span class=\"o\">)</span><span class=\"c1\">// sub=&#34;com.dubbo.IHelloConsumerStub&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">IHelloServiceImpl</span> <span class=\"kd\">implements</span> <span class=\"n\">IHelloService</span> <span class=\"o\">{</span>\n<span class=\"err\">​</span>\n    <span class=\"nd\">@HystrixCommand</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">sayHello</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">say</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;============调用了provider的old版本方法==========&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">random</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">.</span><span class=\"na\">5</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 模拟出错，演示服务容错处理\n</span><span class=\"c1\"></span>            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">RuntimeException</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;hello &#34;</span> <span class=\"o\">+</span> <span class=\"n\">say</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>出错是在消费者调用的时候出问题的，所以还需要设置消费者端</p><p><b>配置Consumer端</b></p><p>添加依赖并在Application类上增加@EnableHystrix来启用hystrix starter</p><p>对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = &#34;reliable&#34;的调用里。</p><div class=\"highlight\"><pre><code class=\"language-java\"> <span class=\"c1\">// 以下的调用会出错.fallbackMethod = &#34;saySorry&#34;表示出错了回调saySorry这个方法\n</span><span class=\"c1\"></span><span class=\"err\">​</span>\n    <span class=\"nd\">@HystrixCommand</span><span class=\"o\">(</span><span class=\"n\">fallbackMethod</span> <span class=\"o\">=</span> <span class=\"s\">&#34;saySorry&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">say</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">iHelloService</span><span class=\"o\">.</span><span class=\"na\">sayHello</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"c1\">// 注意此回调方法一定要带参数，带与上面一样的参数。不然报错！！！【FallbackDefinitionException】\n</span><span class=\"c1\"></span><span class=\"err\">​</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">saySorry</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;sorry, the service is not available&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>本次Demo：</p><a href=\"https://link.zhihu.com/?target=https%3A//gitee.com/ittqqzz/Dubbo-Demo\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4289307d7ca5c78f0037d75a52b14ad3_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ittqqzz/Dubbo-Demo</a><p></p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50749345", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 1, 
            "title": "浅入Dubbo配置", 
            "content": "<p>下面主要讲Dubbo的常用配置原则，你需要了解配置如何生效的。</p><p>至于如何配置，还是请下载我的Demo，看源代码以及注释。</p><p>代码：</p><a href=\"https://link.zhihu.com/?target=https%3A//gitee.com/ittqqzz/Dubbo-Demo\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4289307d7ca5c78f0037d75a52b14ad3_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ittqqzz/Dubbo-Demo</a><h2><b>配置原则</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-21da87f9254beaa240041db1c3148f77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"318\" class=\"content_image\" width=\"335\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;335&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"318\" class=\"content_image lazy\" width=\"335\" data-actualsrc=\"https://pic4.zhimg.com/v2-21da87f9254beaa240041db1c3148f77_b.jpg\"/></figure><p><b>对上图的解释：</b></p><p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</p><p>XML 次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。</p><p>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>举例：</b>在application.properties里面设置spring.dubbo.protocol.port=20881可以看到启动端口变成了20881</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5685525d068587ede52788fc342f2e49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"149\" class=\"content_image\" width=\"320\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;320&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"320\" data-actualsrc=\"https://pic2.zhimg.com/v2-5685525d068587ede52788fc342f2e49_b.jpg\"/></figure><p>然后注释上面的配置，在dubbo.properties里面设置dubbo.protocol.port=20883</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-40cd17097763f5730c98c9adba336a40_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"89\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;89&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"89\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-40cd17097763f5730c98c9adba336a40_b.jpg\"/></figure><p>注意：前面的配置可以覆盖后面的（dubbo依次自动扫描三中配置方式，都没有就使用默认值）</p><p>dubbo.properties 里面写公共的配置</p><p>application.properties里面写需要修改的配置</p><p>VM启动配置主要是为了覆盖参数 </p><p>看官网解释：</p><a href=\"https://link.zhihu.com/?target=https%3A//dubbo.incubator.apache.org/zh-cn/docs/user/configuration/properties.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a802745b3d5178a44e7f09b08442b99c_ipico.jpg\" data-image-width=\"160\" data-image-height=\"160\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">properties</a><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>启动时检查</b></h2><p>当消费者启动时会找提供者，如果没有他需要的提供者，就会报错。</p><p>配置：spring.dubbo.consumer.check=false 即可解决此问题</p><p>现在，只有在消费者调用提供者的服务的时候才会报错</p><p>注意：可以关闭某个服务的启动时检查、也可以关闭消费端或服务端的启动时检查、还可以关闭对注册中心的检查</p><p>看官网介绍：</p><a href=\"https://link.zhihu.com/?target=https%3A//dubbo.incubator.apache.org/zh-cn/docs/user/demos/preflight-check.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a802745b3d5178a44e7f09b08442b99c_ipico.jpg\" data-image-width=\"160\" data-image-height=\"160\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">preflight-check</a><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>超时设置 + 重试次数（不包含第一次调用）</b></h2><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间。<br/></p><p>如图，是超时时间的配置覆盖关系（同时也是所有配置的配置覆盖关系）</p><p>解释一下dubbo官网的原话：（并深入分析）</p><ul><li><b>精确优先</b>（方法级优先，接口级次之，全局配置再次之）</li><ul><li>（什么叫全局？就是spring.dubbo.consumer.xxxx或者spring.dubbo.provider.xxxx这样对整个应用方的配置）</li></ul><li><b>消费者优先</b>（如果级别一样，则消费方优先，提供方次之）</li><li>提个问题：<b>精确优先和消费者优先谁更优先？？？</b></li><ul><li>provider在方法级别上配置了超时1000ms、consumer在接口级别配置了超时5000ms、在provider的实现类里面让线程sleep（4000）。</li><li>结果是consumer调用失败，因为双方对超时时间设置的级别不一样，因此消费者不优先！依然是精确优先。</li><li>请注意，是级别一样，消费方才优先。</li><li>如果对配置的优先级不明确可以看此图解决。</li></ul><li>官网：</li></ul><a href=\"https://link.zhihu.com/?target=https%3A//dubbo.incubator.apache.org/zh-cn/docs/user/configuration/xml.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a802745b3d5178a44e7f09b08442b99c_ipico.jpg\" data-image-width=\"160\" data-image-height=\"160\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">xml</a><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9c602a9e093bb9546cb0ba4bfbcd74a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"620\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-9c602a9e093bb9546cb0ba4bfbcd74a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;620&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"620\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-9c602a9e093bb9546cb0ba4bfbcd74a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9c602a9e093bb9546cb0ba4bfbcd74a8_b.jpg\"/></figure><p>重试次数主要用于失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=&#34;2&#34; 来设置重试2次(不含第一次，相当于连接了3次)。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>多版本：</b></h2><p>一个接口可以有多种版本的实现类，例如新版本的与旧版本的<br/>（业务环境就是，功能需要升级，但是害怕一次性全部升级会带来不可预知的错误，可以先让一部分消费者使用旧的功能，另一部分使用新的功能，等系统运行稳定后，再全部替换为新的功能）</p><p><b>举例：</b></p><p>在provider里面对要暴露的接口配置：</p><p>@Service(interfaceClass = IHelloService.class, version = &#34;1.0.0&#34;)</p><p>@Service(interfaceClass = IHelloService.class, version = &#34;2.0.0&#34;)</p><p>@Service(interfaceClass = IHelloService.class, version = &#34;3.0.0&#34;)</p><p>等等一些版本的实现类</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在consumer里面配置要引用的接口：</p><p>@Reference(version = &#34;2.0.0&#34;)就可以了</p><p>@Reference(version = &#34;*&#34;)表示随机任意获取某一个版本的接口【这就是灰度发布】</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>本地存根：</b></h2><p>看官网即可官网：</p><a href=\"https://link.zhihu.com/?target=https%3A//dubbo.incubator.apache.org/zh-cn/docs/user/demos/local-stub.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a802745b3d5178a44e7f09b08442b99c_ipico.jpg\" data-image-width=\"160\" data-image-height=\"160\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">local-stub</a><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>SpringBoot整合Dubbo的三种方法：</b></h2><p><b>第一种：</b><br/>就是目前使用的方式，用@Service暴露服务，使用@Referance使用服务，并且用@EnableDubboConfiguration开启dubbo服务<br/><br/>由于@Service注解不能够暴露接口里面具体的方法，所以以上的配置还是有短板的<br/><br/><b>第二种：</b><br/>采用典型的Spring整合Dubbo的XML配置文件的方式配置，配置方法：<br/>1. 写spring配置dubbo的xml文件provider.xml<br/>2. 关闭application.properties<br/>3. 关闭@EnableDubboConfiguration、@Service等在springboot里面在使用的注解<br/>4. 使用@ImpotRescourse导入provider.xml<br/><br/><b>第三种：</b></p><p>手动@Bean，就是使用Java代码的方式配置<br/>参考官网配置：</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//dubbo.incubator.apache.org/zh-cn/docs/user/configuration/annotation.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a802745b3d5178a44e7f09b08442b99c_ipico.jpg\" data-image-width=\"160\" data-image-height=\"160\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">annotation</a><p></p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50619471", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 1, 
            "title": "写Demo(Dubbo+SpringBoot)同时安装zookeeper+admin+mointor", 
            "content": "<p>为啥不是Spring，其实Spring也好Springboot也罢，原理一样的。</p><p>只不过Springboot更适合搞微服务。所以就用它了</p><p>关于zookeeper的介绍请自己百度，哈哈。</p><p>项目结构：</p><ul><li>一个Provider，用于提供服务</li><li>一个Consumer，用于调用服务</li></ul><p>代码我不写了，自己下载吧，我放到我的码云上了。连接在下面</p><p>我用IDEA写的，你还是用idea导入吧。</p><p>需要说明的是：</p><ol><li>我从无注册中心开始写的（什么是无注册中心请看源码里面的注释）</li><li>最好看一下我提交的log，因为你一打开的工程是最新的，需要回退到之前的版本才看的到我写了啥。我的意思是，我每完成一个阶段的我就会commit一次，所以要从最基础的demo开始看的话，得reset到之前的版本。</li><li>下面我讲一下怎么搭建dubbo的后台管理与监控中心</li></ol><p>连接：</p><a href=\"https://link.zhihu.com/?target=https%3A//gitee.com/ittqqzz/Dubbo-Demo\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4289307d7ca5c78f0037d75a52b14ad3_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ittqqzz/Dubbo-Demo</a><p>另外：dubbo的官网给了demo，如下：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/apache/incubator-dubbo-spring-boot-project\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-aafc55520348d3e1a776ef02e5078c46_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">apache/incubator-dubbo-spring-boot-project</a><p>dubbo的官网给了很多东西，其实并不需要看太多的教程，看官网 + github就可以了</p><p>强烈建议各位猿类，看官方手册比五花八门的入门Demo好一些！</p><h2><b>安装dubbo的后台管理与监控中心</b></h2><p>在gitee仓库里面有两个文件：incubator-dubbo-ops-master与zookeeper-3.4.11</p><p>看文件名就知道干嘛的了。</p><h2>先搞zookeeper</h2><p>要先安装JDK</p><p>打开conf目录，将zoo_sample.cfg修改为zoo.cfg</p><p>然后就可以启动zookeeper了，启动bin目录下的zkServer.cmd文件即可</p><p>这一句，可以看出刚才的文件修改成功了</p><div class=\"highlight\"><pre><code class=\"language-xml\">INFO  [main:QuorumPeerConfig@134] - Reading configuration \nfrom: D:\\dubbo\\zookeeper-3.4.10\\bin\\..\\conf\\zoo.cfg</code></pre></div><p>最下面给出了服务端口</p><div class=\"highlight\"><pre><code class=\"language-xml\">[myid:] - INFO  [main:NIOServerCnxnFactory@89] - binding to port 0.0.0.0/0.0.0.0:2181</code></pre></div><p>保持启动状态，接下来安装dubbo后台管理</p><h2>安装dubbo后台管理</h2><p>进入此目录：incubator-dubbo-ops-master \\ dubbo-admin</p><p>在这个目录下打开终端，输入mvn clean package</p><p>等待build完成，完成后在target目录下以一个jar包</p><p>他就是dubbo的后台管理，是一个web应用程序，需要使用java -jar dubbo-admin-0.0.1-SNAPSHOT.jar命令来启动</p><p>启动前必须保持zookeeper在运行！！</p><p>然后在浏览器输入localhost:7001即可访问后台管理。初始时账户密码，均为root，如图</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-38291fa63abd2f59a2fb717fb8913623_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"689\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"689\" data-original=\"https://pic4.zhimg.com/v2-38291fa63abd2f59a2fb717fb8913623_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;689&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"689\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"689\" data-original=\"https://pic4.zhimg.com/v2-38291fa63abd2f59a2fb717fb8913623_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-38291fa63abd2f59a2fb717fb8913623_b.jpg\"/></figure><p>看到如下界面就表示安装成功！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8f8a1c9c1729696e8602050ea2216c7c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"955\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-8f8a1c9c1729696e8602050ea2216c7c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;955&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"955\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-8f8a1c9c1729696e8602050ea2216c7c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8f8a1c9c1729696e8602050ea2216c7c_b.jpg\"/></figure><h2>安装监控中心</h2><p>我们来到这个路径：incubator-dubbo-ops-master \\ dubbo-monitor-simple</p><p>在这个目录下打开终端，输入mvn clean package</p><p>等待build完成</p><p>build结束后在target文件夹下，有一个压缩包，解压它</p><p>到bin目录里面启动start.bat，看到下图就表示OK了</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c65db87260c0be2e729d2fd19abeaf36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic3.zhimg.com/v2-c65db87260c0be2e729d2fd19abeaf36_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;562&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"562\" data-original=\"https://pic3.zhimg.com/v2-c65db87260c0be2e729d2fd19abeaf36_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c65db87260c0be2e729d2fd19abeaf36_b.jpg\"/></figure><p>然后在浏览器输入：localhost:8080即可打开监控中心，如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7236e0c26413282ffe94192a2fc7a74b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"949\" class=\"origin_image zh-lightbox-thumb\" width=\"1919\" data-original=\"https://pic4.zhimg.com/v2-7236e0c26413282ffe94192a2fc7a74b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1919&#39; height=&#39;949&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"949\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1919\" data-original=\"https://pic4.zhimg.com/v2-7236e0c26413282ffe94192a2fc7a74b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7236e0c26413282ffe94192a2fc7a74b_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50617298", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 1, 
            "title": "初识Dubbo", 
            "content": "<p><b>介绍dubbo的文章一大堆，我就不重复造轮子了，各位对dubbo简介感兴趣的请自己百度。</b></p><p>我主要介绍dubbo官网上写的东西到底是什么。</p><p>官网：<a href=\"https://link.zhihu.com/?target=https%3A//dubbo.incubator.apache.org/zh-cn/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">home</a></p><h2><b>首先是这张图：</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-97b6cce28142186f6d53171aec9fe785_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1060\" data-rawheight=\"824\" class=\"origin_image zh-lightbox-thumb\" width=\"1060\" data-original=\"https://pic2.zhimg.com/v2-97b6cce28142186f6d53171aec9fe785_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1060&#39; height=&#39;824&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1060\" data-rawheight=\"824\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1060\" data-original=\"https://pic2.zhimg.com/v2-97b6cce28142186f6d53171aec9fe785_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-97b6cce28142186f6d53171aec9fe785_b.jpg\"/></figure><p>从序号为0的线条开始说：</p><ol><li>Container容器启动，provider开始工作</li><li>Provide向注册中心注册自己的服务（就是告诉注册中心我可以干嘛）</li><li>Consumer订阅某注册中心，然后注册中心把一个服务清单发送给Consumer</li><li>Consumer有了服务清单就知道要去哪里拿服务了</li><li>直连（直接连接到目标主机，属于同步调用）</li><li>监控服务的调用次数与调用时间等信息</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>最后是这张图：</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-376ea304efb2763a7038e02fc574a017_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1676\" data-rawheight=\"695\" class=\"origin_image zh-lightbox-thumb\" width=\"1676\" data-original=\"https://pic4.zhimg.com/v2-376ea304efb2763a7038e02fc574a017_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1676&#39; height=&#39;695&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1676\" data-rawheight=\"695\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1676\" data-original=\"https://pic4.zhimg.com/v2-376ea304efb2763a7038e02fc574a017_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-376ea304efb2763a7038e02fc574a017_b.jpg\"/></figure><p>我从左到右，从上往下说：</p><ul><li><b>面向接口代理的高性能RPC调用：</b></li></ul><p>用过mybatis吧？在mybatis里面，只需要写一个Dao层的接口（还得有一个mapper.xml）然后调用这个接口就可以完成对数据库的CRUD。面向接口代理的高性能RPC调用的原理更这个一样</p><ul><li><b>智能负载均衡</b></li></ul><p>消费者拿到需要的服务的主机地址后，dubbo会根据多种策略选择一个合适的主机地址给你，让你调用他的服务。</p><ul><li><b>服务自动注册与发现</b></li></ul><p>服务提供者将自己可以提供的服务告诉注册中心</p><p>注册中心就知道有多少服务提供者存在，且各自提供什么样的服务</p><p>消费者要使用一个服务</p><p>它就问注册中心“我要一个xxx服务，你有没有？”</p><p>注册中心一看，有！就把能提供xxx服务的主机地址告诉消费者，说“这些主机都可以满足你的欲望！” </p><p>消费者拿到这些主机地址后（注意注册中心返回的主机地址均是可用的主机，他会自动发现下线的主机）会通过一个负载均衡策略选择最适合的远程主机，然后发起调用。</p><ul><li><b>高度可扩展能力</b></li><li><b>运行期流量调度（灰度发布）</b></li></ul><p>比如有100台机器需要发布新架构。</p><p>先来20台跑一跑，一段时间后，这20台运行没问题的话，再增加到80台跑一跑，逐渐的替换掉这100台服务器。</p><ul><li>可视化的服务治理与运维</li></ul><p>鼠标点一点就知道服务的运行状况，需要部署对应的软件，dubbo的github上提供了</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>最后：</b></h2><p>请充分利用官网</p>", 
            "topic": [
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/50616871", 
            "userName": "tqz", 
            "userLink": "https://www.zhihu.com/people/d2a4150b3cdac93a8758279a468b553a", 
            "upvote": 4, 
            "title": "RPC简介（超清晰通俗！）", 
            "content": "<ul><li>全称是：远程过程调用（Remote Procedure Call）</li><li>在本地调用远程方法，就好像是调用本地方法一样</li><li>举例：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">远程机器上有一段代码：HelloImpl.java（实现类）\n\n你本地有一段代码：Hello.java （接口）\n\n然后：\n你在本地使用：\n\n         @Reference\n         private Hello hello;\n\n就可以为Hello这个接口注入实现类HelloImpl了。（是不是像spring的Ioc一样？）\n至于怎么注入的，以及在本地怎么找到远程我要的实现类的先不管，\n再多了解一点下面的RPC知识后就自然而然地知道了。\n\n\n</code></pre></div><ul><li>为什么是RPC不是http。</li><ul><li>存在这个问题是因为在经典的MVC RESTful开发中，前端只需要点击一个连接，就可以调用远程主机上的某些代码，执行服务，最后返回数据给前端。所以会思考，可否在后端里面像前端一样通过http调用，拿到远程主机返回的数据呢？</li><li>答案是：为了提高传输效率与安全，采用RPC而不是http</li><li>HTTP接口由于受限于HTTP协议，需要带HTTP请求头，这个请求头里面往往会携带很多无用的数据，导致传输起来效率或者说安全性不如RPC。</li><li>RPC自己定义了一种TCP协议进行通讯，它是一种技术，一种思想，可以使用很多技术来实现，比如gRPC可以通过http2来实现。</li><li>http的三次握手四次挥手等一些规矩增加了网络开销，http只适用于交互不大的系统，像淘宝这种亿级的系统，http扛不住。</li></ul><li>实现原理：（代理模式）</li><ul><li>扫描到@Reference注解后，就给它生成一个代理对象，将这个代理对象放进容器中。而这个代理对象的内部，就是通过httpClient来实现RPC调用的。</li><li>RPC将需要调用的对象序列化后传输过来，然后反序列化。</li></ul><li>技术要点：</li><ul><li>Call ID映射</li><li>序列化与反序列化</li><li>网络传输</li><li>要实现一个RPC框架，只需要把以上三点实现了就基本完成了</li></ul><li>原理，看图解释，按序号看调用过程</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d6ca7eb4f979b77a4aaac9c3b6315508_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb\" width=\"499\" data-original=\"https://pic1.zhimg.com/v2-d6ca7eb4f979b77a4aaac9c3b6315508_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;499&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"499\" data-original=\"https://pic1.zhimg.com/v2-d6ca7eb4f979b77a4aaac9c3b6315508_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d6ca7eb4f979b77a4aaac9c3b6315508_b.jpg\"/></figure><p>客户端要调用服务端的方法，客户端先告诉他的“小助手”stub，我要什么方法，参数是什么。</p><p>然后这个“小助手”会与服务端建立网络通讯传递方法调用信息，服务端的“小助手”接收到了客户端的请求，知道他要哪个方法，传递的什么参数，然后服务端的“小助手”就找到对应的方法，并执行，最后将结果通过网络返回给客户端的“小助手”，它再传给发起调用的地方。</p><p>客户端的“小助手”要将调用信息发送到服务端就要序列化请求，便于在网络中传输。</p><p>服务端的“小助手”需要反序列化后才知道参数到底是啥。</p><p>同样数据返回时依然需要序列化与反序列化<br/></p><p>UML时序图</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-56b109fcc45ac57f3e436f9ea29a630d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"593\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb\" width=\"593\" data-original=\"https://pic2.zhimg.com/v2-56b109fcc45ac57f3e436f9ea29a630d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;593&#39; height=&#39;568&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"593\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"593\" data-original=\"https://pic2.zhimg.com/v2-56b109fcc45ac57f3e436f9ea29a630d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-56b109fcc45ac57f3e436f9ea29a630d_b.jpg\"/></figure><p>影响RPC调用的因素主要是：1.客户端能否与服务端【快速】建立连接、2.序列化与反序列化的速度是否够快。</p>", 
            "topic": [
                {
                    "tag": "RPC框架", 
                    "tagLink": "https://api.zhihu.com/topics/20086162"
                }, 
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/tqz-dubbo"
}
