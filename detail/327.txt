{
    "title": "Micropython玩家汇", 
    "description": "Micropython 玩家讨论区", 
    "followers": [
        "https://www.zhihu.com/people/wu-yun-tao-26", 
        "https://www.zhihu.com/people/boy-music", 
        "https://www.zhihu.com/people/david-tan-16-81", 
        "https://www.zhihu.com/people/ynqjwfb", 
        "https://www.zhihu.com/people/tang-cafe", 
        "https://www.zhihu.com/people/fo-mian-jiang-jun", 
        "https://www.zhihu.com/people/wang-jin-jie-24", 
        "https://www.zhihu.com/people/huang-zhi-ming-37", 
        "https://www.zhihu.com/people/li-bai-tian-69-40", 
        "https://www.zhihu.com/people/niu-yi-37-92", 
        "https://www.zhihu.com/people/wei-98-52", 
        "https://www.zhihu.com/people/song-ni-yi-pi-ma-4-27", 
        "https://www.zhihu.com/people/zhong-chang-yi-72", 
        "https://www.zhihu.com/people/dreamfullstack", 
        "https://www.zhihu.com/people/chou-he-tun", 
        "https://www.zhihu.com/people/gu-ge-ge-62", 
        "https://www.zhihu.com/people/wang-liao-52", 
        "https://www.zhihu.com/people/dong-feng-zao-ji", 
        "https://www.zhihu.com/people/dong-bei-pian-bei-94", 
        "https://www.zhihu.com/people/fan-jin-wei-83", 
        "https://www.zhihu.com/people/liang-guai-95", 
        "https://www.zhihu.com/people/233-12-93", 
        "https://www.zhihu.com/people/jiang-shuai-73-59", 
        "https://www.zhihu.com/people/chen-shi-fu-47-95", 
        "https://www.zhihu.com/people/xhj-20-9", 
        "https://www.zhihu.com/people/mfei-92", 
        "https://www.zhihu.com/people/liu-bo-wen-74-75", 
        "https://www.zhihu.com/people/xteam_wx", 
        "https://www.zhihu.com/people/li-zhi-hua-47-88", 
        "https://www.zhihu.com/people/jiang-meng-95", 
        "https://www.zhihu.com/people/yangliying", 
        "https://www.zhihu.com/people/ccc-82-31-19", 
        "https://www.zhihu.com/people/eastbeach", 
        "https://www.zhihu.com/people/ymirsoft", 
        "https://www.zhihu.com/people/duo-wei-shi-jie-93", 
        "https://www.zhihu.com/people/xun-san-94", 
        "https://www.zhihu.com/people/li-wei-91-46-5", 
        "https://www.zhihu.com/people/wang-hao-yang-93", 
        "https://www.zhihu.com/people/kwong-25-82", 
        "https://www.zhihu.com/people/lu-hong-wang-6", 
        "https://www.zhihu.com/people/li-pu-cheng-74", 
        "https://www.zhihu.com/people/ceng-zhi-yi-62", 
        "https://www.zhihu.com/people/tian-jian-81", 
        "https://www.zhihu.com/people/wangrenai", 
        "https://www.zhihu.com/people/lao-liu-91-51", 
        "https://www.zhihu.com/people/lin-xian-jie-76", 
        "https://www.zhihu.com/people/Potf", 
        "https://www.zhihu.com/people/zi-zhou-99", 
        "https://www.zhihu.com/people/creed-69", 
        "https://www.zhihu.com/people/gantop-69", 
        "https://www.zhihu.com/people/li-zhong-08", 
        "https://www.zhihu.com/people/wu-yan-byxu", 
        "https://www.zhihu.com/people/haitao.lee", 
        "https://www.zhihu.com/people/artin85", 
        "https://www.zhihu.com/people/cao-gen-lao-you-tiao", 
        "https://www.zhihu.com/people/bg8aqa", 
        "https://www.zhihu.com/people/ruan-xun-23", 
        "https://www.zhihu.com/people/skq199101", 
        "https://www.zhihu.com/people/dan-ding-hui", 
        "https://www.zhihu.com/people/peng-teng-57", 
        "https://www.zhihu.com/people/chen-kuan-tong-27", 
        "https://www.zhihu.com/people/marissa-61-79", 
        "https://www.zhihu.com/people/li-zexian-62", 
        "https://www.zhihu.com/people/han-ya-32-21", 
        "https://www.zhihu.com/people/huang-jin-ming-21-5", 
        "https://www.zhihu.com/people/wangmaabc", 
        "https://www.zhihu.com/people/jiang-ying-hao-6", 
        "https://www.zhihu.com/people/dave-51-94", 
        "https://www.zhihu.com/people/holms-holms-31", 
        "https://www.zhihu.com/people/yang-jia-he-19", 
        "https://www.zhihu.com/people/yepe8vpI9htdy2J4", 
        "https://www.zhihu.com/people/yang-yun-long-26", 
        "https://www.zhihu.com/people/li-li-4-91-98", 
        "https://www.zhihu.com/people/LaputaFox", 
        "https://www.zhihu.com/people/cai-shu-xue-qian-32", 
        "https://www.zhihu.com/people/wang-xi-fan-82", 
        "https://www.zhihu.com/people/junjie-zeng-97", 
        "https://www.zhihu.com/people/qiu-tian-25-59-81", 
        "https://www.zhihu.com/people/yang-xian-sheng-45-76", 
        "https://www.zhihu.com/people/lulu-16-42", 
        "https://www.zhihu.com/people/chun-xiao-bai-41-91", 
        "https://www.zhihu.com/people/zhang-xiong-46-98", 
        "https://www.zhihu.com/people/davi3119", 
        "https://www.zhihu.com/people/kao-yan-huan-ge-huan-jing", 
        "https://www.zhihu.com/people/luo-mei-sa-si", 
        "https://www.zhihu.com/people/zhong-chen-yang-68", 
        "https://www.zhihu.com/people/xiao-long-55-31-16", 
        "https://www.zhihu.com/people/aries-72-61", 
        "https://www.zhihu.com/people/kuang-si-nian", 
        "https://www.zhihu.com/people/wo-lao-po-ash", 
        "https://www.zhihu.com/people/liang-zi-80-90", 
        "https://www.zhihu.com/people/wang-li-bin-huan-jin-kou-chi-jiao-zheng", 
        "https://www.zhihu.com/people/LilianSunflower", 
        "https://www.zhihu.com/people/xie-qun-qun-50", 
        "https://www.zhihu.com/people/jue-shi-mao-86", 
        "https://www.zhihu.com/people/mai-dang-95", 
        "https://www.zhihu.com/people/chong-bai-tai-yang", 
        "https://www.zhihu.com/people/han-feng-da-ren-75", 
        "https://www.zhihu.com/people/smithlyrics", 
        "https://www.zhihu.com/people/bu-jiao-tou-jiao-qie", 
        "https://www.zhihu.com/people/konamiue", 
        "https://www.zhihu.com/people/gu-zheng-chen", 
        "https://www.zhihu.com/people/checksome", 
        "https://www.zhihu.com/people/tsingjyujing", 
        "https://www.zhihu.com/people/lu-mou-lu", 
        "https://www.zhihu.com/people/jj-luo-21", 
        "https://www.zhihu.com/people/bei-du-qiu-hong", 
        "https://www.zhihu.com/people/yuan-jia-qiang-86", 
        "https://www.zhihu.com/people/la-pu-da", 
        "https://www.zhihu.com/people/aixiaodedoubi-1", 
        "https://www.zhihu.com/people/ilovecrt", 
        "https://www.zhihu.com/people/imqq-1210", 
        "https://www.zhihu.com/people/sky-15", 
        "https://www.zhihu.com/people/isaac-lee-41", 
        "https://www.zhihu.com/people/lillian-68-42", 
        "https://www.zhihu.com/people/yun-bin-26", 
        "https://www.zhihu.com/people/huang-zai-xian", 
        "https://www.zhihu.com/people/johnson5201314", 
        "https://www.zhihu.com/people/pang-zhi-hong-96-78", 
        "https://www.zhihu.com/people/f.hsiaotien", 
        "https://www.zhihu.com/people/chao-su-10", 
        "https://www.zhihu.com/people/johnny-63-54", 
        "https://www.zhihu.com/people/nero-56", 
        "https://www.zhihu.com/people/han-mei-er-53", 
        "https://www.zhihu.com/people/liu-yuan-56-21-51", 
        "https://www.zhihu.com/people/wen-lun-95", 
        "https://www.zhihu.com/people/shenyinian", 
        "https://www.zhihu.com/people/ai-wen-wen-ti-de-hai-luo", 
        "https://www.zhihu.com/people/su-kan-kan-5591", 
        "https://www.zhihu.com/people/jie-ke-chuan-chang-38-9", 
        "https://www.zhihu.com/people/stone-15-68", 
        "https://www.zhihu.com/people/chen-zhao-yu-2", 
        "https://www.zhihu.com/people/Leon_Woo", 
        "https://www.zhihu.com/people/jiang-wei-dong", 
        "https://www.zhihu.com/people/bu-yu-53", 
        "https://www.zhihu.com/people/cuishite", 
        "https://www.zhihu.com/people/wang-peng-83-68-26", 
        "https://www.zhihu.com/people/zhou-xiao-long-91-41"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/61659724", 
            "userName": "pro-am", 
            "userLink": "https://www.zhihu.com/people/e1ed5c58f9d96dce9c33046f15ab1bcf", 
            "upvote": 7, 
            "title": "机器学习基础：从入门到求职", 
            "content": "<p>       首先，我想真诚的跟大家说声抱歉，真的很久没更新知乎了！其次，我想衷心感谢所有关注该专栏的朋友们，特别特别感谢你们的关注和支持！</p><p>       一年多没更新文章，一方面是由于自己生活方面的一些事情所困，另一方面是自己当时面临毕业和找工作压力，确实有些力不从心。另外的话，当时接了一个写书的任务......所以整个下来，这一年多的时间里，我个人其实过得确实很累很累！</p><p>       幸运的是，事情终归都迎刃而解了！这一年多里，我顺利毕业、顺利到了自己最想去的公司、顺利进入数据行业，书也顺利出版了！</p><p>       下面对本书的基本内容进行说明，谨以此献给所有有需要的朋友们。</p><hr/><p>       书名就是本文的标题<b>《机器学习基础：从入门到求职》</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2ebb970138652b912aad1cda00945985_b.jpg\" data-rawwidth=\"790\" data-rawheight=\"409\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic2.zhimg.com/v2-2ebb970138652b912aad1cda00945985_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;409&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"790\" data-rawheight=\"409\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic2.zhimg.com/v2-2ebb970138652b912aad1cda00945985_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2ebb970138652b912aad1cda00945985_b.jpg\"/></figure><p>       写此书的目的很简单，主要是希望将机器学习通用的基础知识<b>体系化</b>、<b>通俗易懂</b>的进行呈现，帮助广大爱好者（特别是<b>跨行者</b>和<b>自学者</b>）节省宝贵的时间成本，在这激烈的竞争环境里，早日走进机器学习求职的起点！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-801ad9143d7fc2602515bafe4e7f7810_b.jpg\" data-rawwidth=\"922\" data-rawheight=\"719\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"922\" data-original=\"https://pic1.zhimg.com/v2-801ad9143d7fc2602515bafe4e7f7810_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;922&#39; height=&#39;719&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"922\" data-rawheight=\"719\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"922\" data-original=\"https://pic1.zhimg.com/v2-801ad9143d7fc2602515bafe4e7f7810_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-801ad9143d7fc2602515bafe4e7f7810_b.jpg\"/></figure><p><b>全书侧重理论和实践的结合，对涉及到的每个模型，基本都比较详细推导了其来龙去脉</b>（但有别于一般的学术型书籍，本书推导所用的符号和表达都基于实际业务场景，因此应该不存在看不懂或者很难看懂的情况）。另外，<b>每章的各个模型基本都配备了对应的应用实例</b>，让读者对相关模型的实际使用有一个更好的感观。除此之外，<b>对一些常用的机器学习技巧</b>（如特征工程、高阶特征映射、模型选择与模型调优、过拟合与正则化等）<b>和机器学习基础理论</b>（如生成模型与判别模型、方差与偏差分解、经验损失与结构风险等）<b>也进行了系统化的梳理与说明</b>。具体如下思维导图所述：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e445a42d45f60206315565d3f9143d52_b.jpg\" data-rawwidth=\"673\" data-rawheight=\"4096\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic3.zhimg.com/v2-e445a42d45f60206315565d3f9143d52_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;673&#39; height=&#39;4096&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"673\" data-rawheight=\"4096\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"673\" data-original=\"https://pic3.zhimg.com/v2-e445a42d45f60206315565d3f9143d52_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e445a42d45f60206315565d3f9143d52_b.jpg\"/></figure><p><b> 目前本书已在淘宝、天猫、京东、当当平台同步上市，欢迎有需要的朋友自由选购</b>（售价60~70的应该都是正版的）。下面是一些正版购买链接：</p><p><b>当当自营</b>：</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=http%3A//product.dangdang.com/26922181.html\" data-image=\"https://pic2.zhimg.com/v2-418bf1043aa43a66d8225272bfed75d1_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《机器学习基础：从入门到求职》(胡欢武)【简介_书评_在线阅读】 - 当当图书</a><p><b>京东自营</b>：</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//item.jd.com/12507447.html\" data-image=\"https://pic4.zhimg.com/v2-95daa2dfa093c322aa40cf736f2c4ac3_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《机器学习基础：从入门到求职》(胡欢武)【摘要 书评 试读】- 京东图书</a><p><b>电子工业出版社天猫官方旗舰店</b>：</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//detail.tmall.com/item.htm%3Fspm%3Da220m.1000858.1000725.1.2bee3149xP6lsY%26id%3D590091234160%26areaId%3D330100%26user_id%3D1932014659%26cat_id%3D2%26is_b%3D1%26rn%3D2aaa5d3375a069acbb5307a7387f6a84\" data-image=\"https://pic3.zhimg.com/v2-808d8263ddd574ac0fc656d850feaa0a_120x160.jpg\" data-image-width=\"336\" data-image-height=\"430\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官方正版 机器学习基础:从入门到求职 机器学习算法 深度神经网络 机器学习模型数据挖掘 Word2Vec/Doc2Vec模型原理推导和应用书籍</a><p>       如果想选择其它非官方自营店，也可在各平台直接搜索书名《机器学习基础：从入门到求职》。</p><hr/><p><b> 在此需要特别说明的是，由于本人水平实在有限，书中难免还存在一些有错误的地方，所以也欢迎购买了本书的小伙伴们积极提出批评和建议，帮助我一起勘误，在此先表示深深的感谢！</b></p><p><b>具体方式可以在本书的GitHub上以Issues形式提供</b>。同时，本书所有配套的案例代码和数据等资料也会陆续上传到本项目下，另外还会补充一些本书里面没有的资料（如数学基础知识、更多的项目知识等）进去，欢迎大家关注！<b>GitHub链接如下</b>：</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//github.com/proam/Fundamentals_of_Machine_Learning\" data-image=\"https://pic3.zhimg.com/v2-ab3fb0586004e9a1e663006160f818ee_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">proam/Fundamentals_of_Machine_Learning</a><p>       最后说明一下，本书的部分内容，以及本书里面还没有的一些内容，后期也会陆续同步到本专栏下供大家交流讨论，我会尽量在工作之余抽时间更新内容，感谢大家的支持！</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": [
                {
                    "userName": "David paul", 
                    "userLink": "https://www.zhihu.com/people/dd09d45f1f531bd22e299af18efd07d7", 
                    "content": "支持", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "PhysicsJack", 
                    "userLink": "https://www.zhihu.com/people/a38e1591fd4478bc9c15a10f8b53fbb4", 
                    "content": "听了作者live过来的，支持！", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "杜冉枫", 
                    "userLink": "https://www.zhihu.com/people/56a7f794277d2a3559509f8f6d1302f2", 
                    "content": "五一的时候在博库书城看到的，对比下感觉这本非常适合入门就原价入手了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "cathycheny", 
                    "userLink": "https://www.zhihu.com/people/7f248388c723b064d269eef59fae3ec4", 
                    "content": "<p>电子书啥时能买呢</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "捉妖记", 
                    "userLink": "https://www.zhihu.com/people/e80312f440fee8e7f09abe8ac4f1ebb3", 
                    "content": "<p>书很不错，适合入门学习。<br>书中的印刷错误挺多的，比如P7，监督学习英文应该是Supervised，P8，Unsupervised；P10，第7行，条件概率分布应为P(Y|X)，P11，表1-2中，用户M；P65，第12行公式，x下标应为i，不是j；P101，第3行，Logistic回归；第6行，正态分布。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "pro-am", 
                            "userLink": "https://www.zhihu.com/people/e1ed5c58f9d96dce9c33046f15ab1bcf", 
                            "content": "嗯嗯，感谢指正，这些在第二次印刷的里面都改正了[拜托]", 
                            "likes": 0, 
                            "replyToAuthor": "捉妖记"
                        }
                    ]
                }, 
                {
                    "userName": "捉妖记", 
                    "userLink": "https://www.zhihu.com/people/e80312f440fee8e7f09abe8ac4f1ebb3", 
                    "content": "胡老师，第二次印刷的，有没有勘误表分享一下？", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52165251", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "被前女友骂死宅真恶心了", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ee4126dd3863704ea4459dc7edffa402_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"534\" data-original=\"https://pic3.zhimg.com/v2-ee4126dd3863704ea4459dc7edffa402_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;534&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"534\" data-original=\"https://pic3.zhimg.com/v2-ee4126dd3863704ea4459dc7edffa402_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ee4126dd3863704ea4459dc7edffa402_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d69d4f73fea0e8e97f2ebe24bf56717b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"533\" data-original=\"https://pic4.zhimg.com/v2-d69d4f73fea0e8e97f2ebe24bf56717b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;533&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"533\" data-original=\"https://pic4.zhimg.com/v2-d69d4f73fea0e8e97f2ebe24bf56717b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d69d4f73fea0e8e97f2ebe24bf56717b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2a7934f0bd590744092c751fde139752_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-2a7934f0bd590744092c751fde139752_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;522&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-2a7934f0bd590744092c751fde139752_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2a7934f0bd590744092c751fde139752_b.jpg\"/></figure><p>停更好久了，不过最近真的好忙，休息过来再来玩。</p>", 
            "topic": [
                {
                    "tag": "二次元", 
                    "tagLink": "https://api.zhihu.com/topics/19569409"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42711316", 
            "userName": "KHUN刘坤", 
            "userLink": "https://www.zhihu.com/people/853c5cd6351c229d363f970a1fd0d3e6", 
            "upvote": 5, 
            "title": "通过《Closer》的Remake教你如何扒歌", 
            "content": "<p>前几天一个同学想扒一下这首歌，于是课上花了两个小时扒了一下，想要原版工程文件加我微信就好啦。微信15726661465</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1015694256425570304\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic3.zhimg.com/80/v2-186f27240f20f41e195eec16a5ae2ede_b.jpg\" data-lens-id=\"1015694256425570304\"><img class=\"thumbnail\" src=\"https://pic3.zhimg.com/80/v2-186f27240f20f41e195eec16a5ae2ede_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1015694256425570304</span></span></a><p></p>", 
            "topic": [
                {
                    "tag": "音乐", 
                    "tagLink": "https://api.zhihu.com/topics/19550453"
                }, 
                {
                    "tag": "烟鬼组合（The Chainsmokers）", 
                    "tagLink": "https://api.zhihu.com/topics/20063859"
                }, 
                {
                    "tag": "Ableton Live 10", 
                    "tagLink": "https://api.zhihu.com/topics/19694773"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42081069", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "多帅哦", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=http%3A//bd.kuwo.cn/yinyue/5537036%3Ffrom%3Dbaidu\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">アイネクライネ-米津玄師-单曲-酷我音乐-好音质用酷我</a>。其实是想分享八爷的歌</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1013013866980069376\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic4.zhimg.com/80/v2-9125cb278c54489ba67eb3b1ecc8bd67_b.jpg\" data-lens-id=\"1013013866980069376\"><img class=\"thumbnail\" src=\"https://pic4.zhimg.com/80/v2-9125cb278c54489ba67eb3b1ecc8bd67_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1013013866980069376</span></span></a><p></p>", 
            "topic": [
                {
                    "tag": "音乐", 
                    "tagLink": "https://api.zhihu.com/topics/19550453"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "DIY", 
                    "tagLink": "https://api.zhihu.com/topics/19553863"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38381971", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 1, 
            "title": "世界那么大，语言那么多，为什么选择Micropython，它的优势在哪?", 
            "content": "<p>世界那么大，语言那么多，为什么选择Micropython，它的优势在哪?</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最近国内MicroPython风靡程序界，是什么原因导致它这么火呢？是因为他功能强大，遵循Mit协议开源么？</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>错！因为使用它真的是太舒服了！！！</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Micropython的由来，这得益于Damien George这位伟大的计算机工程师，Damien George每天都会使用Python工作，他有一天冒出一个大胆的想法：能否用Python来控制单片机，从而实现对机器人的操作呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Python语言本身就是一款简单上手的脚本语言，一些非计算机专业的爱好者都选Python语言作为入门语言，但是美中不足（中国跟美国为什么不参加世界杯），它不能实现对一些底层的操作，在硬件领域毫不起眼。所以，Damien George利用6个月时间打造了MicroPython，这就是MicroPyhton的由来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>MicroPython它基于ANSIC，语法跟Python3基本一致，拥有独立的解析器、编译器、虚拟机和类库等。目前他支持基于32-bit的ARM处理器，比如说STM32F401、STM32F405、STM32F407。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>下面告诉大家我使用汇编、C、MicroPython这3种语言做了以下几点比较，为什么说MicroPython使用如此舒服呢？？！！！</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. 编译环境</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>C语言、汇编语言在编写程序之前，需要下载编译环境，然而Micropython不需要任何编译环境，只需将开发板U口插入电脑，便可在电脑上出现一个盘符，跟插入U盘似得，然后打开U盘，直接记事本编辑main.py就行，它的舒服在于MicroPython不需要任何工具和环境，任何文本工具+1块开发板即可开发编译，可以给它起个外号——口袋编程计算机。。。国内做的比较好的就是TPYBoard v102开发板，有兴趣的可以去学习了解一下，它资料齐全，有视频学习资料，还是不错的，我就是这么入坑的哦。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a40cf33dfd8516a5ccc922a52d353bb5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"265\" data-rawheight=\"93\" class=\"content_image\" width=\"265\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;265&#39; height=&#39;93&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"265\" data-rawheight=\"93\" class=\"content_image lazy\" width=\"265\" data-actualsrc=\"https://pic2.zhimg.com/v2-a40cf33dfd8516a5ccc922a52d353bb5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0c089e153c89dd9981deb73c30c40fff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"399\" data-rawheight=\"81\" class=\"content_image\" width=\"399\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;399&#39; height=&#39;81&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"399\" data-rawheight=\"81\" class=\"content_image lazy\" width=\"399\" data-actualsrc=\"https://pic4.zhimg.com/v2-0c089e153c89dd9981deb73c30c40fff_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. 操作难度</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>汇编语言基本操作简单，但是要实现复杂的项目目标相对较难，代码冗长，调试查错困难；C语言有了语句和大量的库函数，相对汇编来说简单了；MicroPython有了比C更多的库函数，代码格式不仅变得简洁，在库的支持下很多函数和方法都不用自己再去写，直接import<br/>xx就可以，把类库导入就ok。以前点一个灯需要五六行代码，现在只需要1行代码就可以点亮LED，So Easy。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-910d03b7a8342917c4ea5a13470fd143_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"231\" data-rawheight=\"70\" class=\"content_image\" width=\"231\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;231&#39; height=&#39;70&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"231\" data-rawheight=\"70\" class=\"content_image lazy\" width=\"231\" data-actualsrc=\"https://pic4.zhimg.com/v2-910d03b7a8342917c4ea5a13470fd143_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. 程序结构</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>汇编语言总体使用跳转结构，不管是子程序的调用还是循环或者散转理论上都是用跳转的方式，中断操作或强行出程序段的操作都需要对压栈有有精确的控制，要求非常严格；C语言总体使用循环结构或顺序结构，不再需要到处跳来执行程序，中断操作会自动进行压栈不需要人为干预，在时序要求高时可嵌入汇编提高效率；MciroPython可以使用C的程序结构或者使用线程结构，线程结构要求的是严格且合理的分配好线程工作时间不能出现冲突，对资源要有很好的把控，不能空挂线程浪费资源，理论上多线程可以更高效的运行，虽然单核同时只能运行单线程但是从宏观角度来说是同步的，在时间要求不严格的情况下可以有效的降低程序的编写难度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4. 编写方式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>汇编在不使用宏的情况下，通常都是指令直接操作单元，需要记忆大量的数据单元用途，且由于程序行数较多(可能会到一两千行)需要来回翻看程序代码，整个编写流程比较繁琐。而且由于都是8位的单元复杂的数据运算需要嵌套C语言来完成；C语言使用使用任何变量都需要先定义，相比不用特意去记忆变量名称，整体结构清晰多数编程软件都有跳转子程序功能，查找程序块非常方便。有大量的成品头文件包含各种常用函数，相对少了很多复杂的程序代码编写；MicroPython继承了C的编写优点，且不需要预定义，不需要任何结束符号，只需要换行即可继续编写，但是要注意一些特殊情况下Tab键的使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5. 易读性</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>汇编本身难读因为标记少且直接操作单元，视觉结构上不仅就两列代码而且需要不停的跳转所以本身在读取上就很难；C语言简单的操作代码比较清晰，但是复杂的就会方法中找方法，很多复杂的代码非本人去找，就让人感到非常头疼；MicroPython相比C有更好的易读性，且由于取消了很多特殊符号整体感觉也比较清晰，很多方法都是单独写成单独的库，直接调用即可，每个功能都有单独的类库，看起来极其方便，一目了然。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>通过这几个维度的对比，大家应该很轻松就知道我为什么说MicroPython用起来让人舒服。目前AI是当前社会发展的主流，MicroPython的出现是一个时机，让很多像我这样的初学者，也可以自己做智能小车，学习硬件，它比C语言学习更简单，更适合加入教育，人人都可以学编程，写程序，由此可以看出MicroPython未来市场前景是非常大的，是比Arduino更强大、更容易编程的开发板。</p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }, 
                {
                    "tag": "语言", 
                    "tagLink": "https://api.zhihu.com/topics/19551683"
                }, 
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }
            ], 
            "comments": [
                {
                    "userName": "atp", 
                    "userLink": "https://www.zhihu.com/people/8f5ab15b041df856bf319c7b5e29ab05", 
                    "content": "效率怎么样，能不能在线调试？", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "ynqjwfb", 
                    "userLink": "https://www.zhihu.com/people/c337bd9d15dd675ef737ce4d88f7ec26", 
                    "content": "<p>整个署假都在找组织 ，终于找到了，收下我哟。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38084371", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 1, 
            "title": "Micropython 鞋码匹配仪（标题图与内容无关）", 
            "content": "<p> 实物略low，不上图了哈哈。实测有一点点误差。下面是原理和代码。</p><p>鞋码匹配仪，利用超声波测距的原理。通过使用超声波遇到障碍返回的特性，计算超声波放出与返回的时间计算来测定障碍与超声波模块的距离。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    鞋码匹配仪的固有大小已知，在脚放入时，大小会发生改变 使用已知距离对改变后的距离做差获得脚的尺寸，再通过尺寸与距离的转换得到正确的鞋码（此处使用标准鞋码）。</p><p>1</p><p><b>所需元器件</b></p><p>    超声波模块 1个</p><p>    TPYBoard v102板子 1块</p><p>    四位数码管 1个</p><p>    micro USB数据线 1条</p><p>    杜邦线 若干</p><p>2</p><p><b>超声波模块工作原理</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    (1)采用IO口TRIG触发测距，给最少10us的高电平信号。</p><p>    (2)模块自动发送 8 个 40khz 的方波，自动检测是否有信号返回。</p><p>    (3)有信号返回，通过 IO 口 ECHO 输出一个高电平，高电平持续的时间就是超声波从发射到返回的时间。测试距离=(高电平时间*声速(340M/S))/2。</p><p>    如下图接线，VCC 供 5V电源， GND 为地线，TRIG 触发控制信号输入，ECHO 回响信号输出等四个接口端。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-81a6bc4886febca6758f1af5672e3fcc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"280\" class=\"content_image\" width=\"373\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;373&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"280\" class=\"content_image lazy\" width=\"373\" data-actualsrc=\"https://pic1.zhimg.com/v2-81a6bc4886febca6758f1af5672e3fcc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>3</p><p><b>控制四位数码管显示数字</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c5f7eb513cf278cac1b16c9fd63bc6e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"103\" class=\"content_image\" width=\"245\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;245&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"103\" class=\"content_image lazy\" width=\"245\" data-actualsrc=\"https://pic2.zhimg.com/v2-c5f7eb513cf278cac1b16c9fd63bc6e9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-47a8103682adac90fe56ac5fb507f93f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"247\" data-rawheight=\"163\" class=\"content_image\" width=\"247\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;247&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"247\" data-rawheight=\"163\" class=\"content_image lazy\" width=\"247\" data-actualsrc=\"https://pic4.zhimg.com/v2-47a8103682adac90fe56ac5fb507f93f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p> （1）1、2、3、4是“位选”针脚，用于控制具体哪一位显示。</p><p>    （2）a、b、c、d、e、f、g、dp（h）是“段选”针脚，用法和1位数码管一致，用来显示具体的数值。</p><p>4</p><p><b>接线图</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-85b35672fc3ba448c45a8a12bf582e07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb\" width=\"534\" data-original=\"https://pic4.zhimg.com/v2-85b35672fc3ba448c45a8a12bf582e07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;534&#39; height=&#39;491&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"534\" data-original=\"https://pic4.zhimg.com/v2-85b35672fc3ba448c45a8a12bf582e07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-85b35672fc3ba448c45a8a12bf582e07_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>5</p><p><b>源代码</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">import pyb\nfrom pyb import Pin\nfrom pyb import Timer\nfrom machine import SPI,Pin\n  \nTrig = Pin(&#39;X2&#39;,Pin.OUT_PP)\nEcho = Pin(&#39;X1&#39;,Pin.IN)\nnum=0\nflag=0\nrun=1\ndef start(t):\n         global flag\n         global num\n         if(flag==0):\n                   num=0\n         else:\n                   num=num+1\ndef stop(t):\n global run\n         if(run==0):\n                   run=1\nstart1=Timer(1,freq=10000,callback=start)\nstop1=Timer(4,freq=2,callback=stop)\n  \nsizecc = [35,36,37,38,39,40,41,42,43,44,45,46,47]#280-47 -5\nwhile True:\n         if(run==1):\n                   Trig.value(1)\n                   pyb.udelay(100)\n                   Trig.value(0)\n                   while(Echo.value()==0):\n                                     Trig.value(1)\n                                     pyb.udelay(100)\n                                     Trig.value(0)\n                                     flag=0\n                   if(Echo.value()==1):\n                                     flag=1\n  while(Echo.value()==1):\n                                               flag=1\n                   if(num!=0):\n                                     #print(&#39;num:&#39;,num)\n                                     distance=num/1000*34000/2\n                                     print(&#39;Distance&#39;)\n                                     print(distance,&#39;mm&#39;)\n                                     cc = (int)((distance-215)/5)\n                                     if cc&lt;0:\n                                               cc=0\n                                     elif cc&gt;12:\n                                               cc=12\n                                     print(sizecc[cc],&#39;cc&#39;)\n                   flag=0\n                   run=0</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "DIY", 
                    "tagLink": "https://api.zhihu.com/topics/19553863"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这缩进很硬核啊</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37646060", 
            "userName": "孤单彼岸", 
            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
            "upvote": 43, 
            "title": "记一次\b夏洛克式的debug经历", 
            "content": "<p>这篇文章记录一次神奇的Debug经历。</p><p>由于一次奇怪的系统故障，两位程序员寻找蛛丝马迹一步步推导出原因，并在系统日志中找到相关证据，验证了推理的正确性。</p><p>其中的心路体验正如夏洛克·福尔摩斯的名言：<b>排除了所有不可能后，剩下的一定就是真相。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文章内容略专业化。</p><p>程序员朋友可能会从案例中有所借鉴。</p><p>如果您对编程不熟悉，也可以当作趣味读物阅读。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 案发现场</b></h2><p>那天和同事吃晚饭回来，同事突然说我的服务器挂了。</p><p>咋一打听，原来是他所负责的客户端发往服务器的所有API请求，都返回了<code>429 Too Many Request</code>错误。</p><p>这个错误是后台框架自定义的访问频率限制所抛出的异常。当某个客户端在一定时间内访问次数超过一定数量时，服务器将自动停止服务，并抛出异常。   </p><p>换句话说也就是说，这个机制是为了防止DOS攻击的。</p><p>（当然，防不了DDOS。）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我看了眼代码，当前设置的频率是每分钟500次。</p><p>再瞅一眼日志，尽管客户端正在按照一定频率给服务器发心跳检测的API请求，但频率远小于每分钟10次，不应该触发这个机制。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 线索收集</b></h2><p>恰好当时老板带着朋友想体验一下我们的系统，于是我和同事赶紧开始满头大汗地debug。</p><p>我真是一脸蒙逼啊，使用这个熟悉的后台框架这么多年来，还真没有遇到乱抛429错误（False Alarm）的情况。</p><p>无奈，只能先开始一步步收集线索。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先复现一下问题，用这个“罪犯”客户端，访问我的服务器，返回的HTTP状态码是<code>429</code> 。</p><p>使用 <code>curl -i</code> 命令查看得到的响应Header内容如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1e8c34b675c0f612b1df6f859c091306_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-1e8c34b675c0f612b1df6f859c091306_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;719&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-1e8c34b675c0f612b1df6f859c091306_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1e8c34b675c0f612b1df6f859c091306_b.jpg\"/></figure><p>根据框架相关知识可知，这个错误是由某中间件 <code>throttle</code> 引起的。对应的，在 <code>ThrottleRequests</code> 类中，会尝试判断当前客户端的访问次数是否超过一定数量。</p><p>其中相关信息是存储在缓存 <code>cache</code> 中，为了让系统尽快恢复，我们只能忍痛破坏了案发现场。</p><p>使用命令清除缓存后，不再产生 <code>429 Too Many Requests</code> 错误。</p><p>老板带着朋友顺利体验了系统。</p><p>我和小伙伴开始摸索查找相关原因。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>清除缓存后，访问服务器，得到的结果是合法请求：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b0fc6703157a0aa8d57aa34ad79ff3d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"722\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b0fc6703157a0aa8d57aa34ad79ff3d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;722&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"722\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b0fc6703157a0aa8d57aa34ad79ff3d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b0fc6703157a0aa8d57aa34ad79ff3d1_b.jpg\"/></figure><p>差别只在于其中几个参数的值，最诡异的是某两个参数的值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-13f2a206d68f695ef8a644a0185669aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb\" width=\"772\" data-original=\"https://pic3.zhimg.com/v2-13f2a206d68f695ef8a644a0185669aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;772&#39; height=&#39;290&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"772\" data-original=\"https://pic3.zhimg.com/v2-13f2a206d68f695ef8a644a0185669aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-13f2a206d68f695ef8a644a0185669aa_b.jpg\"/></figure><p>他们的含义分别是：</p><p><code>X-RateLimit-Limit</code> ：访问请求限制次数。</p><p><code>X-RateLimit-Remaining</code> ：访问请求限制剩余可用次数。</p><p><code>Retry-After</code> ：在xx秒后可以重试。</p><p><code>X-RateLimit-Reset</code> ：限制重置的时间，对应当前时间+ <code>Retry-After</code> 时间长度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>正常情况下，若设置1分钟为频率限制范围，即使超额，参数 <code>Retry-After</code> 一定是 60 以内的整数。而现在居然是 <code>7652</code> ，这是一个表示 两个小时左右 的时间秒数。</p><p>对应的， <code>X-RateLimit-Reset</code> 也指向了两小时后的时间点：晚上23：04分。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e929cf1d83ada563fae037989122f5bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e929cf1d83ada563fae037989122f5bd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;187&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e929cf1d83ada563fae037989122f5bd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e929cf1d83ada563fae037989122f5bd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 源码分析</b></h2><p>这次系统故障的直接原因是抛出HTTP状态码为 <code>429 Too Many Request</code> 的异常。</p><p>在框架中，访问频率限制由中间件 <code>throttle</code> 完成。</p><p>查看访问频率限制的主要实现逻辑如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d64aaca4dc1ca572cfacb0cbac5fdcb6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d64aaca4dc1ca572cfacb0cbac5fdcb6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d64aaca4dc1ca572cfacb0cbac5fdcb6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d64aaca4dc1ca572cfacb0cbac5fdcb6_b.jpg\"/></figure><p>处理方法的 handle 函数的逻辑很清晰，解释如下：</p><p><b>1. 根据访问请求</b> <b><code>$request</code> 生成客户端标识</b> <b><code>$key</code> ；</b></p><p><b>2. 解析出允许的最大尝试请求数量</b> <b><code>$maxAttempts</code> ；</b></p><p><b>3. 调用</b> <b><code>$this-&gt;limiter</code> 的 <code>tooManyAttempts</code></b> <b>方法判断是否产生太多请求，若是则抛出异常（即出现的429错误）；</b></p><p><b>4. 否则使用</b> <b><code>$this-&gt;limiter</code> 的</b> <b><code>hit</code> 方法记录当前请求；</b></p><p><b>5. 调用</b> <b><code>$next</code> 方法，将请求传递到下一个处理函数中；</b></p><p><b>6. 在返回前，在HTTP响应的 <code>Header</code> 中添加一些信息。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>#### handle方法逻辑分析分支1/2</b></p><p>仔细查看 <code>tooManyAttempts</code> 方法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-23189462eb4912e9743f986cfa22d51f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"513\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-23189462eb4912e9743f986cfa22d51f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;513&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"513\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-23189462eb4912e9743f986cfa22d51f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-23189462eb4912e9743f986cfa22d51f_b.jpg\"/></figure><p>这个方法的参数有三个：</p><p><code>$key</code>：客户端的标识</p><p><code>$maxAttempts</code>：允许的最大尝试数量；</p><p><code>$decayMinutes</code>：延迟分钟数，默认为 <code>1</code> ；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>方法中使用 <code>attempts</code> 方法获取客户端的尝试数量，判断其是否大于 <code>$maxAttempts</code> 。</p><p>若否，则直接返回 <code>false</code> ，这是大多数访问请求能够正常处理时的逻辑分支；</p><p>否则，判断在当前缓存 <code>$this-&gt;cache</code> 中，是否存在 <code>$key . &#39;:timer&#39;</code> 键值。</p><p><b>（这个健值对应的内容表示的是当前客户端对应的计时器。）</b></p><p>如果计时器存在，说明还在计时器范围内，同时超过了最大次数，确实产生太多请求尝试，返回 <code>true</code> ；否则，说明计时器已经过期，需要开始新周期的计数，调用 <code>resetAttempts</code> 重设请求次数。</p><p>查看一下 <code>attempts</code> 方法的逻辑，非常清晰，尝试从缓存中读取 <code>$key</code> 对应的值，如果不存在返回 <code>0</code> 。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7eee9bec95362ebd05686fa16d07e64e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-7eee9bec95362ebd05686fa16d07e64e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-7eee9bec95362ebd05686fa16d07e64e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7eee9bec95362ebd05686fa16d07e64e_b.jpg\"/></figure><p>查看 <code>resetAttempts</code> 方法的逻辑，也很清晰，将 <code>$key</code> 从当前缓存中移除。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ebc72b5515174e0180aea3bdb003359b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-ebc72b5515174e0180aea3bdb003359b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;226&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-ebc72b5515174e0180aea3bdb003359b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ebc72b5515174e0180aea3bdb003359b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>#### handle方法逻辑分析2/2</b><br/>如果没有抛出异常，正常访问时会调用 <code>hit</code> 方法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dae71ea7891eece705bf5eca63947fcd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"671\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-dae71ea7891eece705bf5eca63947fcd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;671&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"671\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-dae71ea7891eece705bf5eca63947fcd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dae71ea7891eece705bf5eca63947fcd_b.jpg\"/></figure><p>这个方法将记录下客户端的访问次数并正确设置计时器：</p><p>1.<code>$this-&gt;cache-&gt;add</code> 方法的三个参数分别表示键、值、超时期限；</p><p>2.在缓存中添加键为 <code>$key . &#39;:timer&#39;</code> ，内容为 <code>$this-&gt;availableAt($decayMinues * 60)</code> ，并设置超时分钟；</p><p>3.在缓存中添加键 <code>$key</code> ，内容为 <code>0</code> ，设置超时期限；</p><p>4.调用缓存的<code>imcrement</code> 方法，返回键为 <code>$key</code> 的自增结果；</p><p>5.若 <code>$added</code> 的值为 <code>false</code> （键值存在的情况）且 <code>$hits</code> 等于 <code>1</code> （首次自增），则需要调用 <code>put</code> 为其设置超时。</p><p>（这里的逻辑是为了处理多个进程之间的并发问题。）</p><p>6.返回命中次数 <code>$hits</code> 。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>至此，可以总结一下中间件的工作原理：</b></p><p>1.使用 <code>$this-&gt;cache</code> 存储，这是一个key-value的缓存工具，可配置为文件、Redis或Memcache；</p><p>2.通过两种键实现对每个独立客户端的信息存储， <code>$key</code> 表示客户端访问次数， <code>$key . &#39;:timer&#39;</code> 表示客户端的计时器；</p><p>3.每次请求发生时，先判断当前记录的<b>访问次数</b>是否*<b>未达到*</b>最大允许次数，若是则直接放行；</p><p>4.否则判断当前<b>计时器</b>是否存在，若存在说明还在当前范围内，需要抛异常；否则说明周期更新，重置记录次数。</p><h2><b>## 真相只有一个</b></h2><p>结合此前的遗留的线索，有以下几个疑点：</p><p>线索1）为什么最近1分钟内的访问次数明显低于500次，却抛出了 <code>Too Many Request</code> 异常；</p><p>线索2）响应中 <code>X-RateLimit-Limit</code> 的值是 500 ；</p><p>线索3）响应中的 <code>Retry-After</code> 和 <code>X-RateLimit-Reset</code> 都指向了一个未来的时间节点，当天晚上23：04分；</p><p>线索4）最近一次成功访问，大概在下午17点左右；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>根据线索1）可知，在方法 <code>tooManyAttempts</code> 中，一定返回了 <code>true</code> 。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-781d9d622996907a994d59e0a5f554b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"513\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-781d9d622996907a994d59e0a5f554b8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;513&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"513\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-781d9d622996907a994d59e0a5f554b8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-781d9d622996907a994d59e0a5f554b8_b.jpg\"/></figure><p>如果始终进入这个语句，自然不会调用 <code>resetAttempts</code> 方法，因此线索2）的表现是符合逻辑的。<br/></p><p>问题来了，为什么始终进入这个语句？根据条件判断可知，是缓存中始终带有 <code>$key . &#39;:timer&#39;</code> 这个键。</p><p>可是理论上，这个计时器应该每隔一分钟就被清除了的。</p><p>现在的实际情况是没有被清除。</p><p><b>那说明计时器的生成逻辑一定出了问题。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5b45582d24869f55df3d4cdca815492b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5b45582d24869f55df3d4cdca815492b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;345&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5b45582d24869f55df3d4cdca815492b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5b45582d24869f55df3d4cdca815492b_b.jpg\"/></figure><p><b>要么是</b> <b><code>$decayMinutes</code> 突然变成了一个非常大的数值。</b></p><p><b>要么是根据</b> <b><code>$decayMinutes</code> 生成的过期时间有问题。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>根据线索3）可知， <code>Retry-After</code> 的值较大，其计算逻辑在 <code>buildException</code> 方法中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-08eb3239f216b552f3c74aa239e0b70d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"617\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-08eb3239f216b552f3c74aa239e0b70d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;617&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"617\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-08eb3239f216b552f3c74aa239e0b70d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-08eb3239f216b552f3c74aa239e0b70d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a3ae2756babb8781ee25df0135d8bf1a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-a3ae2756babb8781ee25df0135d8bf1a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;207&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-a3ae2756babb8781ee25df0135d8bf1a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a3ae2756babb8781ee25df0135d8bf1a_b.jpg\"/></figure><p>对应的 <code>availableIn</code> 方法逻辑如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-11910023bdf855c99a84e8344ac99684_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-11910023bdf855c99a84e8344ac99684_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;192&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-11910023bdf855c99a84e8344ac99684_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-11910023bdf855c99a84e8344ac99684_b.jpg\"/></figure><p>表示的逻辑是<b>计时器内容</b>减去<b>当前时间</b>。<br/>如果说bug发生的时刻，若<b>当前时间</b>无误的话，说明<b>计时器的时间</b>设置在了晚上23点左右。</p><p>近期并没有对相关配置进行修改，那么唯一的可能性就是：</p><p>…</p><p>…</p><p>…</p><p><b>在添加缓存计时器的那一刻，系统时间出问题了！</b></p><p>也许是因为时区设置错误等可能性，曾经在某段时间变成了晚上23点左右的时间，此后又恢复了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>得出这个结论后，另一位小伙伴快速帮助查找了系统日志，找到了证据：</p><p>使用命令 <code>vim /var/log/syslog</code> 可以查看系统日志：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2841651823e6b183a284bae733e44d00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-2841651823e6b183a284bae733e44d00_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;601&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-2841651823e6b183a284bae733e44d00_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2841651823e6b183a284bae733e44d00_b.jpg\"/></figure><p>真相只有一个。<br/></p><p>1）下午14：40左右，系统自动同步时间发生错误，导致系统时间发生跳变，瞬间抵达“<b>未来时间</b>”22：40。</p><p>2）此后，尽管时间错误，但系统相关逻辑正常实施。</p><p>3）在此期间，中间件 <code>throttle</code> 在缓存产生的<b>某个计时器过期时间</b>设置为晚上23点左右。</p><p>4）因为某种原因，系统时间又跳变为正常的下午15点左右；此时，之前生成的计时器键值在<b>晚上23点前</b>都不会被清除。</p><p>5）随着时间的增长，由于这个计时器一直没有移除，积累访问次数不断增加，大约在晚上17点达到500次，开始抛错；</p><p><b>（这里与线索4的情况相符。）</b></p><p>6）直到晚上20点发现时，访问次数一直累积在500次未能清空，每次访问都抛出 <code>429 Too Many Requests</code> 异常。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>## 后记</b><br/></h2><p>这是我记忆中最有趣的一次bug调试经历。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先，作为程序员，我们没有写出任何bug；</p><p>但是由于<b>系统时间的跳变</b>和<b>后台依赖的缓存超时机制</b>，bug实实在在地产生了。</p><p>当我们开始调试时，案发现场已经被破坏了。<br/></p><p>我们只能遵循着代码的逻辑，一步一步推理可能造成这种现象的原因。</p><p>最终我们排除了其它可能性，把原因锁定在系统时间的问题上，并通过查找系统日志验证了我们的推理。</p><p>有一种福尔摩斯探案的感觉：</p><p><b>排除了所有不可能，剩下的那一个，即使再不合理，也一定是真相。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>有趣的是，即使我们不进行任何操作，这个bug理论上在晚上23点后将被自动修复，系统自动恢复正常。</b></p><p>小伙伴说，还好系统跳变的时间是晚上23点左右，而不是在我们调试过程中的时刻（20点-21点）。</p><p>否则可能造成的情况就是，我们在这儿吭哧吭哧调着bug，然后发现啥也没做，突然就好了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-20453e386f3020f2ad50ee72fed8e6a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"235\" class=\"content_image\" width=\"277\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;277&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"235\" class=\"content_image lazy\" width=\"277\" data-actualsrc=\"https://pic2.zhimg.com/v2-20453e386f3020f2ad50ee72fed8e6a5_b.jpg\"/></figure><p>- END -</p><p>本文首发于微信公众号：孤单彼岸</p><p>收藏有趣的故事，总结实用的知识，程序员朋友们欢迎关注我。</p>", 
            "topic": [
                {
                    "tag": "Bug", 
                    "tagLink": "https://api.zhihu.com/topics/19556650"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "PHP", 
                    "tagLink": "https://api.zhihu.com/topics/19552910"
                }
            ], 
            "comments": [
                {
                    "userName": "如此还能做你父亲", 
                    "userLink": "https://www.zhihu.com/people/5f2d4ca0b25e16bba3541f8b5d644eec", 
                    "content": "码的，看不懂", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>哈哈哈，意会即可~</p>", 
                            "likes": 0, 
                            "replyToAuthor": "如此还能做你父亲"
                        }, 
                        {
                            "userName": "haolo", 
                            "userLink": "https://www.zhihu.com/people/c02ce836b6f27a949dddc670483388e8", 
                            "content": "已经说的够清晰了 你自己看不懂而已", 
                            "likes": 0, 
                            "replyToAuthor": "如此还能做你父亲"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "相当有趣", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>😃</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "光兄", 
                    "userLink": "https://www.zhihu.com/people/188135eef41f6f458417f38a962fcc57", 
                    "content": "挺刺激的，要是我，可能清除缓存正常之后就不会继续找bug了🙄", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>🙈 实在是被困扰着，想不通啊，不找到原因估计当晚睡不着了……</p>", 
                            "likes": 0, 
                            "replyToAuthor": "光兄"
                        }
                    ]
                }, 
                {
                    "userName": "沙滩酷酷", 
                    "userLink": "https://www.zhihu.com/people/cfb2f98944434f80037b2e5f578d0cc5", 
                    "content": "你们在每一次请求发送之前都会设置一下header头吗？还是说框架自己自动加载的，什么框架？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>是框架自动加载的~ PHP的Laravel</p>", 
                            "likes": 0, 
                            "replyToAuthor": "沙滩酷酷"
                        }
                    ]
                }, 
                {
                    "userName": "小强一下", 
                    "userLink": "https://www.zhihu.com/people/70dd80c7593e02ed72921f0d7a02d0bd", 
                    "content": "试试不用墙上时间，改用系统开机时间，这样系统时间跳变也不影响功能", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>赞👍 这个问题我们也思考过~  不过貌似也要考虑系统宕机对缓存机制的影响，比如停电了两小时，再恢复时，如果使用系统开机时间，貌似此时之前缓存设置的超时含义在此刻也有点小奇怪。   我们解决办法是用</p><div class=\"highlight\"><pre><span></span>timedatectl set-ntp 0<br></pre></div>关掉了自动同步时间", 
                            "likes": 0, 
                            "replyToAuthor": "小强一下"
                        }
                    ]
                }, 
                {
                    "userName": "欧阳", 
                    "userLink": "https://www.zhihu.com/people/7f50f70cc326b57d9f1714568c1cbbb7", 
                    "content": "<p>尽管很多技术我都看不懂，但是很佩服你这种精神！我觉得能把这个bug的原因找出来的那一刻的心情肯定是无比喜悦和激动的</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>哈哈，谢谢夸奖。是啊，还好找出来了😂</p>", 
                            "likes": 0, 
                            "replyToAuthor": "欧阳"
                        }
                    ]
                }, 
                {
                    "userName": "君陌", 
                    "userLink": "https://www.zhihu.com/people/55857f72733d62bc4ab5da12febf2b14", 
                    "content": "<p>laravel 这个中间件可以进行捕获,把ip自动记录拉入黑名单,配合防火墙使用.</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>嗯，确实可以~</p>", 
                            "likes": 0, 
                            "replyToAuthor": "君陌"
                        }
                    ]
                }, 
                {
                    "userName": "一只韭菜", 
                    "userLink": "https://www.zhihu.com/people/d334ea83eeac2e8ee122ad29ea426e5f", 
                    "content": "<p>估计是时区问题？差8个小时</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "孤单彼岸", 
                            "userLink": "https://www.zhihu.com/people/acb9b6ed9c6bc225995cdeb68dd7b962", 
                            "content": "<p>对的，应该是自动同步时间的时候因为时区相关设置才导致的错误~</p>", 
                            "likes": 0, 
                            "replyToAuthor": "一只韭菜"
                        }
                    ]
                }, 
                {
                    "userName": "顾睿钦", 
                    "userLink": "https://www.zhihu.com/people/c0bc23f3d9d6a3467218472ca3dc3af0", 
                    "content": "<p>主题好看求</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Jack-圆桌商务", 
                    "userLink": "https://www.zhihu.com/people/2f3d52e5026e4f7e147ec525f82e986a", 
                    "content": "写node室友遇到过，当时也没解决", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37599502", 
            "userName": "爵士猫", 
            "userLink": "https://www.zhihu.com/people/a11ce96ba442e36752f90c62226e80d7", 
            "upvote": 2, 
            "title": "辛亥革命事件 一个社会事件的量子论解读 一种恐惧意识波函数遍及了武汉新军士兵与低级军官 引发了武装暴动", 
            "content": "<h2><b>经济现象，就是人的意识决定的，就是人类政治、经济、思想、社会伦理等等决定的。西方经济学的隐蔽假设是西方社会的政治、经济、思想、社会伦理等等。</b></h2><h2><b>当然，中国经济学必然的隐蔽假设是中国社会的政治、经济、思想、社会伦理等等。</b></h2><h2><b>中国5000年的经济发展史，必须在中国社会的希尔伯特空间之波函数中予以解读，必须在中国社会的政治、经济、思想、社会伦理等等约束下，予以解读。</b></h2><p><b>--------------------------------------------</b></p><p>秦有： 2018-06-02 21:19:30 评论<br/>　　评论 爵士猫大懒虫：我和楼主的分歧在于，我根本不承认什么必须。既然无限可能，那你能强迫一个村妇必须和你保持一致吗？你的理解，她根本没有进入，你，我和她，都是无限可能的具体呈现，你连我都必须不了，怎么去必须她？不可能，也无必要，强行来过，就是毛，思想统一之后呢？迅速崩解<br/>　　试图在当下终结历史的认知，都是无逻辑的，包括试图完美的终结认知，终结个体生活的细节，试图包办天国的此岸实验，许诺或者完美解释历史现实和未来。都值得怀疑。<br/><br/>　　爵士猫大懒虫：<br/>　　评论 秦有：<b>高度赞同你的观点。佛学的观点，最终是不可言说的，一说就错。不可言说的秘密就来源于宇宙意识的无限性，非定域性质，充满宇宙的性质。你、我、他，本身就是一种量子激振器形式的存在，。</b></p><h2><br/><br/>　　爵士猫大懒虫：<br/>　　评论 秦有：<b>你我他本身都没有一种随着时间线的观察，有一种不变的【实体存在】，也就是说你我他的本身是一种【非定域】【虚无】的希尔伯特空间的量子激荡器而已。</b></h2><p><b>--------------------------------------------------------</b></p><h2><b>在惠勒延迟选择实验中，在做出延迟选择之前，微观客体既不是粒子，也不是波，而是用几率幅或波函数描述的微观实在，一旦人们做出延迟选择，所选择的测量仪器就参与决定了微观客体的性质，微观客体就必然从量子性存在转化了经典性存在，要么呈现为粒子性，要么呈现为波动性。</b></h2><h2><b>延迟选择所选择的仪器性质与微观客体本身构成了一个事件A，而延迟选择实验的所呈现的实验结果构成事件B，显然，事件A在本体上先于事件B。可见，时间非定域性不可能证明人将影响宇宙的原初。</b></h2><h2><b>　　我们认为，量子力学与量子信息理论中，事件具有重要地位，从这一角度出发，量子力学并不违背事件之间的因果性。从而可以在延迟选择实验中，避免现在的事件会影响过去的事件，甚至人会影响宇宙之初。</b></h2><h2><b>　　从经典时空来看，非定域性并没有抛弃实体实在概念，也没有支持关系实在的终极性。从量子时空来看，波函数或几率幅就是一个反映事件或过程的存在。事件的连续运动形成了事物的过程，过程成为量子力学最为重要的概念。</b></h2><p>　　举个通俗的例子，比如一个社会事件的量子论解读。</p><h2><b>在人类历史文明发展进程中，人的个体的思想与行为就如同微观世界的量子运动，个体的人的意识与行为属于量子的、非定域的、波函数运动，个体与个体之间有量子纠缠表现的就是量子事件之间的关联，比如血缘、职业、利益、学术等等的关联，这就是当今社会学、心理学、哲学等学科一直在研究的东西。</b></h2><h2><b>　　社会学、心理学、哲学等学科研究的结果，只是把这些个体的意识运动的量子波函数之关联描述了一个一个侧面，但是个体的意识运动的量子波函数是无限的，是充满整个宇宙的希尔伯特空间，也就是说他的完备的、有无限维度的表达波函数表达，不仅仅是当今的科学体系可以用有限的学科分类就可以描述完整的。</b></h2><h2><b>　　第二，所有的人类个体意识波函数是相互关联的，在整个宇宙的希尔伯特空间这些波函数是可以用矢量之间角度予以表达，也就是人类个体意识波函数是内积。这也就是当今所有的科学门类，有一种相互之间贯通的发展，认知科学--基因科学--心理学--哲学--社会学等等交杂在一起的物理数学的解读。</b></h2><h2><b>　　第三 所有的人类个体意识波函数，在整个宇宙的希尔伯特空间中，是可以定位的，就是说有一种【基准】可以给定所有的人类个体意识波函数的距离关系。不同的【基准】给出的所有的人类个体意识波函数的距离关系、定位关系是不同的。</b></h2><h2><b>　　比如说，用古希腊传统定位所有的人类个体意识波函数的，也就是评价人类所有的种族文化，自然欧美文化是靠前的排列。</b></h2><h2><b>　　用古吠陀文化传统定位所有的人类个体意识波函数的，也就是评价人类所有的种族文化，自然印度文化、中国文化是靠前的排列，</b></h2><h2><b>好了再回到一个社会事件的量子论解读。</b></h2><p>　　这还是要在一个整个宇宙的希尔伯特空间的子空间讨论问题。</p><p>　　比如1911年的武汉地区，大家就清晰了啥事会发生了。辛亥革命的爆发看起来是很突然、很偶然的事件，清政府武汉地区的高管已经镇压了所有要举行暴动的革命党，以为平安无事了。<br/>　　但是整个武汉、整个大清王朝的个体的意识运动的波函数，都是相关联的。当时中国的情况有许多研究可以查阅。</p><h2><b>但是，一种恐惧的意识波函数遍及了武汉地区新军的士兵与低级军官，他们害怕日后被清政府清洗杀害，由此他们自发的发动了武装暴动，也就引发了整个大清国的辛亥革命运动。</b></h2><h2><b>　　当然辛亥革命事件，又直接导致了清政府的下台与民国建立、袁世凯的上台等等事件，整个现代中国历史就是由一个一个相互密切关联的、社会量子事件组成，直到2018年的中美贸易战。</b></h2><h2><b>　　当然，辛亥革命的黑天鹅事件也一直影响100年以后的你我的意识波函数形态。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/>这就是佛学的【诸法不自生。亦不从他生。不共不无因。是故知无生】想通的。</p><h2><b>所谓【诸法不自生】，就是单独的一种法，没有因缘合和是无法生成的。也就是人类个体意识属于整个宇宙希尔伯特空间，是相互关联的，是一种量子场域的关系。一个法或一个粒子或者一个社会事件，在没有发生量子坍塌之前都是不可分割的，也就是整体的、不可分离的。这就是真如实相不可言说的秘密。</b></h2><h2><b>一个法或一个粒子或者一个社会事件，由于条件充分必要，才会发生量子坍塌。一个法或一个粒子或者一个社会事件，才成为一个独立于整体的、可以识别的、实体事件或者说客观事件，这就是真如实相、绝对精神可以理解的起点，也就是佛学的菩提觉，【色不离空，空不离色】【菩提觉既要离世间，又不能离去世间】【佛学的究竟义 佛魔一体】【当体放下 就成佛祖】的表达。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/>诸法不自生。亦不从他生。不共不无因。是故知无生。</p><h2><b>佛学总是谈论【真如实相 不生不灭 不增不减 】，就是谈论个体的意识运动的量子波函数是无限的，是充满整个宇宙的希尔伯特空间，也就是说他的完备的、有无限维度的表达波函数表达，不仅仅是当今的科学体系可以用有限的学科分类就可以描述完整的。</b></h2><h2><br/><b>　　也就是个体的意识运动的量子波函数是无限的，整体的，完备的。在整个地球有一个完整的生物链条，在这个生物链条的所有生命体，组成了一个整体。</b></h2><h2><b>　　在中国传统思想中，用祖宗崇拜的逻辑关系、宗法制度、君君臣臣父父子子的解读，用于表达这个完整的生物链条。</b></h2><h2><b>　　在一神教传统的种族国家，比如欧美国家、中东国家，就有上帝、真主、天主等一神教的崇拜逻辑的解读，，用于表达这个完整的生物链条，由此有了古希腊哲学、基督教哲学、康德黑格尔的古典德国哲学，以及现代海德格尔哲学，语言哲学，分析哲学，心灵哲学的发展逻辑链条。</b></h2><h2><b>　　但是诸法不自生。亦不从他生。不共不无因。是故知无生。宇宙的法则，不是中国的哲学思想传统，也不是一神教的哲学思想传统。</b></h2><h2><b>　　宇宙法则，是属于整个宇宙的希尔伯特空间，也就是说他的完备的、有无限维度的表达波函数表达，不仅仅是当今的科学体系可以用有限的学科分类就可以描述完整的。</b></h2><h2><b>　　宇宙法则，最根本的原则，是人的文明与文化的有限性，无法表达人的意识与精神的无限性，更不要说多元的宇宙空间了。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>再接着思考物质与意识的关系问题。</b></p><h2><b>物质与意识，本就包含在宇宙意识的量子希尔伯特空间之中。人类可以识别、分离出的所谓【物质 物体 社会事件 】，只是这一【物质 物体 社会事件 】被人的自我意识的觉醒而识别了，从而存在了。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>比如，月亮在【你这一个体】没有看他之前，【月亮】在你的【直观意识中是不存在的】，【月亮】只是作为一个【意识记忆或者观念】存在于你的意识体中。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>再比如，一个外太空的星球，距离地球上百亿光年，在人类没有接收到他的信号之前，这【一个外太空的星球】是不存在于人类意识之中的。这【一个外太空的星球】的表达，只是人类探测以后的表达。假设宇宙其他生命也接收到这【一个外太空的星球】的信号，时间也许早于人类10亿光年，那【一个外太空的星球】表达内容肯定不同于地球人类的表达。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>【一个外太空的星球】的表达法，【诸法不自生。亦不从他生。不共不无因。是故知无生】，只是【一个外太空的星球】量子波函数无限表达中的两种方式而已。地球与外星人，关于【一个外太空的星球】的表达是【不生不灭】之【一个外太空的星球】希尔伯特空间波函数之一，而【一个外太空的星球】波函数本就是整个宇宙意识之希尔伯特空间的子空间。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>楞伽阿跋多罗宝经义贯卷第四</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【尔时大慧菩萨复白佛言：世尊，世尊记阿罗汉得成阿耨多罗三藐三菩提，与诸菩萨等无差别？】【一切众生法不涅槃，谁至佛道？】【从初得佛至般涅槃，于其中间不说一字，亦无所答？】【如来常定故，亦无虑，亦无察，化佛化作佛事。】</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【复次大慧，愚夫依七识身灭，起断见；</b></p><p><b> 不觉识藏故，起常见。</b></p><p><b> 自妄想故，不知本际。</b></p><p><b> 自妄想慧灭，故解脱。】</b></p><p><b>【义贯】</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>“复次大慧，愚夫”以“依七识身”念念“灭”处，即妄“起断见”；</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>以“不”能“觉”知第八“识藏”体真，不变随缘“故”，而于诸识念念相续流注处，妄“起常见”。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>又以依“自”心“妄想”分别之断常恶见“故，不”能如实觉“知”生死“本际”。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>若“自”心“妄想”分别所生之妄“慧”寂“灭故”即得本“解脱”。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【诠论】</b></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>此为答第七问：何不施设本际。佛谓：本际者，本来实际理地不受纤尘者也。此际本无始终，何有生死解脱？只是随凡外妄想生灭、断常、有无，而言本际不可知，若离于彼一切二见及凡外邪小根量境界，则是正遍知觉，安有本际为不可知者耶？</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>所谓佛学去妄显真，就是物质与意识，本就包含在宇宙意识的量子希尔伯特空间之中。人类可以识别、分离出的所谓【物质 物体 社会事件 】，只是这一【物质 物体 社会事件 】被人的自我意识的觉醒而识别了，从而存在了。另外的表达而已。</b></h2><p><b>-------------------------------------------</b></p><h2><br/><br/>楼主，不要光是理论构建，重要的是验证之。<br/>　　-----------------------------<br/> <b>希尔伯特空间可以解读人类的文明与发展，就是建立于个体意识场域的量子波函数，就如同量子动力学描述电磁场的运动一样，这样人类意识场域是希尔伯特空间的特性，可以解读众多社会事件。</b></h2><h2><b>　　小到安徽老师的事件，大到中国社会各个朝代的变化，以及整个人类历史的变化，东西方文明的不同发展与当代的竞争。甚至于2018年的中美贸易战，都可以从人类意识场域之希尔伯特空间的特性予以解读。</b></h2><h2><b>　　特别可以深刻理解佛学，真如实相--涅槃境界，是不生不灭，不增不减，同时又是缘起的生灭、住坏的运动过程。</b></h2><h2><b>　　这就是现象学与唯识学，都有了物理学基础原理的支持与依据。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/>我们是否可以再造意识？如果意识是康德和叔本华的先验论的话。<br/>　　能，则意义重大，可以寻求技术路径。不能，则需要证明之。<br/>　　-----------------------------<br/> <b>我们是否可以再造意识？本身提问就不合理。</b></p><h2><b>　　人类的意识现象是一种量子力学波函数的、希尔伯特空间的存在，是一种非定域的存在，由此才有人类意识的整体性、不可分割性。</b></h2><h2><b>　　你说的【再造意识】，就是一种人类意识的波函数、希尔伯特空间坍塌的过程，由此诞生了一个社会事件，产生了一种可以描述、分离的、客观的、相对独立的社会意识。</b></h2><p>　　你的眼睛识别一个外部物体或符号的过程，就是一个人类意识希尔伯特空间波函数坍塌过程，才有了你的眼睛的识别物体的意识。</p><p>　　如果你正确理解了【人类意识】的量子特性，自然不会提出【再造意识】的提问。</p><h2><b>比如，辛亥革命是由于革命党人不断暴力革命引发的【一种社会意识现象】，但是辛亥革命第一枪切实不是由同盟会直接发动的。辛亥革命的爆发，是1911年整个中国社会的意识之希尔伯特空间的内部运动的结果，大家只是顺便的把辛亥革命的成果归于了还在海外的孙中山。</b></h2><h2><b>　　辛亥革命不是一种同盟会【再造意识】【再造革命】的结果，是一种1911年中国社会意识【希尔伯特空间的内部运动的结果】。</b></h2><p>　　同样俄国的1917年推翻沙皇政权的革命，也是1917年俄国社会意识【希尔伯特空间的内部运动的结果】。革命爆发的时候，列宁还在国外呀，革命的结果是组成了联合政府。列宁的布尔什维克党是后来才赶走了资产阶级的掌权派，才成立红色苏维埃政权。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/>这里楼主提出的讨论，有一个很重要的推论，就是：<br/>　　我们是否可以再造意识？如果意识是康德和叔本华的先验论的话。<br/>　　能，则意义重大，可以寻求技术路径。不能，则需要证明之。<br/>　　-----------------------------</p><h2><b>你可能会提到苏联革命与中国革命的问题。</b></h2><h2><b>　　如果你有研究就知道，在俄国革命初期，列宁是希望取得与整个欧洲政府和解的。至于后面的发展，就是一种复杂的过程。</b></h2><h2><b>　　中国革命胜利以后，毛主席当时也是希望与美国英国法国等国取得谅解的，只是后来的朝鲜战争爆发，改变了整个中国革命的进程。</b></h2><h2><b>　　你读读毛选就明白，毛主席当时确实希望中国革命可以得到国内、国际各种力量的支持。</b></h2><h2><b>　　只是由于苏美两国的大冷战格局，以及中国的特有国情、民情，造成了中国革命独特的发展之路。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>-------------------------------------------------------------</b></p><p>科学网—非定域性质研究之一 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/home.php%3Fmod%3Dspace%26uid%3D447363%26do%3Dblog%26quickforward%3D1%26id%3D349565\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/home</span><span class=\"invisible\">.php?mod=space&amp;uid=447363&amp;do=blog&amp;quickforward=1&amp;id=349565</span><span class=\"ellipsis\"></span></a></p><h2><b>第一、非定域性是微观物质的根本性质。微观事物以非定域方式存在。非定域性深刻揭示了事物之间具有普遍联系。</b></h2><p><br/> <b>从贝尔不等式（含CHSH不等式）的推导可以看出，贝尔不等式并不依赖于隐变量λ，随机变数λ仅是数学表述形式上的东西，也就是说，贝尔不等式主要在于检验量子力学与定域性之间的不一致，检验的是定域实在论，并没有检验是否存在隐变量。</b></p><h2><b>80年代末和90年代以来有关量子力学与量子信息理论的一系列实验（如量子隐形传态等）明确告诉人们：揭示了经典定域性与量子理论之间的不相容性。量子力学的形式体系预见了类空分隔区域的粒子之间的关联具有可能性。非定域性有多种形式，非定域性是客观的、真实的。非定域性是一种重要的资源。非定域关联不受距离影响或是不衰减的；非定域关联的程度是有差距的；非定域关联具有私人性，依赖于历史。</b><br/><br/> <b>狭义相对论以光子运动所形成的光锥作为事件因果联系的边界，显然，这是经典力学的要求，它并没有合理的理由将它推广到量子世界。</b></h2><h2><b>量子力学与相对论所处理的对象是两个不同层次的物理问题。相对论仅仅揭示的是经典联系，而且相对论的因果联系仅是更普遍联系中的一种形式，不能以没有因果联系来排斥其他联系的存在。</b></h2><h2><b>非定域性深刻表明相对论仅是一定范围内的科学理论，除了因果联系之外，事物还有多种其他联系。通过引入量子事件，我们可以说明量子事件之间的因。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/><br/>　　科学网—非定域性质研究之一 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/home.php%3Fmod%3Dspace%26uid%3D447363%26do%3Dblog%26quickforward%3D1%26id%3D349565\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/home</span><span class=\"invisible\">.php?mod=space&amp;uid=447363&amp;do=blog&amp;quickforward=1&amp;id=349565</span><span class=\"ellipsis\"></span></a><br/><br/><br/><br/>　　物理学哲学:以量子力学哲学为方向<br/><br/><br/><br/>　　《中国社会科学报》2015年1月14日第692期 作者：记者 陈叶军<br/><br/>　　<a href=\"https://link.zhihu.com/?target=http%3A//www.cssn.cn/zhx/zx_zxrd/201501/t20150114_1478280.shtml\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cssn.cn/zhx/zx_zxrd/201</span><span class=\"invisible\">501/t20150114_1478280.shtml</span><span class=\"ellipsis\"></span></a><br/><br/>　　物理学在20世纪取得了辉煌成就，物理学哲学也因此成为显赫的学术研究领域。进入21世纪，失去了重大物理学成果的支撑，物理学哲学是否过时？<br/><br/>　　在科学哲学中仍处于基础地位<br/><br/>　　“物理学哲学并没有过时。”上海社会科学院哲学研究所研究员成素梅表示，物理学哲学研究对于科学哲学的发展来说，仍是最基本的。20世纪60年代以来，科学哲学的发展始终与物理学哲学相关，比如库恩的范式论、范·弗拉森的建构经验论，以及哈金的实体实在论等，都与物理学哲学相关。</p><p><br/><br/>　　“科学哲学实际上是物理学哲学的延伸。”成素梅介绍，作为科学哲学的第一个流派，逻辑实证主义的初衷就是根据科学方法改造当时越来越向思辨方向发展的哲学，而这种科学方法实际上就是物理学方法，即重视实验证实，把观察结果看成是检验理论的试金石。后来，随着批判理性主义者和历史主义者对逻辑实证主义的批判与超越，才更完整地形成了科学哲学这门学科。<br/><br/>　　“‘形而上学’精神永不灭。”北京师范大学哲学与社会学学院教授董春雨表示，当代物理学研究的许多前沿问题，比如统一场论、超弦理论以及M理论等，都是人类目前无法从经验上验证的。物理学哲学作为人类探索精神的典型代表，总会超越时代限制而步入形而上学之境。古代及近代的原子论如此，当代夸克“禁闭”问题也如此。“形而上学”所蕴含的不屈的理性思考精神引领着人类不断走向未来，并不断将一些形而上学的内容变成经验上可检验的东西。没有“形而上学”精神，就没有科学的今天，也没有科学的未来。</p><p><br/><br/>　　重点任务是推进量子力学哲学研究<br/><br/> </p><h2><b>成素梅告诉记者，当代物理学哲学的研究主要集中在量子力学哲学、宇宙学哲学和量子场论哲学三个方向，其中量子力学哲学是最基本的研究方向。当前物理学哲学研究的重点任务是推进量子力学哲学研究，形成以点带面的发展。</b><br/><br/><b>　　“迄今为止，物理学哲学家和科学哲学家并没有真正消化量子力学带来的哲学挑战。”成素梅认为，今天，量子现象已成为一种技术资源并得到大力开发利用，我们不能以因果决定论的思维方式理解量子力学，而要以量子力学的新特征为基础，揭示新的实在观、理论观、知识观等。量子力学带来的哲学挑战并不能通过简单地补充或修正现有观念就可以应对，需要进行一场脱胎换骨的哲学革命，就像日心说推翻地心说那样。</b></h2><h2><br/><br/> <b>华南理工大学科技哲学研究中心主任吴国林介绍，20世纪末以来，关于量子力学的测量问题，物理学家在仪器与量子系统之外，还引入了环境。环境与测量仪器通过相互作用，产生理想纠缠，使量子系统出现退相干，不可逆地消去了各个干涉项，从而使系统的行为表现得就像经典物理系统一样。近年来，退相干理论得到很大进展，成为一种主流思想。</b></h2><p><br/><br/>　　关于量子力学的解释问题，目前有哥本哈根解释、隐变量解释、退相干解释、模态解释、多世界解释、多心解释等。但这些量子力学解释都是等价的吗？“对选择量子力学解释的标准或条件进行思考是十分必要的。”吴国林认为，量子力学解释应当增加技术条件和量子信息条件，即量子力学解释能够说明量子技术和量子信息的存在与演化。</p><p><br/><br/> <b>吴国林告诉记者，除了量子力学，面对反实在论的诘难，科学实在论的最新进展是结构实在论，主要形成了以沃雷尔为代表的认识结构实在论学派、法兰奇与雷迪曼为代表的本体论的结构实在论、曹天予为代表的实体结构实在论学派，在国内外哲学界获得了广泛影响。</b></p><p><br/><br/>　　突破瓶颈求得学科进展</p><p><br/><br/>　　“目前，超弦理论是有望抽象地统一自然界诸基本相互作用的候选者。”武汉大学哲学学院教授桂起权认为，超弦理论属于科学理论范畴，即使在可预见的将来不可能得到直接的实验检验，仍可能得到强有力的间接经验支撑。<br/><br/>　　对物理学哲学的未来发展，吴国林认为，主要应当进一步推动量子力学哲学的研究。要加大研究量子力学的一些基础问题，比如信息能否重构量子力学基础？要加大研究量子信息对科学理论模型的影响、量子力学的检验与量子技术的关系，以及量子逻辑与量子技术逻辑等问题。<br/><br/>　　吴国林表示，学界还应进一步研究物理学理论与生物学理论的关系、物理学的发展对实在论的新启示等问题。此外，量子场论在我国的研究还不够，也应当加强。<br/><br/>　　成素梅说，为推动物理学哲学的未来发展，应当突破观念和学科自身的瓶颈问题。为此，应稳定、发展研究队伍，这是前提和保障，此外，还要加大对物理学哲学研究的扶持力度。<br/><br/>　　科学网—[转载]物理学哲学:以量子力学哲学为方向 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-862976.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-862976.html</span><span class=\"ellipsis\"></span></a><br/><br/><br/><br/>　　科学网—佛的智慧对薛定谔创立波动力学的影响 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-379388.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-379388.html</span><span class=\"ellipsis\"></span></a><br/><br/>　　吴国林</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><br/> <b>当代中国要进行原始创新，没有相应的哲学思想的启迪是不可能的。我们这里仅讨论佛的智慧对薛定谔创立波动力学的影响。</b><br/><b>　　在薛定谔的著作《我的世界观》中，其第五章就是《吠檀多的基本观点》，在这里，薛定谔试图找到由观察和思考主体的多样性引发的问题的解决途径。为了认识量子世界事物的运动，他受到了佛的智慧的影响。</b><br/><b>　　佛的智慧，利用矛盾的论断阐述了难以表达的概念：一个事物可以是A或者非A，也可以同时既是A也是非A。</b><br/><b>　　事实上，印度最古的著名文献是吠陀文献。其中《梨俱吠陀》之《有转神赞》之“有无歌”是：</b><br/><b>　　“无既非有，有亦非有；</b><br/><b>　　无空气界，无远天界。</b><br/><b>　　何物隐藏，藏于何处？</b><br/><b>　　谁保护之，深广大水？”</b><br/><b>　　这是说了事物的逻辑发展有两个阶段：</b><br/><b>　　（1）原初阶段：无即非存在，有即存在。无与有是对立的。</b><br/><b>　　（2）逻辑阶段：无既非有，有亦非有。这是说，“非有”是对有与无的否定，或超越。有与无都是运动变化的，并不保持那不变的有与无。此时，无与有在“非有”中统一了。</b><br/><b>　　这种思想对于量子力学的波动力学的创立有一定的启示作用。吠檀多的统一性与连续性在波动力学中有所体现。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/><br/><br/>　　科学网—波函数的毛泽东解释The Mao’s Interpretation of Wave-function - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-363656.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-363656.html</span><span class=\"ellipsis\"></span></a><br/><br/>　　吴国林</p><h2><br/> <b>毛泽东在《矛盾论》中指出：“无论什么事物的运动都采取两种状态，相对地静止的状态和显著地变动的状态。两种状态的运动都是由事物内部包含的两个矛盾着的因素互相斗争所引起的。当着事物的运动在第一种状态的时候，它只有数量的变化，没有性质的变化，所以显出好似静止的面貌。当着事物的运动在第二种状态的时候，它已由第一种状态中的数量的变化达到了某一个最高点，引起了统一物的分解，发生了性质的变化，所以显出显著地变化的面貌。”</b><br/><b>　　量子力学的第一个公设就是波函数公设：“一个微观粒子状态总可以用一个波函数来完全描述。”也就是说，微观粒子的状态可以由波函数来描述。有一种观点认为，量子力学的波函数不能反映微观事物的内在运动。但是，按毛泽东在矛盾论中的观点，这就给出了波函数一种重要解释——波函数的毛泽东解释：</b><br/><b>　　波函数的状态，实质上是微观客体（事物）中各因素之间的相互作用所导致的。</b><br/><br/></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><br/><br/>　　科学网—非定域性质研究之二 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-349854.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-349854.html</span><span class=\"ellipsis\"></span></a><br/><br/>　　吴国林</p><h2><br/><br/> <b>第二、非定域性具有实在性、独立性与转移性，它可以创生，也可以消灭。</b></h2><h2><br/><b>　　如果我们把量子纠缠作为非定域关联的实质，那么，非定域关联就具有独立性与转移性。</b></h2><h2><b>在量子纠缠交换（quantum swapping）中，如果粒子1与粒子2之间有EPR关联（非定域性），粒子3与粒子4之间有EPR关联（非定域性），当我们对粒子2与粒子3之间用贝尔基测量时，即投影到EPR关联上，那么，粒子1与粒子4之间必然瞬间处于EPR关联（非定域性），即粒子1与粒子4之间具有非定域性。这就是说，粒子之间的非定域性发生了转移。可见，非定域性具有独立性，具有客观性，反映了粒子之间的某种客观联系。</b><br/><br/><b>　　要使两个微观粒子之间具有非定域关联，可以通过相互作用来产生。比如，用联合贝尔基进行直接测量就可以得到非定域性。也可以通过无直接相互作用（如间接方式，例如量子纠缠交换实验）来产生。量子客体具有非定域性，通过测量其中一个粒子，就可以使粒子具有的非定域性转化为定域性，即量子客体转化了经典客体。</b><br/><br/><br/><b>　　量子非定域性的实在性也表现在量子算法与量子计算之中。从量子算法与量子计算来看，波函数（或几率幅）都具有物理实在的意义，波函数描述了微观物质（量子系统）的状态和运动（演化）性质，微观客体的运动具有可逆性。量子计算充分利用了微观物质的非定域性。微观物质非定域性表明，微观客体既在这里，又在那里，这是量子并行计算的根本基础，它不同于经典计算机的并行计算。这充分体现了亦此亦彼的辩证逻辑。</b><br/><br/><br/><b>　　非定域性的实在性体现在波函数之中。波函数描述了量子实在。从薛定谔波动方程来看，波函数的演化具有因果性，但实质上，波函数具有非定域性。当人们对一个粒子的空间波函数进行某种测量时，测量坍缩将导致空间波函数的改变。这是涉及整个空间分布的改变，而不是局域的变化和局域变化在空间中的传播。我们认为，当量子纠缠确认为一种客观性关联，并且作为量子算法和量子计算的根本性基础，有关波函数的实在性论争应当告一段落了，波函数就是微观实在与量子信息的统一，波函数表达的几率波的实在性质不同于经典力学的粒子和波的实在性质。</b><br/><br/><br/><b>　　在开放目的的隐形传态中，反映微观事物性质的量子信息以非定域的方式联合存储于几个不同的空间位置上。所谓开放目的隐形传态，是指一个未知的单光子态将会被传送到一个 N 粒子的相干叠加态上，通过对其中任意的N-1个粒子做一定方向的投影测量，被传递的未知量子态就可以在剩下的那一个粒子中读出来。由于N-1个粒子的投影测量是任意的，因此，被传送的未知量子态可以在 N个粒子的任何一个粒子上被读出。设有一个未知粒子1的状态为，另有粒子2、粒子3、粒子4和粒子5处于四粒子GHZ纠缠态。为将未知粒子1传递到粒子2、3、4或粒子5中的任意一个粒子上，我们对粒子1和粒子2进行贝尔基测量。</b></h2><p><br/><b>　　当对粒子1与粒子2进行贝尔态测量后，未知粒子1的系数（即量子信息）α与β就瞬间传递给三粒子态上，这三个粒子可能以类空方式关联。比如当粒子1与粒子2处于态一种贝尔基，则粒子3、4和5处于态，显然，量子信息α与β已经按照空间非定域的方式被联合存储于三个地方。中国科技大学潘建伟教授领导的小组已于2004年成功完成了五粒子纠缠态以及终端开放的量子态隐形传输的实验。（Zhao Zhi，et al. p.54-58.）可见，量子信息可以被非定域存储，它不受距离的影响。而经典信息只能定域存储。</b><br/><br/><br/><br/>　　科学网—非定域性质研究之三 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-350440.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-350440.html</span><span class=\"ellipsis\"></span></a><br/><br/>　　吴国林</p><h2><br/> <b>第三、非定域性是分离性与非分离性的统一，它可能意味着存在某种新的微观关联方式。</b><br/><b>　　1989年，研究爱因斯坦的权威霍华德（D. Howard）教授认为，定域作用预先假定了“可分离性”。他提出了“可分离性原理”：（1）空间分离的系统具有它们自己的、独特的物理状态；（2）两个或多个空间分离的联合态由它们的分离态整体决定。(Howard，1989, p.224-227)著名学者阿斯派克特（A. Aspect）也认为，一对纠缠光子必定被认为是单个的全域性客体（single global object），我们不能认为它是由分离性的个体性客体组成，且这些个体性客体的性质在时空中得到了很好的定义。(Aspect，2002, p.149)</b><br/><br/><b>　　我们认为，可分离性原理在于强调事物具有个体性，事物具有自身的质的规定性。尽管各子系统纠缠在一起形成了联合态，而不能单独存在，这些子系统也应当看作是处于联合态中的子系统，有自己的质的存在性，即子系统具有相对的分离性，因为，联合态在一定的条件下是可以转化的，通过转化显现出子系统的分离性。不可分离性仅反映了量子非定域性的某一部分性质。因此，非定域性是分离性与非分离性的统一。</b><br/><b>　　爱因斯坦的定域性条件实质在于要求事物有自身的质，受其他事物的影响（如相互作用）不应超过光锥规范。但是，受其他事物的影响，除相互作用之外，在量子水平，可以有量子信息的影响。</b><br/><br/><b>　　比如，在量子隐形传态（quantum teleportation）中，实验中，粒子2与粒子3处于纠缠态，由于对未知粒子1与粒子2进行贝尔基联合测量，粒子1与粒子2发生纠缠，而粒子3具有原先粒子1的某些量子特点。这说明，处于量子纠缠中的粒子2与粒子3具有自己的实在状态。否则，粒子2与粒子3又如何发生分离？粒子2与粒子1发生纠缠？因此，我认为，粒子2与粒子3具有相对的分离性。从内部空间来看，粒子2与粒子3具有对称性，具有全同性，但是，从外部时空来看，空间分离本身（实验上表现为不同的光束或量子粒子等）就是对粒子1、2和3的一种外部规定，即时空规定是粒子的外部规定性，微观粒子的自旋、偏振方向等是其内部规定性。</b><br/><br/><b>　　如果把非定域性理解为没有相互作用的非分离性，显然，很难理解处于非定域关联的两个子系统A与B之间可以传递量子信息。我们认为，关联型的非定域性意味着存在某种新的微观关联方式，这种关联方式仅在量子力学水平才能成立。利用量子非定域性（关联型非定域性）可以瞬间传递量子信息。而空间拓扑型非定域性仍然是微观客体几率幅具有非定域性导致的，只是形式不同而已，当然利用空间拓扑型非定域性无法瞬间传递量子信息。</b><br/><br/><b>　　有的论者用夫妻配对这种事先固定联系的例子，或骰子的正反面例子，来说明微观粒子之间的非定域性并不是一种真正的物理性关联。当甲乙两人结为夫妻，不论这两人相距有多远，只要找到其中一人为丈夫，则另一人必为妻子，反之亦然，可见，这两人之间并没有信息关联，而是一种固定的搭配。显然，我们不能期望通过丈夫向妻子瞬间传递一条信息。</b><br/><br/><b>　　也有论者用莱布尼兹的“前定和谐”来说明量子纠缠。“前定和谐”认为，上帝预先就已安排好每个单子独立地变化发展，而又自然地能与其余一切单子的变化发展过程和谐一致。但是，单子之间也没有任何联系，因此，不可能将信息从一个单子传递给另一个单子。</b><br/><br/><b>　　当两个微观客体2与3之间具有非定域关联或量子纠缠，那么，我们就可以将一个未知量子粒子1的量子信息通过粒子2传递给粒子3。显然，粒子2与粒子3之间如果没有物理联系，是不可能实现任何量子信息的传递。</b><br/><b>　　可见，微观粒子之间的非定域关联，是一种物理关联，是一种新的微观关联方式，是传递量子信息的通道。</b><br/></h2><h2><br/><br/><br/><br/> <b>佛学的缘起法则，【此生故彼生 此灭故彼灭 】，以及缘起甚深义，确实与意识与量子非定域观点想通。</b><br/><br/>　　吴国林教授关于【非定域性质研究】的文章，就是一个科学家严谨的回答了佛学的缘起法则，当然就是在当今量子科学与通讯科学的角度，予以回答的。<br/><br/> <b>第一、非定域性是微观物质的根本性质。微观事物以非定域方式存在。非定域性深刻揭示了事物之间具有普遍联系。</b><br/><br/><b>　　第二、非定域性具有实在性、独立性与转移性，它可以创生，也可以消灭。</b><br/><br/><b>　　第三、非定域性是分离性与非分离性的统一，它可能意味着存在某种新的微观关联方式。</b><br/><br/><b>　　第四、非定域性揭示出量子信息具有独立的哲学意义。</b><br/><br/><b>　　第六、非定域性表明事件与过程具有重要意义。经典事件不同于量子事件。量子事件之间仍然具有因果性。</b><br/><br/><br/><br/>　　科学网—非定域性质研究之四与五 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-354426.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-354426.html</span><span class=\"ellipsis\"></span></a><br/><br/>　　吴国林</h2><h2><br/> <b>第四、非定域性揭示出量子信息具有独立的哲学意义。</b><br/><b>　　20世纪90年代之前有关贝尔定理的检验，主要倾向于检验量子力学是否是完备的，定域实在论是否可能。但是，90年代之后，量子信息理论的兴起及其量子隐形传态等相关实验的成功，表明量子力学中的非定域性不仅存在，它还是一种重要的资源，形成了量子信息这一重要概念。量子信息是指在量子相干长度之内所展示的事物运动的量子状态与关联方式。量子信息基于非定域关联，它具有不同于经典信息的特点，量子信息具有相干性和纠缠性、量子信息不可克隆、量子信息不可以完全删除等。（吴国林B，32-35）</b></h2><h2><br/><b>　　第五、非定域性揭示了微观事物存在内部时空，内部时空不同于外部时空。</b></h2><h2><br/><b>　　非定域性的存在意味着内部时空具有不同于外部时空的性质。事物既可以向外部时空运动，也可以向内部时空运动。在经典物理学中，用普通三维空间的位置与动量就可以描述一个粒子的状态。按照相对论的观点，事件就是指某个时刻、在某一地点发生的一件事情，即一个事件是由时空坐标来刻划。</b></h2><h2><br/><b>　　在量子力学中，完备本征函数形成了希尔伯特空间，微观粒子是由希尔伯特空间决定的。我们把不是普通三维空间的坐标或变量，叫做粒子的内禀变量或内部变量。所谓内禀或内部，是指微观粒子本身具有且与普通三维空间中的运动没有关系。粒子的自旋、光子的偏振等形成内部时空。在一定条件下，外部时空可以反映内部时空的状态。比如，斯特恩-盖拉赫实验表明了自旋的存在，即从原子的空间分布读出内部状态自旋的存在。</b></h2><h2><br/><b>　　内部时空决定了非定域性或量子纠缠。一个量子比特（qubit）就是一个双态量子系统，或者说是一个二维希尔伯特空间。量子信息的传递，是由希尔伯特空间的性质决定的。可见，内部时空不同于外部时空，内部时空丰富了时空存在的形式。内部时空将是对经典时空（牛顿时空与爱因斯坦的相对论时空）的重大革命。</b><br/><br/></h2><h2><br/><br/> <b>科学网—非定域性质研究之六 - 吴国林的博文 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-447363-356689.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.sciencenet.cn/blog</span><span class=\"invisible\">-447363-356689.html</span><span class=\"ellipsis\"></span></a></b><br/><br/><b>　　第六、非定域性表明事件与过程具有重要意义。经典事件不同于量子事件。量子事件之间仍然具有因果性。</b></h2><p><br/><br/>　　1983年和1984年杰瑞特(Jon Jarrett)将贝尔的“定域性条件”区别为两个在逻辑上相互独立条件的合取（conjunction）。这两个独立的条件是指“定域性”（locality）和“完备性”（completeness），并且论证传统意义上的量子力学遵守定域性而违背完备性。(Jarrett, p. 569-589) 所谓合取，即当合取式的各分支都为真时，合取式才为真；只要有一个合取分支为假，则合取式为假。<br/><br/>　　1986年，希芒尼(A. Shimony)用更中性的术语，建议把“定域性条件”解释为“参数独立性”(parameter independence)；把“完备性条件”解释为“结果独立性”(outcome independence)。希芒尼认为，所谓参数独立性，是指一个子系统的观测结果独立于另一个子系统测量仪器所选择的参数。所谓结果独立性，是指一个子系统的观测结果独立于另一个子系统的测量的结果。在两个子系统构成的整个系统的状态中，一个子系统的测量结果发生的概率，除与自己系统因素有关之外，还与另一相关子系统的参量有关，与另一相关子系统的测量结果无关，这就是结果独立性的涵义。<br/><br/>　　杰瑞特认为，贝尔定理的违背，原则上有两种方式说明其原因：或者是违背参数独立性，或者是违背结果独立性。只要其中一个被违背就可以说明违背爱因斯坦的定域性或贝尔的定域性。杰瑞特断言，量子力学遵守参数独立性而违背结果独立性。</p><h2><br/><br/> <b>我们认为，应当引入事件概念，从事件的角度来看待违背结果独立性。事件是相对论的专用术语。所谓事件是指某个时刻、在某一地点发生的一件事情。显然，这里的事件是经典时空中的事件。在量子力学中，事件除了包括时空变量之外，还应包括自旋、偏振等内部变量。我们认为，自旋、偏振等确定的状态就是量子事件。在量子纠缠中，粒子之间的非定域性，主要表明为测量结果之间的关联。按照我们的看法，测量结果就是量子事件，量子纠缠表现的就是量子事件之间的关联。</b><br/><br/><b>　　加拿大著名哲学家邦格认为，因果关系是事件之间的一种关系。他认为，因果关系不是性质之间、状态之间，更不是理念之间的关系，也不是物与物之间的关系，因为原因是没有物质性的。因果关系不是事件之间的外在关系，而是生成事件的一种格式，也可以说，是能量传递的一种格式。事件的因果生成是有规律的。原因能改变倾向性（概率），但原因不是倾向性的。</b><br/><br/><b>　　斯塔普（H. P. Stapp）认为，相对论与量子力学只看到实在世界的很小一部分。他提出，存在应当摆脱时空坐标。存在是绝对的，是本原的，而时空是派生的，存在的逻辑上先于时空。每个事件都在基本的生成过程中有绝对的先后次序，类空事件也是如此。事件发生的次序并不需要任何特定的时间次序重合。（Stapp (1977), P.313–323；Stapp (1979), P.9, 1-25.） 在类空事件中，测量A的行为在本体上先于B事件出现，即是说，A与B之间的超光速联系使B依赖于先前事件A的发生。</b></h2><h2><br/><br/> <b>通过引入事件与过程，我们将能够因果说明延迟选择实验的时间非定域性。为此，我们有必要考察一下惠勒的“参与者宇宙”概念。他说：“对被我们称之为过去的那个时空，过去的那种事件，实际上是由前不久的过去以及现在所实现的选择测量来决定的，由于这些决定所实现的现象，可影响到过去，直至宇宙之始。”“在某种意义是，宇宙本来是一个观察者参与着的宇宙。” 由此他推出：“全能的宇宙，没有你，我们将不能存在，可是，每一个现象都依赖于观察这种行动，如果没有诸如像我所进行的这种观察，你也决不会成为存在。”（惠勒，第18页） 但惠勒曾明确指出没有意识对量子过程的作用。而某些论者却认为由此可以得到宇宙的属人性质。</b><br/><br/><b>　　在惠勒延迟选择实验中，在做出延迟选择之前，微观客体既不是粒子，也不是波，而是用几率幅或波函数描述的微观实在，一旦人们做出延迟选择，所选择的测量仪器就参与决定了微观客体的性质，微观客体就必然从量子性存在转化了经典性存在，要么呈现为粒子性，要么呈现为波动性。延迟选择所选择的仪器性质与微观客体本身构成了一个事件A，而延迟选择实验的所呈现的实验结果构成事件B，显然，事件A在本体上先于事件B。可见，时间非定域性不可能证明人将影响宇宙的原初。</b><br/></h2><h2><br/> <b>我们认为，量子力学与量子信息理论中，事件具有重要地位，从这一角度出发，量子力学并不违背事件之间的因果性。从而可以在延迟选择实验中，避免现在的事件会影响过去的事件，甚至人会影响宇宙之初。</b><br/><br/><b>　　从经典时空来看，非定域性并没有抛弃实体实在概念，也没有支持关系实在的终极性。从量子时空来看，波函数或几率幅就是一个反映事件或过程的存在。事件的连续运动形成了事物的过程，过程成为量子力学最为重要的概念。</b></h2><h2><br/><br/>　　事实上，恩格斯早就说过：“世界不是一成不变的事物的集合体，而是过程的集合体。”（马克思，恩格斯，第240页。）<br/><br/> <b>　哲学家怀特海非常重要事件与过程的作用。怀特海明确指出：“过程有两种类型：宏观过程和微观过程。宏观过程是从已获得的现实性向获得之中的现实性的转化；而微观过程是各种条件的变化，这些条件纯粹是实在的已进入确定的现实性之中。前一过程造成了从‘现实的’向‘纯粹实在的’转化；后一过程造成了从实在的向现实的增长。……未来是纯粹实在的，没有成为现实。”“未来在现在中具有客观的实在性，但是没有任何形式的现实性。”（怀特海，第391，392页。）</b><br/><br/><b>　　过程哲学则完全是一种新视角和新范式。它坚持过程就是实在，实在就是过程。从过程角度来看，一切存在物都不是静止不动的，也不是一成不变的，而是处于永不停止的生成和发展过程之中。</b></h2><h2>----------------------------------------------------------------------------<br/><b>高维空间只能存在于人的大脑中，也就是存在于人的思维中，真实的物理空间只能是三维的，时间维不能成为现实空间的一个维度。</b></h2><h2><b>　　在物理上也是一样，3维的空间是真实的，是一个事件发生必须拥有的3因素，多一个维也不行，多一个因素也不行。多了一个维度，原来事件整体性，独立性被破坏，我们人类在3维空间就够用了，在加上神仙的时间就会多余，事实上爱因斯坦的时间维是多余的，我们知道，长度的长短在自然条件下是时间的产物，当然宽度的宽也是跟时间有关联的，长度乘以宽度=面积，面积乘以高度=体积，高度是面积的叠加形成的，所以高度维也是自带时间的。</b></h2><h2><b>　　因为希尔伯特空间是一个模有限的无限维复线性空间，我们无法具体去描述这个无限</b><br/><b>　　维的复线性空间是一个怎样的空间，因此我们常说它是一个抽象空间。所以，值得</b><br/><b>　　反思的是：</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p>　　1.物理学在一个多维抽象空间下，是不是还是物理学？<br/>　　2.抽象已经脱离了具体，现代物理理论也已经脱离了具体，而物理（实际指符合实<br/>　　验与观察的理论）与具体能分裂开来吗？<br/>　　3.如果物理以实验或观察为标准，那么，对于根本就无法以实验或观察为标准验证<br/>　　的数学（理论物理部分中）概念或内容，物理学上应该如何取舍？</p><h2><b>所以，物理学最终还是人的意识的表达。所谓真实的三维物理世界，脱离【我】【你】【他】的意识场域以后，对【我】【你】【他】是没有意义的。</b></h2><h2><b>　　时间、空间也是【我】【你】【他】意识场域的物理学表达。康德、叔本华对于时间空间的哲学思考，已经解释了时间--空间观念是一种先验的观念与逻辑，深深的扎根于我们的阿赖耶识种子之中，但是也是可以改变的。比如30年前中国人时间--空间观念，就不同于2018年的中国人时间--空间观念。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p>-----------------------------------------------------------------------<br/><br/>全面搞懂希尔伯特空间的理论和运用，那绝对需要理论物理博士的水平，而且还一定要是毕了业的博士生，没毕业的博士可能就是因为搞不懂希尔伯特空间的缘故。</p><p>　　１）来历：大卫•希尔伯特在对积分方程的研究中研究了希尔伯特空间。冯•诺伊曼在其1929年出版的关于无界厄米算子的著作中，最早使用了“希尔伯特空间”这个名词。随后，“希尔伯特空间”这个名字已经迅速被其他科学家所接受。</p><p>　　２）划分：希尔伯特空间分为数学希尔伯特空间和物理学希尔伯特空间。</p><p>　　数学希尔伯特空间</p><p>　　希尔伯特空间是欧几里得空间的一个推广，其不再局限于有限维的情形。与欧几里得空间相仿，希尔伯特空间也是一个内积空间，其上有距离和角的概念（及由此引伸而来的正交性与垂直性的概念）。此外，希尔伯特空间还是一个完备的空间，其上所有的柯西列等价于收敛列，从而微积分中的大部分概念都可以无障碍地推广到希尔伯特空间中。</p><p>　　希尔伯特空间为基于任意正交系上的多项式表示的傅立叶级数和傅立叶变换提供了一种有效的表述方式，而这也是泛函分析的核心概念之一。希尔伯特空间是公设化数学的关键性概念之一。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　物理学希尔伯特空间</p><p>　　希尔伯特空间也是量子力学的关键性概念之一。</p><p>　　一个抽象的希尔伯特空间中的元素往往被称为向量。在实际应用中，它可能代表了一列复数或是一个函数。</p><p>　　例如在量子力学中，一个物理系统可以表示为一个复希尔伯特空间，其中的向量是描述系统可能状态的波函数。详细的资料可以参考量子力学的数学描述相关的内容。</p><p>　　量子力学中由平面波和束缚态所构成的希尔伯特空间，一般被称为装备希尔伯特空间（rigged Hilbert space）。</p><p>　　数学希尔伯特空间的描述较物理学希尔伯特空间边界条件更严谨，而物理学希尔伯特空间比数学定义广义些，物理学希尔伯特空间还可以分为量子力学和宇宙学希尔伯特空间两类描述。</p><p>　　３）比较：一般而言，欧几里得空间是一个实空间，来源于对空间的直观，但是希尔伯特空间却是一个复空间，是一个抽象的空间。</p><p>　　４）意义：希尔伯特空间是可以把量子概率论与爱因斯坦广义相对论及米-杨统一规范场验明正身的有力武器，希尔伯特空间也是串起线性和非线性分析(包括分形-混沌理论) 的数学工具之一，傅里叶变幻可以看作复希尔伯特空间函数分析的一个特解。</p><p>　　６）浅识：<br/>　　６.１：希尔伯特空间虽是多维抽象空间，但与欧几里得空间有“血缘”，是某种“进化”的表现，故此，其理论意义和价值很大。</p><h2><b>６.２：量子力学的五大假设都可以通过希尔伯特空间来描述。因此，量子力学不再“零散”，而是量子力学原理在希尔伯特空间中得到了理论上的统一。</b></h2><p>　　６.３：在相对论方面的意义<br/>　　高次元空间理论则在如虫洞、时光机等能时空机器上提供了一些美丽遐想（在历久不衰的时光旅行理论中，主要也是由广义相对论演绎而出的虫洞理论）。</p><h2><b>史蒂芬霍金 在「胡桃里的宇宙」一书中认为，在高次元时空中存在众多四次元曲面，此种曲面称为膜世界。这些「膜」有些自然而然就会消失；有些则会不断地膨胀直到形成如 气球般的膜泡，此膜泡就是我们生存的宇宙。至于存在于宇宙间的一切，不过是膜泡内部投射于这片「膜」上的信息而已。或许自宇宙诞生直到现在所曾经存在的一切，是此膜泡面上所投射的信息叠加。</b></h2><h2><b>　　换言之，从古到今的每一个时间点都是一片膜，而每一片膜相重叠就构成了「历 史」。如果想进行时空旅行，就设法使投射「自己」的那些信息转而投射至其他的膜上，也就是探讨跨次元的移动了。想要进行次元间的移动，就必须有能力在至少 比该次元更高一次元的世界中活动。</b></h2><p>　　举例说明：分别住在两条不相交的线（P1，P2）上的一次元居民，基本上只能前后移动，所以不会有所交集。但要是有一个 能在二次元活动的居民能将P1平移至另一条在线，那就有机会碰面了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　７）浅论：<br/>　　由此，我们似乎可以得出一个浅而易见的结论，即：<br/>　　因为希尔伯特空间是一个模有限的无限维复线性空间，我们无法具体去描述这个无限维的复线性空间是一个怎样的空间，因此我们常说它是一个抽象空间。</p><p>　　又由于在希尔伯特空间中基底的选择不同，“某某对象”可有不同的表象。</p><p>　　希尔伯特空间在量子力学中的理论意义</p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　由于在希尔伯特空间中基底的选择不同，使的量子力学有不同的表象，在希尔伯特空间中每种力学量都有一种对应的表象，我们常见的表象有动量表象，坐标表象，能量表象，福克表象等等，在不同的表象中力学量算符和态矢有不同的表示形式；</p><p>　　另外当我们对时间演化的处理方法不同时，又可以使量子力学有不同的绘景，在不同的绘景中我们又可以写出与物质运动规律所对应的不同形式的运动方程，薛定谔和海森伯给我们描绘了两种绘景，使得我们量子力学有两种表述，一个是海森伯矩阵力学，出发点是海森伯运动方程,另一种是薛定谔波动力学，出发点是薛定谔运动方程。</p><p>　　狄拉克总结了海森伯的用矩阵表示力学量的做法和薛定谔的按照德布罗意思想而在原子理论中引入了的态的概念，在希尔伯特空间中提出了自己独特的表述量子论的数学形式——符号法，使量子论成为严密的理论体系，很快，他用自己的一套表示形式，很多地方被称为“神来之笔”的右矢和左矢，简洁而深刻的反映了量子力学中力学量和态矢之间的关系，把 数的对易关系类比于经典中的泊松括号，把矩阵力学纳入哈密顿公式体系，建立起非相对论量子力学中的普遍变换理论，并用之证明了海森伯，薛定谔的两种表述形式是等价的。</p><p>　　希尔伯特空间是我们研究微观世界的空间，当我们在这个数学的空间中定义了某种表示规则——符号法，用抽象的方式直接地处理有根本重要意义的一些量，它可以使我们用简洁精练的方式来表达物理规律，整个量子力学理论就在希尔伯特空间中建立起来了。</p><h2><b>总之，理论物理界普遍如此看待：</b></h2><h2><b>　　希尔伯特空间是一抽象的空间，</b></h2><h2><b>　　如果在希尔伯特空间中选择不同的基底，就可以使量子力学原理有不同的表象，</b></h2><h2><b>　　研究希尔伯特空间中的量子力学，首先需要弄清楚的是不同表象中的量子力学理论，以及表象与表象之间的关系。</b></h2><h2><b>　　当规定了量子力学基本原理在希尔伯特空间中的基本表示形式后，就等于有了一种确定的语言，这种语言就是狄拉克符号。</b></h2><h2><b>　　在结合不同表象下不变的基本关系——对易关系，量子力学理论就可以在希尔伯特空间中以抽象的形式基本建立起来了，就可以在这个空间中研究求解具体的问题。</b></h2><h2><b>　　量子力学原理在希尔伯特空间中的表示形式</b></h2><h2><b>　　用波函数来描述微观粒子的运动状态，所以量子力学主要要解决的问题。关于波函数的形式的问题。在希尔伯特空间波函数一般用态矢来描述。</b></h2><h2><b>　　关于量子力学的第二个基本假设，波动力学中的态叠加原理，在希尔伯特空间中也有与之相对应的形式，是用狄拉克算符所写出的形式。</b></h2><h2><b>　　关于量子力学的第三个基本假设，力学量用线性厄米算符来表示，我们在希尔伯特空间中定义了一种普遍的厄米算符。 </b></h2><h2><b>　　关于量子力学的第四个基本假设，之前我们是用薛定谔方程来描述的，现在我们知道由于对时间演化的处理方法不同，可以使量子力学有不同的绘景，在这些绘景中，我们可以分别写出描述粒子运动的形式。 </b></h2><h2><b>　　关于量子力学的第五个基本假设，在希尔伯特空间中，我们可以用福克表象来描述它。</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>---------------------------------------------------------</b></p><p><br/><br/>　希尔伯特空间名字听上去似乎很难理解，但是真正弄明白其与线性空间之间的关系就会发现并没有那么难。我们一般接触的是线性空间（向量空间） ，首先看线性空间和各种空间之间的关系：1.线性空间（向量空间）<br/>　　线性空间又称作向量空间，关注的是向量的位置，对于一个线性空间，知道基（相当于三维空间中的坐标系）便可确定空间中元素的坐标（即位置）；线性空间只定义了加法和数乘运算。如果我们想知道向量的长度怎么办？—-定义范数，引入赋范线性空间</p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　2.赋范线性空间定义了范数的线性空间！！如果我们想知道向量的夹角怎么办？—-定义内积，引入内积空间</p><p>　　3.内积空间定义了内积的线性空间！！</p><p>　　4.欧式空间定义了内积的有限维实线性空间！！如果我们想研究收敛性（极限）怎么办？—-定义完备5.Banach空间完备的赋范线性空间！！！</p><p>　　6.Hilbert空间完备的内积空间！！！（极限运算中不能跑出度量的范围）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>　hilbert空间是这样一个抽象的空间，其中存在向量可以被用来描述量子力学中体系的状态；这些向量都必须存在正定的内积，也就是这些状态的概率非负；这个空间存在厄米算子，其代表可观测量；这个空间存在UNITARY 操作，对应的是3维空间中的旋转操作，表征保持状态概率不变的那些操作。说到这里就很清楚了，hilbert空间是为了描述量子力学态而引入的一个抽象空间（也可以是早就存在在数学体系中，被借鉴的一个空间）。因此hilbert空间中存在很多更加抽象的性质，一般的物理学家是不会用的。你只需要知道量子态的矢量，长度，对偶矢量，厄米算子，unitary操作，概率矩阵和 trace，子空间的直和和张量积，态的实空间表征和动量空间表征以及一些微扰论即可。具体的，角动量casmir operator和角动量的合成，还有oscillator的ladder operator的求解，这些基本就是一个general physics 所需要的非相对论性量子力学的全部了，这也是量子力学最有用的部分。</b></h2>", 
            "topic": [
                {
                    "tag": "辛亥革命", 
                    "tagLink": "https://api.zhihu.com/topics/19629645"
                }, 
                {
                    "tag": "意识", 
                    "tagLink": "https://api.zhihu.com/topics/19564106"
                }, 
                {
                    "tag": "波函数", 
                    "tagLink": "https://api.zhihu.com/topics/19660443"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>@秦有 2018-06-02 17:20:50</p><p>　　社会实践，以及历史事件，我们要用量子理论去理解的话，也不是不可能，我觉得楼主理解的比较到位。</p><p>　　问题是，里面的问题很多：）</p><p>　　所以，我感觉楼主有一种特别的理解，是我无法理解的。</p><p>　　就是，我无法理解楼主的逻辑能力和逻辑结果之间是如何达成链接的，这给我带来了困惑：）</p><p>　　-----------------------------</p><p><br></p><p>　　我是一个佛道修行人，我的基本意识观念都来自佛学。</p><p><br></p><p><br></p><p>　　@@秦有  2018-06-02 17:23:02</p><p>　　而我自己而言，我是一以贯之的，我有自己的思考的不同的发展阶段，前后逻辑是通顺的，一致的，我自己可以理解自己是如何思考的。当我回看的时候，会很明确的找到期间的发展的脉络。</p><p>　　我不知道楼主是否做到了这一点：）</p><p>　　-----------------------------</p><p><br></p><p>　　如果你懂得大乘佛学的核心观点，特别是理解了【大般若经】【楞严经】【楞伽经】的思想，就很自然的理解了人类意识属于希尔伯特空间的量子波函数，这一描述十分准确的，也可以解读许多中国特色的社会事件。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>秦有： 2018-06-02 17:15:29 评论<br>　　语言逻辑是失灵的，在这个问题上。只有当你证伪的时候，才可以。问题是，你根本无法证伪，只有塌陷之后的证明才是可能的。当你的提出否定的结论的时候，是无法来证明这种否定的结果的。逻辑工具，不适用这个问题的讨论。注意，我说的始终是技术问题，你要落实到技术上才可以。</p><p><br></p><p>　　秦有： 2018-06-02 17:13:31 评论<br>　　你的这个讨论，在逻辑上确实梳理的很清楚，我看懂了。但是，我强调的是“超序”，在你看来意识就是自我限定的，所谓非定域的，这本身就是一种语言表达，即便是数学表达也不可以，都偏离了。所以，没有什么是不可能的，既然我“意识”到了可以再造意识，那你怎么就断言，没有这种可能性呢？</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：你谈的是AI意识。我认为AI意识，是虚假的东西。AI不是生物体，只是人的工具而已，他的所有的逻辑智能只是一种人的AI技术的发展而已。谈论这个问题，不是一两句话可说清楚。你的【再造意识】，只是你的意识运动的一个量子事件而已。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：我的【意识坍塌】，只是借用量子物理哲学的思想，表达我的意识一种量子事件而已。根本没有证伪的逻辑在里面。希尔伯特空间的量子波函数，有着无限的可能性，需要证伪吗。证伪，只使用于爱因斯坦的相对论的定域空间，不适合非定域的希尔伯特空间。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<h2><b>经济现象，就是人的意识决定的，就是人类政治、经济、思想、社会伦理等等决定的。西方经济学的隐蔽假设是西方社会的政治、经济、思想、社会伦理等等。</b></h2><h2><b>当然，中国经济学必然的隐蔽假设是中国社会的政治、经济、思想、社会伦理等等。</b></h2><h2><b>中国5000年的经济发展史，必须在中国社会的希尔伯特空间之波函数中予以解读，必须在中国社会的政治、经济、思想、社会伦理等等约束下，予以解读。</b></h2><p><br></p><p>我们是否可以再造意识？如果意识是康德和叔本华的先验论的话。<br>　　能，则意义重大，可以寻求技术路径。不能，则需要证明之。<br>　　-----------------------------<br><b>我们是否可以再造意识？本身提问就不合理。</b></p><h2><b>　　人类的意识现象是一种量子力学波函数的、希尔伯特空间的存在，是一种非定域的存在，由此才有人类意识的整体性、不可分割性。</b></h2><h2><b>　　你说的【再造意识】，就是一种人类意识的波函数、希尔伯特空间坍塌的过程，由此诞生了一个社会事件，产生了一种可以描述、分离的、客观的、相对独立的社会意识。</b></h2><p>　　你的眼睛识别一个外部物体或符号的过程，就是一个人类意识希尔伯特空间波函数坍塌过程，才有了你的眼睛的识别物体的意识。</p><p>　　如果你正确理解了【人类意识】的量子特性，自然不会提出【再造意识】的提问。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>　秦有： 2018-06-02 21:19:30 评论<br>　　评论 爵士猫大懒虫：我和楼主的分歧在于，我根本不承认什么必须。既然无限可能，那你能强迫一个村妇必须和你保持一致吗？你的理解，她根本没有进入，你，我和她，都是无限可能的具体呈现，你连我都必须不了，怎么去必须她？不可能，也无必要，强行来过，就是毛，思想统一之后呢？迅速崩解</p><p>　　试图在当下终结历史的认知，都是无逻辑的，包括试图完美的终结认知，终结个体生活的细节，试图包办天国的此岸实验，许诺或者完美解释历史现实和未来。都值得怀疑。</p><p><br></p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：高度赞同你的观点。佛学的观点，最终是不可言说的，一说就错。不可言说的秘密就来源于宇宙意识的无限性，非定域性质，充满宇宙的性质。你、我、他，本身就是一种量子激振器形式的存在，。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：你我他本身都没有一种随着时间线的观察，有一种不变的【实体存在】，也就是说你我他的本身是一种【非定域】【虚无】的希尔伯特空间的量子激荡器而已。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>作者：<a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/591679\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">秦有</a><a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/m/my_level.jsp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">9</a> 时间：2018-06-02 21:14:57</p><p><br><br>　　试图在当下终结历史的认知，都是无逻辑的，包括试图完美的终结认知，终结个体生活的细节，试图包办天国的此岸实验，许诺或者完美解释历史现实和未来。都值得怀疑。</p><p><br></p><p><a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/136079918\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">爵士猫大懒虫</a>时间：2018-06-02 21:38:58<br><br>高度赞同你的观点。佛学的观点，最终是不可言说的，一说就错。不可言说的秘密就来源于宇宙意识的无限性，非定域性质，充满宇宙的性质。你、我、他，本身就是一种量子激振器形式的存在，。你我他本身都没有一种随着时间线的观察，有一种不变的【实体存在】，也就是说你我他的本身是一种【非定域】【虚无】的希尔伯特空间的量子激荡器而已。</p><p>　　自然，你说的【你能强迫一个村妇必须和你保持一致吗？】属于你的误解。你说的【你我他，是无限可能的具体呈现】属于正确的理解与解读。</p><p>　　但是作为整体的社会运行，必然要消除这种无法预测的量子事件的发生，由此中国文化文明的【仁义礼智信】【君君臣臣父父子子】的观念，通过一次又一次的统治者的强大刺激运动，不断地加载与中国每一个个体的意识之中，这个加载是一次又一次的大量人口的强行外部的减少过程。</p><p>　　中国文化就是一种追求【试图在当下终结历史的认知】，中国文化的终极目标【试图完美的终结认知，终结个体生活的细节，试图包办天国的此岸实验，许诺或者完美解释历史现实和未来】，尧舜就是一种目标的设定。</p><p>　　由此，中国文化3000年来有一种强有力的稳定秩序。这也是儒学追求的目标。</p><p>　　所以，中国社会文明文化的最终的特征，由此形成了。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>  @秦有 2018-06-02 22:07:32</p><p>    我在小说《古船》里看到了恶，这个就是罪之根源。生活里就是这样的，不过被大词遮掩住了而已。</p><p>    不见细节，生活还有什么趣味？剩下大词在历史的角落里蒙灰受难，生活的细节才能活泼生动起来。</p><p>    -----------------------------</p><p>你用【我在小说《古船》里看到了恶，这个就是罪之根源。生活里就是这样的，不过被大词遮掩住了而已。】，就已经完全表达了你的道德伦理的判断，你这一判断就不是康德说的【纯粹理性】的判断。</p><p><br></p><p>加上【不见细节，生活还有什么趣味？剩下大词在历史的角落里蒙灰受难，生活的细节才能活泼生动起来。】这句，完全是你个人的意识的一种表述。</p><p><br></p><p>【生活细节】【历史蒙灰受难】，这些词出于基督教文化。这就很清晰的指出了你的意识的【基座】。</p><p><br></p><p>我文章就指出，第三 所有的人类个体意识波函数，在整个宇宙的希尔伯特空间中，是可以定位的，就是说有一种【基准】可以给定所有的人类个体意识波函数的距离关系。不同的【基准】给出的所有的人类个体意识波函数的距离关系、定位关系是不同的。</p><p><br></p><p>　　比如说，用古希腊传统定位所有的人类个体意识波函数的，也就是评价人类所有的种族文化，自然欧美文化是靠前的排列。</p><p><br></p><p>　　用古吠陀文化传统定位所有的人类个体意识波函数的，也就是评价人类所有的种族文化，自然印度文化、中国文化是靠前的排列，</p><p><br></p><p>　　这就是佛学的【诸法不自生。亦不从他生。不共不无因。是故知无生】想通的。</p><p><br></p><p>我的理解是，生活本身是无意义的，生活的意义都是自我意识的觉醒的人类，通过种种意识事件，比如种种思想、宗教、哲学、政治、经济、艺术、道德伦理的实践活动、认知活动、符号创立、概念的施设，创造出了的。</p><p><br></p><p>这就是佛法的万法唯心。</p><p><br></p><p>西方哲学的【感觉就是存在】【我思故我在】【世界是意志与表象】【上帝是不可言说的】表达，西方社会理念主义、逻辑主义传统是一种主流，【思维就是存在 语言就是思维】，因此基督教体系需要教皇--神父的体系，不断地宣讲基督教教义，也就有了西方哲学庞大的体系，当然也就锻造了欧美社会构造的严密的理性思维、逻辑论证的基本特性，由此在欧洲社会就可以诞生现代科学技术，也就有了你崇拜的【自由主义】。</p><p><br></p><p>上述欧洲社会的意识之希尔伯特空间量子波函数的核心、关键的描述，已经大大不同于中国社会意识之希尔伯特空间量子波函数的核心、关键的描述。因而，现代科学技术，只会从欧洲的希尔伯特空间诞生、发展、繁荣、延续，现代科学体系也是建立了多次彻底的哥白尼式的革命，当今依旧在繁荣发展。</p><p>伽利略的观察实验---牛顿力学与经典物理---爱因斯坦相对论--量子物理与非定域科学哲学，当今科学已经可以高度解读人类的自身构造，这就是分子生物学与基因工程，认知科学与大脑神经系统的描述，以及计算机技术，由此诞生了伟大的AI智能技术。</p><p><br></p><p>这一切的一切，都与中国社会的意识之希尔伯特空间量子波函数的核心、关键的描述，完全无法吻合与解读。中国社会只能被动的接受现代科学体系，这一重大的、关键的外部冲击力量，由此引发中国社会明清以来的一次一次重大的量子化社会事件，比如太平天国运动，洋务运动，五四新文化运动等等，都是中国社会意识之希尔伯特空间由于外部冲击而引发的量子事件。当然，中国革命本身就是俄国十月革命的后续结果而已。</p><p><br></p><p>你我只有如此的、依据量子物理哲学的思想，才可以完整的、客观的、合理的观察这个世界，解读近500年来人类的文明与文化，才可以解读中国，解读科学技术，而不是追求一种无关乎中国社会意识之希尔伯特空间特性的自由主义理想。</p><p><br></p><p>你的自由度的文章，我一开始就表达了我的解读。只是当时没有详细的论证，今日补上【关于中国社会意识之自由度问题】的论述。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>　秦有：<br>　　评论 爵士猫大懒虫：不会吧，这夸张：）这么说，就是很结实的硬核了。一个个量子振荡器，就这么震荡出个硬核来，也是醉了。不过楼主的解读，确实不同凡响：）我可以理解楼主的逻辑过程和逻辑能力，但我无法理解的是楼主的结论，和我的大相径庭。</p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：量子振荡器，是量子动力学的核心假设，也是量子场论的核心。</p><p>　　粒子物理标准模型是关于目前已知的基本粒子的物理学理论，而量子场论是粒子物理标准模型的数学基础和理论框架。标准模型认为目前已知的物质都是由该模型中的基本粒子构成，而这些基本粒子的动力学和相互作用可以用量子场论来描述。</p><p>　　量子场论中，粒子就是场的量子激发，每一种粒子都有自己相应的场。在量子化过程中，玻色场满足对易关系，而费米场满足反对易关系。粒子之间的相互作用和动力学可以用量子场论来描述。</p><p>　　量子场论给出的物理图像是：在全空间充满着各种不同的场，它们互相渗透并且相互作用着；场的激发态表现为粒子的出现，不同激发态表现为粒子的数目和状态不同，场的相互作用可以引起场激发态的改变，表现为粒子的各种反应过程，在考虑相互作用后，各种粒子的数目一般不守恒，因此量子场论可以描述原子中光的自发辐射和吸收，以及粒子物理学中各种粒子的产生和湮没的过程，这也是量子场论区别于初等量子力学的一个重要特点。</p><p>　　量子场论本质上是无穷维自由度系统的量子力学。在量子统计物理和凝聚态物理等物理学分支中，研究的对象是无穷维自由度的系统。在这些分支中，人们感兴趣的自由度往往不是对应于基本粒子的运动而是系统中的集体运动，例如晶体或量子液体中的波动。这种波动可以看作波场，而且它们也服从量子力学的规律，因此量子场论同样可以应用于这些问题。</p><p>　　由于量子场论，可以很好的表达人类意识的量子化运动。</p><p>　　在人类文明发展过程中，大众可以关心个体意识的量子意识的场域的特征，但是大众主要关心人们感兴趣的自由度往往不是对应于个体意识的运动而是系统中的集体运动。</p><p>　　这种一个种族或国家地区意识量子事件、量子社会事件波动可以看作波场，而且它们也服从量子力学的规律，因此量子场论同样可以应用于人类文明发展与特性研究的问题。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br> <a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%25A7%25A6%25E6%259C%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@秦有</a> 2018-06-02 22:25:44<br>　　无论如何，和楼主交流，还是很有收货的。结论不同，可能是我经历的太少。或者理解的不够深刻所致。<br>　　但技术的发展绝对不会因为单纯的理念而停滞不前。<br>　　-----------------------------<br>　　赞同你的观点。作为人类的当今主要文明的成果，科学技术体系只会由于西方社会意识之希尔伯特空间范围的不断扩大而高度发展、继续繁荣。</p><p>　　科学技术的中心，1945年以后已经从欧洲转到了美国，这是西方社会意识之希尔伯特空间范围自然而然的扩张，美国作为人类文明的新中心，接纳了全人类的各色种族与文化，由此印度裔、日本裔、中国大陆裔、中国港台奥裔、非洲裔、拉丁美洲裔、俄罗斯裔、犹太裔、中东裔美国人等等新的血液，接受了西方社会意识之希尔伯特空间的特性，成为了美国重要的社会组成部分。奥巴马成为第一个非欧洲社会血统的、非洲裔黑人总统，就可以说明美国社会已经真正成为人类文明的新中心。</p><p>　　至于中东、印度、中国、东南亚、非洲、俄罗斯等地区与国家社会意识之希尔伯特空间，只能继续的被动的接受冲击，慢慢的改变。</p><p>　　中东、印度、中国、东南亚、非洲、俄罗斯等地区与国家社会意识之希尔伯特空间，只有而且一定会依据本身的特性而延续发展。</p><p>　　也许要经历500年，人类文明如果可以避开核战争的毁灭，就会诞生新的文明中心，印度、中国、俄罗斯都是具有巨大潜力的新的人类文明中心。这就是中国自由主义者的理想吧。</p><p><br></p><p><br></p><p>　　秦有： <br>　　评论 爵士猫大懒虫：这就是你我分歧的所在了，你洋洋洒洒这么多，还是无法正视自己的工具理性，将个体生活的意义看做虚无的，而只关注历史事件，相对历史事件，个体生活是塌陷了的，同样，相对个体生活，历史事件毫无意义。所以，讨论历史，一定要沉到个人生活里，尤其是当下，不然就被大词带沟里去了</p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：是的。个人生活的意义，是有自己的意识所给定的，不是外部的哲学概念、历史的研究给定的。这点，我认同叔本华的哲学观点，世界就是我的意识意志的表象。好像，我的意识自由度高于一切自由主义者吧。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：【相对历史事件，个体生活是塌陷了的，同样，相对个体生活，历史事件毫无意义。】，很深刻，很透彻。你从两个基准来理解人类的意识量子事件，确实如此，这就是波函数无限维度的表达。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：【相对历史事件，个体生活是塌陷了的，同样，相对个体生活，历史事件毫无意义。】，用大脑神经科学来表述，人类意识就是一种生物电流罢了。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：【相对历史事件，个体生活是塌陷了的，同样，相对个体生活，历史事件毫无意义。】，用分子生物学理论表达，就是人类意识就是基因的信息量，基因的变异过程，就是DNA的运动。基因会记录人类文明的轨迹的。</p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：【相对历史事件，个体生活是塌陷了的，同样，相对个体生活，历史事件毫无意义。】，用分析哲学与语言哲学表达，人的意识量子事件就是符号的逻辑关系、创造、传递与组合过程。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br> <a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%25A7%25A6%25E6%259C%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@秦有</a> 2018-06-03 06:41:13<br>　　你对自由主义的理解，是用一种大词面对另一种大词的恐惧而已，或者是斗争的姿态也可以。<br>　　我没有崇拜自由主义，恰恰相反，我强调的正是楼主所不愿面对的工具理性，是从技术的角度加以逻辑展开的。自由有其工具理性的一面，任何思想或者理念，如果仅仅停留在纸面上，不能下沉到制度，以及操作层面上，那么立刻就变成了大词，下一秒就被抛弃了。<br>　　-----------------------------</p><p>　　工具理性，只是一种哲学观念，是唯理论在当今的新的发展。黑格尔的精神现象学，对工具理性与工具论，有了彻底的批判。所谓的工具理性，只是莱布尼茨-沃尔夫体系一个变异罢了。</p><p>　　赵林：莱布尼茨-沃尔夫体系与德国启蒙运动_爱思想 <a href=\"http://link.zhihu.com/?target=http%3A//www.aisixiang.com/data/83672.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://www.http://aisixiang.com/data/83672.html</a></p><p>　　莱布尼茨是近代理性主义哲学的重要代表，无论是其单子论的本体论思想，还是其\"最好世界\"的神学理论，都充满了浓郁的理性主义色彩。</p><p>　　。然而在莱布尼茨的唯理论中，却蕴含着理性自身的重大隐患。莱布尼茨为了建立具有普遍必然性的知识论体系而把理性片面地发展到了极端，其结果却导致了唯理主义认识论的深刻危机。<br>　　从认识论的角度来说，莱布尼茨关于单子没有窗口、不发生相互作用，而是按照前定和谐的内在原则自由发展的观点，必然会导致对于经验知识的轻视甚至否定。莱布尼茨虽然承认依据充足理由原则而建立的事实真理，但是这种事实真理只是对于我们这些知觉能力有限的单子而言的，而在上帝这个最高的单子眼里，一切真理都是建立在矛盾律之上的理性真理。换言之，对于感觉经验来说是或然性的东西，对于纯粹理性来说则是必然性的东西。或然性与必然性的差别不是客观的，而是主观的，它们取决于每个单子自身具有的知觉能力或者表象世界的清晰程度。我们由于不能认识宇宙的最高奥秘，所以只能断定每一个偶然存在的事物都有一个理由，虽然我们并不能完全了解这些理由。但是对于作为整个世界的充足理由的上帝来说，一切事物的创造和存在都是必然的，都是根据矛盾原则而必然地推演出来的。我们从外部朦胧感受到的东西，上帝在其中却一目了然。我们与上帝的差别说到底就在于理性的能力上，因此，只要我们的理性能力提高到一定的水平（这个提高的过程就是启蒙），我们就有可能像上帝一样，完全依据矛盾律从天赋的观念和原则中推演出关于整个世界的知识（事实上，莱布尼茨就认为自己已经具备了这样的理性能力！）。这样一来，在莱布尼茨的这种极端唯理论中就包含了一种像休谟的极端经验论中一样危险的因素，这种因素可能摧毁整个知识论大厦。</p><p>　　因为既然一切知识都已经先天地包含在内在原则之中，既然真理可以完全撇开经验而通过纯粹的先天分析来推出，那么知识就不再是主体对客体的一种认识，而成为先验自我依据天赋观念和天赋原则而进行的一种纯粹演绎。既然\"在我们看来是外部世界给我们的头脑留下印象的东西，只不过是我们身上已经有的东西的展开。因此，严格地说，不存在知识，因为知识暗含着被认识者和认识者之间的联系。这就是唯心主义传统在莱布尼茨那里发现自己所处的死胡同。\"</p><p>　　莱布尼茨哲学中所蕴含的这种极端唯理主义因素在他的思想继承者沃尔夫（Christian Wolff，1679-1754）那里被进一步系统化了，从而发展成为一种形而上学的独断论。这种独断论试图遵循严格的几何学形式，通过定义、公理、定理、绎理等推理环节，从形而上学的抽象范畴中直接演绎出整个知识论体系。沃尔夫甚至把灵魂不朽和上帝的本质也当作了理性认识的对象，认为人类的理性能力可以把握宇宙、灵魂和上帝的全部知识。如果说自然神论者认为人们可以根据经验理性来证明上帝的存在，那么沃尔夫则认为人们可以凭着先验理性来认识上帝的本质，理性在沃尔夫那里实际上已经成为一个形而上学的（或超经验的）万能的和独断的上帝。沃尔夫这种过份强调理性能力的观点，曾一度遭到了路德虔敬派的坚决反对，后者坚持把信仰与理性相割裂，认为上帝的本质是理性无法认识的，只能通过神秘的直观和虔诚的信仰才能领悟</p><p>　　在18世纪，\"莱布尼茨-沃尔夫体系\"统治了德国思想界达半个多世纪之久，一直到康德的《纯粹理性批判》问世（1781年），这个形而上学独断论的哲学体系才遭到了根本性的清算。</p><p>　　沃尔夫哲学体系包括理论哲学和实践哲学两大部分，理论哲学又包括形而上学--研究抽象的存在本身的理论；理性心理学--关于灵魂的实体性和不朽性的理论；宇宙论--关于形体和世界的普遍学说；理性神学--探讨上帝的存在及其本质的学说。沃尔夫的实践哲学则包括自然法、伦理学、政治学和经济学。我们在后面将会看到，康德在《纯粹理性批判》的先验辩证论中对理性心理学、先验宇宙论和理性神学的批判，基本上都是针对着沃尔夫的理论哲学的；而康德在《实践理性批判》中关于灵魂不朽的纯粹实践理性悬设，或多或少也受了沃尔夫的道德完善过程无限推进--从今生一直到来世--的伦理学思想的影响（注：柯普斯登指出：\"康德的观点是人有责任追求道德的圆满，而这圆满不能以有限时间来完成，因此我们注意到对沃尔夫来说，道德的圆满并不是现今可以明确达成的，换言之，人不可能达到他的目的而就此歇息。寻求道德圆满隐含着不停地朝它努力的责任，不停地努力于使冲动和情感在理性的支配下得到完全的谐调，而这种责任共同落在个体和整个人类身上。\"</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br><u><a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%25A7%25A6%25E6%259C%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@秦有</a></u> 2018-06-03 07:03:23<br>　　关于伟大，我并不认为人工智能有多伟大，同样自由也不伟大，只有脱离生活才会这么表达，在生活里，自由在生活里，可以变成可操作的方案，有什么伟大的，和吃喝拉撒睡是一样的。<br>　　楼主不肯忆苦思甜，将个人的生活完全隐去，用几个新的大词取代之前的大词，就可以一劳永逸的向过去说再见了吗？就可以继续用历史事件来忽视当下的生活细节了吗？显然不能<br>　　-----------------------------</p><p>　　楼主不肯忆苦思甜，将个人的生活完全隐去，用几个新的大词取代之前的大词，就可以一劳永逸的向过去说再见了吗？就可以继续用历史事件来忽视当下的生活细节了吗？显然不能</p><p>　　很有意思。个人生活的意识事件，只是一种过去的事件。你必须用当下的放下一切，才有法喜与快乐，才可以不背负包袱，欢欢喜喜的死去。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>讲个禅宗故事</p><p>　　在烟雾缭绕的寺院，在空山幽谷中的几声钟鸣，禅师沐浴之后，换上袈裟，静静地坐在佛龛下，几十个弟子静静地听着禅师之教诲，一柱香快要烧完了，禅师淡淡的说：“我要圆寂了，我已将毕生所学教给了你们，我死后不可将我火化。”当最后一抹香灰倒在香炉中，禅师默然地合上了双眼。<br>　　“噹，噹，噹！”工匠将最后一颗钉锤到了棺材上，半山腰上一片磬音，漫山的诵经声，在山谷中显得空荡荡，当庙中诵了三天三夜的经咒，一个小和尚痛哭在师父的棺上，要求工匠开棺，现看师父一眼，当棺材缓缓拉开，小和尚“扑”的一声坐倒在地，师父竟坐了起来瞪了小和尚一眼说：“不要再打扰我了。”即又平静地躺入棺中。<br>　　对生死的看透已超越了生死，对死亡的淡然已让离去变得平常，禅师可以继续生活，却选择了涅槃，因为他已将全部知识授予弟子，教育出了一批更优秀的禅师，他今生的任务已经完毕，他的时间已得到了充实，人生也因此得到了诠释，他不会因荒废时间而悔恨不会因一事无成而遗憾，他有一群知识渊博的弟子，他们也将去教化世人。真正的禅师不会相信前世来生，他们只相信自己，相信活好现在，充实自己的时光，帮助更多的世人。无愧地面对死亡，迎接死亡。<br>　　若是一个人可以随时准备无憾地接受死亡，就足矣看出他对生命的热爱与充实。困难.挫折.甚至死亡，他们都是突如其来的，不会像学校演戏一样，告诉你几时几分开始逃生，是福不是祸，是祸躲不过，而要从现在开始珍惜生命，热爱生命，既可无悔的面对死亡。人生命只有一次，若非在我们年轻时失去它，那就让他丧失的有意义。但我们不应主动地抛弃他，我们无法再做选择，因为我们已经做出了选择。父母给予我们生命，就不应轻易放弃.轻看。即使困难.失败.生死诀别。生命的伟大.可以创造无数奇迹。<br>　　而我愿把我心中的真理，若我生命的失去，可以换取更多人的幸福，我愿把我仅有一次的生命贡献出来，这样我的生命将得到他想要的意义，我的人生也将得到无限的延长。<br>　　死亦我所恶，所恶有甚于死者，故患有所不辟也。如使人之所欲莫甚于生，则凡可以得生者何不用也？使人之所恶莫甚于死者，则凡可以辟患者何不为也？由是则生而有不用也，由是则可以辟患而有不为也。是故所欲有甚于生者，所恶有甚于死者。非独贤者有是心也，人皆有之，贤者能勿丧耳。<br>　　愿做那样的贤者，我在努力做那样的贤者。</p><p>　　禅宗的故事（二)_菩提漫画葛_新浪博客 <a href=\"http://link.zhihu.com/?target=http%3A//blog.sina.com.cn/s/blog_9e1dabde01019631.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://http://blog.sina.com.cn/s/blog_9e1dabde01019631.html</a></p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br> <a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%25A7%25A6%25E6%259C%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@秦有</a> 2018-06-03 07:17:51<br>　　楼主无法走到罪里去，这个罪不是别人的，是属于每一个个体的，具体的生活的。而试图用基于工具理性的佛教理念，希尔波特非定域量子理论，来解构历史，当下，未来，以为可以解决包括自身在内的所有问题。<br>　　其实人无完人，楼主，我自己，都不完美，推而广之，没有完美的理论，没有完美的存在，只有回到日常生活里，继续演绎理念的多样性，才是根本。<br>　　-----------------------------<br>　　我用一个禅宗故事予以回答。</p><p>　　天生的，世间上没有天生的东西，大自然因缘聚合会生森罗万象，吾人的本性上包含了善恶诸法，所谓‘心生则种种法生，心灭则种种法灭。’任何人只要有心，没有什么改不了的恶习。<br>　　行恶与修善<br>　　有学僧请示峻极禅师道：‘如何才是修行行善的人？’<br>　　峻极：‘担枷带锁者。’<br>　　学僧：‘如何是邪恶为非的人？’<br>　　峻极：‘修禅入定者。’<br>　　学僧：‘学僧根机愚昧，禅师的开示，颠倒难明，恳求禅师还是用简明易晓的言辞开示吧！’<br>　　峻极：‘所谓恶者，恶不从善。善者，善不从恶。’<br>　　学僧如堕五里雾中，仍然茫然。良久，峻极禅师问学僧道：‘懂了吗？’<br>　　学僧：‘不懂。’<br>　　峻极：‘行恶者无善念，行善者无恶心，所以说善恶如浮云，无所生也无所灭。’<br>　　学僧于言下有悟。</p><p>　　善恶，在世间法讲，做好事名曰善，做坏事名曰恶，善有善报，恶有恶报，三世因果，历然俱在，在事相说，一点不虚。但在本性上讲，善恶之名都不立，若能不思善不思恶，即名见性(见到自己本来面目)。所谓‘罪恶本空由心造，心若亡时罪亦空’。行善是枷锁，作恶名禅定，这不怪禅师颠倒，在真理上讲，作福行善，一味执着人天福报，岂非为枷锁所囚？作恶为非，虽要恶道流转，但本性仍是如此。故峻极禅师兴大慈悲，发此高论，乃要吾人莫为善恶所迷。应该知道，为善上生时，就一味执著有为法，以为是究竟解脱，这就错了；作恶下堕时，就心灰意冷，以为人生无望，这也是错的。实则‘善恶是法，法非善恶’也。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>　@秦有 2018-06-03 08:00:24</p><p><br></p><p>　　总结下，在理念上，我能理解楼主，但分歧也很明显：</p><p><br></p><p>　　（1）关于工具理性，我是强调理念的工具理性的，认为还不够，尤其是管理技术。而楼主是过分强调了工具理性，而没有意识到。</p><p><br></p><p>　　（2）从技术的角度看，我认为意识可以再造，而楼主认为意识的自性具足，决定了意识不可能再造。这里，要么证明，要么证伪，没有中间地带。</p><p><br></p><p>　　（3）我的构建是从罪和自由出发的，从理念到技术，尤其是自由度的演绎和定量。而楼主从佛教理念，融汇希尔波特非定域空间，以及量子理论，来重新构建。</p><p><br></p><p>　　------------------------------------</p><p>　　总结的极好，谢谢先生的智慧与理解。</p><p><br></p><p><br></p><p><br></p><p>　　@秦有 2018-06-03 08:01:49</p><p>　　楼主的工具理性还停留在理念构建的层面，并没有形成生活里的管理技术，至少楼主认为是没有必要的。</p><p>　　-----------------------------</p><p><br></p><p>　　形成生活里的管理技术，那是大人物的事情。我就是快乐的蚂蚁，这就够了。他人世界，与我有关吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br> <a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%25A7%25A6%25E6%259C%2589\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@秦有</a> 2018-06-03 08:01:49<br>　　楼主的工具理性还停留在理念构建的层面，并没有形成生活里的管理技术，至少楼主认为是没有必要的。<br>　　-----------------------------<br> <a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%2588%25B5%25E5%25A3%25AB%25E7%258C%25AB%25E5%25A4%25A7%25E6%2587%2592%25E8%2599%25AB\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@爵士猫大懒虫</a> 2018-06-03 08:04:07<br>　　形成生活里的管理技术，那是大人物的事情。我就是快乐的蚂蚁，这就够了。他人世界，与我有关吗？<br>　　-----------------------------</p><p>　　秦有： <br>　　评论 爵士猫大懒虫：喜怒哀乐之未发，中庸就是讲日常生活的：）</p><p><br></p><p>　　秦有： <br>　　评论 爵士猫大懒虫：你就是别人，地球人就是外星人，怎么会没有关系。自了汉是小乘，是基础，然后才是大乘。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：关系之说，是后人的研究。鲁迅的阿Q正传，就是表达辛亥革命影响到绍兴，到了阿Q这里已经完全变异了。</p><p><br></p><p>　　爵士猫大懒虫：</p><p>　　评论 秦有：儒家的中庸，是君君臣臣父父子子大前提的中庸。佛学的圆融中道，是彻底放下我执法执，无分别心、空性的中道。儒家眼中是没有个人生活的意义的，一切意义要追溯于天子皇帝的圣言裁决，呜呼哀哉！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>场域理论，是社会学的主要理论之一，是关于人类行为的一种概念模式，它起源于19世纪中叶的物理学概念。提出者是库尔特·考夫卡等。总体而言是指人的每一个行动均被行动所发生的场域所影响，而场域并非单指物理环境而言，也包括他人的行为以及与此相连的许多因素。</p><p>　　何谓“场域”？“从分析的角度来看，一个场域可以被定义为在各种位置之间存在的客观关系的一个网络，或一个构型。”进一步说，场域是一种具有相对独立性的社会空间，相对独立性既是不同场域相互区别的标志，也是不同场域得以存在的依据。</p><p>　　皮埃尔·布迪厄(Pierre Bourdieu)，是继M·福柯之后，法国又一具有世界影响的社会学大师，他和英国的A·吉登斯、德国的J·哈贝马斯一起被认为是当前欧洲社会学界的三大代表人物，他的思想和著述在国际学界广受重视，20世纪90年代中期以来，也引起了我国社会学者的注意。布迪厄称得上学术杂家，他的社会学中融入了人类学、教育学、哲学、艺术、语言学、历史、文化学等诸学科的内容，可谓包容丰富、错综复杂。一般认为，场域理论是他的基本理论，在其社会学思想体系中占有最重要的地位。因此，本文试图对布迪厄的这一理论进行简要的分析。</p><p>　　场域和资本</p><p>　　对于场域(field)这一概念，布迪厄这样说过：“我将一个场域定义为位置间客观关系的一网络或一个形构，这些位置是经过客观限定的。”布迪厄的场域概念，不能理解为被一定边界物包围的领地，也不等同于一般的领域，而是在其中有内含力量的、有生气的、有潜力的存在。布迪厄研究了许多场域，如美学场域、法律场域、宗教场域、政治场域、文化场域、教育场域，每个场域都以一个市场为纽带，将场域中象征性商品的生产者和消费者联结起来，例如，艺术这个场域包括画家、艺术品购买商、批评家、博物馆的管理者等等。</p><p>　　场域不仅是布迪厄社会学理论的概念，也是他从事社会学研究的分析单位。布迪厄选择这一理论分析工具和分析单位是与他的研究方法分不开的。布迪厄是从人类学迈入社会学殿堂的，他对人类学的方法情有独钟，在对阿尔及利亚原始部落研究中，他成功地运用了人类学方法。至于对法国现代社会的研究，要涉及两个不同层次的问题：第一，能否使用人类学方法？第二，如何使用人类学方法？</p><p>　　布迪厄早期研究深受列维—斯特劳斯的影响，但随着研究的深入，他对结构主义的思想提出了批评，在这两个问题上也没有妥协，他说：“没有什么能阻止我们将人类学的方法应用于现代社会中。”在具体的实践过程中，法国人P·拉宾诺对他启发很大，拉宾诺选取了一个群体（法国的社会改革者精英），这个群体在20世纪20年代关心城区规划，反对种族主义和阶级压迫，拉宾诺对这一群体进行了人类学的研究。布迪厄由“群体”(group)这一研究单位扩大到“场域”，在场域中，群体占据了位置，他的人类学研究方法正是依托于场域这个基本单位而展开的。</p><p>　　场域，是由社会成员按照特定的逻辑要求共同建设的，是社会个体参与社会活动的主要场所，是集中的符号竞争和个人策略的场所，这种竞争和策略的目的是生产有价值的符号商品，而符号商品的价值依赖于有关的消费者社会对它的归类，符号竞争的胜利意味着一种符号商品被判定为比其竞争对象拥有更多的价值，并可将之强加于社会，布迪厄称之为“符号暴力”。他认为：“策略是实践意义上的产物，是对游戏的感觉，是对特别的、由历史性决定了的游戏的感觉，……这就预先假定了一种有关创造性的永久的能力，它对于人们适应纷纭繁复、变化多端而又永不雷同的各种处境来说，是不可或缺的。”所以，场域可被视为不定项选择的空间，它为其中的社会成员标出了待选项目，但没有给定最终选项，个人可进行竞争策略的多种搭配选择，不同的人会出现不同的结果，在这些结果中，一方面可以体现出选择者的意志，即个体的创造性，另一方面可体现出选题的框架要求和限制。</p><p>　　说场域是充满力量的，是指个体在场域中展开竞争，每一个场域中都有统治者和被统治者，而任何统治都隐含着对抗。在布迪厄看来，甚至场域的确定和场域边界的确定，都充满着不同力量关系的对抗。他以个体间的互动来定义场域的界限，场域的界限是由场域自身决定的，没有先验的答案，“场域的界限在场域作用停止的地方。”[4](P98)布迪厄由此提出了资本(capital)这一概念：“在场域中活跃的力量是那些用来定义各种‘资本’的东西。”布迪厄的资本概念不同于经济学家所用的资本概念，他把资本视作积累起来的劳动（以物化的形式或“肉身化”的形式），这种劳动可以作为社会资源在排他的基础上被行动者或群体所占有。</p><p>　　场域内存在力量和竞争，而决定竞争的逻辑就是资本的逻辑，一种资本不与场域联系在一起就难以存在和发挥功能。资本不仅是场域活动竞争的目标，同时又是用以竞争的手段。布迪厄把资本分为三种类型：经济资本、社会资本、文化资本。后来，他又补充了象征资本。</p><p>　　布迪厄学术</p><p>　　布迪厄的资本概念是他的社会学宗旨的具体体现，他主张社会学家的任务就是要打破人们的错觉，揭示社会生活的本质，他说过：“社会学家和历史学家的职责在于对社会的运作进行科学分析……既然有一个研究社会的科学（即社会学），它就不可避免地要发掘隐秘，特别是统治者不愿看到的被揭露的隐秘。”他认为社会并不是一个简单的赌场，赌场是一种完全竞争的、没有惯性、没有积累、没有对已有财富和特征继承的世界，赌场上每个赌徒面对着同样的输赢概率，机会是平等的。而社会不同于赌场，社会活动也不同于赌博，社会活动的参加者是以异质性的身份参与的，这异质性主要表现为他们拥有不同质或量的资本。资本在场域中不是平均分配的，资本是历史积累的结果，是一种排他性资源，同时又是新一轮社会活动的起点，不同类型、不同数量的资本分布结构，体现着社会的资源和权力结构，这种起点的不平均决定了竞争活动的不平等。</p><p>　　场域自主化</p><p>　　布迪厄认为社会空间中有各种各样的场域，场域的多样化是社会分化的结果，布迪厄将这种分化的过程视为场域的自主化过程。自主化实际上是指某个场域摆脱其它场域的限制和影响，在发展的过程中体现出自己固有的本质。为了说明场域的自主化，布迪厄区分了一个给定的空间中的两种“生产场域”，一种是“限定的生产场域”，另一种是“大规模的生产场域”。限定的生产场域是与场域本身的特殊化共同扩展的，而大规模的生产场域是社会场域的扩大，有更多的外在影响进入，社会力量和世俗力量更多的渗透，此种场域，边界往往模糊不清，特殊化程度不高。</p><p>　　在限定的生产场域中，生产是为了其它生产者即场域中的行动者和制度，这时，供给方同时也是需求方，限定的生产场域即自主化的场域，或者说具有自主性的场域。布迪厄在经济学的启发下，研究了“自主性的度”。他认为，一个场域越是自主的，这个场域的生产者只为本场域其它生产者生产而不为社会场域的消费者生产的程度越大。这样来看，自主性最强的场域是科学场域，其次是高层次的艺术场域，相形之下，法律场域较少自主性，而自主性程度最低的是政治场域。因为科学场域是自主化的典范。所以，布迪厄指出，一个场域越是从社会场域和权力场域中获得了自主性，这个场域的语言越具有科学性。一个场域中的竞争和策略不仅取决于符号商品的价值，还有此场域的自主性，因为自主性强的场域遵循的是“是非”逻辑，自主性弱的场域遵循的是“敌友”逻辑。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br><a href=\"http://link.zhihu.com/?target=http%3A//www.tianya.cn/n/%25E7%2588%25B5%25E5%25A3%25AB%25E7%258C%25AB%25E5%25A4%25A7%25E6%2587%2592%25E8%2599%25AB\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@爵士猫大懒虫</a> 2018-06-03 11:06:18<br>　　【前沿物理】量子力学能够解释大脑意识背后的原理吗？_搜狐教育_搜狐网 <a href=\"http://link.zhihu.com/?target=http%3A//www.sohu.com/a/50509841_113785\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://www.http://sohu.com/a/50509841_113785</a><br>　　人类的大脑为何具有如此复杂的思考能力？这背后是否有量子力学的加持？物理学家Matthew Fisher给出了自己的答案。本文是NewScientist杂志对这个话题的深度长文。<br>　　从意识到长期记忆，人脑拥有独一无二的计算能力——这些或许都能用量子模糊性来解释。<br>　　Matthew Fisher担心如果同事发现他最近的研......<br>　　-----------------------------<br>　　意识的观念，有两个基本的观察维度，一个是意识是具有多层次结构，人的语言与沟通关系是意识核心构造的最外层，意识核心构造的构造是语言沟通--眼耳鼻舌身的感觉--第六的意识或者说大脑的顶部功能区域以及整个人体的神经元网络---第七意识就是自我意识--第八阿赖耶识种子、这是人体意识内在的核心、最深层部分---第九意识、就是人体意识与宇宙意识的量子纠缠的构造。人体意识的外部结构与接口，语言符号--思想、哲学、艺术、政治、经济、伦理、秩序、科学体系--人的社会实践活动与社会事件--人的发明创造物比如电脑、核武器--整个地球的环境的被人的意识再造。</p><p>　　你的【再造意识】，我理解为，人的意识的外部接口与构造。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>谢谢你的勇敢。赞一个。</p><p>　　我也是一个是很偏执的人，也很聪明，自己把自己的路堵死了，而自己不知改悔，最后不可救药，死路一条，彻底崩溃。</p><p>　　后来，我活过来以后，就一直思考【我为何如此行为】，成为天主教信众以后，我就思维【中国人为何如此行为】。毕竟天主教不和国情，我又寻找【佛学的中观唯识学】，这才彻底打开思路。</p><p>　　前前后后，有十多年的转换时间。<br>　　当今修学【瑜伽师地论】，感觉说的太好了，许多问题说透了。我以中观唯识为基准，再观想当今的哲学与科学，理解就深刻了，特别是对于量子物理的哲学思想有了深刻的认知。</p><p>　　这一切说明啥？这证明，人的意识是有一种多层次、时间延续的相续的特性，就是一种希尔伯特空间波函数的特性，也是无限维度的。</p><p>　　由此佛学的业力与阿赖耶识种子说，就是人的意识是一种多层次、时间延续的相续的特性，中观唯识学，十分契合量子物理的原理。这又是为何？</p><p>　　中观唯识学，不是以西方文化的语言逻辑的方式进行发展的，而是以印度文化的禅修直观的模式发展的。佛学的修行，确实使人的意识空间可以得到合理的修复，并且达到一种希尔伯特空间的合理构造，也就是佛学的法住智涅槃智的状态。</p><p>　　西方心理学与认知科学，对于天才与抑郁症、精神异常研究十分深入，这也解释了天才的意识希尔伯特空间容易发生紊乱，爱因斯坦也有抑郁症的病症，这就不说了。</p><p>　　在知乎上，记录里许多抑郁症患者的情绪状况，我也试图与他们对话，但是比较困难。但是，战胜了抑郁症病灶的人，思想境界有了十分高深的、更加有智慧的层次。</p><p>　　想人生，想命运，参玄悟道。</p><p>　　当体放下一切，由此得到法喜，这是没有之你我经历的人，无法体会到的人的意识深处之快乐！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>科学家发现有关抑郁症分子机制 - 生物研究 - 生物谷 <a href=\"http://link.zhihu.com/?target=http%3A//www.bioon.com/biology/Class18/580933.shtml\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://www.http://bioon.com/biology/Class18/580933.shtml</a></p><p>　　在现代社会中，抑郁症的发病率越来越普遍，并且成为影响人类生活最严重的精神疾病之一，但人们对于抑郁症的成因一直没有明确的认识。学术界最新的观点认为抑郁症的成因主要是大脑在响应外界刺激比如压力时因为某些分子及细胞水平的病理性可塑性变化，最终导致大脑特定环路的神经活动发生了改变。近年来，外侧缰核（LHb），作为介导从前脑向中脑腹侧被盖区（VTA）等奖赏相关脑区传递信息的核心枢纽，被认为是参与抑郁症形成的关键脑区。神经影像学以及抑郁动物模型中的研究表明，在抑郁状态下缰核脑区表现出过度活跃。对于这一现象背后分子机制的研究对进一步认识以及治疗抑郁症有着非常重要的意义。</p><p><br></p><p>　　在研究员胡海岚指导下，博士生李坤和周涛等利用定量蛋白质分析，通过比较正常和抑郁大鼠的缰核，发现钙/钙调蛋白激酶II家族中的成员βCaMKII分子的表达水平在多种抑郁动物模型的外侧缰核中明显增多；而在天生抑郁的动物中，给予类似于抑郁病人的抗抑郁药物治疗后，动物的抑郁症状明显改善，此时βCaMKII在外侧缰核的含量也相应降低。为了进一步明确βCaMKII的表达水平与抑郁症状的关系，他们通过基因操作在外侧缰核提高 βCaMKII的表达水平，发现经历这种基因操作的动物，都会产生典型的抑郁症状，例如无法体会快乐，对逆境产生绝望等。更有意思的是，当他们利用RNA干扰技术，在天生抑郁大鼠的外侧缰核脑中特异性地降低βCaMKII的表达水平时，各种先天的抑郁症状都得到明显的好转。而在外侧缰核进行的电生理记录显示过表达βCaMKII后，外侧缰核神经元的电活动也明显增强。</p><p><br></p><p>　　这项研究提示了一种新的抑郁症分子机制，即在外侧缰核神经元中βCaMKII的增加会导致缰核过度兴奋，从而增强了对其下游相关脑区诸如腹侧被盖区VTA与中缝背核DR的抑制，最终导致了快感缺失与行为绝望的核心抑郁症状。该研究工作首次确定了外侧缰核内的βCaMKII分子是导致缰核过度兴奋和抑郁症发生的关键分子，揭示了新的抑郁症发病机理，并为抑郁症的基因治疗提供了新的靶点。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><br><br>“自我”是一个非常抽象的概念。事实上，自我一直伴随着我们所生命历程，自我们出生起，我们便从未停止对自我的探索，我们终其一生都在问自己这样一个问题：“我是谁？谁是我？”</p><p>　　人在一生，始终在追寻两个目标：一个是希望融入社会，在与他人交往的过程中获得社会认同；另一个是希望认识自我，并发展自我，通过了解自己的生理、心理及其与他人的差异，发展出具有个人独特性的对自己的观念——自我概念。<br>　　·自我归根到底是人们的反身意识，即以自身为对象，形成对自身的看法和观念的问题。</p><p>　　另一个与自我这一术语高度关联的概念是自我觉察，即自己把自己当作考察对象，认识自己的一切，包括生理状况、心理特征、自我的目标、自己与他人的关系等。</p><p><br></p><p>　　这就要提出问题了。</p><p>　　1【我是一个真实的、可以测量的、永恒不变的实体吗】</p><p>　　2.【自我到底是一种意识观念，还是客观的对象】</p><p>　　3.【个体的人，到底它的组成部分是什么】</p><p>　　4.【人如果死亡了 我也就是死亡了吗】</p><p>　　5.【人的意识真的就是后天的， 人的意识与先天无关吗】</p><p>　　6【人的性格是怎样形成的 为什么父母亲的性格不能决定子女的性格】</p><p>　　7【同一的父母的子女 为何智力水平 道德观念 性格特质 今后的人生的发展 有如此大的区别】</p><p>　　。。。。。。。。。。。。。。。。。。。</p><p><br></p><p>　　等等问题太多了。</p><p><br></p><p>　　我提出的个体意识是非定域的、希尔伯特空间的、无限族、量子波函数的模型，完全可以包含种种的疑惑。因为当今的哲学、心理学、认知科学、神经科学研究等等，只是从固定的角度回答【我是谁】【世界是怎样的】【我的归宿在哪里】的终极问题。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37550331", 
            "userName": "爱笑的逗逼", 
            "userLink": "https://www.zhihu.com/people/33fbe85d1ae6caaff0619fc0fd83d622", 
            "upvote": 2, 
            "title": "杂聊「致MicroPython专栏读者」", 
            "content": "<p>我是一个c++/c#/Python/lua等的热爱者，喜爱汉化，算法研究等，超级喜欢钻研，我的几篇写我对CMake理解的文章麻烦你们看一看。</p><p>现在我被邀请参加这个专栏的写作，那么我要么不干，我要干就把它干好，我决定去学MicroPython，为了给大家更好的文章学习和钻研，感谢专栏的编辑给我这个机会。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-522671daed23967511e288fa7255e241_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1920\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-522671daed23967511e288fa7255e241_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1920&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1080\" data-rawheight=\"1920\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-522671daed23967511e288fa7255e241_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-522671daed23967511e288fa7255e241_b.jpg\"/></figure><p></p>", 
            "topic": [], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "感谢邀请，然而我只玩MS家的VB/C#...", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37537046", 
            "userName": "张晓康", 
            "userLink": "https://www.zhihu.com/people/f0a29ad667f017ecc4f313d8c176525a", 
            "upvote": 21, 
            "title": "深入理解计算机系统（十九）：过程（函数的调用原理）", 
            "content": "<p><b>目录</b></p><p>1、栈帧结构</p><p>2、过程的实现</p><p>3、过程调用和返回指令</p><p>4、寄存器使用惯例</p><p>5、过程实例</p><p>5、递归过程</p><p>6、总结</p><p>　　上篇博客我们讲解了计算机汇编语言是如何实现循环结构的。本篇博客我们将介绍汇编语言中过程的实现方式。</p><p>　　过程在高级语言中也称为函数，方法。一个过程的调用包括将数据（以过程参数和返回值的形式）和控制从代码的一部分传递到另一部分。此外，它还必须在进入时为过程的局部变量分配空间，并在退出时释放空间。大多数机器，包括我们一直讲的 IA32，只提供转移控制到过程和从过程中转移出控制这种简单指令。数据传递和局部变量的分配释放都是通过操纵程序栈来实现。</p><p>　　合理的构建方法并调用，能大大增加代码的复用性，也能使代码结构更加清晰，接下来我们就来详细的介绍。</p><p><b>正文：</b></p><p><b>1、栈帧结构</b></p><p>　　IA32 程序用程序栈来支持过程调用。机器用栈来传递过程参数、存储返回信息、保存寄存器用于以后恢复，以及本地存储。而为单个过程分配的那部分栈称为帧栈（stack frame）。</p><p>　　帧栈可以认为是程序栈的一段，它有两个端点，一个标识着起始地址，一个标识着结束地址，而这两个地址，则分别存储在固定的寄存器当中，即起始地址存在%ebp寄存器当中，结束地址存在%esp寄存器当中。也就是说寄存器 %ebp 为帧指针，寄存器 %esp 为栈指针。</p><p>　　当程序执行时，栈指针可以移动，因此大多数信息的访问都是相对于帧指针的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-959a4cae497ee6d179475ab62a1d0be1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb\" width=\"707\" data-original=\"https://pic2.zhimg.com/v2-959a4cae497ee6d179475ab62a1d0be1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;707&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"707\" data-original=\"https://pic2.zhimg.com/v2-959a4cae497ee6d179475ab62a1d0be1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-959a4cae497ee6d179475ab62a1d0be1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>　　这个图基本上已经包括了程序栈的构成，它由一系列栈帧构成，这些栈帧每一个都对应一个过程，而且每一个帧指针+4的位置都存储着函数的返回地址，每一个帧指针指向的存储器位置当中都备份着调用者的帧指针。各位需要知道的是，每一个栈帧都建立在调用者的下方（也就是地址递减的方向），当被调用者执行完毕时，这一段栈帧会被释放。还有一点很重要的是，%ebp和%esp的值指示着栈帧的两端，而栈指针会在运行时移动，所以大部分时候，在访问存储器的时候会基于帧指针访问，因为在一直移动的栈指针无法根据偏移量准确的定位一个存储器位置。</p><p>　　还有一点比较重要的内容，就是栈帧当中内存的分配和释放。由于栈帧是向地址递减的方向延伸，因此如果我们将栈指针减去一定的值，就相当于给栈帧分配了一定空间的内存。这个理解起来很简单，因为在栈指针向下移动以后（也就是变小了），帧指针和栈指针中间的区域会变长，这就是给栈帧分配了更多的内存。相反，如果将栈指针加上一定的值，也就是向上移动，那么就相当于压缩了栈帧的长度，也就是说内存被释放了。需要注意的是，上面的一切内容，都基于一个前提，那就是帧指针在过程调用当中是不会移动的。</p><p><b>2、过程的实现</b></p><p>　　过程的实现主要就是在于数据如何在调用者和被调用者之间传递，以及在被调用者当中局部变量内存的分配以及释放。</p><p>　　而过程实现当中，参数传递以及局部变量内存的分配和释放都是通过以上介绍的栈帧来实现的，大部分情况下，我们认为过程调用当中做了以下几个操作。</p><p>　　①、备份原来的帧指针，调整当前的帧指针到栈指针的位置，这个过程就是我们经常看到的如下两句汇编代码做的事情。</p><div class=\"highlight\"><pre><code class=\"language-text\">pushl   %ebp\nmovl    %esp, %ebp </code></pre></div><p>　　②、建立起来的栈帧就是为被调用者准备的，当被调用者使用栈帧时，需要给临时变量分配预留内存，这一步一般是经过下面这样的汇编代码处理的。</p><div class=\"highlight\"><pre><code class=\"language-text\">subl    $16,%esp </code></pre></div><p>　　③、备份被调用者保存的寄存器当中的值，如果有值的话，备份的方式就是压入栈顶。因此会采用如下的汇编代码处理。</p><div class=\"highlight\"><pre><code class=\"language-text\">pushl    %ebx</code></pre></div><p>　　④、使用建立好的栈帧，比如读取和写入，一般使用mov，push以及pop指令等等。</p><p>　　⑤、恢复被调用者寄存器当中的值，这一过程其实是从栈帧中将备份的值再恢复到寄存器，不过此时这些值可能已经不在栈顶了。因此在恢复时，大多数会使用pop指令，但也并非一定如此。</p><p>　　⑥、释放被调用者的栈帧，释放就意味着将栈指针加大，而具体的做法一般是直接将栈指针指向帧指针，因此会采用类似下面的汇编代码处理（也可能是addl）。</p><div class=\"highlight\"><pre><code class=\"language-text\">movl    %ebp,%esp </code></pre></div><p>　　⑦、恢复调用者的栈帧，恢复其实就是调整栈帧两端，使得当前栈帧的区域又回到了原始的位置。因为栈指针已经在第六步调整好了，因此此时只需要将备份的原帧指针弹出到%ebp即可。类似的汇编代码如下。</p><div class=\"highlight\"><pre><code class=\"language-text\">popl    %ebp </code></pre></div><p>　　⑧、弹出返回地址，跳出当前过程，继续执行调用者的代码。此时会将栈顶的返回地址弹出到PC，然后程序将按照弹出的返回地址继续执行。这个过程一般使用ret指令完成。</p><p>　　过程的实现大概就是以上八个步骤组成的，不过这些步骤并不都是必须的（大部分时候，开启编译器的优化会优化掉很多步骤），而且第6和第7步有时会使用leave指令代替。下面会详细讲解这些步骤。</p><p><b>3、过程调用和返回指令</b></p><p>　　下图是支持过程调用和返回的指令：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-840613c70448fe983d46061deab56b34_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"208\" class=\"origin_image zh-lightbox-thumb\" width=\"548\" data-original=\"https://pic1.zhimg.com/v2-840613c70448fe983d46061deab56b34_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;548&#39; height=&#39;208&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"208\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"548\" data-original=\"https://pic1.zhimg.com/v2-840613c70448fe983d46061deab56b34_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-840613c70448fe983d46061deab56b34_b.jpg\"/></figure><p>　　①、call指令：call 指令有一个目标，即指明被调用过程起始的指令地址。直接调用的目标可以是一个标号，间接调用的目标是 * 后面跟一个操作符。它一共做两件事，第一件是将返回地址（也就是call指令执行时PC的值）压入栈顶，第二件是将程序跳转到当前调用的方法的起始地址。第一件事是为了为过程的返回做准备，而第二件事则是真正的指令跳转。</p><p>　　②、leave指令：它也是一共做两件事，第一件是将栈指针指向帧指针，第二件是弹出备份的原帧指针到%ebp。第一件事是为了释放当前栈帧，第二件事是为了恢复调用者的栈帧。</p><p>　　③、ret指令：它同样也是做两件事，第一件是将栈顶的返回地址弹出到PC，第二件事则是按照PC此时指示的指令地址继续执行程序。这两件事其实也可以认为是一件事，因为第二件事是系统自己保证的，系统总是按照PC的指令地址执行程序。</p><p>　　可以看出，除了call指令之外，leave和ret指令都与上面8个步骤有些不可分割的关系。call指令没有在8个步骤当中体现，是因为它发生在进入过程之前，因此在第1步发生的时候，call指令往往已经被执行了，并且已经为ret指令准备好了返回地址。</p><p><b>4、寄存器使用惯例</b></p><p>　　程序寄存器组是唯一能够被所有过程共享的资源。虽然在给定时刻只能有一个过程是活动的，但是我们必须保证当一个过程（调用者）调用另一个过程（被调用者）时，被调用者不会覆盖某个调用者稍后会使用的寄存器的值。为此必须采用一组统一的寄存器使用惯例，所有的过程都必须遵守，包括程序库的过程。</p><p>　　假如没有这些规矩，比如在调用一个过程时，无论是调用者还是被调用者，都可能更新寄存器的值。假设调用者在%edx中存了一个整数值100，而被调用者也使用这个寄存器，并更新成了1000，于是悲剧就发生了。当过程调用完毕返回后，调用者再使用%edx的时候，值已经从100变成了1000，这几乎必将导致程序会错误的执行下去。所以便有如下规矩：</p><p>　　在 IA32 中，寄存器%eax，%edx和%ecx被划分为调用者保存寄存器。当过程 P 调用 Q 时，Q可以覆盖这些寄存器，而不会破坏 P 所需的数据。</p><p>　　寄存器%ebx,%esi和%edi被划分为被调用者保存寄存器。这里 Q 必须在覆盖这些寄存器的值之前，先把他们保存到栈中，并在返回前恢复它们，因为 P（或某个更高层次的过程）可能会在今后的计算中需要这些值。上面所说的过程实现的8个步骤中第三步便是如此。</p><p>　　考虑如下代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">int P(int x)\n{\n int y = x*x;\n int z = Q(y);     \n return y+z;\n} </code></pre></div><p>　　过程 P 在调用 Q 之前会先计算 y 的值，而且它必须保证 y 的值在 Q 返回后是可用的。这里有两种方法实现：</p><p>　　①、可以在调用 Q 之前，将 y 的值保存在自己的帧栈中；当 Q 返回时，过程 P 就可以从栈中取出y 的值。换句话说就是调用者 P 自己保存这个值。</p><p>　　②、可以将 y 保存在被调用者保存寄存器中。如果 Q ,或者其它 Q 调用的程序想使用这个寄存器，它必须将这个寄存器的值保存在帧栈中，并在返回前恢复该值。换句话说就是被调用者保存这个值。当 Q 返回到 P 时，y 的值会在被调用者保存寄存器中，或者是因为寄存器根本就没有改变，或者是因为它被保存并恢复了。</p><p>　　这两种方法在 IA32 中是都采用的。</p><p><b>5、过程实例</b></p><p>　　考虑如下代码 function.c</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n \nint add(int a,int b){\n register int c = a + b;\n return c;\n}\n \nint main(){\n int a = 100;\n int b = 101;\n int c = add(a,b);\n return c;\n} </code></pre></div><p>       相信上面的代码没有什么难度，在 main过程中调用 add过程。我们通过如下指令编译成汇编代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">gcc -O0 -S function.c</code></pre></div><p>       为了完整的展现那8个步骤，因此给变量c加了register关键字修饰，这将会将c送入寄存器，从而更改被调用者保存寄存器，就会导致步骤3的发生。以下是main函数以及add函数各自的栈帧情况:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d53d8e6ff06f1eb58bff45cd163fd339_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"463\" class=\"content_image\" width=\"392\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;392&#39; height=&#39;463&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"463\" class=\"content_image lazy\" width=\"392\" data-actualsrc=\"https://pic2.zhimg.com/v2-d53d8e6ff06f1eb58bff45cd163fd339_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5ef06bea7dce67a4f3e806701c432c0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"436\" class=\"content_image\" width=\"401\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;401&#39; height=&#39;436&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"436\" class=\"content_image lazy\" width=\"401\" data-actualsrc=\"https://pic1.zhimg.com/v2-5ef06bea7dce67a4f3e806701c432c0c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p> 　　上面的汇编代码是我们没有使用优化级别编译出来的，所以完整的呈现了前面所讲的8个步骤。这里我们需要注意两点：</p><p>　　①、add函数会将返回结果存入%eax（前提是返回值可以使用整数来表示），在main函数中，call指令之后，默认将%eax作为返回结果来使用。</p><p>　　②、所有函数（包括main函数）都必须有第1步和第6、7、8步，这是必须的4步。我们的栈指针和帧指针有固定的大小关系，即栈指针永远小于等于帧指针，当二者相等时，当前栈帧被认为没有分配内存空间。</p><p><b>5、递归过程</b></p><p>　　前面我们讲的都是一个过程能调用其它的过程，但是其实一个过程也能调用自己本身的，也就是递归调用。因为每个调用在栈中都有它自己的私人空间，多个未完成调用的局部变量不会互相影响，此外，栈的原则也提供了适当的策略，当过程被调用时分布局部存储空间，当过程执行完毕返回时释放存储空间。</p><p>　　下面是一段求 n 的阶乘的递归调用代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">int rfact(int n){\n int result;\n if(n&lt;=1){\n result = 1;\n }else{\n result = n * rfact(n-1);\n }\n return result;\n} </code></pre></div><p>　　我们还是用 -O0 -S 来编译得到汇编代码：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e8adede3122780b0fc21c733698a37a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"783\" data-original=\"https://pic1.zhimg.com/v2-e8adede3122780b0fc21c733698a37a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;783&#39; height=&#39;615&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"783\" data-original=\"https://pic1.zhimg.com/v2-e8adede3122780b0fc21c733698a37a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e8adede3122780b0fc21c733698a37a0_b.jpg\"/></figure><p>　　上面的汇编代码，当用参数 n 来调用时，首先代码 2~5 行会创建一个帧栈，其中包含 %ebp 的旧值、保存的被调用者保存的寄存器 %ebx 的值，以及当递归调用自身的时候保存参数的四个字节。</p><p>　　如下图所示，它用寄存器 %ebx 来保存过程参数 n 的值（第 6 行代码）。它将寄存器 %ebx 中的返回值设置为 1，预期 n&lt;=1 的情况，它就会跳转到完成代码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5f0aef8f35ba6f8e471418ab9d47f004_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-5f0aef8f35ba6f8e471418ab9d47f004_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-5f0aef8f35ba6f8e471418ab9d47f004_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5f0aef8f35ba6f8e471418ab9d47f004_b.jpg\"/></figure><p> 　　对于递归的情况，计算 n-1，将这个值存储在栈上，然后调用函数自身（第10~12行），在代码的完成部分，我们可以假设：</p><p>　　①、寄存器%eax保存这（n-1）!的值</p><p>　　②、被调用保存寄存器%ebx保存着参数n</p><p>　　因此将这两个值相乘（第 13 行）得到该函数的返回值。对于终止条件和递归调用，代码都会继续到完成部分（第15~17行），恢复栈和被调用者保存寄存器，然后在返回。</p><p>　　所以我们看到递归调用一个函数本身与调用其它函数是一样的。栈规则提供了一种机制，每次函数调用都有它自己的私有状态信息（保存的返回值、栈指针和被调用者保存寄存器的值）存储。如果需要，它还可以提供局部变量的存储。分配和释放的栈规则很自然的就与函数调用——返回的顺序匹配。</p><p><b>6、总结</b></p><p>　　本章对于函数的汇编实现做了详细的讲解，主要是栈规则的机制，帮我们解决了数据如何在调用者和被调用者之间传递，以及在被调用者当中局部变量内存的分配以及释放。那么下篇博客我们将介绍数组的分配和访问，我们知道比如Java语言中的集合很多都是在数组的基础上实现的。弄懂下一章的内容后，你会对定长数组与不定长数组（集合）有更深刻的了解。</p>", 
            "topic": [
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37544109", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "TPYBoard v10x系列固件升级", 
            "content": "<p>TPYBoard v10x系列固件升级</p><p><b>1、版本号</b>：v1.9.3-0.0.2</p><p><b>2、更新内容：</b></p><p>2.1、添加了mfrc522-RFID射频卡驱动</p><p>2.2、添加了VS1838B红外接收驱动</p><p>此版本更新了以上两个外设的驱动，具体使用方法参照<a href=\"https://link.zhihu.com/?target=http%3A//docs.tpyboard.com/zh/latest/tpyboard/driver/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">docs.tpyboard.com/zh/la</span><span class=\"invisible\">test/tpyboard/driver/</span><span class=\"ellipsis\"></span></a>中的内容。</p><p>可使用开发板型号为：TPYBoard v10x、TurnipDog</p><p>3、具体固件包如下：</p><p>3.1、TPYBoard v101</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image\" width=\"16\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;16&#39; height=&#39;16&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image lazy\" width=\"16\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//tpyboard.com/ueditor/php/upload/file/20180531/1527761772323941.rar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TPYBoardv101-绿色.rar</a></p><p>3.2、TPYBoard v102</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image\" width=\"16\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;16&#39; height=&#39;16&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image lazy\" width=\"16\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//tpyboard.com/ueditor/php/upload/file/20180531/1527761782952624.rar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TPYBoardv102-蓝色.rar</a></p><p>3.3、TPYBoard v103</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image\" width=\"16\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;16&#39; height=&#39;16&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image lazy\" width=\"16\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//tpyboard.com/ueditor/php/upload/file/20180531/1527761790647134.rar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TPYBoardv103-黑色.rar</a></p><p>3.4、TurnipDog</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image\" width=\"16\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;16&#39; height=&#39;16&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"16\" data-rawheight=\"16\" class=\"content_image lazy\" width=\"16\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec5c6a20543d04ed58473ddc0017aa06_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//tpyboard.com/ueditor/php/upload/file/20180531/1527761800631560.rar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TurnipDog.rar</a></p>", 
            "topic": [
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }, 
                {
                    "tag": "射频卡", 
                    "tagLink": "https://api.zhihu.com/topics/19843361"
                }, 
                {
                    "tag": "红外", 
                    "tagLink": "https://api.zhihu.com/topics/19625667"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37460862", 
            "userName": "小歪", 
            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
            "upvote": 158, 
            "title": "爬虫学到什么程度可以去找工作", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNjUxMTQyMA%3D%3D%26mid%3D2247484172%26idx%3D1%26sn%3Dba80e3ba10d523af73d67a25dd916e6b%26chksm%3D9721cf5fa0564649aab3566ee27e22f3e9231f423a426f2f6f517385c5812e21d64dcb4415f1%23rd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">阅读原文</a></p><p><br/>最近很多朋友问我，我在自学爬虫，学到什么程度可以去找工作呢？<br/>这篇文章会说说我自己的心得体验，关于爬虫、关于工作，仅供参考。</p><h2><br/><b>学到哪种程度</b></h2><p><br/>暂且把目标定位初级爬虫工程师，简单列一下吧：<br/>（必要部分）</p><ol><li>语言选择：一般是了解Python、Java、Golang之一</li><li>熟悉多线程编程、网络编程、HTTP协议相关</li><li>开发过完整爬虫项目（最好有全站爬虫经验，这个下面会说到）</li><li>反爬相关，cookie、ip池、验证码等等</li><li>熟练使用分布式</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>（非必要，建议）</p><ol><li>了解消息队列，如RabbitMQ、Kafka、Redis等</li><li>具有数据挖掘、自然语言处理、信息检索、机器学习经验</li><li>熟悉APP数据采集、中间人代理</li><li>大数据处理（Hive/MR/Spark/Storm）</li><li>数据库Mysql，redis，mongdb</li><li>熟悉Git操作、linux环境开发</li><li>读懂js代码，这个真的很重要</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>如何提升</b></h2><p><br/>随便看看知乎上的教程就可以入门了，就Python而言，会requests当然是不够的，还需要了解scrapy和pyspider这两个框架，scrapy_redis也是需要理解原理的。</p><p><br/>分布式如何搭建、如何解决其中遇到内存、速度问题。</p><p><br/>参考 <a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNjUxMTQyMA%3D%3D%26mid%3D2247484093%26idx%3D1%26sn%3Df6d3d91af46830816c1ad30221504630%26chksm%3D9721ceeea05647f86376f66d75cff028f5c03c9930dbb1ca14bb3d290437be2509a4420d0f7a%23rd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">scrapy-redis 和 scrapy 有什么区别？</a><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42e5c67fb267afd051a1fafa5962dd40_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-42e5c67fb267afd051a1fafa5962dd40_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;377&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-42e5c67fb267afd051a1fafa5962dd40_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-42e5c67fb267afd051a1fafa5962dd40_b.jpg\"/></figure><p><br/><b>什么叫全站爬取</b></p><p><br/>最简单的拿拉钩来举例，搜索关键词，有30页，不要以为把这30页爬完就是全站爬取了，你应该想方法把所有数据全部爬下来。</p><p><br/>什么办法，通过筛选缩小范围，慢慢来就OK了。</p><p><br/>同时，每个职位还会有推荐职位，再写一个采集推荐的爬虫。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7631976e1e76531cfac06d4d743c97fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb\" width=\"787\" data-original=\"https://pic2.zhimg.com/v2-7631976e1e76531cfac06d4d743c97fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;787&#39; height=&#39;233&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"787\" data-original=\"https://pic2.zhimg.com/v2-7631976e1e76531cfac06d4d743c97fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7631976e1e76531cfac06d4d743c97fd_b.jpg\"/></figure><p><br/>这个过程需要注意的是如何去重，Mongo可以、redis也可以</p><p><br/>参考 <a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNjUxMTQyMA%3D%3D%26mid%3D2247484074%26idx%3D1%26sn%3Dc5d2e89ca4f30024ed213f07cd148cb2%26chksm%3D9721cef9a05647ef3c3ba3c5344de607af087d3688dbf089dd2a45519894469fe10bbc06a277%23rd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Scrapy中如何提高数据的插入速度</a></p><h2><br/><b>实际项目经验</b></h2><p><br/>这个面试中肯定会被人问道，如：</p><ol><li>你爬过哪些网站</li><li>日均最大采集量是多少</li><li>你遇到哪些棘手问题，如何解决</li><li>等等</li></ol><p>那么怎么找项目呢？比如我要爬微博数据，去Github中搜索下，项目还算少吗？<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-abe299d8cd98299489eca3938367df85_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1178\" data-rawheight=\"819\" class=\"origin_image zh-lightbox-thumb\" width=\"1178\" data-original=\"https://pic2.zhimg.com/v2-abe299d8cd98299489eca3938367df85_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1178&#39; height=&#39;819&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1178\" data-rawheight=\"819\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1178\" data-original=\"https://pic2.zhimg.com/v2-abe299d8cd98299489eca3938367df85_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-abe299d8cd98299489eca3938367df85_b.jpg\"/></figure><h2><br/><b>语言选择</b></h2><p><br/>我自己建议是Python、Java、Golang最好都了解，Java爬虫的也很多，但是网上教程几乎都是Python的，悲哀。</p><p><br/>最后说下Golang，Golang真的很牛逼，说个数字，Golang可以每分钟下载网页数量 2W ，Python可以吗~~<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ffbd4c15bb4ea7ca0921e2ebfa011ed3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-ffbd4c15bb4ea7ca0921e2ebfa011ed3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;325&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-ffbd4c15bb4ea7ca0921e2ebfa011ed3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ffbd4c15bb4ea7ca0921e2ebfa011ed3_b.jpg\"/></figure><p><br/>宣传下自己的刷题项目 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/zhangslob/Leetcode-Solutions\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Leetcode Solutions By All Language</a></p><h2><br/><b>关于反爬</b></h2><p><br/>常见的 UA、Refer等需要了解是什么东西，有些验证的ID如何产生的，是否必要；关于IP池这块我不了解，不多说，需要注意的是如何设计拉黑机制；模拟登陆也是必要的，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/xchaoinfo/fuck-login\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">fuck-login</a> 可以研究下代码，或者提PR。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a94b93b47edcf90c00dcacdbd6682f59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1021\" data-rawheight=\"891\" class=\"origin_image zh-lightbox-thumb\" width=\"1021\" data-original=\"https://pic2.zhimg.com/v2-a94b93b47edcf90c00dcacdbd6682f59_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1021&#39; height=&#39;891&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1021\" data-rawheight=\"891\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1021\" data-original=\"https://pic2.zhimg.com/v2-a94b93b47edcf90c00dcacdbd6682f59_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a94b93b47edcf90c00dcacdbd6682f59_b.jpg\"/></figure><blockquote>模拟登陆其实就是一步步的请求，保存cookie会话</blockquote><h2><br/><b>如何判断能力足够</b></h2><p><br/>很简单，给个任务，爬取知乎上所有问题。<br/>你会如何思考并设计这个项目？<br/>欢迎留言指出<br/></p><hr/><p>以上仅为个人看法，若有不足之处请指出。希望可以帮助你</p><p></p>", 
            "topic": [
                {
                    "tag": "计算机科学", 
                    "tagLink": "https://api.zhihu.com/topics/19580349"
                }, 
                {
                    "tag": "爬虫 (计算机网络)", 
                    "tagLink": "https://api.zhihu.com/topics/19577498"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>你也改名了？防爬机制代理池、Cookies池可以有</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "为了避免被人说是崔大大", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "扶余城里小老二", 
                    "userLink": "https://www.zhihu.com/people/7a90891155da464c7532cccb53f1de89", 
                    "content": "<p>起点是爬虫，终点是工作。其中隔了十万八千里。</p>", 
                    "likes": 3, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "还需努力啊", 
                            "likes": 0, 
                            "replyToAuthor": "扶余城里小老二"
                        }
                    ]
                }, 
                {
                    "userName": "黄仁炜", 
                    "userLink": "https://www.zhihu.com/people/ca3859c33189dd19d79183938e4dc99a", 
                    "content": "<p>你说的“Golang可以每分钟下载网页数量 2W”是建立在什么样的环境下呢？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "生产环境下，部署在服务器", 
                            "likes": 0, 
                            "replyToAuthor": "黄仁炜"
                        }, 
                        {
                            "userName": "黄仁炜", 
                            "userLink": "https://www.zhihu.com/people/ca3859c33189dd19d79183938e4dc99a", 
                            "content": "<p>就是，服务器带宽，服务器数量，所下载网站（网站反爬对采集量也有影响）这些信息</p>", 
                            "likes": 1, 
                            "replyToAuthor": "小歪"
                        }
                    ]
                }, 
                {
                    "userName": "GGGGITFKBJG", 
                    "userLink": "https://www.zhihu.com/people/9a199ac65ffc7d259436b7c8f77bb2a8", 
                    "content": "看起来很复杂，想问需要学多久", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "我学了一年多", 
                            "likes": 0, 
                            "replyToAuthor": "GGGGITFKBJG"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>想问学了一年多指的是脱产学了一年多？</p>", 
                            "likes": 0, 
                            "replyToAuthor": "小歪"
                        }
                    ]
                }, 
                {
                    "userName": "姚传陆", 
                    "userLink": "https://www.zhihu.com/people/564f62b704f2661f27de09ea02958c65", 
                    "content": "<p>每分钟2W，看起来很美好，实际上针对单个网站每秒请求超过10个极大可能性被认为是攻击行为或者识别为爬虫，解决了这个问题才能是美好</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "要知道，某些网站就是没反爬", 
                            "likes": 0, 
                            "replyToAuthor": "姚传陆"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>就算是没反扒的网站你要用多少带宽才能每分钟两万？再说分布式python每分钟两万很难吗？如果觉得现有的库不好使自己造轮子啊，cython走起行不行，python代码就调用一下，业务逻辑都用c写，快不快？还是说golang的爬虫可以不遵守http协议了，内容还能压缩咋滴？前辈给指条明路？</p>", 
                            "likes": 1, 
                            "replyToAuthor": "小歪"
                        }
                    ]
                }, 
                {
                    "userName": "Luzhuo", 
                    "userLink": "https://www.zhihu.com/people/d2321ecc24c4447f641ded9f72ba1c50", 
                    "content": "<p>爬虫学完,基本上所有能获取到的都能爬到, 哪有你说的那么高大上, 而且反爬机制也就那么几种</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "请问您是做什么的", 
                            "likes": 0, 
                            "replyToAuthor": "Luzhuo"
                        }, 
                        {
                            "userName": "卧虫诸葛暗", 
                            "userLink": "https://www.zhihu.com/people/63b3f940a243403b624c343c72575e39", 
                            "content": "<p>你说什么？我的爬虫改了两个月，7天原型就出来了，跟着网站管理屁股后面改啊改的</p><p></p>", 
                            "likes": 0, 
                            "replyToAuthor": "Luzhuo"
                        }
                    ]
                }, 
                {
                    "userName": "风雨", 
                    "userLink": "https://www.zhihu.com/people/87690ad3f94eb532b181c6c0d7e5afd7", 
                    "content": "说的蛮好的。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "说的不好，请多多指点", 
                            "likes": 1, 
                            "replyToAuthor": "风雨"
                        }, 
                        {
                            "userName": "风雨", 
                            "userLink": "https://www.zhihu.com/people/87690ad3f94eb532b181c6c0d7e5afd7", 
                            "content": "没事，相互学习，", 
                            "likes": 0, 
                            "replyToAuthor": "小歪"
                        }
                    ]
                }, 
                {
                    "userName": "罗增", 
                    "userLink": "https://www.zhihu.com/people/b5e67f00292bfa7e04d15864874f81d0", 
                    "content": "那个黄超平的  喵喵喵  后期给换成  嘤嘤嘤", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>难的是反爬虫。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "<p>您是做爬虫的吗</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "好好活着", 
                    "userLink": "https://www.zhihu.com/people/51618adbfbcd4771d695a13b3f740410", 
                    "content": "在崔大群里见过你发", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "那个就是我o", 
                            "likes": 0, 
                            "replyToAuthor": "好好活着"
                        }
                    ]
                }, 
                {
                    "userName": "相似不曾识", 
                    "userLink": "https://www.zhihu.com/people/0606a8dd2be34814de509e0a9f1617c9", 
                    "content": "大哥，我要拜你为师", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小歪", 
                            "userLink": "https://www.zhihu.com/people/d9d93acc34c18c6e3055a8a8bdaacb17", 
                            "content": "来啊", 
                            "likes": 1, 
                            "replyToAuthor": "相似不曾识"
                        }
                    ]
                }, 
                {
                    "userName": "多多的梦", 
                    "userLink": "https://www.zhihu.com/people/4c23a85e6ea5e8cf51e5485c820a95f2", 
                    "content": "<p>这边是海外公司直招的  技术类工资底薪一万起  有兴趣了解一下吗</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37470485", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 4, 
            "title": "[Micropython]TPYBoard v202 利用单片机快速实现家庭智能控制平台", 
            "content": "<blockquote>一提到智能家庭，大家可能首先想到的是各种大佬级公司搞的牛逼产品，或者说是创新产品。想想就觉得很复杂，有的用工控机，有的用树莓派，还有的用arduino，不管用什么，都绕不过服务器进行控制，比如yeelink平台，腾讯的智能硬件平台等等。其实，真实实现起来，并没有想想中这么复杂，我们甚至只用一个小的单片机就能实现。<br/></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>0x01 单片机实现web服务器</b></p><blockquote>探讨用单片机来实现web服务器的文章通过baidu也能找到几篇，但比较详实的实现方法并没有找到，这里考虑有两种思路可以完成，一种是有线的lan模块，如w5500，这种模块本身就带有web服务的部分功能，使用起来比较简单，但是只能基于lan进行访问。另一种是通过stm32等单片机，配合网络模块来完成。当前我能想到的最简单的方法就是用stm32+esp8266来实现。基于第一种方法，我觉得受模块性能影响比较大，受限于模块，没有开发感。于是考虑用第二种方法。这个方法里，有人用arduino来完成，这要基于c进行编程。另外，就是考虑用micropython,这样直接可以用python来实现。这里依然使用tpyboard V202。<br/></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>0x02 模拟实现家庭智能家居控制平台</b></p><blockquote>因为没有想好要做一个多么复杂的实验，只是想能模拟一下效果，所有在整个的模块过程中，我选用了tpyboard v202开发板做主控制板，用一个发光二极管来模拟一个台灯（现实中，这里其实可以用一个继电器来控制其它设备的通断电），用一个直流小电机加迷你风扇叶表示模拟电风扇。整个实现还用到了一个三极管（S9014，NPN）来控制直流电机。<br/></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>0x03 硬件的搭建与连接</b></p><p>发光二极管的使用</p><blockquote>发光二极管使用比较简单，直接看它的两条“腿”,长的那个是正极，反之是负极。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>直流小电机的使用方法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-00beeaf3ad686691df0519aeccd03533_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"294\" data-rawheight=\"247\" class=\"content_image\" width=\"294\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;294&#39; height=&#39;247&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"294\" data-rawheight=\"247\" class=\"content_image lazy\" width=\"294\" data-actualsrc=\"https://pic4.zhimg.com/v2-00beeaf3ad686691df0519aeccd03533_b.jpg\"/></figure><p><br/>上图直流小电机中，红色框内的两个接线端A和B，无论那个接正极或负极都可以，只不过转动的方向不一样而已。本次我是用B端接入正极，正好是顺时针转动。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>三极管S9014（NPN）的使用方法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7ff419af001614e3fe3033c69703e304_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb\" width=\"633\" data-original=\"https://pic1.zhimg.com/v2-7ff419af001614e3fe3033c69703e304_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;633&#39; height=&#39;194&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"633\" data-original=\"https://pic1.zhimg.com/v2-7ff419af001614e3fe3033c69703e304_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7ff419af001614e3fe3033c69703e304_b.jpg\"/></figure><p>本次我们使用S9014的放大和开关功能，集电极接入v202的3.3V引脚，发射极接入电机某一端，通过给基极高低电平来控制发射极和集电极之间是否导通，从而控制直流电机转动或停止。下面来介绍一下接线方法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c9393c37326f2775eed43ea7e10278e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb\" width=\"561\" data-original=\"https://pic3.zhimg.com/v2-c9393c37326f2775eed43ea7e10278e6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;561&#39; height=&#39;191&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"561\" data-original=\"https://pic3.zhimg.com/v2-c9393c37326f2775eed43ea7e10278e6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c9393c37326f2775eed43ea7e10278e6_b.jpg\"/></figure><p>我的实物连接图</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>0x04 利用micropython实现web服务器</b></p><div class=\"highlight\"><pre><code class=\"language-text\">首先，编辑一个main.py文件。v202 开机自启动main.py 文件try:       import usocket as socket\nexcept:\n        import socket\nimport network\nfrom machine import UART\nfrom machine import Pin\n\nled_flag=Pin(2, Pin.OUT)#esp8266模块上的小灯 高电平:灭 低电平:亮\nled = Pin(4, Pin.OUT)#发光二极管的控制引脚\nmotor = Pin(5, Pin.OUT)#直流电机的控制引脚\n#初始化\nled.low()\nmotor.low()\nled_flag.high()\ndef do_connect(ssid,pwd):\n        sta_if = network.WLAN(network.STA_IF)#STA 模式\n        sta_if.active(False)\n        if not sta_if.isconnected():#判断是否连接\n                sta_if.active(True)\n                sta_if.connect(ssid,pwd)#ssid:WIFI名称 pwd:WIFI 密码\n                while not sta_if.isconnected():\n                        pass\n        if sta_if.isconnected():\n                return sta_if.ifconfig()[0]\ndef main(ip_,dev_data,login_data,name,pwd):\n\n        s = socket.socket()\n        ai = socket.getaddrinfo(ip_, 80)\n        addr = ai[0][-1]\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind(addr)\n        s.listen(5)\n        led_flag.low()\n        #s_data=login_data\n        while True:\n                res = s.accept()\n                client_s = res[0]\n                client_addr = res[1]\n                led_flag.high()\n                req =client_s.readline()\n                while True:\n                        h = client_s.readline()\n                        if h == b&#34;&#34; or h == b&#34;\\r\\n&#34;:\n                                break\n                        #print(h)\n                        req+=(h.decode(&#39;utf-8&#39;).lower())\n                print(&#34;Request:&#34;)\n                req=req.decode(&#39;utf-8&#39;).lower().split(&#39;\\r\\n&#39;)\n                #http header 解析\n                req_data=req[0].lstrip().rstrip().replace(&#39; &#39;,&#39;&#39;)\n                print(req_data)\n                if req_data.find(&#39;favicon.ico&#39;)&gt;-1:\n                        client_s.close()\n                        continue\n                else:\n                        if len(req_data)&lt;=12:\n                                #说明是第一次访问，输入login.html\n                                s_data=login_data\n                        else:\n                                req_data=req_data.replace(&#39;get/?&#39;,&#39;&#39;).replace(&#39;http/1.1&#39;,&#39;&#39;)\n                                _name=req_data.find(&#39;name&#39;)\n                                _pwd=req_data.find(&#39;pwd&#39;)\n                                if _name&gt;-1 and _pwd&gt;-1:\n                                        #判断是否是用户登录\n                                        if req_data.find(name)&gt;-1 and req_data.find(pwd)&gt;-1:\n                                                s_data=dev_data\n                                                print(&#39;Login Success!&#39;)\n                                        else:\n                                                f=open(&#39;fail.html&#39;,&#39;r&#39;)\n                                                s_data=f.read()\n                                                f.close()\n                                                print(&#39;Login Fail!&#39;)\n                                else:\n                                        #判断是否是控制LED\n                                        _index=req_data.find(&#39;led=&#39;)\n                                        if _index&gt;-1:\n                                                s_data=dev_data\n                                                led_val=req_data[_index+4:_index+6].lstrip().rstrip()\n                                                print(&#39;led:&#39;,led_val)\n                                                if led_val==&#39;on&#39;:\n                                                        led.value(1)\n                                                else:\n                                                        led.value(0)\n                                        #判断是否是控制电机\n                                        _index=req_data.find(&#39;motor=&#39;)\n                                        if _index&gt;-1:\n                                                s_data=dev_data\n                                                motor_val=req_data[_index+6:_index+8].lstrip().rstrip()\n                                                print(&#39;motor_val:&#39;,motor_val)\n                                                if motor_val==&#39;on&#39;:\n                                                        motor.value(1)\n                                                else:\n                                                        motor.value(0)\n                        print(&#39;-----------&#39;)\n                        client_s.send(s_data)\n                        client_s.close()\n                led_flag.low()\n\nf=open(&#39;device.html&#39;,&#39;r&#39;)\ndev_html=f.read()\nf.close()\nf=open(&#39;login.html&#39;,&#39;r&#39;)\nlogin_html=f.read()\nf.close()\nf=open(&#39;info.txt&#39;,&#39;r&#39;)\ninfo=f.read()\nf.close()\nname=info.split(&#39;,&#39;)[0].lstrip().rstrip()\npwd=info.split(&#39;,&#39;)[1].lstrip().rstrip()\nprint(&#39;name:&#39;,name)\nprint(&#39;pwd:&#39;,pwd)\nmyip_=do_connect(&#39;essid&#39;,&#39;pwd&#39;)#家中网络的WIFI名称和密码\nprint(myip_)\nmain(myip_,dev_html,login_html,name,pwd)</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">login.html 登录页面:\n&lt;html&gt;\n        &lt;head&gt;\n                &lt;title&gt;智能家庭网络&lt;/title&gt;\n                &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&gt;\n                &lt;style type=&#34;text/css&#34;&gt;\n                        h2\n                        {\n                                margin-top:4%;\n                                margin-bottom:40px;\n                        }\n                &lt;/style&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;center&gt;\n                &lt;h2&gt;欢迎登录智能家庭网络平台&lt;/h2&gt;\n                        &lt;form action=&#34;/&#34; method=&#34;get&#34; accept-charset=&#34;utf-8&#34;&gt;\n                                &lt;p style=&#34;color:red&#34;&gt;用户名或密码错误！&lt;/p&gt;\n                                &lt;p&gt;用户名: &lt;input type=&#34;text&#34; name=&#34;name&#34;  /&gt;&lt;/p&gt;\n                                &lt;p&gt;密 码:  &lt;input type=&#34;password&#34; name=&#34;pwd&#34;  /&gt;&lt;/p&gt;\n                                &lt;input type=&#34;Submit&#34; value=&#34;登录&#34;  /&gt;\n\n                        &lt;/form&gt;\n                &lt;/center&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n\n\ninfo.txt 这里是用文件存放的用户名和密码(英文逗号分隔)，前面是用户名，后面是密码。这里的用户名和密码是用来登录我们 智能家居控制平台的。admin,123456</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>0x05 程序下载测试</b></p><blockquote>使用MicroPython File Uploader 工具，将源代码下载到v202中。工具下载地址: <a href=\"https://link.zhihu.com/?target=http%3A//tpyboard.com/download/tool/170.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">tpyboard.com/download/t</span><span class=\"invisible\">ool/170.html</span><span class=\"ellipsis\"></span></a></blockquote><ul><li>1、使用usb数据线将v202接入到电脑，打开设备管理器，查看加载的端口。我的是COM44<br/></li></ul><p>※如果驱动安装失败，可以下载CH340的驱动，手动安装。CH340驱动下载地址：<a href=\"https://link.zhihu.com/?target=http%3A//tpyboard.com/download/drive/163.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">tpyboard.com/download/d</span><span class=\"invisible\">rive/163.html</span><span class=\"ellipsis\"></span></a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c667958d03185003f80e17f75addc489_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"635\" data-original=\"https://pic2.zhimg.com/v2-c667958d03185003f80e17f75addc489_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;635&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"635\" data-original=\"https://pic2.zhimg.com/v2-c667958d03185003f80e17f75addc489_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c667958d03185003f80e17f75addc489_b.jpg\"/></figure><p><br/>2、打开MicroPython File Uploader 选择端口，点击[Open]。<br/></p><p><br/>3、取消[Autorun]的打钩，点击红框的文件夹图标，选择源码，点击[Send]等待发送成功。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7991d6d466f07dc06d67edab3ced076e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"635\" data-original=\"https://pic3.zhimg.com/v2-7991d6d466f07dc06d67edab3ced076e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;635&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"635\" data-original=\"https://pic3.zhimg.com/v2-7991d6d466f07dc06d67edab3ced076e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7991d6d466f07dc06d67edab3ced076e_b.jpg\"/></figure><p><br/>4、将上面的源码文件都下载到v202中，下载完毕后，点击[Run/Reset]就会开始执行代码。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-20e0b076f2066ed599ed251f3cba13b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"623\" data-original=\"https://pic3.zhimg.com/v2-20e0b076f2066ed599ed251f3cba13b6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;623&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"623\" data-original=\"https://pic3.zhimg.com/v2-20e0b076f2066ed599ed251f3cba13b6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-20e0b076f2066ed599ed251f3cba13b6_b.jpg\"/></figure><p><br/>5、开始运行后，红色框内打印的是我们存放在info.txt里的用户名和密码，这个可以自定义。<br/>6、下面桃红色框内打印的是我们v202从路由器那里获取到的IP地址，只要打印了IP地址，说明就成功接入网络了。我的v202获取的IP地址是192.168.1.192。<br/>7、到此，我们的web服务器就搭建完成了。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>0x06 智能家庭网络平台的使用</b></p><p>1、在家庭局域网内，我们可以选用pc或者手机，通过浏览器，打开192.168.1.192 就可以看到登录界面。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d33df073f6013483761a7a77d9350c4c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb\" width=\"723\" data-original=\"https://pic1.zhimg.com/v2-d33df073f6013483761a7a77d9350c4c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;723&#39; height=&#39;399&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"723\" data-original=\"https://pic1.zhimg.com/v2-d33df073f6013483761a7a77d9350c4c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d33df073f6013483761a7a77d9350c4c_b.jpg\"/></figure><p><br/>2、默认用户名 admin 密码123456 ，大家可以通过修改info.txt 文件来进行修改。<br/>（1）输入错误的用户名和密码会进入错误界面。（2） 输入正确的，进入控制平台。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b1a45eb5054544785f2cd2064fb12e8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic4.zhimg.com/v2-b1a45eb5054544785f2cd2064fb12e8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;737&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"737\" data-original=\"https://pic4.zhimg.com/v2-b1a45eb5054544785f2cd2064fb12e8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b1a45eb5054544785f2cd2064fb12e8b_b.jpg\"/></figure><p><br/>3、接下来，我们就可以通过网页开控制灯光和小风扇了，看我的实验效果图。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e4c49c064b9f40657ca66ac767286df9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"358\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic2.zhimg.com/v2-e4c49c064b9f40657ca66ac767286df9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;358&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"358\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic2.zhimg.com/v2-e4c49c064b9f40657ca66ac767286df9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e4c49c064b9f40657ca66ac767286df9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-20c3dc2b1e79eecbb63ad1690b467551_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"521\" data-original=\"https://pic2.zhimg.com/v2-20c3dc2b1e79eecbb63ad1690b467551_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;521&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"521\" data-original=\"https://pic2.zhimg.com/v2-20c3dc2b1e79eecbb63ad1690b467551_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-20c3dc2b1e79eecbb63ad1690b467551_b.jpg\"/></figure><p><br/>这里，我只是做了一个实例，受时间限制，没有再做更深入的开发。大家可以自己结合自己的创意再深入去做。如果能够通过路由器给tpyboard v202设一个外网Ip，这样就可以从外网进行访问，从而完成外网对家内设备的控制。</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "51 单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19737566"
                }, 
                {
                    "tag": "MSP430", 
                    "tagLink": "https://api.zhihu.com/topics/19622093"
                }
            ], 
            "comments": [
                {
                    "userName": "藏海花", 
                    "userLink": "https://www.zhihu.com/people/155389062492c952852ce7c90e2dfb8d", 
                    "content": "为什么我下载安装CH340提示是预安装成功?", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37378364", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "[Micropython]TPYBoard v202 邪恶改装：TPYBoard制作廉价WIFI干扰器", 
            "content": "<p>想不想搞个WIFI干扰器？网上搜集了一下资料，发现用esp8266可以实现简单的干扰功能，包括断网、复制、欺骗等等。刚好手上有块Tpyboard V202(30元)，也是esp8266芯片的，也是想换个固件是不是也可完成呢？周末动手试一下。<b>第一步： 搭建开发环境</b></p><p>1、下载一个使用esp8266制作Deauth无线攻击的开源固件，是arduino开发的。</p><p>github下载地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/PakchoiFood/ESP8266_deauther\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/PakchoiFood/</span><span class=\"invisible\">ESP8266_deauther</span><span class=\"ellipsis\"></span></a><br/>2、里面包含了arduino IDE（arduino-1.8.2-windows.exe）和固件源码（esp8266_deauther-master.rar）。另外，还需要esp8266开发包（Arduino15.rar）可以从下面链接：<a href=\"https://link.zhihu.com/?target=http%3A//pan.baidu.com/s/1bpnJMkn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pan.baidu.com/s/1bpnJMk</span><span class=\"invisible\">n</span><span class=\"ellipsis\"></span></a> 下载。下载完毕后，解压如下：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2683d802acd3269a0d78bdd84ca2208c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"69\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https://pic1.zhimg.com/v2-2683d802acd3269a0d78bdd84ca2208c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;604&#39; height=&#39;69&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"69\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"604\" data-original=\"https://pic1.zhimg.com/v2-2683d802acd3269a0d78bdd84ca2208c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2683d802acd3269a0d78bdd84ca2208c_b.jpg\"/></figure><p><br/>3、双击arduino-1.8.2-windows.exe 安装arduino IDE。（如果你已经安装过arduino IDE，这步可以省略）<br/>4、安装完毕后，打开arduino,菜单找到 文件—》首选项，点击红色区域进入SDK目录</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-83d69eac47d67fdc84f3fe963569abbe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb\" width=\"697\" data-original=\"https://pic3.zhimg.com/v2-83d69eac47d67fdc84f3fe963569abbe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;697&#39; height=&#39;665&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"697\" data-original=\"https://pic3.zhimg.com/v2-83d69eac47d67fdc84f3fe963569abbe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-83d69eac47d67fdc84f3fe963569abbe_b.jpg\"/></figure><p>我的路径是：C:UsersAdministratorAppDataLocalArduino15<br/>将从网盘下载的Arduino15.rar 解压，把里面全部的文件直接覆盖C:UsersAdministratorAppDataLocalArduino15下文件。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a4968b63b3b3d473c9b1c600f8446f13_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"860\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb\" width=\"860\" data-original=\"https://pic4.zhimg.com/v2-a4968b63b3b3d473c9b1c600f8446f13_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;860&#39; height=&#39;384&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"860\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"860\" data-original=\"https://pic4.zhimg.com/v2-a4968b63b3b3d473c9b1c600f8446f13_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a4968b63b3b3d473c9b1c600f8446f13_b.jpg\"/></figure><p><br/>15.2. 0X03硬件器件的准备<br/>将tpyboard V202与电脑连接，找到arduino IDE菜单里工具—》开发板 在右侧出来的菜单中向下找，会找到一个 TPYBoard v202 点击选中。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c23ba88957cd33f0a2f2404aa39edfa1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"659\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-c23ba88957cd33f0a2f2404aa39edfa1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;659&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"659\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-c23ba88957cd33f0a2f2404aa39edfa1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c23ba88957cd33f0a2f2404aa39edfa1_b.jpg\"/></figure><p><br/>15.3. 0X04编译烧写固件<br/></p><ul><li>1、解压esp8266_deauther-master.rar，arduino IDE菜单栏 文件-》打开esp8266_deauther-master源码包esp8266_deautheresp8266_deauther.ino</li><li>2、TPYBoard v202 使用micro USB数据线接入电脑。查看安装的usb转串的端口。打开电脑的设备管理器（这里是COM11）</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ab463b183213531b7667a133982d37a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"811\" data-original=\"https://pic1.zhimg.com/v2-ab463b183213531b7667a133982d37a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;811&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"811\" data-original=\"https://pic1.zhimg.com/v2-ab463b183213531b7667a133982d37a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ab463b183213531b7667a133982d37a8_b.jpg\"/></figure><ul><li>3、工具-》端口，选择COM11（根据自己的实际端口号选择）</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3cd6b50305e6c9d87c102f514bd58fd5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic2.zhimg.com/v2-3cd6b50305e6c9d87c102f514bd58fd5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;573&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"573\" data-original=\"https://pic2.zhimg.com/v2-3cd6b50305e6c9d87c102f514bd58fd5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3cd6b50305e6c9d87c102f514bd58fd5_b.jpg\"/></figure><ul><li>4、菜单栏下面的绿色图标菜单区，选择上传，开始编译，烧写固件</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-30ea03b88e448eb3de494f1dccaf8c62_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"463\" class=\"origin_image zh-lightbox-thumb\" width=\"809\" data-original=\"https://pic3.zhimg.com/v2-30ea03b88e448eb3de494f1dccaf8c62_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;809&#39; height=&#39;463&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"463\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"809\" data-original=\"https://pic3.zhimg.com/v2-30ea03b88e448eb3de494f1dccaf8c62_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-30ea03b88e448eb3de494f1dccaf8c62_b.jpg\"/></figure><ul><li>5、查看最下方的日志区域</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b839028341b46da31456bd82c3471ac9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"544\" data-rawheight=\"153\" class=\"origin_image zh-lightbox-thumb\" width=\"544\" data-original=\"https://pic2.zhimg.com/v2-b839028341b46da31456bd82c3471ac9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;544&#39; height=&#39;153&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"544\" data-rawheight=\"153\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"544\" data-original=\"https://pic2.zhimg.com/v2-b839028341b46da31456bd82c3471ac9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b839028341b46da31456bd82c3471ac9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ff159a3089b6196f81be5e90d4f5c551_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"113\" class=\"origin_image zh-lightbox-thumb\" width=\"836\" data-original=\"https://pic2.zhimg.com/v2-ff159a3089b6196f81be5e90d4f5c551_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;836&#39; height=&#39;113&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"113\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"836\" data-original=\"https://pic2.zhimg.com/v2-ff159a3089b6196f81be5e90d4f5c551_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ff159a3089b6196f81be5e90d4f5c551_b.jpg\"/></figure><p>等待编译完成，出现上图信息（状态：变为“上传”）时，按住FLASH的同时，按一下RST按键松开，让TPYBoard v202复位一下，继续按着FLASH,出现下面的信息时就可以松开FLASH按键了。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-84456d3669e2c6465084d8a9559358ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic3.zhimg.com/v2-84456d3669e2c6465084d8a9559358ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;680&#39; height=&#39;135&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"680\" data-original=\"https://pic3.zhimg.com/v2-84456d3669e2c6465084d8a9559358ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-84456d3669e2c6465084d8a9559358ca_b.jpg\"/></figure><p>烧写固件时，板子上的蓝色小LED灯会一直快速闪烁。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0bbb5551c13d176fba1df327a541ead6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"2300\" class=\"origin_image zh-lightbox-thumb\" width=\"4096\" data-original=\"https://pic3.zhimg.com/v2-0bbb5551c13d176fba1df327a541ead6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4096&#39; height=&#39;2300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"2300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4096\" data-original=\"https://pic3.zhimg.com/v2-0bbb5551c13d176fba1df327a541ead6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0bbb5551c13d176fba1df327a541ead6_b.jpg\"/></figure><p>烧写完毕后，显示上传成功，板子上的蓝色小LED会停止闪烁。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-37a63835ee2094c22ee56e5a425e561b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"803\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb\" width=\"803\" data-original=\"https://pic4.zhimg.com/v2-37a63835ee2094c22ee56e5a425e561b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;803&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"803\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"803\" data-original=\"https://pic4.zhimg.com/v2-37a63835ee2094c22ee56e5a425e561b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-37a63835ee2094c22ee56e5a425e561b_b.jpg\"/></figure><p><br/>15.4. 0X05测试攻击效果<br/></p><ul><li>1、成功烧写固件后，打开无线会搜索到名称为TPYBoard v202 的热点，密码默认tpyboard，进行连接。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4e9b45fa5df625d092b16b3de3f609fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"266\" data-rawheight=\"381\" class=\"content_image\" width=\"266\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;266&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"266\" data-rawheight=\"381\" class=\"content_image lazy\" width=\"266\" data-actualsrc=\"https://pic2.zhimg.com/v2-4e9b45fa5df625d092b16b3de3f609fd_b.jpg\"/></figure><ul><li>2、连接成功后，打开浏览器输入192.168.4.1 。点击[我已阅读并理解上面的通知]（本次实验只用于测试实验，请谨慎使用）。</li></ul><p>网页原版是英文的，为了方便使用，我简单的翻译了一下（wifi SSID和密码也做了修改），下载的压缩包里也有英文原版的。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-33353c5e0b805fbef805747d8bd84b04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"926\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"926\" data-original=\"https://pic1.zhimg.com/v2-33353c5e0b805fbef805747d8bd84b04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;926&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"926\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"926\" data-original=\"https://pic1.zhimg.com/v2-33353c5e0b805fbef805747d8bd84b04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-33353c5e0b805fbef805747d8bd84b04_b.jpg\"/></figure><ul><li>3、点击进来以后，首先扫描一下附近的wifi。点击[扫描]。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-34473a7b6ae9e87a6374724515e846f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-34473a7b6ae9e87a6374724515e846f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-34473a7b6ae9e87a6374724515e846f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-34473a7b6ae9e87a6374724515e846f9_b.jpg\"/></figure><ul><li>4、接下来我们选择一个wifi做一下攻击的测试，为了方便测试是否成功，选择平时经常使用的wifi，我的列表中选择boda。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d83d23ddda86353aacae8fed2ef14999_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-d83d23ddda86353aacae8fed2ef14999_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-d83d23ddda86353aacae8fed2ef14999_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d83d23ddda86353aacae8fed2ef14999_b.jpg\"/></figure><ul><li>5、选择好后，点击最上方菜单栏[攻击]，进入攻击页面。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-637720879dd912469ce6e3b9384aefc1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-637720879dd912469ce6e3b9384aefc1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-637720879dd912469ce6e3b9384aefc1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-637720879dd912469ce6e3b9384aefc1_b.jpg\"/></figure><ul><li>6、攻击方式有3种，Deauther、Beacon和Probe-Request。页面最下方有对这3种方式的介绍，Probe-Request实在不知道怎么翻译，大神们可以指点一下。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-de664ca56c4b0b8b161fe0f9d76a3d8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-de664ca56c4b0b8b161fe0f9d76a3d8d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-de664ca56c4b0b8b161fe0f9d76a3d8d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-de664ca56c4b0b8b161fe0f9d76a3d8d_b.jpg\"/></figure><ul><li>7、我们这次使用Deauther方式，阻止客户端连接，点击[START]开始攻击。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-028091b6f1dade706a225df213797f71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-028091b6f1dade706a225df213797f71_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-028091b6f1dade706a225df213797f71_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-028091b6f1dade706a225df213797f71_b.jpg\"/></figure><ul><li>8、找一个手机做一下实验，看是否还能连上boda。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-518c1163e1b62c51afc1beffd9db90bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-518c1163e1b62c51afc1beffd9db90bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1920&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-518c1163e1b62c51afc1beffd9db90bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-518c1163e1b62c51afc1beffd9db90bf_b.jpg\"/></figure><p>如果是第一次连接的话，会一直停在正在连接的界面上，无法连接成功。<br/>如果原本连接着，会被强迫断线。<br/></p><ul><li>9、点击[STOP],停止攻击。停止后，手机成功连接上boda了。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2ac4c9e38a7f1a2684e4214b93d74e6a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-2ac4c9e38a7f1a2684e4214b93d74e6a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-2ac4c9e38a7f1a2684e4214b93d74e6a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2ac4c9e38a7f1a2684e4214b93d74e6a_b.jpg\"/></figure><ul><li>10、esp8266_deauther里面还带了wifi复制等其他攻击方式，大家自己是吧。</li></ul><p>免责声明<br/>请不要在非合法情况下利用TPYboard实施攻击，这种行为将会被视作非法活动。由本软件所造成的任何不良后果，作者将不承担任何责任，请各位谨慎使用。</p><p></p>", 
            "topic": [
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }, 
                {
                    "tag": "无线局域网（WLAN）", 
                    "tagLink": "https://api.zhihu.com/topics/19946739"
                }, 
                {
                    "tag": "ESP8266", 
                    "tagLink": "https://api.zhihu.com/topics/20025835"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37184988", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "DAC的使用用法", 
            "content": "<p><b>基本用法</b></p><p>from pyb import DAC</p><p>dac = DAC(1)            # create DAC 1 on pin X5</p><p>dac.write(128)          # write a value to the DAC (makes X5 1.65V)</p><p>dac = DAC(1, bits=12)   # use 12 bit resolution</p><p>dac.write(4095)         # output maximum value, 3.3V</p><p><b>输出正弦波</b></p><p>import math</p><p>    from pyb import DAC</p><p>    # create a buffer containing a sine-wave</p><p>    buf = bytearray(100)</p><p>    for i in range(len(buf)):</p><p>    buf= 128 + int(127 * math.sin(2 * math.pi * i / len(buf)))</p><p>    # output the sine-wave at 400Hz</p><p>    dac = DAC(1)</p><p>dac.write_timed(buf, 400 * len(buf), mode=DAC.CIRCULAR)</p><p><b>输出12位精度正弦波</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    import math</p><p>    from array import array</p><p>    from pyb import DAC</p><p>    # create a buffer containing a sine-wave, using half-word samples</p><p>    buf = array(&#39;H&#39;, 2048 + int(2047 * math.sin(2 * math.pi * i / 128)) for i in range(128))</p><p>    # output the sine-wave at 400Hz</p><p>    dac = DAC(1, bits=12)</p><p>    dac.write_timed(buf, 400 * len(buf), mode=DAC.CIRCULAR)</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>class pyb.DAC(port, bits=8)</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>定义DAC</b></p><p>port，1或2，对应X5（PA4）/X6（PA5）</p><p>bits，输出精度，可以是8或12</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>dac.init(bits=8)</p><p>初始化DAC</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>dac.noise(freq)</p><p>以指定频率，产生伪随机噪声信号</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>dac.triangle(freq)</p><p>以指定频率产生三角波</p><p>dac.write(value)</p><p>写入参数。在8bits时，参数范围[0-255]；在12bits时，参数范围[0..4095]</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>dac.write_timed(data, freq, *, mode=DAC.NORMAL)</p><p>使用DMA方式周期写入数据</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>data，缓冲区数组</p><p>freq，默认使用Timer(6)，用指定频率更新。也可以指定另外的定时器，有效的定时器是[2, 4, 5, 6, 7, 8]</p><p>mode，DAC.NORMAL or DAC.CIRCULAR</p><p></p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "DAC", 
                    "tagLink": "https://api.zhihu.com/topics/19933062"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36904000", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 1, 
            "title": "Putty连接TPYBorad v102 开发板教程", 
            "content": "<p>第一步：下载Putty软件</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.micropython.net.cn/download/tool/3.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">micropython.net.cn/down</span><span class=\"invisible\">load/tool/3.html</span><span class=\"ellipsis\"></span></a></p><p>第二步：通过USB数据线将TPYBorad与PC相连</p><p>第三步：打开设备管理器，查看TPYborad对应的COM口，如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4eced8acc6e9d183020a3d74763192cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic1.zhimg.com/v2-4eced8acc6e9d183020a3d74763192cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;594&#39; height=&#39;171&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"594\" data-original=\"https://pic1.zhimg.com/v2-4eced8acc6e9d183020a3d74763192cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4eced8acc6e9d183020a3d74763192cc_b.jpg\"/></figure><p>第四步：打开Putty软件，【Connection type】分类中选择【Serial】串口模式，输入串口号和波特率（默认波特率：9600）如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-18897f3d6d826a1a3b962066f90beb00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"289\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"289\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-18897f3d6d826a1a3b962066f90beb00_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p> 第五步：点击【Open】，进行连接。连接成功后，如图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e907b5642f57c3342e372ca46d109fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"189\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"189\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e907b5642f57c3342e372ca46d109fb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p> 第六步：Putty通过以下两种方式来操作TYPBorad</p><p>方式一：直接运行代码</p><p>连接成功后，输入【pyb.LED(2).on()】回车，TPYBorad板载LED2会亮起，效果如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-79a73b9cfdb601f3f49f9c0fac13ee7e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"189\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"189\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-79a73b9cfdb601f3f49f9c0fac13ee7e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p> 方式二：执行代码文件</p><p>    1、连接成功后，打开main.py文件输入以下内容，保存退出。</p><p>    print(&#39;********Hello World**********&#39;)</p><p>    2、等待TPYBorad板载上的LED1熄灭，Putty输入【execfile(‘main.py’)】回车,TPYBorad会立即执行main.py文件，效果如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a5ec98b8ec5ca45887504a68d0b6584e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"189\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"189\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-a5ec98b8ec5ca45887504a68d0b6584e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第七步：Putty调试代码</p><p>使用快捷键</p><p>   （TPYBoard开发板启动会自动运行main.py文件）</p><p>   Ctrl+C：停止运行程序</p><p>   Ctrl+D：运行程序</p><p>然后根据putty提示查看main.py错误提示。</p><p></p>", 
            "topic": [
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "PuTTY", 
                    "tagLink": "https://api.zhihu.com/topics/19675202"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36670243", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "[Micropython]TPYBoard v10x MFRC522智能门禁系统", 
            "content": "<p>MF RC522 是应用于13.56MHz 非接触式通信中高集成度读写卡系列芯片中的一员。也就是射频卡。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7164cf37aed7bbc33c88396d1de1dd36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"298\" data-rawheight=\"300\" class=\"content_image\" width=\"298\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;298&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"298\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"298\" data-actualsrc=\"https://pic3.zhimg.com/v2-7164cf37aed7bbc33c88396d1de1dd36_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>经常忘带钥匙，最尴尬的上周竟然去开4楼的门，（家住五楼，无电梯），开了好一会没打开，事后对4楼的居民好一顿道歉。就有了这么个想法，做一个门禁系统，试试TPYBoard v102能不能驱动射频卡？能不能读出数据。</p><p>目前属于构思阶段，射频卡MFRC522，已经能够读出数据，至于怎么开门，手上暂时没功能性强的舵机，理论没问题，细节还得思考啊。</p><p><b>1.实验目的：</b></p><p>•  学习使用红外接收头MFRC522 的使用</p><p><b>2.所需原器件：</b></p><p>•  TPYBoard v10X开发板 1块</p><p>•  RFIF-RC522模块一块</p><p>•  micro USB数据线 1条</p><p>•  杜邦线 若干</p><p><b>3.实验原理：</b></p><p>1. 驱动RC522模块一块</p><p>TPYBoard v10x的针脚与RC522的针脚对应关系如下:</p><p>X4    ­——SDA</p><p>X6    ——SCK</p><p>X8    ——MOSI</p><p>X7    ——MISO</p><p>GND   ——GND</p><p>X2    ——RST</p><p>3.3V    ——3V3</p><p>2.main.py内容如下</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">pyb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mfrc522</span>\n<span class=\"kn\">from</span> <span class=\"nn\">machine</span> <span class=\"kn\">import</span> <span class=\"n\">SPI</span><span class=\"p\">,</span><span class=\"n\">Pin</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n<span class=\"n\">SPI</span><span class=\"o\">=</span><span class=\"n\">pyb</span><span class=\"o\">.</span><span class=\"n\">SPI</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\t\n<span class=\"n\">RC522_SDA</span><span class=\"o\">=</span><span class=\"s1\">&#39;X4&#39;</span>\n<span class=\"n\">RC522_RST</span><span class=\"o\">=</span><span class=\"s1\">&#39;X2&#39;</span>\n<span class=\"n\">rc52</span><span class=\"o\">=</span><span class=\"n\">rc522</span><span class=\"o\">.</span><span class=\"n\">MFRC522</span><span class=\"p\">()</span>\n<span class=\"n\">rc52</span><span class=\"o\">.</span><span class=\"n\">init_spi</span><span class=\"p\">(</span><span class=\"n\">SPI</span><span class=\"p\">,</span><span class=\"n\">RC522_RST</span><span class=\"p\">,</span><span class=\"n\">RC522_SDA</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span><span class=\"n\">backBits</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">rc52</span><span class=\"o\">.</span><span class=\"n\">SeekCard</span><span class=\"p\">(</span><span class=\"mh\">0x52</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span><span class=\"nb\">id</span><span class=\"p\">,)</span><span class=\"o\">=</span><span class=\"n\">rc52</span><span class=\"o\">.</span><span class=\"n\">Anticoll</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;card_id=&#34;</span><span class=\"p\">,</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n<span class=\"k\">else</span> <span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;NO_CARD&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">pyb</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">main</span><span class=\"p\">()</span>\n\n</code></pre></div><p>TPYBoard 技术交流群 ：157816561  </p><p>Micropython玩家公众号：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/d0SMlEvEihb1rQ-39xFl\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/d0SMlEv</span><span class=\"invisible\">Eihb1rQ-39xFl</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p>", 
            "topic": [
                {
                    "tag": "智能家居", 
                    "tagLink": "https://api.zhihu.com/topics/19602154"
                }, 
                {
                    "tag": "智能设备", 
                    "tagLink": "https://api.zhihu.com/topics/19867960"
                }, 
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36524817", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 1, 
            "title": "精彩源于起点——2018年潍坊市首次青少年Python编程公开课", 
            "content": "<p><b>有一种语言叫计算机语言</b></p><p><b>I want to talk with Computer</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>春遇到冬，有了岁月</p><p>天遇到地，有了永恒</p><p>我们拥有的，</p><p>不止是长大，</p><p>还有那份长大的悲欢经历。</p><p>未来会有很多可能，</p><p>但一切源于万象开始</p><p>让一切皆有可能。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>让Python走进青少年</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>        自从国务院发布《新一代人工智能发展规划的通知》后，<b>山东、浙江等地先后将计算机python语言引入中小学信息技术教育中</b>，甚至有的地区被加入高考科目。为迎合这一需求，2018年5月6日，山东萝卜电子科技有限公司与潍坊乐创教育咨询有限公司面向潍坊青少年学生举办了一场生动的Python语言编程公益课，得到了学生和家长的好评。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b55f47fb6fcd87557556926601271bd7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-b55f47fb6fcd87557556926601271bd7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-b55f47fb6fcd87557556926601271bd7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b55f47fb6fcd87557556926601271bd7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>世界从点灯开始</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>         步入机器人的世界，点亮一盏小灯，向世界说一句“Hello World”，一切就是这样悄然开始了。公益课上，有趣的潘老师带着学生们，用工业上使用的萝卜狗开发板，进行了LED点灯的学习。从这一刻起，再也不是简单的拼拼积木就完成编程的时代了，青少年在潘老师的带领下，真正步入了计算机的世界，他们用“LED(3).on()”让机器听从指令，给世界带来光明。<b>这一刻，他们与计算机语言结缘，掌握了一门火遍全球的语言，向着真实的机器人世界迈进。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e5d3d64065532d0b1d7cc457e67da268_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-e5d3d64065532d0b1d7cc457e67da268_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-e5d3d64065532d0b1d7cc457e67da268_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e5d3d64065532d0b1d7cc457e67da268_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-01a3b0c25719f8fee012e49db6bfa88f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-01a3b0c25719f8fee012e49db6bfa88f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-01a3b0c25719f8fee012e49db6bfa88f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-01a3b0c25719f8fee012e49db6bfa88f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-49e492fab17c2d0b23f7aeb2e42df6df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-49e492fab17c2d0b23f7aeb2e42df6df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-49e492fab17c2d0b23f7aeb2e42df6df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-49e492fab17c2d0b23f7aeb2e42df6df_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>编程呼唤学科教育</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>        2010年以后，各类机器人教育瞬间春笋大地，各式各样的青少年入门教育层出不穷。我国的中小学生在接受完入门教育以后，均面临着更加专业化教育缺失的矛盾。一方面，有基础的学生兴趣正浓，一方面，专业的青少年编程教育缺失。<b>如何让青少年完成入门到专业的过渡，需要严谨的学科式编程教育。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2336a5ca5dfe2a640f10e06be0edac8f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2336a5ca5dfe2a640f10e06be0edac8f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2336a5ca5dfe2a640f10e06be0edac8f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2336a5ca5dfe2a640f10e06be0edac8f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>          编程学科式教育，就像英语学科教育一样，<b>将语言、数学、科学等知识融入到计算机语言的学习中去，不再将积木、拼搭做为重点，而是突出语法、算法教育、提升青少年独立思考、创造的意识与能力。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a535743eb61db783a49d3deb28f6304c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"239\" class=\"content_image\" width=\"342\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;342&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"239\" class=\"content_image lazy\" width=\"342\" data-actualsrc=\"https://pic1.zhimg.com/v2-a535743eb61db783a49d3deb28f6304c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>学科式编程教育，分三个等级，可连续上6-9年，横跨青少年成长黄金期，开启未来之门，走进编程世界。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9c860db75b0e98be2b2ae0c7cd93d31d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic2.zhimg.com/v2-9c860db75b0e98be2b2ae0c7cd93d31d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;458&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"458\" data-original=\"https://pic2.zhimg.com/v2-9c860db75b0e98be2b2ae0c7cd93d31d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9c860db75b0e98be2b2ae0c7cd93d31d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>入门：</b>面向8岁以上青少年，学习Python基本语法，讲解数字、字符串、变量、运算符、表达式、二进制运算、逻辑、循环等基本语法。</p><p><b>小成</b>：面向 12岁以上青少年，学习Python高级语法，讲解文件使用、文件操作、基础算法、数据库基础、程序设计方法等专业知识。</p><p><b>通灵：</b>面向15岁以上青少年，学习Python机器人编程专业知识，讲解Micropython库及固件，常用工业设计方法，原理图及PCB绘制，打板及焊接基础等，可自主实现简单创意。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ba18ff45d800c8ce195778742a01a958_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"849\" data-rawheight=\"479\" class=\"origin_image zh-lightbox-thumb\" width=\"849\" data-original=\"https://pic1.zhimg.com/v2-ba18ff45d800c8ce195778742a01a958_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;849&#39; height=&#39;479&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"849\" data-rawheight=\"479\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"849\" data-original=\"https://pic1.zhimg.com/v2-ba18ff45d800c8ce195778742a01a958_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ba18ff45d800c8ce195778742a01a958_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>精彩与世界同步</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>      山东萝卜电子科技有限公司是我们潍坊的一家本地企业，也是micropython国内首家引入公司，其生产的萝卜狗开发板已经成为国家Micropython领域代表性产品，得到了国内外的关注，并在国内多家高校所使用。学科编程教育也是其与潍坊乐创教育在青少年Python学习中的一次创新与实践，让编程不在是游戏，还原其技能的本性。</p><p>     2018年，这类公益课还将陆续在潍坊举办，敬请关注公众号。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/d0SMlEvEihb1rQ-39xFl\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/d0SMlEv</span><span class=\"invisible\">Eihb1rQ-39xFl</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>让我们从Python开始，一步步走入精彩的机器人世界，为2025做准备。</b></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "Python 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052039"
                }, 
                {
                    "tag": "青少年教育", 
                    "tagLink": "https://api.zhihu.com/topics/19672804"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36001110", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "第一款Micropython图形化编辑器—Python Editor", 
            "content": "<p>  当你看到这篇文章的时候，显然你已经阅读了很多类似的文章，那么本篇文章会深入讲解一些新手的需求，提供详细的建议，当然我不会告诉你具体怎么做，一切答案都是肤浅的。                         就拿我自己来说，初步接触编程的阶段是兴奋与痛苦并存的。看着自己手打的代码是兴奋的，然而由于格式、缩进、代码规则等等出现的错误又是非常痛苦的。那么本文介绍的就是一个规避新 手编程错误的编辑器，基于TPYBoard系列开发板的Micropython语言编辑器Python Editor。                                                                                                                              </p><p>首先看一下python editor的编程界面：编程界面功能介 绍，下文我会讲解。</p><p>网址：<a href=\"https://link.zhihu.com/?target=http%3A//www.tpyboard.com/pythoneditor/%23\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">tpyboard.com/pythonedit</span><span class=\"invisible\">or/#</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b4bc2ee64b6b29e38dd89ea392dafa2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"154\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"154\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-b4bc2ee64b6b29e38dd89ea392dafa2f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>     说实话我看到拼插编程教学，脑海里第一印象是乐高的积木拼插，对于五六岁刚刚有自我认知的孩子们来说，乐高的积木拼插是非常成功的，通过自己动手动脑，拼插出复杂多变的图形，是公认的非常好的启发婴幼儿智力的简单玩具。但是他也仅仅是启发智力，认知世界的玩具而已。随着孩子们不断成长，简单的积木拼插已经慢慢不能满足孩子们的求知欲望，他们渴望更深层次的知识，很自然的就要接触到程序代码，孩子况且如此，更不用说求知欲更强的成年人了。</p><p>TPYBoard 开发板是什么呢？</p><p>继续回过头来看python editor编辑器，此编辑器是基于TPYBoard  v10x系列开发板的Micropython语言编辑器，TPYBoard 开发板是什么呢？TPYBoard使用的是stm32主芯片，此开发板可直接连接PC端进行编程。</p><p>简单看下开发板规格，不做详细介绍。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>MCU(主控芯片) :         stm32f405rgt6</p><p>内存Flash：                1024KB RAM： 192KB</p><p>存储支持:                     SD Card(最大8GB)</p><p>电源 :                           Micro USB, 可在3.5V-10V电压内工作</p><p>USB口:                         2x USB 2.0</p><p>按钮:                            RST键: 在Micro USB口下方</p><p>                                   USR键: RST键旁边</p><p>LED :                           LED*4  (从芯片向外依次是红，黄，绿，蓝)</p><p>OS（=固件）:             TPYBoardV10X</p><p>尺寸:                           64mm x 54mm</p><p>重量:                           17g</p><p>接口:                           GPIO(30) SPI(2) CAN(2) I2C(2) USART(5) ADC(12) DAC(2) SWD(1)</p><p>硬件资源:                    3轴加速度传感器（MMA7660）</p><p>                                   LED*4  (从芯片向外依次是红，黄，绿，蓝)</p><p>                                   TF卡槽1个</p><p>                                     按键2个</p><p> Python Editor</p><p>以简单定时器为例，完整代码如下图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ae1864ae0b57f48509d4ca625ee0ef46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"154\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"154\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-ae1864ae0b57f48509d4ca625ee0ef46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当拼插好图形，系统会根据图形自动生成Micropython代码，在右侧区域显示，不需要考虑格式和缩进的问题。只需要掌握好图形拼插的原理，代码将是完全正确的。</p><p>TPYBoard 开发板运行程序</p><p>点击python editor 左下角的下载python，将系统生成的代码下载到TPYBoard盘符TPYBFLASH中即可运行程序。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-eaba3f36f8ff4aad60a51b1749174d30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"237\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"237\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-eaba3f36f8ff4aad60a51b1749174d30_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当然针对想了解如何零基础学习编程的朋友，绝大多数都没有基础，就算有也是无关紧要的基础，更谈不上开发的基础。虽然上面说到python editor编辑器不需要什么基础，但是想要用好它，也不是纸上谈兵就能实现的，实践才是检验真理的唯一标准！</p><p></p>", 
            "topic": [
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "Python 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052039"
                }, 
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35718244", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "Micropython可视化编程《TPYBoard 拼插编辑器》公开测试火爆来袭", 
            "content": "<p>山东萝卜电子倾力打造的python语言TPYBoard 拼插编辑器已经于4月13日开始正式公测，想必各位大佬已经按捺不住，想要在拼插画图编程界面大展身手了吧！ </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7c643dcd1d9c5f82ca21a57069c68520_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"27\" data-rawheight=\"27\" data-thumbnail=\"https://pic1.zhimg.com/v2-7c643dcd1d9c5f82ca21a57069c68520_b.jpg\" class=\"content_image\" width=\"27\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;27&#39; height=&#39;27&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"27\" data-rawheight=\"27\" data-thumbnail=\"https://pic1.zhimg.com/v2-7c643dcd1d9c5f82ca21a57069c68520_b.jpg\" class=\"content_image lazy\" width=\"27\" data-actualsrc=\"https://pic1.zhimg.com/v2-7c643dcd1d9c5f82ca21a57069c68520_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>TPYBoard 拼插编辑器地址：<a href=\"https://link.zhihu.com/?target=http%3A//www.tpyboard.com/pythoneditor/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">tpyboard.com/pythonedit</span><span class=\"invisible\">or/</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>TPYBoard 拼插编辑器公测2月9日火爆来袭</b></p><p><b>相信大佬们还有许多很关心的问题，小编这就来给大家解答</b>！</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6082d1371ee47ce97cc3d5dade472e79_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"50\" data-rawheight=\"10\" data-thumbnail=\"https://pic2.zhimg.com/v2-6082d1371ee47ce97cc3d5dade472e79_b.jpg\" class=\"content_image\" width=\"50\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;50&#39; height=&#39;10&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"50\" data-rawheight=\"10\" data-thumbnail=\"https://pic2.zhimg.com/v2-6082d1371ee47ce97cc3d5dade472e79_b.jpg\" class=\"content_image lazy\" width=\"50\" data-actualsrc=\"https://pic2.zhimg.com/v2-6082d1371ee47ce97cc3d5dade472e79_b.gif\"/></figure><p>Q: TPYBoard 拼插编辑器上线后，我是Mac系统可以使用吗？</p><p>A: Windows系列、Unix类、Linux类、Mac等主流操作系统都可以正常使用的哦。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Q: TPYBoard 拼插编辑器是怎么使用的呢？</p><p>A:这个小编就要一点点细细说明下了(#^.^#)</p><p>关于界面，可分为三个区域。目录栏、拼插编辑区、代码显示区。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-de02c4b3e67ccfed5b088a0d349c1ff1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"527\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-de02c4b3e67ccfed5b088a0d349c1ff1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;527&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"527\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-de02c4b3e67ccfed5b088a0d349c1ff1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-de02c4b3e67ccfed5b088a0d349c1ff1_b.jpg\"/></figure><p>还有疑问？那就直接举个简单例子</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5800606a5aaf7d3054e16281c3a8aed4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-5800606a5aaf7d3054e16281c3a8aed4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;325&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-5800606a5aaf7d3054e16281c3a8aed4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5800606a5aaf7d3054e16281c3a8aed4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Q:图形拼插完毕该怎么该怎么运行程序呢？</p><p>A:点击TPYBoard 拼插编辑器左下角下载python，将拼插好的代码下载到TPYBoard 开发板盘符中，即可点击开发板RST键运行程序。如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2f254fc26f66dd9f1368370b02666d0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-2f254fc26f66dd9f1368370b02666d0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-2f254fc26f66dd9f1368370b02666d0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2f254fc26f66dd9f1368370b02666d0f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Q：在拼插过程中，如果我拖拽了错误的图形，应该怎么办呢？</p><p>A：直接点击错误的图形，并拖拽到拼插编辑区右下角小垃圾箱内即可删除错误图形啦(*^▽^*)。如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-db5902cabc714c657424472d45a84cad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"454\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-db5902cabc714c657424472d45a84cad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;454&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"454\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-db5902cabc714c657424472d45a84cad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-db5902cabc714c657424472d45a84cad_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Q：“我是编程大佬，拼插固然好玩但是我更喜欢直接敲代码。”</p><p>A：  TPYBoard 拼插编辑器也是支持代码编程的哟，只需要点击可视化编程，切换到代码编程模式就可以编写代码啦。如图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4c24bd8146e7ab287af438c32ff26f3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"269\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-4c24bd8146e7ab287af438c32ff26f3c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;269&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"269\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-4c24bd8146e7ab287af438c32ff26f3c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4c24bd8146e7ab287af438c32ff26f3c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Q：若是我网络断掉了，怎么下载python呢？离线还能正常使用吗？</p><p>A：直接下载离线版本，随时随地畅心所欲。下载地址：<a href=\"https://link.zhihu.com/?target=http%3A//www.tpyboard.com/download/tool/189.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">tpyboard.com/download/t</span><span class=\"invisible\">ool/189.html</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Q：TPYBoard 拼插编辑器大佬们都在哪里讨论分享心得？ </p><p>A：欢迎各位大佬加入以下社区，与其他同好一起讨论编程内容，分享成功心得，结实更多志同道合好友。点击链接加入群聊【TPYBoard技术交流群】：<a href=\"https://link.zhihu.com/?target=https%3A//jq.qq.com/%3F_wv%3D1027%26k%3D5cJQbSt\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">jq.qq.com/?</span><span class=\"invisible\">_wv=1027&amp;k=5cJQbSt</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/d0SMlEvEihb1rQ-39xFl\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/d0SMlEv</span><span class=\"invisible\">Eihb1rQ-39xFl</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }, 
                {
                    "tag": "Python 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052039"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35555600", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 0, 
            "title": "Micropython  TPYBoard V10X拼插编程实践之定时器 代码不精通？...", 
            "content": "<p>     对于Micropython来讲，代码编程是必不可少的一部分，但是对于DIY爱好者这个受众巨大的群体，编程就显得有点难度了，毕竟大部分人是不精通代码的。那么有没有一个更加简单的编程方式呢？今天给大家介绍如何通过拼插画图来实现常规代码编程。                                                                              </p><p>我们来实现一个最简单的定时器功能。</p><p>利用micropython的定时器，实现红色led每秒闪烁一次。</p><p>先来看一下我们拼插编程的界面：</p><p>左侧为目录栏，中间白底为拼插画图区，右侧代码显示区。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5ed128355af9c0475ac7a39420f8a6e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"162\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;162&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"162\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-5ed128355af9c0475ac7a39420f8a6e3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当我们从目录栏拖动相应的图形到拼插画图区时，代码显示区即显示相应代码，如图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-93690d807f54b342c35e61e52ca16a4b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"164\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;164&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"164\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic4.zhimg.com/v2-93690d807f54b342c35e61e52ca16a4b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、制作流程</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5923f9ed208e4bb6991d6ffc92978430_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"193\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;193&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"193\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic1.zhimg.com/v2-5923f9ed208e4bb6991d6ffc92978430_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b68e7e7c1000cbd84338e2bfd08c525b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"300\" class=\"content_image\" width=\"227\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;227&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"227\" data-actualsrc=\"https://pic4.zhimg.com/v2-b68e7e7c1000cbd84338e2bfd08c525b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-71fcf22e3148ec3ed9de7710635e6f86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"300\" class=\"content_image\" width=\"227\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;227&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"227\" data-actualsrc=\"https://pic3.zhimg.com/v2-71fcf22e3148ec3ed9de7710635e6f86_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>要使用定时器，先需要导入Timer库。from pyb import Timer，可使用*代替。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>import pyb</p><p class=\"ztext-empty-paragraph\"><br/></p><p>from pyb import * #导入库</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>def test(returnValue):#函数定义</p><p class=\"ztext-empty-paragraph\"><br/></p><p> LED(1).toggle()</p><p class=\"ztext-empty-paragraph\"><br/></p><p> return</p><p class=\"ztext-empty-paragraph\"><br/></p><p>t = Timer(1,freq=1,callback=test) #定义Timer: #设置Timer编号#设置轮巡时间 #定义频率 数字越大频率越高</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }, 
                {
                    "tag": "插画", 
                    "tagLink": "https://api.zhihu.com/topics/19573660"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35453047", 
            "userName": "小圆子", 
            "userLink": "https://www.zhihu.com/people/41bccfc2f5a4f731b401abe57f732698", 
            "upvote": 3, 
            "title": "TPYBoard v102 DIY照相机 附实物图和制作步骤", 
            "content": "<p><b>先来看下我们使用的核心板TPYBoard</b>  <b>v102：</b></p><p>TPYBoard  v102主控芯片采用STM32F405,M4的内核，168MHZ的最高运行速度，1024KB的Flash，192KB的RAM,内置SD卡槽，最大支持8G内存的内存卡。  简而言之，TPYBoard通过Python脚本语言实现单片机的控制。                    </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a7ab38765512f471cb3ba5e1aefea0d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"253\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-a7ab38765512f471cb3ba5e1aefea0d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;253&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"253\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-a7ab38765512f471cb3ba5e1aefea0d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a7ab38765512f471cb3ba5e1aefea0d0_b.jpg\"/></figure><p><b>所需器材</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TPYBoard  v102  1块</p><p class=\"ztext-empty-paragraph\"><br/></p><p>PTC06 串口摄像头模块1个</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5110显示屏1个</p><p class=\"ztext-empty-paragraph\"><br/></p><p>按键模块2个</p><p class=\"ztext-empty-paragraph\"><br/></p><p>杜邦线若干</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TF内存卡1个</p><p class=\"ztext-empty-paragraph\"><br/></p><p>热干胶1个</p><p class=\"ztext-empty-paragraph\"><br/></p><p>USB数据线1条</p><p class=\"ztext-empty-paragraph\"><br/></p><p>移动电源1块</p><p class=\"ztext-empty-paragraph\"><br/></p><p>照相机模型纸一张</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>外壳制作步骤</b></p><p>将照相机模型纸裁剪折叠</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7e0fdd926a75aedf3232be0eefb4abd9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-7e0fdd926a75aedf3232be0eefb4abd9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3024&#39; height=&#39;4032&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-7e0fdd926a75aedf3232be0eefb4abd9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7e0fdd926a75aedf3232be0eefb4abd9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e8ae8258f42951732e16bb7d11f4ea04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic1.zhimg.com/v2-e8ae8258f42951732e16bb7d11f4ea04_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3024&#39; height=&#39;4032&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3024\" data-original=\"https://pic1.zhimg.com/v2-e8ae8258f42951732e16bb7d11f4ea04_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e8ae8258f42951732e16bb7d11f4ea04_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bb0eb211678aa16823bc24f4fe801195_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-bb0eb211678aa16823bc24f4fe801195_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3024&#39; height=&#39;4032&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-bb0eb211678aa16823bc24f4fe801195_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bb0eb211678aa16823bc24f4fe801195_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-70b8b989fcf8fef0e61a45132259983a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic3.zhimg.com/v2-70b8b989fcf8fef0e61a45132259983a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3024&#39; height=&#39;4032&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3024\" data-original=\"https://pic3.zhimg.com/v2-70b8b989fcf8fef0e61a45132259983a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-70b8b989fcf8fef0e61a45132259983a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>器件接线</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1.核心硬件接线</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>PTC06 串口摄像头模块简介：</p><p>PTC06 串口摄像头模块是一款集图像采集、拍摄控制、数据压缩、串口传输于一体的图像采集 处理模块。其内置的高性能数字信号处理芯片实现了对原始图像的高比例压缩。产品图像输 出采用标准 JPEG 格式，方便地兼容各种图像处理软件；采用 3 线制TTL 电平 UART 通 信接口，可以方便地实现与单片机或其他微处理器连接。默认波特率为 115200，其它可选波特率有9600，19200，38400 和 57600。 其中对于串口控制拍照，读取静态图片的应用中，只需要用到 GND，RX，TX，VCC 这4 个信号线。 如果是要输出模拟视频的应用，才需要将 CVBS 信号。 注意： TX 和 RX 是 3.3v 的 TTL 电平信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TPYBoard v102 和PTC06 串口摄像头模块，具体接线方式如下表:</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TPYBoard v102  --摄像头模块</p><p> VIN    ----------------5V</p><p> GND    ------------ - GND</p><p> X1(UART 4 TX)------  RX</p><p> X2(UART 4 RX) ------TX</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-54534cca0946b75097c3f78ce19e9a7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-54534cca0946b75097c3f78ce19e9a7d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3024&#39; height=&#39;4032&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-54534cca0946b75097c3f78ce19e9a7d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-54534cca0946b75097c3f78ce19e9a7d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6a8d86dd5522603628eaed82b92e8d03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic4.zhimg.com/v2-6a8d86dd5522603628eaed82b92e8d03_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4032&#39; height=&#39;3024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4032\" data-original=\"https://pic4.zhimg.com/v2-6a8d86dd5522603628eaed82b92e8d03_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6a8d86dd5522603628eaed82b92e8d03_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-96b81fe8aa9fa745d82de0f5f80271a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-96b81fe8aa9fa745d82de0f5f80271a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4032&#39; height=&#39;3024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-96b81fe8aa9fa745d82de0f5f80271a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-96b81fe8aa9fa745d82de0f5f80271a4_b.jpg\"/></figure><p><b>2.按键模块</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>本照相机加了两个按键模块，一个控制拍照另一个控制复位。将TPYBoard v102上面的两个板子按键RST、USR引出。由于板子按键初始化默认为低电平。所以接按键模块时，需要将正负极反过来接。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bc8967ddca32b4d890635e65e6600fe3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic4.zhimg.com/v2-bc8967ddca32b4d890635e65e6600fe3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3024&#39; height=&#39;4032&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3024\" data-original=\"https://pic4.zhimg.com/v2-bc8967ddca32b4d890635e65e6600fe3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bc8967ddca32b4d890635e65e6600fe3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>具体接线方式如下表： </p><p>TPYBoard  v102------按键模块黑色（复位键）</p><p>3.3V--------------------GND</p><p>GND--------------------VCC</p><p>RST---------------------OUT</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TPYBoard  v102---------按键模块黄色（拍摄键）</p><p>GND---------------------VCC</p><p>3.3V----------------------GND</p><p>X17-----------------------OUT</p><p><b>3.连接5110显示屏</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>本照相机5110显示屏并不是为了显示图片，而是显示相机当前状态。相机连接电源，当5110显示屏显示OK时，即表示相机已准备就绪，可以进行拍摄，然后我们按下黄色拍摄按键，5110显示屏会显示吃豆小人，此时表示相片正在传输，当小人完全吃豆完成就可以查看照片了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2a27c5863eb3b360e13b56dffaefc8bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic4.zhimg.com/v2-2a27c5863eb3b360e13b56dffaefc8bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4032&#39; height=&#39;3024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4032\" data-original=\"https://pic4.zhimg.com/v2-2a27c5863eb3b360e13b56dffaefc8bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a27c5863eb3b360e13b56dffaefc8bb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>5110显示屏与TPYBoard v102接线方式如下表：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TPYBoard  v102---------5110显示屏</p><p>Y12----------------------RST</p><p>Y11----------------------CE</p><p>Y10----------------------DC</p><p>Y9-----------------------LIGHT</p><p>Y8-----------------------DIN</p><p>Y6-----------------------CLK</p><p>3.3V---------------------VIN</p><p>GND--------------------GND</p><p>此时所有器件已连接完毕，只需要给我们核心板TPYBoard v102 编写代码，并</p><p>导入fond.py 和upcd8544.py就可以运行了。fond.py 和upcd8544.py下载地址：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/TPYBoard/developmentBoard/tree/master/TPYBoard-v10x-\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/TPYBoard/dev</span><span class=\"invisible\">elopmentBoard/tree/master/TPYBoard-v10x-</span><span class=\"ellipsis\"></span></a></p><p>master/06.%E9%A9%B1%E5%8A%A8LCD5110%E6%98%BE%E7%A4%BA</p><p>6x8%E5%AD%97%E7%AC%A6（此地址main.py非此实验代码 main.py代码如下）</p><p>成品相机视频地址：<a href=\"https://link.zhihu.com/?target=https%3A//v.qq.com/x/page/w0612m16tnw.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">v.qq.com/x/page/w0612m1</span><span class=\"invisible\">6tnw.html</span><span class=\"ellipsis\"></span></a></p><p>制作花絮视频地址：<a href=\"https://link.zhihu.com/?target=https%3A//aimeike.tv/video/l7w0c\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">aimeike.tv/video/l7w0c</span><span class=\"invisible\"></span></a></p><p>实物图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8c5895fd68df54d9220ac54c69a0e655_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic2.zhimg.com/v2-8c5895fd68df54d9220ac54c69a0e655_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4032&#39; height=&#39;3024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4032\" data-original=\"https://pic2.zhimg.com/v2-8c5895fd68df54d9220ac54c69a0e655_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8c5895fd68df54d9220ac54c69a0e655_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>main.py代码如下</b>：</p><div class=\"highlight\"><pre><code class=\"language-text\">import pyb\nfrom pyb importUART,Switch\nimport upcd8544\n\n#-----command---------#\ninitcmd=b&#39;\\x56\\x00\\x26\\x00&#39;#复位\nclearcmd=b&#39;\\x56\\x00\\x36\\x01\\x02&#39;#清除缓存\nphotocmd=b&#39;\\x56\\x00\\x36\\x01\\x00&#39;#拍照\nlengthcmd=b&#39;\\x56\\x00\\x34\\x01\\x00&#39;#获取图片长度\nreadcmd=b&#39;\\x56\\x00\\x32\\x0C\\x00\\x0A\\x00\\x00&#39;#获取图片数据\nresponseCmd=b&#39;\\x76\\x00\\x32\\x00\\x00&#39;#返回的图片数据固定头和尾\n#---------------------------------#\nisFlag=0#标识是否初始化\nisPhoto=0#标识是否发送拍照命令\nnum=0\nf_name=&#39;/sd/photo%s.jpeg&#39;\nnBytes=2048#每次读取的字节数\n#---------------------------------#\nuart=UART(4,115200,timeout=100)#X1(UART4 TX) X2(UART 4 RX)\n#-------十进制转16进制------------#\ndefconvert_Data(num):\n   if num&gt;255:\n       num_h=hex(num)\n       if len(num_h)&lt;6:\n           num_h_a=num_h[:3]\n           num_h_b=&#39;0x&#39;+num_h[3:]\n       else:\n           num_h_a=num_h[:4]\n           num_h_b=&#39;0x&#39;+num_h[4:]\n      byte_num=bytes([int(num_h_a,16),int(num_h_b,16)])\n   else:\n       byte_num=b&#39;\\x00&#39;+bytes([num])\n   return byte_num\ndefget_photo(add,readlen):\n   global readcmd,responseCmd\n  \n  cmd=readcmd+add+b&#39;\\x00\\x00&#39;+readlen+b&#39;\\x00\\xFF&#39;\n   uart.write(cmd)\n   while uart.any()&lt;=0:\n       continue\n   data=uart.read()\n   #print(&#39;data:&#39;,data)\n   #print(&#39;data[0:5]:&#39;,data[0:5])\n   #print(&#39;data[-5:]:&#39;,data[-5:])\n   if data[0:5]==responseCmd anddata[-5:]==responseCmd:\n       revdata=data[5:-5]\n       print(&#39;revdata:&#39;,revdata)\n   else:\n       revdata=0\n   return revdata\ndef test():\n   global num,isPhoto\n   pyb.delay(30)\n   if(sw()):\n       sw.callback(None)\n       isPhoto=0\n       num+=1\n       pyb.LED(3).on()\n       #清除缓存\n       uart.write(clearcmd)\n#-------LCD5110Init-----------#\nSPI    = pyb.SPI(1) #DIN=&gt;X8-MOSI/CLK=&gt;X6-SCK\nRST    = pyb.Pin(&#39;Y12&#39;)\nCE     = pyb.Pin(&#39;Y11&#39;)\nDC     = pyb.Pin(&#39;Y10&#39;)\nLIGHT  = pyb.Pin(&#39;Y9&#39;)\nlcd_5110 =upcd8544.PCD8544(SPI, RST, CE, DC, LIGHT)\nlcd_5110.lcd_write_bmp()\n#------------------------------#      \nprint(&#39;wait......&#39;)\npyb.delay(2800)\nprint(&#39;initstart.......&#39;)\nuart.write(initcmd)\nsw=Switch()\nsw.callback(test)\nwhile True:\n   if uart.any()&gt;0:\n       data=uart.read()\n       print(&#39;revdata:&#39;,data)\n       if isFlag==0:\n           #说明接收的是复位后的信息\n           if data==b&#39;Init end\\r\\n&#39;:\n               #复位完毕\n               print(&#39;init ok.......&#39;)\n               pyb.delay(2000)\n               isFlag=1\n               pyb.LED(2).on()\n               lcd_5110.lcd_write_bmp(0)\n       else:\n           if len(data)&gt;=5:\n               if data[0]==118:#0x76\n                   if data[2]==54:#0x36\n                       if isPhoto==0:\n                           #清除缓存返回\n                           print(&#39;-----clearbuffer ok----&#39;)\n                           isPhoto=1\n                          uart.write(photocmd)\n                           lcd_5110.clear()\n                          lcd_5110.lcd_write_bmp(1)\n                       else:\n                           #拍照返回\n                           print(&#39;-----takingpictures ok----&#39;)\n                          uart.write(lengthcmd)\n                   if data[2]==52:#0x34\n                       print(&#39;photolength:&#39;,data[7],&#39;-&#39;,data[8])\n                      tlen=data[7]*256+data[8]\n                       t_c=tlen//nBytes\n                       t_y=tlen%nBytes\n                       add=0\n                       #256=[0x01,0x00]512=[0x02,0x00]\n                      length=convert_Data(nBytes)\n                       name=f_name % str(num)\n                       print(&#39;filename:&#39;,name)\n                       offset=0\n                       for i in range(0,t_c):\n                           offset_a=i//4\n                           ifoffset&lt;offset_a:\n                               offset=offset_a\n                               lcd_5110.clear()\n                              lcd_5110.lcd_write_bmp(1,offset)\n                          add=convert_Data(i*nBytes)\n                          revdata=get_photo(add,length)\n                           if revdata!=0:\n                              f=open(name,&#39;a&#39;)\n                              f.write(revdata)\n                               f.close()\n                           pyb.LED(4).toggle()\n                           print(&#39;-------------&#39;,i)\n                           pyb.delay(100)\n                      add=convert_Data(t_c*nBytes)   \n                      revdata=get_photo(add,convert_Data(t_y))\n                       if revdata!=0:\n                           f=open(name,&#39;a&#39;)\n                           f.write(revdata)\n                           f.close()\n                       pyb.LED(3).off()\n                       pyb.LED(4).off()\n                       pyb.delay(100)\n                       print(&#39;*========================================*&#39;)\n                       lcd_5110.clear()\n                      lcd_5110.lcd_write_bmp(2)\n                       sw.callback(test)\n           else:\n               print(&#39;-----data lengtherror-----&#39;)</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "相机", 
                    "tagLink": "https://api.zhihu.com/topics/19562645"
                }, 
                {
                    "tag": "DIY", 
                    "tagLink": "https://api.zhihu.com/topics/19553863"
                }, 
                {
                    "tag": "MicroPython", 
                    "tagLink": "https://api.zhihu.com/topics/20082952"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_174630018"
}
