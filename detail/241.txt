{
    "title": "C++读书笔记", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/mi-yang-36-53", 
        "https://www.zhihu.com/people/oliver-kahn-60", 
        "https://www.zhihu.com/people/wang-yan-pei-7-80", 
        "https://www.zhihu.com/people/zhu-ge-cha-na", 
        "https://www.zhihu.com/people/noeltoby", 
        "https://www.zhihu.com/people/kingsam-61-44", 
        "https://www.zhihu.com/people/yao-ling-long-51", 
        "https://www.zhihu.com/people/mao-yin", 
        "https://www.zhihu.com/people/mu-mu-35-8-56", 
        "https://www.zhihu.com/people/iCppCoder", 
        "https://www.zhihu.com/people/frank_yang0828", 
        "https://www.zhihu.com/people/bug_maker", 
        "https://www.zhihu.com/people/jluautolab", 
        "https://www.zhihu.com/people/feng-jin-ming-27", 
        "https://www.zhihu.com/people/kong-cheng-zui-da-ying-jia", 
        "https://www.zhihu.com/people/ewall-46", 
        "https://www.zhihu.com/people/wu-lie-ming", 
        "https://www.zhihu.com/people/fa-liao-20", 
        "https://www.zhihu.com/people/yi-jiang-shi-tou", 
        "https://www.zhihu.com/people/a4paper-28", 
        "https://www.zhihu.com/people/peess", 
        "https://www.zhihu.com/people/cha-meng-21", 
        "https://www.zhihu.com/people/liang-liang-11-81", 
        "https://www.zhihu.com/people/loves-73", 
        "https://www.zhihu.com/people/zhou-hx-10", 
        "https://www.zhihu.com/people/wu-yuan-82-97", 
        "https://www.zhihu.com/people/zang-xin-18-71", 
        "https://www.zhihu.com/people/zheng-kang-91-73", 
        "https://www.zhihu.com/people/tang-shi-ming-77", 
        "https://www.zhihu.com/people/kai-gua-mai-xi-gua", 
        "https://www.zhihu.com/people/qi-che-ren-82", 
        "https://www.zhihu.com/people/yizhi-bai-59", 
        "https://www.zhihu.com/people/zhang-xing-xing-42-10", 
        "https://www.zhihu.com/people/huang-guo-tao-61-29", 
        "https://www.zhihu.com/people/ba-la-ba-la-23-19", 
        "https://www.zhihu.com/people/sbpfc1962", 
        "https://www.zhihu.com/people/race-70", 
        "https://www.zhihu.com/people/crossover-48-76", 
        "https://www.zhihu.com/people/zealot-95-26", 
        "https://www.zhihu.com/people/menjek", 
        "https://www.zhihu.com/people/wo-zhua-62", 
        "https://www.zhihu.com/people/circle-13-28", 
        "https://www.zhihu.com/people/meng-yu-48-11", 
        "https://www.zhihu.com/people/ai-chi-yu-de-pai-da-xing", 
        "https://www.zhihu.com/people/un-limited-26-86", 
        "https://www.zhihu.com/people/gd-wan", 
        "https://www.zhihu.com/people/ma-mou-48-34", 
        "https://www.zhihu.com/people/ai-qi-yi-80-93", 
        "https://www.zhihu.com/people/ye-zi-86-76-7", 
        "https://www.zhihu.com/people/firetaker", 
        "https://www.zhihu.com/people/tang-zhi-wei-33", 
        "https://www.zhihu.com/people/szsz-54", 
        "https://www.zhihu.com/people/li-zi-han-81-63", 
        "https://www.zhihu.com/people/sa-ta-63", 
        "https://www.zhihu.com/people/pignunu", 
        "https://www.zhihu.com/people/ma-li-xiang-3", 
        "https://www.zhihu.com/people/ji-kang-39-28", 
        "https://www.zhihu.com/people/zhu-yun-hao-53-69", 
        "https://www.zhihu.com/people/chen-xiao-66-87", 
        "https://www.zhihu.com/people/zhang-ai-wan", 
        "https://www.zhihu.com/people/tuotak", 
        "https://www.zhihu.com/people/heghost", 
        "https://www.zhihu.com/people/tai-hu-sha", 
        "https://www.zhihu.com/people/ke-ke-21-99-90", 
        "https://www.zhihu.com/people/ching-eric", 
        "https://www.zhihu.com/people/zhang-xiong-46-98", 
        "https://www.zhihu.com/people/liang-yan-quan-shi-hei", 
        "https://www.zhihu.com/people/huang-dan-62-13", 
        "https://www.zhihu.com/people/hu-hao-xiang-39-35", 
        "https://www.zhihu.com/people/li-jian-guo-27", 
        "https://www.zhihu.com/people/han-feng-8-4", 
        "https://www.zhihu.com/people/song-fei-46-30", 
        "https://www.zhihu.com/people/shi-dai-ng", 
        "https://www.zhihu.com/people/jing-cheng-54-67", 
        "https://www.zhihu.com/people/zhang-hui-12-53-84", 
        "https://www.zhihu.com/people/a-mao-xiao-jie-jie", 
        "https://www.zhihu.com/people/wu-ming-shi-54-24", 
        "https://www.zhihu.com/people/gong-yu-shi-14", 
        "https://www.zhihu.com/people/mzyhhy", 
        "https://www.zhihu.com/people/zhang-jun-15-57-33", 
        "https://www.zhihu.com/people/guo-yue-bin-67", 
        "https://www.zhihu.com/people/kang-da-ren-98", 
        "https://www.zhihu.com/people/jin-er-shi", 
        "https://www.zhihu.com/people/hu-xi-deng-59", 
        "https://www.zhihu.com/people/sun-dong-92-23", 
        "https://www.zhihu.com/people/du-xing-ren-46", 
        "https://www.zhihu.com/people/gong-zhen-22-3", 
        "https://www.zhihu.com/people/yun-dan-feng-qing-20-57", 
        "https://www.zhihu.com/people/daodeli", 
        "https://www.zhihu.com/people/lie-bing-55", 
        "https://www.zhihu.com/people/Johnj1985", 
        "https://www.zhihu.com/people/zhang-shan-46-1", 
        "https://www.zhihu.com/people/bo-bo-94-72-79", 
        "https://www.zhihu.com/people/USuper", 
        "https://www.zhihu.com/people/xia-mi-1-69-95", 
        "https://www.zhihu.com/people/wsrgan", 
        "https://www.zhihu.com/people/jiu-ye-20-63", 
        "https://www.zhihu.com/people/xi-dong-yang", 
        "https://www.zhihu.com/people/bai-cao-quan-yu", 
        "https://www.zhihu.com/people/xiao-cheng-xu-yuan-de-jie-yi-meng", 
        "https://www.zhihu.com/people/simonhao", 
        "https://www.zhihu.com/people/zhou-gui-zhou-49", 
        "https://www.zhihu.com/people/wang-quan-sheng-88", 
        "https://www.zhihu.com/people/qian-xiao-xiang-an-33", 
        "https://www.zhihu.com/people/liu-wei-75-8-77", 
        "https://www.zhihu.com/people/shi-qu-de-qing-chun-97-63", 
        "https://www.zhihu.com/people/lian-shan-77", 
        "https://www.zhihu.com/people/kaerwar", 
        "https://www.zhihu.com/people/shui-tian-yixian-76", 
        "https://www.zhihu.com/people/min-42-98", 
        "https://www.zhihu.com/people/xiao-xing-xing-90-9", 
        "https://www.zhihu.com/people/ai-you-bu-de-liao-29", 
        "https://www.zhihu.com/people/power4", 
        "https://www.zhihu.com/people/chan-80-37", 
        "https://www.zhihu.com/people/reng-biao-qiang-de-hou-yi", 
        "https://www.zhihu.com/people/deng-yanjun", 
        "https://www.zhihu.com/people/eric-33-22", 
        "https://www.zhihu.com/people/liu-wen-jie-95-86", 
        "https://www.zhihu.com/people/chen-guang-xing-97", 
        "https://www.zhihu.com/people/wei-nian-yun-zhong-feng", 
        "https://www.zhihu.com/people/mei-yu-45-74", 
        "https://www.zhihu.com/people/Desiderius", 
        "https://www.zhihu.com/people/wang-hai-18-53", 
        "https://www.zhihu.com/people/xie-guan-hua-8", 
        "https://www.zhihu.com/people/xue-ding-e-liao-yao-69", 
        "https://www.zhihu.com/people/60yu-47", 
        "https://www.zhihu.com/people/yyyyyrdou", 
        "https://www.zhihu.com/people/cloris-74-73", 
        "https://www.zhihu.com/people/zhang-wen-70-88", 
        "https://www.zhihu.com/people/wei-chi-heng-30", 
        "https://www.zhihu.com/people/xin-guan-ren-de-bu-gui-lu", 
        "https://www.zhihu.com/people/rose-49-33", 
        "https://www.zhihu.com/people/ling-yitiao-lu", 
        "https://www.zhihu.com/people/suNx36oSe", 
        "https://www.zhihu.com/people/wang-yong-97-9-74", 
        "https://www.zhihu.com/people/li-ying-fei-94", 
        "https://www.zhihu.com/people/he-cheng-50-29", 
        "https://www.zhihu.com/people/la-la-la-fang-fei-zi-wo", 
        "https://www.zhihu.com/people/eco001", 
        "https://www.zhihu.com/people/xiao-liang-86-70", 
        "https://www.zhihu.com/people/se-li-ya", 
        "https://www.zhihu.com/people/jia-long-long-34", 
        "https://www.zhihu.com/people/hua-yu-hua-yu-60", 
        "https://www.zhihu.com/people/lory17", 
        "https://www.zhihu.com/people/waves-12", 
        "https://www.zhihu.com/people/cai-xian-ju", 
        "https://www.zhihu.com/people/xiao-xiao-qing-20", 
        "https://www.zhihu.com/people/wu-jun-shuai-92", 
        "https://www.zhihu.com/people/esc-12-13", 
        "https://www.zhihu.com/people/huang-chao-fan-30", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/chuang-jing-ji-jie", 
        "https://www.zhihu.com/people/dolishzhu", 
        "https://www.zhihu.com/people/foghos-23", 
        "https://www.zhihu.com/people/xiong-da-46-10", 
        "https://www.zhihu.com/people/yao-dao-69-55", 
        "https://www.zhihu.com/people/mch0dmin", 
        "https://www.zhihu.com/people/123-23-48-32", 
        "https://www.zhihu.com/people/seasky.love", 
        "https://www.zhihu.com/people/wang-jin-can-45", 
        "https://www.zhihu.com/people/siri-53-13", 
        "https://www.zhihu.com/people/whatwhyhow_", 
        "https://www.zhihu.com/people/de-zhao-14", 
        "https://www.zhihu.com/people/wang-wang-wang-33-41", 
        "https://www.zhihu.com/people/nan-he-he-3", 
        "https://www.zhihu.com/people/JaneJohanna", 
        "https://www.zhihu.com/people/wang-kai-98-97", 
        "https://www.zhihu.com/people/fang-xia-zhi-nian-33", 
        "https://www.zhihu.com/people/wj2014-59", 
        "https://www.zhihu.com/people/huang-xiao-tai", 
        "https://www.zhihu.com/people/huang-hai-bo-37-67", 
        "https://www.zhihu.com/people/tao-liu-91"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/25550318", 
            "userName": "Parallelc", 
            "userLink": "https://www.zhihu.com/people/4a093efef217fa0544944d85d4fa4ca7", 
            "upvote": 0, 
            "title": "Effective C++ Note 02 Part1", 
            "content": "<p>第二章讲的是有关构造、析构以及赋值运算的一些东西</p><h2><b>Item 05: Know what functions C++ silently writes and calls.</b></h2><blockquote>了解C++默默编写并调用哪些函数</blockquote><p>如果你写了一个类，没有声明任何构造函数，编译器就会帮你声明一个默认的public且inline的构造函数。<br/></p><p>析构函数、copy构造函数以及copy assignment操作符也是一样，在你没说的时候，编译器都会帮你声明。<br/></p><p>而只有当你要用它们的时候，它们才会被编译器创建出来。<br/></p><p>这些函数具体是怎么实现的呢？<br/></p><p>默认构造函数以及析构函数会放置“藏在幕后”的代码，像是调用base classes和non-static成员变量的构造函数和析构函数。但要注意的是，析构函数是个non-virtual，除非这个class的base class自身声明有virtual析构函数。<br/></p><p>而copy构造函数和copy assignment操作符，编译器只是单纯地将来源对象的每一个non-static成员变量拷贝到目标函数。而且，copy assignment操作符只有在生出的代码合法且有适当机会证明它有意义的时候才能被创建。比如，类里有一个声明为引用的成员变量，当两个类的实例进行赋值拷贝的时候，问题就会出现，因为C++不允许引用改指向不同对象，所以引用的赋值拷贝是无法进行的，这时候编译器就会拒绝编译赋值的那一行的动作，对于const成员也是一样。还有，当某个base classes将copy assignment操作符声明为private，那其derived classed也无法生成一个copy assignment，因为编译器生成的操作符想可以处理base class成分，但它无权调用那个成员函数，所以编译器无能为力。<br/></p><blockquote><ul><li>编译器可以暗自为类创建默认构造函数、拷贝构造函数、拷贝赋值操作符,以及析构函数。<br/></li></ul></blockquote><br/><h2><b>Item 06: Explicitly disallow the use of compiler-generated functions you do not want</b></h2><blockquote>若不想使用编译器自动生成的函数，就该明确拒绝</blockquote><p>有时候，我们并不想让一个类有拷贝或者赋值的操作，但由于编译器会自动为你生成copy构造函数和copy assignment操作符，而且还都是public的，所以这时候，你就需要自己声明这两个东西并且把它们设为private，以阻止人们调用它们。</p><p>但尽管如此，member函数和friend函数还是可以调用private函数。一个聪明的做法是，不去定义它们。这样，当有人调用的时候，就会获得一个连接错误。</p><p>如果想把连接期错误移至编译期，也是可以的。做法就是，设计一个专门阻止copying动作的base class，将拷贝函数或操作符声明为private，然后继承它。这样的话，当编译器要生成拷贝构造函数和拷贝赋值操作符的时候，它会尝试调用其base class的对应兄弟，但这行不通，最后就会失败。</p><blockquote><ul><li>为驳回编译器自动(暗自)提供的机能,可以将相应的成员函数声明为private并且不予实现。使用像Uncopyable这样的base class也是一种做法。</li></ul></blockquote><br/><h2><b>Item 07: Declare destructors in polymorphic base classed</b></h2><blockquote>为多态基类声明virtual析构函数</blockquote><p>当你用基类指针new了一个派生类的实例，最后delete的时候，如果基类带着一个non-virtual析构函数，那么其结果是未定义的——往往是对象派生类的成分没被销毁。所以，我们需要给基类一个virtual析构函数。</p><p>但如果一个类不是基类的话，我们无端地给它一个virtual析构函数，这样会增加对象的体积，因为它会有一个虚表。就算是一个基类，如果它没有多态性的话，给它virtual析构函数也是不合适的。</p><p>因此，我们应该只给多态基类声明virtual析构函数。</p><blockquote><ul><li>polymorphic（带多态性质的）base class应该声明一个virtual析构函数，如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。<br/></li><li>Classes的设计目如果不是作为base classes使用，或不是为了具备多态性（polymorphically），就不该声明virtual析构函数。<br/></li></ul></blockquote><br/><h2><b>Item 08: Prevent exceptions from leaving destructors</b></h2><blockquote>别让异常逃离析构函数</blockquote><p>如果析构函数抛出异常，程序有可能过早结束或出现未定义行为</p><p>所以当析构函数中会出现异常的时候，可以：</p><ol><li>出现异常就结束程序，通过调用abort阻止异常从析构函数传播出去（那会导致未定义行为），抢先制未定义行为于死地。</li><li> 吞下这个异常，让程序继续进行。</li></ol><br/><p>这两个办法都没有什么吸引力，因为它们只是异常出现后的补救措施。</p><p>所以，我们应该把会引起异常的操作从析构函数里移出来，让class提供一个普通函数来执行。</p><blockquote><ul><li>析构函数绝对不要吐出异常;如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序。 </li><li>如果客户需要对某个操作函数运作期间抛出的异常做出反应，那么class应该提供一个普通函数（而非在析构函数中）执行。</li></ul></blockquote>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": [
                {
                    "userName": "嘟嘟噜", 
                    "userLink": "https://www.zhihu.com/people/9f884e3836234f0263cff7d1634b32f5", 
                    "content": "老哥稳", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25380437", 
            "userName": "Parallelc", 
            "userLink": "https://www.zhihu.com/people/4a093efef217fa0544944d85d4fa4ca7", 
            "upvote": 5, 
            "title": "Effective C++ Note 01", 
            "content": "<p>有人说C++程序员可以分成两类，读过Effective C++和没读过的。</p><p>所以从今天开始，我打算成为前者。</p><p>虽然说Effective C++出版时间已经比较久远了，在这期间，C++11/14发布，对于书中提到的很多问题已经有了新的解决方法，而作者也出版了面向C++11/14的新特性的新书——Effective Modern C++。但Effective C++并没有被取代，它仍然是经典中的经典，值得一读。</p><p>今天读完了第一章，讲的是比较基础的内容，标题为Accustoming Yourself to C++，让自己习惯C++。它主要讲了以下4点:</p><h2><b>Item 01: View C++ as a federation of languages.</b></h2><blockquote>视C++为语言联邦</blockquote><p>总所周知，今天的C++是一个多范式的编程语言，它可以面向过程，面向对象，还可以写泛型，进行模板元编程。</p><p>所以，作者认为，我们理解C++的时候，不应该把它看成一个单一的语言，而应该看成“一个由相关语言组成的联邦”，也就是说，它是多个次语言(sublanguage)的集合，而这些次语言主要有4个：C，Object—Oriented C++， Template C++， STL。</p><p>作者说，在不同的次语言切换时，高效编程的守则有可能也会改变。比如对C-like类型而言pass-by-value比pass-by-reference高效，但对于Object-Oriented C++里用户自定义的类型而言，pass-by-reference-to-const则更好。</p><p>所以，作者最后给出了一个结论：</p><blockquote><ul><li>C++高效编程守则视情况而变化，取决于你使用C++的哪一部分。</li></ul></blockquote><br/><h2><b>Item 02: Prefer consts, enums, and inlines to #defines.</b></h2><blockquote>尽量以const，enmu，inline替换#define</blockquote><p>#define是C提供的三种预处理功能的其中一种，称为宏</p><p>如果你用#define定义一个“常量”的话，从本质上讲，它并不是一个变量，它只是在编译器编译之前进行了“代码替换”，所以如果将来你运用这个“常量”出现错误的话，那么报错信息不会告诉你替换之前的“常量名”哪哪哪错了，而是替换后的信息，所以会给查错带来麻烦。</p><p>因此，作者建议用const来定义常量。但常量指针和指针常量的定义的区别得特别注意。</p><p>还有一个问题是，如果是class专属常量的话该怎么定义，首先它必须是一个成员，其次为确保此常量至多只有一份实体，它还必须是static的。如果是int的话可以直接类内定义并初始化，但如果是其他类型的话就必须类内定义，然后类外初始化。</p><p>当然，除了可以用const定义class专属常量外，如果是整数的话还可以用enmu，而且用enmu更像#define。</p><p>宏除了可以用来搞一个“常量”以外，还可以搞一些类似函数的东西，但调用的时候会有很多问题，比如每个实参都得加小括号，这还好，但有时候还会发生一些不可思议的事情，详见书P16。</p><p>因此，作者建议用template inline来做这种事情，它有宏的效率，也有一般函数的所有可预料行为和类型安全性。</p><p>综上所述：</p><blockquote><ul><li>对于单纯常量，最好以const对象或enums替换#defines</li><li>对于形似函数的宏，最好改用inline函数替换#defines<br/></li></ul></blockquote><br/><h2><b>Item 03: Use const whenever possible</b></h2><blockquote>尽可能使用const</blockquote><p>如果函数返回的是一个自定义类型，如果不写const的话，这个临时对象是可以继续赋值的，但如果是内置类型的话，编译器则不允许这么做。这样子有什么不好的地方？一来，作者说，一个良好的自定义类型会避免无端地与内置类型不兼容，二来，如果你在比较的时候，一不小心把==号写成了=，可能会给你查错带来麻烦。所以，如果没有特殊需求的话，作者建议尽可能使用const。</p><p>然后作者提到了const成员函数，mutable以及一个函数的const版本和非const版本如何快速转换。</p><p>最后得出的3点：</p><blockquote><ul><li>将某些东西声明为const可以帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。<br/></li><li>编译器强制实施bitwise constness，但你编写程序时应该使用“概念上的常量性”(conceptual constness)。<br/></li><li>当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。</li></ul></blockquote><br/><h2><b>Item 04: Make sure that objects initialized before thet&#39;re used.</b></h2><blockquote>确定对象被使用前已先被初始化</blockquote><p>这个道理大家肯定都懂，但写代码的时候却不一定能符合要求，有可能你会忘记之前定义的东西是否初始化了。</p><p>所以，一个有效的做法就是，什么时候用什么时候定义，然后定义之后就立马初始化。</p><p>对于内置类型来说，就是定义的时候写=或者写输入，而对于自定义类型，就需要你提前定义好构造函数，确保每一个构造函数都将对象的每一个成员初始化</p><p>但需要注意的是，只有成员初值列才是真正的初始化，在构造函数内=，那其实是先把成员default初始化以后才进行的赋值，所以为了更高效，要尽量使用成员初值列，不管成员变量是内置类型还是自定义的，尤其是当成员变量是const或references的时候，但是初始化的时候一定要按定义顺序来。</p><p>注：事实上，在C++11中，还可以直接在类内定义的时候直接初始化变量。</p><p>最后作者还提到了一点，不同编译单元内定义之non-local static对象的初始化次序。</p><p>解释起来有点复杂，具体可以看书P30。作者给出的解决方法是用local static对象替换non-local static对象，其实就是一个reference-returning函数。</p><p>最后的结论：</p><blockquote><ul><li>为内置型对象进行手工初始化，因为C++不保证初始化它们。<br/></li><li>构造函数最好用成员初值列 ，而不要在构造函数中使用赋值操作。初值列列出的成员变量，应该按照其在类内的声明次序进行排序。<br/></li><li>为免除”跨编译单元之初始化次序“问题，请以local static对象替换 non-local static对象。</li></ul></blockquote>", 
            "topic": [
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/cppnote"
}
