{
    "title": "Spring", 
    "description": "spring的学习心得", 
    "followers": [
        "https://www.zhihu.com/people/shuxiongwang", 
        "https://www.zhihu.com/people/zhu-chu-xia-43", 
        "https://www.zhihu.com/people/jia-ming-94-88", 
        "https://www.zhihu.com/people/mr-liu-48-15", 
        "https://www.zhihu.com/people/cheng-zi-pi-zhu-33", 
        "https://www.zhihu.com/people/zhi-zhi-xiao-bai-71", 
        "https://www.zhihu.com/people/liu-zhi-yuan-99-38", 
        "https://www.zhihu.com/people/bigduu-62", 
        "https://www.zhihu.com/people/jiu-wang-50-73", 
        "https://www.zhihu.com/people/yongsir-47", 
        "https://www.zhihu.com/people/mei-mei-30-77-58", 
        "https://www.zhihu.com/people/jie-ge-42-20", 
        "https://www.zhihu.com/people/hu-lu-si-er-13", 
        "https://www.zhihu.com/people/xia-hou-nian-yi", 
        "https://www.zhihu.com/people/volving", 
        "https://www.zhihu.com/people/ye-lan-xing-xi", 
        "https://www.zhihu.com/people/li-ke-97", 
        "https://www.zhihu.com/people/mugeen", 
        "https://www.zhihu.com/people/xiang-chi-man-tou", 
        "https://www.zhihu.com/people/hulk-wang-hao", 
        "https://www.zhihu.com/people/mu-zi-81-94-94", 
        "https://www.zhihu.com/people/hu-dao-5", 
        "https://www.zhihu.com/people/xue-jiong-86", 
        "https://www.zhihu.com/people/xu-wei-jia-43", 
        "https://www.zhihu.com/people/wang-jian-wei-56-80", 
        "https://www.zhihu.com/people/wo-mei-26", 
        "https://www.zhihu.com/people/si-kong-bai-17", 
        "https://www.zhihu.com/people/huang-wen-hao-62", 
        "https://www.zhihu.com/people/thranduilzmj", 
        "https://www.zhihu.com/people/wang-xin-99-65-61", 
        "https://www.zhihu.com/people/yang-ya-qiang-56", 
        "https://www.zhihu.com/people/xiaoyanyu", 
        "https://www.zhihu.com/people/wangyi-21-84", 
        "https://www.zhihu.com/people/wu-jing-11-47", 
        "https://www.zhihu.com/people/wo-ai-wo-10", 
        "https://www.zhihu.com/people/lei-zi-hai", 
        "https://www.zhihu.com/people/zhangbiaoxiang", 
        "https://www.zhihu.com/people/summerhe-74", 
        "https://www.zhihu.com/people/xmsong", 
        "https://www.zhihu.com/people/yong-gang-94", 
        "https://www.zhihu.com/people/yuan-kun-82-85", 
        "https://www.zhihu.com/people/e-e-e-e-e-83-91", 
        "https://www.zhihu.com/people/zhu-xiao-si-wen-20", 
        "https://www.zhihu.com/people/xingdiedai", 
        "https://www.zhihu.com/people/sun-long-27-8", 
        "https://www.zhihu.com/people/fang-fang-68-7", 
        "https://www.zhihu.com/people/kaixin-60-46", 
        "https://www.zhihu.com/people/hu_yanluanyu", 
        "https://www.zhihu.com/people/zouyoukai", 
        "https://www.zhihu.com/people/liu-xiao-ming-67", 
        "https://www.zhihu.com/people/liu-xiang-yu-37", 
        "https://www.zhihu.com/people/sima-98", 
        "https://www.zhihu.com/people/xun-xun-10-51", 
        "https://www.zhihu.com/people/xiao-jian-jian-ya-52", 
        "https://www.zhihu.com/people/hou-ge-50-22", 
        "https://www.zhihu.com/people/wang-xiao-jun-1-89", 
        "https://www.zhihu.com/people/ye-lu-zi-31-50", 
        "https://www.zhihu.com/people/jiechuze", 
        "https://www.zhihu.com/people/you-lan-96-16", 
        "https://www.zhihu.com/people/akjarjash", 
        "https://www.zhihu.com/people/yang-xiao-84-91", 
        "https://www.zhihu.com/people/qiu-qi-23-20", 
        "https://www.zhihu.com/people/lol-lol-12", 
        "https://www.zhihu.com/people/1174839760", 
        "https://www.zhihu.com/people/archc", 
        "https://www.zhihu.com/people/wang-jin-15-81-57", 
        "https://www.zhihu.com/people/jiang-xing-tao-82", 
        "https://www.zhihu.com/people/a-gan-first", 
        "https://www.zhihu.com/people/jamie-52-11", 
        "https://www.zhihu.com/people/xiao-lan-15-72", 
        "https://www.zhihu.com/people/wu-xie-42-71", 
        "https://www.zhihu.com/people/flysky-78-87", 
        "https://www.zhihu.com/people/guo-jiang-hao-90", 
        "https://www.zhihu.com/people/knightng2005", 
        "https://www.zhihu.com/people/tang-ku-61-71", 
        "https://www.zhihu.com/people/tu-ting-45", 
        "https://www.zhihu.com/people/liu-gong-17-48", 
        "https://www.zhihu.com/people/zhong-jiao-tian-he-yang-kun-peng", 
        "https://www.zhihu.com/people/yue-zhao-yigu-zhou-68", 
        "https://www.zhihu.com/people/xiao-li-mao-5", 
        "https://www.zhihu.com/people/jue-fei-gao-leng-bi-75", 
        "https://www.zhihu.com/people/geekbits", 
        "https://www.zhihu.com/people/chu-yun-fei-42-59", 
        "https://www.zhihu.com/people/wei-du-da-ji-89-88", 
        "https://www.zhihu.com/people/tian-tang-wei-feng-76", 
        "https://www.zhihu.com/people/ragedylan", 
        "https://www.zhihu.com/people/da-lan-qiu-de-wu-kong", 
        "https://www.zhihu.com/people/18556953091", 
        "https://www.zhihu.com/people/bai-guo-dong-7", 
        "https://www.zhihu.com/people/lqy-5-41", 
        "https://www.zhihu.com/people/su-wei-1-76", 
        "https://www.zhihu.com/people/he-he-9-35-47", 
        "https://www.zhihu.com/people/xie-wan-qing-56", 
        "https://www.zhihu.com/people/xue-xue-27-10", 
        "https://www.zhihu.com/people/wang-ze-ying-13", 
        "https://www.zhihu.com/people/wang-tao-26-47-32", 
        "https://www.zhihu.com/people/blumenkranz-cyua", 
        "https://www.zhihu.com/people/fu-mo-lei-lin", 
        "https://www.zhihu.com/people/ppboy-72", 
        "https://www.zhihu.com/people/lin-xiao-sheng-40", 
        "https://www.zhihu.com/people/sun-xian-sheng-67-26", 
        "https://www.zhihu.com/people/yan-dong-23-49", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/he-ye-52", 
        "https://www.zhihu.com/people/da-bai-nuan", 
        "https://www.zhihu.com/people/ji-ye-50-29", 
        "https://www.zhihu.com/people/tong-37-42", 
        "https://www.zhihu.com/people/asaxing-55", 
        "https://www.zhihu.com/people/zhang-fang-tao-55", 
        "https://www.zhihu.com/people/NBASZCXLIEBE", 
        "https://www.zhihu.com/people/wang-jing-bo-57-61", 
        "https://www.zhihu.com/people/blues-68-71", 
        "https://www.zhihu.com/people/yi-xin-61-16", 
        "https://www.zhihu.com/people/liaobude.cc", 
        "https://www.zhihu.com/people/thinking-81", 
        "https://www.zhihu.com/people/peng-sun-74", 
        "https://www.zhihu.com/people/fashionfan-29", 
        "https://www.zhihu.com/people/er-ha-62-97", 
        "https://www.zhihu.com/people/wang-zi-fei-29-62", 
        "https://www.zhihu.com/people/zhang-ling-jiang-45", 
        "https://www.zhihu.com/people/dave-71-81", 
        "https://www.zhihu.com/people/sepiggy", 
        "https://www.zhihu.com/people/xiaxiangdian", 
        "https://www.zhihu.com/people/xiao-xiao-itniao", 
        "https://www.zhihu.com/people/an-ye-86-87", 
        "https://www.zhihu.com/people/yu-yin-61", 
        "https://www.zhihu.com/people/wang-chang-fu-32", 
        "https://www.zhihu.com/people/timelesslin", 
        "https://www.zhihu.com/people/zhang-zhi-xiong-76", 
        "https://www.zhihu.com/people/xiao-cai-niao-72-64", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/fa-li-yao-shui", 
        "https://www.zhihu.com/people/yunxi36", 
        "https://www.zhihu.com/people/hao-liao-shang-ba-wang-liao-teng-86", 
        "https://www.zhihu.com/people/kuangzhenxi", 
        "https://www.zhihu.com/people/li-zhan-xi", 
        "https://www.zhihu.com/people/lisaac", 
        "https://www.zhihu.com/people/macvis", 
        "https://www.zhihu.com/people/wang-run-fei-21", 
        "https://www.zhihu.com/people/xie-shang-ren", 
        "https://www.zhihu.com/people/xin-yin-yu-2", 
        "https://www.zhihu.com/people/xuemulong", 
        "https://www.zhihu.com/people/masai8877-13", 
        "https://www.zhihu.com/people/duan-dou-dou", 
        "https://www.zhihu.com/people/chsword-70", 
        "https://www.zhihu.com/people/ding-chang-xiang-46", 
        "https://www.zhihu.com/people/songyewang"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/75895047", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Springmvc源码解析", 
            "content": "<h2>初步分析，后续分析会更新在本人博客</h2><a href=\"https://link.zhihu.com/?target=https%3A//chenjiabing666.github.io/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0a53dc9ad4edbcbe0bc3020739867dcb_120x160.jpg\" data-image-width=\"200\" data-image-height=\"267\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">爱撒谎的男孩</a><h2><b>实现Controller的方式</b></h2><ul><li>如何实现一个controller，在源码中其实将controller叫做handler，我们通常知道实现controller的方式就是在类上添加一个<code>@Controller</code>和<code>@RequestMapping</code>注解，但是还有其他的方式定义一个controller</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>实现Controller</b></h2><ul><li>使用Bean中的id指定路径，必须是以<code>/</code>开头</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/user/test.do&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">UserController</span> <span class=\"kd\">implements</span> <span class=\"n\">Controller</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">ModelAndView</span> <span class=\"nf\">handleRequest</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;userController run.....&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>实现HttpRequestHandler</b></h2><ul><li>要求同上</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/prod/test.do&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProductController</span> <span class=\"kd\">implements</span> <span class=\"n\">HttpRequestHandler</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">handleRequest</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">httpServletRequest</span><span class=\"o\">,</span> <span class=\"n\">HttpServletResponse</span> <span class=\"n\">httpServletResponse</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">ServletException</span><span class=\"o\">,</span> <span class=\"n\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;prodController run .....&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>使用注解</b></h2><ul><li>经常使用，不再细说</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>@EnableWebMvc</b></h2><ul><li>该注解使Spring MVC 开启高级功能的入口，主要的作用就是加载了一个配置类<code>DelegatingWebMvcConfiguration</code>，其中创建了MVC默认的一些组件，比如<code>viewControllerHandlerMapping</code>、<code>RequestMappingHandlerMapping</code>、<code>BeanNameUrlHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code> 等等。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>DispatcherServlet</b></h2><ul><li>一个用于分发请求的Servlet，一个请求进来之后，Servlet会根据HandlerMapping将请求转发给对应的Handler（controller）处理。</li><li>其中重要的方法如下：<br/></li><ul><li><code>protected void doDispatch(HttpServletRequest request, HttpServletResponse response)</code>：执行分发的流程</li><li><code>protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</code>：渲染视图</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>HandlerMapping</b></h2><ul><li>顾名思义，就是保存Handler和Mapping之间的对应的关系，当然这种关系是多种的，有<b>uri to beanName</b>，有<b>uri to HandlerMethod</b>，不同的对应关系有不同的实现类处理，因此就衍生了后续的三种实现类。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>BeanNameUrlHandlerMapping</b></h2><ul><li>见名思意，这种肯定是uri to beanName的实现，用于存储实现了<code>Controller</code>和<code>HttpRequestHandler</code>接口的Handler的映射关系</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>SimpleUrlHandlerMapping</b></h2><ul><li>这种也是uri to Handler的实现，不过这种用于存储<code>View-controller</code>、<code>ResourceHttpRequestHandler</code>的映射关系</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>RequestMappingHandlerMapping</b></h2><ul><li>这种用于实现uri to HandlerMethod的关系，从名称可以看出，这种是用于使用<code>@RequestMapping</code>注解的</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>HandlerExecutionChain</b></h2><ul><li>处理器执行链，其中存储了Handler和拦截器</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>HandlerAdapter</b></h2><ul><li>简单的说就是执行的Handler的适配类，定义了三个方法，如下：<br/></li><ul><li><code>boolean supports(Object handler);</code>：判断当前的HandlerAdapter是否支持这个Handler</li><li><code>ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;</code>：执行Handler的方法</li><li><code>long getLastModified(HttpServletRequest request, Object handler);</code>：获取请求都中的<code>LastModified</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>该接口有多个实现类，如下：<br/></li><ul><li><code>RequestMappingHandlerAdapter</code>：匹配HandlerMethod</li><li><code>HttpRequestHandlerAdapter</code>：匹配实现了<code>HttpRequestHandler</code>接口的Handler</li><li><code>SimpleControllerHandlerAdapter</code>：匹配实现了Controller接口的Handler</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>执行流程分析</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ab7a01e54a330d61bc3422841f338243_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8451\" data-rawheight=\"6372\" class=\"origin_image zh-lightbox-thumb\" width=\"8451\" data-original=\"https://pic4.zhimg.com/v2-ab7a01e54a330d61bc3422841f338243_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;8451&#39; height=&#39;6372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8451\" data-rawheight=\"6372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"8451\" data-original=\"https://pic4.zhimg.com/v2-ab7a01e54a330d61bc3422841f338243_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ab7a01e54a330d61bc3422841f338243_b.jpg\"/></figure><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75894423", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Springmvc注解版开发", 
            "content": "<p></p><h2><b>搭建原理</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d566e8e6a0059ab1eec4838ed6cdcc60_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"582\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb\" width=\"582\" data-original=\"https://pic1.zhimg.com/v2-d566e8e6a0059ab1eec4838ed6cdcc60_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;582&#39; height=&#39;536&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"582\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"582\" data-original=\"https://pic1.zhimg.com/v2-d566e8e6a0059ab1eec4838ed6cdcc60_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d566e8e6a0059ab1eec4838ed6cdcc60_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>springMVC版本</b></h2><ul><li>此次使用的版本是Spring 5.1.8</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置内嵌tomcat</b></h2><ul><li>为了简化开发，使用tomcat插件实现web项目的运行，只需要在pom.xml中配置一个插件即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;plugins&gt;</span>\n        <span class=\"nt\">&lt;plugin&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class=\"nt\">&lt;/groupId&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n          <span class=\"nt\">&lt;version&gt;</span>2.1<span class=\"nt\">&lt;/version&gt;</span>\n            <span class=\"nt\">&lt;configuration&gt;</span>\n                <span class=\"nt\">&lt;port&gt;</span>8080<span class=\"nt\">&lt;/port&gt;</span>\n                <span class=\"nt\">&lt;path&gt;</span>/<span class=\"nt\">&lt;/path&gt;</span>\n                <span class=\"nt\">&lt;uriEncoding&gt;</span>UTF-8<span class=\"nt\">&lt;/uriEncoding&gt;</span>\n            <span class=\"nt\">&lt;/configuration&gt;</span>\n        <span class=\"nt\">&lt;/plugin&gt;</span>\n<span class=\"nt\">&lt;/plugins&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>之后在IDEA右侧的maven处可以看见tomcat7这个插件了，点击run即可运行</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置DispatcherServlet初始化器</b></h2><ul><li>配置的方式有多种，但是根据Spring文档推荐的方式如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">cn.tedu.demo.config.AppConfig</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cn.tedu.demo.config.WebMvcConfig</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 配置DispatcherServlet初始化器，在容器启动的时候会加载初始化\n</span><span class=\"cm\"> * 入口就是/org/springframework/spring-web/5.1.8.RELEASE/spring-web-5.1.8.RELEASE.jar!/META-INF/services/javax.servlet.ServletContainerInitializer\n</span><span class=\"cm\"> * web容器在启动的时候会加载META-INF/service下的文件\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">StrartWebApplicationInitializer</span> <span class=\"kd\">extends</span> <span class=\"n\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"o\">{</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 配置主配置类，主配置类的作用就是配置业务所需要的各种Bean，比如dao，service\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;[]</span> <span class=\"n\">getRootConfigClasses</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Class</span><span class=\"o\">[]{</span><span class=\"n\">AppConfig</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 配置MVC所需的配置类，该配置类的作用就是扫描controller，配置mvc的各种组件，比如视图解析器，拦截器等\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;[]</span> <span class=\"n\">getServletConfigClasses</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Class</span><span class=\"o\">[]{</span><span class=\"n\">WebMvcConfig</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 配置servletMapping，相当于在DispatcherServlet中配置的url\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"nf\">getServletMappings</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]{</span><span class=\"s\">&#34;/&#34;</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>主配置文件</b></h2><ul><li>主配置文件主要的作用就是配置业务需求的Bean，比如dao，service层的</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.ComponentScan</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.FilterType</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.stereotype.Controller</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 业务逻辑的配置类，扫描所有的业务Bean，比如dao，service，排除所有的controller\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Configuration</span>\n<span class=\"nd\">@ComponentScan</span><span class=\"o\">(</span><span class=\"n\">basePackages</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">&#34;cn.tedu.demo&#34;</span><span class=\"o\">},</span><span class=\"n\">excludeFilters</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"nd\">@ComponentScan.Filter</span><span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">FilterType</span><span class=\"o\">.</span><span class=\"na\">ANNOTATION</span><span class=\"o\">,</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">Controller</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">})})</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AppConfig</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>MVC配置类</b></h2><ul><li>MVC配置类主要的作用就是扫描Controller，配置各种组件，比如视图解析器，拦截器等等</li><li>重要的两点如下：<br/></li><ul><li>使用<code>@EnableWebMvc</code>注解开启MVC功能，相当于xml文件中的<code>&lt;mvc:annotation-driven/&gt;</code></li><li>配置类需要实现<code>WebMvcConfigurer</code>，该接口下有各种方法，开发者可以实现其中的方法完成相关组件的生成</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">cn.tedu.demo.interceptor.CustomInterceptor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.ComponentScan</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.FilterType</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.stereotype.Controller</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.web.servlet.config.annotation.*</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * MVC的配置类，扫描所有的controller，排除所有的业务类\n</span><span class=\"cm\"> * @EnableWebMvc 注解开启mvc功能\n</span><span class=\"cm\"> * @ComponentScan 注解中的属性useDefaultFilters（默认是true，扫描全部的Bean），这里我们定义了只扫描controller，因此要设置该属性为false，否则不起作用，排除Bean则不需要\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@EnableWebMvc</span>\n<span class=\"nd\">@Configuration</span>\n<span class=\"nd\">@ComponentScan</span><span class=\"o\">(</span><span class=\"n\">basePackages</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">&#34;cn.tedu.demo&#34;</span><span class=\"o\">},</span><span class=\"n\">includeFilters</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"nd\">@ComponentScan.Filter</span><span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">FilterType</span><span class=\"o\">.</span><span class=\"na\">ANNOTATION</span><span class=\"o\">,</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">Controller</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">})},</span><span class=\"n\">useDefaultFilters</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">WebMvcConfig</span> <span class=\"kd\">implements</span> <span class=\"n\">WebMvcConfigurer</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置拦截器</b></h2><ul><li>自定义一个拦截器，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 自定义一个拦截器，实现HandlerInterceptor\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomInterceptor</span> <span class=\"kd\">implements</span> <span class=\"n\">HandlerInterceptor</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 在拦截器方法之前执行\n</span><span class=\"cm\">     * @param request request\n</span><span class=\"cm\">     * @param response response\n</span><span class=\"cm\">     * @param handler 拦截的handler\n</span><span class=\"cm\">     * @return 如果返回false，后续的拦截器和拦截的handler不执行\n</span><span class=\"cm\">     * @throws Exception\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">preHandle</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">,</span> <span class=\"n\">Object</span> <span class=\"n\">handler</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;在之前执行&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>在配置类设置自定义的拦截器，使得起作用</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addInterceptors</span><span class=\"o\">(</span><span class=\"n\">InterceptorRegistry</span> <span class=\"n\">registry</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//创建\n</span><span class=\"c1\"></span>        <span class=\"n\">CustomInterceptor</span> <span class=\"n\">customInterceptor</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CustomInterceptor</span><span class=\"o\">();</span>\n        <span class=\"c1\">//添加自定义的拦截器\n</span><span class=\"c1\"></span>        <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">addInterceptor</span><span class=\"o\">(</span><span class=\"n\">customInterceptor</span><span class=\"o\">).</span><span class=\"na\">addPathPatterns</span><span class=\"o\">(</span><span class=\"s\">&#34;/**&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>自定义的拦截器的真实实现类其实是<code>MappedInterceptor</code>，在源码中获取处理器执行链的时候会将其添加到执行链中。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置过滤器</b></h2><ul><li>过滤器不属于SpringMVC，而是属于Servlet中的组件，因此配置过滤器使用的并不是MVC的配置，但是在Servlet3.0中也是提供了注解版的Servlet和Filter的生成方式，我们使用注解生成一个Filter，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 自定义过滤器\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@WebFilter</span><span class=\"o\">(</span><span class=\"n\">filterName</span> <span class=\"o\">=</span> <span class=\"s\">&#34;customFilter&#34;</span><span class=\"o\">,</span><span class=\"n\">urlPatterns</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/*&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomFilter</span> <span class=\"kd\">implements</span> <span class=\"n\">Filter</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">(</span><span class=\"n\">FilterConfig</span> <span class=\"n\">filterConfig</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">ServletException</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;过滤器初始化&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">doFilter</span><span class=\"o\">(</span><span class=\"n\">ServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">ServletResponse</span> <span class=\"n\">response</span><span class=\"o\">,</span> <span class=\"n\">FilterChain</span> <span class=\"n\">chain</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">IOException</span><span class=\"o\">,</span> <span class=\"n\">ServletException</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;过滤器执行&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"na\">doFilter</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">,</span><span class=\"n\">response</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">destroy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;过滤器销毁&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"err\">​</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置视图解析器</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"> <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">configureViewResolvers</span><span class=\"o\">(</span><span class=\"n\">ViewResolverRegistry</span> <span class=\"n\">registry</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">jsp</span><span class=\"o\">(</span><span class=\"s\">&#34;/WEB_INF/&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;.jsp&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置ViewController</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addViewControllers</span><span class=\"o\">(</span><span class=\"n\">ViewControllerRegistry</span> <span class=\"n\">registry</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//定义一个controller，访问路径是/index.do，跳转的视图是index.jsp\n</span><span class=\"c1\"></span>        <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">addViewController</span><span class=\"o\">(</span><span class=\"s\">&#34;/index.do&#34;</span><span class=\"o\">).</span><span class=\"na\">setViewName</span><span class=\"o\">(</span><span class=\"s\">&#34;index&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置MessageConverters</b></h2><ul><li>消息转换器用于对Request和Response的消息进行处理，比如将Response中的消息转换为指定JSON字符串的形式</li><li>默认的消息转换器对于日期的类型的转换是时间戳，即是返回的JSON字符串的日期类型是时间戳，接收的日期类型参数也只能是时间戳</li><li>如何配置消息转换器，只需要重写springmvc配置类中的方法即可。</li><li>我们使用的是<code>MappingJackson2HttpMessageConverter</code>这类转换器，但是其中依赖的是ObjectMapper，因此我们比如引入依赖，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\">   <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>jackson-databind<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>2.9.9<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>在上述的MVC配置类中重写如下方法：<br/></li><ul><li>设置日期的格式化格式是yyyy-MM-dd，此时返回和接收的格式就是<code>yyyy-MM-dd</code></li><li>在配置类中配置的消息转换器属于<b>全局配置</b>，所有的消息都会遵循这种配置。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">configureMessageConverters</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">HttpMessageConverter</span><span class=\"o\">&lt;?&gt;&gt;</span> <span class=\"n\">converters</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Jackson2ObjectMapperBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Jackson2ObjectMapperBuilder</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">indentOutput</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span>\n                <span class=\"c1\">//指定格式化的日期，这里只是举例，不建议在此处全局配置\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">dateFormat</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">SimpleDateFormat</span><span class=\"o\">(</span><span class=\"s\">&#34;yyyy-MM-dd&#34;</span><span class=\"o\">))</span>\n                <span class=\"c1\">//设置时区，默认是UTC，需要修改成北京时间\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">timeZone</span><span class=\"o\">(</span><span class=\"s\">&#34;GMT+8&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">converters</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">MappingJackson2HttpMessageConverter</span><span class=\"o\">(</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">()));</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>注解版</b></h2><ul><li>在实际的项目中这种方式太鸡肋，实际的需求有实际的变化，因此我们最好能够寻找一种灵活的处理方式，类似注解的方式。</li><li>在<code>jackson-databind</code>中提供了许多的注解，可以供我们使用，<b>可以覆盖全局配置，和全局配置形成一种互补的作用</b>。</li><li><code>@JsonFormat</code>：日期格式化注解，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//timeZone如果在全局配置过，可以不写 \n</span><span class=\"c1\"></span><span class=\"nd\">@JsonFormat</span><span class=\"o\">(</span><span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"s\">&#34;yyyy-MM-dd HH:mm:ss&#34;</span><span class=\"o\">,</span><span class=\"n\">timezone</span> <span class=\"o\">=</span> <span class=\"s\">&#34;GMT+8&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Date</span> <span class=\"n\">birthDay</span><span class=\"o\">;</span></code></pre></div><ul><li><code>@JsonIgnore</code>：在返回的JSON字符串中不显示</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@JsonIgnore</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>其他的注解请参考<a href=\"https://link.zhihu.com/?target=https%3A//blog.51cto.com/7308310/2310930%3Fsource%3Ddra\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.51cto.com/7308310/</span><span class=\"invisible\">2310930?source=dra</span><span class=\"ellipsis\"></span></a></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>异常处理器</b></h2><ul><li>springMvc处理异常有三种方式，分别为：<br/></li><ul><li><code>ExceptionHandlerExceptionResolver</code>：通过调用或 类中的<code>@ExceptionHandler</code>方法来解决异常，可以结合<code>@ControllerAdvice</code></li><li><code>DefaultHandlerExceptionResolver</code>：对一些特殊的异常进行处理</li><li><code>ResponseStatusExceptionResolver</code>：使用<code>@ResponseStatus</code>解析异常，并根据注解中的值将它们映射到HTTP状态代码 </li><li><code>SimpleMappingExceptionResolver</code>：异常和视图的映射，可以自定义指定的异常对应的视图</li></ul><li><b>原理：主要的解析逻辑都是在<code>doResolveException</code>方法中完成的。</b></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>异常处理器执行的顺序</b></h2><ul><li>异常处理器的执行是有顺序的，优先级高的执行完之后，如果有对应的处理，那么后续的就不再执行。</li><li>异常处理器的执行顺序如下：</li><ul><li><code>ExceptionHandlerExceptionResolver</code></li><li><code>DefaultHandlerExceptionResolver</code></li><li><code>ResponseStatusExceptionResolver</code></li><li><code>SimpleMappingExceptionResolver</code> </li></ul><li>四种异常处理器的顺序执行可以形成一种互补的配置。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>SimpleMappingExceptionResolver</b></h2><ul><li>在配置中配置即可</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">SimpleMappingExceptionResolver</span> <span class=\"nf\">simpleMappingExceptionResolver</span><span class=\"o\">(){</span>\n        <span class=\"n\">SimpleMappingExceptionResolver</span> <span class=\"n\">resolver</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SimpleMappingExceptionResolver</span><span class=\"o\">();</span>\n        <span class=\"c1\">//设置默认的视图，如果有的异常没有指定处理，那么使用默认的视图\n</span><span class=\"c1\"></span>        <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"na\">setDefaultErrorView</span><span class=\"o\">(</span><span class=\"s\">&#34;index&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//设置排除的异常\n</span><span class=\"c1\">//        resolver.setExcludedExceptions();\n</span><span class=\"c1\"></span>        <span class=\"c1\">//指定异常视图映射\n</span><span class=\"c1\"></span>        <span class=\"n\">Properties</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Properties</span><span class=\"o\">();</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">RuntimeException</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">(),</span><span class=\"s\">&#34;error&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"na\">setExceptionMappings</span><span class=\"o\">(</span><span class=\"n\">properties</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">resolver</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>DefaultHandlerExceptionResolver</b></h2><ul><li>此类异常解析器只能针对一些特殊的异常进行处理，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">ExceptionHTTP Status CodeHttpRequestMethodNotSupportedException405 (SC_METHOD_NOT_ALLOWED)HttpMediaTypeNotSupportedException415 (SC_UNSUPPORTED_MEDIA_TYPE)HttpMediaTypeNotAcceptableException406 (SC_NOT_ACCEPTABLE)MissingPathVariableException500 (SC_INTERNAL_SERVER_ERROR)MissingServletRequestParameterException400 (SC_BAD_REQUEST)ServletRequestBindingException400 (SC_BAD_REQUEST)ConversionNotSupportedException500 (SC_INTERNAL_SERVER_ERROR)TypeMismatchException400 (SC_BAD_REQUEST)HttpMessageNotReadableException400 (SC_BAD_REQUEST)HttpMessageNotWritableException500 (SC_INTERNAL_SERVER_ERROR)MethodArgumentNotValidException400 (SC_BAD_REQUEST)MissingServletRequestPartException400 (SC_BAD_REQUEST)BindException400 (SC_BAD_REQUEST)NoHandlerFoundException404 (SC_NOT_FOUND)AsyncRequestTimeoutException503 (SC_SERVICE_UNAVAILABLE)</code></pre></div><ul><li>不需要声明，默认存在</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>ResponseStatusExceptionResolver</b></h2><ul><li>在自定义的异常类上标注<code>@ResponseStatus</code>注解，当抛出此种异常的时候，将会响应定义的状态码和提示语</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@ResponseStatus</span><span class=\"o\">(</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">FORBIDDEN</span><span class=\"o\">,</span><span class=\"n\">reason</span> <span class=\"o\">=</span> <span class=\"s\">&#34;没有权限&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomException</span> <span class=\"kd\">extends</span>  <span class=\"n\">RuntimeException</span> <span class=\"o\">{</span>\n<span class=\"err\">​</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>ExceptionHandlerExceptionResolver</b></h2><ul><li>集合<code>@ControllerAdvice</code>和<code>@RestControllerAdvice</code>使用</li><li>方法中能够自动赋值的参数和返回值的类型都在Spring文档上有详细的记载，参考<code>https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/web.html#mvc-ann-exceptionhandler-args</code></li><li>详细的使用如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@ControllerAdvice</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ExceptionController</span> <span class=\"o\">{</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     *处理FileNotFoundException，返回JSOn数据\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@ExceptionHandler</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ArrayIndexOutOfBoundsException</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handleFileNotFoundException</span><span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"o\">,</span> <span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">HandlerMethod</span> <span class=\"n\">method</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getRequestURI</span><span class=\"o\">());</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;index&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"nd\">@ExceptionHandler</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Exception</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handleException</span><span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"o\">,</span> <span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">HandlerMethod</span> <span class=\"n\">method</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getRequestURI</span><span class=\"o\">());</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;index&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置跨域请求</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>使用注解</b></h2><ul><li>使用注解<code>@CrossOrigin</code>，可以标注在Controller上，也可以标注在方法上，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@CrossOrigin</span>\n    <span class=\"nd\">@PostMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/getObj&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">getObject</span><span class=\"o\">(</span><span class=\"nd\">@RequestBody</span> <span class=\"n\">AdminReq</span> <span class=\"n\">req</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">req</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Admin</span><span class=\"o\">(</span><span class=\"s\">&#34;陈加兵&#34;</span><span class=\"o\">,</span><span class=\"n\">22</span><span class=\"o\">,</span><span class=\"k\">new</span> <span class=\"n\">Date</span><span class=\"o\">(),</span><span class=\"k\">new</span> <span class=\"n\">Date</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>该注解中可以配置各种属性，这里不再细讲，在下面的全局配置中会涉及到。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>全局配置</b></h2><ul><li>全局配置就是在MVC的配置文件中重写方法即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addCorsMappings</span><span class=\"o\">(</span><span class=\"n\">CorsRegistry</span> <span class=\"n\">registry</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">addMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/api/**&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//允许的源\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">allowedOrigins</span><span class=\"o\">(</span><span class=\"s\">&#34;https://domain2.com&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//允许请求跨域的请求类型\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">allowedMethods</span><span class=\"o\">(</span><span class=\"s\">&#34;PUT&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;DELETE&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//允许的请求头\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">allowedHeaders</span><span class=\"o\">(</span><span class=\"s\">&#34;header1&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;header2&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;header3&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//暴露的请求头\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">exposedHeaders</span><span class=\"o\">(</span><span class=\"s\">&#34;header1&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;header2&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//允许携带cookie等用户信息，这样才能实现登录\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">allowCredentials</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">).</span><span class=\"na\">maxAge</span><span class=\"o\">(</span><span class=\"n\">3600</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>配置静态资源解析</b></h2><ul><li>springmvc中的DispatcherServlet如果设置了拦截的请求是<code>/</code>，那么也会拦截静态资源，但是我们可以在配置文件中配置，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addResourceHandlers</span><span class=\"o\">(</span><span class=\"n\">ResourceHandlerRegistry</span> <span class=\"n\">registry</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//拦截的请求\n</span><span class=\"c1\"></span>        <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">addResourceHandler</span><span class=\"o\">(</span><span class=\"s\">&#34;/resources/**&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//资源的位置\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">addResourceLocations</span><span class=\"o\">(</span><span class=\"s\">&#34;/public&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;classpath:/static/&#34;</span><span class=\"o\">)</span>\n                <span class=\"c1\">//缓存的时间，单位秒\n</span><span class=\"c1\"></span>                <span class=\"o\">.</span><span class=\"na\">setCachePeriod</span><span class=\"o\">(</span><span class=\"n\">31556926</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>该配置会在ioc中注册一个<code>ResourceHttpRequestHandler</code>，封装在<b>SimpleUrlHandlermapping</b>中。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>高级配置</b></h2><ul><li><code>@EnableMvc</code>注解其实就是注入了一个配置类<code>DelegatingWebMvcConfiguration</code>，那么我们可以将自定义的配置类实现该类即可完成MVC的高级功能，此时就不需要使用该注解了，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Configuration</span>\n<span class=\"nd\">@ComponentScan</span><span class=\"o\">(</span><span class=\"n\">basePackages</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">&#34;cn.tedu.demo&#34;</span><span class=\"o\">},</span><span class=\"n\">includeFilters</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"nd\">@ComponentScan.Filter</span><span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">FilterType</span><span class=\"o\">.</span><span class=\"na\">ANNOTATION</span><span class=\"o\">,</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">Controller</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">Component</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">})},</span><span class=\"n\">useDefaultFilters</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AdvanceConfig</span> <span class=\"kd\">extends</span> <span class=\"n\">DelegatingWebMvcConfiguration</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span></code></pre></div><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74741325", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "事务监听器", 
            "content": "<h2><b>事务监听器（@TransactionalEventListener）</b></h2><ul><li>如果A方法需要B方法执行完成之后的数据，但是A和B又不在同一个事务中，B中的事务没有提交，A就获取不到数据，此时我们需要等待B提交事务之后执行的A方法才能成功获取数据。</li><li>@TransactionalEventListener默认监听的事件默认是在事务提交之后，即是在一个事务中发布了一个事件，只有等事务成功提交之后才能监听到。</li><li>@TransactionalEventListener的重要属性如下：<br/></li><ul><li><code>phase</code>：指定事务的处理阶段，在<code>TransactionPhase</code>中定义了事务的四个阶段，默认的是事务成功提交之后<br/></li><ul><li><code>BEFORE_COMMIT</code>：事务提交之前，事务执行有异常失效</li><li><code>AFTER_COMMIT</code>：事务成功提交之后，事务执行有异常失效</li><li><code>AFTER_ROLLBACK</code>：事务回滚之后</li><li><code>AFTER_COMPLETION</code>：事务完成之后，无论是否有异常都会执行</li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><code>fallbackExecution</code>：没有事务的时候是否应该执行，默认为false，即是必须是有事务的时候才会执行</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>实例</b></h2><ul><li>自定义一个事件</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Data</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">UserServiceEvent</span> <span class=\"kd\">extends</span> <span class=\"n\">ApplicationEvent</span> <span class=\"o\">{</span>\n    <span class=\"c1\">//需要传递的数据\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"n\">Object</span> <span class=\"n\">msg</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param source 源对象\n</span><span class=\"cm\">     * @param msg 数据\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">UserServiceEvent</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">source</span><span class=\"o\">,</span><span class=\"n\">Object</span> <span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">msg</span><span class=\"o\">=</span><span class=\"n\">msg</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>创建事件监听器</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomListener</span> <span class=\"o\">{</span>\n    <span class=\"c1\">//使用默认处理阶段，在事务成功提交之后便能监听到\n</span><span class=\"c1\"></span>    <span class=\"nd\">@TransactionalEventListener</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">userServiceListener</span><span class=\"o\">(</span><span class=\"n\">UserServiceEvent</span> <span class=\"n\">event</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;事务的事件监听器执行了&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>在事务中发布事件</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@Transactional</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">deleteUserById</span><span class=\"o\">(</span><span class=\"n\">Integer</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//在这之前可以执行数据库操作\n</span><span class=\"c1\"></span>        <span class=\"c1\">//发布事件\n</span><span class=\"c1\"></span>        <span class=\"n\">UserServiceEvent</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">UserServiceEvent</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span><span class=\"n\">id</span><span class=\"o\">);</span>\n        <span class=\"n\">applicationContext</span><span class=\"o\">.</span><span class=\"na\">publishEvent</span><span class=\"o\">(</span><span class=\"n\">event</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>源码解析</b></h2><ul><li>针对<code>@TransactionalEventListener</code>的各个阶段，其实就是在事务的各个阶段之前之后执行相关的操作，相关的执行方法都在<code>TransactionSynchronizationUtils</code>中，这里就不再细说了。</li></ul>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74598851", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "切面执行顺序", 
            "content": "<h2><b>切面执行顺序（Order）</b></h2><ul><li>如果有多个切面匹配了同一个目标方法，那么切面如何执行，我们可以使用<code>@Order</code>指定的切入点的执行顺序，注意：<b>@Order中的值越小优先级越高</b></li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Aspect</span>\n<span class=\"nd\">@Component</span>\n<span class=\"nd\">@Order</span><span class=\"o\">(</span><span class=\"n\">Ordered</span><span class=\"o\">.</span><span class=\"na\">LOWEST_PRECEDENCE</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LogAspect</span> <span class=\"o\">{</span>\n    \n <span class=\"nd\">@Aspect</span>\n<span class=\"nd\">@Component</span>\n<span class=\"nd\">@Order</span><span class=\"o\">(</span><span class=\"n\">Ordered</span><span class=\"o\">.</span><span class=\"na\">HIGHEST_PRECEDENCE</span><span class=\"o\">-</span><span class=\"n\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LogAspect2</span> <span class=\"o\">{</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>注意点</b></h2><ul><li>事务也是的一个切面，那么事务的优先级和自定义的切面优先级有什么关系呢？<br/></li><ul><li>如果自定义事务的优先级比事务的优先级高，那么在动态代理的时候，获取的拦截器链就在事务的拦截器（TransactionInterceptor）之前，此时切面执行的逻辑和目标方法就不在同一个事务中</li><li>默认的事务的优先级是最低的，因此切面使用默认的是能够保证在同一个事务中执行的。</li><li>事务的优先级可以在<code>@EnableTransactionManagement</code>这个注解中设置</li><li>如果切面指定了优先级，但是还要保证和目标方法在同一个事务中，那么必须调整事务的优先级比自定义切面的优先级高。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>如何知道事务的优先级？<br/></li><ul><li>在<code>ProxyTransactionManagementConfiguration</code>配置类中注入<code>BeanFactoryTransactionAttributeSourceAdvisor</code>会获取<code>EnableTransactionManagement</code>注解中的order值作为优先级</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Bean</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">TransactionManagementConfigUtils</span><span class=\"o\">.</span><span class=\"na\">TRANSACTION_ADVISOR_BEAN_NAME</span><span class=\"o\">)</span>\n    <span class=\"nd\">@Role</span><span class=\"o\">(</span><span class=\"n\">BeanDefinition</span><span class=\"o\">.</span><span class=\"na\">ROLE_INFRASTRUCTURE</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">BeanFactoryTransactionAttributeSourceAdvisor</span> <span class=\"nf\">transactionAdvisor</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">BeanFactoryTransactionAttributeSourceAdvisor</span> <span class=\"n\">advisor</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BeanFactoryTransactionAttributeSourceAdvisor</span><span class=\"o\">();</span>\n        <span class=\"n\">advisor</span><span class=\"o\">.</span><span class=\"na\">setTransactionAttributeSource</span><span class=\"o\">(</span><span class=\"n\">transactionAttributeSource</span><span class=\"o\">());</span>\n        <span class=\"n\">advisor</span><span class=\"o\">.</span><span class=\"na\">setAdvice</span><span class=\"o\">(</span><span class=\"n\">transactionInterceptor</span><span class=\"o\">());</span>\n        <span class=\"c1\">//如果注解中的属性不为空\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">enableTx</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//直接设置order的值\n</span><span class=\"c1\"></span>            <span class=\"n\">advisor</span><span class=\"o\">.</span><span class=\"na\">setOrder</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">enableTx</span><span class=\"o\">.&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span><span class=\"n\">getNumber</span><span class=\"o\">(</span><span class=\"s\">&#34;order&#34;</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">advisor</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>拦截器如果根据优先级排序？<br/></li><ul><li>在创建代理对象的时候，会获取适用于当前Bean的所有Advisor，之后会根据优先级进行排序</li><li>在JDK获取拦截器链的时候实际就是循环便利ProxyFactory中存储的Advisor，将其中的Advice转换为MethodInterceptor，因此这个拦截器也是按照Advisor的顺序。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#findEligibleAdvisors\n</span><span class=\"c1\">//获取适用于当前bean的所有Advisor\n</span><span class=\"c1\"></span><span class=\"kd\">protected</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Advisor</span><span class=\"o\">&gt;</span> <span class=\"nf\">findEligibleAdvisors</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">beanClass</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//获取候选Advisor\n</span><span class=\"c1\"></span>        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Advisor</span><span class=\"o\">&gt;</span> <span class=\"n\">candidateAdvisors</span> <span class=\"o\">=</span> <span class=\"n\">findCandidateAdvisors</span><span class=\"o\">();</span>\n        <span class=\"c1\">//获取能够适用于的当前Bean的advisor\n</span><span class=\"c1\"></span>        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Advisor</span><span class=\"o\">&gt;</span> <span class=\"n\">eligibleAdvisors</span> <span class=\"o\">=</span> <span class=\"n\">findAdvisorsThatCanApply</span><span class=\"o\">(</span><span class=\"n\">candidateAdvisors</span><span class=\"o\">,</span> <span class=\"n\">beanClass</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n        <span class=\"n\">extendAdvisors</span><span class=\"o\">(</span><span class=\"n\">eligibleAdvisors</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">eligibleAdvisors</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//对advisor排序\n</span><span class=\"c1\"></span>            <span class=\"n\">eligibleAdvisors</span> <span class=\"o\">=</span> <span class=\"n\">sortAdvisors</span><span class=\"o\">(</span><span class=\"n\">eligibleAdvisors</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">eligibleAdvisors</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n<span class=\"err\">​</span>\n<span class=\"c1\">//org.springframework.aop.framework.DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice\n</span><span class=\"c1\">//直接获取ProxyFactory中的Advisor，循环遍历将其中的advice转换为MethodInterceptor\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"nf\">getInterceptorsAndDynamicInterceptionAdvice</span><span class=\"o\">(</span>\n            <span class=\"n\">Advised</span> <span class=\"n\">config</span><span class=\"o\">,</span> <span class=\"n\">Method</span> <span class=\"n\">method</span><span class=\"o\">,</span> <span class=\"nd\">@Nullable</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">targetClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"err\">​</span>\n        <span class=\"c1\">// This is somewhat tricky... We have to process introductions first,\n</span><span class=\"c1\"></span>        <span class=\"c1\">// but we need to preserve order in the ultimate list.\n</span><span class=\"c1\"></span>        <span class=\"n\">AdvisorAdapterRegistry</span> <span class=\"n\">registry</span> <span class=\"o\">=</span> <span class=\"n\">GlobalAdvisorAdapterRegistry</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n        <span class=\"n\">Advisor</span><span class=\"o\">[]</span> <span class=\"n\">advisors</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">getAdvisors</span><span class=\"o\">();</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">interceptorList</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">advisors</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">actualClass</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">targetClass</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">targetClass</span> <span class=\"o\">:</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">getDeclaringClass</span><span class=\"o\">());</span>\n        <span class=\"n\">Boolean</span> <span class=\"n\">hasIntroductions</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Advisor</span> <span class=\"n\">advisor</span> <span class=\"o\">:</span> <span class=\"n\">advisors</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">advisor</span> <span class=\"k\">instanceof</span> <span class=\"n\">PointcutAdvisor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// Add it conditionally.\n</span><span class=\"c1\"></span>                <span class=\"n\">PointcutAdvisor</span> <span class=\"n\">pointcutAdvisor</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">PointcutAdvisor</span><span class=\"o\">)</span> <span class=\"n\">advisor</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">isPreFiltered</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">pointcutAdvisor</span><span class=\"o\">.</span><span class=\"na\">getPointcut</span><span class=\"o\">().</span><span class=\"na\">getClassFilter</span><span class=\"o\">().</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"n\">actualClass</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">MethodMatcher</span> <span class=\"n\">mm</span> <span class=\"o\">=</span> <span class=\"n\">pointcutAdvisor</span><span class=\"o\">.</span><span class=\"na\">getPointcut</span><span class=\"o\">().</span><span class=\"na\">getMethodMatcher</span><span class=\"o\">();</span>\n                    <span class=\"kt\">boolean</span> <span class=\"n\">match</span><span class=\"o\">;</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mm</span> <span class=\"k\">instanceof</span> <span class=\"n\">IntroductionAwareMethodMatcher</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasIntroductions</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">hasIntroductions</span> <span class=\"o\">=</span> <span class=\"n\">hasMatchingIntroductions</span><span class=\"o\">(</span><span class=\"n\">advisors</span><span class=\"o\">,</span> <span class=\"n\">actualClass</span><span class=\"o\">);</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"n\">IntroductionAwareMethodMatcher</span><span class=\"o\">)</span> <span class=\"n\">mm</span><span class=\"o\">).</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">,</span> <span class=\"n\">actualClass</span><span class=\"o\">,</span> <span class=\"n\">hasIntroductions</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">mm</span><span class=\"o\">.</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">,</span> <span class=\"n\">actualClass</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">match</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">MethodInterceptor</span><span class=\"o\">[]</span> <span class=\"n\">interceptors</span> <span class=\"o\">=</span> <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">getInterceptors</span><span class=\"o\">(</span><span class=\"n\">advisor</span><span class=\"o\">);</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mm</span><span class=\"o\">.</span><span class=\"na\">isRuntime</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                            <span class=\"c1\">// Creating a new object instance in the getInterceptors() method\n</span><span class=\"c1\"></span>                            <span class=\"c1\">// isn&#39;t a problem as we normally cache created chains.\n</span><span class=\"c1\"></span>                            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">MethodInterceptor</span> <span class=\"n\">interceptor</span> <span class=\"o\">:</span> <span class=\"n\">interceptors</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                                <span class=\"n\">interceptorList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">InterceptorAndDynamicMethodMatcher</span><span class=\"o\">(</span><span class=\"n\">interceptor</span><span class=\"o\">,</span> <span class=\"n\">mm</span><span class=\"o\">));</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"k\">else</span> <span class=\"o\">{</span>\n                            <span class=\"n\">interceptorList</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">interceptors</span><span class=\"o\">));</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">advisor</span> <span class=\"k\">instanceof</span> <span class=\"n\">IntroductionAdvisor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">IntroductionAdvisor</span> <span class=\"n\">ia</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">IntroductionAdvisor</span><span class=\"o\">)</span> <span class=\"n\">advisor</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">isPreFiltered</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">ia</span><span class=\"o\">.</span><span class=\"na\">getClassFilter</span><span class=\"o\">().</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"n\">actualClass</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">Interceptor</span><span class=\"o\">[]</span> <span class=\"n\">interceptors</span> <span class=\"o\">=</span> <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">getInterceptors</span><span class=\"o\">(</span><span class=\"n\">advisor</span><span class=\"o\">);</span>\n                    <span class=\"n\">interceptorList</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">interceptors</span><span class=\"o\">));</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">Interceptor</span><span class=\"o\">[]</span> <span class=\"n\">interceptors</span> <span class=\"o\">=</span> <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"na\">getInterceptors</span><span class=\"o\">(</span><span class=\"n\">advisor</span><span class=\"o\">);</span>\n                <span class=\"n\">interceptorList</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">interceptors</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n        <span class=\"k\">return</span> <span class=\"n\">interceptorList</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span></code></pre></div><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74472983", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Spring事务创建与执行", 
            "content": "<p>在这里仅仅分享两张流程图，详细内容请移步个人博客</p><a href=\"https://link.zhihu.com/?target=https%3A//chenjiabing666.github.io/2019/07/07/Spring%25E4%25BA%258B%25E5%258A%25A1%25E6%25BA%2590%25E7%25A0%2581%25E8%25A7%25A3%25E6%259E%2590/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-84b36250cbdc1f92687bddd403882691_180x120.jpg\" data-image-width=\"1268\" data-image-height=\"507\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Spring事务源码解析</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b30948c56c14d937264b8a8737336329_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"2827\" class=\"origin_image zh-lightbox-thumb\" width=\"4096\" data-original=\"https://pic2.zhimg.com/v2-b30948c56c14d937264b8a8737336329_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4096&#39; height=&#39;2827&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"2827\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4096\" data-original=\"https://pic2.zhimg.com/v2-b30948c56c14d937264b8a8737336329_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b30948c56c14d937264b8a8737336329_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d5c47b0bdc2e2419bbf8780d136ad483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4011\" data-rawheight=\"4096\" class=\"origin_image zh-lightbox-thumb\" width=\"4011\" data-original=\"https://pic4.zhimg.com/v2-d5c47b0bdc2e2419bbf8780d136ad483_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4011&#39; height=&#39;4096&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4011\" data-rawheight=\"4096\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4011\" data-original=\"https://pic4.zhimg.com/v2-d5c47b0bdc2e2419bbf8780d136ad483_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d5c47b0bdc2e2419bbf8780d136ad483_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/71145647", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "BeanFactoryPostProcessor", 
            "content": "<p>简介<br/></p><ul><li>Spring IoC容器允许BeanFactoryPostProcessor在容器实例化任何bean之前读取bean的定义(配置元数据)，并可以修改它。同时可以定义多个BeanFactoryPostProcessor，通过设置’order’属性来确定各个BeanFactoryPostProcessor执行顺序。</li></ul><h2>实例</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyBeanFactoryPostProcessor</span> <span class=\"kd\">implements</span> <span class=\"n\">BeanFactoryPostProcessor</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">postProcessBeanFactory</span><span class=\"o\">(</span><span class=\"n\">ConfigurableListableBeanFactory</span> <span class=\"n\">beanFactory</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;MyBeanFactoryPostProcessor开始执行&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">beanDefinitionNames</span> <span class=\"o\">=</span> <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBeanDefinitionNames</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">beanDefinitionNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">&#34;user&#34;</span><span class=\"o\">)){</span>\n                <span class=\"n\">BeanDefinition</span> <span class=\"n\">beanDefinition</span> <span class=\"o\">=</span> <span class=\"n\">beanFactory</span><span class=\"o\">.</span><span class=\"na\">getBeanDefinition</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n                <span class=\"n\">MutablePropertyValues</span> <span class=\"n\">propertyValues</span> <span class=\"o\">=</span> <span class=\"n\">beanDefinition</span><span class=\"o\">.</span><span class=\"na\">getPropertyValues</span><span class=\"o\">();</span>\n                <span class=\"n\">propertyValues</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;Jack&#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2>原理<br/></h2><ul><li>在刷新ioc容器的方法<code>org.springframework.context.support.AbstractApplicationContext.refresh</code>中执行，如下图：<br/></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-be885e683c466107e573f6503fb7a1a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1578\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb\" width=\"1578\" data-original=\"https://pic3.zhimg.com/v2-be885e683c466107e573f6503fb7a1a6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1578&#39; height=&#39;631&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1578\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1578\" data-original=\"https://pic3.zhimg.com/v2-be885e683c466107e573f6503fb7a1a6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-be885e683c466107e573f6503fb7a1a6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>BeanDefinitionRegistryPostProcessor<br/></p><ul><li>后续更新。。。。</li></ul><p>MergedBeanDefinitionPostProcessor<br/></p><ul><li>后续更新</li></ul><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70770635", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 1, 
            "title": "InstantiationAwareBeanPostProcessor源码解析", 
            "content": "<p>转载自个人博客<a href=\"https://link.zhihu.com/?target=https%3A//chenjiabing666.github.io/2019/06/25/InstantiationAwareBeanPostProcessor%25E6%25BA%2590%25E7%25A0%2581%25E8%25A7%25A3%25E6%259E%2590/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">chenjiabing666.github.io</span><span class=\"invisible\">/2019/06/25/InstantiationAwareBeanPostProcessor%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</span><span class=\"ellipsis\"></span></a></p><h2>简介</h2><ul><li>继承<code>BeanPostProcessor</code>接口，在此基础上又定义了三个方法，分别在Bean**实例化前后【不是初始化】**执行。</li><li>从上面的介绍可以看到，这个接口相对于BeanPostProcessor功能更加强大，一个接口承担了Bean的实例化前后、初始化前后责任。</li></ul><h2>Bean加载顺序【暂时这么理解，在后续文章Bean的生命周期中会详细讲述Bean的加载】</h2><ul><li>ioc容器创建加载Bean的执行顺序如下：</li><ul><li>InstantiationAwareBeanPostProcessor接口中的<code>postProcessBeforeInstantiation</code>，在实例化之前调用</li><li>Bean的实例化，调用构造方法</li><li>InstantiationAwareBeanPostProcessor接口中的<code>postProcessAfterInstantiation</code>，在实例化之后调用</li><li>InstantiationAwareBeanPostProcessor接口中的<code>postProcessPropertyValues</code><b>【当postProcessAfterInstantiation返回true才执行】</b></li><li>BeanPostProcessor接口中的<code>postProcessBeforeInitialization</code>，在初始化之前调用</li><li>InitializingBean中的afterProperties方法，执行初始化</li><li>BeanPostProcessor接口中的<code>postProcessAfterInitialization</code>，在实例化之后调用</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>InstantiationAwareBeanPostProcessor接口方法的执行顺序</h2><ul><li>正常的执行顺序如下：</li><ul><li>postProcessBeforeInstantiation</li><li>postProcessAfterInstantiation</li><li>postProcessProperties</li><li>postProcessBeforeInitialization</li><li>postProcessAfterInitialization</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>方法解析</h2><ul><li><code>Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)</code>：在实例化之前执行【构造方法之前执行】</li><ul><li>返回值：如果返回的不为<code>null</code>，那么后续的Bean的创建流程【实例化、初始化afterProperties】都不会执行，而是直接使用返回的快捷Bean，此时的正常执行顺序如下：</li><ul><li>InstantiationAwareBeanPostProcessor接口中的<code>postProcessBeforeInstantiation</code>，在实例化之前调用</li><li>BeanPostProcessor接口中的<code>postProcessAfterInitialization</code>，在实例化之后调用</li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">* org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation \n</span><span class=\"cm\">* 作用：在实例化之前解析是否有快捷创建的Bean，既是通过postProcessBeforeInstantiation返回的Bean\n</span><span class=\"cm\">* 内部调用两个重要的方法：\n</span><span class=\"cm\">*   1、applyBeanPostProcessorsBeforeInstantiation：内部遍历调用postProcessBeforeInstantiation方法【在实例化之前调用】\n</span><span class=\"cm\">*   2、applyBeanPostProcessorsAfterInitialization：如果postProcessBeforeInstantiation方法返回了快捷的Bean，内部遍历调用postProcessBeforeInstantiation方法【在初始化之后调用】\n</span><span class=\"cm\">*/</span>\n<span class=\"kd\">protected</span> <span class=\"n\">Object</span> <span class=\"nf\">resolveBeforeInstantiation</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">Object</span> <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">Boolean</span><span class=\"o\">.</span><span class=\"na\">FALSE</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">beforeInstantiationResolved</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">// Make sure bean class is actually resolved at this point.\n</span><span class=\"c1\"></span>\t\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSynthetic</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">hasInstantiationAwareBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">targetType</span> <span class=\"o\">=</span> <span class=\"n\">determineTargetType</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">);</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">targetType</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t    <span class=\"c1\">//调用方法，内部遍历调用postProcessBeforeInstantiation方法【在实例化之前调用】\n</span><span class=\"c1\"></span>\t\t\t\t\t<span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">applyBeanPostProcessorsBeforeInstantiation</span><span class=\"o\">(</span><span class=\"n\">targetType</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"c1\">//如果返回了快捷的Bean\n</span><span class=\"c1\"></span>\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t    <span class=\"c1\">//如果postProcessBeforeInstantiation方法返回了快捷的Bean，内部遍历调用postProcessBeforeInstantiation方法【在初始化之后调用】\n</span><span class=\"c1\"></span>\t\t\t\t\t\t<span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">applyBeanPostProcessorsAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">beforeInstantiationResolved</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t*   org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation\n</span><span class=\"cm\">\t*   作用：调用postProcessBeforeInstantiation方法\n</span><span class=\"cm\">    */</span>\n\t<span class=\"kd\">protected</span> <span class=\"n\">Object</span> <span class=\"nf\">applyBeanPostProcessorsBeforeInstantiation</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">beanClass</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span>\n    \t\t\t<span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n\t        <span class=\"c1\">//遍历所有的后置处理器\n</span><span class=\"c1\"></span>    \t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">BeanPostProcessor</span> <span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    \t\t    <span class=\"c1\">//判断是否是InstantiationAwareBeanPostProcessor类型的，如果是的，调用postProcessBeforeInstantiation方法获取快捷Bean\n</span><span class=\"c1\"></span>    \t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bp</span> <span class=\"k\">instanceof</span> <span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t\t\t\t<span class=\"n\">InstantiationAwareBeanPostProcessor</span> <span class=\"n\">ibp</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"n\">bp</span><span class=\"o\">;</span>\n    \t\t\t\t<span class=\"n\">Object</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ibp</span><span class=\"o\">.</span><span class=\"na\">postProcessBeforeInstantiation</span><span class=\"o\">(</span><span class=\"n\">beanClass</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n    \t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    \t\t\t\t<span class=\"o\">}</span>\n    \t\t\t<span class=\"o\">}</span>\n    \t\t<span class=\"o\">}</span>\n    \t\t<span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    \t<span class=\"o\">}</span>\n\t\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t*   org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization\n</span><span class=\"cm\">\t*   作用：遍历调用postProcessAfterInitialization\n</span><span class=\"cm\">\t*/</span>\n\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">applyBeanPostProcessorsAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">existingBean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span>\n    \t\t\t<span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n    \t\t<span class=\"n\">Object</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">existingBean</span><span class=\"o\">;</span>\n    \t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">BeanPostProcessor</span> <span class=\"n\">beanProcessor</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    \t\t\t<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">beanProcessor</span><span class=\"o\">.</span><span class=\"na\">postProcessAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n    \t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t\t\t\t<span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    \t\t\t<span class=\"o\">}</span>\n    \t\t<span class=\"o\">}</span>\n    \t\t<span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    \t<span class=\"o\">}</span>\n</code></pre></div><ul><li><code>boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException</code>：正常情况下在实例化之后在执行<code>populateBean</code>之前调用</li><ul><li>返回值：如果有指定的bean的时候返回false，那么后续的属性填充和属性依赖注入【<code>populateBean</code>】将不会执行，同时后续的<code>postProcessPropertyValues</code>将不会执行,但是初始化和<code>BeanPostProcessor</code>的仍然会执行。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">* org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean\n</span><span class=\"cm\">* 填充指定Bean的属性\n</span><span class=\"cm\">* 在该方法内部遍历所有的BeanPostPorcessor，调用postProcessAfterInstantiation方法\n</span><span class=\"cm\">*/</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">populateBean</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">RootBeanDefinition</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">BeanWrapper</span> <span class=\"n\">bw</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//获取属性\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">PropertyValues</span> <span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getPropertyValues</span><span class=\"o\">();</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">pvs</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">BeanCreationException</span><span class=\"o\">(</span>\n\t\t\t\t\t\t<span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResourceDescription</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"s\">&#34;Cannot apply property values to null instance&#34;</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"c1\">// Skip property population phase for null instance.\n</span><span class=\"c1\"></span>\t\t\t\t<span class=\"k\">return</span><span class=\"o\">;</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\n        <span class=\"c1\">//**********************逻辑开始执行********************\n</span><span class=\"c1\"></span>        <span class=\"c1\">//标志，判断是否继续执行属性填充，默认为false\n</span><span class=\"c1\"></span>\t\t<span class=\"kt\">boolean</span> <span class=\"n\">continueWithPropertyPopulation</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"c1\">//判断ioc容器中是否存在InstantiationAwareBeanPostProcessors(\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">isSynthetic</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">hasInstantiationAwareBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t    <span class=\"c1\">//遍历所有的BeanPostProcessor\n</span><span class=\"c1\"></span>\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">BeanPostProcessor</span> <span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t    <span class=\"c1\">//判断类型是InstantiationAwareBeanPostProcessor\n</span><span class=\"c1\"></span>\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bp</span> <span class=\"k\">instanceof</span> <span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"n\">InstantiationAwareBeanPostProcessor</span> <span class=\"n\">ibp</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"n\">bp</span><span class=\"o\">;</span>\n\t\t\t\t\t<span class=\"c1\">//执行postProcessAfterInstantiation方法\n</span><span class=\"c1\"></span>\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">ibp</span><span class=\"o\">.</span><span class=\"na\">postProcessAfterInstantiation</span><span class=\"o\">(</span><span class=\"n\">bw</span><span class=\"o\">.</span><span class=\"na\">getWrappedInstance</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t\t\t    <span class=\"c1\">//返回结果为false，那么赋值continueWithPropertyPopulation=false，表示不继续执行属性填充\n</span><span class=\"c1\"></span>\t\t\t\t\t\t<span class=\"n\">continueWithPropertyPopulation</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">break</span><span class=\"o\">;</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n        <span class=\"c1\">//如果continueWithPropertyPopulation为false，直接返回，不执行下面的步骤\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">continueWithPropertyPopulation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">return</span><span class=\"o\">;</span>\n\t\t<span class=\"o\">}</span>\n        <span class=\"c1\">//\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_NAME</span> <span class=\"o\">||</span>\n\t\t\t\t<span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_TYPE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">MutablePropertyValues</span> <span class=\"n\">newPvs</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MutablePropertyValues</span><span class=\"o\">(</span><span class=\"n\">pvs</span><span class=\"o\">);</span>\n\n\t\t\t<span class=\"c1\">// Add property values based on autowire by name if applicable.\n</span><span class=\"c1\"></span>\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_NAME</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">autowireByName</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">newPvs</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\n\t\t\t<span class=\"c1\">// Add property values based on autowire by type if applicable.\n</span><span class=\"c1\"></span>\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getResolvedAutowireMode</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">AUTOWIRE_BY_TYPE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">autowireByType</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">newPvs</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\n\t\t\t<span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">newPvs</span><span class=\"o\">;</span>\n\t\t<span class=\"o\">}</span>\n\n\t\t<span class=\"kt\">boolean</span> <span class=\"n\">hasInstAwareBpps</span> <span class=\"o\">=</span> <span class=\"n\">hasInstantiationAwareBeanPostProcessors</span><span class=\"o\">();</span>\n\t\t<span class=\"kt\">boolean</span> <span class=\"n\">needsDepCheck</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">getDependencyCheck</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">RootBeanDefinition</span><span class=\"o\">.</span><span class=\"na\">DEPENDENCY_CHECK_NONE</span><span class=\"o\">);</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasInstAwareBpps</span> <span class=\"o\">||</span> <span class=\"n\">needsDepCheck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">PropertyDescriptor</span><span class=\"o\">[]</span> <span class=\"n\">filteredPds</span> <span class=\"o\">=</span> <span class=\"n\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"o\">(</span><span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">allowCaching</span><span class=\"o\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasInstAwareBpps</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t    <span class=\"c1\">//同样是遍历BeanPostProcessor\n</span><span class=\"c1\"></span>\t\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">BeanPostProcessor</span> <span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bp</span> <span class=\"k\">instanceof</span> <span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"n\">InstantiationAwareBeanPostProcessor</span> <span class=\"n\">ibp</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"n\">bp</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"c1\">//执行postProcessPropertyValues方法\n</span><span class=\"c1\"></span>\t\t\t\t\t\t<span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">ibp</span><span class=\"o\">.</span><span class=\"na\">postProcessPropertyValues</span><span class=\"o\">(</span><span class=\"n\">pvs</span><span class=\"o\">,</span> <span class=\"n\">filteredPds</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">.</span><span class=\"na\">getWrappedInstance</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pvs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">needsDepCheck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">checkDependencies</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">filteredPds</span><span class=\"o\">,</span> <span class=\"n\">pvs</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"c1\">//重要的一步，设置属性\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">applyPropertyValues</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">pvs</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n</code></pre></div><ul><li><code>public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</code>：实例化之后调用，在方法<code>applyPropertyValues</code>【属性填充】之前</li><ul><li>返回值：如果返回null，那么将不会进行后续的属性填充，比如依赖注入等，如果返回的pvs额外的添加了属性，那么后续会填充到该类对应的属性中。</li><li>pvs：PropertyValues对象，用于封装指定类的对象，简单来说就是PropertyValue的集合，里面相当于以key-value形式存放类的属性和值</li><li>pds：PropertyDescriptor对象数组，PropertyDescriptor相当于存储类的属性，不过可以调用set，get方法设置和获取对应属性的值</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">* org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean的代码片段\n</span><span class=\"cm\">*/</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasInstAwareBpps</span> <span class=\"o\">||</span> <span class=\"n\">needsDepCheck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">PropertyDescriptor</span><span class=\"o\">[]</span> <span class=\"n\">filteredPds</span> <span class=\"o\">=</span> <span class=\"n\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"o\">(</span><span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">.</span><span class=\"na\">allowCaching</span><span class=\"o\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasInstAwareBpps</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t    <span class=\"c1\">//遍历调用postProcessPropertyValues方法\n</span><span class=\"c1\"></span>\t\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">BeanPostProcessor</span> <span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">getBeanPostProcessors</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bp</span> <span class=\"k\">instanceof</span> <span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"n\">InstantiationAwareBeanPostProcessor</span> <span class=\"n\">ibp</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">InstantiationAwareBeanPostProcessor</span><span class=\"o\">)</span> <span class=\"n\">bp</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"n\">pvs</span> <span class=\"o\">=</span> <span class=\"n\">ibp</span><span class=\"o\">.</span><span class=\"na\">postProcessPropertyValues</span><span class=\"o\">(</span><span class=\"n\">pvs</span><span class=\"o\">,</span> <span class=\"n\">filteredPds</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">.</span><span class=\"na\">getWrappedInstance</span><span class=\"o\">(),</span> <span class=\"n\">beanName</span><span class=\"o\">);</span>\n\t\t\t\t\t\t<span class=\"c1\">//如果返回的pvs是null，直接返回\n</span><span class=\"c1\"></span>\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pvs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">needsDepCheck</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">checkDependencies</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">filteredPds</span><span class=\"o\">,</span> <span class=\"n\">pvs</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>   \n        <span class=\"c1\">//执行真正的属性填充\n</span><span class=\"c1\"></span>\t\t<span class=\"n\">applyPropertyValues</span><span class=\"o\">(</span><span class=\"n\">beanName</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">,</span> <span class=\"n\">bw</span><span class=\"o\">,</span> <span class=\"n\">pvs</span><span class=\"o\">);</span>\n</code></pre></div><h2>实例</h2><ul><li>只是写了<code>InstantiationAwareBeanPostProcessor</code>定义的方法，另外的<code>BeanPostProcessor</code>的方法，<a href=\"https://link.zhihu.com/?target=https%3A//chenjiabing666.github.io/2019/06/23/Bean%25E7%259A%2584%25E5%2590%258E%25E7%25BD%25AE%25E5%25A4%2584%25E7%2590%2586%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">请看上一篇文章</a></li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyInstantiationAwareBeanPostProcessor</span> <span class=\"kd\">implements</span> <span class=\"n\">InstantiationAwareBeanPostProcessor</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 在实例化之前调用，如果返回null，一切按照正常顺序执行，如果返回的是一个实例的对象，那么这个将会跳过实例化、初始化的过程\n</span><span class=\"cm\">     * @param beanClass\n</span><span class=\"cm\">     * @param beanName\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">postProcessBeforeInstantiation</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">beanClass</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">beanClass</span> <span class=\"o\">==</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;postProcessBeforeInstantiation执行&#34;</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 在实例化之后，postProcessBeforeInitialization之前执行\n</span><span class=\"cm\">     * @param bean\n</span><span class=\"cm\">     * @param beanName\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     * @throws BeansException\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">postProcessAfterInstantiation</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"k\">instanceof</span> <span class=\"n\">User</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;postProcessAfterInstantiation执行&#34;</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 实例化之后调用，属性填充之前\n</span><span class=\"cm\">     * @param pvs PropertyValues对象，用于封装指定类的对象，简单来说就是PropertyValue的集合，里面相当于以key-value形式存放类的属性和值\n</span><span class=\"cm\">     * @param pds PropertyDescriptor对象数组，PropertyDescriptor相当于存储类的属性，不过可以调用set，get方法设置和获取对应属性的值\n</span><span class=\"cm\">     * @param bean 当前的bean\n</span><span class=\"cm\">     * @param beanName beanName\n</span><span class=\"cm\">     * @return 如果返回null，那么将不会进行后续的属性填充，比如依赖注入等，如果返回的pvs额外的添加了属性，那么后续会填充到该类对应的属性中。\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">PropertyValues</span> <span class=\"nf\">postProcessPropertyValues</span><span class=\"o\">(</span><span class=\"n\">PropertyValues</span> <span class=\"n\">pvs</span><span class=\"o\">,</span> <span class=\"n\">PropertyDescriptor</span><span class=\"o\">[]</span> <span class=\"n\">pds</span><span class=\"o\">,</span> <span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pvs</span> <span class=\"k\">instanceof</span> <span class=\"n\">MutablePropertyValues</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">bean</span> <span class=\"k\">instanceof</span> <span class=\"n\">User</span><span class=\"o\">){</span>\n           <span class=\"n\">MutablePropertyValues</span> <span class=\"n\">mutablePropertyValues</span><span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">MutablePropertyValues</span><span class=\"o\">)</span> <span class=\"n\">pvs</span><span class=\"o\">;</span>\n           <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Object</span><span class=\"o\">,</span> <span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n           <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;陈加兵&#34;</span><span class=\"o\">);</span>\n           <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">,</span><span class=\"n\">44</span><span class=\"o\">);</span>\n           <span class=\"n\">mutablePropertyValues</span><span class=\"o\">.</span><span class=\"na\">addPropertyValues</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n           <span class=\"k\">return</span> <span class=\"n\">mutablePropertyValues</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"cm\">/**使用pds设置值\n</span><span class=\"cm\">        if (bean instanceof User) {\n</span><span class=\"cm\">            for (PropertyDescriptor descriptor:pds) {\n</span><span class=\"cm\">                try {\n</span><span class=\"cm\">                    if (&#34;name&#34;.equals(descriptor.getName())) {\n</span><span class=\"cm\">                        descriptor.getWriteMethod().invoke(bean, &#34;陈加兵&#34;);\n</span><span class=\"cm\">                    }else if(&#34;age&#34;.equals(descriptor.getName())){\n</span><span class=\"cm\">                        descriptor.getWriteMethod().invoke(bean,40);\n</span><span class=\"cm\">                    }\n</span><span class=\"cm\">                }catch (Exception e){\n</span><span class=\"cm\">                    e.printStackTrace();\n</span><span class=\"cm\">                }\n</span><span class=\"cm\">            }\n</span><span class=\"cm\">            return null;\n</span><span class=\"cm\">        }**/</span>\n        <span class=\"k\">return</span> <span class=\"n\">pvs</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">postProcessBeforeInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"k\">instanceof</span> <span class=\"n\">User</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;postProcessBeforeInitialization执行&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">postProcessAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"k\">instanceof</span> <span class=\"n\">User</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;postProcessAfterInitialization执行&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>源码梳理</h2><ul><li>无论是BeanPostProcessor还是<code>InstantiationAwareBeanPostProcessor</code>都是在对象实例化和初始化前后执行的逻辑，因此我们主要的代码都在<code>getBean</code>，<code>doGetBean</code>，<code>cerateBean</code>方法中</li><li><code>BeanPostProcessor</code>的两个方法的执行源码请看<a href=\"https://link.zhihu.com/?target=https%3A//chenjiabing666.github.io/2019/06/23/Bean%25E7%259A%2584%25E5%2590%258E%25E7%25BD%25AE%25E5%25A4%2584%25E7%2590%2586%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">上一篇的文章</a></li><li>步骤如下：</li><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6df9a21d6c2c3828e5935e7f4cc9a7f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1881\" data-rawheight=\"917\" class=\"origin_image zh-lightbox-thumb\" width=\"1881\" data-original=\"https://pic1.zhimg.com/v2-6df9a21d6c2c3828e5935e7f4cc9a7f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1881&#39; height=&#39;917&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1881\" data-rawheight=\"917\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1881\" data-original=\"https://pic1.zhimg.com/v2-6df9a21d6c2c3828e5935e7f4cc9a7f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6df9a21d6c2c3828e5935e7f4cc9a7f8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-70b1afc262df0e839c9982313bb25a19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1841\" data-rawheight=\"955\" class=\"origin_image zh-lightbox-thumb\" width=\"1841\" data-original=\"https://pic2.zhimg.com/v2-70b1afc262df0e839c9982313bb25a19_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1841&#39; height=&#39;955&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1841\" data-rawheight=\"955\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1841\" data-original=\"https://pic2.zhimg.com/v2-70b1afc262df0e839c9982313bb25a19_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-70b1afc262df0e839c9982313bb25a19_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-43af7ea23ec62afb919cea279e970ec3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1895\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb\" width=\"1895\" data-original=\"https://pic4.zhimg.com/v2-43af7ea23ec62afb919cea279e970ec3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1895&#39; height=&#39;901&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1895\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1895\" data-original=\"https://pic4.zhimg.com/v2-43af7ea23ec62afb919cea279e970ec3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-43af7ea23ec62afb919cea279e970ec3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-29c26e40e40c7a8c1abd14e53ce543f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic3.zhimg.com/v2-29c26e40e40c7a8c1abd14e53ce543f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1898&#39; height=&#39;872&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1898\" data-original=\"https://pic3.zhimg.com/v2-29c26e40e40c7a8c1abd14e53ce543f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-29c26e40e40c7a8c1abd14e53ce543f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-205b23914f79e588cb9ddf8fd26005a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1837\" data-rawheight=\"873\" class=\"origin_image zh-lightbox-thumb\" width=\"1837\" data-original=\"https://pic2.zhimg.com/v2-205b23914f79e588cb9ddf8fd26005a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1837&#39; height=&#39;873&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1837\" data-rawheight=\"873\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1837\" data-original=\"https://pic2.zhimg.com/v2-205b23914f79e588cb9ddf8fd26005a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-205b23914f79e588cb9ddf8fd26005a9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-306faa9cc420ce9ea7b114d744318c11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1857\" data-rawheight=\"851\" class=\"origin_image zh-lightbox-thumb\" width=\"1857\" data-original=\"https://pic2.zhimg.com/v2-306faa9cc420ce9ea7b114d744318c11_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1857&#39; height=&#39;851&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1857\" data-rawheight=\"851\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1857\" data-original=\"https://pic2.zhimg.com/v2-306faa9cc420ce9ea7b114d744318c11_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-306faa9cc420ce9ea7b114d744318c11_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-81c4e0251ec16d81a6dbe4bade65a05f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1897\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb\" width=\"1897\" data-original=\"https://pic4.zhimg.com/v2-81c4e0251ec16d81a6dbe4bade65a05f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1897&#39; height=&#39;858&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1897\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1897\" data-original=\"https://pic4.zhimg.com/v2-81c4e0251ec16d81a6dbe4bade65a05f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-81c4e0251ec16d81a6dbe4bade65a05f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b7a0ca859f169fa19712a83513a89644_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1889\" data-rawheight=\"670\" class=\"origin_image zh-lightbox-thumb\" width=\"1889\" data-original=\"https://pic1.zhimg.com/v2-b7a0ca859f169fa19712a83513a89644_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1889&#39; height=&#39;670&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1889\" data-rawheight=\"670\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1889\" data-original=\"https://pic1.zhimg.com/v2-b7a0ca859f169fa19712a83513a89644_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b7a0ca859f169fa19712a83513a89644_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>Autowired源码解析</h2><ul><li>从源码可以看出，Autowired的功能实现最重要的一个接口就是<code>AutowiredAnnotationBeanPostProcessor</code>，继承关系如下：<br/></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-937eaee31029a61043bb1432b4221e10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-937eaee31029a61043bb1432b4221e10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;835&#39; height=&#39;485&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"835\" data-original=\"https://pic1.zhimg.com/v2-937eaee31029a61043bb1432b4221e10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-937eaee31029a61043bb1432b4221e10_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>从继承关系图可以看出，实际上关键的实现了<code>InstantiationAwareBeanPostProcessor</code>这个接口。</li><li>源码实现如下图：<br/></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cedcb80eed66c61172accf449739f620_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1347\" data-rawheight=\"663\" class=\"origin_image zh-lightbox-thumb\" width=\"1347\" data-original=\"https://pic1.zhimg.com/v2-cedcb80eed66c61172accf449739f620_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1347&#39; height=&#39;663&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1347\" data-rawheight=\"663\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1347\" data-original=\"https://pic1.zhimg.com/v2-cedcb80eed66c61172accf449739f620_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cedcb80eed66c61172accf449739f620_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>总结</h2><ul><li>源码：</li><ul><li>ioc容器创建Bean的方法是从<code>createBean</code>方法进入的，真正执行创建的Bean的是<code>doCreateBean</code>方法，我们从createBean开始往下走</li><ul><li>调用<code>resolveBeforeInstantiation</code>方法【在doCreatBean之前执行，即是实例化之前】，在内部遍历BeanPostProcessor调用<code>postProcessBeforeInstantiation</code>方法</li><li>如果<code>postProcessBeforeInstantiation</code>方法返回null，那么需要执行实例化的过程，调用<code>doCreatBean</code>实例化Bean。</li><ul><li><code>doCreateBean</code>内部分为两步：①调用createBeanInstance实例化Bean；②调用<code>populateBean</code>设置Bean的属性</li></ul></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><ul><li>在<code>populateBean</code>内部分为如下的步骤：</li><ul><li>调用<code>postProcessAfterInstantiation</code>【实例化之后调用】，分为两种情况：①返回false，后续的<code>postProcessPropertyValues</code>将不再执行，属性也不在进行设置；②返回true，程序照常进行，调用<code>postProcessPropertyValues</code>，属性设置的过程正常进行</li></ul></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><ul><li>执行完<code>populateBean</code>之后将会调用<code>initializeBean</code>【初始化Bean，调用afterPropertiesSet方法】，在内部就涉及到BeanPostProcessor定义的接口了，步骤如下：</li><ul><li>执行<code>applyBeanPostProcessorsBeforeInitialization</code>方法调用<code>postProcessBeforeInitialization</code>【在初始化之前调用】方法</li><li>执行<code>invokeInitMethods</code>方法，内部其实是调用afterPropeertiesSet方法，进行初始化</li><li>执行<code>applyBeanPostProcessorsAfterInitialization</code>，内部调用<code>postProcessAfterInitialization</code>【在实例化之后调用】方法</li></ul></ul></ul></ul><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70418993", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "FactoryBean创建Bean", 
            "content": "<h2>简介<br/></h2><ul><li>简单的说FactoryBean实际上是一个Bean，并不是一个工厂，它能够为我们创建一个Bean，但是创建的这个Bean实际指向的并不是FactoryBean类型的，而是其中<code>getObject</code>方法返回类型的对象。</li></ul><h2>接口解析<br/></h2><ul><li>FactoryBean中有三个需要实现的方法，如下：</li><ul><li><code>getObject()</code> ：获取返回的对象，此处返回的对象会被注入到ioc容器中</li><li><code>public Class&lt;?&gt; getObjectType()</code>：返回创建Bean类型</li><li><code>public boolean isSingleton()</code>：返回是否创建单例，如果返回true，那么创建的对象将是单例的，返回false，创建的是多实例的对象。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>自定义实现<br/></h2><ul><li>自定义一个FactoryBean，实现Admin的注入，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 自定义FactoryBean，用来创建对象\n</span><span class=\"cm\"> * 1、@Component :将创建的MyFactoryBean注入到容器中\n</span><span class=\"cm\"> * 2、实现FactoryBean\n</span><span class=\"cm\"> * 3、指定泛型&lt;T&gt;\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyFactoryBean</span> <span class=\"kd\">implements</span> <span class=\"n\">FactoryBean</span><span class=\"o\">&lt;</span><span class=\"n\">Admin</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Admin</span> <span class=\"nf\">getObject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;创建Admin&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Admin</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">getObjectType</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">Admin</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSingleton</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><ul><li>此时即可从容器中获取到对应的Bean了，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@Test</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">testFactoryBean</span><span class=\"o\">(){</span>\n        <span class=\"c1\">//根据id获取实例，这里实际获取的是getObject返回的对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Admin</span> <span class=\"n\">admin1</span> <span class=\"o\">=</span> <span class=\"n\">applicationContext</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">&#34;myFactoryBean&#34;</span><span class=\"o\">,</span> <span class=\"n\">Admin</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">admin1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</code></pre></div><ul><li>以上是获取的实例Bean，现在我们就想获取MyBeanFactory本身这个对象，可以在id的前面加上<code>&amp;</code>即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"> <span class=\"nd\">@Test</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">testFactoryBean2</span><span class=\"o\">(){</span>\n        <span class=\"c1\">//根据&amp;id获取实例，实际获取的就是MyFactoryBean的对象\n</span><span class=\"c1\"></span>        <span class=\"n\">MyFactoryBean</span> <span class=\"n\">bean</span> <span class=\"o\">=</span> <span class=\"n\">applicationContext</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">&#34;&amp;myFactoryBean&#34;</span><span class=\"o\">,</span> <span class=\"n\">MyFactoryBean</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">bean</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><h2>源码解析</h2><ul><li>指定的是FactoryBean的id，为什么获取的是getObject返回的对象？</li><ul><li>简单的逻辑：判断传入的类型是否是<code>FactoryBean</code>类型，如果是该类型的，调用getObject方法返回对象即可。</li><li>在源码中可以看到调用的是<code>org.springframework.beans.factory.support.FactoryBeanRegistrySupport#doGetObjectFromFactoryBean</code>方法</li></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c1e83e936772510275573529c790e2ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb\" width=\"1090\" data-original=\"https://pic3.zhimg.com/v2-c1e83e936772510275573529c790e2ae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1090&#39; height=&#39;523&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1090\" data-original=\"https://pic3.zhimg.com/v2-c1e83e936772510275573529c790e2ae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c1e83e936772510275573529c790e2ae_b.jpg\"/></figure><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70418773", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 1, 
            "title": "Bean的后置处理器", 
            "content": "<h2>简介</h2><ul><li>调用顺序：在Bean的初始化前后调用，分别对应了其中的两个方法</li><li>Bean的后置处理器对应的接口是<code>BeanPostProcessor</code>，其中定义了两个方法，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">BeanPostProcessor</span> <span class=\"o\">{</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * 在Bean初始化之前执行，即是在执行Bean的构造方法之后，在执行InitializingBean的afterPropertiesSet方法之前执行\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"n\">Object</span> <span class=\"nf\">postProcessBeforeInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span><span class=\"o\">;</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">         * 在Bean的初始化之后执行，即是在InitializingBean的afterPropertiesSet方法之后执行\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"n\">Object</span> <span class=\"nf\">postProcessAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>使用场景</h2><ul><li>在Bean的初始化前后做一些自己的逻辑处理，比如为Bean设置一些额外的属性。</li><ul><li>最典型的例子就是spring中的Aware接口的实现，都是利用<code>BeanPostProcessor</code>在Bean初始化之前进行调用set方法设置相应的属性【详情请看<code>ApplicationContextAwareProcessor</code>源码】</li><li><code>@Autowired</code>的实现依赖注入也是使用的BeanPostProcessor的原理，详情请看<code>AutowiredAnnotationBeanPostProcessor</code>的源码</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>自定义后置处理器</h2><ul><li>必备条件：<br/></li><ul><li>自定义的后置处理器必须注入到容器中</li><li>必须实现<code>BeanPostProcessor</code>接口，实现其中的方法</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>自定义一个User类，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 实现InitializingBean接口，定义初始化方法，在构造方法之后执行\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"kd\">implements</span> <span class=\"n\">Serializable</span><span class=\"o\">,</span> <span class=\"n\">InitializingBean</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">User</span><span class=\"o\">(){}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">User</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;执行构造方法&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">afterPropertiesSet</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;执行初始化方法，在构造方法执行之后执行&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><ul><li>自定义后置处理器，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 1、自定义的后置处理器,实现BeanPostProcessor\n</span><span class=\"cm\"> * 2、必须注入到容器中才能执行\n</span><span class=\"cm\"> * 3、后置处理器是每一个Bean实例化前后都会调用的，并不能指定某一个\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FirstPostProcessor</span> <span class=\"kd\">implements</span> <span class=\"n\">BeanPostProcessor</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 在Bean初始化之前执行，即是在执行Bean的构造方法之后，在执行InitializingBean的afterPropertiesSet方法之前执行\n</span><span class=\"cm\">     * @param bean bean的对象\n</span><span class=\"cm\">     * @param beanName bean的名字，即是在ioc容器中的id\n</span><span class=\"cm\">     * @return 一定不能null\n</span><span class=\"cm\">     * @throws BeansException\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">postProcessBeforeInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//如果这个Bean是User类型\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"k\">instanceof</span> <span class=\"n\">User</span><span class=\"o\">){</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;在User的初始化方法【afterPropertiesSet】之前执行&#34;</span><span class=\"o\">);</span>\n            <span class=\"c1\">//改变属性的值\n</span><span class=\"c1\"></span>            <span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">=(</span><span class=\"n\">User</span><span class=\"o\">)</span><span class=\"n\">bean</span><span class=\"o\">;</span>\n            <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;马云&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">setAge</span><span class=\"o\">(</span><span class=\"n\">40</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 在Bean的初始化之后执行，即是在InitializingBean的afterPropertiesSet方法之后执行\n</span><span class=\"cm\">     * @param bean bean的对象\n</span><span class=\"cm\">     * @param beanName bean的名字，即是在ioc容器中的id\n</span><span class=\"cm\">     * @return 一定不能null\n</span><span class=\"cm\">     * @throws BeansException\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">postProcessAfterInitialization</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">bean</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">beanName</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bean</span> <span class=\"k\">instanceof</span> <span class=\"n\">User</span><span class=\"o\">){</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;在User的初始化方法【afterPropertiesSet】之后执行&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">bean</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div><h2>源码解析</h2><ul><li>最重要的就是后置处理器两个方法的执行顺序：</li><ul><li>为什么<code>postProcessBeforeInitialization</code>在构造方法之后，初始化之前调用？</li><li>为什么<code>postProcessAfterInitialization</code>在初始化之后调用？</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>我们分别在自定义的后置处理器上打上断点，通过debug模式跟踪代码，程序的入口测试类如下：</li><ul><li>使用<code>AnnotationConfigApplicationContext</code>启动容器</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FirstConfigTest</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">AnnotationConfigApplicationContext</span> <span class=\"n\">applicationContext</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Before</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">initApplicationContext</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">applicationContext</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">AnnotationConfigApplicationContext</span><span class=\"o\">(</span><span class=\"n\">FirstConfig</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><h3>步骤</h3><ol><li>执行AnnotationConfigApplicationContext的构造方法<code>public AnnotationConfigApplicationContext(Class&lt;?&gt;... annotatedClasses)</code>：<br/></li><ol><li><code>register(annotatedClasses)</code>：注入指定的配置类<code>FirstConfig</code></li><li><b>【<code>refresh()</code>：刷新容器，在这个执行结束之后会完成Bean的加载，详情见第2步】</b></li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>进入<code>org.springframework.context.support.AbstractApplicationContext#refresh</code>方法：<br/></li><ol><li><code>prepareRefresh();</code>：在刷新容器之前做一些准备工作，比如设置激活状态【activate】,设置启动时间【startupDate】</li><li><code>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code></li><ol><li><code>refreshBeanFactory()</code>：刷新BeanFactory，如果之前存在了就删除创建新的，返回的是</li><li>返回<code>ConfigurableListableBeanFactory</code>类型的Bean工厂</li></ol></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li><code>prepareBeanFactory(beanFactory);</code>：对新创建的Bean工厂设置一些属性配置</li><ol><li>设置ClassLoader、表达式解析器、属性注入器</li><li><b>设置<code>ApplicationContextAwareProcessor</code>这个后置处理器到<code>org.springframework.beans.factory.support.AbstractBeanFactory#beanPostProcessors</code>该成员变量中、去除一些不能自动注入的类【ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware、EnvironmentAware】，因为这些Aware类型的类需要后续自定义实现的</b></li><li><b>向容器中注入一些能够自动注入的类【BeanFactory，ResourceLoader，ApplicationEventPublisher，ApplicationContext】，这些类能够直接通过<code>@Autowired</code>直接注入使用</b></li><li><b>向容器中注入一些运行环境的Bean【<code>ConfigurableEnvironment</code>、<code>systemProperties(Map&lt;String,Object&gt;</code>其中存放的是配置参数)】，这些Bean可以直接自动注入使用</b></li></ol></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li><code>invokeBeanFactoryPostProcessors(beanFactory)</code>：调用已经注册在容器中的BeanFactory后置处理器</li><li><code>registerBeanPostProcessors(beanFactory)</code>：向ioc容器中注册BeanFactoryProcessor</li><li><code>initMessageSource()</code>：初始化MessageSource</li><li><code>initApplicationEventMulticaster()</code>：初始化事件分发器</li><li><code>registerListeners()</code>：注册事件监听器，用来监听事件</li><li><b>【<code>finishBeanFactoryInitialization(beanFactory)</code>：初始化单例、非懒加载的Bean】，详情见步骤3</b></li><li><code>finishRefresh()</code>：发布事件</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>进入<code>org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization</code>:<br/></li><ol><li>初始化类型转换类</li><li>初始化<code>LoadTimeWeaverAware</code>，用于方法织入</li><li>冻结BeanDefinition，表示后面的BeanDefinition不能再改变</li><li><b>【<code>beanFactory.preInstantiateSingletons()</code>：初始化Bean，详情请看第4步】</b></li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>进入到<code>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</code>方法中，用于初始化Bean<br/></li><ol><li>遍历所有的BeanNames，判断当前Bean是否是FactoryBean，如果不是运行getBean方法</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>进入到<code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean</code>，如下图所示，将是完整的逻辑，可以看出后置处理器为什么是在初始化之前和之后执行。<br/></li><ol></ol></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5d1cc08b0066d3156498fe25cb1ae877_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1061\" data-rawheight=\"591\" class=\"origin_image zh-lightbox-thumb\" width=\"1061\" data-original=\"https://pic4.zhimg.com/v2-5d1cc08b0066d3156498fe25cb1ae877_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1061&#39; height=&#39;591&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1061\" data-rawheight=\"591\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1061\" data-original=\"https://pic4.zhimg.com/v2-5d1cc08b0066d3156498fe25cb1ae877_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5d1cc08b0066d3156498fe25cb1ae877_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>总结</h2><ul><li>从源码可以看出，最核心的执行就是在<code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean</code>的方法中，主要的代码逻辑是在初始化之前调用对应的before方法，在之后调用after方法。</li></ul>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69991613", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Spring全注解开发", 
            "content": "<h2>@Configurationion</h2><ul><li>标注在类上，表明该类是一个配置类，相当于之前写的spring的xml文件，通常与<code>@Bean</code>结合使用</li><li>该注解同时拥有了<code>@Component</code>的作用，将当前类注入ioc容器</li><ul><li>其中有一个<code>value</code>属性，指定注入ioc容器的名称，默认是类名首字母小写</li><li>源码如下：</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">TYPE</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"nd\">@Documented</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">Configuration</span> <span class=\"o\">{}</span>\n</code></pre></div><h2>@Bean</h2><ul><li>在配置类中使用该注解</li><li>标注在方法上，默认将方法的返回对象注入到ioc容器，名称默认使用的是方法名</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 配置类\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Configuration</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;MyConfiguration&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyConfiguration</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 注入一个User对象，ioc容器中的name是user，类型是User类型\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">user</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>属性</h2><ul><li><code>name</code>：指定注入ioc容器中的名称</li><li><code>value</code>：同name</li><li><code>autowireCandidate</code>：是否能够自动注入，默认是true，如果指定了属性为false，那么不能使用<code>@Autowired</code>或者<code>@Resource</code>自动注入</li><li><code>initMethod</code>：指定初始化方法，在构造方法之后执行</li><li><code>destroyMethod</code>：指定销毁方法，在容器关闭的时候执行</li></ul><h2>实例</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 配置类\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Configuration</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;MyConfiguration&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyConfiguration</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 注入一个User对象，ioc容器中的name是user，类型是User类型\n</span><span class=\"cm\">     * init是User类中的init方法，destory是User类中的destory方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Bean</span><span class=\"o\">(</span><span class=\"n\">initMethod</span> <span class=\"o\">=</span> <span class=\"s\">&#34;init&#34;</span><span class=\"o\">,</span><span class=\"n\">destroyMethod</span> <span class=\"o\">=</span> <span class=\"s\">&#34;destory&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">user1</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\">* User类\n</span><span class=\"cm\">*/</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"kd\">implements</span> <span class=\"n\">Serializable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Integer</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">User</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">User</span><span class=\"o\">(</span><span class=\"n\">Integer</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;执行构造方法&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;初始化方法&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">destory</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;销毁方法&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>@Scope</h2><ul><li>指定对象的作用域名，标注在类上或者方法上，默认是单实例</li></ul><h2>四大作用域</h2><ul><li><code>singleton</code>：单例，默认值，当容器启动的时候会创建对象放入ioc容器中，后续获取只是从容器中创建，并不会再次调用构造方法new出来</li><li><code>prototype</code>：多实例，容器启动的时候并不会创建该对象，而是当需要用到的才调用构造方法new出来（不放入ioc容器，每次用到就new一个）</li><li><code>request</code>：该属性仅对HTTP请求产生作用，使用该属性定义Bean时，每次HTTP请求都会创建一个新的Bean，适用于WebApplicationContext环境。</li><li><code>session</code>：该属性仅用于HTTP Session，同一个Session共享一个Bean实例。不同Session使用不同的实例。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">/**\n     * 指定多实例，每次用到都会调用\n     */\n    @Bean(initMethod = &#34;init&#34;,destroyMethod = &#34;destory&#34;)\n    @Scope(value = &#34;prototype&#34;)\n    public User user1(){\n        return new User(1,&#34;name&#34;);\n    }\n</code></pre></div><h2>@Conditional</h2><ul><li>标注在方法或者在类上，只有在满足其中的匹配条件才会将对象注入到ioc容器中。</li><li>只有一个属性value，是一个<code>Condition</code>数组，要向实现相应的功能，可以自定义一个类，实现<code>Condition</code>这个接口即可。</li><li>这个注解在SpringBoot中将会有很多的扩展，这里就不多说了。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">/**\n     * 指定多实例，每次用到都会调用\n     * @Conditional 只有里面全部都匹配才会正常注入到容器中\n     */\n    @Bean(initMethod = &#34;init&#34;,destroyMethod = &#34;destory&#34;)\n    @Conditional(value = {FirstCondition.class})\n    public User user1(){\n        return new User(1,&#34;name&#34;);\n    }\n</code></pre></div><ul><li>下面看看<code>FirstCondition</code>这个类具体实现</li><ul><li>只需要实现接口中的<code>matches</code>方法即可，返回true表示符合条件，否则不满足条件，只有满足条件才会注入到ioc容器中</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">/**\n * 自定义的条件判断，实现Condition接口\n */\npublic class FirstCondition implements Condition {\n\n    /**\n     * 如果返回true表示符合条件，反之不符合条件\n     * @param context ConditionContext对象，可以获取上下文的信息\n     * @param metadata AnnotatedTypeMetadata对象，可以获取标注在该方法上面的注解信息\n     * @return\n     */\n    @Override\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        //获取Environment，用来获取运行环境中的一些变量\n        Environment environment = context.getEnvironment();\n        //获取在properties文件中配置的参数，表示是否注入相关属性\n        Boolean isAutowired = environment.&lt;Boolean&gt;getProperty(&#34;isAutowired&#34;, Boolean.class);\n        return isAutowired;\n    }\n}\n</code></pre></div><h2>ConditionContext</h2><ul><li>主要的功能是获取上下文的对象，比如BeanFactory</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">ConditionContext</span> <span class=\"o\">{</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t* 获取 BeanDefinitionRegistry，可以自己手动注册对象到ioc容器中\n</span><span class=\"cm\">    */</span>\n\t<span class=\"n\">BeanDefinitionRegistry</span> <span class=\"nf\">getRegistry</span><span class=\"o\">();</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * 获取BeanFacotory，操作ioc容器，比如获取对应的Bean，判断ioc中是否已经注入   \n</span><span class=\"cm\">\t */</span>\n\t<span class=\"nd\">@Nullable</span>\n\t<span class=\"n\">ConfigurableListableBeanFactory</span> <span class=\"nf\">getBeanFactory</span><span class=\"o\">();</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * 返回当前的运行环境，可以获取运行环境中的一下参数，或者一些配置文件中的数据\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"n\">Environment</span> <span class=\"nf\">getEnvironment</span><span class=\"o\">();</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * 获取资源加载器\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"n\">ResourceLoader</span> <span class=\"nf\">getResourceLoader</span><span class=\"o\">();</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * 获取类加载器 \n</span><span class=\"cm\">\t */</span>\n\t<span class=\"nd\">@Nullable</span>\n\t<span class=\"n\">ClassLoader</span> <span class=\"nf\">getClassLoader</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>AnnotatedTypeMetadata</h2><ul><li>主要的作用就是获取标注了<code>@Conditional</code>这个注解的方法上的注解和对应的参数等信息</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">public interface AnnotatedTypeMetadata {\n\n\t/**\n\t* 判断方法上是否有对应的注解 \n    * @param annotationName 注解类的全类名，getName()\n    */\n\tboolean isAnnotated(String annotationName);\n\n\t/**\n\t*  获取对应注解的全部属性的值，key是属性，value是属性的值\n    * @param annotationName 注解类的全类名，getName()\n    */\n\t@Nullable\n\tMap&lt;String, Object&gt; getAnnotationAttributes(String annotationName);\n\n\t@Nullable\n\tMap&lt;String, Object&gt; getAnnotationAttributes(String annotationName, boolean classValuesAsString);\n\n\t@Nullable\n\tMultiValueMap&lt;String, Object&gt; getAllAnnotationAttributes(String annotationName);\n\n\t@Nullable\n\tMultiValueMap&lt;String, Object&gt; getAllAnnotationAttributes(String annotationName, boolean classValuesAsString);\n}\n</code></pre></div><h2>@PostConstruct</h2><ul><li>标注在方法上，用来在类加载并且属性赋值之后调用，通常用来初始化，和<code>@Bean</code>中的<code>init-menthd</code>指定的作用相同</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@PostConstruct\n    public void init(){\n        System.out.println(&#34;初始化方法&#34;);\n    }\n</code></pre></div><h2>@PreDestroy</h2><ul><li>标注在方法上，容器销毁执行，相当于<code>@Bean</code>中的<code>destroy-method</code>属性</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@PreDestroy\n    public void destory(){\n        System.out.println(&#34;销毁方法&#34;);\n    }\n</code></pre></div><h2>@Import</h2><ul><li>用来形式化的注入，主要形式有：</li><ul><li>直接导入类</li><li>导入配置类</li><li>指定ImportSelector</li><li>使用ImportBeanDefinitionRegistrar手动注册</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>直接导入类</h2><ul><li>直接在 <code>value</code>属性中指定需要导入的类即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@Configuration(value = &#34;MyConfiguration&#34;)\n@Import(value = {Person.class})\npublic class MyConfiguration {}\n</code></pre></div><h2>导入配置类</h2><ul><li>新建一个配置类，但是不用<code>@Configuration</code>标注，使用<code>@Import</code>在另外一个配置类上引入即可</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">/**\n * 这是一个配置，但是并没有使用@Configuration这个注解，因此不会生效\n */\npublic class SecondConfiguration {\n    @Bean\n    public Person person(){\n        return new Person();\n    }\n}\n</code></pre></div><ul><li>在另外一个配置类使用<code>@Import</code>注解引入上面的配置类，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@Configuration(value = &#34;MyConfiguration&#34;)\n@Import(value = {SecondConfiguration.class})\npublic class MyConfiguration {}\n</code></pre></div><h2>指定ImportSelector</h2><ul><li>使用ImportSelector需要自定义一个实现类，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">/**\n * 自定义Selector，需要实现ImportSelector\n */\npublic class FirstSelector implements ImportSelector {\n    /**\n     * 筛选逻辑，返回的是String数组（需要注入到容器中的类的全类名）\n     * @param importingClassMetadata AnnotationMetadata对象，对标注了@Import这个注解的类中的所有注解信息，比如获取标注指定注解的方法\n     * @return 返回的是需要注入的字符串数组（类的全类名）\n     */\n    @Override\n    public String[] selectImports(AnnotationMetadata importingClassMetadata) {\n        //获取@Import标注的类中被@Bean标注的方法元数据\n        Set&lt;MethodMetadata&gt; annotatedMethods = importingClassMetadata.getAnnotatedMethods(Bean.class.getName());\n        annotatedMethods.forEach(o-&gt;{\n            System.out.println(o.getMethodName());\n        });\n        //将Person类返回去，那么将会自动注入Person\n        return new String[]{Person.class.getName()};\n    }\n}\n</code></pre></div><ul><li>在配置类上使用<code>@Import</code>注解引入即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@Configuration\n@Import(value = {FirstSelector.class})\npublic class MyConfiguration {}\n</code></pre></div><h3>AnnotationMetadata</h3><div class=\"highlight\"><pre><code class=\"language-text\">public interface AnnotationMetadata extends ClassMetadata, AnnotatedTypeMetadata {\n\n\t//拿到Class上标注的所有注解，依赖于Class#getAnnotations\n\tSet&lt;String&gt; getAnnotationTypes();\n\n\t// 拿到所有的元注解信息AnnotatedElementUtils#getMetaAnnotationTypes\n\t//annotationName:注解类型的全类名\n\tSet&lt;String&gt; getMetaAnnotationTypes(String annotationName);\n\t// 是否包含指定注解 （annotationName：全类名）\n\tboolean hasAnnotation(String annotationName);\n\t//这个厉害了，依赖于AnnotatedElementUtils#hasMetaAnnotationTypes\n\tboolean hasMetaAnnotation(String metaAnnotationName);\n\t// 类里面只有有一个方法标注有指定注解，就返回true\n\t//getDeclaredMethods获得所有方法， AnnotatedElementUtils.isAnnotated是否标注有指定注解\n\tboolean hasAnnotatedMethods(String annotationName);\n\t// 注意返回的是MethodMetadata 原理基本同上\n\t// .getDeclaredMethods和AnnotatedElementUtils.isAnnotated  最后吧Method转为MethodMetadata\n\tSet&lt;MethodMetadata&gt; getAnnotatedMethods(String annotationName);\n}\n</code></pre></div><h2>使用ImportBeanDefinitionRegistrar手动注册</h2><ul><li>需要自定义一个类实现<code>ImportBeanDefinitionRegistrar</code>，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">/**\n * 自定义的FirstBeanDefinitionRegistrar，需要实现ImportBeanDefinitionRegistrar\n */\npublic class FirstBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {\n    /**\n     * 自己手动注册Bean到ioc容器中\n     * @param importingClassMetadata 获取@Import标注的类上的注解信息，比如获取被指定注解标注的方法信息\n     * @param registry  注册中心，可以获取指定bean的信息和手动注册bean\n     */\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n        //如果容器中没有Person这个Bean，就创建一个\n        if (!registry.containsBeanDefinition(Person.class.getName())){\n            GenericBeanDefinition beanDefinition=new GenericBeanDefinition();\n            beanDefinition.setBeanClass(Person.class);\n            //手动注册\n            registry.registerBeanDefinition(&#34;person&#34;,beanDefinition);\n        }\n    }\n}\n</code></pre></div><ul><li>在配置类上使用<code>@Import</code>注解引入即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@Configuration\n@Import(value = {FirstBeanDefinitionRegistrar.class})\npublic class MyConfiguration {}\n</code></pre></div><h2>@Primary</h2><ul><li>在spring 中使用注解，常使用@Autowired， 默认是根据类型Type来自动注入的。但有些特殊情况，对同一个接口，可能会有几种不同的实现类，而默认只会采取其中一种的情况下 @Primary 的作用就出来了。</li><li>有两种使用方式，一种是结合<code>@Bean</code>，另外一种是结合<code>@Service,@Component,@Controller.....</code></li></ul><div class=\"highlight\"><pre><code class=\"language-text\">@Bean\n    @Primary\n    public User user1(){\n        return new User(1,&#34;user1&#34;);\n    }\n    \n    //第二种\n    @Primary\n    @Component\n    public class Person {\n        private String name;\n        private Integer age;\n    } </code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68877265", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 1, 
            "title": "Spring中的Aware", 
            "content": "<h2><b>Spring中的Aware</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>简介</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>Spring框架中提供了许多实现了Aware接口的类，这些类主要是为了辅助Spring访问容器中的数据，比如<code>BeanNameAware</code>，这个类能够在Spring容器加载的过程中将Bean的名字（id）赋值给变量。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>常用的Aware</b></h2><ul><li><code>BeanNameAware</code>：能够获取bean的名称，即是id</li><li><code>BeanFactoryAware</code>：获取BeanFactory实例</li><li><code>ApplicationContextAware</code>：获取<code>ApplicationContext</code></li><li><code>MessageSourceAware</code>：获取MessageSource</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>ApplicationContextAware</b></h2><ul><li>ApplicationContext可以获取容器中的bean，但是必须注入才能使用，当一些类不能注入的时候怎么才能获得bean呢？比如Utils中的类，通常不能直接通过注入直接使用ApplicationContext，此时就需要借助<code>ApplicationContextAware</code>这个接口了。</li><li><code>ApplicationContextAware</code>的实现类如下</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 自定义一个实现类，一定要注入到容器中\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ApplicationContextAwareImpl</span> <span class=\"kd\">implements</span> <span class=\"n\">ApplicationContextAware</span> <span class=\"o\">{</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 容器启动的时候会调用这个方法，只需要将applicationContext设置即可\n</span><span class=\"cm\">     * @param applicationContext 容器启动会自动注入\n</span><span class=\"cm\">     * @throws BeansException\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setApplicationContext</span><span class=\"o\">(</span><span class=\"n\">ApplicationContext</span> <span class=\"n\">applicationContext</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BeansException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//将其设置到ApplicationContextUtil\n</span><span class=\"c1\"></span>        <span class=\"n\">ApplicationContextUtil</span><span class=\"o\">.</span><span class=\"na\">setApplicationContext</span><span class=\"o\">(</span><span class=\"n\">applicationContext</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li><code>ApplicationContextUtil</code>如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.ApplicationContext</span><span class=\"o\">;</span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * ApplicationContext的工具类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ApplicationContextUtil</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * ApplicationContext对象，会ApplicationContextAwareImpl中的setApplicationContext方法中赋值\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">ApplicationContext</span> <span class=\"n\">applicationContext</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">ApplicationContext</span> <span class=\"nf\">getApplicationContext</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">applicationContext</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">setApplicationContext</span><span class=\"o\">(</span><span class=\"n\">ApplicationContext</span> <span class=\"n\">applicationContext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ApplicationContextUtil</span><span class=\"o\">.</span><span class=\"na\">applicationContext</span> <span class=\"o\">=</span> <span class=\"n\">applicationContext</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 根据类型获取指定的bean\n</span><span class=\"cm\">     * @param requiredType Class\n</span><span class=\"cm\">     * @param &lt;T&gt; 泛型\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">T</span> <span class=\"nf\">getBean</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">requiredType</span> <span class=\"o\">){</span>\n        <span class=\"k\">return</span> <span class=\"n\">applicationContext</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"n\">requiredType</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"err\">​</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 根据名称和类型获取Bean\n</span><span class=\"cm\">     * @param name bean的id\n</span><span class=\"cm\">     * @param requiredType class\n</span><span class=\"cm\">     * @param &lt;T&gt;\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">T</span> <span class=\"nf\">getBean</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span><span class=\"n\">Class</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">requiredType</span><span class=\"o\">){</span>\n        <span class=\"k\">return</span> <span class=\"n\">applicationContext</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span><span class=\"n\">requiredType</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>配置了如上的工具类，那么就可以直接使用ApplicationContextUtil获取ApplicationContext对象了，而不需要注入了，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">StringRedisTemplate</span> <span class=\"n\">redisTemplate</span><span class=\"o\">=</span><span class=\"n\">ApplicationContextUtil</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">&#34;stringRedisTemplate&#34;</span><span class=\"o\">,</span><span class=\"n\">StringRedisTemplate</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>参考文章</b></h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/iechenyb/article/details/83788338\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/iechenyb/</span><span class=\"invisible\">article/details/83788338</span><span class=\"ellipsis\"></span></a></li></ul><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48500697", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "java自定义注解【Annotation】", 
            "content": "<h2><b>自定义注解【Annotation】</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>元注解</b></h2><h2><b>@Retention</b></h2><ul><li>表示需要在什么级别保存该注解信息 。分为如下三类：<br/></li><ul><li><code>@Retention(RetentionPolicy.SOURCE)</code>：注解仅存在于源码中，在class字节码文件中不包含 </li><li><code>@Retention(RetentionPolicy.CLASS)</code>：默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得 </li><li><code>@Retention(RetentionPolicy.RUNTIME)</code>： 注解会在class字节码文件中存在，在运行时可以通过反射获取到 </li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>@Target</b></h2><ul><li>注解的作用目标 </li></ul><p><b>取值作用域</b><code>@Target(ElementType.TYPE)</code>接口、类、枚举、注解<code>@Target(ElementType.FIELD)</code>字段、枚举的常量<code>@Target(ElementType.METHOD)</code>方法<code>@Target(ElementType.PARAMETER)</code>方法参数<code>@Target(ElementType.CONSTRUCTOR)</code>构造函数<code>@Target(ElementType.LOCAL_VARIABLE)</code>局部变量<code>@Target(ElementType.ANNOTATION_TYPE)</code>注解<code>@Target(ElementType.PACKAGE)</code>包</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>@Document</b></h2><ul><li>注解包含在javadoc中 </li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>@Inherited</b></h2><ul><li>注解可以被继承 </li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>关于注解的反射方法</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">// 获取某个类型的注解\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"n\">A</span> <span class=\"kd\">extends</span> <span class=\"n\">Annotation</span><span class=\"o\">&gt;</span> <span class=\"n\">A</span> <span class=\"nf\">getAnnotation</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span> <span class=\"n\">annotationClass</span><span class=\"o\">);</span>\n<span class=\"err\">​</span>\n<span class=\"c1\">// 获取所有注解(包括父类中被Inherited修饰的注解)\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"n\">Annotation</span><span class=\"o\">[]</span> <span class=\"nf\">getAnnotations</span><span class=\"o\">();</span> \n<span class=\"err\">​</span>\n<span class=\"c1\">// 获取声明的注解(但是不包括父类中被Inherited修饰的注解)\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"n\">Annotation</span><span class=\"o\">[]</span> <span class=\"nf\">getDeclaredAnnotations</span><span class=\"o\">();</span>\n<span class=\"err\">​</span>\n<span class=\"c1\">// 判断某个对象上是否被某个注解进行标注\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAnnotationPresent</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"n\">Annotation</span><span class=\"o\">&gt;</span> <span class=\"n\">annotationClass</span><span class=\"o\">)</span>\n<span class=\"err\">​</span>\n<span class=\"c1\">// 获取某个类声明的所有字段\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"n\">Field</span><span class=\"o\">[]</span> <span class=\"nf\">getDeclaredFields</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SecurityException</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n<span class=\"c1\">// 获取某个方法\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"n\">Method</span> <span class=\"nf\">getMethod</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;...</span> <span class=\"n\">parameterTypes</span><span class=\"o\">);</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>五种通知</b></h2><ul><li><code>@Before</code>：前置通知，在调用目标方法之前执行通知定义的任务</li><li><code>@After</code>：后置通知，在目标方法执行结束后，无论执行结果如何（异常或者正常执行）都执行通知定义的任务</li><li><code>@After-returning</code>：后置通知，在目标方法执行结束后，如果执行成功（没有异常），则执行通知定义的任务</li><li><code>@After-throwing</code>：异常通知，如果目标方法执行过程中抛出异常，则执行通知定义的任务</li><li><code>@Around</code>：环绕通知，在目标方法执行前和执行后，都需要执行通知定义的任务</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>JoinPoint 对象</b></h2><p><b>方法名功能</b><code>Signature getSignature();</code>获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息<code>Object[] getArgs();</code>获取传入目标方法的参数对象<code>Object getTarget();</code>获取被代理的对象<code>Object getThis();</code>获取代理对象</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>实战</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>使用springBoot，需要 添加aop相关的依赖，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\">    <span class=\"c\">&lt;!-- springBoot的aop功能启动器 --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-aop<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>日志</b></h2><ul><li>实际的生产环境中会对每个都记录日志，比如xxx用户执行了xxx操作，这些日志如果都使用一个方法的话，未免太不雅，此时我们可以定义一个注解，使用spring中的aop，在方法执行成功之后记录日志信息，步骤如下：</li><li>定义一个注解，使用<code>@Interface</code></li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.lang.annotation.*</span><span class=\"o\">;</span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 定义日志的注解，作用在方法上\n</span><span class=\"cm\"> * @author 陈加兵  \n</span><span class=\"cm\"> * @since 2018年11月3日 上午11:53:59\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Target</span><span class=\"o\">({</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">PARAMETER</span><span class=\"o\">,</span> <span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">METHOD</span><span class=\"o\">})</span>  <span class=\"c1\">//作用在方法上面\n</span><span class=\"c1\"></span><span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>   <span class=\"c1\">//程序运行  \n</span><span class=\"c1\"></span><span class=\"nd\">@Documented</span>  \n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">InsertLog</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"nf\">name</span><span class=\"o\">()</span> <span class=\"k\">default</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>   <span class=\"c1\">//用户名\n</span><span class=\"c1\"></span>    <span class=\"n\">String</span> <span class=\"nf\">operation</span><span class=\"o\">()</span> <span class=\"k\">default</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>  <span class=\"c1\">//操作\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>定义一个注解的实现类，使用aop实现该注解</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Component</span>   <span class=\"c1\">//注入\n</span><span class=\"c1\"></span><span class=\"nd\">@Aspect</span>   <span class=\"c1\">//切面\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">InsertLogAnnotation</span> <span class=\"o\">{</span>\n    \n    <span class=\"nd\">@Resource</span>\n    <span class=\"kd\">private</span> <span class=\"n\">LogService</span> <span class=\"n\">logService</span><span class=\"o\">;</span>   <span class=\"c1\">//日志的service，用来记录日志\n</span><span class=\"c1\"></span>    \n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 1、@pointCut：定义切入点，其中支持多种表达式来匹配切入点，这里的annotation是用来匹配注解的\n</span><span class=\"cm\">     * 2、@annotation的参数必须和这个方法的参数字段相同，因为这里表示的扫描的哪个注解\n</span><span class=\"cm\">     * 3、这个切入点的 意思：只要被`@InsertLog`这个注解标注的都会被扫描到成为切入点\n</span><span class=\"cm\">     * @param log  注解的对象\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Pointcut</span><span class=\"o\">(</span><span class=\"s\">&#34;@annotation(log)&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">insertLog</span><span class=\"o\">(</span><span class=\"n\">InsertLog</span> <span class=\"n\">log</span><span class=\"o\">){}</span>\n    \n    \n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * `@AfterReturning`:定义后置通知，只有程序执行成功才会调用该注解，用来添加操作的日志\n</span><span class=\"cm\">     * `insertLog(log)`: 这里的log一定要和上面定义切入点(@Pointcut)中的参数字段一样\n</span><span class=\"cm\">     * @param point JoinPoint对象，可以获取一些切面信息，比如调用的类，调用的方法名称\n</span><span class=\"cm\">     * @param log  该注解的对象，可以获取注解中参数的内容\n</span><span class=\"cm\">     * @throws Exception \n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@AfterReturning</span><span class=\"o\">(</span><span class=\"s\">&#34;insertLog(log)&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">SystemLog</span><span class=\"o\">(</span><span class=\"n\">JoinPoint</span> <span class=\"n\">point</span><span class=\"o\">,</span><span class=\"n\">InsertLog</span> <span class=\"n\">log</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span><span class=\"o\">{</span>\n        <span class=\"c1\">//获取注解中的参数内容\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">();</span>  <span class=\"c1\">//姓名\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">operation</span><span class=\"o\">();</span>  <span class=\"c1\">//操作\n</span><span class=\"c1\"></span>        \n        <span class=\"n\">Log</span> <span class=\"n\">log2</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Log</span><span class=\"o\">();</span>\n        <span class=\"n\">log2</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n        <span class=\"n\">log2</span><span class=\"o\">.</span><span class=\"na\">setOperation</span><span class=\"o\">(</span><span class=\"n\">operation</span><span class=\"o\">);</span>\n        <span class=\"n\">logService</span><span class=\"o\">.</span><span class=\"na\">addLog</span><span class=\"o\">(</span><span class=\"n\">log2</span><span class=\"o\">);</span>  <span class=\"c1\">//添加到日志中\n</span><span class=\"c1\"></span>        \n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>此时就已经完成了，我们只需要将该注解添加到需要记录日志的方法上即可，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@InsertLog</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;陈加兵&#34;</span><span class=\"o\">,</span><span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"s\">&#34;删除用户&#34;</span><span class=\"o\">)</span>  <span class=\"c1\">//使用日志注解，在程序执行成功之后记录日志\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">deleteUserById</span><span class=\"o\">(</span><span class=\"n\">Integer</span> <span class=\"n\">userId</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;删除成功&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>完整的项目截图如下：</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fa60613fb3f94d18cbf9a311bb0bb2c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-fa60613fb3f94d18cbf9a311bb0bb2c6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-fa60613fb3f94d18cbf9a311bb0bb2c6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fa60613fb3f94d18cbf9a311bb0bb2c6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>性能监控</b></h2><ul><li>可以定义一个注解实现性能监控，设置一个环绕通知即可，在程序执行开始和结束之后统计时间即可</li><li>定义一个注解，如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.lang.annotation.*</span><span class=\"o\">;</span>\n<span class=\"err\">​</span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 性能监控的注解\n</span><span class=\"cm\"> * @author 陈加兵  \n</span><span class=\"cm\"> * @since 2018年11月3日 下午1:08:30\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Target</span><span class=\"o\">({</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">PARAMETER</span><span class=\"o\">,</span> <span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">METHOD</span><span class=\"o\">})</span>  <span class=\"c1\">//作用在方法上面\n</span><span class=\"c1\"></span><span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>   <span class=\"c1\">//程序运行  \n</span><span class=\"c1\"></span><span class=\"nd\">@Documented</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">CapabilityMonitor</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>定义注解的实现类，使用切面的环绕通知</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 性能监控注解的实现类\n</span><span class=\"cm\"> * @author 陈加兵  \n</span><span class=\"cm\"> * @since 2018年11月3日 下午1:09:40\n</span><span class=\"cm\"> */</span>\n<span class=\"nd\">@Aspect</span>    <span class=\"c1\">//切面\n</span><span class=\"c1\"></span><span class=\"nd\">@Component</span>   <span class=\"c1\">//注入\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CapabilityMonitorAnnotationImpl</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Logger</span> <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">LoggerFactory</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">(</span><span class=\"n\">CapabilityMonitorAnnotationImpl</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>  <span class=\"c1\">//selfj的日志信息\n</span><span class=\"c1\"></span>    \n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 定义切入点，只要方法体上有这个注解\n</span><span class=\"cm\">     * @param capabilityMonitor  注解的对象\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Pointcut</span><span class=\"o\">(</span><span class=\"s\">&#34;@annotation(capabilityMonitor)&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">capabilityMonitor</span><span class=\"o\">(</span><span class=\"n\">CapabilityMonitor</span> <span class=\"n\">capabilityMonitor</span><span class=\"o\">){}</span>\n    \n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 环绕通知，在方法执行之前和之后都执行\n</span><span class=\"cm\">     * capabilityMonitor(capabilityMonitor)：这里的参数一定要和切入点（`@Pointcut(&#34;@annotation(capabilityMonitor)&#34;)`）的参数相同\n</span><span class=\"cm\">     * @param point\n</span><span class=\"cm\">     * @param capabilityMonitor  注解的对象\n</span><span class=\"cm\">     * @throws Throwable \n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@Around</span><span class=\"o\">(</span><span class=\"s\">&#34;capabilityMonitor(capabilityMonitor)&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">execute</span><span class=\"o\">(</span><span class=\"n\">ProceedingJoinPoint</span> <span class=\"n\">point</span><span class=\"o\">,</span><span class=\"n\">CapabilityMonitor</span> <span class=\"n\">capabilityMonitor</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Throwable</span><span class=\"o\">{</span>\n        <span class=\"n\">Long</span> <span class=\"n\">startTime</span><span class=\"o\">=</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">();</span>  <span class=\"c1\">//开始时间\n</span><span class=\"c1\"></span>        <span class=\"n\">Object</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"na\">getArgs</span><span class=\"o\">();</span> <span class=\"c1\">//获取目标方法执行的参数数组\n</span><span class=\"c1\"></span>        <span class=\"n\">Object</span> <span class=\"n\">returnValues</span><span class=\"o\">=</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"na\">proceed</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">);</span>   <span class=\"c1\">//执行目标方法\n</span><span class=\"c1\"></span>        <span class=\"n\">Long</span> <span class=\"n\">endTime</span><span class=\"o\">=</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">();</span>  <span class=\"c1\">//结束时间\n</span><span class=\"c1\"></span>        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">&#34;程序执行的时间：&#34;</span><span class=\"o\">+((</span><span class=\"n\">endTime</span><span class=\"o\">-</span><span class=\"n\">startTime</span><span class=\"o\">)/</span><span class=\"n\">1000</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">));</span>   <span class=\"c1\">//输出程序执行的时间，秒位单位\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>参考文章</b></h2><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//shouce.jb51.net/spring/aop.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">aop的相关知识点</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//chenjiabing666.github.io/2018/05/21/Spring%25E4%25B9%258BAOP/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">spring aop</a></li></ul><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36426052", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 3, 
            "title": "Springmvc响应Ajax请求(@ResponseBody)", 
            "content": "<h2><b>Springmvc响应Ajax请求(@ResponseBody)</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>创建工程</b></h2><ul><li>创建<code>maven project</code></li><li>选择<code>war</code>包</li><li>自动生成<code>web.xml</code>  </li><li><code>Target Runtime</code> 选择 <code>Tomcat</code></li><li>添加依赖<code>pom.xml</code></li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependencies&gt;</span>\n​\n        <span class=\"c\">&lt;!-- SpringMVC --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-webmvc<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>3.2.8.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        \n        <span class=\"c\">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-jdbc<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>3.2.8.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n​\n        <span class=\"c\">&lt;!-- MyBatis --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.mybatis<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>mybatis<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>3.4.6<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n​\n        <span class=\"c\">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.mybatis<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>mybatis-spring<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.3.2<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        \n        <span class=\"c\">&lt;!-- MySQL --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>mysql<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>mysql-connector-java<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>5.1.28<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n​\n        <span class=\"c\">&lt;!-- DBCP --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>commons-dbcp<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>commons-dbcp<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.4<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n​\n        <span class=\"c\">&lt;!-- Junit --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>4.12<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n​\n    <span class=\"nt\">&lt;/dependencies&gt;</span></code></pre></div><ul><li>配置前端控制器和解决中乱码的过滤器(<code>web.xml</code>)</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!--配置中文乱码的过滤器--&gt;</span>\n<span class=\"nt\">&lt;filter&gt;</span>\n        <span class=\"nt\">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n        <span class=\"nt\">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"nt\">&lt;/filter-class&gt;</span>\n        <span class=\"nt\">&lt;init-param&gt;</span>\n            <span class=\"nt\">&lt;param-name&gt;</span>encoding<span class=\"nt\">&lt;/param-name&gt;</span>\n            <span class=\"nt\">&lt;param-value&gt;</span>utf-8<span class=\"nt\">&lt;/param-value&gt;</span>\n        <span class=\"nt\">&lt;/init-param&gt;</span>\n    <span class=\"nt\">&lt;/filter&gt;</span>\n​\n    <span class=\"nt\">&lt;filter-mapping&gt;</span>\n        <span class=\"nt\">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n        <span class=\"nt\">&lt;url-pattern&gt;</span>/*<span class=\"nt\">&lt;/url-pattern&gt;</span>\n    <span class=\"nt\">&lt;/filter-mapping&gt;</span>\n​\n<span class=\"c\">&lt;!--配置前端控制器--&gt;</span>\n    <span class=\"nt\">&lt;servlet&gt;</span>\n        <span class=\"nt\">&lt;servlet-name&gt;</span>SpringMVC<span class=\"nt\">&lt;/servlet-name&gt;</span>\n        <span class=\"nt\">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"nt\">&lt;/servlet-class&gt;</span>\n        <span class=\"nt\">&lt;init-param&gt;</span>\n            <span class=\"nt\">&lt;param-name&gt;</span>contextConfigLocation<span class=\"nt\">&lt;/param-name&gt;</span>\n            <span class=\"c\">&lt;!--加载spring配置文件--&gt;</span>\n            <span class=\"nt\">&lt;param-value&gt;</span>classpath:spring-*.xml<span class=\"nt\">&lt;/param-value&gt;</span>\n        <span class=\"nt\">&lt;/init-param&gt;</span>\n        <span class=\"nt\">&lt;load-on-startup&gt;</span>1<span class=\"nt\">&lt;/load-on-startup&gt;</span>\n    <span class=\"nt\">&lt;/servlet&gt;</span>\n​\n    <span class=\"nt\">&lt;servlet-mapping&gt;</span>\n        <span class=\"nt\">&lt;servlet-name&gt;</span>SpringMVC<span class=\"nt\">&lt;/servlet-name&gt;</span>\n        <span class=\"nt\">&lt;url-pattern&gt;</span>*.do<span class=\"nt\">&lt;/url-pattern&gt;</span>\n    <span class=\"nt\">&lt;/servlet-mapping&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>配置<code>spring-mvc.xml</code><br/></li><ul><li><b>要想使用<code>@ResponseBody</code>这个注解来接收<code>Ajax</code>发送过来的请求，必须加上注解驱动<code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></b></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-xml\">    <span class=\"c\">&lt;!-- 组件扫描 --&gt;</span>\n    <span class=\"nt\">&lt;context:component-scan</span> \n        <span class=\"na\">base-package=</span><span class=\"s\">&#34;cn.tedu.spring.controller&#34;</span> <span class=\"nt\">/&gt;</span>\n    \n    <span class=\"c\">&lt;!-- 配置ViewResolver --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">class=</span><span class=\"s\">&#34;org.springframework.web.servlet.view.InternalResourceViewResolver&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;prefix&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;/web/&#34;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;suffix&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;.jsp&#34;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span>\n    \n    <span class=\"c\">&lt;!-- 配置注解扫描，用于ajax的注解扫描 --&gt;</span>\n    <span class=\"nt\">&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>编写前端表单</b></h2><ul><li>其实并不是使用表单提交的，可以不使用表单</li></ul><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;post&#34;</span><span class=\"p\">&gt;</span>\n    姓名： <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"na\">onblur</span><span class=\"o\">=</span><span class=\"s\">&#34;checkName()&#34;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">span</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;nameSpan&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    密码:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;password&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;pwd&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;pwd&#34;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">span</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;pwSpan&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;submit&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;注册&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>效果和实现(<code>@RequestBody</code>)</b></h2><h2><b>用户名文本框失去焦点，异步检测用户</b></h2><ul><li>用户名文本框失去焦点发生请求处理方法，<code>检测用户名</code><br/></li><ul><li>请求方式<code>POST</code></li><li>返回的值不再是<code>视图的名称</code>，而是处理请求的结果，即使返回给<code>Ajax</code>请求的数据</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/checkName.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>   <span class=\"c1\">//使用@ResponseBody，表示这个是处理ajax的请求\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">checkName</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">)</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"s\">&#34;admin&#34;</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;0&#34;</span><span class=\"o\">;</span>  <span class=\"c1\">//表示admin这个用户名不能使用，已经存在\n</span><span class=\"c1\"></span>        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">;</span>  <span class=\"c1\">//表示此时的用户名不存在，可以使用\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>前端编写<code>Ajax</code>请求（<code>JQUERY</code>）</b><br/></li><ul><li>使用<code>JQuery</code>中的<code>Ajax</code>请求</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"c\">&lt;!-- 添加jquery文件 --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;&lt;%=request.getContextPath() %&gt;/web/jquery-3.2.1.min.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n​\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span><span class=\"p\">&gt;</span>\n    \n    <span class=\"kd\">function</span> <span class=\"nx\">checkName</span><span class=\"p\">(){</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#name&#34;</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">();</span> <span class=\"c1\">//获取用户名\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"o\">==</span><span class=\"s2\">&#34;&#34;</span><span class=\"p\">){</span>\n            <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">&#34;用户名不能为空&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">url</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/user/checkName.do&#34;</span><span class=\"p\">;</span>  <span class=\"c1\">// 请求的url\n</span><span class=\"c1\"></span>        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"nx\">name</span><span class=\"p\">},</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"p\">,</span><span class=\"nx\">status</span><span class=\"p\">,</span><span class=\"nx\">xhr</span><span class=\"p\">){</span>\n            <span class=\"c1\">//如果状态码正确\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"s2\">&#34;success&#34;</span><span class=\"p\">){</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"o\">==</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">){</span>\n                    <span class=\"c1\">//为节点添加提示内容\n</span><span class=\"c1\"></span>                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#nameSpan&#34;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">&#34;用户名已经存在，请重新输入&#34;</span><span class=\"p\">);</span>\n                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#nameSpan&#34;</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">&#34;color&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;red&#34;</span><span class=\"p\">);</span>  <span class=\"c1\">//设置颜色为红色\n</span><span class=\"c1\"></span>                <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>\n                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#nameSpan&#34;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">&#34;用户名不存在，可以使用&#34;</span><span class=\"p\">);</span>\n                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#nameSpan&#34;</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">&#34;color&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;green&#34;</span><span class=\"p\">);</span> \n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">}</span><span class=\"sb\">`\n</span><span class=\"sb\">​\n</span><span class=\"sb\"></span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>使用<code>javascript</code>发出<code>Ajax</code>请求<br/></li><ul><li><code>GET</code>请求 ：<code>xhr.open(&#34;GET&#34;,&#34;&lt;%=request.getContextPath()%&gt;/user/checkName.do?name=&#34;+name,true);</code></li><li><code>POST</code>请求需要将数据封装到<code>xhr.send(data)</code>中</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//使用POST请求\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">checkNameFun</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">xhr</span><span class=\"o\">=</span><span class=\"nx\">getXHR</span><span class=\"p\">();</span>  <span class=\"c1\">//获取XHR\n</span><span class=\"c1\"></span>    <span class=\"c1\">//监听状态改变\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">onreadystatechange</span><span class=\"o\">=</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">readyState</span><span class=\"o\">==</span><span class=\"mi\">4</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"mi\">200</span><span class=\"p\">){</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">text</span><span class=\"o\">=</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">;</span>  <span class=\"c1\">//获取返回的数据\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">Text</span><span class=\"o\">==</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">){</span>\n                <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">&#34;用户名已经存在，请重新输入&#34;</span><span class=\"p\">);</span>\n                \n            <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>\n                <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">&#34;用户名不存在，可以使用&#34;</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">var</span> <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#name&#34;</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">();</span>  <span class=\"c1\">//获取name文本框中的值\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"o\">==</span><span class=\"s2\">&#34;&#34;</span><span class=\"p\">){</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">&#34;用户名不能为空&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">//编写请求\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">&#34;POST&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/user/checkName.do&#34;</span><span class=\"p\">,</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"c1\">//在open之后，send之前添加请求头信息\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">setRequestHeader</span><span class=\"p\">(</span><span class=\"s2\">&#34;content-type&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;application/x-www-form-urlencoded&#34;</span><span class=\"p\">);</span>\n    <span class=\"c1\">//在send之中添加请求信息\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s2\">&#34;name=&#34;</span><span class=\"o\">+</span><span class=\"nx\">name</span><span class=\"p\">);</span>  <span class=\"c1\">//发送请求\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>@ResponseBody</b></h2><ul><li><b>配置注解驱动支持该注解的使用，直接在<code>spring-mvc.xml</code>中配置即可<code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></b></li><li><b>添加<code>jackson</code>的依赖，处理<code>json</code>数据</b><br/></li><ul><li>我们需要<code>三个jar包</code>，我们只需要添加<code>jackson-databind</code>即可，就会自动的导入其他的两个</li></ul></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4f79b32de8686d242f15fd387e26f9e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"73\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;73&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"73\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic3.zhimg.com/v2-4f79b32de8686d242f15fd387e26f9e2_b.jpg\"/></figure><p><br/>​</p><div class=\"highlight\"><pre><code class=\"language-xml\">    <span class=\"c\">&lt;!-- 添加jackson --&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>jackson-databind<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>2.9.4<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>用于响应<code>Ajax</code>请求</li><li>使用<code>@ResponseBody</code>标记的<code>Controller</code>方法的返回值，不再是返回的<code>视图名称</code>,而是返回的给<code>Ajax</code>的请求结果，可以是<code>String</code>，<code>List</code>,<code>Map</code>,<code>单个对象</code>等</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>返回单个值</b></h2><ul><li>返回的单个值，比如<code>String</code>，<code>int</code>，<code>boolean</code></li><li>直接使用上面的例子即可</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/checkName.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>   <span class=\"c1\">//使用@ResponseBody，表示这个是处理ajax的请求\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">checkName</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">)</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"s\">&#34;admin&#34;</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;0&#34;</span><span class=\"o\">;</span>  <span class=\"c1\">//表示admin这个用户名不能使用，已经存在\n</span><span class=\"c1\"></span>        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">;</span>  <span class=\"c1\">//表示此时的用户名不存在，可以使用\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>返回Map</b></h2><ul><li>这里我们返回的是一个<code>Map&lt;String,Object&gt;</code></li><li><b>使用了<code>JackSon</code>，spring会将<code>Map</code>自动转换成<code>JSON对象</code>，那么我们在<code>JSP</code>中就可以用JSON来获取数据即可</b></li><li>编写<code>Controller</code>方法，使用<code>@ResponseBody</code>注解</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/testMap.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>   <span class=\"c1\">//使用注解\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span><span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"nf\">testMap</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">)</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">)</span><span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">+</span><span class=\"s\">&#34;---&#34;</span><span class=\"o\">+</span><span class=\"n\">age</span><span class=\"o\">);</span> <span class=\"c1\">//接收请求参数\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Object</span><span class=\"o\">&gt;();</span>  <span class=\"c1\">//新建一个Map\n</span><span class=\"c1\"></span>        <span class=\"c1\">//新建User对象\n</span><span class=\"c1\"></span>        <span class=\"n\">User</span> <span class=\"n\">user1</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">();</span>\n        <span class=\"n\">user1</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;JACK&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">user1</span><span class=\"o\">.</span><span class=\"na\">setAge</span><span class=\"o\">(</span><span class=\"n\">22</span><span class=\"o\">);</span>\n        \n        <span class=\"n\">User</span> <span class=\"n\">user2</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">();</span>\n        <span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"na\">setAge</span><span class=\"o\">(</span><span class=\"n\">33</span><span class=\"o\">);</span>\n        <span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;Tom&#34;</span><span class=\"o\">);</span>\n        \n        <span class=\"c1\">//将上面的User对象添加到map中\n</span><span class=\"c1\"></span>        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;u1&#34;</span><span class=\"o\">,</span><span class=\"n\">user1</span><span class=\"o\">);</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;u2&#34;</span><span class=\"o\">,</span><span class=\"n\">user2</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>在<code>jsp</code>页面中添加一个方法，用于发出<code>Ajax</code>请求<br/></li><ul><li>使用返回的数据(<code>JSON对象</code>)，直接使用<code>data.key</code>的形式即可取出<code>Map</code>中的值</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//Ajax请求testMap.do\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">testMap</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">url</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/user/testMap.do&#34;</span><span class=\"p\">;</span>  <span class=\"c1\">// 请求的url\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"s1\">&#39;陈加兵&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;age&#39;</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"p\">};</span>   <span class=\"c1\">//需要发出请求的参数\n</span><span class=\"c1\"></span>    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span><span class=\"nx\">d</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"p\">,</span><span class=\"nx\">status</span><span class=\"p\">,</span><span class=\"nx\">xhr</span><span class=\"p\">){</span>\n        <span class=\"c1\">//如果状态码正确\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"s2\">&#34;success&#34;</span><span class=\"p\">){</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">user1</span><span class=\"o\">=</span><span class=\"nx\">responseData</span><span class=\"p\">.</span><span class=\"nx\">u1</span><span class=\"p\">;</span>   <span class=\"c1\">//取出key为u1的值，是一个user对象\n</span><span class=\"c1\"></span>            <span class=\"kd\">var</span> <span class=\"nx\">user2</span><span class=\"o\">=</span><span class=\"nx\">responseData</span><span class=\"p\">.</span><span class=\"nx\">u2</span><span class=\"p\">;</span>   <span class=\"c1\">//取出key为u2的值，是一个user对象\n</span><span class=\"c1\"></span>            <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">&#34;u1 = &#34;</span><span class=\"o\">+</span><span class=\"nx\">user1</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"o\">+</span><span class=\"s2\">&#34;---&#34;</span><span class=\"o\">+</span><span class=\"nx\">user1</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"p\">);</span>  <span class=\"c1\">//打印出u1中的name，age的值\n</span><span class=\"c1\"></span>        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>返回List</b></h2><ul><li>这里的返回值是<code>List&lt;Object&gt;</code></li><li><code>JackSon</code>会自动将<code>List</code>转换成<code>JSON数组</code>，在<code>JSP</code>页面就可以使用<code>JSON</code>的方式来获取数据</li><li>比如：<code>[{&#34;name&#34;:&#34;JACK&#34;,&#34;age&#34;:22},{&#34;name&#34;:&#34;Tom&#34;,&#34;age&#34;:33},10]</code>，这个是一个<code>JSON数组</code>的形式，因此我们在<code>js</code>中需要遍历这个数组</li><li><code>Controller</code>中方法如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/testList.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">&gt;</span> <span class=\"nf\">testList</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n            <span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">)</span> <span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">&#34;---&#34;</span> <span class=\"o\">+</span> <span class=\"n\">age</span><span class=\"o\">);</span> <span class=\"c1\">// 接收请求参数\n</span><span class=\"c1\"></span>        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">&gt;();</span>\n        <span class=\"c1\">// 新建User对象\n</span><span class=\"c1\"></span>        <span class=\"n\">User</span> <span class=\"n\">user1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">();</span>\n        <span class=\"n\">user1</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;JACK&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">user1</span><span class=\"o\">.</span><span class=\"na\">setAge</span><span class=\"o\">(</span><span class=\"n\">22</span><span class=\"o\">);</span>\n<span class=\"err\">​</span>\n        <span class=\"n\">User</span> <span class=\"n\">user2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">();</span>\n        <span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"na\">setAge</span><span class=\"o\">(</span><span class=\"n\">33</span><span class=\"o\">);</span>\n        <span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;Tom&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//将数据添加到其中\n</span><span class=\"c1\"></span>        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">user1</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">user2</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">list</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><code>jsp</code>中使用发出<code>Ajax</code>请求<br/></li><ul><li>此时返回的是数组，因此需要循环遍历</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//Ajax请求testList.do\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">testList</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">url</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/user/testList.do&#34;</span><span class=\"p\">;</span>  <span class=\"c1\">// 请求的url\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"s1\">&#39;陈加兵&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;age&#39;</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"p\">};</span>   <span class=\"c1\">//需要发出请求的参数\n</span><span class=\"c1\"></span>    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span><span class=\"nx\">d</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"p\">,</span><span class=\"nx\">status</span><span class=\"p\">,</span><span class=\"nx\">xhr</span><span class=\"p\">){</span>\n        <span class=\"c1\">//如果状态码正确\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"s2\">&#34;success&#34;</span><span class=\"p\">){</span>\n            <span class=\"c1\">//此时返回的是一个数组，因此我们需要循环遍历这个数组，但是其中的元素是一个User对象，因此可以使用key-value的形式取出其中的值\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">responseData</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                <span class=\"c1\">//将数据输出到控制台\n</span><span class=\"c1\"></span>                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">name</span><span class=\"o\">+</span><span class=\"s2\">&#34;-----&gt;&#34;</span> <span class=\"o\">+</span> <span class=\"nx\">responseData</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">age</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>返回单个对象</b></h2><ul><li>返回的是一个对象，比如一个<code>User</code>对象，<code>JackSon</code>会将其转换成为<code>JSON对象</code>返回给浏览器</li><li>返回的是对象，那么我们在<code>js</code>中可以直接使用<code>key-value</code>的形式取出其中的值</li><li><code>Controller</code>中的方法</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/testObject.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>\n    <span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">testObject</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n            <span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">)</span> <span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">&#34;---&#34;</span> <span class=\"o\">+</span> <span class=\"n\">age</span><span class=\"o\">);</span> <span class=\"c1\">// 接收请求参数\n</span><span class=\"c1\"></span>        <span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">User</span><span class=\"o\">();</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;JACK&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">setAge</span><span class=\"o\">(</span><span class=\"n\">22</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>发出<code>Ajax</code>请求，并且接收数据<br/></li><ul><li>直接使用取值即可</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//Ajax请求testObject.do\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">testObject</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">url</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/user/testObject.do&#34;</span><span class=\"p\">;</span>  <span class=\"c1\">// 请求的url\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"s1\">&#39;陈加兵&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;age&#39;</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"p\">};</span>   <span class=\"c1\">//需要发出请求的参数\n</span><span class=\"c1\"></span>    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span><span class=\"nx\">d</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"p\">,</span><span class=\"nx\">status</span><span class=\"p\">,</span><span class=\"nx\">xhr</span><span class=\"p\">){</span>\n        <span class=\"c1\">//如果状态码正确\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"s2\">&#34;success&#34;</span><span class=\"p\">){</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">responseData</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"o\">+</span><span class=\"s2\">&#34;----&#34;</span><span class=\"o\">+</span><span class=\"nx\">responseData</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>练习</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>省市二级菜单联动</b></h2><ul><li>前端使用下拉菜单<code>&lt;select&gt;</code>实现<br/></li></ul><ol><li>加载页面完成之后，发送一个异步请求，请求所有的<code>省份</code>,在省的下拉菜单中显示出来</li><li>当用户选择了某个省之后，那么发送一个异步请求，获取当前省的所有<code>市</code>的信息，并且显示在市的下拉菜单中</li><li>在<code>省</code>的下拉菜单中需要使用<code>onchange</code>监听选项的改变，只要选项改变了就要发出异步请求，返回对应城市的信息</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\">省：<span class=\"p\">&lt;</span><span class=\"nt\">select</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;province&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;province&#34;</span> <span class=\"na\">onchange</span><span class=\"o\">=</span><span class=\"s\">&#34;getCity()&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">&gt;</span>请选择省<span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">select</span><span class=\"p\">&gt;</span>\n​\n​\n市：<span class=\"p\">&lt;</span><span class=\"nt\">select</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;city&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;city&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;-1&#34;</span><span class=\"p\">&gt;</span>请选择市<span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">select</span><span class=\"p\">&gt;</span>\n​\n<span class=\"c\">&lt;!--加载jquery--&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;&lt;%=request.getContextPath() %&gt;/web/jquery-3.2.1.min.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n​\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"c1\">//只要页面加载完成之后就会执行其中的逻辑\n</span><span class=\"c1\"></span>    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n        <span class=\"nx\">getProvince</span><span class=\"p\">();</span>   <span class=\"c1\">//页面加载完成就调用这个方法发出异步请求\n</span><span class=\"c1\"></span>        \n    <span class=\"p\">});</span>\n    \n    <span class=\"c1\">//获取省份的方法\n</span><span class=\"c1\"></span>    <span class=\"kd\">function</span> <span class=\"nx\">getProvince</span><span class=\"p\">(){</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">url</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/menu/getProvince.do&#34;</span><span class=\"p\">;</span>  <span class=\"c1\">//异步请求的url\n</span><span class=\"c1\"></span>        <span class=\"kd\">var</span> <span class=\"nx\">d</span><span class=\"o\">=</span><span class=\"p\">{};</span>   <span class=\"c1\">//没有数据提交\n</span><span class=\"c1\"></span>        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span><span class=\"nx\">d</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span><span class=\"nx\">status</span><span class=\"p\">,</span><span class=\"nx\">xhr</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"s2\">&#34;success&#34;</span><span class=\"p\">){</span>\n                <span class=\"c1\">//循环遍历返回的JSON数组\n</span><span class=\"c1\"></span>                <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                    <span class=\"c1\">//创建option，用于插入节点\n</span><span class=\"c1\"></span>                    <span class=\"kd\">var</span> <span class=\"nx\">option</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;option value=&#34;</span> <span class=\"o\">+</span> <span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">code</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;&gt;&#34;</span><span class=\"o\">+</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">name</span><span class=\"o\">+</span><span class=\"s2\">&#34;&lt;/option&gt;&#34;</span><span class=\"p\">;</span>\n                    <span class=\"c1\">//将option插入到下拉列表中\n</span><span class=\"c1\"></span>                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#province&#34;</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">option</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">});</span> \n    <span class=\"p\">}</span>\n    \n    \n    <span class=\"c1\">//根据选择的省份获取市\n</span><span class=\"c1\"></span>    <span class=\"kd\">function</span> <span class=\"nx\">getCity</span><span class=\"p\">(){</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">province</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#province&#34;</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">();</span>  <span class=\"c1\">//获取下拉菜单的值，这里返回的是省份的编号\n</span><span class=\"c1\"></span>        <span class=\"kd\">var</span> <span class=\"nx\">url</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;%=request.getContextPath()%&gt;/menu/getCity.do&#34;</span><span class=\"p\">;</span>  <span class=\"c1\">//异步请求的url\n</span><span class=\"c1\"></span>        <span class=\"kd\">var</span> <span class=\"nx\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&#34;province&#34;</span><span class=\"o\">:</span><span class=\"nx\">province</span><span class=\"p\">};</span>   <span class=\"c1\">//将省份的编号传入\n</span><span class=\"c1\"></span>        \n        <span class=\"c1\">//每次都要清空之前的城市\n</span><span class=\"c1\"></span>        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#city&#34;</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"s2\">&#34;&lt;option value=&#39;-1&#39;&gt;请选择市&lt;/option&gt;&#34;</span><span class=\"p\">);</span>\n        \n        <span class=\"c1\">//如果用户点击了请选择省，那么返回的值就是-1，此时不需要发出异步请求\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">province</span><span class=\"o\">==-</span><span class=\"mi\">1</span><span class=\"p\">){</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>  \n        <span class=\"p\">}</span>\n        \n        <span class=\"c1\">//发出异步请求\n</span><span class=\"c1\"></span>        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span><span class=\"nx\">d</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span><span class=\"nx\">status</span><span class=\"p\">,</span><span class=\"nx\">xhr</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"o\">==</span><span class=\"s2\">&#34;success&#34;</span><span class=\"p\">){</span>\n                <span class=\"c1\">//如果返回的是一个空的，直接返回即可，不需要后续的操作\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">lengt</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">){</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"c1\">//循环遍历返回的JSON数组\n</span><span class=\"c1\"></span>                <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                    <span class=\"c1\">//创建option，用于插入节点\n</span><span class=\"c1\"></span>                    <span class=\"kd\">var</span> <span class=\"nx\">option</span><span class=\"o\">=</span><span class=\"s2\">&#34;&lt;option value=&#34;</span> <span class=\"o\">+</span> <span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">code</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;&gt;&#34;</span><span class=\"o\">+</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">name</span><span class=\"o\">+</span><span class=\"s2\">&#34;&lt;/option&gt;&#34;</span><span class=\"p\">;</span>\n                    <span class=\"c1\">//将option插入到下拉列表中\n</span><span class=\"c1\"></span>                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&#34;#city&#34;</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">option</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">});</span> \n    <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>在<code>Controller</code>编写方法<br/></li></ul><ol><li>展示页面的方法(<code>showMenu.do</code>)</li><li>返回<code>省份信息</code>的方法</li><li>返回<code>城市信息</code>方法</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"c1\">//显示页面\n</span><span class=\"c1\"></span>    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/showMenu.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">showMenu</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;menu&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n    <span class=\"c1\">//异步请求返回省份的信息\n</span><span class=\"c1\"></span>    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/getProvince.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Province</span><span class=\"o\">&gt;</span> <span class=\"nf\">getProvince</span><span class=\"o\">(){</span>\n        <span class=\"n\">Province</span> <span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Province</span><span class=\"o\">();</span>\n        <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;江苏&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">setCode</span><span class=\"o\">(</span><span class=\"n\">1001</span><span class=\"o\">);</span>\n        \n        <span class=\"n\">Province</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Province</span><span class=\"o\">();</span>\n        <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;山东&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"na\">setCode</span><span class=\"o\">(</span><span class=\"n\">1002</span><span class=\"o\">);</span>\n        \n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Province</span><span class=\"o\">&gt;</span> <span class=\"n\">provinces</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Province</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">provinces</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">);</span>\n        <span class=\"n\">provinces</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">provinces</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n    <span class=\"c1\">//异步获取城市信息的方法，这里没有操作数据库，仅仅是模拟，因此只要返回数据即可\n</span><span class=\"c1\"></span>    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/getCity.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"nd\">@ResponseBody</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">City</span><span class=\"o\">&gt;</span> <span class=\"nf\">getCity</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;province&#34;</span><span class=\"o\">)</span> <span class=\"n\">Integer</span> <span class=\"n\">code</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">City</span><span class=\"o\">&gt;</span> <span class=\"n\">cities</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">City</span><span class=\"o\">&gt;();</span>\n        \n        <span class=\"cm\">/**\n</span><span class=\"cm\">         * 如果这里涉及到数据库操作\n</span><span class=\"cm\">         *      1. 调用service的方法查询，service调用dao的方法查询\n</span><span class=\"cm\">         *      2. dao中的查询： 根据code查询出对应的城市即可，当然是联表查询\n</span><span class=\"cm\">         *      3. select c.name,c.code from city c join province p on c.provice_id=p.id;\n</span><span class=\"cm\">         *      4. mybatis调用第三步的查询语句，直接返回的就是List&lt;City&gt;集合\n</span><span class=\"cm\">         */</span>\n        \n        <span class=\"c1\">//这里省略if的判断，主要是看效果\n</span><span class=\"c1\"></span>        <span class=\"n\">City</span> <span class=\"n\">c1</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">City</span><span class=\"o\">();</span>\n        <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;南京&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"na\">setCode</span><span class=\"o\">(</span><span class=\"n\">123</span><span class=\"o\">);</span>\n        \n        <span class=\"n\">City</span> <span class=\"n\">c2</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">City</span><span class=\"o\">();</span>\n        <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">&#34;淮安&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"na\">setCode</span><span class=\"o\">(</span><span class=\"n\">1223</span><span class=\"o\">);</span>\n        <span class=\"n\">cities</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"o\">);</span>\n        <span class=\"n\">cities</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">c2</span><span class=\"o\">);</span>\n         \n        <span class=\"k\">return</span> <span class=\"n\">cities</span><span class=\"o\">;</span>   <span class=\"c1\">//返回集合\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>总结</b></h2><ul><li><b><code>springmvc</code>会通过<code>jackson</code>将返回给<code>ajax</code>请求的对象自动封装成<code>JSON对象</code>，那么在<code>JSP</code>页面我们就可以使用<code>JSON</code>的读取方式获取返回的数据即可</b></li></ul><p></p><p></p>", 
            "topic": [
                {
                    "tag": "jQuery", 
                    "tagLink": "https://api.zhihu.com/topics/19557964"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36346722", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Spring配置DBCP连接池", 
            "content": "<h2><b>Spring配置DBCP连接池</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>建立数据库配置文件jdbc.properties</b></h2><ul><li>在<code>resource</code>文件下新建一个<code>jdbc.properties</code>文件，内容如下</li><ul><li>在每一个键值对的后面不可以有空格，将光标移动到后面，如果紧贴着即可</li></ul></ul><p>​</p><div class=\"highlight\"><pre><code class=\"language-properties\">url=jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf8\ndriver=com.mysql.jdbc.Driver\nuser=root\npassword=root\ninitSize=5    \nmaxSize=10</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>在spring配置文件中配置<code>DBCP</code>数据源</li><ul><li>直接使用spring的表达式获取文件中的值即可</li></ul></ul><p>​</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!-- 加载db.properties --&gt;</span>\n    <span class=\"nt\">&lt;util:properties</span> <span class=\"na\">id=</span><span class=\"s\">&#34;dbConfig&#34;</span>\n        <span class=\"na\">location=</span><span class=\"s\">&#34;classpath:jdbc.properties&#34;</span> <span class=\"nt\">/&gt;</span>\n    \n    <span class=\"c\">&lt;!-- 数据源 --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;dataSource&#34;</span>\n        <span class=\"na\">class=</span><span class=\"s\">&#34;org.apache.commons.dbcp.BasicDataSource&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;url&#34;</span> \n            <span class=\"na\">value=</span><span class=\"s\">&#34;#{dbConfig.url}&#34;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;driverClassName&#34;</span> \n            <span class=\"na\">value=</span><span class=\"s\">&#34;#{dbConfig.driver}&#34;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;username&#34;</span> \n            <span class=\"na\">value=</span><span class=\"s\">&#34;#{dbConfig.user}&#34;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;password&#34;</span> \n            <span class=\"na\">value=</span><span class=\"s\">&#34;#{dbConfig.password}&#34;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"c\">&lt;!--初始化链接数量--&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;initialSize&#34;</span> \n            <span class=\"na\">value=</span><span class=\"s\">&#34;#{dbConfig.initSize}&#34;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"c\">&lt;!--最大链接数量--&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;maxActive&#34;</span> \n            <span class=\"na\">value=</span><span class=\"s\">&#34;#{dbConfig.maxSize}&#34;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span>\n    </code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36346693", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Spring MVC处理异常", 
            "content": "<p></p><h2><b>Spring MVC处理异常</b></h2><h2><b>关于异常</b></h2><ul><li>异常的体系结构：</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\">Throwable\n        Error\n            OutOfMemoryError（OOM）\n        Exception\n            RuntimeException\n                NullPointerException：某个为null的对象调用了属性或方法\n                ClassCastException：强制转换为不匹配的数据类型\n                ClassNotFoundException：尝试加载的类不存在\n                IndexOutOfBoundsException：使用List集合时使用了越界的索引\n                    ArrayIndexOutOfBoundsException：使用Array时使用了越界的索引\n            SQLException：数据库相关异常\n            IOException：输入输出（读写）异常\n                FileNotFoundException：文件找不到</code></pre></div><h2><b>在Spring MVC中处理异常</b></h2><ul><li>在Spring MVC中，提供了一种统一处理某种异常的机制，例如通过配置，可以对整个项目中的<code>NullPointerException</code>进行处理，那么，无论是项目的哪个环节出现该异常，都会自动按照配置的方式进行处理，而不用每个方法中逐一编写相关代码。</li></ul><h2><b>准备演示案例</b></h2><ul><li>创建项目<code>DAY07-SpringMVC-Exception</code>，设计请求路径：</li></ul><p><code>http://SERVER:PORT/PROJECT/ex1.do</code></p><p><code>http://SERVER:PORT/PROJECT/ex2.do</code></p><ul><li>以上3个请求将分别由<code>ex1.jsp</code>、<code>ex2.jsp</code>页面显示。</li></ul><h2><b>使用SimpleMappingExceptionResolver</b></h2><ul><li>在Spring MVC中，有<code>SimpleMappingExceptionResolver</code>类，用于配置<b>异常与View组件</b>的映射关系，如果确定某种异常出现后都会显示某个View组件，则在Spring的配置文件中：</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\">​\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">class=</span><span class=\"s\">&#34;xx.xx.SimpleMappingExceptionResolver&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;exceptionMappings&#34;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;props&gt;</span>\n                <span class=\"nt\">&lt;prop</span> <span class=\"na\">key=</span><span class=\"s\">&#34;异常类的全名&#34;</span><span class=\"nt\">&gt;</span>View组件名<span class=\"nt\">&lt;/prop&gt;</span>\n                <span class=\"nt\">&lt;prop</span> <span class=\"na\">key=</span><span class=\"s\">&#34;异常类的全名&#34;</span><span class=\"nt\">&gt;</span>View组件名<span class=\"nt\">&lt;/prop&gt;</span>\n                <span class=\"nt\">&lt;prop</span> <span class=\"na\">key=</span><span class=\"s\">&#34;异常类的全名&#34;</span><span class=\"nt\">&gt;</span>View组件名<span class=\"nt\">&lt;/prop&gt;</span>\n            <span class=\"nt\">&lt;props&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span>\n​</code></pre></div><ul><li>经过以上配置后，整个项目运行到任何位置，一旦出现以上配置过的异常，都会转发到匹配的View组件，在项目的各个方法中，不必再处理已经配置过的异常！</li><li>这种做法的不足在于：只要是同一种异常，都是转发到同一个View组件，无法根据实际运行状态进行更加细化的处理，例如无法提示是哪个值错误或者某些原因导致的异常。</li></ul><h2><b>使用@ExceptionHandler</b></h2><p><b>注意：使用SimpleMappingExceptionResolver处理异常时，不可以使用@ExceptionHandler！</b></p><ul><li>当需要统一处理异常时，可以在控制器类中自定义方法（方法名称自定义），并在方法上方添加<code>@ExceptionHandler</code>，与处理请求的方法类似，可以按需添加方法的参数，需要注意的，必须有<code>Exception</code>参数：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\">   <span class=\"nd\">@ExceptionHandler</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">handleException</span><span class=\"o\">(</span>\n        <span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span>\n        <span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">());</span>\n        \n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"k\">instanceof</span> <span class=\"n\">NullPointerException</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;error1&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"k\">instanceof</span> <span class=\"n\">ArrayIndexOutOfBoundsException</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;error2&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;error3&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span></code></pre></div><ul><li>这种做法，是作用于当前控制器类内部的所有请求的处理！对其它控制器类中的异常是没有影响的！</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>Spring MVC小结</b></h2><ol><li>解决MVC中V与C的关系的，即如何接收请求并响应；</li><li>在Spring的配置文件中，最主要的配置是组件扫描和ViewResolver；</li><li>重点掌握<code>@RequestMapping</code>注解，还有<code>@RequestParam</code>注解；</li><li>掌握在处理请求时，如何获取请求参数（2种）和封装转发数据（<code>ModelMap</code>）；</li><li>理解转发和重定向；</li><li>学会使用<code>Interceptor</code>；</li><li>学会处理异常。</li></ol>", 
            "topic": [
                {
                    "tag": "MVC", 
                    "tagLink": "https://api.zhihu.com/topics/19583976"
                }, 
                {
                    "tag": "Spring MVC", 
                    "tagLink": "https://api.zhihu.com/topics/20033636"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36197755", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 1, 
            "title": "Springmvc解决中文乱码问题", 
            "content": "<p></p><h2>Springmvc解决中文乱码问题</h2><ul><li>在表单提交的时候，如果遇到中文乱码的情况，springmvc提供了一个<code>CharacterEncodingFilter</code>过滤器，我们只需要在<code>web.xml</code>文件中配置即可</li></ul><h2>注意</h2><ol><li>表单的提交方式必须是<code>post</code></li><li>在<code>web.xml</code>中配置<code>CharacterEncodingFilter</code>编码格式要和<code>JSP</code>页面的编码格式一致</li><li>解决中文乱码必须使用过滤器(在DispatcherServlet之前执行)，而不能使用springmvc的拦截器，因为过滤器在<code>DispatcherServlet</code>之前，所以设置好编码后，<code>DispatcherServlet</code>和<code>Controller</code>都可以获取到正确的数据，而拦截器运行在<code>DispatcherServlet</code>之后，也即是意味着<code>DispatcherServlet</code>获取的数据已经是乱码，那么在拦截器中调整乱码是没有意义的</li></ol><h2>在<code>web.xml</code>配置</h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-xml\"> <span class=\"c\">&lt;!-- 配置 CharacterEncodingFilter解决中文乱码问题--&gt;</span>\n\t<span class=\"nt\">&lt;filter&gt;</span>\n\t\t<span class=\"nt\">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n\t\t<span class=\"nt\">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"nt\">&lt;/filter-class&gt;</span>\n\t\t\n\t\t<span class=\"c\">&lt;!-- 配置编码格式为UTF-8 --&gt;</span>\n\t\t<span class=\"nt\">&lt;init-param&gt;</span>\n\t\t\t<span class=\"nt\">&lt;param-name&gt;</span>encoding<span class=\"nt\">&lt;/param-name&gt;</span>\n\t\t\t<span class=\"nt\">&lt;param-value&gt;</span>UTF-8<span class=\"nt\">&lt;/param-value&gt;</span>\n\t\t<span class=\"nt\">&lt;/init-param&gt;</span>\n\t<span class=\"nt\">&lt;/filter&gt;</span>\n\t\n\t<span class=\"nt\">&lt;filter-mapping&gt;</span>\n\t\t<span class=\"nt\">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n\t\t<span class=\"nt\">&lt;url-pattern&gt;</span>/*<span class=\"nt\">&lt;/url-pattern&gt;</span>\n\t<span class=\"nt\">&lt;/filter-mapping&gt;</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36112651", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Springmvc之向JSP页面转发数据(request)", 
            "content": "<h2><b>Springmvc之向JSP页面转发数据(request)</b></h2><h2><b>准备</b></h2><ul><li><b>Springmvc默认就是转发,因此可以在request域中共享数据</b></li><li>表单提交，注册</li></ul><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;&lt;%=request.getContextPath()%&gt;/user/login.do&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;post&#34;</span><span class=\"p\">&gt;</span>\n    username:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;username&#34;</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    password:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;password&#34;</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    age:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;age&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;submit&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;提交&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span></code></pre></div><ul><li>User类</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getAge</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getUsername</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setUsername</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPassword</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setPassword</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;User [username=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">username</span> <span class=\"o\">+</span> <span class=\"s\">&#34;, password=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">password</span> <span class=\"o\">+</span> <span class=\"s\">&#34;]&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><h2><b>使用HttpServletRequest转发</b></h2><ul><li>直接使用<code>HttpServletRequest</code>中的<code>setAttribute(key,value)</code>即可添加属性值<code>request</code>域中，那么在JSP页面即可使用<code>EL表达式</code>获取</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">     * @param user 接收请求参数\n</span><span class=\"cm\">     * @param request   添加属性值request域中\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">,</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span><span class=\"n\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">setAttribute</span><span class=\"o\">(</span><span class=\"s\">&#34;user&#34;</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;error&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>【不常用】使用ModelAndView转发</b></h2><ul><li><code>ModelAndView</code>中本身就是用来存储数据和视图的，因此我们可以使用ModelAndView来传值</li><li><b><code>ModelAndView</code>会利用<code>HttpServletRequest</code>中的<code>setAttribute(key,value)</code>将数据存储在<code>requst</code>域中</b></li><li><code>Model</code>表示的就是转发的数据，可以通过<code>ModelAndView(String viewName,Map&lt;String,?&gt; map)</code>构造方法封装<code>Model</code>，其中<code>Model</code>的类型就是<code>Map&lt;String,?&gt;</code></li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">ModelAndView</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"c1\">//创建一个Map，存储数据\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">User</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">User</span><span class=\"o\">&gt;();</span>\n        <span class=\"c1\">//将获取的user对象存储进去\n</span><span class=\"c1\"></span>        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;user&#34;</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"c1\">//返回一个ModelAndView对象，第一个参数是视图，第二个是Map存储数据\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ModelAndView</span><span class=\"o\">(</span><span class=\"s\">&#34;error&#34;</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>【推荐使用】使用ModelMap转发</b></h2><ul><li>利用<code>HttpServletRequest</code>中的<code>setAtttibute()</code>添加数据到<code>request</code>域中</li><li>直接在处理请求的方法中，添加<code>ModelMap</code>类型的参数，当需要转发数据时，调用它的<code>addAttribute</code>方法封装数据，如果需要封装多条，多次调用即可</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">,</span><span class=\"n\">ModelMap</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"c1\">//将数据存储在ModelMap中\n</span><span class=\"c1\"></span>        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">addAttribute</span><span class=\"o\">(</span><span class=\"s\">&#34;user&#34;</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;error&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>拓展</b></h2><ul><li>从源代码可以看出，<code>ModelMap</code>实际上是实现了Map接口，因此我们也可以直接使用Map传值</li><ul><li>直接在方法的参数中声明即可，spring会自动注入</li></ul></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">,</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"c1\">//将数据存储在ModelMap中\n</span><span class=\"c1\"></span>        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;user&#34;</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;error&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Spring MVC", 
                    "tagLink": "https://api.zhihu.com/topics/20033636"
                }, 
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36110550", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "Springmvc之接受请求参数", 
            "content": "<h2><b>Springmvc之接受请求参数</b></h2><h2><b>准备工作</b></h2><ul><li>新建一个表单提交</li><ul><li>请求地址： <code>http://localhost:8080/ProjectName/user/login.do</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;&lt;%=request.getContextPath()%&gt;/user/login.do&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;post&#34;</span><span class=\"p\">&gt;</span>\n    username:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;username&#34;</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    password:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;password&#34;</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    age:<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;age&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;submit&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;提交&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span></code></pre></div><h2><b>【不推荐】HttpServletRequest</b></h2><ul><li>直接使用<code>HttpServeletRequest</code>作为方法参数，<code>spring</code>会自动为其注入</li><li>需要手动转换参数的类型</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span><span class=\"n\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">){</span>\n        <span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getParameter</span><span class=\"o\">(</span><span class=\"s\">&#34;username&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getParameter</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getParameter</span><span class=\"o\">(</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">));</span>  <span class=\"c1\">//转换类型\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">username</span><span class=\"o\">+</span><span class=\"s\">&#34;---&gt;&#34;</span><span class=\"o\">+</span><span class=\"n\">password</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;success&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>直接在方法中声明对应的参数(name的属性必须和方法参数一致)</b></h2><ul><li><b>表单中的<code>name</code>属性要和方法中的参数一致</b></li><li><b>涉及到类型转换，直接在方法中申明不同类型的参数即可</b></li><li>优点： 方便，并且可以使Springmvc自动处理数据类型</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">,</span><span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">username</span> <span class=\"o\">+</span> <span class=\"s\">&#34;---&gt;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">password</span><span class=\"o\">+</span><span class=\"s\">&#34;-----&gt;&#34;</span><span class=\"o\">+</span><span class=\"n\">age</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;success&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>【推荐】@RequestParam</b></h2><ul><li>使用该注解可以获取请求参数，方法中的参数可以与表单中的<code>name</code>属性不一致</li><li><b>使用<code>@RequestParam</code>这个获取的值必须包含在请求参数中，否则报错，除非设置<code>required</code>属性为<code>false</code></b></li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">     * 使用@RequestParam获取请求参数\n</span><span class=\"cm\">     * @RequestParam()中的value属性为form表单中对应的name属性\n</span><span class=\"cm\">     * 自动转换数据类型，只需要定义方法参数为所需的数据类型即可，spring会为我们自动转换\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;username&#34;</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n            <span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">pwd</span><span class=\"o\">,</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">)</span> <span class=\"n\">Integer</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">&#34;---&gt;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">pwd</span><span class=\"o\">+</span><span class=\"s\">&#34;-----&gt;&#34;</span><span class=\"o\">+</span><span class=\"n\">age</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;success&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>属性</b></h2><ul><li><code>value</code> 指定请求中对应的属性名称，这个就像表单中定义的name属性</li><li><code>required</code><br/>指定是否这个参数必须包含在请求地址中，默认是<code>true</code>，即是<b>如果不包含这个参数那么就会报错。</b></li><li><code>defaultValue</code> 指定默认的值，如果设置了<code>required=false</code>，并且没有设置这个值，那么默认的是<code>null</code>，但是也是可以使用这个属性来设置参数默认的值。当然对于设置了int类型的参数，那么并没有指定其值，那么将会报错，因为<code>int</code>类型没有<code>null</code>，只有<code>Integer</code>类型的才有，因此需要设置成Integer</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/*\n</span><span class=\"cm\">     * 这里的获取请求参数中的username，age的值\n</span><span class=\"cm\">     * 其中username的这个注解默认的是required=true，因此这个是不可以没有的\n</span><span class=\"cm\">     * age的这个注解设置了required=false，表示可以没有这个参数，但是如果没有这个参数，那么默认的是null，但是int类型的没有null，因此也会是报错的，有两种解决方式：\n</span><span class=\"cm\">     *      1) 通过defalutValue设置其默认的值\n</span><span class=\"cm\">     *      2) 如果我们就想要设其为null，可以使用封装类Integer类型即可\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/testRequestParams&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">testRequestParams</span><span class=\"o\">(</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;username&#34;</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">,</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;age&#34;</span><span class=\"o\">,</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"o\">)</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;username,age  &#34;</span><span class=\"o\">+</span> <span class=\"n\">username</span><span class=\"o\">+</span><span class=\"s\">&#34;  ,  &#34;</span><span class=\"o\">+</span><span class=\"n\">age</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">SUCCESS</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>【推荐】使用自定义数据类型(JavaBean)</b></h2><ul><li>如果传过来的请求参数很多，那么我们使用上面的方法获取请求参数，需要申明很多的方法参数。但是我们可以将传递过来的请求参数封装成一个<code>JavaBean</code>，那么我们直接传入一个JavaBean对象即可接收全部的请求参数。</li><li>声明一个User类，其中必须为每一个属性添加 <code>set</code>方法，并且其中的变量名要和表单中的<code>name</code>属性一致</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getAge</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getUsername</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setUsername</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPassword</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setPassword</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;User [username=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">username</span> <span class=\"o\">+</span> <span class=\"s\">&#34;, password=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">password</span> <span class=\"o\">+</span> <span class=\"s\">&#34;]&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><ul><li>那么我们此时的<code>UserController</code>中的<code>login</code>方法如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;success&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>总结</b></h2><ul><li>以上的所有方法并不冲突，可以混合使用</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">     * 混合使用案例\n</span><span class=\"cm\">    */</span>\n    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/login.do&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">login</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">,</span><span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">&#34;gender&#34;</span><span class=\"o\">)</span><span class=\"n\">String</span> <span class=\"n\">gender</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;success&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><ul><li>不建议使用<code>HttpServletRequest</code>方法获取，另外两种方法都是非常好用的方法，根据实际情况进行选取即可</li></ul>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }, 
                {
                    "tag": "Spring MVC", 
                    "tagLink": "https://api.zhihu.com/topics/20033636"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36110456", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 1, 
            "title": "Springmvc之RequestMapping", 
            "content": "<h2><b>Springmvc之RequestMapping</b></h2><h2><b>RequestMapping</b></h2><ul><li>标记客户的请求与哪一个类和方法对应</li><li>使用<code>@RequestMapping</code>同时对类和方法进行注解，相当于最终将这两处的注解路径拼接起来，比如类上使用<code>@RequestMapping(&#34;/user&#34;)</code>,在方法上使用<code>@RequestMapping(&#34;/login.do&#34;)</code>,那么拼接时访问的路径为<code>http://localhost:8080/ProjectName/user/login.do</code></li></ul><h2><b>属性</b></h2><ul><li><b><code>value</code></b> ： 默认的属性，表示映射的地址，如果只有这一个属性，那么默认可以不写value，比如<code>@RequestMapping(&#34;/login.do&#34;)</code>和<code>@RequestMapping(value=&#34;/login.do&#34;)</code>是一样的效果</li><li><b><code>method</code></b>：指定是请求的方式，我们知道请求的方式有<code>post</code>,<code>get</code>,<code>put</code>,<code>delete</code>。一般常用的是post,get，一旦我们在其中定义这个method属性，那么如果请求的方式不是这个method指定的属性值，那么就不会访问到这个方法。</li><ul><li>其实只要不指定这个<code>method</code>属性，无论是post还是get方式的都会执行这个方法，只有当其设置了<code>method</code>属性才会做限定</li><li>比如我们使用了 <code>@RequestMapping(value=&#34;login.do&#34;,method=RequestMethod.GET)</code>，但是我们使用表单提交的是<code>&lt;form action=&#34;&lt;%=request.getContextPath%&gt;/project/user/login.do&#34; method=&#34;post&#34;&gt;&lt;/form&gt;</code>,那么这个表单的请求就不会对应上面的注解的方法，因为表单的提交方式是<code>post</code>，但是RequestMapping定义的是<code>method</code>是<code>get</code>方式,会响应<code>405错误</code></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b><code>params</code></b> ： params是用来指定请求中包含的参数，其中的值是一个<b>字符串数组</b>的形式，并且这个还支持简答的表达式</li></ul><ol><li><code>param</code>: 表示请求参数中必须包含<code>param</code>这个参数至于为其赋予的值可以随便，但是必须包含这个字段</li><li><code>param!=value</code>： 表示请求参数中必须包含param这个参数，但是为其赋予的值不能等于value这个值，其他的什么值都是可以的</li><li><code>!param</code> ：表示请求参数中一定不能包含这个param字段，如果包含这个字段，那么将不能映射到这个地址</li><li><code>{“param1”，“param2”}</code> ： 指定请求参数中必须包含着两个请求参数，至于为其赋什么值随便</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/*\n</span><span class=\"cm\">     * 请求的参数中必须不能包含name属性，age必须不能等于12，必须包含sex，address必须等于xuzhou\n</span><span class=\"cm\">     */</span>\n<span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;/testParams&#34;</span><span class=\"o\">,</span><span class=\"n\">params</span><span class=\"o\">={</span><span class=\"s\">&#34;!name&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;age!=12&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;sex&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;address=xuzhou&#34;</span><span class=\"o\">})</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">testParams</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;testParams&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">SUCCESS</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><ul><li><b><code>headers</code></b> : <code>headers</code>和<code>params</code>同样是支持简单的表达式，同样是一个字符串数组，这里一样的是适用于上面的表达式</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/*\n</span><span class=\"cm\">     * 请求的参数中必须不能包含name属性，age必须不能等于12，必须包含sex，address必须等于xuzhou\n</span><span class=\"cm\">     * 请求头中的Accept-Language不能等于zh-CN,zh;q=0.8\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;/testParams&#34;</span><span class=\"o\">,</span><span class=\"n\">params</span><span class=\"o\">={</span><span class=\"s\">&#34;!name&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;age!=12&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;sex&#34;</span><span class=\"o\">,</span><span class=\"s\">&#34;address=xuzhou&#34;</span><span class=\"o\">},</span><span class=\"n\">headers</span><span class=\"o\">={</span><span class=\"s\">&#34;Accept-Language!=zh-CN,zh;q=0.8&#34;</span><span class=\"o\">})</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">testParams</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;testParams&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">SUCCESS</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>RequestMapping支持Ant风格的通配符</b></h2><ul><li>在学习struts2中的时候也是支持通配符调用的，比如<i>_</i>等。现在springmvc中也是支持通配符风格的，但是只支持Ant风格的，如下：</li><ul><li><code>？</code>： 表示一个任意的字符 springmvc/testAnt?<code>可以使用</code>springmvc/testAnta`这个地址来访问，其中最后一个a可以替换成任意的字符</li><li><code>*</code> : 表示支持多个任意的字符 <code>/spingmvc/testAnt/*</code> 可以使用<code>springmvc/testAnt/aaaaa</code>这个地址来访问，其中最后一层的路径可以使用任意的字符串替换</li><li><code>**</code> : 匹配多层路径 <code>/springmvc/testAnt/**</code> 可以使用<code>/springmvc/testAnt/user/test</code>这个来访问，当然也可以是多层的路径</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/*\n</span><span class=\"cm\">     * 这里的* 表示支持任意多个字符，因此这里可以使用:springmvc/testAnt/user这个地址来访问，其中最后一层use可以写成任意的字符串即可\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     */</span>\n    <span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;/testAnt/*&#34;</span><span class=\"o\">,</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">RequestMethod</span><span class=\"o\">.</span><span class=\"na\">GET</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">testAnt</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;testAnt&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">SUCCESS</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Spring MVC", 
                    "tagLink": "https://api.zhihu.com/topics/20033636"
                }, 
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36026153", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 0, 
            "title": "spring_day02", 
            "content": "<h2><b>spring_day02</b></h2><h2><b>【了解】Spring管理对象的生命周期(只有在单例的模式有意义，这个是默认的)</b></h2><ul><li>由spring管理的对象可以有生命周期方法，这些生命周期方法是开发人员自定义的，方法名自定义，无参数</li><li>由spring管理的对象的类可以有初始化和销毁这两种生命周期方法，按需设计即可。</li><li><b>因为是spring自己调用的，因此要设置为无参数，无返回值的方法。</b></li></ul><h2><b>为单个bean指定生命周期方法</b></h2><ul><li>实例：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"c1\">//person类的初始化方法\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;初始化方法&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">destory</span><span class=\"o\">(){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;销毁方法&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>在spring配置文件中配置</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!--\n</span><span class=\"c\">        init-method ： 定义初始化方法，直接写上方法名称即可\n</span><span class=\"c\">        destroy-method： 定义销毁方法，直接写上方法名即可\n</span><span class=\"c\">     --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Person&#34;</span> <span class=\"na\">init-method=</span><span class=\"s\">&#34;init&#34;</span> <span class=\"na\">destroy-method=</span><span class=\"s\">&#34;destory&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span></code></pre></div><h2><b>为容器中所有的bean指定生命周期方法</b></h2><ul><li>可以在顶级节点中添加<code>default-init-method</code>指定初始化方法和添加<code>default-destroy-method</code>指定销毁方法</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;beans</span> <span class=\"na\">default-init-method=</span><span class=\"s\">&#34;init&#34;</span> <span class=\"na\">default-destroy-method=</span><span class=\"s\">&#34;destroy&#34;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;person&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.bean.Person&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span></code></pre></div><h2><b>【重要】注入属性值</b></h2><h2><b>实现目标</b></h2><ul><li>由spring管理的对象，其属性值可以为其中的某些属性注入值，是的最终获取对象时，属性就已经有值了</li></ul><h2><b>Setter注入</b></h2><h2><b>前提</b></h2><ul><li>必须为每一个属性添加<code>set</code>方法</li></ul><h2><b>基本数据类型变量的注入</b></h2><h2><b>实现</b></h2><ul><li>新建一个Person的实体类如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getAge</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>在配置文件中配置bean</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;person&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Person&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"c\">&lt;!-- 直接使用property配置参数\n</span><span class=\"c\">            name：指定属性的字段，这个是set方法后面的单词首字母小写的值，比如SetUsername()，那么此时的name值为username\n</span><span class=\"c\">            value： 指定属性的值\n</span><span class=\"c\">            ref : 指定前面定义的bean的id，用于设置引用类型的参数值\n</span><span class=\"c\">         --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;陈加兵&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;age&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;22&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span></code></pre></div><ul><li><b>注意</b>： 在配置XML文件时，节点中的name属性的值其实是Java代码中Set方法名称中除去set单词并且将首字母小写后的名称，例如Set方法的名称为<code>setAge</code>，那么其中的name属性的值就是<code>age</code>。所以这个name属性的值并不是java代码中的属性名称，只不过通常在java代码中，基于代码规范，这里的name属性值也是java代码中的属性名称。</li></ul><h2><b>引用类型的属性注入</b></h2><ul><li>引用类型即是在一个类中包含另外一个类的对象，即是一个类的成员变量是另外一个类的对象</li></ul><h2><b>实现</b></h2><ul><li>新建一个Address类</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Address</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">city</span><span class=\"o\">;</span>  <span class=\"c1\">//城市\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">pro</span> <span class=\"o\">;</span>  <span class=\"c1\">//省份\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getCity</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">city</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setCity</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">city</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">city</span> <span class=\"o\">=</span> <span class=\"n\">city</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPro</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">pro</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setPro</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">pro</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">pro</span> <span class=\"o\">=</span> <span class=\"n\">pro</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>新建一个Person类，其中包含了Address这个类的对象</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Address</span> <span class=\"n\">address</span><span class=\"o\">;</span> <span class=\"c1\">// Address的对象作为成员变量\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">public</span> <span class=\"n\">Address</span> <span class=\"nf\">getAddress</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">address</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAddress</span><span class=\"o\">(</span><span class=\"n\">Address</span> <span class=\"n\">address</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">address</span> <span class=\"o\">=</span> <span class=\"n\">address</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getAge</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>在配置文件中配置实例</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!-- 创建一个Address的实例 --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;address&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Address&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;city&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;无锡&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;pro&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;江苏&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span>\n\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;person&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Person&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;陈加兵&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;age&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;22&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- 这里的ref引用的是上面配置的Address的实例中的id值 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;address&#34;</span> <span class=\"na\">ref=</span><span class=\"s\">&#34;address&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span></code></pre></div><h2><b>【了解】构造器注入(无参，有参)</b></h2><ul><li>在前面已经讲过了无参构造注入，直接使用<code>&lt;bean id=&#34;&#34; class=&#34;&#34;&gt;</code>即可</li></ul><h2><b>前提</b></h2><ul><li>有一个构造有参构造方法</li></ul><h2><b>实现</b></h2><ul><li>创建一个Person类</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"c1\">//构造方法\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getAge</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAge</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>配置spring的配置文件</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;person&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Person&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"c\">&lt;!--\n</span><span class=\"c\">            name: 这个相当于index，也是指定参数列表的属性，不过这里是直接使用参数列表中的变量名\n</span><span class=\"c\">            value: 为参数设置的值\n</span><span class=\"c\">            index: 构造方法的参数列表的索引，从0开始\n</span><span class=\"c\">            ref:引用类型的值，这里的值应该是上面已经定义好的bean的id值\n</span><span class=\"c\">         --&gt;</span>\n        <span class=\"nt\">&lt;constructor-arg</span> <span class=\"na\">index=</span><span class=\"s\">&#34;0&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;陈加兵&#34;</span><span class=\"nt\">&gt;&lt;/constructor-arg&gt;</span>\n        <span class=\"nt\">&lt;constructor-arg</span> <span class=\"na\">index=</span><span class=\"s\">&#34;1&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;22&#34;</span><span class=\"nt\">&gt;&lt;/constructor-arg&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span></code></pre></div><h2><b>注入基本型</b></h2><ul><li>在spring注入值时，如果值的类型是String或者java中的基本数据类型，都称之为基本型，而其他的都是”非基本型“的数据</li></ul><h2><b>注入非基本型(ref)</b></h2><ul><li>前面所说的<code>引用类型的注入</code>就是基本型的注入，这里不再详细的讲述</li></ul><h2><b>注入集合</b></h2><ul><li>集合类型有<code>List</code>，<code>Set</code>，<code>Map</code>，<code>Properties</code></li></ul><h2><b>实现</b></h2><ul><li>创建一个Message类，其中定义了各种集合类型的成员属性，并且添加了<code>set</code>方法</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Message</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">cities</span><span class=\"o\">;</span>   <span class=\"c1\">//城市 。List集合\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">friend</span><span class=\"o\">;</span>   <span class=\"c1\">//Set集合\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">bookes</span><span class=\"o\">;</span>  <span class=\"c1\">//Map集合\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"n\">Properties</span> <span class=\"n\">properties</span><span class=\"o\">;</span>   <span class=\"c1\">//Properties集合\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getCities</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">cities</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setCities</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">cities</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">cities</span> <span class=\"o\">=</span> <span class=\"n\">cities</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getFriend</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">friend</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setFriend</span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">friend</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">friend</span> <span class=\"o\">=</span> <span class=\"n\">friend</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getBookes</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">bookes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setBookes</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">bookes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">bookes</span> <span class=\"o\">=</span> <span class=\"n\">bookes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Properties</span> <span class=\"nf\">getProperties</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">properties</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setProperties</span><span class=\"o\">(</span><span class=\"n\">Properties</span> <span class=\"n\">properties</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">properties</span> <span class=\"o\">=</span> <span class=\"n\">properties</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>在spring的配置文件中配置注入</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;message&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Message&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"c\">&lt;!-- List集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;cities&#34;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;list&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>徐州<span class=\"nt\">&lt;/value&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>无锡<span class=\"nt\">&lt;/value&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>常州<span class=\"nt\">&lt;/value&gt;</span>\n            <span class=\"nt\">&lt;/list&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- Set集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;friend&#34;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;set&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>Jack<span class=\"nt\">&lt;/value&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>Tom<span class=\"nt\">&lt;/value&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>陈加兵<span class=\"nt\">&lt;/value&gt;</span>\n            <span class=\"nt\">&lt;/set&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- Map集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;bookes&#34;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;map&gt;</span>\n                <span class=\"nt\">&lt;entry</span> <span class=\"na\">key=</span><span class=\"s\">&#34;1001&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;java编程基础&#34;</span><span class=\"nt\">&gt;&lt;/entry&gt;</span>\n                <span class=\"nt\">&lt;entry</span> <span class=\"na\">key=</span><span class=\"s\">&#34;1002&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;java编程思想&#34;</span><span class=\"nt\">&gt;&lt;/entry&gt;</span>\n            <span class=\"nt\">&lt;/map&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- properties的集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;properties&#34;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;props&gt;</span>\n                <span class=\"nt\">&lt;prop</span> <span class=\"na\">key=</span><span class=\"s\">&#34;username&#34;</span><span class=\"nt\">&gt;</span>root<span class=\"nt\">&lt;/prop&gt;</span>\n                <span class=\"nt\">&lt;prop</span> <span class=\"na\">key=</span><span class=\"s\">&#34;password&#34;</span><span class=\"nt\">&gt;</span>root<span class=\"nt\">&lt;/prop&gt;</span>\n            <span class=\"nt\">&lt;/props&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span></code></pre></div><ul><li>测试方法</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Test</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">test2</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// spring的配置文件\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"s\">&#34;applicationContext.xml&#34;</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 获取spring容器\n</span><span class=\"c1\"></span>        <span class=\"n\">AbstractApplicationContext</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span>\n                <span class=\"n\">conf</span><span class=\"o\">);</span>\n        <span class=\"n\">Message</span> <span class=\"n\">message</span><span class=\"o\">=(</span><span class=\"n\">Message</span><span class=\"o\">)</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">&#34;message&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">cities</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">getCities</span><span class=\"o\">();</span>\n        <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">friends</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">getFriend</span><span class=\"o\">();</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">bookes</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">getBookes</span><span class=\"o\">();</span>\n        <span class=\"n\">Properties</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">getProperties</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">cities</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">friends</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">bookes</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">properties</span><span class=\"o\">);</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>【重点了解Properties的注入】引用方式注入集合(<code>&lt;util:&gt;</code>)</b></h2><ul><li>其中的<code>ref</code>指定的是配置集合的<code>id</code></li><li>使用的还是上面的<code>Message</code>类</li><li>在<code>resource</code>中需要新建一个<code>jdbc.properties</code>，我们便可以在spring的配置文件中使用<code>&lt;util:properties id=&#34;&#34; location=&#34;classpath:jdbc.properties&#34;&gt;</code>自动的读取其中的值</li></ul><div class=\"highlight\"><pre><code class=\"language-properties\">root=root\npassword=root\nurl=jdbc:mysql://localhost:3306/hirbernate?useUnicode=true&amp;characterEncoding=UTF-8\ndriver=com.mysql.jdbc.Driver</code></pre></div><ul><li>spring的配置文件中配置bean</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;util:list</span> <span class=\"na\">id=</span><span class=\"s\">&#34;cities&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>徐州<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>无锡<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>常州<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;/util:list&gt;</span>\n\n    <span class=\"nt\">&lt;util:set</span> <span class=\"na\">id=</span><span class=\"s\">&#34;friends&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>Jack<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>Tom<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>陈加兵<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;/util:set&gt;</span>\n\n    <span class=\"nt\">&lt;util:map</span> <span class=\"na\">id=</span><span class=\"s\">&#34;bookes&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;entry</span> <span class=\"na\">key=</span><span class=\"s\">&#34;1001&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;java编程基础&#34;</span><span class=\"nt\">&gt;&lt;/entry&gt;</span>\n        <span class=\"nt\">&lt;entry</span> <span class=\"na\">key=</span><span class=\"s\">&#34;1002&#34;</span> <span class=\"na\">value=</span><span class=\"s\">&#34;java编程思想&#34;</span><span class=\"nt\">&gt;&lt;/entry&gt;</span>\n    <span class=\"nt\">&lt;/util:map&gt;</span>\n\n    <span class=\"c\">&lt;!-- 引入外部的Properties文件，location指定的就是位置 --&gt;</span>\n    <span class=\"nt\">&lt;util:properties</span> <span class=\"na\">id=</span><span class=\"s\">&#34;properties&#34;</span> <span class=\"na\">location=</span><span class=\"s\">&#34;classpath:jdbc.properties&#34;</span><span class=\"nt\">&gt;&lt;/util:properties&gt;</span>\n\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;message&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Message&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"c\">&lt;!-- List集合的注入 ref指定的上面定义的List的id --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;cities&#34;</span> <span class=\"na\">ref=</span><span class=\"s\">&#34;cities&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- Set集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;friend&#34;</span> <span class=\"na\">ref=</span><span class=\"s\">&#34;friends&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- Map集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;bookes&#34;</span> <span class=\"na\">ref=</span><span class=\"s\">&#34;bookes&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n\n        <span class=\"c\">&lt;!-- properties的集合的注入 --&gt;</span>\n        <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&#34;properties&#34;</span> <span class=\"na\">ref=</span><span class=\"s\">&#34;properties&#34;</span><span class=\"nt\">&gt;&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/bean&gt;</span></code></pre></div><h2><b>自动装配</b></h2>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35957627", 
            "userName": "小名", 
            "userLink": "https://www.zhihu.com/people/a54e5988bcb0665e9001d9e6ffcff0eb", 
            "upvote": 1, 
            "title": "spring_day01", 
            "content": "<h2><b>spring_day01</b></h2><h2><b>SSM框架</b></h2><ul><li>Spring + springMVC + mybatis</li></ul><h2><b>作用</b></h2><ul><li>管理对象： 当开发人员需要某一个类的对象时，不需要自行new对象，而是通过spring直接获取即可</li></ul><h2><b>使用</b></h2><h2><b>【掌握】通过spring获取存在无参构造方法类的对象</b></h2><ul><li>创建Maven Project</li><li>当项目创建好之后，生成web.xml，解决默认提示错误</li><li>选择tomcat, 项目右击 - &gt; properties -&gt; Target Runtimes</li><li>打开 <code>http://mvnrepository.com</code>，搜索<code>springwebmvc</code>，在结果中找到的<code>Group</code>是<code>org.springframework</code>,选择版本，并且复制xml代码</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.springframework<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>spring-webmvc<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>4.3.12.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><ul><li>配置spring的配置文件(applicationContext.xml)</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!-- id： 自定义名称\n</span><span class=\"c\">        class : 需要spring管理的类的路径\n</span><span class=\"c\">     --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;date&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;java.util.Date&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span></code></pre></div><ul><li>测试</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.Date</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.support.AbstractApplicationContext</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestDemo1</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//spring的配置文件\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">conf</span><span class=\"o\">=</span><span class=\"s\">&#34;applicationContext.xml&#34;</span><span class=\"o\">;</span>\n        <span class=\"c1\">//获取spring容器\n</span><span class=\"c1\"></span>        <span class=\"n\">AbstractApplicationContext</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span><span class=\"n\">conf</span><span class=\"o\">);</span>\n        <span class=\"c1\">//获取配置文件中指定的bean，参数是自定义的id\n</span><span class=\"c1\"></span>        <span class=\"n\">Date</span> <span class=\"n\">date</span><span class=\"o\">=(</span><span class=\"n\">Date</span><span class=\"o\">)</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">&#34;date&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//打印出日期，对象创建成功\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">date</span><span class=\"o\">);</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2><b>内存泄露或者内存溢出</b></h2><ul><li>当需要释放某个对象所占用的内存空间时，如果对象没有正确关闭，将导致无法释放，由于这个对象可能已经没有了引用，这个对象再也无法使用，却一直被误认为被使用，就会变成长期存在于内存中的垃圾数据，就是内存泄露</li><li>其实少量的内存泄露是灭有危害的。但是如果存在大量的内存泄露，就可导致可用内存明显变少，计算机的运行性能就会下降，当内存泄露到极点的时候，就会溢出。尽管少量的内存泄露是没有危害的，但是应该严谨的编程，尽量不要出现内存泄露</li></ul><h2><b>【了解】通过spring获取类中不存在无参构造方法，但是存在静态工厂方法类的对象</b></h2><ul><li>我们使用spring获取<code>java.util.Calendar</code>的对象</li><li><code>factory-method</code> ： 这个属性指定的静态工厂方法</li><li>在spring的配置文件中配置这个对象</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!-- 通过静态工厂方法创建对象\n</span><span class=\"c\">        id ： 自定义的名称\n</span><span class=\"c\">        class： 类的全路径\n</span><span class=\"c\">        factory-method ： 静态工厂方法\n</span><span class=\"c\">     --&gt;</span>\n    <span class=\"nt\">&lt;bean</span>  <span class=\"na\">id=</span><span class=\"s\">&#34;calendar&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;java.util.Calendar&#34;</span> <span class=\"na\">factory-method=</span><span class=\"s\">&#34;getInstance&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span></code></pre></div><ul><li>测试</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Test</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">testStatice</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// spring的配置文件\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"s\">&#34;applicationContext.xml&#34;</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 获取spring容器\n</span><span class=\"c1\"></span>        <span class=\"n\">AbstractApplicationContext</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ClassPathXmlApplicationContext</span><span class=\"o\">(</span>\n                <span class=\"n\">conf</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 获取配置文件中指定的bean，参数是自定义的id\n</span><span class=\"c1\"></span>        <span class=\"n\">Calendar</span> <span class=\"n\">calendar</span><span class=\"o\">=(</span><span class=\"n\">Calendar</span><span class=\"o\">)</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getBean</span><span class=\"o\">(</span><span class=\"s\">&#34;calendar&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 打印出日期，对象创建成功\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"na\">getTime</span><span class=\"o\">());</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span></code></pre></div><h2><b>【了解】类中不存在无参构造方法，也没有静态工厂方法，但是存在实例工厂方法</b></h2><h2><b>实例工厂方法</b></h2><ul><li>实例工厂方法： 指另一个类中有工厂方法，可以获取目标类型的对象，即X类中有工厂方法(非静态的)可以获取Y类的对象</li></ul><h2><b>实例</b></h2><ul><li>假设存在PhoneFactory类中，该类中有非静态方法getPhone()可以获取Phon类型的对象，并且Phone没有无参构造方法</li><li>Phone</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Phone</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">Phone</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>PhoneFactory</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">PhoneFactory</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Phone</span> <span class=\"nf\">getPhone</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Phone</span><span class=\"o\">(</span><span class=\"s\">&#34;小米6&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>spring配置文件</li><ul><li><code>factory-bean</code> ： 是工厂类的id</li><li><code>factory-method</code> ： 工厂类获取Phone对象的非静态的方法</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!-- 配置工厂类 --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;phoneFactory&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.PhoneFactory&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span>\n\n    <span class=\"c\">&lt;!-- 配置Phone类的对象\n</span><span class=\"c\">        factory-bean ： 是工厂类的id\n</span><span class=\"c\">        factory-method ： 工厂类获取Phone对象的非静态的方法\n</span><span class=\"c\">     --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;phone&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;cn.tedu.spring.beans.Phone&#34;</span> <span class=\"na\">factory-bean=</span><span class=\"s\">&#34;phoneFactory&#34;</span> <span class=\"na\">factory-method=</span><span class=\"s\">&#34;getPhone&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span></code></pre></div><h2><b>Bean的作用域(<code>Scope</code>)</b></h2><ul><li>默认情况下，由spring配置的对象是单例的</li><li>在配置时，在<code>&lt;bean&gt;</code>节点添加<code>scope</code>属性即可调整，当该属性为<code>singleton</code>时是单例的，当属性为<code>prototype</code>为非单例的</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!-- id： 自定义名称\n</span><span class=\"c\">        class : 需要spring管理的类的路径\n</span><span class=\"c\">     --&gt;</span>\n    <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;date&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;java.util.Date&#34;</span> <span class=\"na\">scope=</span><span class=\"s\">&#34;prototype&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span></code></pre></div><h2><b>单例</b></h2><h2><b>懒加载</b></h2><ul><li>在默认情况下，spring创建对象的是使用饿汉式，即是在spring配置文件开始加载的时候就创建对象，但是我们可以使用<code>lazy-init</code>取值我<code>true</code>的时候，就会使用懒加载(懒汉式)</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&#34;date&#34;</span> <span class=\"na\">class=</span><span class=\"s\">&#34;java.util.Date&#34;</span> <span class=\"na\">scope=</span><span class=\"s\">&#34;singleton&#34;</span> <span class=\"na\">lazy-init=</span><span class=\"s\">&#34;true&#34;</span><span class=\"nt\">&gt;&lt;/bean&gt;</span></code></pre></div><h2><b>spring配置文件的全部约束</b></h2><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>\n<span class=\"nt\">&lt;beans</span> <span class=\"na\">xmlns=</span><span class=\"s\">&#34;http://www.springframework.org/schema/beans&#34;</span>\n    <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>\n    <span class=\"na\">xmlns:context=</span><span class=\"s\">&#34;http://www.springframework.org/schema/context&#34;</span>\n    <span class=\"na\">xmlns:jdbc=</span><span class=\"s\">&#34;http://www.springframework.org/schema/jdbc&#34;</span>\n    <span class=\"na\">xmlns:jee=</span><span class=\"s\">&#34;http://www.springframework.org/schema/jee&#34;</span>\n    <span class=\"na\">xmlns:tx=</span><span class=\"s\">&#34;http://www.springframework.org/schema/tx&#34;</span>\n    <span class=\"na\">xmlns:aop=</span><span class=\"s\">&#34;http://www.springframework.org/schema/aop&#34;</span>\n    <span class=\"na\">xmlns:mvc=</span><span class=\"s\">&#34;http://www.springframework.org/schema/mvc&#34;</span>\n    <span class=\"na\">xmlns:util=</span><span class=\"s\">&#34;http://www.springframework.org/schema/util&#34;</span>\n    <span class=\"na\">xmlns:jpa=</span><span class=\"s\">&#34;http://www.springframework.org/schema/data/jpa&#34;</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">&#34;\n</span><span class=\"s\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd\n</span><span class=\"s\">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd&#34;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/beans&gt;</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_181916433"
}
