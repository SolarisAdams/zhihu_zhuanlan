{
    "title": "E-臻谈云计算", 
    "description": "学习云计算，从一点一滴做起！", 
    "followers": [
        "https://www.zhihu.com/people/xiao-huang-37", 
        "https://www.zhihu.com/people/gong-guo-liu-ren-jian", 
        "https://www.zhihu.com/people/fan-xin-fei-xiang-97", 
        "https://www.zhihu.com/people/myslience", 
        "https://www.zhihu.com/people/zhe-ge-11-93", 
        "https://www.zhihu.com/people/zshyuan", 
        "https://www.zhihu.com/people/li-gou-jun", 
        "https://www.zhihu.com/people/kakaFT", 
        "https://www.zhihu.com/people/tang-dong-jun", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/wo-ai-du-shu-47", 
        "https://www.zhihu.com/people/hui-tian-mie-di-jiecao", 
        "https://www.zhihu.com/people/hijackjave", 
        "https://www.zhihu.com/people/mardel-60", 
        "https://www.zhihu.com/people/hzglitter", 
        "https://www.zhihu.com/people/chu-bu-chu-39", 
        "https://www.zhihu.com/people/pi-te-ou-de-man", 
        "https://www.zhihu.com/people/liu-jing-yan-19-38", 
        "https://www.zhihu.com/people/da-zhu-36-24", 
        "https://www.zhihu.com/people/liu-gong-zheng-55", 
        "https://www.zhihu.com/people/BlackPwn", 
        "https://www.zhihu.com/people/zcnhonker", 
        "https://www.zhihu.com/people/sun-cheng-ke-87", 
        "https://www.zhihu.com/people/a-xu-50-22", 
        "https://www.zhihu.com/people/zhonghao-liao-920711", 
        "https://www.zhihu.com/people/zhang-yan-9-8", 
        "https://www.zhihu.com/people/liu-fei-94-95", 
        "https://www.zhihu.com/people/i-87-26", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/ailx10", 
        "https://www.zhihu.com/people/deng-si-yuan-95-68", 
        "https://www.zhihu.com/people/zhangsan-97-39", 
        "https://www.zhihu.com/people/bai-feng-xiang-59", 
        "https://www.zhihu.com/people/zi-mu-zhu-63", 
        "https://www.zhihu.com/people/xi-bo-li-ya-aa1", 
        "https://www.zhihu.com/people/jun-jie-zhu-34", 
        "https://www.zhihu.com/people/hu-xiao-sa-75", 
        "https://www.zhihu.com/people/xi-dao-ai-li"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/86669056", 
            "userName": "义臻", 
            "userLink": "https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf", 
            "upvote": 1, 
            "title": "走进SAML——基础篇", 
            "content": "<p>  SAML的全称是<code>Security Assertion Markup Language</code>。提到SAML，我们主要想到的是其在各种单点登录场景中大行其道。单点登录我们通常叫做SSO，那么SAML到底是如何实现SSO的呢？在这个系列的文章中，我将为大家阐释清楚。不过，水是有源的，树是有根的。一切的一切，还得从非对称密码学谈起！</p><h3>密码学新方向</h3><p>  1976年，两个斯坦福大学的杰出学者，在经过了三年的合作之后，发表了一篇题为《密码学的新方向》的文章。这篇论文首次引入了公共密钥加密协议与数字签名的概念。谁也想不到，短短几十年后，这篇文章构成了现代互联网加密协议的基石。就是这两位帅爷爷和萌蜀黍！！！ </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b0d24c77bee850970b8be67357b7023e_b.jpg\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"354\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic3.zhimg.com/v2-b0d24c77bee850970b8be67357b7023e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;354&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"354\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic3.zhimg.com/v2-b0d24c77bee850970b8be67357b7023e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b0d24c77bee850970b8be67357b7023e_b.jpg\"/><figcaption>图1 《密码学的新方向》作者（图片来源于网络）</figcaption></figure><p>  和对称密码基于单个共享密钥的方式不同，非对称密码始终是成对出现：<code>公钥和私钥</code>。由其中任何一个密钥加密的数据只能由另外一个密钥解密。即，<i>由私钥加密的数据只能由公钥解密，由公钥加密的数据只能由私钥解密</i>。非对称密码的这个特点使其在密钥交换和数字签名领域被广泛应用。</p><h3>密钥交换的灵感</h3><p>  在需要加密的网络通信场景中，最常见的加密方式是基于共享密钥的对称加密方式。通信过程如下：</p><blockquote> 消息发送方和接收方事先约定好一把对称密钥K。然后，消息发送方使用密钥K对要发送的消息进行加密，并将加密后的结果通过网络发送给消息接收方。消息接收方利用密钥K对接受到的内容进行解密，并获得原始消息。</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ac023f32b14efa391a104c4072f18888_b.jpg\" data-size=\"normal\" data-rawwidth=\"1340\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb\" width=\"1340\" data-original=\"https://pic1.zhimg.com/v2-ac023f32b14efa391a104c4072f18888_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1340&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1340\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1340\" data-original=\"https://pic1.zhimg.com/v2-ac023f32b14efa391a104c4072f18888_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ac023f32b14efa391a104c4072f18888_b.jpg\"/><figcaption>图2 利用共享密钥加密进行数据传输</figcaption></figure><p>  由于共享密钥K只被消息发送方和接收方持有。因此，即便数据在传输过程中被劫持，攻击者由于没有密钥K，也无法获得原始消息内容。</p><p>  但是问题来了，如何事先约定好密钥？如果消息发送方和接收方物理位置很近，还可以通过线下见面的方式约定密钥。但如果通信双方距离十万八千里呢？显然，线下约定的方式是不现实的。那么是否可以找到一种安全的方式，让通信双方基于网络就可以约定共享密钥呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6cca6c20268d6b50c990047f64b1a185_b.jpg\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic2.zhimg.com/v2-6cca6c20268d6b50c990047f64b1a185_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;351&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic2.zhimg.com/v2-6cca6c20268d6b50c990047f64b1a185_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6cca6c20268d6b50c990047f64b1a185_b.jpg\"/><figcaption>图3 真相永远只有一个</figcaption></figure><p><code>真相永远只有一个</code>:利用非对称密码学的机制进行密钥交换。消息接收方提前生成一对公私钥，并将公钥PubK广播出去，私钥PriK自己保存。有了这个前提条件，就可以安全的约定对称密钥了。过程如下：</p><blockquote>消息发送方获取被广播的消息接收方的PubK，并使用该PubK对要传输的对称密钥K进行加密，并将加密之后的内容通过网络传输给接收方。消息接收方在收到加密内容之后，使用对应的PriK进行解密得到对称密钥K。 </blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ea7d4b2de376ccec124b994dab987d2c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1338\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"1338\" data-original=\"https://pic1.zhimg.com/v2-ea7d4b2de376ccec124b994dab987d2c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1338&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1338\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1338\" data-original=\"https://pic1.zhimg.com/v2-ea7d4b2de376ccec124b994dab987d2c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ea7d4b2de376ccec124b994dab987d2c_b.jpg\"/><figcaption>图4 利用非对称密码学的机制进行密钥交换</figcaption></figure><p>   由于PriK只被接收方持有。因此，即便数据在传输过程中被劫持，攻击者由于没有私钥PriK，也无法获得原始消息内容。以这种方式，就解决了对称密钥传输的问题！</p><h3>数字签名防伪造</h3><p>  在密钥交换的过程中，有一个步骤值得商榷：消息发送方获取被广播的消息接收方的PubK。这里面涉及一个认证的问题，怎么证明一个PubK就是接收方的PubK呢？如果出现黑客伪造接收方的PubK怎么办？就像下图酱紫。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-27f73060bb65a657e721a51edd07c80a_b.jpg\" data-size=\"normal\" data-rawwidth=\"1322\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb\" width=\"1322\" data-original=\"https://pic3.zhimg.com/v2-27f73060bb65a657e721a51edd07c80a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1322&#39; height=&#39;546&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1322\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1322\" data-original=\"https://pic3.zhimg.com/v2-27f73060bb65a657e721a51edd07c80a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-27f73060bb65a657e721a51edd07c80a_b.jpg\"/><figcaption>图5 黑客伪造接收方的公钥</figcaption></figure><p><code>真相永远只有一个</code>:数字签名。所谓数字签名，就是一个有公信力的权威机构用它自己的私钥对某些数据进行签名(<i>通常称私钥加密为签名</i>)，以证明这些数据是可被信任的。</p><blockquote> 权威机构用自己的私钥将接收方的公钥PubK进行签名，消息发送方在收到签名后，利用权威机构对应的公钥解密以验证签名。如果验证通过，说明当前接收的PubK是经过认证的，是可以被信任。反之，攻击方的公钥是没有被认证的，是不可信任的。 </blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a0d3d653157875e63fbd065472a9f772_b.jpg\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1500\" data-original=\"https://pic3.zhimg.com/v2-a0d3d653157875e63fbd065472a9f772_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1500&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1500\" data-original=\"https://pic3.zhimg.com/v2-a0d3d653157875e63fbd065472a9f772_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a0d3d653157875e63fbd065472a9f772_b.jpg\"/><figcaption>图6 权威机构使用其私钥对信息签名</figcaption></figure><p>   通过权威机构私钥加签的方式，保证了PubK来源的可靠性。<code>那么谁是权威机构？恭喜你，你已经掌握了问题的精髓</code>.在密码学领域，总是存在一个根信任的问题。就是最源头的信任，比如我们浏览器中使用的根证书就是一个典型的例子。</p><h3>数字证书用处多</h3><p>  行文至此，数字证书的概念已经呼之欲出了！<b>数字证书，又称为公钥证书，用来证明某个公钥被某个实体（通常为人、组织或服务）所持有</b>。这就好比，你的房产证用来证明房子是被你持有。同理，你的公钥证书用来证明这把公钥被你持有。</p><p>  一个数字证书包括的基本信息有：证书的版本号、证书序列号、使用的签名算法、颁发者的身份标识、证书的有效期、公钥、公钥持有者的身份。这些信息作为被签名的数据，使用指定的签名算法和CA的私钥进行签名，并将签名的结果添加到证书中。这就构成了一个完整的证书。数字证书的典型结构： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9052ff3cf37a587d372fec934142257e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"488\" class=\"origin_image zh-lightbox-thumb\" width=\"1006\" data-original=\"https://pic3.zhimg.com/v2-9052ff3cf37a587d372fec934142257e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1006&#39; height=&#39;488&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"488\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1006\" data-original=\"https://pic3.zhimg.com/v2-9052ff3cf37a587d372fec934142257e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9052ff3cf37a587d372fec934142257e_b.jpg\"/><figcaption>图7 数字证书的典型结构</figcaption></figure><blockquote>由于CA机构的公钥是广而告之的，任何组织或实体只要用CA的公钥验证了证书中签名的合法性，就能证明当前证书是可靠的。即，证书中所声明的公钥与持有者关联。同时，该公钥对应的私钥被持有者唯一持有。</blockquote><p>  作为SAML系列文章的开篇，本文从密码学新方向的历史入手，引入了非对称密码学的概念。接着，以几个典型的例子介绍了非对称密码在<code>密钥交换</code>、<code>数字签名</code>、<code>数字证书</code>等三个方向的应用。掌握了这些必要的基础知识，下一篇文章，我们就来聊一聊SAML协议是如何把这些应用场景进行完美融合，进而设计出被广泛应用的单点登录解决方案的。</p><hr/><p><br/><b>一个介绍Java学习路线的Live：（已有4000+人收听，5200+人支持）</b></p><a href=\"https://www.zhihu.com/lives/932192204248682496\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9fe41560a576c37e981359876a0ba891_ipico.jpg\" data-image-width=\"690\" data-image-height=\"690\" class=\"internal\">学习Java，我建议这样做​www.zhihu.com</a><p><b>一个介绍云计算学习路线的Live：</b></p><a href=\"https://www.zhihu.com/lives/1046567982750281728\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-3dbb7914810dc6b4c2cc063d1b753ac3_ipico.jpg\" data-image-width=\"751\" data-image-height=\"751\" class=\"internal\">入门云计算：你该了解的那些事儿</a><p></p>", 
            "topic": [
                {
                    "tag": "云计算", 
                    "tagLink": "https://api.zhihu.com/topics/19550358"
                }, 
                {
                    "tag": "身份认证", 
                    "tagLink": "https://api.zhihu.com/topics/19792908"
                }, 
                {
                    "tag": "SAML 2.0", 
                    "tagLink": "https://api.zhihu.com/topics/20672401"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85192565", 
            "userName": "义臻", 
            "userLink": "https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf", 
            "upvote": 0, 
            "title": "走进SAML——应用篇", 
            "content": "<p>我的高中数学老师有一句话让我记忆犹新。“根基不牢，地动山摇；根基太浅，丢人现眼”。任何知识的学习都必须经历一个由浅入深的过程，而入深的前提就是要充分理解基础知识。所以，我假设阅读本文章之前，作为读者的你已经仔细阅读了前两篇文章。</p><p>本文我将使用一个具体的例子来分析SP-init SSO的交互流程，以及交互过程中的消息格式。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>首先，需要在阿里云账号中将谷歌云配置为合法的SSO身份提供商，配置方式参考官方文档。配置完成后，可以看到谷歌云（IDP）的配置元文件以及阿里云（SP）的配置元文件。如下：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"c\">&lt;!--IDP--&gt;</span>\n<span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;no&#34;?&gt;</span>\n<span class=\"nt\">&lt;md:EntityDescriptor</span> <span class=\"na\">xmlns:md=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:metadata&#34;</span> <span class=\"na\">entityID=</span><span class=\"s\">&#34;https://accounts.google.com/o/saml2?idpid=C01k0l1si&#34;</span> \n<span class=\"na\">validUntil=</span><span class=\"s\">&#34;2024-09-07T06:31:06.000Z&#34;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;md:IDPSSODescriptor</span> <span class=\"na\">WantAuthnRequestsSigned=</span><span class=\"s\">&#34;false&#34;</span> <span class=\"na\">protocolSupportEnumeration=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:protocol&#34;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;md:KeyDescriptor</span> <span class=\"na\">use=</span><span class=\"s\">&#34;signing&#34;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;ds:KeyInfo</span> <span class=\"na\">xmlns:ds=</span><span class=\"s\">&#34;http://www.w3.org/2000/09/xmldsig#&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;ds:X509Data&gt;</span>\n          <span class=\"nt\">&lt;ds:X509Certificate&gt;</span>MIIDdDCCAlygAw...4VL4OJkRnq72oPN+Z<span class=\"nt\">&lt;/ds:X509Certificate&gt;</span>\n        <span class=\"nt\">&lt;/ds:X509Data&gt;</span>\n      <span class=\"nt\">&lt;/ds:KeyInfo&gt;</span>\n    <span class=\"nt\">&lt;/md:KeyDescriptor&gt;</span>\n    <span class=\"nt\">&lt;md:NameIDFormat&gt;</span>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress<span class=\"nt\">&lt;/md:NameIDFormat&gt;</span>\n    <span class=\"nt\">&lt;md:SingleSignOnService</span> <span class=\"na\">Binding=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&#34;</span> <span class=\"na\">Location=</span><span class=\"s\">&#34;https://accounts.google.com/o/saml2/idp?idpid=C01k0l1si&#34;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;md:SingleSignOnService</span> <span class=\"na\">Binding=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect&#34;</span> <span class=\"na\">Location=</span><span class=\"s\">&#34;https://accounts.google.com/o/saml2/idp?idpid=C01k0l1si&#34;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/md:IDPSSODescriptor&gt;</span>\n<span class=\"nt\">&lt;/md:EntityDescriptor&gt;</span>\n\n\n<span class=\"c\">&lt;!--SP--&gt;</span>\n<span class=\"nt\">&lt;md:EntityDescriptor</span> <span class=\"na\">xmlns:md=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:metadata&#34;</span> <span class=\"na\">ID=</span><span class=\"s\">&#34;https___signin.aliyun.com_1797870240813407_saml_SSO&#34;</span> \n<span class=\"na\">entityID=</span><span class=\"s\">&#34;https://signin.aliyun.com/1797870240813407/saml/SSO&#34;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;md:SPSSODescriptor</span> <span class=\"na\">WantAssertionsSigned=</span><span class=\"s\">&#34;true&#34;</span> <span class=\"na\">protocolSupportEnumeration=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:protocol&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;md:KeyDescriptor</span> <span class=\"na\">use=</span><span class=\"s\">&#34;signing&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;ds:KeyInfo</span> <span class=\"na\">xmlns:ds=</span><span class=\"s\">&#34;http://www.w3.org/2000/09/xmldsig#&#34;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;ds:X509Data&gt;</span>\n                <span class=\"nt\">&lt;ds:X509Certificate&gt;</span>\nMIIDUTCCAjmgAwIBAgIEIv2v9DANBgkqhk...3TvZ2Ao/XOhmk4GWRehUoHr7Hw==\n                <span class=\"nt\">&lt;/ds:X509Certificate&gt;</span>\n            <span class=\"nt\">&lt;/ds:X509Data&gt;</span>\n        <span class=\"nt\">&lt;/ds:KeyInfo&gt;</span>\n        <span class=\"nt\">&lt;/md:KeyDescriptor&gt;</span>\n    <span class=\"nt\">&lt;md:NameIDFormat&gt;</span>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress<span class=\"nt\">&lt;/md:NameIDFormat&gt;</span>\n    <span class=\"nt\">&lt;md:NameIDFormat&gt;</span>urn:oasis:names:tc:SAML:2.0:nameid-format:transient<span class=\"nt\">&lt;/md:NameIDFormat&gt;</span>\n    <span class=\"nt\">&lt;md:NameIDFormat&gt;</span>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent<span class=\"nt\">&lt;/md:NameIDFormat&gt;</span>\n    <span class=\"nt\">&lt;md:NameIDFormat&gt;</span>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified<span class=\"nt\">&lt;/md:NameIDFormat&gt;</span>\n    <span class=\"nt\">&lt;md:AssertionConsumerService</span> <span class=\"na\">Binding=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&#34;</span> <span class=\"na\">Location=</span><span class=\"s\">&#34;https://signin.aliyun.com/saml/SSO&#34;</span> <span class=\"na\">index=</span><span class=\"s\">&#34;0&#34;</span> <span class=\"na\">isDefault=</span><span class=\"s\">&#34;true&#34;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/md:SPSSODescriptor&gt;</span>\n<span class=\"nt\">&lt;/md:EntityDescriptor&gt;</span></code></pre></div><p>接下来，使用已配置主账号的一个子账号登录阿里云。如下图所示，并打开浏览器的检查模式，以观察请求情况。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-3fe44726684fee83596312e29332d118_b.jpg\" data-size=\"small\" data-rawwidth=\"1130\" data-rawheight=\"790\" class=\"origin_image zh-lightbox-thumb\" width=\"1130\" data-original=\"https://pic1.zhimg.com/v2-3fe44726684fee83596312e29332d118_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1130&#39; height=&#39;790&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1130\" data-rawheight=\"790\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1130\" data-original=\"https://pic1.zhimg.com/v2-3fe44726684fee83596312e29332d118_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3fe44726684fee83596312e29332d118_b.jpg\"/><figcaption>使用子账号登录</figcaption></figure><p>可以看到，浏览器将登录请求302重定向到谷歌云的IDP认证中心，请求的主要信息如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">Request URL: https://accounts.google.com/o/saml2/idp?idpid=C01k0l1si\nRequest Method: POST\nStatus Code: 302 \nSAMLRequest: PD94bWw...hbWwycDpBdXRoblJlcXVl\nc3Q+</code></pre></div><p>从上面的信息可知，阿里云将登录请求重定向到了谷歌云，使用POST的方式，同时发送的还有一个叫做SAMLRequest的参数。阿里云为什么这样做呢？因为IDP的配置文件指定了这些。在IDP的配置文件中，谷歌云在SingleSignOnService中声明了SAMLRequest的请求方式以及请求地址。按照SAML2.0协议的规范，我们解码SAMLRequest如下：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>\n\n<span class=\"nt\">&lt;saml2p:AuthnRequest</span> <span class=\"na\">xmlns:saml2p=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:protocol&#34;</span> \n<span class=\"na\">AssertionConsumerServiceURL=</span><span class=\"s\">&#34;https://signin.aliyun.com/saml/SSO&#34;</span> \n<span class=\"na\">Destination=</span><span class=\"s\">&#34;https://accounts.google.com/o/saml2/idp?idpid=C01k0l1si&#34;</span> \n<span class=\"na\">ForceAuthn=</span><span class=\"s\">&#34;false&#34;</span> \n<span class=\"na\">ID=</span><span class=\"s\">&#34;a5a808ahjaii493f4436359j4d478f2&#34;</span> \n<span class=\"na\">IsPassive=</span><span class=\"s\">&#34;false&#34;</span>\n<span class=\"na\">IssueInstant=</span><span class=\"s\">&#34;2019-10-05T02:50:03.424Z&#34;</span> \n<span class=\"na\">ProtocolBinding=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&#34;</span> \n<span class=\"na\">Version=</span><span class=\"s\">&#34;2.0&#34;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;saml2:Issuer</span> <span class=\"na\">xmlns:saml2=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span><span class=\"nt\">&gt;</span>\nhttps://signin.aliyun.com/1797870240813407/saml/SSO<span class=\"nt\">&lt;/saml2:Issuer&gt;</span>\n<span class=\"nt\">&lt;/saml2p:AuthnRequest&gt;</span>\n</code></pre></div><p>该请求的发起者用Issuer声明，对应的正是SP的entityID。同时该SAMLRequest中声明了该请求的目的地Destination，以及SAMLResponse的接收地址AssertionConsumerServiceURL等信息。</p><p>谷歌云在接收到SAMLRequest之后，会跳转到登录界面，并提醒用户登录。</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-a3c975a2368f89b1415f0dbc4d1da4c5_b.jpg\" data-size=\"small\" data-rawwidth=\"2152\" data-rawheight=\"970\" class=\"origin_image zh-lightbox-thumb\" width=\"2152\" data-original=\"https://pic2.zhimg.com/v2-a3c975a2368f89b1415f0dbc4d1da4c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2152&#39; height=&#39;970&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"2152\" data-rawheight=\"970\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2152\" data-original=\"https://pic2.zhimg.com/v2-a3c975a2368f89b1415f0dbc4d1da4c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a3c975a2368f89b1415f0dbc4d1da4c5_b.jpg\"/><figcaption>登录谷歌账户</figcaption></figure><p>从浏览器的访问记录可以看到，当用户登录之后，谷歌云将进行302重定向到阿里云，具体参数如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">Request URL: https://signin.aliyun.com/saml/SSO\nRequest Method: POST\nStatus Code: 302 \nSAMLResponse：PD94bWwgdmVyc...fVzcG9uc2U+</code></pre></div><p>接着，请求跳转到阿里云控制台界面，说明SSO登录成功。这里，我们重点分析下SAMLResponse的内容，按照SAML规范解码如下：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>\n\n<span class=\"nt\">&lt;saml2p:Response</span> <span class=\"na\">xmlns:saml2p=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:protocol&#34;</span> <span class=\"na\">Destination=</span><span class=\"s\">&#34;https://signin.aliyun.com/saml/SSO&#34;</span> <span class=\"na\">ID=</span><span class=\"s\">&#34;_256e1b401c2ac9d2b3ac259d813cd8f9&#34;</span> \n<span class=\"na\">InResponseTo=</span><span class=\"s\">&#34;a5a808ahjaii493f4436359j4d478f2&#34;</span> <span class=\"na\">IssueInstant=</span><span class=\"s\">&#34;2019-10-05T02:55:49.397Z&#34;</span> <span class=\"na\">Version=</span><span class=\"s\">&#34;2.0&#34;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;saml2:Issuer</span> <span class=\"na\">xmlns:saml2=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span><span class=\"nt\">&gt;</span>https://accounts.google.com/o/saml2?idpid=C01k0l1si<span class=\"nt\">&lt;/saml2:Issuer&gt;</span>\n  <span class=\"nt\">&lt;saml2p:Status&gt;</span>\n    <span class=\"nt\">&lt;saml2p:StatusCode</span> <span class=\"na\">Value=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:status:Success&#34;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/saml2p:Status&gt;</span>\n  <span class=\"nt\">&lt;saml2:Assertion</span> <span class=\"na\">xmlns:saml2=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span> <span class=\"na\">ID=</span><span class=\"s\">&#34;_a06a19baf0b991c23b41e4c57b808d34&#34;</span> <span class=\"na\">IssueInstant=</span><span class=\"s\">&#34;2019-10-05T02:55:49.397Z&#34;</span> <span class=\"na\">Version=</span><span class=\"s\">&#34;2.0&#34;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;saml2:Issuer&gt;</span>https://accounts.google.com/o/saml2?idpid=C01k0l1si<span class=\"nt\">&lt;/saml2:Issuer&gt;</span>\n    <span class=\"nt\">&lt;ds:Signature</span> <span class=\"na\">xmlns:ds=</span><span class=\"s\">&#34;http://www.w3.org/2000/09/xmldsig#&#34;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;ds:SignedInfo&gt;</span>\n        <span class=\"nt\">&lt;ds:CanonicalizationMethod</span> <span class=\"na\">Algorithm=</span><span class=\"s\">&#34;http://www.w3.org/2001/10/xml-exc-c14n#&#34;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;ds:SignatureMethod</span> <span class=\"na\">Algorithm=</span><span class=\"s\">&#34;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&#34;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;ds:Reference</span> <span class=\"na\">URI=</span><span class=\"s\">&#34;#_a06a19baf0b991c23b41e4c57b808d34&#34;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ds:Transforms&gt;</span>\n            <span class=\"nt\">&lt;ds:Transform</span> <span class=\"na\">Algorithm=</span><span class=\"s\">&#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature&#34;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;ds:Transform</span> <span class=\"na\">Algorithm=</span><span class=\"s\">&#34;http://www.w3.org/2001/10/xml-exc-c14n#&#34;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;/ds:Transforms&gt;</span>\n          <span class=\"nt\">&lt;ds:DigestMethod</span> <span class=\"na\">Algorithm=</span><span class=\"s\">&#34;http://www.w3.org/2001/04/xmlenc#sha256&#34;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;ds:DigestValue&gt;</span>n6vzikmbE+G8rjj9K7GqNFydq3KXaP6ttZbjU1HUcrA=<span class=\"nt\">&lt;/ds:DigestValue&gt;</span>\n        <span class=\"nt\">&lt;/ds:Reference&gt;</span>\n      <span class=\"nt\">&lt;/ds:SignedInfo&gt;</span>\n      <span class=\"nt\">&lt;ds:SignatureValue&gt;</span>R0z281cp...W8hyg==<span class=\"nt\">&lt;/ds:SignatureValue&gt;</span>\n      <span class=\"nt\">&lt;ds:KeyInfo&gt;</span>\n        <span class=\"nt\">&lt;ds:X509Data&gt;</span>\n          <span class=\"nt\">&lt;ds:X509SubjectName&gt;</span>ST=California,C=US,OU=Google For Work,CN=Google,L=Mountain View,O=Google Inc.<span class=\"nt\">&lt;/ds:X509SubjectName&gt;</span>\n          <span class=\"nt\">&lt;ds:X509Certificate&gt;</span>MIIDdDCCAlygAw...4VL4OJkRnq72oPN+Z<span class=\"nt\">&lt;/ds:X509Certificate&gt;</span>\n        <span class=\"nt\">&lt;/ds:X509Data&gt;</span>\n      <span class=\"nt\">&lt;/ds:KeyInfo&gt;</span>\n    <span class=\"nt\">&lt;/ds:Signature&gt;</span>\n    <span class=\"nt\">&lt;saml2:Subject&gt;</span>\n      <span class=\"nt\">&lt;saml2:NameID</span> <span class=\"na\">Format=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified&#34;</span><span class=\"nt\">&gt;</span>admin@testForBlog.onaliyun.com<span class=\"nt\">&lt;/saml2:NameID&gt;</span>\n      <span class=\"nt\">&lt;saml2:SubjectConfirmation</span> <span class=\"na\">Method=</span><span class=\"s\">&#34;urn:oasis:names:tc:SAML:2.0:cm:bearer&#34;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;saml2:SubjectConfirmationData</span> <span class=\"na\">InResponseTo=</span><span class=\"s\">&#34;a5a808ahjaii493f4436359j4d478f2&#34;</span> <span class=\"na\">NotOnOrAfter=</span><span class=\"s\">&#34;2019-10-05T03:00:49.397Z&#34;</span> <span class=\"na\">Recipient=</span><span class=\"s\">&#34;https://signin.aliyun.com/saml/SSO&#34;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/saml2:SubjectConfirmation&gt;</span>\n    <span class=\"nt\">&lt;/saml2:Subject&gt;</span>\n    <span class=\"nt\">&lt;saml2:Conditions</span> <span class=\"na\">NotBefore=</span><span class=\"s\">&#34;2019-10-05T02:50:49.397Z&#34;</span> <span class=\"na\">NotOnOrAfter=</span><span class=\"s\">&#34;2019-10-05T03:00:49.397Z&#34;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;saml2:AudienceRestriction&gt;</span>\n        <span class=\"nt\">&lt;saml2:Audience&gt;</span>https://signin.aliyun.com/1797870240813407/saml/SSO<span class=\"nt\">&lt;/saml2:Audience&gt;</span>\n      <span class=\"nt\">&lt;/saml2:AudienceRestriction&gt;</span>\n    <span class=\"nt\">&lt;/saml2:Conditions&gt;</span>\n    <span class=\"nt\">&lt;saml2:AuthnStatement</span> <span class=\"na\">AuthnInstant=</span><span class=\"s\">&#34;2019-10-05T02:29:07.000Z&#34;</span> <span class=\"na\">SessionIndex=</span><span class=\"s\">&#34;_a06a19baf0b991c23b41e4c57b808d34&#34;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;saml2:AuthnContext&gt;</span>\n        <span class=\"nt\">&lt;saml2:AuthnContextClassRef&gt;</span>urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified<span class=\"nt\">&lt;/saml2:AuthnContextClassRef&gt;</span>\n      <span class=\"nt\">&lt;/saml2:AuthnContext&gt;</span>\n    <span class=\"nt\">&lt;/saml2:AuthnStatement&gt;</span>\n  <span class=\"nt\">&lt;/saml2:Assertion&gt;</span>\n<span class=\"nt\">&lt;/saml2p:Response&gt;</span>\n</code></pre></div><p>通过阅读<a href=\"https://link.zhihu.com/?target=http%3A//docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SAML Assertion规范文档</a>，能够理解各个字段的含义。</p><blockquote>Destination代表当前SAMLResponse要发送到的地址。<br/>ID代表当前SAMLResponse的唯一标识。<br/>InResponseTo代表当前SAMLResponse用于回应拿给SAMLRequest，对应的是SAMLRequest的ID。<br/>IssueInstant代表当前断言的发布时间<br/>Issuer代表当前断言的发布者，实际上就是IDP的entityID<br/>Status代表认证状态，Success代表认证通过</blockquote><p>由于SP中声明了WantAssertionsSigned=true，说明SP需要接收被签名的SAMLResponse。因此SAMLResponse中有签名相关的内容，使用ds:Signature表示。</p><blockquote>CanonicalizationMethod表示签名过程中使用的规范化方法<br/>SignatureMethod代表使用的签名方法。这里为RSA-SHA256<br/>DigestMethod代表签名过程中使用的摘要方法<br/>DigestValue代表使用摘要方法获得的值<br/>SignatureValue代表最终获得的签名内容<br/>X509Data代表签名时使用的私钥对应的公钥证书信息，该值和IDP中的证书信息是保持一致的</blockquote><p>签名部分保证了SAMLResponse消息的机密性以及消息来源的合法性，Subject则用来声明被认证者的身份信息。</p><blockquote>NameID代表用户的身份，可以是邮箱、姓名等<br/>SubjectConfirmation代表当前身份的生效条件。用InResponseTo表明该身份是用于响应哪个SAMLRequest的，NotOnOrAfter代表生效的时间限制。Recipient通常是当前SAMLResponse的消费地址，对应SP元文件中的AssertionConsumerService。</blockquote><p>Conditions用来描述当前SAMLResponse生效的其他限制条件。</p><blockquote>NotBefore代表生效时间的起点<br/>NotOnOrAfter代表生效时间的终点<br/>Audience代表当前SAMLResponse的受众，通常来说，Audience等于目标SP的entityID</blockquote><p>AuthnStatement用于描述认证发生时的信息</p><blockquote>AuthnInstant代表认证发生的时间<br/>AuthnContext代表认证时的上下文环境，比如当前认证是使用Password认证或者联合认证等等。在某些场景下，SP可能会限制IDP使用的认证手段，此时该字段就会派上用场。</blockquote><p>关于SAMLRequest的字段解释，可以参考<a href=\"https://link.zhihu.com/?target=https%3A//www.oasis-open.org/committees/download.php/11511/sstc-saml-tech-overview-2.0-draft-03.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">规范文档的3.3.2节</a>。</p><p>关于SAMLResponse的字段解释，可以参考<a href=\"https://link.zhihu.com/?target=http%3A//docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a>。</p><hr/><p>本文详细介绍了SP-init SSO过程中的交互流程以及消息格式，读者可以结合SAML系列第二篇文章中的流程图进行深入理解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>觉得本文好的话，就来关注我吧！<a href=\"https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf\" class=\"internal\">@E-臻</a>。</p><p><b>一个介绍云计算学习路线的Live：</b></p><a href=\"https://www.zhihu.com/lives/1046567982750281728\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-3dbb7914810dc6b4c2cc063d1b753ac3_ipico.jpg\" data-image-width=\"751\" data-image-height=\"751\" class=\"internal\">入门云计算：你该了解的那些事儿</a><p><b>一个介绍Java学习路线的Live：（已有4000+人收听，5200+人支持）</b></p><a href=\"https://www.zhihu.com/lives/932192204248682496\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-3dbb7914810dc6b4c2cc063d1b753ac3_ipico.jpg\" data-image-width=\"751\" data-image-height=\"751\" class=\"internal\">学习Java，我建议这样做</a><p></p>", 
            "topic": [
                {
                    "tag": "云计算", 
                    "tagLink": "https://api.zhihu.com/topics/19550358"
                }, 
                {
                    "tag": "SAML 2.0", 
                    "tagLink": "https://api.zhihu.com/topics/20672401"
                }, 
                {
                    "tag": "身份认证", 
                    "tagLink": "https://api.zhihu.com/topics/19792908"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69385509", 
            "userName": "义臻", 
            "userLink": "https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf", 
            "upvote": 1, 
            "title": "走进SAML——协议篇", 
            "content": "<p>在上一篇文章中，我们讲解了什么是数字签名和数字证书。这篇文章中，我们来讲解SAML协议是如何基于数字签名和数字证书来实现SSO的。</p><hr/><p>什么是SSO？它的中文名字是单点登陆。即，用户仅仅需要登陆一个Web站点就可以使用多个其他Web站点提供的服务。众所周知，SAML协议是实现SSO的一种常用手段。那么，它是怎么工作的呢？</p><p>在SAML实现的单点登录场景中，通常涉及到三个角色。他们分别是IDP、SP和用户Client。</p><blockquote><b>IDP</b>：Identity Provider，身份提供者。用于管理用户的身份信息和登陆信息，比如账号和密码等等。<br/><b>SP</b>：Service Provider，服务提供者。任何通过网络对外提供服务的Web站点都可以称为SP。比如云计算服务提供商阿里云。<br/><b>用户Client</b>：IDP中注册的合法用户，通过浏览器访问SP提供的受保护资源。</blockquote><p>我来通过一个简单的Demo描述下SAML实现SSO的过程，如下图。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-f4cc094c2aa0a6c6a9ff2abd5c5a60fe_b.jpg\" data-size=\"small\" data-rawwidth=\"1316\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"1316\" data-original=\"https://pic3.zhimg.com/v2-f4cc094c2aa0a6c6a9ff2abd5c5a60fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1316&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1316\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1316\" data-original=\"https://pic3.zhimg.com/v2-f4cc094c2aa0a6c6a9ff2abd5c5a60fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f4cc094c2aa0a6c6a9ff2abd5c5a60fe_b.jpg\"/><figcaption>简单描述SAML实现SSO的过程</figcaption></figure><p>用户端代理Client（指浏览器）想要访问SP提供的受保护资源，要访问该受保护资源必须先登陆到SP站点，但是用户并没有SP站点的账号密码。此时，用户发现SP站点支持IDP的单点登陆，于是就使用自己在IDP中的账号密码尝试登陆SP站点。流程是这样的：</p><blockquote>1. 用户端Client通过账号密码登陆到IDP，并告知IDP自己想要登陆SP站点，可否帮助提供下证明。<br/>2. 用户就是“上帝”，IDP非常愿意为自己的“上帝”提供合法的身份证明。于是乎，就发了一个断言（Assertion）给用户端Client。并且和Client说，你把这个断言拿给SP站点就可以登陆了。<br/>3. 客户端Client向SP站点发送了登陆请求，并把IDP颁发的断言出示给了SP。<br/>4. SP站点果然“认识”IDP提供的断言，并允许用户端Client登陆自己的站点。</blockquote><p>瞧！在上面的过程中，用户仅仅输入了自己在IDP中的账号密码，就轻而易举的登陆到了SP站点。这到底指怎么回事呢？</p><blockquote>原来，早在很久很久以前（讲故事的套路），SP的网站管理员就深刻意识到IDP以后一定会火，所以为何不提前让IDP的用户能够方便的登陆SP站点，这样IDP火的时候自己也可以蹭点流量。基于这样“单纯”的想法，SP的网站管理员找到了IDP的网站管理员。IDP的网站管理员很快生成了一对公私钥，并将公钥证书给了SP站点。</blockquote><p>实际上，上面描述的就是实现SSO的准备工作。即，SP将IDP的公钥证书保存下来，以在认证断言的时候使用。</p><p>当用户端Client将断言出示给SP时，SP根据断言中的信息找到其颁发者IDP，并从自己的数据库中找到IDP对应的公钥证书。如果证书中的公钥能够验证断言中的签名，就说明当前断言是IDP颁发的，是可以被信任的。因此，便可以允许客户端Client登陆当前SP站点。</p><p>上面的过程是通过SAML实现单点登录的基本原理，是为了方便大家阅读简化之后的样子。下图是SAML协议中一个真实的应用场景（选自SAML 2.0技术概览<sup data-text=\"\" data-url=\"https://www.oasis-open.org/committees/download.php/51890/SAML%20MD%20simplified%20overview.pdf\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>）：</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-ad6b03e382f2a8a838a2635b27adfec0_b.jpg\" data-size=\"small\" data-rawwidth=\"1258\" data-rawheight=\"838\" class=\"origin_image zh-lightbox-thumb\" width=\"1258\" data-original=\"https://pic1.zhimg.com/v2-ad6b03e382f2a8a838a2635b27adfec0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1258&#39; height=&#39;838&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1258\" data-rawheight=\"838\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1258\" data-original=\"https://pic1.zhimg.com/v2-ad6b03e382f2a8a838a2635b27adfec0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ad6b03e382f2a8a838a2635b27adfec0_b.jpg\"/><figcaption>一个完整单点登录的例子</figcaption></figure><p>在上图的场景中，用户（Browser）想要访问<a href=\"https://link.zhihu.com/?target=http%3A//www.abc.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">abc.com</span><span class=\"invisible\"></span></a>的资源，但是他并没有当前站点的登录能力，该用户的身份信息都是用Idp来管理的。于是就有了下面的流程：</p><blockquote>1. 用户想要访问<a href=\"https://link.zhihu.com/?target=http%3A//www.abc.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">abc.com</span><span class=\"invisible\"></span></a>的资源<br/>2. SP发送了一个重定向消息给浏览器。重定向消息的HTTP报文头中包含了Idp登录服务的URI地址，同时还有一个被称为SAMLRequest的认证请求变量。浏览器处理该重定向请求：发起一个GET请求到Idp登录地址并将SAMLRequest作为请求参数。<br/>3. Idp的单点登录服务要求用户提供身份凭证。<br/>4. 用户输入自己的身份凭证。<br/>5. Idp的单点登录服务发送一个HTML表单给浏览器。HTML表单中包含了SAML响应，该响应中是一个SAML断言。SAML规范要求SAML断言必须被数字签名。<br/>6. 浏览器收到SAML响应之后，会发起一个请求到SP的AssertionConsumerService，请求中包含了接收到的SAML响应。<br/>7. SP的Assertion Consumer验证SAML响应中数字签名的合法性。如果验证通过，他会发起一个到目标资源的重定向请求，请求的cookie中包含了当前用户的session信息。<br/>8. 浏览器的请求抵达SP，SP的AccessCheck模块检查当前请求的cookie信息并返回目标资源。</blockquote><p>关于SAML认证请求的基本结构，可以参考<a href=\"https://link.zhihu.com/?target=https%3A//www.oasis-open.org/committees/download.php/11511/sstc-saml-tech-overview-2.0-draft-03.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">规范文档的3.3.2节</a>。</p><p>关于SAML断言响应的基本结构，可以参考<a href=\"https://link.zhihu.com/?target=http%3A//docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a>。</p><p>关于SAML描述文本中各个标签的含义，可以参考<a href=\"https://link.zhihu.com/?target=https%3A//www.oasis-open.org/committees/download.php/51890/SAML%2520MD%2520simplified%2520overview.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a>。</p><hr/><p>本文以一个简单的方式讲解了SAML协议实现SSO的过程和原理，你听懂了吗？<a href=\"https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf\" class=\"internal\">@E-臻</a>。<br/><b>一个介绍Java学习路线的Live：（已有4000+人收听，5200+人支持）</b></p><a href=\"https://www.zhihu.com/lives/932192204248682496\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9fe41560a576c37e981359876a0ba891_ipico.jpg\" data-image-width=\"690\" data-image-height=\"690\" class=\"internal\">学习Java，我建议这样做​www.zhihu.com</a><p><b>一个介绍云计算学习路线的Live：</b></p><a href=\"https://www.zhihu.com/lives/1046567982750281728\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-3dbb7914810dc6b4c2cc063d1b753ac3_ipico.jpg\" data-image-width=\"751\" data-image-height=\"751\" class=\"internal\">入门云计算：你该了解的那些事儿</a><p>下面的内容没用，但是删不掉。 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/6cf6ae9b2df81a98bbb44c2515b66c06\" data-hash=\"6cf6ae9b2df81a98bbb44c2515b66c06\" data-hovercard=\"p$b$6cf6ae9b2df81a98bbb44c2515b66c06\">@知一声</a> </p>", 
            "topic": [
                {
                    "tag": "云计算", 
                    "tagLink": "https://api.zhihu.com/topics/19550358"
                }, 
                {
                    "tag": "身份认证", 
                    "tagLink": "https://api.zhihu.com/topics/19792908"
                }, 
                {
                    "tag": "SAML 2.0", 
                    "tagLink": "https://api.zhihu.com/topics/20672401"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/51376751", 
            "userName": "义臻", 
            "userLink": "https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf", 
            "upvote": 0, 
            "title": "不可或缺：虚拟化技术", 
            "content": "<p><b>阅读本文大概需要5分钟。</b></p><p><b>概念解释：</b></p><p>物理机：客观存在的真实服务器，能看的到、摸得着的。通常也被叫做宿主机，因为虚拟机“寄宿”在上面。</p><p>虚拟机：运行在物理机上的，看不见、摸不到、但可以通过网络访问的服务器。通常也叫云服务器。</p><p>物理硬件：组成物理机的硬件。</p><p>虚拟硬件：组成虚拟机的硬件，通过虚拟化技术获得。</p><p>OS：Operating System，操作系统。</p><hr/><p>在上一篇文章<a href=\"https://zhuanlan.zhihu.com/p/48525213\" class=\"internal\">《开宗明义：解剖云服务器》</a>中提过：虚拟化技术，顾名思义，是能够在一个物理硬件平台上虚拟出多个虚拟硬件平台的技术。虚拟化技术是云计算不可或缺的基础。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>目前常用的虚拟化技术是KVM，全称为Kernel Virtual Machine。KVM是基于支持Intel-VT或者AMD-V特性的X86硬件。2006年10月，KVM模块的源代码被正式接纳进入Linux Kernel，成为内核源代码的一部分。因此，KVM是Linux完全原生的硬件虚拟化解决方案。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用KVM构建虚拟机的架构如下：</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-aca9078f1402f470585acc145a7a6b6b_b.jpg\" data-size=\"small\" data-rawwidth=\"972\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"972\" data-original=\"https://pic4.zhimg.com/v2-aca9078f1402f470585acc145a7a6b6b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;972&#39; height=&#39;630&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"972\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"972\" data-original=\"https://pic4.zhimg.com/v2-aca9078f1402f470585acc145a7a6b6b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-aca9078f1402f470585acc145a7a6b6b_b.jpg\"/><figcaption>KVM架构</figcaption></figure><p>在上图中，Linux内核运行在物理硬件之上，KVM模块将Linux内核本身变成一个Hypervisor。Hypervisor是位于物理硬件和虚拟硬件之间的一个中间层，可以理解为一个代理，它将虚拟硬件要执行的指令按一定的算法调度给物理硬件去执行。有了虚拟硬件，虚拟机就可以按照正常的流程安装操作系统以及运行APP了。</p><p>Hypervisor核心工作就是对多个虚拟硬件要求的资源进行统筹协调，最主要的就是协调CPU资源和内存资源。对于CPU资源，Hypervisor通过选择合适的调度算法，把物理CPU合理的分配给虚拟CPU使用。对于内存资源，Hypervisor需要先将物理硬件的内存地址转化为虚拟硬件的物理地址，虚拟机OS会把虚拟硬件的物理地址映射为虚拟内存地址（参考OS的内存管理），进而提供给APP使用。</p><p>KVM除了对CPU和内存资源进行管理之外，还能够使用Linux支持的任何存储形式来存储虚拟机系统盘（关于虚拟系统盘，可以参考前一篇文章）。比如网络连接存储、分布式对象存储，本地磁盘存储等等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：</p><p>[1] 顾炯炯.云计算架构技术与实践[M].北京:清华大学出版社,2016.</p><p>[2]任永杰,单海涛.KVM虚拟化技术:实战与原理解析[M].北京:机械工业出版社,2014.</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://www.zhihu.com/lives/1046567982750281728\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9fe41560a576c37e981359876a0ba891_ipico.jpg\" data-image-width=\"690\" data-image-height=\"690\" class=\"internal\">入门云计算：你该了解的那些事儿</a><p></p>", 
            "topic": [
                {
                    "tag": "云计算", 
                    "tagLink": "https://api.zhihu.com/topics/19550358"
                }, 
                {
                    "tag": "求职", 
                    "tagLink": "https://api.zhihu.com/topics/19551771"
                }, 
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48525213", 
            "userName": "义臻", 
            "userLink": "https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf", 
            "upvote": 0, 
            "title": "开宗明义：解剖云服务器", 
            "content": "<p><b>阅读本文大概需要15分钟。</b></p><p>CS：Computer Science</p><p>CSP：Cloud Service Provider</p><p>KVM：Kernel-based Virtual Machine</p><p>云服务器：位于云上的使用虚拟化技术构建出的服务器，在本文中和虚拟机等价</p><hr/><p>好多知乎上的伙伴向我提问，想学习计算机怎么入门？说实话，这道题虽然不难，但是真心没有标准答案。</p><p>所以我通常的回答是，<b>先去学CS的六大基本课程。那六大基本课程里先学哪个？我会毫不犹豫的回答：计算机组成原理。</b></p><p>计算机组成原理是一个讲述计算机基本硬件结构的学科，它告诉我们一台计算机要想正常工作，必须得有哪些必不可少的组件、以及这些组件之间是如何协调工作的。<b>但是这和云计算有什么关系呢？</b></p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-4e6d7156e05985436a6b1fe1a1be070f_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"600\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-4e6d7156e05985436a6b1fe1a1be070f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;500&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"600\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-4e6d7156e05985436a6b1fe1a1be070f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4e6d7156e05985436a6b1fe1a1be070f_b.jpg\"/></figure><p>这一切到底是为什么？</p><p>问的好！在解答这个问题之前，先来看看云计算的本质到底是什么？在云计算出现之前，互联网公司是需要购买服务器、存储和网关等基础设施的。在云计算出现之后，互联网公司还是需要购买服务器、存储和网关等基础设施的。可见，<b>互联网的基础设施并没有因为云计算的出现而改变</b>。但你可以发现，在云计算出现以前，企业IT采购基础设施的流程至少几个月。而在云计算出现之后，企业IT采购基础设施的流程可以分分钟搞定。可见，<b>云计算颠覆的是互联网基础设施的交付方式。</b></p><p>这种对互联网基础设施交付方式的改变就要求，CSP能够以一种区别于传统硬件的方式提供互联网的基础设施。于是乎，虚拟化技术就正式进入了历史舞台（<i>这里多说一句，其实虚拟化技术早在云计算出现之前很多年就已经存在，只不过彼时的虚拟化技术使用的场景比较有限，不被大家所关注）</i>。</p><p>虚拟化技术，顾名思义，是能够虚拟计算机硬件的技术。行文至此，我想聪明的你们已经能够猜到学习计算机组成原理的意义了。即：<b>如果我了解一台计算机的必要组件有哪些，然后利用虚拟化技术虚拟出这些必要的组件，再把他们组装起来，不就能够得到一台虚拟的计算机了吗！</b></p><p>没错，云上的成千上万台虚拟计算机都是这么来的。从这一点也可以窥见，虚拟化技术对云计算是多么的重要！正因为如此，我们看到有这么多的虚拟化技术，Vmware、Xen、KVM等等，其实大家都是想掌握核心科技。其中，KVM自Linux2.6.20之后被集成在Linux的各个主要发行版本中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dbcf22aa3d9507e36913fd3b034e2155_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"368\" class=\"content_image\" width=\"389\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;389&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"368\" class=\"content_image lazy\" width=\"389\" data-actualsrc=\"https://pic2.zhimg.com/v2-dbcf22aa3d9507e36913fd3b034e2155_b.jpg\"/></figure><p>掌握核心科技</p><p class=\"ztext-empty-paragraph\"><br/></p><p>扯了这么多，天也不早了，该办正事了。冯诺依曼机是一种经典的计算机组成结构。它描述了计算机应该由五大部分组成：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器统称为中央处理器<i>（CPU）</i>。存储器分为内存和外存<i>（硬盘）</i>。输入设备和输出设备统称外设<i>（键盘显示器等等）</i>。</p><p>对于上面提及到的组件，我们从CSP的角度来看一看其必要性。首先，CSP的客户是通过网络连接到位于云上的虚拟机的，为此CSP并不需要关心虚拟机外设的实现。CSP需要关心的是如何利用虚拟化技术对虚拟机的CPU、内存及外存进行实现。</p><p>我习惯把CPU和内存的虚拟化实现统称为<b>虚拟硬件</b>。而外存实际上就是一个特定格式的文件<i>（vid、qcow2等等）</i>。但是单单有外存是没有意义的，还需要给这个外存安装操作系统。我习惯把安装了操作系统的外存统称为<b>虚拟系统盘</b><i>（再次强调，实际上是一个文件）</i>。最终，我们发现，<b>CSP要实现一台云服务器，只需要关心两个问题：如何构建虚拟硬件？如何构建虚拟系统盘？</b></p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-f56adf1d5f7c6edfbb26c7e753ce8a0c_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1224\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb\" width=\"1224\" data-original=\"https://pic1.zhimg.com/v2-f56adf1d5f7c6edfbb26c7e753ce8a0c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1224&#39; height=&#39;882&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1224\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1224\" data-original=\"https://pic1.zhimg.com/v2-f56adf1d5f7c6edfbb26c7e753ce8a0c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f56adf1d5f7c6edfbb26c7e753ce8a0c_b.jpg\"/></figure><p>从CSP的角度看云服务器的构成</p><p>在常见的虚拟化技术中，这两个问题都有完整的解决方案。比如QEMU/KVM能够提供一套完整的虚拟硬件系统环境，而QEMU推荐的qcow2文件可以用来构建虚拟系统盘。</p><p>行文至此，我想作为读者的你能够入木三分的看待云服务器了。<b>划重点，任何一台云服务器都是由虚拟硬件和虚拟系统盘组成的。</b>但是，云上有成千上万台虚拟机，它们背后对应着海量的虚拟硬件和虚拟系统盘，我们该如何组织这些虚拟硬件和虚拟系统盘呢？这是一个值得思考和研究的课题。</p><a href=\"https://www.zhihu.com/lives/1046567982750281728\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9fe41560a576c37e981359876a0ba891_ipico.jpg\" data-image-width=\"690\" data-image-height=\"690\" class=\"internal\">入门云计算：你该了解的那些事儿</a><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考文献：</p><p>[1]唐朔飞.计算机组成原理[M].北京:高等教育出版社,2000.</p><p>[2]任永杰,单海涛.KVM虚拟化技术:实战与原理解析[M].北京:机械工业出版社,2014.</p>", 
            "topic": [
                {
                    "tag": "云计算", 
                    "tagLink": "https://api.zhihu.com/topics/19550358"
                }, 
                {
                    "tag": "求职", 
                    "tagLink": "https://api.zhihu.com/topics/19551771"
                }, 
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/48414244", 
            "userName": "义臻", 
            "userLink": "https://www.zhihu.com/people/a6b6fa3a5a145169510ae9b736828ebf", 
            "upvote": 8, 
            "title": "活在未来：拥抱云计算", 
            "content": "<p>2018，随着云计算步入第二个发展10年，全球云计算市场趋于稳定增长，到2021年市场规模将达到2461亿美元；我国云计算市场处于高速增长阶段，预计 2018-2021年仍将保持快速增长态势，到 2021年公有云市场规模将达到902.6亿元，私有云市场规模将达到955.7亿元。云计算的应用已经深入到政府、金融、工业、交通、物流、医疗健康等传统行业。</p><p>                                                                      ——云计算发展白皮书2018，中国信息通信研究院</p><hr/><p>上面的这段话总结起来很简单<i><b>。就是国家在说：云计算很重要，未来会很赚钱。</b></i></p><p>云计算究竟是什么？相信不少人在网络上搜索过这个问题。然而你看到的却是：</p><p>刘教授说：云计算是分布式计算技术的一种。其最基本的思想，是透过网络将庞大的计算处理程序自动分拆成无数个较小的子程序，再交由多部服务器所组成的庞大系统经搜寻、计算分析之后将处理结果回传给用户。</p><p>张专家说：云计算是一种新兴的共享基础架构的方法，可以将巨大的系统池连接在一起以提供各种IT服务。</p><p>李工程师说：云计算是通过网络按需提供可动态伸缩的廉价计算服务。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a4b735b266fb2977ef2219b61087f468_b.jpg\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"258\" class=\"content_image\" width=\"291\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;291&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"258\" class=\"content_image lazy\" width=\"291\" data-actualsrc=\"https://pic1.zhimg.com/v2-a4b735b266fb2977ef2219b61087f468_b.jpg\"/><figcaption>每个人的说法都貌似很有道理，但是又不准确</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>维基百科是这样定义的：Cloud computing is shared pools of configurable computer <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/System_resource\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">system resources</a> and higher-level services that can be rapidly <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Provisioning\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">provisioned</a> with minimal management effort, often over the <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Internet\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Internet</a>. Cloud computing relies on sharing of resources to achieve coherence and <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Economies_of_scale\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">economies of scale</a>, similar to a <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Public_utility\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">public utility</a>.</p><p>意译过来是这样的：云计算是一种计算机系统资源和高级别服务的共享池，用户可以通过网络以配置的方式从这个共享池当中方便快捷的获取资源和服务。云计算通过资源共享的方式来实现一致性和大规模生产的经济效益，类似于一种公共基础设施。</p><hr/><p>维基百科的定义方式为我们提供了一种思路。它没有直接告诉我们云计算是什么，而是描述了一个抽象物，然后说明这个抽象物有哪些特点。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dbcf22aa3d9507e36913fd3b034e2155_b.jpg\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"368\" class=\"content_image\" width=\"389\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;389&#39; height=&#39;368&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"368\" class=\"content_image lazy\" width=\"389\" data-actualsrc=\"https://pic2.zhimg.com/v2-dbcf22aa3d9507e36913fd3b034e2155_b.jpg\"/><figcaption>我只告诉你它的特点</figcaption></figure><p>按照这样的思路，我们来尝试理解下云计算。1. 它是一种能够提供计算机资源和服务的共享池<b>（共享资源和服务）</b>2. 既然是共享池，就说明大家都可以从这个池塘中获取资源<b>（多租户）</b>3. 每个人都是按照自己的需要获取资源<b>（按需使用，弹性付费）</b></p><p>我们来类比下自来水公司。自来水是被所有市民共享的<b>（共享资源）</b>，任何人<b>（多租户）</b>都可以在自己的家里安装自来水管，然后安装一个水表，为自己使用的水付费<b>（按需使用，弹性付费）</b>。</p><p>再来类比下电业公司。电力是被所有市民共享的<b>（共享资源），</b>任何人<b>（多租户）</b>都可以在自己的家里或者公司安装电表，然后为自己使用的电力付费<b>（按需使用，弹性付费）</b>。</p><p>可见，水、电以及云计算，它们三者之间有着惊人的相似性。如果说水和电是日常生活的基础设施，那么<b>云计算就是互联网产业和商业社会的基础设施</b>。</p><hr/><p>云计算发展白皮书2018在结尾有这样一段描述：云计算是信息技术发展和服务模式创新的集中体现，是信息化发展的重大变革和必然趋势，是信息时代国际竞争的制高点和经济发展新动能的助燃剂。</p><p>希望我们每个人、每家企业都能走进云计算。在互联网+、中国制造2025、工业4.0等等这样大的时代背景下挖掘自身更大的可能性。</p><hr/><a href=\"https://www.zhihu.com/lives/1046567982750281728\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9fe41560a576c37e981359876a0ba891_ipico.jpg\" data-image-width=\"690\" data-image-height=\"690\" class=\"internal\">入门云计算：你该了解的那些事儿</a><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "云计算", 
                    "tagLink": "https://api.zhihu.com/topics/19550358"
                }, 
                {
                    "tag": "求职", 
                    "tagLink": "https://api.zhihu.com/topics/19551771"
                }, 
                {
                    "tag": "大数据", 
                    "tagLink": "https://api.zhihu.com/topics/19740929"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/cloudcomputing"
}
