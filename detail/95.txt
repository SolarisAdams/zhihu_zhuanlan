{
    "title": "Java In Mind", 
    "description": "高考完懵懂乱选专业，无奈入坑，既来之则安之，走在技术的道路上，现学现卖，学到的知识，踩过的坑，自己的思考，与君分享，共同交流~", 
    "followers": [
        "https://www.zhihu.com/people/yi-ge-da-pang-zi-ya", 
        "https://www.zhihu.com/people/pein-81", 
        "https://www.zhihu.com/people/wei-xiao-95-76", 
        "https://www.zhihu.com/people/hs.zhu", 
        "https://www.zhihu.com/people/zhou-xu-neng-69", 
        "https://www.zhihu.com/people/wu-wang-xin-an-78", 
        "https://www.zhihu.com/people/li-shuai-76-22", 
        "https://www.zhihu.com/people/mr-lin-82-68", 
        "https://www.zhihu.com/people/tou-wong-64", 
        "https://www.zhihu.com/people/liu-sha-22-64", 
        "https://www.zhihu.com/people/zhao-zi-long-20-77", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/spongebob-53-24", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/ran-zhang-50"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/88969953", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 0, 
            "title": "Mac OS JDK版本管理", 
            "content": "<blockquote>技术公众号：Java In Mind（Java_In_Mind）,欢迎关注！</blockquote><h3>Mac OS JDK版本管理</h3><p>Mac OS版本的JDK有个功能就是可以随时切换JDK版本，通过简单的命令就可以很方便切换已经安装的JDK，特别是我们在学习或者研究不同JDK之间的差别的时候就非常方便。</p><h3>切换JDK版本</h3><div class=\"highlight\"><pre><code class=\"language-text\">~ /usr/libexec/java_home -v 11\n/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home\n\n~ java -version\njava version &#34;11.0.1&#34; 2018-10-16 LTS\nJava(TM) SE Runtime Environment 18.9 (build 11.0.1+13-LTS)\nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode)</code></pre></div><h3>查看已有的JDK</h3><p>例如，我的机器安装了3版本的JDK</p><div class=\"highlight\"><pre><code class=\"language-text\">~ /usr/libexec/java_home -V\nMatching Java Virtual Machines (3):\n    11.0.1, x86_64: &#34;Java SE 11.0.1&#34;    /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home\n    1.8.0_144, x86_64:  &#34;Java SE 8&#34; /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n    1.7.0_80, x86_64:   &#34;Java SE 7&#34; /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</code></pre></div><h3>自定义命令，方便管理</h3><p>写入shell的profile，这里就那我使用的zsh为例，新增如下内容：</p><div class=\"highlight\"><pre><code class=\"language-text\">#vim ~/.zshrc\nalias java11=&#39;export JAVA_HOME=`/usr/libexec/java_home -v 11`&#39;\nalias java8=&#39;export JAVA_HOME=`/usr/libexec/java_home -v 1.8`&#39;\nalias java7=&#39;export JAVA_HOME=`/usr/libexec/java_home -v 1.7`&#39;</code></pre></div><p>这样，我就可以很方便来切换JDK版本</p><div class=\"highlight\"><pre><code class=\"language-text\">~ java11;java -version\njava version &#34;11.0.1&#34; 2018-10-16 LTS\nJava(TM) SE Runtime Environment 18.9 (build 11.0.1+13-LTS)\nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode)</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "JDK", 
                    "tagLink": "https://api.zhihu.com/topics/19619153"
                }, 
                {
                    "tag": "Mac", 
                    "tagLink": "https://api.zhihu.com/topics/19550264"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88191268", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 3, 
            "title": "使用Jasypt加密Spring配置文件及其注意事项", 
            "content": "<blockquote>技术公众号：Java In Mind（Java_In_Mind）,欢迎关注！</blockquote><h3>问题</h3><p>在我们的应用程序，为了防止hardcode，通常会把程序中可能会变的，或者与环境相关的信息抽离出来，从而形成配置文件。</p><p>在Java应用中通常就是properties文件或者yml文件之类的，但是这部分信息由于抽离独立开来将会变得比较容易泄露，而配置文件中往往含有比较敏感的信息，例如，数据库密码，这些数据一旦泄露有可能造成严重的后果；那么自然而然的，我们就会想到对配置文件的敏感信息进行加密。</p><h3>Jasypt简介</h3><p>Jasypt(Java Simplified Encryption)，一个用于加密的Java类库，目的就是让开发者很简便的将加密功能引入自己的项目中来，而不需要去明白具体的加密知识，其有如下特点：</p><ul><li>基于标准的加密算法，支持单向加密与反向加解密</li><li>与Hibernate可以无缝集成</li><li>适用于使用Spring应用的基础，与SpringSecurity可以实现无缝集成</li><li>提供加密应用的配置文件的集成</li><li>提供多处理器/多核系统中高性能加密的特定功能</li><li>开放与任何JCE（Java Cryptography Extension）实现相同的API</li></ul><h3>Spring Boot集成Jasypt加密配置文件</h3><h3>配置</h3><p>SpringBoot集成Jasypt配置很简单，只需引入依赖，然后配置Jasypt相关属性参数即可：</p><ul><li>Maven</li></ul><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.github.ulisesbocchio<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>jasypt-spring-boot-starter<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>2.1.2<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><ul><li>配置文件加密</li></ul><div class=\"highlight\"><pre><code class=\"language-properties\"># 如配置，application.properties\napplication.author=ENC(9afnWGGYyzZN38vYYfYx1ZM9ql//Vp+8)</code></pre></div><ul><li>启动应用时，配置系统属性</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">java -jar foo.jar -Djasypt.encryptor.password=HelloWorld</code></pre></div><h3>加密</h3><p>那么，配置文件中的加密密文该如何获取呢？Jasypt官方提供了CLI工具，通过脚本可以生成对应的密文，具体操作如下：</p><ul><li> 从Github下载Jasypt：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/jasypt/jasypt\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/jasypt/jasyp</span><span class=\"invisible\">t</span><span class=\"ellipsis\"></span></a><br/> </li><li> 解压进入<code>/bin</code>目录<br/> </li><li> 根据需要执行对应脚本<br/> </li></ul><p>例如，本例子的密文生成，默认使用<code>PBEWithMD5AndDES</code>算法：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sh encrypt.sh input=sevenlin password=HelloWorld\n\n----ENVIRONMENT-----------------\n\nRuntime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.73-b02\n\n\n----ARGUMENTS-------------------\n\ninput: sevenlin\n\npassword: HelloWorld\n\n\n----OUTPUT----------------------\n\nlUmhU/2EgreTZVdtWFCnqE86tXuo6OMp</code></pre></div><ul><li>或者，自己写个简单的类来生成</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">EncryptDemo</span> <span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">StandardPBEStringEncryptor</span> <span class=\"n\">encryptor</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StandardPBEStringEncryptor</span><span class=\"o\">();</span>\n<span class=\"n\">encryptor</span><span class=\"o\">.</span><span class=\"na\">setPassword</span><span class=\"o\">(</span><span class=\"s\">&#34;HelloWorld&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">String</span> <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">encryptor</span><span class=\"o\">.</span><span class=\"na\">encrypt</span><span class=\"o\">(</span><span class=\"s\">&#34;sevenlin&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">enc</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h3>使用&amp;验证</h3><ul><li>写个Service验证</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Service</span>\n<span class=\"nd\">@Slf4j</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">JasyptDemoService</span> <span class=\"o\">{</span>\n\n<span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">&#34;${application.author}&#34;</span><span class=\"o\">)</span>\n<span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">author</span><span class=\"o\">;</span>\n\n<span class=\"nd\">@PostConstruct</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">&#34;===================================================================&#34;</span><span class=\"o\">);</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">&#34;application.author:{}&#34;</span><span class=\"o\">,</span> <span class=\"n\">author</span><span class=\"o\">);</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">&#34;===================================================================&#34;</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">//...\n</span><span class=\"c1\"></span>\n<span class=\"o\">}</span></code></pre></div><ul><li>结果，验证成功：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">===================================================================\napplication.author:sevenlin\n===================================================================</code></pre></div><h3>注意事项</h3><h3>使用时将密钥与密文分开配置</h3><p>我看过有的在使用Jasypt的时候，将密钥与密文都放在一个配置文件里，那不等于把钥匙放在门口一样的意思么，虽然加密了，但是只要配置文件泄露了，那么就可以通过密钥来实现解密，达不到保护敏感信息的目的，可以有以下几种方式来配置密钥：</p><ul><li> 系统属性：<code>java -jar foo.jar -Djasypt.encryptor.password=HelloWorld</code><br/> </li><li> 运行参数：<code>java -jar foo.jar --jasypt.encryptor.password=HelloWorld</code><br/> </li><li> 环境变量<br/> </li></ul><div class=\"highlight\"><pre><code class=\"language-text\"># Linux vim /etc/profile\nexport jasypt.encryptor.password=HelloWorld\n\n# Windows\n系统-&gt;更改设置-&gt;高级-&gt;环境变量-&gt;新增：jasypt.encryptor.password=HelloWorld</code></pre></div><h3>其他配置项</h3><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cf68ecba30d45e79e2f167a9059b6f7e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1636\" data-rawheight=\"912\" class=\"origin_image zh-lightbox-thumb\" width=\"1636\" data-original=\"https://pic3.zhimg.com/v2-cf68ecba30d45e79e2f167a9059b6f7e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1636&#39; height=&#39;912&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1636\" data-rawheight=\"912\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1636\" data-original=\"https://pic3.zhimg.com/v2-cf68ecba30d45e79e2f167a9059b6f7e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cf68ecba30d45e79e2f167a9059b6f7e_b.jpg\"/><figcaption>常用配置项</figcaption></figure><p>其他的可以详看配置类：</p><p><code>com.ulisesbocchio.jasyptspringboot.properties.JasyptEncryptorConfigurationProperties</code> </p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }, 
                {
                    "tag": "Spring Boot", 
                    "tagLink": "https://api.zhihu.com/topics/20044714"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87983832", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 0, 
            "title": "Java8增强反射可以在运行时获取参数名", 
            "content": "<blockquote> 技术公众号：Java In Mind（Java_In_Mind）,欢迎关注！</blockquote><h3>介绍</h3><p>在JDK增强意见：<a href=\"https://link.zhihu.com/?target=http%3A//openjdk.java.net/jeps/118\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JPE 118：Access to Parameter Names at Runtime</a>中指出，在Java8中我们终于可以通过反射来获取方法的参数名，其主要的目的是：</p><ul><li>提高代码的可读性（原先通常使用注解来实现）</li><li>可以提高IDE的功能</li></ul><h3>JDK8前获取参数名的方法</h3><h3>通过注解来实现</h3><p>因为Java8之前不提供获取参数名称的功能，大部分实现都是通过提供注解元数据来标明参数名，这个也是目前许多框架使用的方法，如，SpringMVC的参数绑定，MyBatis的参数映射，类似：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//自定义@param注解\n</span><span class=\"c1\"></span><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">PARAMETER</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"nd\">@Documented</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">Param</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"nf\">value</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//声明参数名\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"o\">(</span><span class=\"nd\">@Param</span><span class=\"o\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"nd\">@Param</span><span class=\"o\">(</span><span class=\"s\">&#34;count&#34;</span><span class=\"o\">)</span> <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">){</span>\n     <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;name:=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">&#34;,count=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">//获取\n</span><span class=\"c1\"></span><span class=\"n\">Method</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">ParameterDemo</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getMethod</span><span class=\"o\">(</span><span class=\"s\">&#34;foo&#34;</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n\n<span class=\"n\">Annotation</span><span class=\"o\">[][]</span> <span class=\"n\">parameterAnnotations</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"na\">getParameterAnnotations</span><span class=\"o\">();</span>\n\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Annotation</span><span class=\"o\">[]</span> <span class=\"n\">parameterAnnotation</span> <span class=\"o\">:</span> <span class=\"n\">parameterAnnotations</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Annotation</span> <span class=\"n\">annotation</span> <span class=\"o\">:</span> <span class=\"n\">parameterAnnotation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">annotation</span> <span class=\"k\">instanceof</span> <span class=\"n\">Param</span><span class=\"o\">){</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(((</span><span class=\"n\">Param</span><span class=\"o\">)</span> <span class=\"n\">annotation</span><span class=\"o\">).</span><span class=\"na\">value</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//获取结果\n</span><span class=\"c1\"></span><span class=\"n\">name</span>\n<span class=\"n\">count</span></code></pre></div><h3>通过解析class文件</h3><p>可以通过解析二进制文件来获取参数的名称，常见的工具有：ASM，javassist，如，Spring的LocalVariableTableParameterNameDiscoverer，就是利用ASM通过class文件中的本地方法变量表中获取到参数名称：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//使用Spring的LocalVariableTableParameterNameDiscoverer获取\n</span><span class=\"c1\"></span><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">){</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;name:=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">&#34;,count=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">Method</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">ParameterDemo</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getMethod</span><span class=\"o\">(</span><span class=\"s\">&#34;foo&#34;</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">parameterNames</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LocalVariableTableParameterNameDiscoverer</span><span class=\"o\">().</span><span class=\"na\">getParameterNames</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">parameterNames</span><span class=\"o\">));</span>\n\n<span class=\"c1\">//获取结果\n</span><span class=\"c1\"></span><span class=\"o\">[</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">]</span></code></pre></div><h3>使用Java8反射</h3><p>JDK8在反射包中新增了<code>Parameter</code>类，用于表示方法的参数信息，通过<code>Method</code>来获取所有参数列表：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">){</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;name:=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">&#34;,count=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//通过反射获取\n</span><span class=\"c1\"></span><span class=\"n\">Method</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">ParameterDemo</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getMethod</span><span class=\"o\">(</span><span class=\"s\">&#34;foo&#34;</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"n\">Parameter</span><span class=\"o\">[]</span> <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"na\">getParameters</span><span class=\"o\">();</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Parameter</span> <span class=\"n\">parameter</span> <span class=\"o\">:</span> <span class=\"n\">parameters</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//获取结果\n</span><span class=\"c1\"></span><span class=\"n\">name</span>\n<span class=\"n\">count</span></code></pre></div><p>【注意】</p><p>该功能需要在<code>javac</code>编译时开启<code>-parameters</code>参数，而为了兼容性该参数默认是不开启的，如果使用Maven构建的话可以如此配置：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;plugin&gt;</span>\n     <span class=\"nt\">&lt;groupId&gt;</span>org.apache.maven.plugins<span class=\"nt\">&lt;/groupId&gt;</span>\n     <span class=\"nt\">&lt;artifactId&gt;</span>maven-compiler-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n     <span class=\"nt\">&lt;configuration&gt;</span>\n        <span class=\"nt\">&lt;source&gt;</span>8<span class=\"nt\">&lt;/source&gt;</span>\n        <span class=\"nt\">&lt;target&gt;</span>8<span class=\"nt\">&lt;/target&gt;</span>\n        <span class=\"nt\">&lt;compilerArgs&gt;</span>\n            <span class=\"nt\">&lt;compilerArg&gt;</span>-parameters<span class=\"nt\">&lt;/compilerArg&gt;</span>\n        <span class=\"nt\">&lt;/compilerArgs&gt;</span>\n     <span class=\"nt\">&lt;/configuration&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span></code></pre></div><p>【原理】</p><p>通过反编译可以知道，class文件保存了<code>MethodParameters</code>的信息，这就是保存方法名的地方：</p><div class=\"highlight\"><pre><code class=\"language-text\">//截取片段\n  public void foo(java.lang.String, int);\n    descriptor: (Ljava/lang/String;I)V\n    flags: ACC_PUBLIC\n    Code:\n      stack=3, locals=3, args_size=3\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: new           #3                  // class java/lang/StringBuilder\n         6: dup\n         7: invokespecial #4                  // Method java/lang/StringBuilder.&#34;&lt;init&gt;&#34;:()V\n        10: ldc           #5                  // String name:=\n        12: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        15: aload_1\n        16: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        19: ldc           #7                  // String ,count=\n        21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        24: iload_2\n        25: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n        28: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n        31: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        34: return\n      LineNumberTable:\n        line 14: 0\n        line 15: 34\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      35     0  this   Lcom/sevenlin/demo/reflect/ParameterDemo;\n            0      35     1  name   Ljava/lang/String;\n            0      35     2 count   I\n    MethodParameters:\n      Name                           Flags\n      name\n      count</code></pre></div><h3>总结</h3><p>Java运行时是使用位置解析参数的，但随着应用的发展，常常需要获取参数名的功能，如一些IDE的反编译功能，由于Java8之前不支持参数名的获取，通常都是通过别的方法来实现，通常就是通过注解，这会使代码比较混乱，而且冗余，降低代码阅读性，而通过解析class文件的方式来获取比较麻烦，而且也不提倡。</p><p>Java8对反射的增加也是为了解决以上的问题，而使用的时候注意要在编译时开启。</p>", 
            "topic": [
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 8", 
                    "tagLink": "https://api.zhihu.com/topics/19936714"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87809997", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 1, 
            "title": "SpringBoot配置Kaptcha验证码", 
            "content": "<h3>简介</h3><p>验证码的作用其实就是通过人为操作来防止暴力破解、机器人等。</p><p>本文通过SprinBoot +Kaptcha实现图片验证码生成功能，验证码的保存一般使用缓存，可以选择使用Redis或者一些Java的缓存实现（例如，EhCache，guava cache等），如果分布式系统请使用Redis，这里简单Demo使用EhCache实现验证码缓存，具体实现如下：</p><h3>Maven依赖</h3><p>可以通过<a href=\"https://link.zhihu.com/?target=https%3A//start.spring.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Spring Initializr</a>实现初始化：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-web<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-cache<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.projectlombok<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>lombok<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;optional&gt;</span>true<span class=\"nt\">&lt;/optional&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.github.axet<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>kaptcha<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>0.0.9<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.apache.commons<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>commons-lang3<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>net.sf.ehcache<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>ehcache<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span></code></pre></div><h3>启动缓存</h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Configuration</span>\n<span class=\"nd\">@EnableCaching</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">EhCacheConfiguration</span> <span class=\"o\">{}</span></code></pre></div><h3>配置验证码图片生成</h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Configuration</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">KaptchaConfiguration</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 默认生成图形验证码宽度\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_IMAGE_WIDTH</span> <span class=\"o\">=</span> <span class=\"s\">&#34;100&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 默认生成图像验证码高度\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_IMAGE_HEIGHT</span> <span class=\"o\">=</span> <span class=\"s\">&#34;40&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 默认生成图形验证码长度\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_IMAGE_LENGTH</span> <span class=\"o\">=</span> <span class=\"s\">&#34;4&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 颜色，合法值： r,g,b (and optional alpha) 或者 white,black,blue.\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_COLOR_FONT</span> <span class=\"o\">=</span> <span class=\"s\">&#34;black&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 图片边框\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_IMAGE_BORDER</span> <span class=\"o\">=</span> <span class=\"s\">&#34;no&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 默认图片间隔\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_CHAR_SPACE</span> <span class=\"o\">=</span> <span class=\"s\">&#34;5&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 验证码文字大小\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">DEFAULT_IMAGE_FONT_SIZE</span> <span class=\"o\">=</span> <span class=\"s\">&#34;30&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DefaultKaptcha</span> <span class=\"nf\">producer</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">Properties</span> <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Properties</span><span class=\"o\">();</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_BORDER</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_IMAGE_BORDER</span><span class=\"o\">);</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_TEXTPRODUCER_FONT_COLOR</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_COLOR_FONT</span><span class=\"o\">);</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_TEXTPRODUCER_CHAR_SPACE</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_CHAR_SPACE</span><span class=\"o\">);</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_IMAGE_WIDTH</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_IMAGE_WIDTH</span><span class=\"o\">);</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_IMAGE_HEIGHT</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_IMAGE_HEIGHT</span><span class=\"o\">);</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_TEXTPRODUCER_FONT_SIZE</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_IMAGE_FONT_SIZE</span><span class=\"o\">);</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">KAPTCHA_TEXTPRODUCER_CHAR_LENGTH</span><span class=\"o\">,</span> <span class=\"n\">DEFAULT_IMAGE_LENGTH</span><span class=\"o\">);</span>\n        <span class=\"n\">Config</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Config</span><span class=\"o\">(</span><span class=\"n\">properties</span><span class=\"o\">);</span>\n        <span class=\"n\">DefaultKaptcha</span> <span class=\"n\">defaultKaptcha</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DefaultKaptcha</span><span class=\"o\">();</span>\n        <span class=\"n\">defaultKaptcha</span><span class=\"o\">.</span><span class=\"na\">setConfig</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">defaultKaptcha</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h3>配置Ehcache</h3><p>ehcache.xml</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>\n<span class=\"nt\">&lt;ehcache</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>\n         <span class=\"na\">xsi:noNamespaceSchemaLocation=</span><span class=\"s\">&#34;http://ehcache.org/ehcache.xsd&#34;</span>\n         <span class=\"na\">updateCheck=</span><span class=\"s\">&#34;false&#34;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;diskStore</span> <span class=\"na\">path=</span><span class=\"s\">&#34;java.io.tmpdir&#34;</span><span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;defaultCache</span>\n            <span class=\"na\">eternal=</span><span class=\"s\">&#34;false&#34;</span>\n            <span class=\"na\">maxElementsInMemory=</span><span class=\"s\">&#34;10000&#34;</span>\n            <span class=\"na\">overflowToDisk=</span><span class=\"s\">&#34;true&#34;</span>\n            <span class=\"na\">diskPersistent=</span><span class=\"s\">&#34;false&#34;</span>\n            <span class=\"na\">timeToIdleSeconds=</span><span class=\"s\">&#34;120&#34;</span>\n            <span class=\"na\">timeToLiveSeconds=</span><span class=\"s\">&#34;120&#34;</span>\n            <span class=\"na\">diskExpiryThreadIntervalSeconds=</span><span class=\"s\">&#34;120&#34;</span>\n            <span class=\"na\">memoryStoreEvictionPolicy=</span><span class=\"s\">&#34;LRU&#34;</span><span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;cache</span>\n            <span class=\"na\">name=</span><span class=\"s\">&#34;kaptcha&#34;</span>\n            <span class=\"na\">eternal=</span><span class=\"s\">&#34;false&#34;</span>\n            <span class=\"na\">maxElementsInMemory=</span><span class=\"s\">&#34;1000&#34;</span>\n            <span class=\"na\">overflowToDisk=</span><span class=\"s\">&#34;false&#34;</span>\n            <span class=\"na\">diskPersistent=</span><span class=\"s\">&#34;false&#34;</span>\n            <span class=\"na\">timeToIdleSeconds=</span><span class=\"s\">&#34;120&#34;</span>\n            <span class=\"na\">timeToLiveSeconds=</span><span class=\"s\">&#34;180&#34;</span>\n            <span class=\"na\">memoryStoreEvictionPolicy=</span><span class=\"s\">&#34;LRU&#34;</span><span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;/ehcache&gt;</span></code></pre></div><h3>SpringBoot application.properties 配置</h3><div class=\"highlight\"><pre><code class=\"language-properties\">spring.cache.type=ehcache\nspring.cache.ehcache.config=classpath:/ehcache.xml</code></pre></div><h3>测试</h3><ul><li>启动一个Controller</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Controller</span>\n<span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/api/v1/kaptcha&#34;</span><span class=\"o\">)</span>\n<span class=\"nd\">@Slf4j</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">KaptchaController</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Autowired</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Producer</span> <span class=\"n\">producer</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Autowired</span>\n    <span class=\"kd\">private</span> <span class=\"n\">CacheManager</span> <span class=\"n\">cacheManager</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">&#34;/code&#34;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">generation</span><span class=\"o\">(</span><span class=\"n\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">String</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">RandomStringUtils</span><span class=\"o\">.</span><span class=\"na\">randomAlphanumeric</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">);</span>\n\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">&#34;生成验证码：{}&#34;</span><span class=\"o\">,</span> <span class=\"n\">text</span><span class=\"o\">);</span>\n\n        <span class=\"n\">BufferedImage</span> <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"na\">createImage</span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//缓存验证码\n</span><span class=\"c1\"></span>        <span class=\"n\">cacheManager</span><span class=\"o\">.</span><span class=\"na\">getCache</span><span class=\"o\">(</span><span class=\"s\">&#34;kaptcha&#34;</span><span class=\"o\">).</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">,</span> <span class=\"n\">text</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//set content type\n</span><span class=\"c1\"></span>        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">setContentType</span><span class=\"o\">(</span><span class=\"n\">MediaType</span><span class=\"o\">.</span><span class=\"na\">IMAGE_JPEG</span><span class=\"o\">.</span><span class=\"na\">getType</span><span class=\"o\">());</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">FastByteArrayOutputStream</span> <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FastByteArrayOutputStream</span><span class=\"o\">();</span>\n            <span class=\"n\">ImageIO</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">image</span><span class=\"o\">,</span> <span class=\"s\">&#34;jpeg&#34;</span><span class=\"o\">,</span> <span class=\"n\">os</span><span class=\"o\">);</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">writeTo</span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">getOutputStream</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">error</span><span class=\"o\">(</span><span class=\"s\">&#34;验证码处理失败：{}&#34;</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">&#34;验证码获取失败&#34;</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>启动工程</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@SpringBootApplication</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">KaptchaDemoApplication</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">SpringApplication</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">(</span><span class=\"n\">KaptchaDemoApplication</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>运行，浏览器访问：<code>http://localhost:8080/api/v1/kaptcha/code</code></li></ul><h3>总结</h3><ul><li>使用图片验证码一般会设置过期时间</li><li>大部分验证码都是大小写忽略（Demo中是大小写敏感）</li><li>分布式环境缓存需要统一，例如使用Redis</li><li>结合Spring Security的时候记得把验证码的URL权限放开</li></ul>", 
            "topic": [
                {
                    "tag": "Spring Boot", 
                    "tagLink": "https://api.zhihu.com/topics/20044714"
                }, 
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87407904", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 0, 
            "title": "记一个Jackson与Hutool混用的坑", 
            "content": "<blockquote> 技术公众号：Java In Mind（Java_In_Mind）,欢迎关注！</blockquote><h3>问题出现</h3><p>最近遇到一个问题，Hutool从4.1.7升级到4.6.8之后，使用feign调用出现错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">...\nCaused by: feign.codec.EncodeException: Type definition error: [simple type, class cn.hutool.json.JSONNull]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class cn.hutool.json.JSONNull and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: cn.hutool.json.JSONObject[&#34;securityGroupIds&#34;])\n    at feign.ReflectiveFeign$BuildEncodedTemplateFromArgs.resolve(ReflectiveFeign.java:349)\n    at feign.ReflectiveFeign$BuildTemplateByResolvingArgs.create(ReflectiveFeign.java:213)\n    at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:72)\n    at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:108)\n    at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)\n    at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)\n    at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)\n    ... 29 more\nCaused by: org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class cn.hutool.json.JSONNull]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class cn.hutool.json.JSONNull and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: cn.hutool.json.JSONObject[&#34;securityGroupIds&#34;])\n    at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:295)\n    at org.springframework.http.converter.AbstractGenericHttpMessageConverter.writeInternal(AbstractGenericHttpMessageConverter.java:111)\n    at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:226)\n    at org.springframework.cloud.openfeign.support.SpringEncoder.encode(SpringEncoder.java:94)\n    at feign.ReflectiveFeign$BuildEncodedTemplateFromArgs.resolve(ReflectiveFeign.java:345)\n    ... 35 more\nCaused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class cn.hutool.json.JSONNull and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: cn.hutool.json.JSONObject[&#34;securityGroupIds&#34;])\n    at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)\n    at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1191)\n    at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:312)\n    at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:71)\n    at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:33)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:718)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:639)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)\n    at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396)\n    at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913)\n    at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:288)\n    ... 39 more</code></pre></div><h3>问题分析</h3><p>Hutool会使用<code>JSONNull</code>来表示空值，而SpringCloud Feign默认使用的序列化是Jackson，在远程调用的过程中使用了Map，直接传入了Hutool的JSONObject，而该Map存在空值，所以存在JSONNull，最终导致错误。</p><h3>问题解决</h3><p>使用DTO传递参数，总之就是不要直接把JSONObjct作为参数传递。</p><h3>总结</h3><p>在使用JSON序列化工具的时候，尽量不要混合使用，即使存在多个JSON工具，也不把一个JSON工具的JSON对象直接用另一个JSON工具来处理，因为每个JSON工具都有自己的对JSON的处理，包括一些优化，如果混着用就会出问题，所以，在使用JSON工具处理JSON的时候不要混着使用多种JSON</p><h3>吐槽</h3><p>这里吐槽下Hutool，null值处理的时候要小心，非空判断用<code>JSONObject.isNull</code>，不要自行处理：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">String</span> <span class=\"n\">jsonStr</span> <span class=\"o\">=</span> <span class=\"s\">&#34;{\\&#34;name\\&#34;:\\&#34;seven\\&#34;,\\&#34;password\\&#34;:null}&#34;</span><span class=\"o\">;</span>\n\n<span class=\"n\">JSONObject</span> <span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JSONObject</span><span class=\"o\">(</span><span class=\"n\">jsonStr</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">)==</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">).</span><span class=\"na\">getClass</span><span class=\"o\">());</span>\n\n<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JSONObject</span><span class=\"o\">(</span><span class=\"n\">jsonStr</span><span class=\"o\">).</span><span class=\"na\">toBean</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">)==</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">).</span><span class=\"na\">getClass</span><span class=\"o\">());</span>\n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"na\">isNull</span><span class=\"o\">(</span><span class=\"s\">&#34;password&#34;</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// 结果\n</span><span class=\"c1\"></span><span class=\"kc\">false</span>\n<span class=\"kd\">class</span> <span class=\"nc\">cn</span><span class=\"o\">.</span><span class=\"na\">hutool</span><span class=\"o\">.</span><span class=\"na\">json</span><span class=\"o\">.</span><span class=\"na\">JSONNull</span>\n<span class=\"kc\">false</span>\n<span class=\"kd\">class</span> <span class=\"nc\">cn</span><span class=\"o\">.</span><span class=\"na\">hutool</span><span class=\"o\">.</span><span class=\"na\">json</span><span class=\"o\">.</span><span class=\"na\">JSONNull</span>\n<span class=\"kc\">true</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "jackson（编程）", 
                    "tagLink": "https://api.zhihu.com/topics/20030861"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86881756", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 7, 
            "title": "我为何不喜欢用new创建对象", 
            "content": "<blockquote> 技术公众号：Java In Mind（Java_In_Mind）,欢迎关注！</blockquote><h3>前言</h3><p>我相信大部分都看过《Effective Java》这本Java神书，这本书在我学习Java的路上给了我帮助可以说是受益匪浅，书中第一篇就建议：<b>考虑用静态工厂方法代替构造器</b>。我自从看了之后就开始使用实践该建议，到现在已经基本偏爱静态工厂方法，这里我就谈谈使用以来的一些领悟。</p><h3>使用静态工厂方法的优缺点</h3><h3>优点</h3><ul><li>静态工厂方法有名称</li><li>不必每次调用都创建一个新对象</li><li>可以返回原类型的任何子类型的对象</li><li>创建参数化类型实例的时候，它们使代码更加简洁</li></ul><h3>缺点</h3><ul><li>类如果不含公有的或者受保护的构造器，就不能被子类化</li><li>静态工厂方法与其他静态方法没有任何区别</li></ul><h3>静态工厂方法有名称</h3><p>这点确实是很好地优势，静态工厂方法有自己的名称，也就意味着可以表达某种意思，或者某些特殊的实例，例如，在使用一些通用返回结果的时候，可以用类似如此的静态工厂方法来创建实例：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Result</span> <span class=\"o\">{</span>\n        <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">success</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">message</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Object</span> <span class=\"n\">content</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"nf\">Result</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">success</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">message</span><span class=\"o\">,</span><span class=\"n\">Object</span> <span class=\"n\">content</span><span class=\"o\">){</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">success</span> <span class=\"o\">=</span> <span class=\"n\">success</span><span class=\"o\">;</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">;</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">content</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Result</span> <span class=\"nf\">ofSuccess</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">content</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Result</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">,</span><span class=\"s\">&#34;处理成功&#34;</span><span class=\"o\">,</span><span class=\"n\">content</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Result</span> <span class=\"nf\">ofFail</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">message</span><span class=\"o\">){</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Result</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">,</span><span class=\"n\">message</span><span class=\"o\">,</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// getter and setter...\n</span><span class=\"c1\"></span><span class=\"o\">}</span>\n<span class=\"c1\">//使用\n</span><span class=\"c1\"></span><span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"na\">ofSuccess</span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"o\">);</span>\n<span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"na\">ofFail</span><span class=\"o\">(</span><span class=\"s\">&#34;处理失败，找不到该记录&#34;</span><span class=\"o\">);</span></code></pre></div><p>这样子，通过静态工厂方法就可以很好表达要构造的对象的目的，而调用方可以比较方便获取实例。</p><h3>不必每次调用都创建一个新对象</h3><p>这个其实很常见，如Boolean类中的几个<code>valueOf</code>静态工厂方法，Boolean有两个静态域：<code>TRUE</code>和<code>FALSE</code>，这样就不用每次创建一个新对象：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Boolean</span> <span class=\"nf\">valueOf</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">TRUE</span> <span class=\"o\">:</span> <span class=\"n\">FALSE</span><span class=\"o\">);</span>\n<span class=\"o\">}</span></code></pre></div><p>其实，我们在使用单例的时候，通常获取单例的方法就是一个静态工厂方法，并且也是不用创建一个新的对象：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SingleTon</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">SingleTon</span> <span class=\"n\">singleTon</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SingleTon</span><span class=\"o\">();</span>\n\n    <span class=\"kd\">private</span> <span class=\"nf\">SingleTon</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">SingleTon</span> <span class=\"nf\">getInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">singleTon</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h3>可以返回原类型的任何子类型的对象</h3><p>静态工厂方法返回的实例可以是该类型的子类，而这个子类可以在编写静态工厂方法时不存在，这也就意味着可以由其他方来实现，也意味着对拓展友好，还可以根据静态工厂方法的入参来选择不同的实现，非常灵活。</p><ul><li> 在JDK中有个例子就是<code>EnumSet</code>，根据入参的枚举的枚举值量来决定使用哪种枚举实例。<br/> </li><li> 在使用JDBC的时候，<code>DriveManager</code>在获取连接前得先加载对应的实现驱动，这样就能把实现交给第三方来完成，自己只需提供上层的抽象框架<br/> </li><li> 日常编程中可以用于同一需求的不同实现，通过静态工厂方法选择实现，并且有利于后期拓展，例如事件处理：<br/> </li></ul><p><code>java   public abstract class EventHandler {         private static Map&lt;String,EventHandler&gt; handlers = new HashMap&lt;&gt;();       //事件类型         public abstract String type();         //子类注册入口             public static void register(EventHandler eh){             handlers.put(eh.type(),eh);       }         //获取不同的实现         public static EventHandler getHandler(Event e){             return handlers.get(e.getType())       }   }</code></p><h3>创建参数化类型实例的时候，它们使代码更加简洁</h3><p>静态工厂方法还有一个好处就是提高代码的简洁度，也使得代码更加易读：</p><ul><li>使用JDK的类型推断，不过这在现在的JDK已经可以直接推断了</li></ul><p><code>java   public class Maps {       public static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() {           return new HashMap&lt;K, V&gt;();       }   }   //使用静态工厂方法   Map&lt;String,Object&gt; map = Maps.newHashMap();   //使用构造方法   Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();//JDK1.6之前不支持这种写法</code></p><ul><li>正如第一点的例子，静态工厂方法可以有自己的名称，可以有一些默认值设置，可以减少构建实例的参数，自然也会提高代码的简洁度</li></ul><h3>类如果不含公有的或者受保护的构造器，就不能被子类化</h3><p>类不含有public或者protect的构造方法时，子类的构建需要使用到父类的构造器，这个时候静态工厂方法就不适合</p><h3>静态工厂方法与其他静态方法没有任何区别</h3><p>使用静态工厂方法的时候，如果该类包含其他的静态方法，那么这个时候对于开发编程是不友好的，特别是在方法比较多，命名比较混乱的时候，使用者不能一眼就知道该用哪个方法来构造自己想要的实例，所以在编写静态工厂方法的时候尽量使用大家习惯的、约定俗成的命名风格：</p><ul><li>of</li><li>valueOf</li><li>getInstance / newInstance</li><li>getType / newType，其中Type为类型，如，EventHandler.getEventHandler()</li></ul><h3>总结</h3><p>结合我个人的经验，我认为使用静态工厂方法的利大于弊：</p><ul><li>提高代码的可阅读性</li><li>更加符合人类的正常思维方式，想要某个类的实例直接找某个类就能获取到，而不是通过new关键字</li><li>能够根据不同的需求创建不同的实例，而不用让看代码的人推测new出来的对象然后set某些值去猜测某种意图，通常我们的做法是注释，但是使用静态工厂的方法命名不是更加简洁吗</li><li>提高代码的拓展性 ，方便拓展，对修改友好，符合开闭原则</li></ul>", 
            "topic": [
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": [
                {
                    "userName": "不死火鸟", 
                    "userLink": "https://www.zhihu.com/people/dc2841e248ad885a4de26a600c1dc383", 
                    "content": "<p>搞笑，静态工厂最后还不是要用的new。为啥不反射调用构造器呢？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "SevenLin澤耿", 
                            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
                            "content": "哈哈，是的，标题党，忽略标题[捂脸]", 
                            "likes": 1, 
                            "replyToAuthor": "不死火鸟"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86047251", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 2, 
            "title": "DO、VO、DTO...XXOO，你弄明白了么", 
            "content": "<blockquote> 技术公众号：Java In Mind（Java_In_Mind）,欢迎关注！</blockquote><h3>背景</h3><p>我相信，刚开始学习接触企业代码的时候，一定会发现，工程中充斥着各种<code>XO</code>：DO、VO、DTO、DAO，还有各种名词：POJO，JavaBean，Domain等等，这些貌似看起来都一样，又好像用在不同的地方，记得之前一个前端同事调侃说：“我不想学Java，各种OOO，脑壳疼！”，这里结合自己的理解对这几个名词做些介绍。</p><h3>何为POJO</h3><p>POJO（Plain Ordinary Java Object），即简单Java对象，就是一个我们最常见的普通Java对象，这个概念是被大家叫出来的，它具有一些属性，然后提供对应的getter和setter，如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Foo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">type</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getType</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">Type</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setType</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">type</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"n\">type</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h3>何为JavaBean</h3><p>JavaBean，可序列化的POJO，sun在早期有对其规范（<a href=\"https://link.zhihu.com/?target=https%3A//www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JavaBeans Spec</a>），它是Java中的可重用组件，主要规范约定如下：</p><ul><li>JavaBean为公共类，并且具有一个空构造函数</li><li>所有属性为私有属性，提供getter和setter，不应该有公共属性</li><li>实现序列化接口：<code>java.io.Serializable</code></li></ul><p>JavaBean已经成为Java的一种规范，也是Java社区的共同语言，许多工具框架也是遵循JavaBean的规范的，例如，Spring的BeanUtils，一些Json工具都是基于JavaBean的规范来实现的，这些都是基于约定，所以也有人把JavaBean叫为可以持久化的POJO。</p><h3>何为DO</h3><p>DO（Domain Object），领域对象，也就是ORM框架中对应数据库的对象，业务实体，例如，对现实世界中的用户建模，抽象出来的DO可以叫为UserDO，通常情况下它用于与数据库的数据交互，通常也是一个JavaBean。</p><h3>何为PO</h3><p>PO（Persistent Object），持久化对象，主要用于持久化层，与数据库对应，通常也是ORM框架中的实体对象，例如，使用JPA时候的Entity与数据库表做映射，通常是一个JavaBean。</p><h3>何为DTO</h3><p>DTO（Data Transfer Object），数据传输对象，顾名思义就是用于传输数据的对象，通常用于处于不同架构层次或者不同子系统之间的数据传递，或者用于外部接口参数传递，以便提供不同粒度不同信息的数据，以免造成困惑干扰，通常也是一个JavaBean。</p><h3>何为VO</h3><p>VO（Value Object），就是用于保存数据的对象；在提供给页面使用的时候，也有人解释为View Object，就是对应页面展示数据的对象。</p><h3>何为DAO</h3><p>DAO（Data Access Object），数据访问对象，与数据库做交互的对象，提供不同的接口访问数据库来实现对数据库的操作，而接口使用的数据交互通常就是PO或者DO，通过它可以使用面向对象的方式来与数据库交互。</p><h3>总结</h3><ol><li>DO、PO、VO、DTO等其实都是一个JavaBean，只是应用的范围不同，表示的意义不同，而这些不同是Java这么多年来形成的一种约定，这种习惯形成Java程序员之间一种共识</li><li>DO和PO大部分时间是一样的，不过PO更倾向于有状态的对象，例如，使用Hibernate的时候，通过DAO操作过的对象会被框架所持有，如果一旦对其操作，在Session关闭的时候会写回数据库，这个时候使用PO就要非常小心，特别是与其他业务层交互的时候，最好转成DTO或者VO提供数据，不能把持久化对象暴露出去，不然可能会导致数据被修改</li><li>在使用这类对象的时候，我们还是要明白其意义，然后在合适的场景使用，毕竟这是Java形成的通用语言，想要读懂他人代码就要理解，想要他人能读懂自己的代码就要遵循</li></ol>", 
            "topic": [
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": [
                {
                    "userName": "渔打鱼在水", 
                    "userLink": "https://www.zhihu.com/people/2138ad098491eac133aa2ea65d5bd121", 
                    "content": "<p>所以你还没说XXOO是什么呢</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "SevenLin澤耿", 
                            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
                            "content": "[滑稽]这个等撸完代码再研究", 
                            "likes": 0, 
                            "replyToAuthor": "渔打鱼在水"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85849213", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 0, 
            "title": "Spring Data JPA 实现原理", 
            "content": "<h3>Spring Data JPA 实现原理</h3><p>在使用Spring Data JPA的时候，只需使用简单的接口定义，通过JPA约定好的命名格式书写对于的方法，就能够完成日常开发中的大部分数据库交互的场景，看下官方给出的例子：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Repository</span>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">SimpleUserRepository</span> <span class=\"kd\">extends</span> <span class=\"n\">CrudRepository</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">,</span> <span class=\"n\">Long</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * Find the user with the given username. This method will be translated into a query using the\n</span><span class=\"cm\">     * {@link javax.persistence.NamedQuery} annotation at the {@link User} class.\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param lastname\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">User</span> <span class=\"nf\">findByTheUsersName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">username</span><span class=\"o\">);</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * Uses {@link Optional} as return and parameter type.\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param username\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">Optional</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">&gt;</span> <span class=\"nf\">findByUsername</span><span class=\"o\">(</span><span class=\"n\">Optional</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">username</span><span class=\"o\">);</span>\n\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><p>可以知道，这里使用的是接口，而Java中的接口要使用必须要有实现类，那么JPA时怎么做到的呢，想到这里基本就可以猜出来Spring Data JPA是通过动态代理来实现，但是具体是怎么操作的呢？</p><h3>从<code>@EnableJpaRepositories</code>说起</h3><p>配置Spring Data JPA的时候通常就是通过<code>@EnableJpaRepositories</code>开启的，而通过注解就可以让整个JPA run起来，其中最重要的就是在<code>@EnableJpaRepositories</code>中import了<code>JpaRepositoriesRegistrar</code>，而这个配置就是入口所在。</p><p>先说明一下，Spring Data可不仅仅只有JPA的实现，还有其他各种各样的实现（如，JDBC，Redis，LDAP等），所以基本都是基于SPI（Service Provider Interface）解耦分层，所以大部分实现操作都是在<code>spring-data-commons</code>包中完成的。</p><h3>JpaRepositoriesRegistrar</h3><p>首先来看JpaRepositoriesRegistrar提供的功能，在<code>spring-data-jpa</code>包中，主要是用于告诉<code>spring-data-commons</code>抽象层的一些具体配置与解析： - getAnnotation()，提供JAP配置注解类，即@EnableJpaRepositories - getExtension()，提供JpaRepositoryConfigExtension，用于解析@EnableJpaRepositories</p><h3>RepositoryBeanDefinitionRegistrarSupport</h3><p>JpaRepositoriesRegistrar继承于RepositoryBeanDefinitionRegistrarSupport，它就是加载Repositories的关键: - registerBeanDefinitions，向Spring容器注册JpaRepositoryFactoryBean</p><h3>大致步骤</h3><p>所以，大致可以分为三大块，JPA加载的入口，注册JpaRepositoryFactoryBean和通过JpaRepositoryFactoryBean创建Repository - <code>@EnableJpaRepositories</code> import JpaRepositoriesRegistrar - JpaRepositoriesRegistrar.registerBeanDefinitions，注册JpaRepositoryFactoryBean - JpaRepositoryFactoryBean.afterPropertiesSet，创建Repository</p><h3>JpaRepositoryFactoryBean如何创建Repository</h3><p>其实，最关键的还是Repository是如何被创建出来的，首先看afterPropertiesSet</p><div class=\"highlight\"><pre><code class=\"language-text\">public void afterPropertiesSet() {\n\n    this.factory = createRepositoryFactory();\n    this.factory.setQueryLookupStrategyKey(queryLookupStrategyKey);\n    this.factory.setNamedQueries(namedQueries);\n    this.factory.setEvaluationContextProvider(\n            evaluationContextProvider.orElseGet(() -&gt; QueryMethodEvaluationContextProvider.DEFAULT));\n    this.factory.setBeanClassLoader(classLoader);\n    this.factory.setBeanFactory(beanFactory);\n\n    if (publisher != null) {\n        this.factory.addRepositoryProxyPostProcessor(new EventPublishingRepositoryProxyPostProcessor(publisher));\n    }\n\n    repositoryBaseClass.ifPresent(this.factory::setRepositoryBaseClass);\n\n    RepositoryFragments customImplementationFragment = customImplementation //\n            .map(RepositoryFragments::just) //\n            .orElseGet(RepositoryFragments::empty);\n\n    RepositoryFragments repositoryFragmentsToUse = this.repositoryFragments //\n            .orElseGet(RepositoryFragments::empty) //\n            .append(customImplementationFragment);\n\n    this.repositoryMetadata = this.factory.getRepositoryMetadata(repositoryInterface);\n\n    // Make sure the aggregate root type is present in the MappingContext (e.g. for auditing)\n    this.mappingContext.ifPresent(it -&gt; it.getPersistentEntity(repositoryMetadata.getDomainType()));\n\n    //这里创建Repository    \n    this.repository = Lazy.of(() -&gt; this.factory.getRepository(repositoryInterface, repositoryFragmentsToUse));\n\n    if (!lazyInit) {\n        this.repository.get();\n    }\n}</code></pre></div><p>具体来看<code>RepositoryFactorySupport.getRepository()</code>方法</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">T</span> <span class=\"nf\">getRepository</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">repositoryInterface</span><span class=\"o\">,</span> <span class=\"n\">RepositoryFragments</span> <span class=\"n\">fragments</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">&#34;Initializing repository instance for {}…&#34;</span><span class=\"o\">,</span> <span class=\"n\">repositoryInterface</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">Assert</span><span class=\"o\">.</span><span class=\"na\">notNull</span><span class=\"o\">(</span><span class=\"n\">repositoryInterface</span><span class=\"o\">,</span> <span class=\"s\">&#34;Repository interface must not be null!&#34;</span><span class=\"o\">);</span>\n    <span class=\"n\">Assert</span><span class=\"o\">.</span><span class=\"na\">notNull</span><span class=\"o\">(</span><span class=\"n\">fragments</span><span class=\"o\">,</span> <span class=\"s\">&#34;RepositoryFragments must not be null!&#34;</span><span class=\"o\">);</span>\n\n    <span class=\"n\">RepositoryMetadata</span> <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">getRepositoryMetadata</span><span class=\"o\">(</span><span class=\"n\">repositoryInterface</span><span class=\"o\">);</span>\n    <span class=\"n\">RepositoryComposition</span> <span class=\"n\">composition</span> <span class=\"o\">=</span> <span class=\"n\">getRepositoryComposition</span><span class=\"o\">(</span><span class=\"n\">metadata</span><span class=\"o\">,</span> <span class=\"n\">fragments</span><span class=\"o\">);</span>\n    <span class=\"c1\">//指定RepositoryBaseClass为SimpleJpaRepository\n</span><span class=\"c1\"></span>    <span class=\"n\">RepositoryInformation</span> <span class=\"n\">information</span> <span class=\"o\">=</span> <span class=\"n\">getRepositoryInformation</span><span class=\"o\">(</span><span class=\"n\">metadata</span><span class=\"o\">,</span> <span class=\"n\">composition</span><span class=\"o\">);</span>\n\n    <span class=\"n\">validate</span><span class=\"o\">(</span><span class=\"n\">information</span><span class=\"o\">,</span> <span class=\"n\">composition</span><span class=\"o\">);</span>\n\n    <span class=\"n\">Object</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">getTargetRepository</span><span class=\"o\">(</span><span class=\"n\">information</span><span class=\"o\">);</span>\n\n    <span class=\"c1\">// Create proxy\n</span><span class=\"c1\"></span>    <span class=\"n\">ProxyFactory</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ProxyFactory</span><span class=\"o\">();</span>\n    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">setTarget</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">setInterfaces</span><span class=\"o\">(</span><span class=\"n\">repositoryInterface</span><span class=\"o\">,</span> <span class=\"n\">Repository</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">TransactionalProxy</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n\n    <span class=\"c1\">//Bean Validation Advice\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">MethodInvocationValidator</span><span class=\"o\">.</span><span class=\"na\">supports</span><span class=\"o\">(</span><span class=\"n\">repositoryInterface</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">addAdvice</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">MethodInvocationValidator</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//事务 Advice\n</span><span class=\"c1\"></span>    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">addAdvice</span><span class=\"o\">(</span><span class=\"n\">SurroundingTransactionDetectorMethodInterceptor</span><span class=\"o\">.</span><span class=\"na\">INSTANCE</span><span class=\"o\">);</span>\n    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">addAdvisor</span><span class=\"o\">(</span><span class=\"n\">ExposeInvocationInterceptor</span><span class=\"o\">.</span><span class=\"na\">ADVISOR</span><span class=\"o\">);</span>\n\n    <span class=\"c1\">//RepositoryProxyPostProcessor处理\n</span><span class=\"c1\"></span>    <span class=\"n\">postProcessors</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">processor</span> <span class=\"o\">-&gt;</span> <span class=\"n\">processor</span><span class=\"o\">.</span><span class=\"na\">postProcess</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">information</span><span class=\"o\">));</span>\n\n    <span class=\"c1\">//默认方法 Advice,背后实现为SimpleJpaRepository\n</span><span class=\"c1\"></span>    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">addAdvice</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">DefaultMethodInvokingMethodInterceptor</span><span class=\"o\">());</span>\n\n    <span class=\"n\">ProjectionFactory</span> <span class=\"n\">projectionFactory</span> <span class=\"o\">=</span> <span class=\"n\">getProjectionFactory</span><span class=\"o\">(</span><span class=\"n\">classLoader</span><span class=\"o\">,</span> <span class=\"n\">beanFactory</span><span class=\"o\">);</span>\n    <span class=\"c1\">//自定义方法 Advice\n</span><span class=\"c1\"></span>    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">addAdvice</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">QueryExecutorMethodInterceptor</span><span class=\"o\">(</span><span class=\"n\">information</span><span class=\"o\">,</span> <span class=\"n\">projectionFactory</span><span class=\"o\">));</span>\n\n    <span class=\"n\">composition</span> <span class=\"o\">=</span> <span class=\"n\">composition</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">RepositoryFragment</span><span class=\"o\">.</span><span class=\"na\">implemented</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">));</span>\n    <span class=\"c1\">//自定义实现方法的 Advice\n</span><span class=\"c1\"></span>    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">addAdvice</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">ImplementationMethodExecutionInterceptor</span><span class=\"o\">(</span><span class=\"n\">composition</span><span class=\"o\">));</span>\n\n    <span class=\"c1\">//通过动态代理创建Repository\n</span><span class=\"c1\"></span>    <span class=\"n\">T</span> <span class=\"n\">repository</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getProxy</span><span class=\"o\">(</span><span class=\"n\">classLoader</span><span class=\"o\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"na\">isDebugEnabled</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">&#34;Finished creation of repository instance for {}.&#34;</span><span class=\"o\">,</span> <span class=\"n\">repositoryInterface</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">repository</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p>通过源码我们可以知道，Spring Data JPA是基于SimpleJpaRepository类的动态代理实现，通过AOP实现对自定义方法进行处理的。</p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Spring data", 
                    "tagLink": "https://api.zhihu.com/topics/20143060"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85638263", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 30, 
            "title": "有了这两个IDE插件，我写出的代码质量杠杠的", 
            "content": "<h3>代码质量的重要性</h3><p>在我们日常完成需求中，常常因为时间紧迫，项目紧急上线，总想着先实现再说，然后等日后上线之后再慢慢优化，我相信，你可能看过很多祖传代码，各种<code>//TODO</code>，然而往往随着项目的上线，<code>TODO</code>就变成<code>DONE</code>了。</p><p>其实，不是我们不想去完成<code>TODO</code>，而是一旦项目上线交付，验证过后的功能再次修改肯定会带来一定的风险，所以只要不出问题，就不会再次打开修改，甚至重构，这也是祖传代码的由来。</p><p>所以，为了避免低质量代码的存在，在编码阶段就应该保持一定的代码质量，及时时间紧迫交付压力大，也要保持着一定的代码洁癖，做到在一定条件下最优。</p><p>还有，程序员的思维都是完美主义，所以一旦确定思路，编码的速度其实可以很快，特别是简单的业务代码，小键盘敲得飞起，我们都讨厌各种<code>if</code>非空判断，各种<code>check</code>，因为这是不完美的，而代码质量的高低往往就在这些细节，而我们常常忽略的就是这些。</p><p>如果等到测试阶段再发现问题，那就得返工，而如果测试没有发现问题等到生产发布之后才发现问题，或者造成程序漏洞，那么将会得不偿失，还可能造成生产事故，所以每个程序员都有必要提高自己的代码质量，对自己的代码负责的同时也对自己的工作负责。</p><h3>不断提高代码质量</h3><p>从大的方面来讲，可以从这几个方面，不断提高自己的编程能力：</p><ul><li>编码之前需要做一定的设计，主要考虑：耦合度，拓展性，复用度</li><li>熟悉类库，熟悉API，避免自己造轮子</li><li>阅读优秀源码并加以实践</li><li>参考一些已有的最佳实践，代码片段，但是避免复制粘贴</li><li>多考虑一些细节、边界、异常场景</li><li>保持代码的整洁，包括类、方法、变量的命名</li><li>在I/O操作多考虑性能问题，重要信息多考虑安全问题</li></ul><p>代码质量的修炼不是一日而成，而是在实践中不断练习，当有一天觉得自己写的代码就像一首诗的时候，当自己的代码被人夸奖的时候，内心岂不是也是美滋滋</p><h3>使用Alibaba代码规范插件和SonarLint插件实时提高代码质量</h3><h3>Alibaba Java开发手册 &amp; 代码规范插件</h3><h3>阿里巴巴Java开发手册</h3><p><b>项目地址：</b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/p3c\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/alibaba/p3c</span><span class=\"invisible\"></span></a></p><p>《阿里巴巴Java开发手册》在经历过N多个最终版（也是大家共同努力），最终得到大家共同的认可，至少在国内为行业规范的贡献还是不容小觑（直至今天，IDEA插件下载了达到了80万次），也顺利地出了书，感谢！</p><p>手册主要有如下几部分：</p><ul><li>编程规范</li><li>异常日志</li><li>单元测试</li><li>安全规约</li><li>Mysql数据库</li><li>工程结构</li><li>设计规约</li></ul><h3>代码规范插件</h3><p><b>官方安装教程：</b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/p3c/wiki\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/alibaba/p3c/</span><span class=\"invisible\">wiki</span><span class=\"ellipsis\"></span></a></p><p>代码规范插件实现了开发手册中的53条规则，基本都是基于<a href=\"https://link.zhihu.com/?target=https%3A//pmd.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PMD</a>实现，可以扫描工程已有的代码，也可以实时检查，让我们及时发现问题代码，规避风险，写出规范代码，特别是对于同一团队，统一的代码规范非常重要，形成统一的风格，有利于看懂他人代码，排查问题等。</p><p><b>检查结果一共分三个等级：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7f8fb13dd57b1eb1b108f5ff7e151157_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1630\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"1630\" data-original=\"https://pic4.zhimg.com/v2-7f8fb13dd57b1eb1b108f5ff7e151157_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1630&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1630\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1630\" data-original=\"https://pic4.zhimg.com/v2-7f8fb13dd57b1eb1b108f5ff7e151157_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7f8fb13dd57b1eb1b108f5ff7e151157_b.jpg\"/></figure><p>扫描结果效果如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a4e0b9a89e83def416bc61c62f2d9d8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb\" width=\"1304\" data-original=\"https://pic3.zhimg.com/v2-a4e0b9a89e83def416bc61c62f2d9d8a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1304&#39; height=&#39;452&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1304\" data-original=\"https://pic3.zhimg.com/v2-a4e0b9a89e83def416bc61c62f2d9d8a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a4e0b9a89e83def416bc61c62f2d9d8a_b.jpg\"/></figure><h3>SonarQube 与 SonarLint插件</h3><h3>SonarQube</h3><p><b>项目地址：</b><a href=\"https://link.zhihu.com/?target=https%3A//www.sonarqube.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">sonarqube.org/</span><span class=\"invisible\"></span></a></p><p>SonarQube是一种自动代码审查工具，支持多种语言，可检测代码中的错误，漏洞和代码异味等。并且能够生成代码审查报告，它能够集成单元测试，统计单元测试覆盖率等。它还能很好与现有的DevOps结合，例如，在Java方面支持Maven插件，并且能够与Jenkins集成，实现自动化分析、测试，生成报告等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cfdd6a8141e03e0a7b7b174c86b5b2a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2280\" data-rawheight=\"1100\" class=\"origin_image zh-lightbox-thumb\" width=\"2280\" data-original=\"https://pic1.zhimg.com/v2-cfdd6a8141e03e0a7b7b174c86b5b2a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2280&#39; height=&#39;1100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2280\" data-rawheight=\"1100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2280\" data-original=\"https://pic1.zhimg.com/v2-cfdd6a8141e03e0a7b7b174c86b5b2a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cfdd6a8141e03e0a7b7b174c86b5b2a0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>SonarLint插件</h3><p><b>项目地址：</b><a href=\"https://link.zhihu.com/?target=https%3A//www.sonarlint.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">sonarlint.org/</span><span class=\"invisible\"></span></a></p><p>一个IDE插件，与SonarQube使用同样的代码分析工具，能够在编码的阶段实时检查代码，并且在代码提交前做检查等，把存在的问题提前暴露，提高代码质量。</p><p><b>三种问题类型</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a1532c878e266e87655975cc3ea0aa67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"1622\" data-original=\"https://pic4.zhimg.com/v2-a1532c878e266e87655975cc3ea0aa67_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1622&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1622\" data-original=\"https://pic4.zhimg.com/v2-a1532c878e266e87655975cc3ea0aa67_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a1532c878e266e87655975cc3ea0aa67_b.jpg\"/></figure><p><b>五个问题等级</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2b5b5016a5d2e145e263ebcce25e3385_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1624\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"1624\" data-original=\"https://pic2.zhimg.com/v2-2b5b5016a5d2e145e263ebcce25e3385_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1624&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1624\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1624\" data-original=\"https://pic2.zhimg.com/v2-2b5b5016a5d2e145e263ebcce25e3385_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2b5b5016a5d2e145e263ebcce25e3385_b.jpg\"/></figure><p>扫描结果效果如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-40bebb4ecaa3176a46129b3a9123da0b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2788\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb\" width=\"2788\" data-original=\"https://pic4.zhimg.com/v2-40bebb4ecaa3176a46129b3a9123da0b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2788&#39; height=&#39;716&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2788\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2788\" data-original=\"https://pic4.zhimg.com/v2-40bebb4ecaa3176a46129b3a9123da0b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-40bebb4ecaa3176a46129b3a9123da0b_b.jpg\"/></figure><h3>Alibaba代码规范插件 vs SonarLint</h3><p>介绍完这两个插件，那么应该如何选择呢？</p><p>这两个插件的侧重点不同：</p><ul><li><b>Alibaba代码规范插件</b>比较关心的是代码规范，编码风格上的，例如，命名规范，注释，代码行数等</li><li><b>SonarLint</b>比较关心代码正确性，存在的问题，风险，漏洞等，例如，重复代码，空指针，安全漏洞等</li></ul><p>所以，我建议结合使用，使用前者来规范代码，使用后者来提前发现代码的问题，配合起来提高工程整体的代码质量，并且能够在编码阶段规避风险，提高程序的健壮性。</p><p>说了这么多，赶紧用起来吧！</p>", 
            "topic": [
                {
                    "tag": "代码质量", 
                    "tagLink": "https://api.zhihu.com/topics/19585332"
                }, 
                {
                    "tag": "IntelliJ IDEA", 
                    "tagLink": "https://api.zhihu.com/topics/19607483"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "在用阿里插件", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "答猩猩", 
                    "userLink": "https://www.zhihu.com/people/25ddbc2d5262bc93b6dfcdb8ed9828c7", 
                    "content": "阿里和sonar lint都在用。", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84513204", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 0, 
            "title": "谈谈面向对象", 
            "content": "<h2>何为面向对象编程</h2><h3>面向对象编程简介</h3><p>面向对象编程(Object-oriented Programming,缩写：OOP)是软件工程中一种具有<code>对象</code>概念的编程范式(Programming Paradigm)，同时也是一种程序开发的抽象方针，与之对应的编程范式还有：函数式编程(Functional Programming)、过程式编程(Procedural Programming)、响应式编程(Reactive Programming)等。</p><h3>面向对象编程特点</h3><h3>一切皆为对象</h3><p>在面向对象编程世界里，一切皆为对象，对象是程序的基本单元，对象把程序与数据封装起来提供对外访问的能力，提高软件的重用性，灵活性和扩展性。例如，Java中的<code>java.lang.Object</code>对象，可以表示Java中的一切对象(注意区分8种基本数据类型)。</p><p>在面向对象编程中，通常把对象的数据(字段)称为<code>属性</code>，把对象的行为称为<code>方法</code>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-880ce78a7199e8a872155533ec40fb88_b.jpg\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1590\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-880ce78a7199e8a872155533ec40fb88_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2000&#39; height=&#39;1590&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1590\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-880ce78a7199e8a872155533ec40fb88_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-880ce78a7199e8a872155533ec40fb88_b.jpg\"/><figcaption>class</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>对象与类</h3><p>在面向对象编程中，最常见的表现就是基于<code>类(Class)</code>来表现的，每一个对象实例都有具体的类，即对象的类型。使用类的面向对象编程也称为<code>基于类的编程(Class-based programming)</code>，如常见的Java，C++；而与之类似的有<code>基于原型的编程(Prototype-based programming)</code>，如JavaScript。</p><ul><li>类：定义对象的数据格式(属性类型)和可用过程(方法)，同时也可能包含类成员的数据(如，常量)和过程(如，静态方法)，类其实就是对象的类型/原型(prototype)。</li><li>对象：类的实例，通过类实例化出来的具体实例。</li></ul><p>如，Java中<code>Object obj = new Object();</code>，其中<code>Object</code>就是类，而<code>obj</code>就是具体对象实例。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ee451fd028abe99074642bc73e98527e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"895\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-ee451fd028abe99074642bc73e98527e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;895&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"895\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-ee451fd028abe99074642bc73e98527e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ee451fd028abe99074642bc73e98527e_b.jpg\"/><figcaption>class vs object</figcaption></figure><h3>面向对象三大特征</h3><p>面向对象的三大特征分别是：封装、继承、多态，这三者是面向对象编程的基本要素</p><ul><li>封装(Encapsulation)</li></ul><p>通过对象隐藏程序的具体实现细节，将数据与操作包装在一起，对象与对象之间通过消息传递机制实现互相通信（方法调用），具体的表现就是通过提供访问接口实现消息的传入传出。</p><p>封装常常会通过控制访问权限来控制对象之间的互访权限，常见的访问权限：公有(<code>public</code>)，私有(<code>private</code>)，保护(<code>protected</code>)。某些语言可能还会提供更加具体的访问控制，如，Java的<code>package</code>。</p><p>封装的意义：由于封装隐藏了具体的实现，如果实现的改变或升级对于使用方而言是无感知的，提高程序的可维护性；而且封装鼓励程序员把特定数据与对数据操作的功能打包在一起，有利于应用程序的<code>去耦</code>。</p><ul><li>继承(Inheritance)</li></ul><p>支持类的语言基本都支持继承，继承即类之间可以继承，通过继承得到的类称为子类，被继承的类为父类，子类相对于父类更加具体化。</p><p>子类具有自己特有的属性和方法，并且子类使用父类的方法也可以覆盖(重写)父类方法，在某些语言中还支持多继承，但是也带来了覆盖的复杂性。</p><p>继承的意义：继承是代码复用的基础机制</p><ul><li>多态(Polymorphism)</li></ul><p>多态发生在运行期间，即子类型多态，指的是子类型是一种多态的形式，不同类型的对象实体有统一接口，相同的消息给予不同的对象会引发不同的动作。</p><p>多态的意义：提供了编程的灵活性，简化了类层次结构外部的代码，使编程更加注重<code>关注点分离</code>(Separation of concerns，SoC)</p><h3>其他特征</h3><ul><li>抽象(Abstraction)</li></ul><p>能够把复杂问题通过抽象简单化，可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</p><ul><li>组合(Composition)</li></ul><p>对象可以在其实例变量中包含其他对象</p><h3>思考</h3><p>随着计算机科学的发展，面向对象也一直在扩展，其实面向对象只是一种编程范例，或者是一种编程思路，只是编码解决问题的一种通用思路，不同语言对于面向对象的支持与实现其实也是大同小异，了解面向对象的思想更为重要。无需纠结概念上的却别，例如，Golang认为组合优于继承，但是从大体来看其实组合和继承最终的结果都是为了复用。</p><h2>为什么面向对象编程</h2><h3>面向对象解决的问题</h3><p>面向对象思想早在20世纪50年代末和60年代初就已经被提出，第一个真正实现面向对象的语言Smalltalk，也就在20世纪70年代出现；面向对象的提出就是为了提高软件的重用性、灵活性和扩展性。</p><p>早期的编程范式就是过程式编程，因为计算机运行的时候就是一行一行指令执行，所以传统的编程方式就是把程序看成一系列函数的集合，或者直接向机器发出指令(如，汇编语言)，这就是面向过程的编程。而随着计算机的发展，以及过程式编程暴露出来的问题，如无法复用，不灵活，不符合人类的思维方式等等，这就是面向对象思想产生的原因，人们希望编程是更加灵活更加符合人类思维方式的，面向对象编程本质可以看成是由各种独立而互相调用的对象组成的程序，而且事实证明，面向对象确实比过程式更加灵活，更加容易维护。</p><p>由于面向对象的各种特点，使得面向对象编程更加容易学习，是复杂的问题简单化，是程序更加便于分析、设计和理解。</p><h3>与其他编程范式比较</h3><p>那么，既然面向对象如此灵活易用，那么我们还需要其他的编程范式吗？</p><p>其实不然，使用面向对象解决问题的时候需要明确抽象的层次，也就是说不同的问题其对应的抽象层次是不同的，比如，<code>起床</code>这件事情：</p><ul><li>面向对象</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">class People {\n    public void getUp(){\n    }\n}\nPeople.getUp();//起床</code></pre></div><ul><li>面向过程</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">//起床开始\nopenEye;//睁眼，开始到结束\ndressed;//穿衣服，开始到结束\ngetOutOfBed;//下床，开始到结束\n//起床结束</code></pre></div><p>这样看来，从<code>起床</code>这件事情来看，面向对象更加简洁明了，但是面向过程在这过程中就没用了么，其实不是，例如，<code>People.getUp</code>方式可以这么实现：</p><div class=\"highlight\"><pre><code class=\"language-text\">class People {\n    public void getUp(){\n        Eye.open();//睁眼\n        Body.dressed();//穿衣服\n        Body.getOutOfBed();//下床\n    }\n}</code></pre></div><p>那么，从<code>起床</code>这个问题来看，起床的内部实现其实还是面向过程式的，即使用的还是面向对象编程去实现，所以，我个人觉得面向对象是相对的，需要站在解决问题的角度来看待面向对象的抽象层次，与之对于的过程式编程是在不同的层次解决不同的问题，其他编程范式也一样，它们之间可以并存，这并不矛盾。</p><h2>设计模式(Design Pattern)</h2><p>谈起面向对象编程，就不得不得说设计模式，<code>设计模式</code>最初来源于建筑设计领域，后由GoF(Gang of Four,四人帮，Erich Gamma,Richard Helm,Ralph Johnson,John Vlissides)引入到计算机科学，在他们合作出版的《设计模式：可复用面向对象软件的基础》（Design Patterns - Elements of Reusable Object-Oriented Software）一书中介绍了23种设计模式，而随着计算机科学的发展，设计模式也越来越多，应用也越来越广泛。</p><p>设计模式是一种用于在某个范围内普遍发生的问题的通用解决方法，设计模式不是代码，可以说是一种解决方案或者最佳实践，它是描述在不同情况下要怎么解决问题的一种方案或一种模板。</p><p>常见的设计模式：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0aba5daae5502580db8c68d5ed7f24c0_b.jpg\" data-size=\"normal\" data-rawwidth=\"2438\" data-rawheight=\"1936\" class=\"origin_image zh-lightbox-thumb\" width=\"2438\" data-original=\"https://pic1.zhimg.com/v2-0aba5daae5502580db8c68d5ed7f24c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2438&#39; height=&#39;1936&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"2438\" data-rawheight=\"1936\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2438\" data-original=\"https://pic1.zhimg.com/v2-0aba5daae5502580db8c68d5ed7f24c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0aba5daae5502580db8c68d5ed7f24c0_b.jpg\"/><figcaption>常见设计模式</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>SOLID和GRASP</h2><h3>S.O.L.I.D设计原则</h3><h3>单一职责原则（Single responsibility principle）</h3><p>一个类或则一个模块应当只有一种职责，其提供的服务应该与其责任保持一致，如果存在多种责任则应考虑对其拆分。</p><h3>开闭原则（Open/closed principle, OCP, Open for extension, close for modification）</h3><blockquote> 软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的<br/> </blockquote><p>开闭原则主要思想就是对于扩展的包含，对于修改的限制，新增功能的同时避免修改已有的实现，尽量做到对外提供的功能不变</p><h3>里氏替换原则（Liskov substitution principle）</h3><blockquote> 程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的<br/> </blockquote><p>里氏替换原则认为子类的功能应该可以完全替换父类并且不会影响程序的正确性，简单理解就是子类在继承父类的同时不能改变父类已有的功能，加上开闭原则子类只能对父类进行扩展而不能对父类的功能进行修改。</p><h3>接口隔离原则（Interface segregation principle,ISP）</h3><blockquote> 多个特定功能接口要好于一个宽泛用途的接口<br/> </blockquote><p>接口隔离强调将大而全的接口拆分成小而精的接口，使用方只需关系自己需要的接口，通过接口隔离有利于系统的解耦，增加程序的易用性和拓展性。</p><h3>依赖反转原则（Dependency inversion principle,DIP）</h3><blockquote> 1.高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口<br/> 2.抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口<br/> </blockquote><p>依赖反转原则是指一种特定的解耦（传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p><h3>GRASP面向对象设计</h3><p>通用职责分配软件模式（General Responsibility Assignment Software Patterns，GRASP），面向对象的设计原则，与SOLID设计原则无关，与GoF设计模式也不太相同，GRASP更像是一个设计思想，是在面向对象设计过程中起指导的作用，是长期面向对象编程过程中经过验证且标准的最佳实践，可以说我们通常所说的设计模式是基于GRASP的。</p><p>GRASP告诉我们怎样设计问题空间中的类与分配它们的行为职责，以及明确类之间的相互关系等，下面简单介绍下GRASP的九个原则：</p><h3>信息专家原则(information expert)</h3><p>信息专家原则主要用于表明何处委派职责，职责的委派可以是一个方法，字段等。</p><p>分配职责的原则：查看给定的职责，确定履行职责所需要的信息，然后确定信息的位置并将其职责分配给它。也就是，将职责分配给拥有履行一个职责所必需所有信息的类。</p><h3>创造者原则(creator)</h3><p>创建对象是面向对象系统中最常见的活动之一。创建者原则表明对象的创建应该由哪个类负责创建的原则，如果A和B之间符合下面的规则，则表明A的创建可以分配给B： - 实例B包含实例A或者实例B聚合实例A - 实例B记录实例A - 实例B频繁使用实例A - 实例B拥有实例A初始化的全部信息并且在创建的过程中把这些信息传递给A</p><h3>低耦合原则(low coupling)</h3><p>耦合是衡量一个元素与其他元素的连接，或依赖其他元素的强弱程度。低耦合是一种评估模式，决定了如何将责任的分配</p><p>低耦合设计： - 类与类之间的依赖尽可能要降到最小 - 修改一个类对其他类的影响应该是无影响或者要把影响降到最小 - 提高系统的复用性</p><h3>高内聚原则(high cohesion)</h3><p>高内聚是衡量对象保持适当的集中，可管理和可理解的程度，低耦合通常需要高内聚的支持。</p><p>高内聚意味着特定元素的职责是强相关且高度集中的，为了实现高内聚通常做法就是类的划分和子系统的划分，若是划分的元素低内聚也就是职责不明确，那么使用者将会难以理解，程序也难以复用，难以维护。</p><h3>控制器原则(controller)</h3><p>控制器模式是通过控制器(Controller)将系统事件或者一类用例分配给对应职责的对象，这个对象可以是类或模块或子系统，控制器不与UI进行交互，它只负责系统事件的调配。</p><p>基于用例的控制器应该负责处理该类别的所有用例，并且是支持多用例的（如，用户相关的用例，新增用户和修改用户等应该统一交给用户控制器处理）</p><p>虽然控制器不与UI交互，但控制器通常用于UI层之外的第一层，也就是我们经常使用的MVC软件架构种的<code>C</code>层（即控制器层），控制器层起组织协调的作用，负责事件的分发委派并返回处理结果。</p><h3>多态性原则(polymorphism)</h3><p>多态性原则即面向对象的三大特征之一，指的是不同的类型实现统一的接口，使在系统运行期间相同消息发送给不同类型的实例而会有不同行为。</p><p>在具有多态性的场景下应该使用多态性操作，而不应该使用具体某个类型（如表现在Java中就是使用接口编程，即IOP）</p><h3>纯虚构(pure Fabrication)</h3><p>纯虚构是指一个不代表处理某个问题领域的类，专门用于实现<code>高内聚低耦合</code>，提高复用性，这总类在领域驱动设计中被称为服务(Service)。</p><p>为了实现<code>高内聚</code>类通常根据功能被划分称为功能集中的类，而这种划分导致使用方需要更多的类从而提高了耦合度，这与低耦合相矛盾，而通过纯虚构可以构造出&#34;虚构类&#34;，这种类不是针对某个问题，而是某些能力/功能的抽象划分。（实际使用中例如我们通常使用的分层系统，数据库访问层就属于纯虚构的一种实现）</p><h3>中介原则(Indirection)</h3><p>中介模式是指通过一个<code>中介</code>来实现两个对象之间的交互实现低耦合。其目的是为了避免两个对象之间产生直接耦合，降低对象之间的耦合度。</p><p>同样的，在MVC设计模式中，控制器(Controller)起到的作用就是作为中介连接其数据模型(Model)与视图(View)</p><h3>受保护变量原则(protected Variations)</h3><p>与开闭原则类似，通过使用接口封装系统中存在的不稳定点，并且使用多态操作来使用此接口，从而避免不稳定点影响其他对象（类，模块，子系统等）</p><h2>总结</h2><p>面向对象编程其实是一个非常系统非常抽象的话题，这里只对主要概念的介绍以及一些个人的看法。要理解并使用面向对象编程需要通过不断的实践和理解，并且需要一定的抽象能力，通过阅读以后的优秀源码也可以增强自己的面向对象编程意识。如果在面向对象抽象过程中一团雾水的话可以通过画图来整理思路，通过面向对象的设计原则来检查自己的设计与实现，循序渐进不断迭代来提高自己的面向对象编程能力和思维方式。</p><h2>参考</h2><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Object-oriented_programming\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">面向对象程序设计-维基百科</a><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/SOLID\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SOLID</a><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/GRASP_%28object-oriented_design%29\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GRASP_(object-oriented_design)</a><p></p>", 
            "topic": [
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }, 
                {
                    "tag": "编程范式", 
                    "tagLink": "https://api.zhihu.com/topics/19679700"
                }, 
                {
                    "tag": "面向对象编程", 
                    "tagLink": "https://api.zhihu.com/topics/19569910"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82050563", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 1, 
            "title": "fastjson再次发现漏洞，可能发生OOM导致宕机", 
            "content": "<h3>发现漏洞：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/fastjson/issues/2689\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">issue2689</a></h3><p>2019年9月2号有开发者在fastjson的仓库提了一个issue：Fastjson新版本解析到特定字符后直接触发异常。</p><p>具体问题是：字符串中包含\\x转义字符时可能引发OOM的问题 ，如：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//Code\n</span><span class=\"c1\"></span><span class=\"n\">String</span> <span class=\"n\">DEATH_STRING</span> <span class=\"o\">=</span> <span class=\"s\">&#34;{\\&#34;a\\&#34;:\\&#34;\\\\x&#34;</span><span class=\"o\">;</span>\n<span class=\"n\">Object</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">DEATH_STRING</span><span class=\"o\">);</span>\n\n<span class=\"c1\">//OOM\n</span><span class=\"c1\"></span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">lang</span><span class=\"o\">.</span><span class=\"na\">OutOfMemoryError</span><span class=\"o\">:</span> <span class=\"n\">Java</span> <span class=\"n\">heap</span> <span class=\"n\">space</span>\n\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">parser</span><span class=\"o\">.</span><span class=\"na\">JSONLexerBase</span><span class=\"o\">.</span><span class=\"na\">putChar</span><span class=\"o\">(</span><span class=\"n\">JSONLexerBase</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">5041</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">parser</span><span class=\"o\">.</span><span class=\"na\">JSONLexerBase</span><span class=\"o\">.</span><span class=\"na\">scanString</span><span class=\"o\">(</span><span class=\"n\">JSONLexerBase</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">889</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">parser</span><span class=\"o\">.</span><span class=\"na\">DefaultJSONParser</span><span class=\"o\">.</span><span class=\"na\">parseObject</span><span class=\"o\">(</span><span class=\"n\">DefaultJSONParser</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">483</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">parser</span><span class=\"o\">.</span><span class=\"na\">DefaultJSONParser</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">DefaultJSONParser</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">1394</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">parser</span><span class=\"o\">.</span><span class=\"na\">DefaultJSONParser</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">DefaultJSONParser</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">1360</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">JSON</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">JSON</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">165</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">JSON</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">JSON</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">175</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">alibaba</span><span class=\"o\">.</span><span class=\"na\">fastjson</span><span class=\"o\">.</span><span class=\"na\">JSON</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">JSON</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"n\">144</span><span class=\"o\">)</span>\n    <span class=\"o\">...</span></code></pre></div><p>具体问题从错误中可以找到：fastjson在<code>JSONLexerBase.scanString</code>中遇到<code>\\x</code>当做16进制处理，没有检查，而如果解析的字符串是以<code>\\x</code>结尾，或者解析完<code>\\x</code>字符串结束的时候，那么就会进入死循环，无限新增<code>EOI</code></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">case</span> <span class=\"sc\">&#39;x&#39;</span><span class=\"o\">:</span>\n     <span class=\"kt\">char</span> <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">();</span>\n     <span class=\"kt\">char</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">();</span>\n\n     <span class=\"kt\">int</span> <span class=\"n\">x_val</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">x1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">16</span> <span class=\"o\">+</span> <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">x2</span><span class=\"o\">];</span>\n     <span class=\"kt\">char</span> <span class=\"n\">x_char</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">)</span> <span class=\"n\">x_val</span><span class=\"o\">;</span>\n     <span class=\"n\">putChar</span><span class=\"o\">(</span><span class=\"n\">x_char</span><span class=\"o\">);</span>\n     <span class=\"k\">break</span><span class=\"o\">;</span></code></pre></div><p>死循环代码片段如下，</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">();</span><span class=\"c1\">//next函数在字符最后会返回：EOI，EOI=0x1A\n</span><span class=\"c1\"></span><span class=\"o\">...</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"n\">EOI</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isEOF</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">putChar</span><span class=\"o\">((</span><span class=\"kt\">char</span><span class=\"o\">)</span> <span class=\"n\">EOI</span><span class=\"o\">);</span>\n        <span class=\"k\">continue</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">JSONException</span><span class=\"o\">(</span><span class=\"s\">&#34;unclosed string : &#34;</span> <span class=\"o\">+</span> <span class=\"n\">ch</span><span class=\"o\">);</span>\n<span class=\"o\">}</span></code></pre></div><h3>解决漏洞</h3><p>在遇到<code>\\x</code>处理的时候做16进制检查：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c2fb2b04a109e6196a0b82c67388505f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2020\" data-rawheight=\"1140\" class=\"origin_image zh-lightbox-thumb\" width=\"2020\" data-original=\"https://pic4.zhimg.com/v2-c2fb2b04a109e6196a0b82c67388505f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2020&#39; height=&#39;1140&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2020\" data-rawheight=\"1140\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2020\" data-original=\"https://pic4.zhimg.com/v2-c2fb2b04a109e6196a0b82c67388505f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c2fb2b04a109e6196a0b82c67388505f_b.jpg\"/></figure><h3>官方建议</h3><blockquote>拒绝服务安全漏洞涉及之前所有FASTJSON版本，建议升级到最新版本1.2.60。如果遇到不兼容问题，可以使用如下兼容版本：<br/>1.1.15~1.1.31 -&gt; 1.1.31.sec07 这版本不一样是因为1.1.31.sec06发布后，发现1.1.31版本特有一个的问题，又发布了1.1.31.sec07<br/>1.1.32~1.1.33 -&gt; 1.1.33.sec06 <br/>1.1.34        -&gt; 1.1.34.sec06<br/>1.1.35~1.1.46 -&gt; 1.1.46.sec06<br/>1.2.3~1.2.7   -&gt; 1.2.7.sec06 因为1.2.7使用最多特别提供，也可以直接使用1.2.8.sec06<br/>1.2.8 -&gt; 1.2.8.sec06<br/>1.2.9~1.2.29 -&gt; 1.2.29.sec06</blockquote><h3>总结：</h3><p>由于这次漏洞，我才知道fastjson在反序列化的时候会处理16进制，也正是fastjson会处理16进制的反序列化才会导致这样的问题，其他JSON工具如<code>jackson</code>、<code>gson</code>等都不会处理，这里我还尝试了一下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//Code\n</span><span class=\"c1\"></span><span class=\"n\">String</span> <span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"s\">&#34;{\\&#34;name\\&#34;:\\&#34;\\\\x61\\\\x62\\\\x63\\&#34;}&#34;</span><span class=\"o\">;</span>\n<span class=\"n\">Object</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"o\">);</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;obj = &#34;</span> <span class=\"o\">+</span> <span class=\"n\">obj</span><span class=\"o\">);</span>\n\n<span class=\"c1\">//Result\n</span><span class=\"c1\"></span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">&#34;name&#34;</span><span class=\"o\">:</span><span class=\"s\">&#34;abc&#34;</span><span class=\"o\">}</span></code></pre></div><p>对于正常的JSON是不会引出漏洞的，只有在特殊情况，或者恶意攻击的时候才会，这也就是这个问题直到现在才发现，所以，如果用了fastjson处理JSON的还是尽快升级，避免引发问题。</p><h3>参考：</h3><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/fastjson/issues/2689\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-b1ba1caabb17132c3bbcf00d612b1267_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Fastjson新版本解析到特定字符后直接触发异常 · Issue #2689 · alibaba/fastjson</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/fastjson/commit/995845170527221ca0293cf290e33a7d6cb52bf7\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-196fd72c5bb904c3ef9e46ae7721d946_ipico.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">修复 #2689 字符串中包含\\x转义字符时可能引发OOM的问题 · alibaba/fastjson@9958451</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/fastjson/releases\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-b1ba1caabb17132c3bbcf00d612b1267_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">alibaba/fastjson</a><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "fastjson", 
                    "tagLink": "https://api.zhihu.com/topics/20038927"
                }, 
                {
                    "tag": "JSON", 
                    "tagLink": "https://api.zhihu.com/topics/19602492"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81885441", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 1, 
            "title": "使用SpringBoot之后web.xml去哪儿了", 
            "content": "<h3>web.xml的作用</h3><p>还记得我们在写Java Web的时候吗，那个时候需要Web工程都需要在<code>WEB-INF</code>下，放置一个<code>web.xml</code>文件，其大概格式如下：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>\n<span class=\"nt\">&lt;web-app</span> <span class=\"na\">version=</span><span class=\"s\">&#34;2.4&#34;</span> \n    <span class=\"na\">xmlns=</span><span class=\"s\">&#34;http://java.sun.com/xml/ns/j2ee&#34;</span> \n    <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span> \n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">&#34;http://java.sun.com/xml/ns/j2ee \n</span><span class=\"s\">    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&#34;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;display-name&gt;</span>DEMO<span class=\"nt\">&lt;/display-name&gt;</span> \n\n  <span class=\"nt\">&lt;filter&gt;</span>\n    <span class=\"nt\">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n    <span class=\"nt\">&lt;filter-class&gt;</span>web.filter.CharacterEncodingFilter<span class=\"nt\">&lt;/filter-class&gt;</span>\n  <span class=\"nt\">&lt;/filter&gt;</span>\n  <span class=\"nt\">&lt;filter-mapping&gt;</span>\n    <span class=\"nt\">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n    <span class=\"nt\">&lt;url-pattern&gt;</span>/*<span class=\"nt\">&lt;/url-pattern&gt;</span>\n  <span class=\"nt\">&lt;/filter-mapping&gt;</span>\n\n  <span class=\"nt\">&lt;servlet&gt;</span>\n    <span class=\"nt\">&lt;servlet-name&gt;</span>OrderServlet<span class=\"nt\">&lt;/servlet-name&gt;</span>\n    <span class=\"nt\">&lt;servlet-class&gt;</span>web.client.OrderServlet<span class=\"nt\">&lt;/servlet-class&gt;</span>\n  <span class=\"nt\">&lt;/servlet&gt;</span>\n\n  <span class=\"nt\">&lt;servlet-mapping&gt;</span>\n    <span class=\"nt\">&lt;servlet-name&gt;</span>OrderServlet<span class=\"nt\">&lt;/servlet-name&gt;</span>\n    <span class=\"nt\">&lt;url-pattern&gt;</span>/servlet/OrderServlet<span class=\"nt\">&lt;/url-pattern&gt;</span>\n  <span class=\"nt\">&lt;/servlet-mapping&gt;</span>\n\n  <span class=\"nt\">&lt;welcome-file-list&gt;</span>\n    <span class=\"nt\">&lt;welcome-file&gt;</span>index.jsp<span class=\"nt\">&lt;/welcome-file&gt;</span>\n  <span class=\"nt\">&lt;/welcome-file-list&gt;</span>\n<span class=\"nt\">&lt;/web-app&gt;</span></code></pre></div><p><code>web.xml</code>是Java EE中可选择用来描述应用部署描述的文件，使得Servlet容器可以加载部署应用，该文件可以用于声明Servlet，Servlet的访问映射，配置监听器等信息，可以用于描述外部资源，详情可以看Servlet 3.0规范：<a href=\"https://link.zhihu.com/?target=https%3A//jcp.org/en/jsr/detail%3Fid%3D315\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JSR 315</a></p><p>例如，Tomcat在启动部署一个Web应用的时候，会在初始化阶段加载<code>web.xml</code>文件，进而加载Servlet，加载Servet与Api的映射关系，最终才能对外提供服务。</p><p>在这个阶段，我们每次开发新的功能，新增新的Servlet都需要修改<code>web.xml</code>文件，配置也比较繁琐</p><h3>Spring MVC简化web.xml</h3><p>使用Spring MVC的时候，由于Spring MVC是通过一个Servlet实现的：</p><div class=\"highlight\"><pre><code class=\"language-xml\"><span class=\"cp\">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>\n<span class=\"nt\">&lt;web-app</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">&#34;http://java.sun.com/xml/ns/javaee&#34;</span>\n        <span class=\"na\">xmlns:web=</span><span class=\"s\">&#34;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34;</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">&#34;http://java.sun.com/xml/ns/javaee\n</span><span class=\"s\">              http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&#34;</span>\n    <span class=\"na\">id=</span><span class=\"s\">&#34;WebApp_ID&#34;</span> <span class=\"na\">version=</span><span class=\"s\">&#34;3.0&#34;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;display-name&gt;</span>Spring MVC App<span class=\"nt\">&lt;/display-name&gt;</span>\n\n    <span class=\"c\">&lt;!--字符编码过滤器--&gt;</span>\n    <span class=\"nt\">&lt;filter&gt;</span>\n        <span class=\"nt\">&lt;filter-name&gt;</span>characterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n        <span class=\"nt\">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"nt\">&lt;/filter-class&gt;</span>\n        <span class=\"nt\">&lt;init-param&gt;</span>\n            <span class=\"nt\">&lt;param-name&gt;</span>encoding<span class=\"nt\">&lt;/param-name&gt;</span>\n            <span class=\"nt\">&lt;param-value&gt;</span>UTF-8<span class=\"nt\">&lt;/param-value&gt;</span>\n        <span class=\"nt\">&lt;/init-param&gt;</span>\n        <span class=\"nt\">&lt;init-param&gt;</span>\n            <span class=\"nt\">&lt;param-name&gt;</span>forceEncoding<span class=\"nt\">&lt;/param-name&gt;</span>\n            <span class=\"nt\">&lt;param-value&gt;</span>true<span class=\"nt\">&lt;/param-value&gt;</span>\n        <span class=\"nt\">&lt;/init-param&gt;</span>\n    <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;filter-mapping&gt;</span>\n        <span class=\"nt\">&lt;filter-name&gt;</span>characterEncodingFilter<span class=\"nt\">&lt;/filter-name&gt;</span>\n        <span class=\"nt\">&lt;url-pattern&gt;</span>/*<span class=\"nt\">&lt;/url-pattern&gt;</span>\n    <span class=\"nt\">&lt;/filter-mapping&gt;</span>\n\n    <span class=\"nt\">&lt;servlet&gt;</span>\n        <span class=\"nt\">&lt;servlet-name&gt;</span>SpringController<span class=\"nt\">&lt;/servlet-name&gt;</span>\n        <span class=\"nt\">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"nt\">&lt;/servlet-class&gt;</span>\n        <span class=\"nt\">&lt;init-param&gt;</span>\n            <span class=\"nt\">&lt;param-name&gt;</span>contextConfigLocation<span class=\"nt\">&lt;/param-name&gt;</span>\n            <span class=\"nt\">&lt;param-value&gt;</span>/WEB-INF/spring-mvc.xml<span class=\"nt\">&lt;/param-value&gt;</span>\n        <span class=\"nt\">&lt;/init-param&gt;</span>\n        <span class=\"nt\">&lt;load-on-startup&gt;</span>1<span class=\"nt\">&lt;/load-on-startup&gt;</span>\n    <span class=\"nt\">&lt;/servlet&gt;</span>\n\n    <span class=\"nt\">&lt;servlet-mapping&gt;</span>\n        <span class=\"nt\">&lt;servlet-name&gt;</span>SpringController<span class=\"nt\">&lt;/servlet-name&gt;</span>\n        <span class=\"nt\">&lt;url-pattern&gt;</span>/<span class=\"nt\">&lt;/url-pattern&gt;</span>\n    <span class=\"nt\">&lt;/servlet-mapping&gt;</span>\n<span class=\"nt\">&lt;/web-app&gt;</span></code></pre></div><p>这个阶段，<code>web.xml</code>就只需做配置类的设置，基于SpringMVC就无需再自己配置Servlet，只需通过Controller进行开发，然后交给Spring容器管理，整个工程的入口就统一由<code>DispatcherServlet</code>来处理，<code>web.xml</code>得到进一步的简化。</p><h3>使用Spring Boot免去<code>web.xml</code></h3><p>使用Spring Boot进行Web开发的时候，按照官方的推荐都是使用内嵌的Servlet容器，和应用一起打包成jar包部署，当然，我们可以使用传统war包来部署，Main Class只需继承<code>org.springframework.boot.web.servlet.support.SpringBootServletInitializer</code>即可（启动时会加载所有<code>ServletContainerlnitializer</code>）。</p><p>免去web.xml是通过Servlet 3.0中的<code>javax.servlet.ServletContainerInitializer</code>来实现的，<code>ServletContainerInitializer</code>是提供了一个实现和<code>web.xml</code>类似功能的接口，在应用启动的时候能够通过<code>编程</code>的方式来注册Servlet、Fileter、Listener的功能。</p><p>SpringBoot通过Servlet3.0的这个设计，结合SPI机制，在<code>spring-web</code>包下发现<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>实现类：<code>org.springframework.web.SpringServletContainerInitializer</code>从而进行初始化，包括对<code>DispatcherServlet</code>的注册，<code>ContextLoaderListener</code>的注册等等，最终免去<code>web.xml</code></p><h3>总结</h3><p>Servlet 3.0之后提供了<code>ServletContainerInitializer</code>接口，通过实现该接口就可以通过代码的形式来实现<code>web.xml</code>的功能，最后注意，实现<code>ServletContainerInitializer</code>的实现了需要注意表明注解<code>@HandlesTypes</code>来指定实现类的参数从而进行定制化注册。</p><h3>参考：</h3><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//jcp.org/en/jsr/detail%3Fid%3D315\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JSR 315</a></li></ul>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Spring Boot", 
                    "tagLink": "https://api.zhihu.com/topics/20044714"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40574557", 
            "userName": "SevenLin澤耿", 
            "userLink": "https://www.zhihu.com/people/668202aff2aebf102bcc86b2b076c815", 
            "upvote": 1, 
            "title": "浅谈Java ClassLoader", 
            "content": "<h2><b>Class Loaders简介</b></h2><p>Class Loaders（类加载器）是JVM用于运行来动态加载类的，同时它们也是JRE的一部分，由于Class Loaders的存在，JVM运行Java程序的时候不需要知道底层文件或文件系统。</p><p>并不是所有的Java类都是一次性加载完的，大部分Java类在具体用到的时候才会加载。</p><p>每个Java类都有一个引用指向加载它的ClassLoader，特别的，数组类不是通过ClassLoader创建的，而是通过JVM在需要的时候自动创建的，数组类通过<code>getClassLoader()</code>方法获取ClassLoader的时候和该数组的元素类型的ClassLoader是一致的。</p><p>每个ClassLoader可以通过<code>getParent()</code>获取其父ClassLoader，如果获取到ClassLoader为<code>null</code>的话，那么该类是通过Bootstrap ClassLoader加载的。</p><h2><b>Java内置Class Loaders</b></h2><p>先看一个获取ClassLoader的例子</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Print The Java ClassLoader Tree\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">PrintClassLoaderTree</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">ClassLoader</span> <span class=\"n\">classLoader</span> <span class=\"o\">=</span> <span class=\"n\">PrintClassLoaderTree</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getClassLoader</span><span class=\"o\">();</span>\n\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"s\">&#34;|--&#34;</span><span class=\"o\">);</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">needContinue</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">needContinue</span><span class=\"o\">){</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">split</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">classLoader</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">classLoader</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n                <span class=\"n\">needContinue</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n                <span class=\"n\">classLoader</span> <span class=\"o\">=</span> <span class=\"n\">classLoader</span><span class=\"o\">.</span><span class=\"na\">getParent</span><span class=\"o\">();</span>\n                <span class=\"n\">split</span><span class=\"o\">.</span><span class=\"na\">insert</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"s\">&#34;\\t&#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p>在我机器上的运行结果(JDK8):</p><div class=\"highlight\"><pre><code class=\"language-text\">|--sun.misc.Launcher$AppClassLoader@18b4aac2\t\n    |--sun.misc.Launcher$ExtClassLoader@53bd815b\t\t\n        |--null</code></pre></div><p>从这个例子可以知道我们编写的Java类的ClassLoader是<code>AppClassLoader</code>，而<code>AppClassLoader</code>的ClassLoader是<code>ExtClassLoader</code>，而<code>ExtClassLoader</code>的ClassLoader是<code>Bootstrap ClassLoader</code>(从null可以得知)，这个过程中涉及到3个不同的ClassLoader，下面我们来逐一了解。</p><p><b>Bootstrap Class Loader(引导类加载器)</b></p><p>我们知道，我们平时编写Java类都是通过<code>java.lang.ClassLoader</code>的某个实例来加载的，那么到底是谁来加载<code>java.lang.ClassLoader</code>呢，答案就是Bootstrap Class Loader。</p><p>Bootstrap ClassLoader用于加载JDK内部类，如<code>rt.jar</code>和其他JRE中<code>lib</code>目录的Java类库中的类。Bootstrap ClassLoader充当所有其他ClassLoader实例的父级。</p><p>Bootstrap ClassLoader是JVM核心的一部分，由原生代码编写，不同的平台可能会有不同的实现。</p><p><b>Extension Class Loader(扩展类加载器)</b></p><p>Bootstrap Class Loader的子类，负载加载标准核心Java类的扩展，加载JRE中<code>lib/ext</code>目录中的jar,以及JVM系统属性<code>system property</code>中<code>java.ext.dirs</code>配置目录中的类</p><p><b>System Class Loader(系统类加载器)</b></p><p>Extension ClassLoader的子类，用于加载应用级别的类到JVM，即加载classpath目录下的Java类，通过<code>ClassLoader.getSystemClassLoader()</code>可以获得（如，上文中的sun.misc.Launcher$AppClassLoader）</p><p><b>Class Loaders树形图</b></p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-06fee4c1948b318936c66cf872d58717_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"700\" data-rawheight=\"829\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic4.zhimg.com/v2-06fee4c1948b318936c66cf872d58717_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;829&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"700\" data-rawheight=\"829\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic4.zhimg.com/v2-06fee4c1948b318936c66cf872d58717_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-06fee4c1948b318936c66cf872d58717_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>工作原理</b></h2><p>Class Loaders是JRE(Java Runtime Environment)的一部分，当JVM需要一个类的时候，Class Loader就会通过类的全名尝试定位到类文件(.class文件，字节码)的位置，并通过类文件定义成一个Java类(java.lang.Class的一个实例)；另外的，ClassLoader还负责加载应用需要的资源，如配置文件，图片等等。</p><p><b>核心API</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f3c8a7a4f616218cf6aa7881adc6469d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1298\" data-rawheight=\"884\" class=\"origin_image zh-lightbox-thumb\" width=\"1298\" data-original=\"https://pic2.zhimg.com/v2-f3c8a7a4f616218cf6aa7881adc6469d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1298&#39; height=&#39;884&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1298\" data-rawheight=\"884\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1298\" data-original=\"https://pic2.zhimg.com/v2-f3c8a7a4f616218cf6aa7881adc6469d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f3c8a7a4f616218cf6aa7881adc6469d_b.jpg\"/></figure><p>下面主要了解一下<code>loadClass</code>方法,java.lang.LoadClass的默认实现</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">protected</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">loadClass</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">resolve</span><span class=\"o\">)</span>\n        <span class=\"kd\">throws</span> <span class=\"n\">ClassNotFoundException</span>\n    <span class=\"o\">{</span>\n        <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">getClassLoadingLock</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// First, check if the class has already been loaded            \n</span><span class=\"c1\"></span>            <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">findLoadedClass</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">long</span> <span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">nanoTime</span><span class=\"o\">();</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">loadClass</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">findBootstrapClassOrNull</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">ClassNotFoundException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// ClassNotFoundException thrown if class not found                    \n</span><span class=\"c1\"></span>                    <span class=\"c1\">// from the non-null parent class loader                \n</span><span class=\"c1\"></span>                <span class=\"o\">}</span>\n\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// If still not found, then invoke findClass in order                    \n</span><span class=\"c1\"></span>                    <span class=\"c1\">// to find the class.                    \n</span><span class=\"c1\"></span>                    <span class=\"kt\">long</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">nanoTime</span><span class=\"o\">();</span>\n                    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">findClass</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n\n                    <span class=\"c1\">// this is the defining class loader; record the stats                    \n</span><span class=\"c1\"></span>                    <span class=\"n\">sun</span><span class=\"o\">.</span><span class=\"na\">misc</span><span class=\"o\">.</span><span class=\"na\">PerfCounter</span><span class=\"o\">.</span><span class=\"na\">getParentDelegationTime</span><span class=\"o\">().</span><span class=\"na\">addTime</span><span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t0</span><span class=\"o\">);</span>\n                    <span class=\"n\">sun</span><span class=\"o\">.</span><span class=\"na\">misc</span><span class=\"o\">.</span><span class=\"na\">PerfCounter</span><span class=\"o\">.</span><span class=\"na\">getFindClassTime</span><span class=\"o\">().</span><span class=\"na\">addElapsedTimeFrom</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">);</span>\n                    <span class=\"n\">sun</span><span class=\"o\">.</span><span class=\"na\">misc</span><span class=\"o\">.</span><span class=\"na\">PerfCounter</span><span class=\"o\">.</span><span class=\"na\">getFindClasses</span><span class=\"o\">().</span><span class=\"na\">increment</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resolve</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">resolveClass</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span></code></pre></div><p>大致过程如下：</p><ul><li>调用<code>findLoadedClass</code>方法先从已经加载过class中寻找要加载的类</li><li>如果要加载的类还没被加载过，通过父ClassLoader去加载该类（此过程会递归，即委托模型）</li><li>如果父ClassLoader仍然么没找到该类，那么将会调用<code>findClass</code>方法加载该类（这个方法JDK中默认实现是java.net.URLClassLoader.findClass()）</li><li>如果最终没有找到，那么抛出异常<code>java.lang.NoClassDefFoundError</code>或<code>java.lang.ClassNotFoundException</code></li></ul><h2><b>Class Loader的委托模型(Delegation Model)</b></h2><p>先看看JDK文档中如何说描述委托模型</p><blockquote>The <b>ClassLoader</b> class uses a delegation model to search for classes and resources. Each instance of <b>ClassLoader</b> has an associated parent class loader. When requested to find a class or resource, a <b>ClassLoader</b> instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine&#39;s built-in class loader, called the &#34;bootstrap class loader&#34;, does not itself have a parent but may serve as the parent of a <b>ClassLoader</b> instance.</blockquote><p>大致意思如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">ClassLoader类使用委托模型来搜索类和资源。每个 ClassLoader 实例都有一个相关的父类加载器。\n需要查找类或资源时，ClassLoader 实例会在试图亲自查找类或资源之前，\n将搜索类或资源的任务委托给其父类加载器。\n虚拟机的内置类加载器（称为 &#34;bootstrap class loader&#34;）本身没有父类加载器，\n但是可以将它用作 ClassLoader 实例的父类加载器。</code></pre></div><p>也就是，只有在Bootstrap ClassLoader和Extension ClassLoader没有成功加载要加载的类时，System ClassLoader尝试自己去加载</p><p><b>委托模型保证类的唯一性(Unique Classes)</b></p><p>通过委托模型，类的加载都将是从顶级的父ClassLoader(Bootstrap ClassLoader)到当前ClassLoader实例逐级加载，避免了重复加载，特别是对于Java的核心类库，如果一个类被重复加载，那么将会引来同样的<code>Class</code>但是类型却不一致的情况，因为JVM在判断两个Class是否相同需要同时判断<code>类名</code>和<code>类的ClassLoader</code>两个条件。</p><p><b>委托模型提供了子ClassLoader对父ClassLoader的能见度(Visiblity)</b></p><p>子ClassLoader对父CLassLoader所加载的类是可见的，例如，System ClassLoader可以看见Extension ClassLoader和Bootstrap ClassLoader加载的类，但是反之则不然。</p><h2><b>自定义ClassLoader</b></h2><p><b>自定义ClassLoader从指定文件系统读取class</b></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FileSystemClassLoader</span> <span class=\"kd\">extends</span> <span class=\"n\">ClassLoader</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">path</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">FileSystemClassLoader</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">findClass</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">ClassNotFoundException</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">String</span> <span class=\"n\">fileName</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&#34;.&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;/&#34;</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&#34;.class&#34;</span><span class=\"o\">;</span>\n\n        <span class=\"n\">File</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"n\">fileName</span><span class=\"o\">);</span>\n\n        <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">exists</span><span class=\"o\">()){</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">ClassNotFoundException</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">innerDefineClass</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span><span class=\"n\">file</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">innerDefineClass</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">File</span> <span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">BufferedInputStream</span> <span class=\"n\">bis</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">bis</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BufferedInputStream</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">FileInputStream</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">));</span>\n            <span class=\"n\">ByteArrayOutputStream</span> <span class=\"n\">bos</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ByteArrayOutputStream</span><span class=\"o\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">bufferSize</span> <span class=\"o\">=</span> <span class=\"n\">1024</span><span class=\"o\">;</span>\n            <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"n\">bufferSize</span><span class=\"o\">];</span>\n            <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">bis</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buf</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">bufferSize</span><span class=\"o\">))</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">){</span>\n                <span class=\"n\">bos</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">buf</span><span class=\"o\">,</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">len</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">classByte</span> <span class=\"o\">=</span> <span class=\"n\">bos</span><span class=\"o\">.</span><span class=\"na\">toByteArray</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span> <span class=\"n\">defineClass</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">classByte</span><span class=\"o\">,</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"n\">classByte</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span><span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">bis</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"n\">bis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//ignore                }\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p><b>FileSystemClassLoader测试</b></p><ul><li>自定义Class</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.sevenlin.blueshit</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HelloWorld</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">HelloWorld</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;Hello world&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><ul><li>测试</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">loadFileSystemClass</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n\n    <span class=\"n\">String</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/Users/sevenlin/project/blueshit/&#34;</span><span class=\"o\">;</span>\n    <span class=\"n\">String</span> <span class=\"n\">className</span> <span class=\"o\">=</span> <span class=\"s\">&#34;com.sevenlin.blueshit.HelloWorld&#34;</span><span class=\"o\">;</span>\n\n    <span class=\"n\">FileSystemClassLoader</span> <span class=\"n\">fileSystemClassLoader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileSystemClassLoader</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">);</span>\n\n    <span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">clazz</span> <span class=\"o\">=</span> <span class=\"n\">fileSystemClassLoader</span><span class=\"o\">.</span><span class=\"na\">loadClass</span><span class=\"o\">(</span><span class=\"n\">className</span><span class=\"o\">);</span>\n\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">clazz</span><span class=\"o\">);</span>\n\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">printClassLoaderTree</span><span class=\"o\">(</span><span class=\"n\">clazz</span><span class=\"o\">.</span><span class=\"na\">getClassLoader</span><span class=\"o\">());</span>\n\n    <span class=\"n\">Method</span> <span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">clazz</span><span class=\"o\">.</span><span class=\"na\">getMethod</span><span class=\"o\">(</span><span class=\"s\">&#34;main&#34;</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[].</span><span class=\"na\">class</span><span class=\"o\">);</span>\n    <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]{};</span>\n    <span class=\"n\">main</span><span class=\"o\">.</span><span class=\"na\">invoke</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Object</span><span class=\"o\">)</span><span class=\"n\">params</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">printClassLoaderTree</span><span class=\"o\">(</span><span class=\"n\">ClassLoader</span> <span class=\"n\">classLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">StringBuilder</span> <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"s\">&#34;|--&#34;</span><span class=\"o\">);</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">needContinue</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">needContinue</span><span class=\"o\">){</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">split</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">classLoader</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">classLoader</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"n\">needContinue</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n            <span class=\"n\">classLoader</span> <span class=\"o\">=</span> <span class=\"n\">classLoader</span><span class=\"o\">.</span><span class=\"na\">getParent</span><span class=\"o\">();</span>\n            <span class=\"n\">split</span><span class=\"o\">.</span><span class=\"na\">insert</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"s\">&#34;\\t&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>结果</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">class com.sevenlin.blueshit.HelloWorld\n    |--com.sevenlin.blueshit.classloader.FileSystemClassLoader@15d0c81b\t\n        |--sun.misc.Launcher$AppClassLoader@18b4aac2\t\t\n            |--sun.misc.Launcher$ExtClassLoader@4b1c1ea0\t\t\t\n                |--null\nHello world</code></pre></div><h2><b>Context ClassLoader</b></h2><p>从上文我们知道，通过ClassLoader的委托模型可以很好的加载Java类，并且保证Java类的唯一性；但是有的时候JVM需要动态地去加载第三方的类或者资源，那么通过这样就会出现问题。</p><p>例如，Java中提供了很多SPI(Service Provider Interface,服务提供者接口)，允许第三方实现这些接口，常见的有：JDBC，JNDI，JCE等，而这些接口都是Java的核心类库，由Bootstrap ClassLoader来加载，这样的就存在一个问题，Bootstrap ClassLoader不关心classpath下类的加载，在委派模型下SPI的实现类则没法加载。</p><p>Java就是通过<code>Thread.getContextLoader</code>来解决这个问题的，下面来看下这个方法在JDK中的描述：</p><blockquote>返回该线程的上下文ClassLoader。上下文ClassLoader由线程创建者提供，供运行于该线程中的代码在加载类和资源时使用。如果未设定，则默认为父线程的 ClassLoader 上下文。原始线程的上下文 ClassLoader 通常设定为用于加载应用程序的类加载器。 首先，如果有安全管理器，并且调用者的类加载器不是 null，也不同于其上下文类加载器正在被请求的线程上下文类加载器的祖先，则通过 &gt;RuntimePermission(&#34;getClassLoader&#34;) 权限调用该安全管理器的<code>checkPermission</code>方法，查看是否可以获取上下文ClassLoader。</blockquote><p>也就是说，通过Context ClassLoader就可以获取到当前线程的ClassLoader(通常是System ClassLoader),也就可以在classpath下加载到对于的实现类（SPI具体是如何工作的这里就不详细展开）。</p><p>那么这个Context ClassLoader是何时设置的呢？答案就在<code>ClassLoader.getSystemClassLoader</code>中,JVM在运行时启动序列的早期首先调用此方法，这时会创建系统类加载器并将其设置为调用 Thread 的上下文类加载器。</p><p>具体实现是ClassLoader中这个类：</p><div class=\"highlight\"><pre><code class=\"language-text\">class SystemClassLoaderAction\n    implements PrivilegedExceptionAction&lt;ClassLoader&gt; {\n    private ClassLoader parent;\n\n    SystemClassLoaderAction(ClassLoader parent) {\n        this.parent = parent;\n    }\n    public ClassLoader run() throws Exception {\n        String cls = System.getProperty(&#34;java.system.class.loader&#34;);\n        if (cls == null) {\n            return parent;\n        }\n        Constructor&lt;?&gt; ctor = Class.forName(cls, true, parent)\n            .getDeclaredConstructor(new Class&lt;?&gt;[] { ClassLoader.class });\n        ClassLoader sys = (ClassLoader) ctor.newInstance(\n            new Object[] { parent });\n        Thread.currentThread().setContextClassLoader(sys);\n        return sys;\n    }\n}</code></pre></div><p>原文</p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/45c4aae5d745\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-61be4323dd25a2d1d621fdfe998f3731_ipico.jpg\" data-image-width=\"985\" data-image-height=\"1166\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浅谈Java ClassLoader</a><p>参考</p><a href=\"https://link.zhihu.com/?target=http%3A//www.baeldung.com/java-classloaders\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-307abc0628f3cdec9fb4d14fe7ebc7c4_180x120.jpg\" data-image-width=\"952\" data-image-height=\"498\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Class Loaders in Java | Baeldung</a><a href=\"https://link.zhihu.com/?target=http%3A//www.importnew.com/15362.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入分析Java ClassLoader原理</a><a href=\"https://link.zhihu.com/?target=https%3A//www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9eff723abbe1819fda96d8bfbec1c195_ipico.jpg\" data-image-width=\"1000\" data-image-height=\"1000\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入探讨 Java 类加载器</a><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/java-core"
}
