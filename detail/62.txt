{
    "title": "前端战五渣学前端", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/zhang-lei-96-68", 
        "https://www.zhihu.com/people/zhang-zi-ling-34-35", 
        "https://www.zhihu.com/people/fu-zhi-yang", 
        "https://www.zhihu.com/people/zhao-yu-73-75", 
        "https://www.zhihu.com/people/du-du-lu-97-17", 
        "https://www.zhihu.com/people/lie-huo-fen-shen", 
        "https://www.zhihu.com/people/hua-luo-wu-sheng-62-16", 
        "https://www.zhihu.com/people/chen-li-qin-40-36", 
        "https://www.zhihu.com/people/70123", 
        "https://www.zhihu.com/people/ylm518", 
        "https://www.zhihu.com/people/zhong-ju-pai", 
        "https://www.zhihu.com/people/liao-long-hui-16", 
        "https://www.zhihu.com/people/yu-zhi-yi-70", 
        "https://www.zhihu.com/people/zhang-qi-3-66", 
        "https://www.zhihu.com/people/like-92-42-15", 
        "https://www.zhihu.com/people/zhao-xiao-peng-66", 
        "https://www.zhihu.com/people/su-yi-30", 
        "https://www.zhihu.com/people/luxuryzc", 
        "https://www.zhihu.com/people/loveqjl", 
        "https://www.zhihu.com/people/luan-shi-tong-meng-14", 
        "https://www.zhihu.com/people/zenvo-11-24", 
        "https://www.zhihu.com/people/meiko-73", 
        "https://www.zhihu.com/people/liu-yu-song-27-10", 
        "https://www.zhihu.com/people/zjuwu-yan-zu", 
        "https://www.zhihu.com/people/da-shu-99-36", 
        "https://www.zhihu.com/people/ni-gu-la-si-nuan-yang", 
        "https://www.zhihu.com/people/jie-94-79-43", 
        "https://www.zhihu.com/people/wind-39-73", 
        "https://www.zhihu.com/people/yizhi-xiao-cheng-zi-4", 
        "https://www.zhihu.com/people/wan-fu-xiong-93", 
        "https://www.zhihu.com/people/xin-xin-da-wang-67", 
        "https://www.zhihu.com/people/ren-ran-99-19-30", 
        "https://www.zhihu.com/people/ni-de-wo-guai", 
        "https://www.zhihu.com/people/zhe-ye-28", 
        "https://www.zhihu.com/people/qiao-mai-pi-65", 
        "https://www.zhihu.com/people/tong-ti-zhong-xiao-zhan-shen", 
        "https://www.zhihu.com/people/zhaodengyun", 
        "https://www.zhihu.com/people/niu-yong-hui-95", 
        "https://www.zhihu.com/people/san-sui-zhu", 
        "https://www.zhihu.com/people/shuidf", 
        "https://www.zhihu.com/people/guo-xu-31", 
        "https://www.zhihu.com/people/fire-blue-30", 
        "https://www.zhihu.com/people/hai-dao-chuan-jia-you-jiang-7408-96", 
        "https://www.zhihu.com/people/changfy", 
        "https://www.zhihu.com/people/kan-kan-3-52", 
        "https://www.zhihu.com/people/naruto-vegeta", 
        "https://www.zhihu.com/people/patrix", 
        "https://www.zhihu.com/people/yi-lu-60-62", 
        "https://www.zhihu.com/people/mei-zi-mo", 
        "https://www.zhihu.com/people/xu-zhi-zhi-17-25", 
        "https://www.zhihu.com/people/gipong", 
        "https://www.zhihu.com/people/chafferer-16-98", 
        "https://www.zhihu.com/people/guangwei-xia", 
        "https://www.zhihu.com/people/mao-jun-qin", 
        "https://www.zhihu.com/people/bankwong-49", 
        "https://www.zhihu.com/people/feng-jie-lin-52", 
        "https://www.zhihu.com/people/ckshang-fei", 
        "https://www.zhihu.com/people/yang-ji-18-21-93", 
        "https://www.zhihu.com/people/xiao-yang-42-92-62", 
        "https://www.zhihu.com/people/qiu-zhi-57-47", 
        "https://www.zhihu.com/people/wan-yu-xuan-48", 
        "https://www.zhihu.com/people/gao-xiao-yan-83", 
        "https://www.zhihu.com/people/peng-jun-wei-46", 
        "https://www.zhihu.com/people/zziahy", 
        "https://www.zhihu.com/people/xiang-cai-fan", 
        "https://www.zhihu.com/people/luo-da-da-li", 
        "https://www.zhihu.com/people/mokiliy", 
        "https://www.zhihu.com/people/margin-53", 
        "https://www.zhihu.com/people/bug8bug", 
        "https://www.zhihu.com/people/li-wen-qi-14-93", 
        "https://www.zhihu.com/people/lu-kai-yu-16", 
        "https://www.zhihu.com/people/shi-yi-72-75-45", 
        "https://www.zhihu.com/people/orange-52-70", 
        "https://www.zhihu.com/people/teng-tt-25", 
        "https://www.zhihu.com/people/zhi-ma-tang-yuan-zhu-bao", 
        "https://www.zhihu.com/people/qiu-cheng-jiu-gou", 
        "https://www.zhihu.com/people/han-xiao-10", 
        "https://www.zhihu.com/people/mei-kong-chi-tian-shi", 
        "https://www.zhihu.com/people/wdf624989197", 
        "https://www.zhihu.com/people/wu-wang-saber-20", 
        "https://www.zhihu.com/people/zhang-jin-hui-25-20", 
        "https://www.zhihu.com/people/deng-gao-wang-yuan-82", 
        "https://www.zhihu.com/people/pang-pang-die-52", 
        "https://www.zhihu.com/people/kk-kk-48-76", 
        "https://www.zhihu.com/people/yoshino-34", 
        "https://www.zhihu.com/people/mzhzack", 
        "https://www.zhihu.com/people/chulainn-1", 
        "https://www.zhihu.com/people/wu-bi-qing-9", 
        "https://www.zhihu.com/people/xu-qiang-29-78", 
        "https://www.zhihu.com/people/a-bu-94-45", 
        "https://www.zhihu.com/people/ren-hao-66-97", 
        "https://www.zhihu.com/people/zhou-wen-bo-65", 
        "https://www.zhihu.com/people/han-zhi-chao-21", 
        "https://www.zhihu.com/people/wei-xiang-88-46", 
        "https://www.zhihu.com/people/mayyougo", 
        "https://www.zhihu.com/people/huang-jie-19-20", 
        "https://www.zhihu.com/people/zhang-yang-52-48", 
        "https://www.zhihu.com/people/shan-you-mu-xi-mu-you-zhi-32-78", 
        "https://www.zhihu.com/people/noah-xu-70", 
        "https://www.zhihu.com/people/qi-xiao-yin-56", 
        "https://www.zhihu.com/people/dongdong12138", 
        "https://www.zhihu.com/people/pengll-62", 
        "https://www.zhihu.com/people/li-fan-yi-g", 
        "https://www.zhihu.com/people/lilin-43-97", 
        "https://www.zhihu.com/people/lucas-85-68", 
        "https://www.zhihu.com/people/chen-kui-zhu-75", 
        "https://www.zhihu.com/people/fen-di-73", 
        "https://www.zhihu.com/people/cao-yao-75-45", 
        "https://www.zhihu.com/people/zhang-zhi-de-ma-91", 
        "https://www.zhihu.com/people/hei-bai-88-77-90", 
        "https://www.zhihu.com/people/liu-yu-34-52-63", 
        "https://www.zhihu.com/people/su-yan-31-73", 
        "https://www.zhihu.com/people/jianglei-41", 
        "https://www.zhihu.com/people/lu-hao-18", 
        "https://www.zhihu.com/people/shi-jian-bu-ding-ji-fen", 
        "https://www.zhihu.com/people/wu-shi-mi-62", 
        "https://www.zhihu.com/people/zhu-lei-8-92", 
        "https://www.zhihu.com/people/he-he-9-74-64", 
        "https://www.zhihu.com/people/lin-yi-49-89-1", 
        "https://www.zhihu.com/people/zhang-hao-ran-74-25-64", 
        "https://www.zhihu.com/people/cyi-shuang-bo-shi", 
        "https://www.zhihu.com/people/chen-lao-lan", 
        "https://www.zhihu.com/people/zhang-zi-cheng-81", 
        "https://www.zhihu.com/people/jia-mao-27", 
        "https://www.zhihu.com/people/zhang-qu-ji", 
        "https://www.zhihu.com/people/chen-hao-liang-2", 
        "https://www.zhihu.com/people/likelxl", 
        "https://www.zhihu.com/people/johnny-63-54", 
        "https://www.zhihu.com/people/li-qing-long-75-10", 
        "https://www.zhihu.com/people/chang-shi-lin-9", 
        "https://www.zhihu.com/people/kong-ming-liu-zhuan-33", 
        "https://www.zhihu.com/people/lp1984", 
        "https://www.zhihu.com/people/leng-luo-60-5", 
        "https://www.zhihu.com/people/shui-ping-zhi-zi", 
        "https://www.zhihu.com/people/li-xiao-long-77-20", 
        "https://www.zhihu.com/people/yun-ju-zhong-ge", 
        "https://www.zhihu.com/people/chen-shi-meng-89", 
        "https://www.zhihu.com/people/meng-shi-1-32", 
        "https://www.zhihu.com/people/xie-qing-tian-79", 
        "https://www.zhihu.com/people/itooka-li-fan"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/79501922", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 1, 
            "title": "前端战五渣学JavaScript——浅谈发布—订阅模式", 
            "content": "<blockquote> 因为这两天想看看怎么自己手写一个<code>promise</code>并实现基本功能，最一开始就看到了<code>then</code>方法需要涉及<b>发布-订阅模式</b>。。。所以有专门看了看到底什么是<b>发布-订阅模式</b><br/> </blockquote><h2>我们是如何绑定点击监听事件的</h2><h3>添加发布-订阅</h3><p>众所周知啊，我们在一个<code>button</code>或者任意一个标签上绑定点击事件的时候，都是先声明了一个方法，然后再我们点击的时候才会真正的去执行我们绑定的这个方法，这就是一个比较典型的运用了发布-订阅模式的例子。</p><p>我们先来看代码吧⬇️</p><p>index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;btn&#34;</span><span class=\"p\">&gt;</span>点我<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span></code></pre></div><p>index.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#btn&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;第一个监听事件&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;第二个监听事件&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"p\">})();</span>\n</code></pre></div><p>我们在一个按钮上绑定了两个点击事件，这两个事件<b>都能接收到按钮被点击的信息</b>，一个输出“第一个监听事件”，一个输出“第二个监听事件”<br/> 在我们绑定事件的时候，我们并<b>不知道这两个事件什么时候会被执行</b>，反正绑上就完事了<br/> 这两个事件并不会冲突，也不会覆盖，而是在我们点击了按钮以后会<b>相继执行</b>。</p><h3>删除订阅</h3><p>我们既然可以添加一个订阅，那我们肯定在需要的时候也得可以能删除订阅，所以原生api也是有这个功能，看代码⬇️</p><p>index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;btn&#34;</span><span class=\"p\">&gt;</span>点我<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;delete&#34;</span><span class=\"p\">&gt;</span>删除第二个订阅事件<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span></code></pre></div><p>index.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#btn&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">deleteBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#delete&#39;</span><span class=\"p\">);</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">firstFn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;第一个监听事件&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">secondFn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;第二个监听事件&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">deleteFirstFn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">secondFn</span><span class=\"p\">);</span> <span class=\"c1\">// 删除btn上面的第二个监听事件\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">firstFn</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">secondFn</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"nx\">deleteBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">deleteFirstFn</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span> <span class=\"c1\">// 点击执行deleteFirstFn方法\n</span><span class=\"c1\"></span><span class=\"p\">})();</span>\n</code></pre></div><p>现在我们页面上是有两个按钮，当我们点击“点我”按钮的时候，控制台会输出“第一个监听事件”“第二个监听事件”<br/> 我们再点击“删除第二个订阅事件”按钮，这个时候我们已经删除了“点我”按钮的第二个监听事件<br/> 当我们再次点击“点我”按钮的时候，发现控制台只会输出“第一个监听事件”了，确定我们已经删除了“点我”按钮的第二个监听事件<br/> <b>因为在移除监听事件的时候，必须要指明需要删除的监听事件，所以我们不能使用匿名函数</b></p><h2>我们来用发布-订阅实现自定义事件吧</h2><p>在使用发布-订阅模式写我们自己的事件之前，我们先来设定一个背景故事</p><h3>简单的发布-订阅</h3><blockquote> 我是来自真新镇的小智，我的目标是成为神奇宝贝大师，我从大木博士的研究所出发，一路收集我喜欢的神奇宝贝，当我捕捉到一个神奇宝贝的时候，我会把这个好消息告诉大木博士和我的妈妈。我出来好几天了，我不想每天都给他们打电话告诉他们我有没有捉到神奇宝贝，我只想在我捕捉到神奇宝贝的时候再通知他们，你能帮助我吗？？（越看越像小学应用题的语气。。。。）<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">littleZhi</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// 声明一个小智\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">familyList</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> <span class=\"c1\">// 来一个缓存队列，存放需要通知的亲戚的回调函数\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">);</span> <span class=\"c1\">// 把需要通知的回调函数放起来\n</span><span class=\"c1\"></span><span class=\"p\">};</span>\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// 通知家人\n</span><span class=\"c1\"></span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 当执行的时候，从familyList遍历，挨个通知一遍\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n    <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 事先定好，如果我抓到了pokemon，我就告诉妈妈\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`妈妈，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 事先定好，如果我抓到了pokemon，我就告诉博士\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`大木博士，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;绿毛虫&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 当抓到绿毛虫的时候，通知妈妈和博士，因为他们两个都跟小智说抓到了要告诉他们\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;比比鸟&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 当抓到比比鸟的时候，通知妈妈和博士，因为他们两个都跟小智说抓到了要告诉他们\n</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2047ae11c4cb1f44801f3f961d56a864_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1690\" data-rawheight=\"726\" class=\"origin_image zh-lightbox-thumb\" width=\"1690\" data-original=\"https://pic1.zhimg.com/v2-2047ae11c4cb1f44801f3f961d56a864_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1690&#39; height=&#39;726&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1690\" data-rawheight=\"726\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1690\" data-original=\"https://pic1.zhimg.com/v2-2047ae11c4cb1f44801f3f961d56a864_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2047ae11c4cb1f44801f3f961d56a864_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这样，我们实现了当小智捉到神奇宝贝的时候，就会通知妈妈和大木博士。之前没抓到的时候就不用通知了，不管在什么时候抓到了，只要执行<code>littleZhi.trigger()</code>这个方法，妈妈和大木博士就可以收到通知了</p><p>但是我们从输出情况也能看出来，当我们抓到不管是绿毛虫还是比比鸟，妈妈和大木博士收到的消息是一样的</p><h3>添加标示，区分妈妈和博士</h3><blockquote> 妈妈毕竟是妈妈，妈妈知道小智抓到了神奇宝贝，但是还想在知道抓到神奇宝贝的同时，还能了解一下小智的近况，所以我们需要把监听事件区分开来，我们继续来帮助他吧~<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">littleZhi</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// 声明一个小智\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">familyList</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> <span class=\"c1\">// 来一个缓存队列，存放需要通知的亲戚的回调函数\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> <span class=\"c1\">// 相同key值的情况下，如果还没有任何订阅，就给该类消息创建一个缓存列表\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">);</span> <span class=\"c1\">// 把需要通知的回调函数放起来\n</span><span class=\"c1\"></span><span class=\"p\">};</span>\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// 通知家人\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span> <span class=\"c1\">// 从传入的参数里面选取第一个，就是我们传入的key值特殊标示\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">fns</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span> <span class=\"c1\">// 取出在familyList中对应key值的事件队列fns，再遍历这个事件队列挨个执行\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">fns</span> <span class=\"o\">||</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果传入的key值没有对应的事件队列，或者有队列，但是队列是空的，就直接返回\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"kc\">false</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 当执行的时候，从familyList遍历，挨个通知一遍\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">fns</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n    <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;mama&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">,</span> <span class=\"nx\">story</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 事先定好，如果我抓到了pokemon，我就告诉妈妈，然后告诉她我的近况\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`妈妈，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">story</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;doctor&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 事先定好，如果我抓到了pokemon，我只告诉博士我抓到了什么\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`大木博士，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;mama&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;绿毛虫&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;我还被皮卡丘电了&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 通知妈妈我抓到绿毛虫了，但是我被皮卡丘电了\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;doctor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;比比鸟&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 通知博士我抓到了比比鸟\n</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9d44570d7167b72c35ae7f1995e0d55c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-9d44570d7167b72c35ae7f1995e0d55c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-9d44570d7167b72c35ae7f1995e0d55c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9d44570d7167b72c35ae7f1995e0d55c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这样我们就区分开了给妈妈和博士不同的消息，我们给妈妈消息的时候，这条消息就不会传到大木博士那里</p><p>诶？？但是我们（我们的问题就是这么多）如果出发的不只是小智一个人，还有小茂呢？？那小茂是不是也得重新写一遍这些方法和队列呢？</p><h3>可根据不同人安装事件</h3><blockquote> 我们都知道，跟小智一起从真新镇出发的还有小茂，那小茂出门在外当然也希望能往家里传递他旅行的好消息，但是现在只有小智可以通知家里，所以我们有什么好办法帮助小茂吗？？<br/> </blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"c1\">// 我们把需要的功能都单独列出来，发布，订阅，队列，以便后面需要的时候赋给需要的人\n</span><span class=\"c1\"></span>  <span class=\"nx\">familyList</span><span class=\"o\">:</span> <span class=\"p\">[],</span> <span class=\"c1\">// 来一个缓存队列，存放需要通知的亲戚的回调函数\n</span><span class=\"c1\"></span>  <span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> <span class=\"c1\">// 相同key值的情况下，如果还没有任何订阅，就给该类消息创建一个缓存列表\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">);</span> <span class=\"c1\">// 把需要通知的回调函数放起来\n</span><span class=\"c1\"></span>  <span class=\"p\">},</span>\n  <span class=\"nx\">trigger</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// 通知家人\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span> <span class=\"c1\">// 从传入的参数里面选取第一个，就是我们传入的key值特殊标示\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">fns</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span> <span class=\"c1\">// 取出在familyList中对应key值的事件队列fns，再遍历这个事件队列挨个执行\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">fns</span> <span class=\"o\">||</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果传入的key值没有对应的事件队列，或者有队列，但是队列是空的，就直接返回\n</span><span class=\"c1\"></span>      <span class=\"k\">return</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 当执行的时候，从familyList遍历，挨个通知一遍\n</span><span class=\"c1\"></span>      <span class=\"kd\">let</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">fns</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n      <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">installEvent</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemonMaster</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 在出发的神奇宝贝大师身上安装发布订阅的功能\n</span><span class=\"c1\"></span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">pokemonMaster</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">littleZhi</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// 声明小智\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">littleMao</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// 声明小茂\n</span><span class=\"c1\"></span>\n<span class=\"nx\">installEvent</span><span class=\"p\">(</span><span class=\"nx\">littleZhi</span><span class=\"p\">);</span> <span class=\"c1\">// 给小智安装可以给家里通知的技能\n</span><span class=\"c1\"></span><span class=\"nx\">installEvent</span><span class=\"p\">(</span><span class=\"nx\">littleMao</span><span class=\"p\">);</span> <span class=\"c1\">// 给小茂安装可以给家里通知的技能\n</span><span class=\"c1\"></span>\n<span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleZhiToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 事先定好，如果小智抓到了pokemon，我只告诉博士我抓到了什么\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`大木博士，我是小智，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">littleMao</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleMaoToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 事先定好，如果小茂抓到了pokemon，我只告诉博士我抓到了什么\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`大木博士，我是小茂，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"c1\">// 小智的triger通知博士\n</span><span class=\"c1\"></span><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleZhiToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;比比鸟&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 小智通知博士抓到了比比鸟 \n</span><span class=\"c1\">// 小茂的triger通知博士\n</span><span class=\"c1\"></span><span class=\"nx\">littleMao</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleMaoToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;小火龙&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 小智通知博士抓到了小火龙\n</span><span class=\"c1\"></span>\n\n<span class=\"c1\">// 输出：大木博士，我是小智，我抓到比比鸟了！！！\n</span><span class=\"c1\">// 输出：大木博士，我是小茂，我抓到小火龙了！！！\n</span></code></pre></div><p>通过上面的改造，我们就分别给小智<code>littleZhi</code>和小茂<code>littleMao</code>多赋予了发生事情可以通知家里的技能，所以不单单只有小智可以了哦。</p><p>细心的小朋友可能会发现，其实不管是<code>littleZhi</code>还是<code>littleMao</code>添加的<code>listen</code>，都存放在同一个<code>familyList</code>里面，所以导致如果我们在<code>littleZhi.listen(key, fn)</code>和<code>littleMao.listen(key, fn)</code>传如果相同的key，例如</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleZhiToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// key为littleZhiToDoctor\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`大木博士，我是小智，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">littleMao</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleZhiToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pokemon</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// key也为littleZhiToDoctor\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`大木博士，我是小茂，我抓到</span><span class=\"si\">${</span><span class=\"nx\">pokemon</span><span class=\"si\">}</span><span class=\"sb\">了！！！`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>当我们发布消息的时候</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">littleZhi</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleZhiToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;比比鸟&#39;</span><span class=\"p\">);</span>\n<span class=\"c1\">// 或者\n</span><span class=\"c1\"></span><span class=\"nx\">littleMao</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;littleZhiToDoctor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;比比鸟&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>不管是上面代码执行哪一行，都会同时输出“大木博士，我是小智，我抓到比比鸟了！！！”和“大木博士，我是小茂，我抓到比比鸟了！！！”和两句话。。。。我们可以理解为——电话串线了。。。。</p><p><b>因为我们在<code>installEvent()</code>的时候，消息队列是浅克隆（不懂深浅克隆的，可以看我的另一篇文章<a href=\"https://zhuanlan.zhihu.com/p/61340256\" class=\"internal\">《前端战五渣学JavaScript——深克隆（深拷贝）》</a>），所以两个被安装了方法的对象中<code>famalyList</code>引用的是同一个数组，所以在收到发布消息的时候会都执行。。。所以我们在给对象赋予<code>event</code>对象的时候，需要判断如果是<code>familyList</code>，需要采用深克隆的办法。。。</b></p><p>所以我们需要引入lodash的，用它里面的深克隆方法。。。毕竟自己去实现深克隆很麻烦</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;lodash&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"p\">{...};</span>\n<span class=\"k\">const</span> <span class=\"nx\">installEvent</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// 在出发的神奇宝贝大师身上安装发布订阅的功能\n</span><span class=\"c1\"></span>  <span class=\"k\">return</span> <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">cloneDeep</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">let</span> <span class=\"nx\">littleZhi</span> <span class=\"o\">=</span> <span class=\"nx\">installEvent</span><span class=\"p\">();</span> <span class=\"c1\">// 声明小智\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">littleMao</span> <span class=\"o\">=</span> <span class=\"nx\">installEvent</span><span class=\"p\">();</span> <span class=\"c1\">// 声明小茂\n</span><span class=\"c1\"></span><span class=\"p\">...</span>\n</code></pre></div><p>这样我们即使在有相同key的<code>listen</code>的时候，各自的<code>familyList</code>里面对应的key队列也只有自己的函数。不会说小智trigger了一个key，小茂有，小茂也会执行的尴尬窘迫事情。</p><h3>跟家里闹别扭，不想通知了，删除</h3><p>删除的功能一般用的很少吧。。。那我们就来简单的写一下吧。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">fns</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">familyList</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span> <span class=\"c1\">// 从事件队列中拿到key值对应的事件数组\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">fns</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果key值没有对应的数组，就直接返回\n</span><span class=\"c1\"></span>      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果没有传入fn，直接发key值对应的数组置空\n</span><span class=\"c1\"></span>      <span class=\"nx\">fns</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"c1\">// 反向遍历事件数组，如果有跟传入的函数是同一个的，就删除掉\n</span><span class=\"c1\"></span>      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">_fn</span> <span class=\"o\">=</span> <span class=\"nx\">fns</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_fn</span> <span class=\"o\">===</span> <span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这样我们就完成了发布订阅模式的删除功能。</p><h2>Tips</h2><p>这篇博客感觉长度差不多了，但是还有几点想说的，以后可能会单独开博客讲讲吧</p><p>一个上面的发布订阅模式是简陋的，只能完成特定事情的一个模型，但是基本的功能是可以实现了的。再大型项目开发过程中，我们是可以统一封装一个<code>Event</code>对象来实现我们上述的功能，以及定制化的功能。</p><p>还有一个是众所周知，react项目中我们可以依赖redux来进行数据的统一管理，那这个redux其实也是运用到了发布订阅的模式，来实现不同模块间的数据通信。</p><p>最后其实还有类似发布订阅的最佳实践还没有说到，比如一个组件中的事件执行之后，可能波及到好几个组件进行各种处理，那我们其他的组件怎么知道我这个组件发生了变化呢，那就是运用了发布订阅模式。以后单独开一篇博客来讲讲吧</p><h2>总结</h2><p>其实我们不是所用情况都需要用到发布订阅模式的，发布订阅虽好，可不要贪杯哦~</p><p>但是这种模式有一些比较明显的有点，就是时间上的解耦，我们在定义好事件以后，我们可以在需要执行的时候去执行。</p><p>此篇博客本来不在计划之中的，是想了解一下手写promise的实现，涉及到了这一块的知识，所以就找来看了看，觉得还挺有意思，还可以这么写，所以就单独写篇博客记录一下。</p><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "设计模式", 
                    "tagLink": "https://api.zhihu.com/topics/19599592"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79158225", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 1, 
            "title": "前端战五渣学JavaScript——函数柯里化", 
            "content": "<p><b>阅读本篇博客之前需要对JavaScript的闭包有一个很好的了解，可以看一下我之前写的</b></p><a href=\"https://zhuanlan.zhihu.com/p/59746642\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">戈德斯文：前端战五渣学JavaScript——闭包</a><p>我自认为大家是在了解闭包的情况下阅读这篇博客的。</p><blockquote> 最近对什么都提不起兴趣，什么都不想干，什么都不想学，游戏也不想打。。。哎。。但是最近看了一部国产动画电影《哪吒之魔童降世》，感觉现在国产动画的水平真是越来越高了，很不错，值得一看哦<br/> </blockquote><h2>什么是函数柯里化</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b8928a7f0cfd4c3ac3f6c3e466736fe6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb\" width=\"682\" data-original=\"https://pic3.zhimg.com/v2-b8928a7f0cfd4c3ac3f6c3e466736fe6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;682&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"258\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"682\" data-original=\"https://pic3.zhimg.com/v2-b8928a7f0cfd4c3ac3f6c3e466736fe6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b8928a7f0cfd4c3ac3f6c3e466736fe6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>函数柯里化</b>(function currying)，把函数做成咖喱味的？？其实我初次听说这个词的时候，感觉好高大上啊，音译，深奥，等我翻看了相关书籍（《JavaScript高级程序设计》）以及一些前辈写的博客以后，发现原来函数柯里化就是<b>使用闭包返回一个函数</b></p><p>柯里化的函数可以延迟接收参数，就是比如我一个函数需要接收的参数是两个，我执行的时候必须接收两个参数，否则我没法执行啊，是不是，就容易出问题。但是柯里化后的函数，可以先接收一个函数，然后再接收一个函数，这么说太生硬了，那我们就来看一个简单的例子(也是全网最普遍的例子)⬇️</p><p>这是普通的函数</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 正常我们声明函数的时候是这样的\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">求两数之和</span><span class=\"p\">(</span><span class=\"nx\">第一个数</span><span class=\"p\">,</span> <span class=\"nx\">第二个数</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">第一个数</span> <span class=\"o\">+</span> <span class=\"nx\">第二个数</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">和</span> <span class=\"o\">=</span> <span class=\"nx\">求两数之和</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`两数之和为 </span><span class=\"si\">${</span><span class=\"nx\">和</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span> <span class=\"c1\">// 3\n</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6995a3bf89a289b007a8f04d56db36ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1472\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1472\" data-original=\"https://pic2.zhimg.com/v2-6995a3bf89a289b007a8f04d56db36ad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1472&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1472\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1472\" data-original=\"https://pic2.zhimg.com/v2-6995a3bf89a289b007a8f04d56db36ad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6995a3bf89a289b007a8f04d56db36ad_b.jpg\"/></figure><p> 那我们按照柯里化写出来的函数是什么样的呢</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 理解柯里化的思想\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">求两数之和</span><span class=\"p\">(</span><span class=\"nx\">第一个数</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">第二个数</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">第一个数</span> <span class=\"o\">+</span> <span class=\"nx\">第二个数</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 第一种方法\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">和</span> <span class=\"o\">=</span> <span class=\"nx\">求两数之和</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`第一种方法的两个数之和为 </span><span class=\"si\">${</span><span class=\"nx\">和</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n<span class=\"c1\">// 第二种方法\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">已接收第一个数的求和函数</span> <span class=\"o\">=</span> <span class=\"nx\">求两数之和</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">两个数都已接收的和</span> <span class=\"o\">=</span> <span class=\"nx\">已接收第一个数的求和函数</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`第二种方法的两个数之和为 </span><span class=\"si\">${</span><span class=\"nx\">两个数都已接收的和</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-82d4d3f648f228833305618346fd9ba9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"1242\" class=\"origin_image zh-lightbox-thumb\" width=\"1488\" data-original=\"https://pic2.zhimg.com/v2-82d4d3f648f228833305618346fd9ba9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1488&#39; height=&#39;1242&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"1242\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1488\" data-original=\"https://pic2.zhimg.com/v2-82d4d3f648f228833305618346fd9ba9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-82d4d3f648f228833305618346fd9ba9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>从上面的函数对比我们就可以发现，柯里化的函数可以先接收一个函数，然后在我们需要的传入第二个参数的时候，我们再传入，并执行最终的结果。</p><p><b>所以我们可以动态生成比如第一个参数相同，第二个参数不同，或者第二个参数相同，第一个参数不同的函数</b></p><h2>把函数柯里化的函数</h2><p>在我们熟知的《JavaScript高级程序设计》中给出了一个方法，这个方法，可以让我们把一个本来不支持柯里化的函数，转化成支持柯里化思想的函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">把函数柯里化</span><span class=\"p\">(</span><span class=\"nx\">需要柯里化的函数</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">调用柯里化时除了函数以外的参数</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">后接受的参数</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">arguments</span><span class=\"p\">];</span>\n    <span class=\"k\">const</span> <span class=\"nx\">最终的参数</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">调用柯里化时除了函数以外的参数</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">后接受的参数</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"nx\">需要柯里化的函数</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">最终的参数</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">求两数之和</span><span class=\"p\">(</span><span class=\"nx\">第一个数</span><span class=\"p\">,</span> <span class=\"nx\">第二个数</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">第一个数</span> <span class=\"o\">+</span> <span class=\"nx\">第二个数</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">柯里化的求两数之和</span> <span class=\"o\">=</span> <span class=\"nx\">把函数柯里化</span><span class=\"p\">(</span><span class=\"nx\">求两数之和</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span>\n  <span class=\"sb\">`被柯里化后的函数求的两数之和为 </span><span class=\"si\">${</span>\n    <span class=\"nx\">柯里化的求两数之和</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"si\">}</span><span class=\"sb\">`</span>\n<span class=\"p\">);</span> <span class=\"c1\">// 被柯里化后的函数求的两数之和为 3\n</span></code></pre></div><p>我们发现，我们可以单独写一个函数，然后把一个普通函数转化成支持柯里化的函数，但是高级程序设计上提供的这个方法，只能提供两次调用，什么意思？我们来看看<code>lodash</code>中<code>curry</code>方法是如何实现的</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;lodash&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">求三个数之和</span><span class=\"p\">(</span><span class=\"nx\">第一个数</span><span class=\"p\">,</span> <span class=\"nx\">第二个数</span><span class=\"p\">,</span> <span class=\"nx\">第三个数</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">第一个数</span> <span class=\"o\">+</span> <span class=\"nx\">第二个数</span> <span class=\"o\">+</span> <span class=\"nx\">第三个数</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">柯里化后的求三个数之和</span> <span class=\"o\">=</span> <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">curry</span><span class=\"p\">(</span><span class=\"nx\">求三个数之和</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">柯里化后的求三个数之和</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"p\">)(</span><span class=\"mi\">3</span><span class=\"p\">));</span> <span class=\"c1\">// 6\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">柯里化后的求三个数之和</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">));</span> <span class=\"c1\">// 6\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">柯里化后的求三个数之和</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">));</span> <span class=\"c1\">// 6\n</span></code></pre></div><p>这下我们看到，<code>lodash</code>中对转化柯里化的处理，我们可以任意调用被柯里化的函数，不管参数怎么传，只要传够三个就行，也不管是分几次传。</p><h2>我们自己来一个柯里化函数吧</h2><p>我们的需求是什么？</p><p><b>feature</b></p><ol><li>需要把普通函数转化成柯里函数</li><li>只要参数没达到被转换函数的数量，就返回函数，保存已传参数</li><li>支持参数没达到被转换函数的数量时，无限调用</li></ol><p>那我们先来看看我们需要转换的函数⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">封神榜</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">名字</span><span class=\"p\">,</span> <span class=\"nx\">宝物</span><span class=\"p\">,</span> <span class=\"nx\">出生地</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`我是</span><span class=\"si\">${</span><span class=\"nx\">出生地</span><span class=\"si\">}</span><span class=\"sb\">的</span><span class=\"si\">${</span><span class=\"nx\">名字</span><span class=\"si\">}</span><span class=\"sb\">，我有</span><span class=\"si\">${</span><span class=\"nx\">宝物</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n\n<span class=\"nx\">封神榜</span><span class=\"p\">(</span><span class=\"s1\">&#39;哪吒&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;乾坤圈&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;陈塘关&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 我是陈塘关的哪吒，我有乾坤圈\n</span></code></pre></div><p>看看我们普通转化的结果是什么样的⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">封神榜</span> <span class=\"o\">=</span> <span class=\"nx\">名字</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">宝物</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">出生地</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`我是</span><span class=\"si\">${</span><span class=\"nx\">出生地</span><span class=\"si\">}</span><span class=\"sb\">的</span><span class=\"si\">${</span><span class=\"nx\">名字</span><span class=\"si\">}</span><span class=\"sb\">，我有</span><span class=\"si\">${</span><span class=\"nx\">宝物</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n\n<span class=\"nx\">封神榜</span><span class=\"p\">(</span><span class=\"s1\">&#39;哪吒&#39;</span><span class=\"p\">)(</span><span class=\"s1\">&#39;乾坤圈&#39;</span><span class=\"p\">)(</span><span class=\"s1\">&#39;陈塘关&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>普通转化的函数，我们传参不是很自由，必须穿三次，每次传一个，那我们来个牛逼的⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">封神榜</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">名字</span><span class=\"p\">,</span> <span class=\"nx\">宝物</span><span class=\"p\">,</span> <span class=\"nx\">出生地</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`我是</span><span class=\"si\">${</span><span class=\"nx\">出生地</span><span class=\"si\">}</span><span class=\"sb\">的</span><span class=\"si\">${</span><span class=\"nx\">名字</span><span class=\"si\">}</span><span class=\"sb\">，我有</span><span class=\"si\">${</span><span class=\"nx\">宝物</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">柯里化</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">需要柯里化的函数</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">参数</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">需要柯里化的函数</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">参数</span><span class=\"p\">.</span><span class=\"nx\">length</span>\n  <span class=\"o\">?</span> <span class=\"nx\">需要柯里化的函数</span><span class=\"p\">(...</span><span class=\"nx\">参数</span><span class=\"p\">)</span>\n  <span class=\"o\">:</span> <span class=\"p\">(...</span><span class=\"nx\">更多参数</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">柯里化</span><span class=\"p\">(</span><span class=\"nx\">需要柯里化的函数</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">参数</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">更多参数</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">柯里化后的封神榜</span> <span class=\"o\">=</span> <span class=\"nx\">柯里化</span><span class=\"p\">(</span><span class=\"nx\">封神榜</span><span class=\"p\">);</span>\n\n<span class=\"nx\">柯里化后的封神榜</span><span class=\"p\">(</span><span class=\"s1\">&#39;哪吒&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;乾坤圈&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;陈塘关&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 我是陈塘关的哪吒，我有乾坤圈\n</span><span class=\"c1\"></span><span class=\"nx\">柯里化后的封神榜</span><span class=\"p\">(</span><span class=\"s1\">&#39;孙悟空&#39;</span><span class=\"p\">)(</span><span class=\"s1\">&#39;金箍鲁棒&#39;</span><span class=\"p\">)(</span><span class=\"s1\">&#39;花果山&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 我是花果山的孙悟空，我有金箍鲁棒\n</span><span class=\"c1\"></span><span class=\"nx\">柯里化后的封神榜</span><span class=\"p\">(</span><span class=\"s1\">&#39;雷震子&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;黄金棍&#39;</span><span class=\"p\">)(</span><span class=\"s1\">&#39;终南山玉柱洞&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 我是终南山玉柱洞的雷震子，我有黄金棍\n</span><span class=\"c1\"></span><span class=\"nx\">柯里化后的封神榜</span><span class=\"p\">()()()()()()()()(</span><span class=\"s1\">&#39;姜子牙&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;打神鞭&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;昆仑山&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 我是昆仑山的姜子牙，我有打神鞭\n</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2c934d720f62ce751b50ca414fbd62bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"599\" class=\"origin_image zh-lightbox-thumb\" width=\"935\" data-original=\"https://pic4.zhimg.com/v2-2c934d720f62ce751b50ca414fbd62bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;935&#39; height=&#39;599&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"599\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"935\" data-original=\"https://pic4.zhimg.com/v2-2c934d720f62ce751b50ca414fbd62bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2c934d720f62ce751b50ca414fbd62bf_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>看，现在我们实现的柯里化函数已经基本满足我们刚才提的需求了</p><p><b>当然，有柯里化就有反柯里化，但是我觉得没什么必要，我既然都已经柯里化了，柯里化后的函数当然支持非柯里化函数的传参方式，但是有兴趣的小伙伴还是可以了解一下的</b></p><h2>总结</h2><p>其实函数柯里化这个概念，可能我们之前没有听说过，但是工作或者学习中我们可能或多或少接触过这种方式，只是不知道这么写就是柯里化，这个函数就是柯里化函数。</p><p>柯里化函数这种方式方法还是很实用的，在日常开发过程中还是会遇到需要这种需求的地方。</p><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "柯里化", 
                    "tagLink": "https://api.zhihu.com/topics/20755679"
                }
            ], 
            "comments": [
                {
                    "userName": "框框", 
                    "userLink": "https://www.zhihu.com/people/19a895897d6bd3c5c76a3bca68eece4e", 
                    "content": "其实柯里化导致丢失了本来很清晰的调用栈，加法那个例子很多情况下不知道第一个数从哪里传进来的。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "戈德斯文", 
                    "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
                    "content": "<p>嗯嗯，是有这个问题。。还是看需求吧，不滥用就行了</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75994520", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 10, 
            "title": "前端战五渣学前端——FileReader预览本地文件", 
            "content": "<blockquote> 距离上一篇博客将近一个半月了，这一个多月有点烦躁，静不下心来学习，也不知道为什么，玩的也不算太好，还感冒。可能是天气热了吧，有点点躁动。上周看了《哪吒——魔童降世》还不错，还看了新出的《蜘蛛侠：英雄远征》，从彼得帕克身上看到了钢铁侠的影子，很是激动哦！<br/> </blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c9fec7e4944ae866d62e92f32fb37e0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"569\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-c9fec7e4944ae866d62e92f32fb37e0c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;569&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"569\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-c9fec7e4944ae866d62e92f32fb37e0c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c9fec7e4944ae866d62e92f32fb37e0c_b.jpg\"/></figure><p>需求</p><p>为什么今天会想到写这个预览本地文件的博客呢，因为在工作中遇到了问题😅😅😅</p><ol><li>需要上传图片</li><li>在图片上传之前，需要展示出来图片</li><li>之前的上传图片实现是图片上传成功以后返回url，然后根据url再展示图片</li></ol><p>这就是目前需要实现的功能。要实现这个功能，我目前感觉必须要实现网页可以预览本地图片，因为图片在展示的时候根本还没有上传，并没有图片地址这一说</p><p>网上一搜，果然html5的强大体现出来的，有原生API就可以实现————FileReader。</p><h2>FileReader方法</h2><p>FileReader的实例拥有4个方法，其中3个是用来读取文件，另一个是用来中断读取（目前我没有用过这个方法😃没有需求~）。我们需要注意的是不管读取成功或者失败，这几个方法都不会直接返回读取结果，而是在<code>result</code>属性中（后面会提到）</p><ol><li><code>abort</code>方法，参数<code>none</code>，终端读取</li><li><code>readAsBinaryString</code>方法，参数<code>file</code>，将文件读取为二进制码</li><li><code>readAsDataURL</code>方法，参数<code>file</code>，将文件读取为DataURL</li><li><code>readAsText</code>方法，参数<code>file, [encoding]</code>，将文件读取为文本</li></ol><p><b>readAsText：</b> 该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。</p><p><b>readAsBinaryString：</b> 该方法将文件读取为二进制字符串，通常我们将它传送到后端，后端可以通过这段字符串存储文件。（下面没用到。。。尴尬。。）</p><p><b>readAsDataURL：</b> 该方法将文件读取为一段以 data: 开头的字符串，这段字符串的实质就是 Data URL，Data URL是一种将小文件直接嵌入文档的方案。这里的小文件通常是指图像与 html 等格式的文件。（其实图片的话就是转成base64的格式）</p><h2>FileReader事件</h2><p>FileReader拥有提供了整个流程的事件模型，方便我们在读取文件的各个阶段来进行自己想执行的方法</p><ol><li><code>onabort</code>，中断时触发</li><li><code>onerror</code>，出错时触发</li><li><code>onload</code>，文件读取成功完成时触发</li><li><code>onloadend</code>，读取完成触发，无论成功或失败</li><li><code>onloadstart</code>，读取开始时触发</li><li><code>onprogress</code>，读取中</li></ol><p>基本的流程就是呢~   <code>onloadstart</code>&gt;<code>onprogress</code>&gt;<code>onload</code>&gt;<code>onloadend</code></p><h2>我们来使用</h2><h3>readAsDataURL</h3><p>那我们就直接来上代码吧⬇️</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;img&#34;</span><span class=\"p\">&gt;</span></code></pre></div><p>我们现在需要的就是我们从<code>&lt;input type=&#34;file&#34; id=&#34;file&#34;&gt;</code>这个标签选择的图片在不经过请求上传就可以在下面的<code>&lt;img src=&#34;&#34; alt=&#34;&#34; id=&#34;img&#34;&gt;</code>标签中展示出来</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 声明reader变量方便后面使用\n</span><span class=\"c1\"></span>\n<span class=\"k\">const</span> <span class=\"nx\">fileNode</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#file&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取input标签\n</span><span class=\"c1\"></span>\n<span class=\"nx\">fileNode</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;change&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span> <span class=\"c1\">// 为获取的input标签添加事件监听，当选择文件以后触发\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">FileReader</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 判断浏览器中有没有FileReader，毕竟现在不是所有浏览器都有FileReader\n</span><span class=\"c1\"></span>    <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span> <span class=\"c1\">// 实例化FileReader\n</span><span class=\"c1\"></span>    <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span> <span class=\"c1\">// 设置读取成功以后执行的方法\n</span><span class=\"c1\"></span>      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#img&#39;</span><span class=\"p\">).</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span> <span class=\"c1\">// 前面说过，成功返回的数据再result属性中，然后将这个设置成img标签的src地址\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"c1\">// 没有FileReader的弹出警告然后返回\n</span><span class=\"c1\"></span>    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">&#39;你的先浏览器没有FileReader，不能这么干！&#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">const</span> <span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span> <span class=\"c1\">// 拿到选择的文件信息\n</span><span class=\"c1\"></span>  <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsDataURL</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">);</span> <span class=\"c1\">// 将文件信息转成DataUrl，这个就是转成功后执行 reader.onload 方法\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n</code></pre></div><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1139918571667898368\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"本地图片预览\" data-poster=\"https://pic1.zhimg.com/v2-cad7e33be81c3a4748afc2eab566e53c.jpg\" data-lens-id=\"1139918571667898368\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-cad7e33be81c3a4748afc2eab566e53c.jpg\"/><span class=\"content\"><span class=\"title\">本地图片预览<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1139918571667898368</span></span></a><p>这样我们就实现了不通过上传图片就可以在本地浏览图片了！</p><p>至此，我们用到了<code>readAsDataURL</code>方法和<code>onload</code>事件，下面我们再来看一下<code>readAsText</code>，也就是读取文本。</p><h3>readAsText</h3><p>还是，我们先更改html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\nlet reader = null; // 声明reader变量方便后面使用\n\nconst fileNode = document.querySelector(&#39;#file&#39;); // 获取input标签\n\nfileNode.addEventListener(&#39;change&#39;, (e) =&gt; { // 为获取的input标签添加事件监听，当选择文件以后触发\n  if (window.FileReader) { // 判断浏览器中有没有FileReader，毕竟现在不是所有浏览器都有FileReader\n    reader = new FileReader(); // 实例化FileReader\n    reader.onload = (event) =&gt; { // 设置读取成功以后执行的方法\n      document.querySelector(&#39;#text&#39;).innerHTML = event.target.result; // 前面说过，成功返回的数据再result属性中，然后将拿回来的文本添加到指定标签中\n    }\n  } else { // 没有FileReader的弹出警告然后返回\n    alert(&#39;你的先浏览器没有FileReader，不能这么干！&#39;);\n    return;\n  }\n  const file = e.target.files[0]; // 拿到选择的文件信息\n  reader.readAsText(file); // 将文件信息转成文本，默认是UTF-8格式，这个就是转成功后执行 reader.onload 方法\n})</code></pre></div><p>新建一个txt的文件，别的文本文件应该也好使</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1139918696410636288\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"预览本地文本\" data-poster=\"https://pic4.zhimg.com/v2-92d9b0876758d58c99c64f3edce8fbef.jpg\" data-lens-id=\"1139918696410636288\"><img class=\"thumbnail\" src=\"https://pic4.zhimg.com/v2-92d9b0876758d58c99c64f3edce8fbef.jpg\"/><span class=\"content\"><span class=\"title\">预览本地文本<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1139918696410636288</span></span></a><p>这样我们就实现了本地预览图片和文本的需求啦~</p><h3>轻松一下</h3><p>我们来课堂延伸一下，就是我们在获取图片的时候，其实是转成base64的格式，然后呈现在页面中的，那我们现在还有一个API可以让图片生成一个本地的地址，然后展现出来，那就是——<b>URL.createObjectURL()</b></p><p>怎么用呢？？？让我们来看一下代码</p><p>这回我们的html有两个img标签，方便我们来对比</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;file&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;img&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;img2&#34;</span><span class=\"p\">&gt;</span>\nlet reader = null; // 声明reader变量方便后面使用\n\nconst fileNode = document.querySelector(&#39;#file&#39;); // 获取input标签\n\nfileNode.addEventListener(&#39;change&#39;, (e) =&gt; { // 为获取的input标签添加事件监听，当选择文件以后触发\n  if (window.FileReader) { // 判断浏览器中有没有FileReader，毕竟现在不是所有浏览器都有FileReader\n    reader = new FileReader(); // 实例化FileReader\n    reader.onload = (event) =&gt; { // 设置读取成功以后执行的方法\n      document.querySelector(&#39;#img&#39;).src = event.target.result; // 前面说过，成功返回的数据再result属性中，然后将这个设置成img标签的src地址\n    }\n  } else { // 没有FileReader的弹出警告然后返回\n    alert(&#39;你的先浏览器没有FileReader，不能这么干！&#39;);\n    return;\n  }\n  const file = e.target.files[0]; // 拿到选择的文件信息\n\n  /* 这里是我们用的URL.createObjectURL() */\n\n  document.querySelector(&#39;#img2&#39;).src = URL.createObjectURL(file) // 我们直接通过URL.createObjectURL()这个方法来把文件信息转成一个url地址\n\n  /* end */\n  reader.readAsDataURL(file); // 将文件信息转成DataUrl，这个就是转成功后执行\n})</code></pre></div><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1139918810411933696\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"预览本地图片url\" data-poster=\"https://pic2.zhimg.com/v2-c9e65a6e0c78d23fd2f4f8daeee3f741.jpg\" data-lens-id=\"1139918810411933696\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/v2-c9e65a6e0c78d23fd2f4f8daeee3f741.jpg\"/><span class=\"content\"><span class=\"title\">预览本地图片url<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1139918810411933696</span></span></a><h2>结语</h2><p>现在我们可以实现本地预览图片、文本，以及可以生成url来预览的需求了。</p><p>往后我还会继续更新博客，记录自己在学习过成功遇到的小问题，或者学习到的新技能</p><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "HTML", 
                    "tagLink": "https://api.zhihu.com/topics/19551323"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68695640", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 2, 
            "title": "做人要善良，做技术要谦虚（非技术文章）", 
            "content": "<blockquote>这只是一篇类似日记的文章，大家大可不必上纲上线，求同存异吧</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><blockquote>写完发现，罗里吧嗦这么多。。。只是我自己的想法而已，勿喷</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>我干前端也有段时间了，自认为算是做技术的人吧（😜），接触过很多技术牛逼的人，也接触过技术一般的小白，我自己也只算是菜鸡。在一些技术问题，或者在聊天中，让我不由得产生一种想法————做人要善良，做技术要谦虚。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>面试</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>既然是做技术，找工作肯定会有面试，我自己也经历过不少次面试，身边的小伙伴更是几乎天天都有面试的，但是在面试中遇到的面试官太不一样了。实在接受不了的一种现象就是——面试官装逼（也许用词有点过，但是就是这么个意思）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>面试当然是求职者和招聘方的交流，技术面试你从询问的问题中，来考察求职者是否可以胜任公司空缺岗位的工作。招来的是为招聘方干活，而招聘方赋予一定的薪酬，我个人觉得双方是平等的，面试过程应该是一个相对公平，和谐的场景。但是有个别面试官在面试过程中单方面打压求职者。这里我不是说会问一些刁钻，深奥的问题，这个可以看做是工作中可能需要，而是会在问你问题之后，如果答的不好，或者不了解的情况下讽刺你，我个人就遇到过说“我觉得你还没有我干三个月的室友技术好”等类似的话，小伙伴们面试的时候可能会遇到更过分的言语，我只是举个例子。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于面试官，也许来面试的求职者可能技术很好，只是不擅长面试官擅长的方向，也许技术栈不同，或者兴趣爱好不同，但我认为面试官不应该随意去评价这个人的为人，批评他不上进，或者懒惰。也许求职者真是个大牛，只是在面试官的问题中体现不出来他真正的水平。面试官觉得求职者技术ok，可以直接向上级申请，如果技术不ok，大可以说觉得跟公司要求不匹配，送走面试者，没必要去挖苦、讽刺，不应该因为自己多干两年，技术比别人好，就可以肆意批评别人。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我也遇到过很好的面试官，他们在面试过程中很和蔼，氛围很好，聊天的感觉，一起讨论技术，如果一个面试题，如果我提出的答案跟他不一样，会很虚心的跟你讨论，好不是说单方面就认为自己的答案是正确的。并且遇到不会的问题，面试官还会耐心的给你讲解，这才是应该有的过程，这样才能找到技术好，并且心仪的人才。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>交流</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>还有一种现象就是，在技术博客的评论中，或者交流群中，会有几个觉得自己技术很棒，所有人的意见想法都要怼的人。他们认为自己的技术无懈可击，凌驾所有人之上，自己说的就是对的，别人的都不对。你不认可他们的他们，很大概率他们还会说你无知。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我想说，既然是技术交流，既然是技术，你就能确保你的答案就是完全正确的吗？也许分析的角度不一样，得出来的结论可能就不一样。承认别人的优点、技术，就这么难吗？非要在讨论中占据主动？如果一直这样交流，不能听取别人的想法，自己提高也很难吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>更可笑的还有，在一些评论以及讨论中，会出现“不对，不是这样的”然后balabala说出自己的想法，结果在外人看来他俩说的完全就是一回事，只是换了一种说法来解释这个东西。。非要这样刷存在感吗？别人写了个啥，你可以发表自己的意见，说出自己的想法，但是这样轻易的否定别人，是可以给自己带来快感吗？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>有些博客的下面还会出现“你这个别人写过”、“你这个哪里哪里有文档”，这说的是废话吗？写的是技术博客，又不是论文，还要查重，别人写过的我为什么不能写？作者写出来，可能是为了总结，为了自己更好的理解，这种无端去否定别人太高自己知识广度的人大有人在。你自己写不出来，也不能这样酸吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>既然是交流，各自说出自己的想法，有分歧是正常的，你说出你的观点，我说出我的观点，摆事实，讲道理，以理服人，不是你生气了，你嗓门大，就是你的观点正确。不是你的眼界狭隘，就可以否认别人“相对论”是的眼界所能看到的问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>想法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>我个人的一些想法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>不要故步自封，外面的世界很大，牛逼的人很多。我们自己很渺小，也许你觉得在你生活的圈子，工作的圈子中算是优秀的了，但是你怎么确定换个圈子你依然优秀呢？如果你真认为你很优秀，可能就是网上说的——“舒适圈”，你可以跳出自己的舒适圈看看外面。也许你就会发现自己一文不值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>有些人觉得自己薪资高，自己就优秀。我觉得不应该是这样。薪资高不高，可能跟所在公司有关，跟从事的行业有关。你的薪资比别人高，真的不能代表你就比别人技术好。薪资只能算是技术水平的一个参考项，你所在公司愿意支付你这些酬劳。而那些技术牛逼，薪资并不高的，也许别人有自己的想法。可能是因为家庭，可能因为发展。所以不要轻易的认为你薪资高，你就比没你薪资高的人技术强，你就可以否定他们的观点。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个人如果真的优秀，真的有眼界，他可能并不会认为自己很厉害，他看到更多的可能是自己不知道、不了解的地方，从而认为自己并不优秀。并且优秀的人身边也会是优秀的人，或者更优秀的。就算他们会比，也真的认为自己并不优秀。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>而一些一瓶子不满，半瓶子咣当的人。你对这个技术，或者这个行业，了解的也就这么多，了解的可能就是你自己知道的那冰山一角，你当然会认为你很厉害了。你并不会看到这一角之后那庞大的冰山。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>X漂</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>说白了，不管你是“北漂”、“沪漂”还是“杭漂”等等，都是出来的打工的，也有风水轮流转的时候，你就能保证你这个时候贬低、讽刺的人，在日后不会出现在你应聘公司面试官的位置吗？出来混都不容易，而且能要还的。做人留一线，日后好想见嘛。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在偌大的城市中，资本寒冬，你真的觉得你的技术很厉害吗？不管凌晨几点的各个地方，都有为了生活奋斗的人，年轻人，中年人，身上都有不可放下的责任。怀着敬畏的心，学习，努力，这才是正道。那些靠语言上贬低别人抬高的自己的事情，别做了，没啥意义。你经过一段时间学习之后，没准哪天你无意间想到之前和别人讨论的一个问题，你怼别人技术渣，什么都不知道的，也许那时候你会为自己的无知而羞愧，这才发现自己曾经跟大佬的差距。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大佬之所以为大佬，就是他们比你优秀，但比你还努力。优秀的人普遍谦虚，因为他们见过更优秀的人。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>加油</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>小伙伴们~加油吧，都是为了更好的生活，互相学习，提高自己。大佬们也请赐教</p><p>****</p><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "技术", 
                    "tagLink": "https://api.zhihu.com/topics/19550912"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68283472", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 1, 
            "title": "前端战五渣学React——JSX & React.createElement()源码", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-27d89c1f2389f9bcd04d12cd34ab9d1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"900\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic1.zhimg.com/v2-27d89c1f2389f9bcd04d12cd34ab9d1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1440&#39; height=&#39;900&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"900\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1440\" data-original=\"https://pic1.zhimg.com/v2-27d89c1f2389f9bcd04d12cd34ab9d1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-27d89c1f2389f9bcd04d12cd34ab9d1c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><blockquote> 最近《一拳超人》动画更新第二季了，感觉打斗场面没有第一季那么烧钱了，但是剧情还挺好看的，就找了漫画来看。琦玉老师真的厉害！！！打谁都一拳，就喜欢看老师一拳把那些上来就吹牛逼的反派打的稀烂，专治各种不服！！！<br/> </blockquote><h3>招聘AD</h3><p>阿里巴巴集团核心前端岗位</p><p class=\"ztext-empty-paragraph\"><br/></p><p>薪资25到50</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一年一般至少16个月工资</p><p class=\"ztext-empty-paragraph\"><br/></p><p>有意者微信联系：Dell-JS</p><h2>正文</h2><h2>三大民工框架</h2><p>说到现在的前端，各种招聘JD上都会写</p><p><b>“对主流框架（React/Vue/Angular）有了解，至少深入了解一种”</b></p><p>或者是</p><p><b>“精通MV*框架（React/Vue/Angular），至少熟练使用一种，有大型项目经验”</b></p><p>从中我们可以看出现在前端在工作中使用的框架几乎形成了三足鼎立之势，形如当初的“三大民工漫画”——《海贼王》、《火影忍者》以及《死神》，而Angular又类似《死神》一样，国内人气低迷（我只是从招聘信息来看的。。。angular布道者勿喷）。而React凭借自己的灵活性和vue凭借简单好上手的优势，平分秋色。这回就来主要讲一讲React的一大核心概念——JSX，以及对应的<code>React.createElement()</code>这个方法的源码阅读。</p><p>本文阅读需要具备以下知识储备：</p><ol><li>JavaScript基本语法，用js开发过项目最好</li><li>最好使用过react，没用过的😅可能。。。</li></ol><h2>JSX</h2><p>(了解的可以直接跳到下一节看React.createElement()的源码)</p><p>话不多说，让我们来实现一个功能：</p><p><b>创建一个div标签，class名为“title”，内容为“你好 前端战五渣”</b></p><p>看下面的代码⬇️</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"c\">&lt;!-- 引入react核心代码 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.bootcss.com/react/16.8.6/umd/react.development.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"c\">&lt;!-- 引入reactDom核心代码 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.bootcss.com/react-dom/16.8.6/umd/react-dom.development.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"c\">&lt;!-- 引入babel核心代码 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.bootcss.com/babel-standalone/6.26.0/babel.min.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>JSX <span class=\"err\">&amp;</span> React.createElement()<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"c\">&lt;!-- 使用javascript原生插入节点的根节点 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;rootByJs&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"c\">&lt;!-- 使用React.createElement()方法插入节点的根节点 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;rootByReactCreateElement&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"c\">&lt;!-- 使用JSX方法插入节点的根节点 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;rootByJsx&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"c1\">// 原生方法插入\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">htmlNode</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">htmlNode</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;你好 前端战五渣&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">htmlNode</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">;</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;rootByJs&#39;</span><span class=\"p\">).</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">htmlNode</span><span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"c1\">// 使用React.createElement()方法插入\n</span><span class=\"c1\"></span>    <span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n      <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">className</span><span class=\"o\">:</span> <span class=\"s2\">&#34;title&#34;</span><span class=\"p\">},</span> <span class=\"s1\">&#39;你好 前端战五渣&#39;</span><span class=\"p\">),</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;rootByReactCreateElement&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/babel&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"c1\">// 使用JSX方法插入\n</span><span class=\"c1\"></span>    <span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">&#34;title&#34;</span><span class=\"o\">&gt;</span><span class=\"nx\">你好</span> <span class=\"nx\">前端战五渣</span><span class=\"o\">&lt;</span><span class=\"err\">/div&gt;,</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;rootByJsx&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-41e09bb6483a18be9deb19a3fff43b9d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"629\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"https://pic2.zhimg.com/v2-41e09bb6483a18be9deb19a3fff43b9d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;863&#39; height=&#39;629&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"629\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"863\" data-original=\"https://pic2.zhimg.com/v2-41e09bb6483a18be9deb19a3fff43b9d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-41e09bb6483a18be9deb19a3fff43b9d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面实现这个功能，用了三种方法，一种是js原生方法，一种是用react提供的createElement方法，还有最后一种使用JSX来实现的。</p><h3>什么是JSX</h3><p>其实jsx就是react这个框架提出的一种语法扩展，在react建议使用jsx，因为jsx可以清晰明了的描述DOM结构。可能到这里我们可能有人会说，这跟模板语言有什么区别呢？template也可以实现啊，但是JSX具有JavaScript的全部功能（官网这么说的🤦‍♀️）</p><p>一句话总结：JSX语法就是JavaScript和html可以混着写，灵活的一笔</p><p>JSX的优点呢？</p><ol><li>可以在js中写更加语义化且简单易懂的标签</li><li>更加简洁</li><li>结合原生js的语法</li></ol><p>（也有人说jsx写起来很乱，仁者见仁智者见智吧）</p><h3>JSX和React.createElement()的关系</h3><p>那我们知道了JSX是什么，可是这跟我们这回要说的<code>React.createElement()</code>方法有什么关系呢？先来回顾一个面试会问的问题“你能说说vue和react有什么区别吗”，有一个区别就是在使用webpack打包的过程中，vue是用vue-loader来处理<code>.vue</code>后缀的文件，而react在打包的时候，是通过babel来转换的，因为react的组件说白了还是<code>.js</code>或者<code>.jsx</code>，是扩展的js语法，所以是通过babel转换成浏览器识别的es5或者其他版本的js</p><p>那我们来看看jsx的语法通过babel转换会变成什么样⬇️</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ffa357d6161472cfcf993ef6a2857be2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1098\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb\" width=\"1098\" data-original=\"https://pic3.zhimg.com/v2-ffa357d6161472cfcf993ef6a2857be2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1098&#39; height=&#39;192&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1098\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1098\" data-original=\"https://pic3.zhimg.com/v2-ffa357d6161472cfcf993ef6a2857be2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ffa357d6161472cfcf993ef6a2857be2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们可以看到通过babel转换以后，我们的JSX语法中的标签会被转换成一个<code>React.createElement()</code>并传入对应的参数</p><div class=\"highlight\"><pre><code class=\"language-text\">ReactDOM.render(\n  &lt;div className=&#34;title&#34;&gt;hello gedesiwen&lt;/div&gt;,\n  document.getElementById(&#39;rootByJsx&#39;)\n);</code></pre></div><p>变~</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n  <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">className</span><span class=\"o\">:</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">},</span> <span class=\"s1\">&#39;hello gedesiwen&#39;</span><span class=\"p\">),</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;rootByJsx&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</code></pre></div><p>这我们看见了jsx变成了<code>React.createElement()</code></p><h3>多个子节点</h3><p>上面的代码中，我们只是有一个子节点，就是文本节点“你好 前端战五渣”，那如果我们有很多个呢</p><p>我们在React组件中代码是这样的⬇️</p><div class=\"highlight\"><pre><code class=\"language-text\">import DragonBall from &#39;./dragonBall&#39;;\n\nlet htmlNode = (\n  &lt;Fragment&gt;\n    &lt;DragonBall name=&#34;孙悟空&#34;/&gt;\n    &lt;div className=&#34;hello&#34; key={1}&gt;hello&lt;/div&gt;\n    &lt;div className=&#34;world&#34; key={2}&gt;world&lt;/div&gt;\n  &lt;/Fragment&gt;\n)\n\nReactDOM.render(\n  htmlNode,\n  document.getElementById(&#39;rootByJsx&#39;)\n);</code></pre></div><p>我们的节点中包括DragonBall组件，还有Fragment，并且还有两个div</p><p>Fragment是干什么的呢？？？这就是JSX语法的一个规则，我们只能有一个根节点，如果我们有两个并列的div，但是直接写并列的两个div会报错，我们就只能在外面套一层div，但是我们不想创建不用的标签，这时候我们就能使用Fragment，他不会被渲染出来</p><blockquote> React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。 ————react文档<br/> </blockquote><p>那上面这段我们通过babel会转换成这样⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">htmlNode</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span>\n    <span class=\"nx\">Fragment</span><span class=\"p\">,</span>\n    <span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">_dragonBall</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&#34;saiyajin&#34;</span><span class=\"p\">}),</span>\n    <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">className</span><span class=\"o\">:</span> <span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">),</span>\n    <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">className</span><span class=\"o\">:</span> <span class=\"s2\">&#34;world&#34;</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"s2\">&#34;world&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">htmlNode</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;rootByJsx&#39;</span><span class=\"p\">));</span>\n</code></pre></div><p>这就是我们转换完的js，那我们的<code>React.createElement()</code>方法到底做了什么呢</p><h2>React.createElement()源码</h2><p>首先我们需要从github上把<a href=\"https://link.zhihu.com/?target=https%3A//github.com/facebook/react\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">react的源码,v16.8.6</a>拉下来</p><p>然后我们找到在文件<code>/packages/react/src/ReactElement.js</code>这个文件中就有我们需要的<code>React.createElement()</code>方法</p><p><b>（代码中左右判断<code>__DEV__</code>的代码，不做考虑）</b></p><p>先上完整的方法代码，伴有注释</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * React的创建元素方法\n</span><span class=\"cm\"> * @param type 标签名字符串(如’div‘或&#39;span&#39;)，也可以是React组件类型，或是React fragment类型\n</span><span class=\"cm\"> * @param config 包含元素各个属性键值对的对象\n</span><span class=\"cm\"> * @param children 包含元素的子节点或者子元素\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">config</span><span class=\"p\">,</span> <span class=\"nx\">children</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">propName</span><span class=\"p\">;</span> <span class=\"c1\">// 声明一个变量，储存后面循环需要用到的元素属性\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">props</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// 储存元素属性的键值对集合\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 储存元素的key值\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">ref</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 储存元素的ref属性\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>  <span class=\"c1\">// 下面文章介绍\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">source</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 下面文章介绍\n</span><span class=\"c1\"></span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">config</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 判断config是否为空，看看是不是没有属性\n</span><span class=\"c1\"></span>    <span class=\"c1\">// hasValidRef()这个方法就是判断config有没有ref属性，有的话就赋值给之前定义好的ref变量\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">hasValidRef</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ref</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">ref</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// hasValidKey()这个方法就是判断config有没有key属性，有的话就赋值给之前定义好的key变量\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">hasValidKey</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">;</span> <span class=\"c1\">// key值看来还给转成了字符串😳\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"c1\">// __self和__source下面文章做介绍，实际也没搞明白是干嘛的\n</span><span class=\"c1\"></span>    <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">__self</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"o\">?</span> <span class=\"kc\">null</span> <span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">__self</span><span class=\"p\">;</span>\n    <span class=\"nx\">source</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">__source</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"o\">?</span> <span class=\"kc\">null</span> <span class=\"o\">:</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">__source</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 现在就是要把config里面的属性都一个一个挪到props这个之前声明好的对象里面\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">propName</span> <span class=\"k\">in</span> <span class=\"nx\">config</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"c1\">// 判断某个config的属性是不是原型上的\n</span><span class=\"c1\"></span>        <span class=\"nx\">hasOwnProperty</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">,</span> <span class=\"nx\">propName</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>  <span class=\"c1\">// 这行判断是不是原型链上的属性\n</span><span class=\"c1\"></span>        <span class=\"o\">!</span><span class=\"nx\">RESERVED_PROPS</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">propName</span><span class=\"p\">)</span> <span class=\"c1\">// 不能是原型链上的属性，也不能是key，ref，__self以及__source\n</span><span class=\"c1\"></span>      <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">];</span> <span class=\"c1\">// 乾坤大挪移，把config上的属性一个一个转到props里面\n</span><span class=\"c1\"></span>      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// 处理除了type和config属性剩下的其他参数\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">childrenLength</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// 抛去type和config，剩下的参数个数\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">childrenLength</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果抛去type和config，就只剩下一个参数，就直接把这个参数的值赋给props.children\n</span><span class=\"c1\"></span>    <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span> <span class=\"o\">=</span> <span class=\"nx\">children</span><span class=\"p\">;</span> <span class=\"c1\">// 一个参数的情况一般是只有一个文本节点\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">childrenLength</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 如果不是一个呢？？\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">childArray</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">childrenLength</span><span class=\"p\">);</span> <span class=\"c1\">// 声明一个有剩下参数个数的数组\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">childrenLength</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 然后遍历，把每个参数赋值到上面声明的数组里\n</span><span class=\"c1\"></span>      <span class=\"nx\">childArray</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span> <span class=\"o\">=</span> <span class=\"nx\">childArray</span><span class=\"p\">;</span> <span class=\"c1\">// 最后把这个数组赋值给props.children\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span> <span class=\"c1\">// 所以props.children要不是一个字符串，要不就是一个数组\n</span><span class=\"c1\"></span>\n  <span class=\"c1\">// 如果有type并且type有defaultProps属性就执行下面这段\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 那defaultProps属性是啥呢？？\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 如果传进来的是一个组件，而不是div或者span这种标签，可能就会有props，从父组件传进来的值如果没有的默认值\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">type</span><span class=\"p\">.</span><span class=\"nx\">defaultProps</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">defaultProps</span> <span class=\"o\">=</span> <span class=\"nx\">type</span><span class=\"p\">.</span><span class=\"nx\">defaultProps</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">propName</span> <span class=\"k\">in</span> <span class=\"nx\">defaultProps</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 遍历，然后也放到props里面\n</span><span class=\"c1\"></span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">defaultProps</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">];</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// 所以props里面存的是config的属性值，然后还有children的属性，存的是字符串或者数组，还有一部分defaultProps的属性\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 然后返回一个调用ReactElement执行方法，并传入刚才处理过的参数\n</span><span class=\"c1\"></span>  <span class=\"k\">return</span> <span class=\"nx\">ReactElement</span><span class=\"p\">(</span>\n    <span class=\"nx\">type</span><span class=\"p\">,</span>\n    <span class=\"nx\">key</span><span class=\"p\">,</span>\n    <span class=\"nx\">ref</span><span class=\"p\">,</span>\n    <span class=\"nx\">self</span><span class=\"p\">,</span>\n    <span class=\"nx\">source</span><span class=\"p\">,</span>\n    <span class=\"nx\">ReactCurrentOwner</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">,</span>\n    <span class=\"nx\">props</span><span class=\"p\">,</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>React.createElement()</code>方法的代码加注释就是上面这个，小伙伴们应该都能看懂了吧，只是其中其中还有<code>__self</code>、<code>__source</code>以及<code>type.defaultProps</code>没有讲清楚，那我们下面会讲到，我们可以先来看看这个最后返回的<code>ReactElement()</code>方法</p><h2>ReactElement()源码</h2><p>这个方法很简单，就是添加一个判断为react元素类型的值，然后返回，</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @param {*} type\n</span><span class=\"cm\"> * @param {*} props\n</span><span class=\"cm\"> * @param {*} key\n</span><span class=\"cm\"> * @param {string|object} ref\n</span><span class=\"cm\"> * @param {*} owner\n</span><span class=\"cm\"> * @param {*} self A *temporary* helper to detect places where `this` is\n</span><span class=\"cm\"> * different from the `owner` when React.createElement is called, so that we\n</span><span class=\"cm\"> * can warn. We want to get rid of owner and replace string `ref`s with arrow\n</span><span class=\"cm\"> * functions, and as long as `this` and owner are the same, there will be no\n</span><span class=\"cm\"> * change in behavior.\n</span><span class=\"cm\"> * \n</span><span class=\"cm\"> * 这虽然说了用于判断this指向的，但是。。。。。方法里面也没有用到，不知道是干嘛的😳😳😳😳\n</span><span class=\"cm\"> * \n</span><span class=\"cm\"> * @param {*} source An annotation object (added by a transpiler or otherwise)\n</span><span class=\"cm\"> * indicating filename, line number, and/or other information.\n</span><span class=\"cm\"> * \n</span><span class=\"cm\"> * 这个参数一样。。。。也没有用到啊。。。那我传进来是干嘛的，什么注释对象。。😳😳😳搞不懂\n</span><span class=\"cm\"> * \n</span><span class=\"cm\"> * @internal\n</span><span class=\"cm\"> */</span>\n<span class=\"k\">const</span> <span class=\"nx\">ReactElement</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">ref</span><span class=\"p\">,</span> <span class=\"nx\">self</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">owner</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">$$typeof</span><span class=\"o\">:</span> <span class=\"nx\">REACT_ELEMENT_TYPE</span><span class=\"p\">,</span> <span class=\"c1\">// 声明一下是react的元素类型\n</span><span class=\"c1\"></span>    <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">type</span><span class=\"p\">,</span>\n    <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"nx\">key</span><span class=\"p\">,</span>\n    <span class=\"nx\">ref</span><span class=\"o\">:</span> <span class=\"nx\">ref</span><span class=\"p\">,</span>\n    <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"nx\">props</span><span class=\"p\">,</span>\n    <span class=\"nx\">_owner</span><span class=\"o\">:</span> <span class=\"nx\">owner</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">return</span> <span class=\"nx\">element</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2><b>self和</b>source</h2><p>刚看到React.createElement()方法里面就用到了<code>__self</code>和<code>__source</code>两个属性，当时还去查了一下react的文档</p><p>文档中也没有说是干嘛用的，然后查了一下issues</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-39d7d8a3ee6c156e659e882e3ea5cb68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"785\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"785\" data-original=\"https://pic1.zhimg.com/v2-39d7d8a3ee6c156e659e882e3ea5cb68_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;785&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"785\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"785\" data-original=\"https://pic1.zhimg.com/v2-39d7d8a3ee6c156e659e882e3ea5cb68_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-39d7d8a3ee6c156e659e882e3ea5cb68_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>发现是这哥们提交的commit，好😳😳😳他说<code>_self</code>是用来判断this和owner是不是同一个指向巴拉巴拉的，他还说<code>__source</code>是什么注释对象，我也没看懂是干嘛的。。。。然后继续往下看，看到<code>React.createElement()</code>方法返回<code>ReactElement()</code>方法，并且把这些都传进去了。。。。</p><p><b>ReactElement源码中竟然没有用这两个参数</b></p><p><b>大哥你开心就好🤡🤡🤡</b></p><p>看到这篇文章的大佬有知道是干嘛的可以告诉我。。。。我反正现在是懵逼的😶😶😶</p><h2>type.defaultProps</h2><p>这个是什么呢，我们来看一段代码吧</p><div class=\"highlight\"><pre><code class=\"language-text\">import React, { Component } from &#39;react&#39;;\nimport ReactDom from &#39;react-dom&#39;;\n\nclass DragonBall extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        {this.props.name}\n      &lt;/div&gt;\n    )\n  }\n}\n\nReactDom.render(&lt;DragonBall /&gt;, document.getElementById(&#39;root&#39;))</code></pre></div><p>如果我这个DragonBall组件需要展示从props传过来，如果我们没传呢，就会是<code>undefined</code>，就什么都不显示，如果我们想设置默认值呢，可以这么写⬇️</p><div class=\"highlight\"><pre><code class=\"language-text\">import React, { Component } from &#39;react&#39;;\nimport ReactDom from &#39;react-dom&#39;;\n\nclass DragonBall extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        {this.props.name || &#39;戈德斯文&#39;}\n      &lt;/div&gt;\n    )\n  }\n}\n\nReactDom.render(&lt;DragonBall /&gt;, document.getElementById(&#39;root&#39;))</code></pre></div><p>就是像上面这样写，这样我们就进行了一次判断，如果<code>props.name</code>如果没有的话，就显示后面的“戈德斯文”，那还有没有什么别的办法呢？？</p><p>想也知道啊，肯定就是我们说的这个<code>defaultProps</code>，这个东西怎么用呢⬇️</p><div class=\"highlight\"><pre><code class=\"language-text\">import React, { Component } from &#39;react&#39;;\nimport ReactDom from &#39;react-dom&#39;;\n\nclass DragonBall extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        {this.props.name}\n      &lt;/div&gt;\n    )\n  }\n}\n\nDragonBall.defaultProps = {\n  name: &#39;戈德斯文&#39;\n}\n\nReactDom.render(&lt;DragonBall /&gt;, document.getElementById(&#39;root&#39;))</code></pre></div><p>我们只需要这样设置就可以，如果我们页面中很多地方需要用到<code>props</code>传进来的值，就不需要每个用到<code>props</code>值的地方都进行一次判断了</p><p>所以，在React.createElement()源码中</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">type</span><span class=\"p\">.</span><span class=\"nx\">defaultProps</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">defaultProps</span> <span class=\"o\">=</span> <span class=\"nx\">type</span><span class=\"p\">.</span><span class=\"nx\">defaultProps</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">propName</span> <span class=\"k\">in</span> <span class=\"nx\">defaultProps</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 遍历，然后也放到props里面\n</span><span class=\"c1\"></span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">defaultProps</span><span class=\"p\">[</span><span class=\"nx\">propName</span><span class=\"p\">];</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div><p>这段代码就是把默认的props重新赋值。</p><h2>回到开始</h2><p>经过<code>React.createElement()</code>方法处理，并且经过<code>ReactElement()</code>方法洗礼，我们最开始的</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">htmlNode</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span>\n  <span class=\"nx\">Fragment</span><span class=\"p\">,</span> \n  <span class=\"kc\">null</span><span class=\"p\">,</span> \n  <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">_dragonBall</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">),</span> \n  <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">),</span> \n  <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"s2\">&#34;world&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">htmlNode</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;rootByJsx&#39;</span><span class=\"p\">));</span>\n</code></pre></div><p>最后到底是变成什么样的呢？</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n    <span class=\"nt\">&#34;key&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;ref&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;props&#34;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&#34;children&#34;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"nt\">&#34;key&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;ref&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;props&#34;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&#34;name&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;saiyajin&#34;</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&#34;_owner&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;_store&#34;</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&#34;type&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;key&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;ref&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;props&#34;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&#34;className&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">,</span>\n                <span class=\"nt\">&#34;children&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;hello&#34;</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&#34;_owner&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;_store&#34;</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&#34;type&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;key&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;2&#34;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;ref&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;props&#34;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&#34;className&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;world&#34;</span><span class=\"p\">,</span>\n                <span class=\"nt\">&#34;children&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;world&#34;</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&#34;_owner&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nt\">&#34;_store&#34;</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&#34;_owner&#34;</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;_store&#34;</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span></code></pre></div><p>然后再经过<code>ReactDom.render()</code>方法渲染到页面上</p><h3>ps：端午节快乐~~回家过节喽</h3><hr/><p>我是前端战五渣，一个前端界的小学生。</p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5cbae9a8e51d456e2809fba3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《剖析 React 源码：先热个身》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//git%253Cb%253Ehub.com/f%253C/b%253Eacebook/react/pull/4596\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">React:issues adding self and source special props</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.bitsrc.io/understanding-react-default-props-5c50401ed37d\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《Understanding React Default Props》</a></li></ol>", 
            "topic": [
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/67653123", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 3, 
            "title": "前端战无渣：”啊！贾克斯？武器大师？Ajax！XMLHttpRequest“", 
            "content": "<blockquote> 啥都不说了，挺华为就完事了，山姆大叔有点过分了，我相信华为能挺过来<br/> </blockquote><h2>现在该我了！</h2><p>啊，贾克斯？？？现在从事前端的小伙伴不可能不知道这个，如果真不知道这个词，那我觉得你还称不上前端开发🙄</p><p>此贾克斯非彼贾克斯，前端说的啊贾克斯是Asynchronous javaScript + XML的简写，Ajax在很大程度上让前端发展加快了脚步，他的出现和使用，可是说是前端史上的里程碑</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5761b5dd9334635a6a90de5598780170_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"666\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic1.zhimg.com/v2-5761b5dd9334635a6a90de5598780170_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;903&#39; height=&#39;666&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"666\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"903\" data-original=\"https://pic1.zhimg.com/v2-5761b5dd9334635a6a90de5598780170_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5761b5dd9334635a6a90de5598780170_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Ajax横空出世，打破了前后端交互的时候需要重新加载页面，就是整页刷新，我们可以通过Ajax技术直接在页面不刷新的情况下，发出请求，获取返回数据，然后通过js操作Dom更改页面内容。</p><p>也是Ajax出现了以后，才促成了往后的<b>前后端分离</b>，不再是前端只负责切图，只是给后端同学提供模板，然后数据由后端同学添加上。我们前端从此也可以不再依赖后端同学模板套数据了，我们自己就可以完成。</p><p>那我们是如何实现这个无刷新获取数据呢，这就要基于一个对象了————<b>XMLHttpRequest</b></p><h2>开打！开打！</h2><p>Ajax说白了不是新技术，只是一种解决方案，跟jsonp差不多，是基于<b>XMLHttpRequest</b>对象的一个获取后端数据的方案，那我们来看看怎么写的吧(本文不涉及兼容ie等部分浏览器，走主流)</p><h3>get请求</h3><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 获取页面上需要发请求的按钮\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.getAjaxBtn&#39;</span><span class=\"p\">);</span> \n  <span class=\"c1\">// 添加事件\n</span><span class=\"c1\"></span>  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">createXHR</span><span class=\"p\">)</span>\n  <span class=\"c1\">// 我们ajax的主体函数\n</span><span class=\"c1\"></span>  <span class=\"kd\">function</span> <span class=\"nx\">createXHR</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// new一个XMLHttpRequest实例\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n    <span class=\"c1\">// 第一步使用open方法，接收三个参数\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 第一个参数是请求方法名（get，post等）\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 第二个参数是需要请求的接口地址\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 第三个参数是设置请求是否是异步，一般都是都是发送异步请求，同步请求可能会阻塞页面\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 我们先来看同步请求\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;get&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/api/get&#39;</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"c1\">// open方法只是设置参数，并不会发送请求\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 而请求是由send()方法发送的，并且接收一个参数，就是需要发送到服务端的数据\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 如果没有需要发送到服务端的数据，必须传入null，因为有些浏览器不许要这个参数\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">})()</span>\n</code></pre></div><p>这样写的话，我们就在一个按钮上绑定了一个发送get请求的方法，只要我们点击这个按钮，就会发送请求，那我们来看看是什么效果 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-499ee0a775ae080f6ed647d45bd2b3af_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"507\" data-thumbnail=\"https://pic4.zhimg.com/v2-499ee0a775ae080f6ed647d45bd2b3af_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-499ee0a775ae080f6ed647d45bd2b3af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;507&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"507\" data-thumbnail=\"https://pic4.zhimg.com/v2-499ee0a775ae080f6ed647d45bd2b3af_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-499ee0a775ae080f6ed647d45bd2b3af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-499ee0a775ae080f6ed647d45bd2b3af_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-17644cee49c816ee0676a87e2f32a65e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1329\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb\" width=\"1329\" data-original=\"https://pic3.zhimg.com/v2-17644cee49c816ee0676a87e2f32a65e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1329&#39; height=&#39;707&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1329\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1329\" data-original=\"https://pic3.zhimg.com/v2-17644cee49c816ee0676a87e2f32a65e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-17644cee49c816ee0676a87e2f32a65e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>其实很简单是不是，没错，这样我们确实就已经发送了一个get请求了，那我们发送请求是为了什么呢，当然是为了获取到数据，那我们看到接口已经返回了字符串<code>&#39;恭喜你，你发送了一个get请求，真棒！&#39;</code>，那我们怎么能拿到这个数据呢，看下面</p><h3>拿到返回数据</h3><p>其实我们在收到服务端响应的时候，就已经拿到了数据，响应的数据会自动填充到XHR对象中，但我们什么时候才能知道这个数据已经填充到XHR对象中呢？？这个时候我们就需要一个类似于监听函数的事件————<b>readystatechange事件</b>，z这个事件当readystate状态改变，就会执行一次。我们还需要一个知道请求发送状态的属性————<b>readystate</b>，还有一个请求状态码属性————<b>status</b></p><p>状态码就是200、404以及500这种的，在这就不细说了，主要说说readystate有什么状态： <i> 0: 未初始化。尚未调用open()方法 </i> 1: 启动。已经调用open()方法，但尚未调用send()方法 <i> 2：发送。已经调用send()方法，但尚未接收到响应 </i> 3：接收。已经接收到<b>部分</b>相应数据 * 4：完成。已经接收到<b>全部</b>响应数据，而且已经可以在客户端使用了</p><p>看了一下这接个状态，好像我们现在需要的是4这个状态，接收到了全部的数据，然后我们再做一个逻辑处理，上面的请求我们是同步请求，现在我们改改装一下</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 获取页面上需要发请求的按钮\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.getAjaxBtn&#39;</span><span class=\"p\">);</span> \n  <span class=\"c1\">// 添加事件\n</span><span class=\"c1\"></span>  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">createXHR</span><span class=\"p\">)</span>\n  <span class=\"c1\">// 我们ajax的主体函数\n</span><span class=\"c1\"></span>  <span class=\"kd\">function</span> <span class=\"nx\">createXHR</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// new一个XMLHttpRequest实例\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n    <span class=\"c1\">// 第一步使用open方法，接收三个参数\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 第一个参数是请求方法名（get，post等）\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 第二个参数是需要请求的接口地址\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 第三个参数是设置请求是否是异步，一般都是都是发送异步请求，同步请求可能会阻塞页面\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 我们先来看同步请求\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;get&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/api/get&#39;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 我们为xhr添加一个readyState值改变就执行的监听事件\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 这个事件还必须写在send()方法前面\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">onreadystatechange</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 当readyState值为4就是接收到了全部返回数据，并且http状态码是200多的成功，或者是304的缓存，这时候就判断已经是成功拿到了应该返回的数据\n</span><span class=\"c1\"></span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">readyState</span> <span class=\"o\">===</span> <span class=\"mi\">4</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">200</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span> <span class=\"o\">||</span> <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">===</span> <span class=\"mi\">304</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// 输出数据。responseText是作为响应主体被返回的文本\n</span><span class=\"c1\"></span>          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">&#39;请求不成功&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span> \n    <span class=\"p\">}</span>\n    <span class=\"c1\">// open方法只是设置参数，并不会发送请求\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 而请求是由send()方法发送的，并且接收一个参数，就是需要发送到服务端的数据\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 如果没有需要发送到服务端的数据，必须传入null，因为有些浏览器不许要这个参数\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">})()</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9f340751c4564a99d9654616154cd889_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"943\" class=\"origin_image zh-lightbox-thumb\" width=\"891\" data-original=\"https://pic2.zhimg.com/v2-9f340751c4564a99d9654616154cd889_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;891&#39; height=&#39;943&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"943\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"891\" data-original=\"https://pic2.zhimg.com/v2-9f340751c4564a99d9654616154cd889_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9f340751c4564a99d9654616154cd889_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这样我们就成功的拿到了返回的数据并且弹出来了，我们不仅拿到数据可以弹出，我们就可以进行一些更厉害的逻辑处理或者改变页面内容了。</p><p>当然了，也许你get请求的时候需要发送一些数据给服务端，可能是什么页码或者页面需要多少条数据等，我们这个时候只要在open()方法中传入的url上面拼上就行了，类似<code>/api/get?pageNum=1&amp;pageSize=20</code>这样的url。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-62c9066a17b35d9ce97c90dc3522a7e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"896\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb\" width=\"896\" data-original=\"https://pic2.zhimg.com/v2-62c9066a17b35d9ce97c90dc3522a7e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;896&#39; height=&#39;366&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"896\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"896\" data-original=\"https://pic2.zhimg.com/v2-62c9066a17b35d9ce97c90dc3522a7e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-62c9066a17b35d9ce97c90dc3522a7e1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们写的服务端就是返回请求中的数据，我们也能看到，我们也收到了返回来的数据了</p><h3>post请求</h3><p>post请求，我们应该接触过form的表单提交，我们post请求传输的数据必须是经过<code>encodeURIComponent</code>转码的，而且当我们接收到一个json对象，我们需要将他进行转换</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.getAjaxBtn&#39;</span><span class=\"p\">);</span> \n  <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">createXHR</span><span class=\"p\">);</span>\n  <span class=\"c1\">// 我们需要转换的数据，真实场景我们应该是传进来的，或者是获取到的用户输入的数据\n</span><span class=\"c1\"></span>  <span class=\"kd\">let</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">createXHR</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/api/post&#39;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">onreadystatechange</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">readyState</span> <span class=\"o\">===</span> <span class=\"mi\">4</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">200</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span> <span class=\"o\">||</span> <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">===</span> <span class=\"mi\">304</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">&#39;请求不成功&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span> \n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 模仿表单提交，设置content-type，我们需要重新设置请求头，让服务端能知道我们传的是个什么数据\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">setRequestHeader</span><span class=\"p\">(</span><span class=\"s1\">&#39;Content-type&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;application/x-www-form-urlencoded&#39;</span><span class=\"p\">);</span>\n    <span class=\"c1\">// send()方法需要传入的数据应该经过处理\n</span><span class=\"c1\"></span>    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">transformData</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// 处理传入json对象转换格式\n</span><span class=\"c1\"></span>  <span class=\"cm\">/**\n</span><span class=\"cm\">   * 例如这个样的json\n</span><span class=\"cm\">   * {\n</span><span class=\"cm\">        method: &#39;post&#39;,\n</span><span class=\"cm\">        a: &#39;a&#39;,\n</span><span class=\"cm\">        b: 123,\n</span><span class=\"cm\">      }\n</span><span class=\"cm\">   */</span>\n  <span class=\"c1\">// 转换格式为\n</span><span class=\"c1\"></span>  <span class=\"c1\">// method=post&amp;a=a&amp;b=123\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 这样\n</span><span class=\"c1\"></span>  <span class=\"kd\">function</span> <span class=\"nx\">transformData</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">newData</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">newData</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;=&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]))</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">newData</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">})()</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d2e5d7383553680e2125182d8efc8371_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1752\" data-rawheight=\"2049\" class=\"origin_image zh-lightbox-thumb\" width=\"1752\" data-original=\"https://pic2.zhimg.com/v2-d2e5d7383553680e2125182d8efc8371_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1752&#39; height=&#39;2049&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1752\" data-rawheight=\"2049\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1752\" data-original=\"https://pic2.zhimg.com/v2-d2e5d7383553680e2125182d8efc8371_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d2e5d7383553680e2125182d8efc8371_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面就是我们进行的post请求，我们能看到我们发送了一了个Form Data，然后服务端拿到了这个数据，并且我们拿到了会返回来的数据，也就是我们发送给服务端的数据</p><h3>还有谁！</h3><p>当然除了我上面说到的一些属性和方法，XHR还有很多我没有介绍到的方法和属性，这里就说一下几个常用的吧  <i><b>XMLHttpRequest.timeout：</b> 这个就是可以设置请求超时，设置一个时间，单位为毫秒，如果请求时间超过设置时间，直接抛出异常 </i> <b>XMLHttpRequest.withCredentials：</b> 这个属性是看我们需不需要发送cookie的，因为如果是跨域请求，一般请求是不会带上cookie，需要我们手动设置这个属性   <b>XMLHttpRequest.abort()：</b> 这个方法我们用来终止请求，当然是在请求发送并没有返回的时候 * <b>XMLHttpRequest.setRequestHeader()：</b> 这个我们刚才有用到过，就是设置请求头，更改一些我们需要的设置</p><h2>把他们也算上！</h2><p>如果我们这么写，我们会发现很麻烦，而且如果我们没有考虑周全，这个请求方法会很糟糕，隐藏一些未知问题</p><p>技术，向来都是为了提高效率，或者也可以说是为懒人研究的</p><p>现在已经有很好的成熟的开源库替我们封装好了ajax请求方法，例如“尚能饭否的jQuery”以及随着框架模块大放异彩的“Axios”，他们的使用方法相对简单很多，也不用我们自己去处理一些逻辑问题，边界问题。</p><h3>jQuery &amp; Axios</h3><p>我们来看看这两个是多么简单实现的</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://unpkg.com/axios/dist/axios.min.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Ajax<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;postAxiosBtn&#34;</span><span class=\"p\">&gt;</span>发送axios post请求<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;getAxiosBtn&#34;</span><span class=\"p\">&gt;</span>发送axios get请求<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;postJqueryBtn&#34;</span><span class=\"p\">&gt;</span>发送jQuery post请求<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;getJqueryBtn&#34;</span><span class=\"p\">&gt;</span>发送jQuery get<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">postAxiosBtn</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.postAxiosBtn&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">getAxiosBtn</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.getAxiosBtn&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">postJqueryBtn</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.postJqueryBtn&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">getJqueryBtn</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.getJqueryBtn&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">postAxiosBtn</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/post&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span>\n          <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span>\n          <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n    <span class=\"nx\">getAxiosBtn</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/get&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"nx\">params</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">pageNum</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">pageSize</span><span class=\"o\">:</span> <span class=\"mi\">20</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n    <span class=\"nx\">postJqueryBtn</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/post&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">123</span><span class=\"p\">},</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n    <span class=\"nx\">getJqueryBtn</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/get&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">pageNum</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">pageSize</span><span class=\"o\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">status</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7b4e8ef1241905958501cbe7200763a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb\" width=\"877\" data-original=\"https://pic1.zhimg.com/v2-7b4e8ef1241905958501cbe7200763a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;877&#39; height=&#39;515&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"877\" data-original=\"https://pic1.zhimg.com/v2-7b4e8ef1241905958501cbe7200763a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7b4e8ef1241905958501cbe7200763a8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>封装库使用起来就是这么简单！！！</p><h2>哼，一个能打的都没有！</h2><h3>fetch</h3><p>想来大家也都知道fetch这个api了，js新出的一个api，对标的就是XMLHttpRequest，但是相比于XMLHttpRequest，fetch的使用很人性化了，而且自带promise语法，我们不用再用什么回调的方法了，但是fetch再去跟axios这种封装XMLHttpRequest的库来说，使用方法上还有有很大的差距吧。</p><p>但我相信以后封装fetch这种的库会越来越多的，现在虽然有，但是我感觉用的人还没有要使用axios那种程度😜</p><h2>总结</h2><p>现在已经很少会用到纯手写原生Ajax了，都会用已经写好的封装库了，但是面试的时候不乏也会遇到让你手写的，这就很头疼了</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b3792ecd5a6ae8203a4486a91c58e2a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-b3792ecd5a6ae8203a4486a91c58e2a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;525&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-b3792ecd5a6ae8203a4486a91c58e2a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b3792ecd5a6ae8203a4486a91c58e2a2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>尤大的回答不无道理，但是能说上来或者手写原生Ajax的人，绝对是对只是有着一种执着</p><p>知其然也得知其所以然，写伪代码我感觉也是说的过去的，起码对大的思路要了解，一些api接不住无所谓，js、css那么多属性，方法，要是都记下来肯定是不可能的，但是还是能知道有这个东西的存在，查的时候也好查，是不是🤠</p><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "Ajax", 
                    "tagLink": "https://api.zhihu.com/topics/19555867"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": [
                {
                    "userName": "巴萨球迷保护协会", 
                    "userLink": "https://www.zhihu.com/people/69194f14f03e28f2cb3a0fcd0be6b373", 
                    "content": "还不如说阿贾克斯是荷甲球队呢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/66868079", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 0, 
            "title": "前端战五渣写代码——CSS flex（项目展示）", 
            "content": "<h2>废话不多说，直接上代码地址</h2><h2><a href=\"https://link.zhihu.com/?target=https%3A//goethedady.github.io/CSS-flex-show/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">我想要看一看~</a><a href=\"https://link.zhihu.com/?target=https%3A//goethedady.github.io/CSS-flex-show/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">goethedady.github.io/CS</span><span class=\"invisible\">S-flex-show/</span><span class=\"ellipsis\"></span></a></h2><h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/GoetheDady/CSS-flex-show\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">github地址</a></h2><blockquote> 曾几何时，前端开发工程师开始大肆侵蚀着移动端，蚕食ios和安卓开发的工作。在移动端开发，我相信不少小伙伴都使用过flex布局，为什么？？因为方便啊！！但是当我第一次接触flex的时候，我对你那么都的属性，让我背我肯定是背不下来的，能记住几个常用的就不错了，还有那么多单词，对我这种英语本来就不好的人来说那就是煎熬啊，要不是现在的编辑器可以智能提示，让我手写，我可能一个属性都写不出来。<br/> </blockquote><h2>2018年写的demo</h2><p>接触了flex，只是看了那么多属性，但是不能很好的了解都是干什么的啊，所以在18年2月的时候花了一点点时间写了一个demo，然后就搁浅了</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9f62bed8165bd188c1eb60cd6197ae14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb\" width=\"1919\" data-original=\"https://pic1.zhimg.com/v2-9f62bed8165bd188c1eb60cd6197ae14_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1919&#39; height=&#39;966&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1919\" data-original=\"https://pic1.zhimg.com/v2-9f62bed8165bd188c1eb60cd6197ae14_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9f62bed8165bd188c1eb60cd6197ae14_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当时就是这个样子。。。这个demo真的我现在多不忍直视了</p><p><a href=\"https://link.zhihu.com/?target=https%3A//goethedady.github.io/flex-web-show/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浏览地址</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/GoetheDady/flex-web-show\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github地址</a></p><h2>最近更新的版本</h2><p>前几天接触到了前端的模板引擎，还有听了Dell老师的课，算是对面向对象编程有了一点了解，所以就算是重新写了一遍这个小dem0</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-49600a5d2d400c69caea73b37446ef4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1916\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"1916\" data-original=\"https://pic3.zhimg.com/v2-49600a5d2d400c69caea73b37446ef4a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1916&#39; height=&#39;967&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1916\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1916\" data-original=\"https://pic3.zhimg.com/v2-49600a5d2d400c69caea73b37446ef4a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-49600a5d2d400c69caea73b37446ef4a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "CSS", 
                    "tagLink": "https://api.zhihu.com/topics/19551326"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<a class=\"comment_sticker\" href=\"https://pic2.zhimg.com/v2-e213ddb29e5a2adb54d6343d5dea27d1.gif\" data-width=\"\" data-height=\"\">[摊手]</a>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64946941", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 70, 
            "title": "前端战五渣学JavaScript——防抖、节流和rAF", 
            "content": "<blockquote> 看了《JavaScript高级程序设计》和网上的一些博客，感觉对函数节流和函数防抖的概念是反的，以下我写的关于防抖和节流的概念取决于多数人的概念吧，并且基于伦敦前端工程师David Corbacho的<a href=\"https://link.zhihu.com/?target=https%3A//css-tricks.com/debouncing-throttling-explained-examples/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">客座文章</a>。文章写的很好，并且有对应的代码可以操作，更容易理解。其实我觉得叫什么不重要，这个方法叫节流还是这个方法叫防抖，只要你能说明白，并且在生产中能用上就可以，一个名字，不用太去纠结。<br/> 《复仇者联盟4：终局之战》代表着一个时代的结束，从2008年高二看300多MB的《钢铁侠》开始，漫威电影宇宙也像哈利波特的魔法世界一样一路伴我前行。一个时代的落幕，必将开始一个新的时代。End Game？？No！<br/> I LOVE YOU THREE THOUSANDS TIMES<br/> I AM IRON MAN<br/> </blockquote><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7b6c7c8ffe5190c51c79053e5ffe1fdf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-7b6c7c8ffe5190c51c79053e5ffe1fdf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-7b6c7c8ffe5190c51c79053e5ffe1fdf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7b6c7c8ffe5190c51c79053e5ffe1fdf_b.jpg\"/></figure><p> banner献给复仇者联盟的超级英雄们🙏🙏🙏</p><h2>为什么要防抖和节流？？</h2><p><b>防抖</b>和<b>节流</b>是两个相似的技术，都是为了减少一个函数无用的触发次数，以便提高性能或者说避免资源浪费。我们都知道js在操作DOM的时候，代价非常昂贵，相对于非DOM操作需要更多的内存和和CPU时间，假如我们一个函数是在滚动滚动条或者更改更改窗口大小的时候频繁触发，还是会出现页面卡顿，如果是一套复杂的操作DOM逻辑，可能还会引起浏览器崩溃。所以我们需要控制一下触发的次数，来优化一下代码执行情况。</p><p>口说无凭，大家可能也不了解到底是怎样操作，那就来个例子：⬇️ </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b14d3c0232c59a3cea13bdcae81f3193_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"434\" data-thumbnail=\"https://pic4.zhimg.com/v2-b14d3c0232c59a3cea13bdcae81f3193_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-b14d3c0232c59a3cea13bdcae81f3193_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"434\" data-thumbnail=\"https://pic4.zhimg.com/v2-b14d3c0232c59a3cea13bdcae81f3193_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-b14d3c0232c59a3cea13bdcae81f3193_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b14d3c0232c59a3cea13bdcae81f3193_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>我要节流<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"nt\">body</span><span class=\"p\">{</span> <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">3000</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">#</span><span class=\"nn\">centerNum</span> <span class=\"p\">{</span> <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"k\">line-height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span> <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span> <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">fixed</span><span class=\"p\">;</span> <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span> <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span> <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">translate</span><span class=\"p\">(</span><span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">,</span> <span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;centerNum&#34;</span><span class=\"p\">&gt;</span>0<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onscroll</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s1\">&#39;body&#39;</span><span class=\"p\">),</span>\n      <span class=\"nx\">h</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;centerNum&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">h</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n      <span class=\"nx\">num</span> <span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>我们来一个<code>window.onscroll</code>的函数，只要滚动，就改变一次<code>&lt;h1&gt;</code>标签中的数，在上面的图中，我们能看到这个触发是非常频繁的，如果我们不加以干涉的话，让这个函数肆意触发，岂不是要上天了😡</p><h2>Debounce 防抖</h2><h3>什么是防抖</h3><p>啥是防抖呢？我自己的理解就是，当连续触发一个方法的时候，方法并不执行，而是在连续触发结束的时候再执行这个方法。</p><p>举个例子：一部直梯，陆续往上上人（连续触发），当不再上人的时候（停止连续触发），电梯才会关门并动起来（执行方法）。</p><h3>如何实现呢</h3><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-220b983b1f68798ad74cc4ea9aa7e329_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"434\" data-thumbnail=\"https://pic2.zhimg.com/v2-220b983b1f68798ad74cc4ea9aa7e329_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic2.zhimg.com/v2-220b983b1f68798ad74cc4ea9aa7e329_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"434\" data-thumbnail=\"https://pic2.zhimg.com/v2-220b983b1f68798ad74cc4ea9aa7e329_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic2.zhimg.com/v2-220b983b1f68798ad74cc4ea9aa7e329_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-220b983b1f68798ad74cc4ea9aa7e329_b.gif\"/></figure><p> 上面是我模拟电梯上人的例子做出来的，可能这样看的比较直观一些，下面有我实现的代码，大概意思就是当我上人以后，电梯启动，当我一直在上人的时候，电梯不动直到不再上人了，才会关门启动</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>电梯上人<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;addBtn&#34;</span><span class=\"p\">&gt;</span>电梯上人，人数+1<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;resetBtn&#34;</span><span class=\"p\">&gt;</span>重置<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;personNum&#34;</span><span class=\"p\">&gt;</span>电梯人数：0（假设电梯可以无限装人）<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;elevatorStatus&#34;</span><span class=\"p\">&gt;</span>电梯停靠<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">personNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 电梯人数\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">closeDoor</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 电梯启动延时程序\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">addBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;addBtn&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取添加人数按钮\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">personNumP</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;personNum&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取显示人数的标签\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">resetBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;resetBtn&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取重置按钮\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">elevatorStatus</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;elevatorStatus&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取电梯状态标签\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 电梯内添加人数\n</span><span class=\"cm\">     * @description 点击一次电梯内增加一人，增加完人数电梯启动初始化\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">addPerson</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">personNum</span> <span class=\"o\">++</span><span class=\"p\">;</span>\n      <span class=\"nx\">personNumP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`电梯人数：</span><span class=\"si\">${</span><span class=\"nx\">personNum</span><span class=\"si\">}</span><span class=\"sb\">（假设电梯可以无限装人）`</span>\n      <span class=\"nx\">initElevatorStart</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 电梯启动\n</span><span class=\"cm\">     * @description 电梯启动，置灰添加人数按钮，禁止上人\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">elevatorStart</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">elevatorStatus</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;电梯启动&#39;</span><span class=\"p\">;</span>\n      <span class=\"nx\">addBtn</span><span class=\"p\">.</span><span class=\"nx\">disabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 电梯启动初始化\n</span><span class=\"cm\">     * @description 清除之前的关门延时，并重新计算关门延时500ms，意思是当不在触发电梯启动初始化函数时，500ms后启动电梯\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">initElevatorStart</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">clearTimeout</span><span class=\"p\">(</span><span class=\"nx\">closeDoor</span><span class=\"p\">);</span>\n      <span class=\"nx\">closeDoor</span> <span class=\"o\">=</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">elevatorStart</span><span class=\"p\">();</span>\n      <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 重置电梯\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">reset</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">personNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"nx\">personNumP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`电梯人数：</span><span class=\"si\">${</span><span class=\"nx\">personNum</span><span class=\"si\">}</span><span class=\"sb\">（假设电梯可以无限装人）`</span>\n      <span class=\"nx\">elevatorStatus</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;电梯停靠&#39;</span><span class=\"p\">;</span>\n      <span class=\"nx\">addBtn</span><span class=\"p\">.</span><span class=\"nx\">disabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">addBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">addPerson</span><span class=\"p\">);</span>\n    <span class=\"nx\">resetBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">reset</span><span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>上面的代码意思就是我电梯上一个人，就需要关闭电梯门（触发<code>initElevatorStart()</code>方法），然后电梯启动。但是我一直在点击上人的按钮，电梯是不会触发关门启动电梯的<code>elevatorStart()</code>方法。</p><p>代码的核心是<code>initElevatorStart()</code>方法，这个方法在实际需要执行的关门启动电梯方法<code>elevatorStart()</code>外面添加了一层<code>setTimeout</code>方法，也就是为了在调用这个方法的时候我们过500毫秒再去执行真正需要执行的方法。如果这500毫秒之内，又重新触发了<code>initElevatorStart()</code>方法，就需要重新计时，要不不就夹到人了嘛，要赔钱的。。。。</p><p>这是防抖最粗糙的实现了😳😳😳</p><h3>基本形式</h3><p>下面是这个防抖实现的最基本的形式，也是我们在《JavaScript高级程序设计》中看到的样子⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">processor</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">timeoutId</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"c1\">// 相当于延时setTimeout的一个标记，方便清除的时候使用\n</span><span class=\"c1\"></span>\n  <span class=\"c1\">// 实际进行处理的方法\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 连续触发停止以后需要触发的代码\n</span><span class=\"c1\"></span>  <span class=\"nx\">performProcessiong</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 实际执行的代码\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 这里实际就是需要在停止触发的时候执行的代码\n</span><span class=\"c1\"></span>  <span class=\"p\">},</span>\n\n  <span class=\"c1\">// 初始处理调用的方法\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 在实际需要触发的代码外面包一层延时clearTimeout方法，以便控制连续触发带来的无用调用\n</span><span class=\"c1\"></span>  <span class=\"nx\">process</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">clearTimeout</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span><span class=\"p\">);</span> <span class=\"c1\">// 先清除之前的延时，并在下面重新开始计算时间\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">var</span> <span class=\"nx\">that</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span> <span class=\"c1\">// 我们需要保存作用域，因为下面的setTimeout的作用域是在window，调用不要我们需要执行的this.performProcessiong方法\n</span><span class=\"c1\"></span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span> <span class=\"o\">=</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// 100毫秒以后执行performProcessiong方法\n</span><span class=\"c1\"></span>      <span class=\"nx\">that</span><span class=\"p\">.</span><span class=\"nx\">performProcessiong</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"c1\">// 如果还没有执行就又被触发，会根据上面的clearTimeout来清除并重新开始计算\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 尝试开始执行\n</span><span class=\"c1\"></span><span class=\"nx\">processor</span><span class=\"p\">.</span><span class=\"nx\">process</span><span class=\"p\">();</span> <span class=\"c1\">// 需要重新绑定在一个触发条件里\n</span></code></pre></div><p>上面这段代码就是最基本的实现方式，包在一个对象中，然后在对象中互相调用，里面的注释应该可以很清楚的说明每一步是干什么呢，最下面的<code>processor.process()</code>我们在实际使用的时候肯定是需要绑定在一个触发条件上的，比如之前的上电梯问题上，我们就需要把<code>processor.process()</code>方法绑定在增加人数的里面，这样才会有多次调用的情况发生</p><p><b>上面再怎么说都是很简单的实现，在实际生产环境中，逻辑会相对复杂很多，但是万变不离其宗，参透了最基础的，再举一反三就不是什么问题了</b></p><h3>应该叫“前摇”？？</h3><p>具体我也不知道应该叫啥，英文叫“Leading edge”，甭管中文叫啥了，知道是什么意思就行了。之前我们写的代码很明显可以看出来，在我们连续触发一个方法的时候，是在<code>setTimeout</code>结束后才去真正执行，但是还有一种情况，那就是我们在连续触发一个方法的时候，第一次触发就执行了，然后后面的连续触发不再执行，等连续触发停止，经过延时以后，再次触发才会真正执行。</p><p>我还是盗图吧。。。普遍的形式是下面这种</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e3b001999023cec4407f96a1ce63a1ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-e3b001999023cec4407f96a1ce63a1ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;661&#39; height=&#39;133&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-e3b001999023cec4407f96a1ce63a1ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e3b001999023cec4407f96a1ce63a1ca_b.jpg\"/></figure><p> 连续触发结束时执行，而我们现在说的“前摇”则是下面这种情况</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-64d744df8bffe5ccbced0cf4cfb7d9c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic1.zhimg.com/v2-64d744df8bffe5ccbced0cf4cfb7d9c8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;710&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"710\" data-original=\"https://pic1.zhimg.com/v2-64d744df8bffe5ccbced0cf4cfb7d9c8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-64d744df8bffe5ccbced0cf4cfb7d9c8_b.jpg\"/></figure><p> 在连续触发的一开始就执行了，然后往后的连续触发不执行，连续触发停止后再经过延时时间后触发才会再次执行</p><p>下面是我自己写的，大概意思是这样，代码实现也贴出来</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1c5a064e534d6db9c85fe9bb2e0b526f_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"434\" data-thumbnail=\"https://pic4.zhimg.com/v2-1c5a064e534d6db9c85fe9bb2e0b526f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-1c5a064e534d6db9c85fe9bb2e0b526f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"434\" data-thumbnail=\"https://pic4.zhimg.com/v2-1c5a064e534d6db9c85fe9bb2e0b526f_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-1c5a064e534d6db9c85fe9bb2e0b526f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1c5a064e534d6db9c85fe9bb2e0b526f_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>电梯上人<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;addBtn&#34;</span><span class=\"p\">&gt;</span>电梯上人，人数+1<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;resetBtn&#34;</span><span class=\"p\">&gt;</span>重置<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;personNum&#34;</span><span class=\"p\">&gt;</span>电梯人数：0（假设电梯可以无限装人）<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">personNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 电梯人数\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">okNext</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 是否可进行下次执行\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">timeoutFn</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">addBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;addBtn&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取添加人数按钮\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">personNumP</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;personNum&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取显示人数的标签\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">resetBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;resetBtn&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取重置按钮\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 电梯添加人数\n</span><span class=\"cm\">     * @description 电梯可以上人，但是上人以后就不能再上了，不管怎么触发都不行，除非停止触发500毫秒以后，再触发的时候才可以继续执行\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">addPerson</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">okNext</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">okNext</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"nx\">personNum</span> <span class=\"o\">++</span>\n        <span class=\"nx\">personNumP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`电梯人数：</span><span class=\"si\">${</span><span class=\"nx\">personNum</span><span class=\"si\">}</span><span class=\"sb\">（假设电梯可以无限装人）`</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">clearTimeout</span><span class=\"p\">(</span><span class=\"nx\">timeoutFn</span><span class=\"p\">);</span>\n      <span class=\"nx\">timeoutFn</span> <span class=\"o\">=</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">okNext</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n      <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 重置\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">reset</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">personNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"nx\">personNumP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;电梯人数：0（假设电梯可以无限装人）&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">addBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">addPerson</span><span class=\"p\">);</span>\n    <span class=\"nx\">resetBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">reset</span><span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>上面代码要是看不太明白，可以直接粘下去自己执行以下看看是什么感觉，就知道是什么意思了。</p><p><b>代码纯我自己写的，要是有不对的地方，请大佬指正啊</b></p><h2>Throttle 节流</h2><h3>什么是节流</h3><p>节流呢，也是我自己的理解，在连续触发一个方法的某一时间段中，控制方法的执行次数。</p><p>同样举个例子吧，一个地铁进站闸口，10秒进一个人（10秒内执行一个方法），管这10秒中来了是5个人、10个人还是20个人，都只是进一个人（从第一次触发后10秒不管被触发多少次都不会执行，直到下一个10秒才会再执行）。</p><h3>如何实现呢？？</h3><h3>时间戳</h3><p>我们首先用时间戳来判断前后的时间间隔，然后就可以知道我从上次执行完这个方法过了多久，过了这么长时间，是不是已经超过了自己规定的时长，如果时长超过了，我就可以再次执行了</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5c821eb654f131938aa198920410bccd_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"344\" data-thumbnail=\"https://pic2.zhimg.com/v2-5c821eb654f131938aa198920410bccd_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"462\" data-original=\"https://pic2.zhimg.com/v2-5c821eb654f131938aa198920410bccd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;462&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"344\" data-thumbnail=\"https://pic2.zhimg.com/v2-5c821eb654f131938aa198920410bccd_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"462\" data-original=\"https://pic2.zhimg.com/v2-5c821eb654f131938aa198920410bccd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5c821eb654f131938aa198920410bccd_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>地铁进站<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;addBtn&#34;</span><span class=\"p\">&gt;</span>进站人数+1<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;resetBtn&#34;</span><span class=\"p\">&gt;</span>重置<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;personTotal&#34;</span><span class=\"p\">&gt;</span>旅客总人数：0<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;personNum&#34;</span><span class=\"p\">&gt;</span>进站人数：0<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">personNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 进站人数\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">personTotal</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 一共来了多少人\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">addBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;addBtn&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取添加人数按钮\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">personNumP</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;personNum&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取显示人数的标签\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">personTotalP</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;personTotal&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取显示总人数的标签\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">resetBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;resetBtn&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取重置按钮\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 增加进站人数\n</span><span class=\"cm\">     * @description 每个时间间隔执行的方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">addPerson</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">personNum</span> <span class=\"o\">++</span><span class=\"p\">;</span>\n      <span class=\"nx\">personNumP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`进站人数：</span><span class=\"si\">${</span><span class=\"nx\">personNum</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 节流方法（时间戳）\n</span><span class=\"cm\">     * @param {Function} fn 需要节流的实际方法\n</span><span class=\"cm\">     * @param {Number} wait 需要控制的时间长度\n</span><span class=\"cm\">     * @description 根据上一次执行的时间，和这一次执行的时间做比较，如果大于控制的时间，就可以执行\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">throttle</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">,</span> <span class=\"nx\">wait</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">prev</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 第一次执行的时候是0，所以第一次点击的时候肯定大于这个数，所以会立马执行\n</span><span class=\"c1\"></span>      <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"nb\">Date</span><span class=\"p\">.</span><span class=\"nx\">now</span><span class=\"p\">();</span> <span class=\"c1\">// 实际执行的时间\n</span><span class=\"c1\"></span>        <span class=\"nx\">personTotal</span> <span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"nx\">personTotalP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`旅客总人数：</span><span class=\"si\">${</span><span class=\"nx\">personTotal</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">now</span> <span class=\"o\">-</span> <span class=\"nx\">prev</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">wait</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 执行的时间是不是比上次执行的时间大于需要延迟的时间，大于，我们就执行\n</span><span class=\"c1\"></span>          <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">);</span>\n          <span class=\"nx\">prev</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span> <span class=\"c1\">// 执行了以后，重置上一次执行的时间为刚刚执行这次函数的时间，下次执行就用这个时间为基准\n</span><span class=\"c1\"></span>        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 重置\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">reset</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">personNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"nx\">personTotal</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"nx\">personNumP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;进站人数：0&#39;</span><span class=\"p\">;</span>\n      <span class=\"nx\">personTotalP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`旅客总人数：0`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">addBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">throttle</span><span class=\"p\">(</span><span class=\"nx\">addPerson</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">));</span>\n    <span class=\"nx\">resetBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"nx\">reset</span><span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>节流函数<code>throttle</code>用到了作用域，call、apply和闭包等相关的知识，看不懂的可以看我之前的文章</p><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5c8b5cb2e51d452dfe446fa4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《前端战五渣学JavaScript——闭包》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5c9ca4dd6fb9a070c023092e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《前端战五渣学JavaScript——call、apply以及bind》</a></li></ol><p>上面的代码中我感觉可以很直观的看出来是根据判断前后两次的时间，来得知可不可以进行下一次函数的执行。参考着代码中的注释我觉得应该可以看明白吧😳😳😳</p><h3>setTimeout</h3><p>如果我们用<code>setTimeout</code>的话，我们只需要更改一下<code>throttle</code>方法</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e4c5f49e862464c3140f679ebc06cb92_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"344\" data-thumbnail=\"https://pic3.zhimg.com/v2-e4c5f49e862464c3140f679ebc06cb92_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"462\" data-original=\"https://pic3.zhimg.com/v2-e4c5f49e862464c3140f679ebc06cb92_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;462&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"344\" data-thumbnail=\"https://pic3.zhimg.com/v2-e4c5f49e862464c3140f679ebc06cb92_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"462\" data-original=\"https://pic3.zhimg.com/v2-e4c5f49e862464c3140f679ebc06cb92_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e4c5f49e862464c3140f679ebc06cb92_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @method 节流方法（setTimeout）\n</span><span class=\"cm\"> * @param {Function} fn 需要节流的实际方法\n</span><span class=\"cm\"> * @param {Number} wait 需要控制的时间长度\n</span><span class=\"cm\"> * @description 这个方法就很类似防抖了，就是判断当前函数有没有延迟setTimeout函数，有的话就不执行了\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">throttle</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">,</span> <span class=\"nx\">wait</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">timeout</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> \n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">;</span>\n    <span class=\"nx\">personTotal</span> <span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"nx\">personTotalP</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`旅客总人数：</span><span class=\"si\">${</span><span class=\"nx\">personTotal</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">timeout</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n      <span class=\"kd\">var</span> <span class=\"nx\">that</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n      <span class=\"nx\">timeout</span> <span class=\"o\">=</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">timeout</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n        <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">)</span>\n      <span class=\"p\">},</span> <span class=\"nx\">wait</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>虽然我们只需要更改几行代码就实现了用<code>setTimeout</code>实现节流的这个方法，但是我们仔细看上面的图，我们可以发现，当我点击第一次的时候，进站旅客是没有增加的，这跟我们实际情况不一样，我们先来的，我不用等啊，我直接就能进站，对不对。还有当我结束增加人数的时候，进站旅客过去等待时间以后还会加一个人，这当然也不是我们想看到的。</p><p><b>使用时间戳还是setTimeout，取决于业务场景了</b></p><h2>rAF(requestAnimationFrame)</h2><p>诶？？rAF是什么？什么是requestAnimationFrame？这在我没有写这篇博客的时候，我根本不知道window下还有个这个方法，神奇吧，那这个方法是干什么的呢？？</p><blockquote> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。————《MDN Web Docs》<br/> </blockquote><p>就是在用这个可以一直重绘动画，然后让人看起来是个动画，重绘的这个过程是个很频繁的操作，所以如果我们自己写，不加以干涉，在性能和资源上会造成严重的浪费，所以我们可以使用requestAnimationFrame来使用我们的动画看起来很流畅，又不会频繁调用</p><p><b>优点</b></p><ol><li>目标是60fps（16毫秒的一帧），浏览器将决定如何安排渲染的最佳时间。</li><li>相对简单和标准的API，未来不会改变，减少维护成本。</li></ol><p><b>缺点</b></p><ol><li>rAF是内部api，所以我们并不方便修改</li><li>如果浏览器选项卡没有激活，就用不了</li><li>兼容性不好，在IE9，Opera Mini和旧Android中仍然不支持</li><li>node中不能使用</li></ol><h3>让我们来使用rAF吧</h3><p>直接上图</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7a3f39165045491cc75e6494bf8cb39d_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"396\" data-thumbnail=\"https://pic2.zhimg.com/v2-7a3f39165045491cc75e6494bf8cb39d_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-7a3f39165045491cc75e6494bf8cb39d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;396&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"396\" data-thumbnail=\"https://pic2.zhimg.com/v2-7a3f39165045491cc75e6494bf8cb39d_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-7a3f39165045491cc75e6494bf8cb39d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7a3f39165045491cc75e6494bf8cb39d_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>rAF使用<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">#</span><span class=\"nn\">SomeElementYouWantToAnimate</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n      <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#000</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;SomeElementYouWantToAnimate&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;SomeElementYouWantToAnimate&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;absolute&#39;</span><span class=\"p\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @method 移动我们的小黑方块\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">step</span><span class=\"p\">(</span><span class=\"nx\">timestamp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">start</span><span class=\"p\">)</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nx\">timestamp</span><span class=\"p\">;</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">progress</span> <span class=\"o\">=</span> <span class=\"nx\">timestamp</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">;</span>\n      <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">min</span><span class=\"p\">(</span><span class=\"nx\">progress</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;px&#39;</span><span class=\"p\">;</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">progress</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2000</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">requestAnimationFrame</span><span class=\"p\">(</span><span class=\"nx\">step</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">requestAnimationFrame</span><span class=\"p\">(</span><span class=\"nx\">step</span><span class=\"p\">);</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><h3>总结</h3><p>rAF是一个内部api，固定的16毫秒执行一次，因为人眼接受60fps的动画就会感到很流畅了，如果我们需要改变rAF的执行时间，那我们只能自己去写动画的方法，节流还是防抖，看个人爱好了</p><h2>收官</h2><p>防抖：连续触发一个函数，不管是触发开始执行还是结束执行，只要在连续触发，就只执行一次</p><p>节流：规定时间内只执行一次，不管是规定时间内被触发了多少次</p><p>rAF：也算是一种节流手段，原生api，旨在使动画在尽量少占用资源的情况下使动画流畅</p><h2>End Game</h2><p>《复仇者联盟4》现阶段的漫威宇宙的结束，《哈利·波特》《火影忍者》一个个完结的电影，虽然在时刻提醒着我们青春再慢慢的消失，正如英雄联盟中的那句话，我们有了新的敌人叫“生活”。当这些完结的并不是真正的结束，《哈利·波特》有《神奇动物在哪里》，《火影忍者》有《博人传》，《钢铁侠》有《蜘蛛侠》，晚辈从前辈手中接过接力棒，继续往后跑，我们也从自己青葱的岁月进入下一阶段，努力奋斗吧！！</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-31664af89fbc163d99d327db299b1387_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-31664af89fbc163d99d327db299b1387_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1440&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-31664af89fbc163d99d327db299b1387_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-31664af89fbc163d99d327db299b1387_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "Lmccz", 
                    "userLink": "https://www.zhihu.com/people/b1f35d1c2f19f3bc1bfb3be29496f388", 
                    "content": "<p>raf更适合canvas</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "戈德斯文", 
                            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
                            "content": "<p>收到！</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Lmccz"
                        }
                    ]
                }, 
                {
                    "userName": "木恩丶", 
                    "userLink": "https://www.zhihu.com/people/f09850259531c2527a8a03f58389e576", 
                    "content": "没有 'TIMES'  （手动滑稽）", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "秋无衣", 
                    "userLink": "https://www.zhihu.com/people/d5205ab4caadca9a4586b8c04db5f9d9", 
                    "content": "rxjs中有方便的节流防抖，还有你没提到的采样", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "德莱", 
                    "userLink": "https://www.zhihu.com/people/e62796b63dd8097f64af84dd54d60c77", 
                    "content": "<p>你试试这样应该可以解决你说的用timeout实现节流的问题吧？</p><p>function throttle(fn, wait) {<br>  var timeout = null; <br>  return function () {<br>    var context = this;<br>    var args = arguments;<br>    personTotal ++;<br>    personTotalP.innerHTML = `旅客总人数：${personTotal}`;<br>    if (!timeout) { <br>      var that = this;</p><p>      fn.apply(context, args)<br>      timeout = setTimeout(() =&gt; {<br>        timeout = null;<br>      }, wait)<br>    }<br>  }<br>}</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64246595", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 73, 
            "title": "前端战五渣学JavaScript——前端数据存储", 
            "content": "<blockquote> 说起前端数据存储，那就不得不提到Cookie、sessionStorage和localStorage，这是我们接触到的最熟悉的前端数据存储的单词，作为一个前端开发、前端工程师，这三个单词用没用过先不管，但你在学习的时候肯定知道。但是最近又看到很多小伙伴不清楚cookie到底是干什么的，并且sessionStorage和localStorage也不知道怎么用，那我就总结一下啦~<br/> </blockquote><h2>前端数据存储</h2><p>我们都知道，作为一名前端开发，或多或少在开发的过程中因为各种各样的需求，需要在前端存储一些数据，比如登录验证，可能会用到cookie，或者localStorage存储token，然后请求手动带上。所以我们很需要搞清楚前端存储有哪些方法，以及我们该如何去使用这些我们已经司空见惯的单词（Cookie、sessionStorage和localStorage）😝</p><p>下面是我自己总结的常见前端存储方式的对比表格，我目前是这么理解的，如有问题，请大佬们指正：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-33fe4779709b66ab1b751d5a86371eab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2452\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"2452\" data-original=\"https://pic4.zhimg.com/v2-33fe4779709b66ab1b751d5a86371eab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2452&#39; height=&#39;640&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2452\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2452\" data-original=\"https://pic4.zhimg.com/v2-33fe4779709b66ab1b751d5a86371eab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-33fe4779709b66ab1b751d5a86371eab_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>Cookie</h2><blockquote> HTTP Cookie，通常直接叫做cookie，最初是在客户端用于存储会话信息的。该标准要求服务器对任意HTTP请求发送Set-Cookie HTTP头作为响应的一部分，其中包含会话信息。 ————————《JavaScript高级程序设计》<br/> </blockquote><p>说的直白一点，一般就是用来登录验证，在发送登录请求的以后，服务端在返回的响应头中设置<code>Set-Cookie</code>，并设置其值。并且cookie遵循浏览器同源策略，在不同源的页面中是访问不到当前页面的cookie的。如果可以的，就能拿到cookie伪造请求进行XSS和CSRF攻击。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ebd068580ba2545b8a43d82c01e764e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb\" width=\"861\" data-original=\"https://pic1.zhimg.com/v2-ebd068580ba2545b8a43d82c01e764e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;861&#39; height=&#39;202&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"861\" data-original=\"https://pic1.zhimg.com/v2-ebd068580ba2545b8a43d82c01e764e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ebd068580ba2545b8a43d82c01e764e8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>就像上图所示，在响应头中有了<code>Set-Cookie</code>，并设置了服务端返回的相应的值，这个时候我们在查看当前页面的Application中的cookie，发现其中已经有了刚才返回的cookie。<b>会话cookie一般不会存储在硬盘里，而是保存在内存中，如果是设置了过期时间，浏览器会把cookie保存在硬盘中。</b> </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-36ec08a1252ae847f15d245924e6b444_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1123\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"1123\" data-original=\"https://pic1.zhimg.com/v2-36ec08a1252ae847f15d245924e6b444_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1123&#39; height=&#39;433&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1123\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1123\" data-original=\"https://pic1.zhimg.com/v2-36ec08a1252ae847f15d245924e6b444_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-36ec08a1252ae847f15d245924e6b444_b.jpg\"/></figure><p> 就上图中，我们可以看见返回的<code>Set-Cookie</code>中有时间，所以当前返回的cookie是保存在硬盘中的。<b>cookie会随着页面发送的请求再带回到服务端，然后服务端判断cookie的值，进而判断当前的登录状态。</b> 既然我们刚才设置的cookie是有有效时间的，所以在有效时间之前，我们不管怎么操作页面（关闭标签页或者浏览器），我们只要打开页面发送请求，就会默认我们已经是登录状态，不需要再次登录。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d2b779dee8cd2ef850a247f91ef03d10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"983\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb\" width=\"983\" data-original=\"https://pic1.zhimg.com/v2-d2b779dee8cd2ef850a247f91ef03d10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;983&#39; height=&#39;309&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"983\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"983\" data-original=\"https://pic1.zhimg.com/v2-d2b779dee8cd2ef850a247f91ef03d10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d2b779dee8cd2ef850a247f91ef03d10_b.jpg\"/></figure><p> 上图就是携带cookie的请求，这不是前端手动在请求中携带上的，是浏览器的自主行为。</p><h3>Ajax、Axios以及fetch携带cookie情况</h3><p>刚才我们说了，只要服务端在请求回来的响应头中设置了<code>Set-Cookie</code>的值，服务端就在浏览器中种下了cookie，以后的每个请求都会携带上这个cookie，但是也有<b>个别情况发送的请求是不会默认携带cookie</b>。  </p><p><b><i>Cors跨域请求和fetch请求默认是不携带cookie的</i></b></p><h3>jQuery中的Ajax请求</h3><p>我们不管jQuery中发送的jsonp请求，因为严格意义上讲，jsonp不算是发送请求后端返回数据的形势。我们现在只讨论发送的json请求。在相同域下，我们发送的Ajax请求⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n  <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/person/detail&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">dataType</span><span class=\"o\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">success</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{},</span>\n  <span class=\"nx\">error</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>如果我们请求的是一个不同域下的接口，我们不考虑反向代理的情况，因为反向代理理论上还是访问相同域的接口。下面是如果我们使用Cors解决跨域的时候⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n  <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/person/detail&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">dataType</span><span class=\"o\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">xhrFields</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">withCredentials</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"c1\">// 如果是Cors解决的跨域，我们请求接口的域和我们页面所在域是不同域，所以需要添加这个属性值\n</span><span class=\"c1\"></span>  <span class=\"p\">},</span>\n  <span class=\"nx\">success</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{},</span>\n  <span class=\"nx\">error</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">})</span>\n</code></pre></div><h3>Axios请求</h3><p>下面是我们在vue或者react库中经常用到一个请求库——Axios，Axios发送Cors跨域请求，默认也是不会带上cookie的⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">axios</span><span class=\"p\">({</span>\n  <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/person/detail&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>上面是正常的同域请求，下面我们来看怎么发送Cors请求</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">axios</span><span class=\"p\">({</span>\n  <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/person/detail&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">withCredentials</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"c1\">// 设置了这个值，我们我就可以发送Cors请求了，这个值默认不设置的话是false\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div><h3>fetch请求</h3><p>fetch是javascript提供的一个比较底层的API，让我们可以方便的发起fetch请求，但是fetch请求现在看来，只是一个底层API，虽然相对于原生Ajax请求方便一些，但是Ajax已经被各种库封装的很方便使用了，可fetch就相形见绌了。就我们现在来看，fetch不仅仅是在发送Cors请求的时候不懈怠cookie，而是默认情况下，fetch什么情况都不会从服务端发送或接收任何cookied，我们先来看正常请求⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;/person/detail&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">}),</span>\n  <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;content-type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;application/json&#39;</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>上面我们就发送了一条fetch请求，然后我们需要请求凭证，需要有cookie怎么办呢⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;/person/detail&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">}),</span>\n  <span class=\"nx\">credentials</span><span class=\"o\">:</span> <span class=\"s1\">&#39;include&#39;</span><span class=\"p\">,</span> <span class=\"c1\">// 强制带上凭据头，携带上cookie\n</span><span class=\"c1\"></span>  <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;content-type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;application/json&#39;</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</code></pre></div><h3>操作cookie</h3><p>我们毕竟这章是讲前端的数据存储，上面说的请求携带cookie的方法，只是因为<b>cookie会跟随请求被携带回服务端</b> ，那我们现在来看怎么操作cookie呢，或者拿到cookie的值，但是我们一般不需要这么做。</p><h3>存储的数据格式</h3><blockquote> 下面是一个cookie的构成，摘自《JavaScript高级程序设计》<br/> </blockquote><ol><li><b>名称：</b> 一个唯一确定 cookie 的名称。cookie 名称是不区分大小写的，所以 myCookie 和 MyCookie 被认为是同一个 cookie。然而，实践中最好将 cookie 名称看作是区分大小写的，因为某些服务器会这样处理 cookie。cookie 的名称必须是经过 URL 编码的。</li><li><b>值：</b> 储存在 cookie 中的字符串值。值必须被 URL 编码。</li><li><b>域：</b> cookie 对于哪个域是有效的。所有向该域发送的请求中都会包含这个cookie信息。这个值可以包含子域（subdomain，如 <a href=\"https://link.zhihu.com/?target=http%3A//www.wrox.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">wrox.com</span><span class=\"invisible\"></span></a>），也可以不包含它（如.<a href=\"https://link.zhihu.com/?target=http%3A//wrox.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">wrox.com</span><span class=\"invisible\"></span></a>，则对于 <a href=\"https://link.zhihu.com/?target=http%3A//wrox.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">wrox.com</span><span class=\"invisible\"></span></a>的所有子域都有效）。如果没有明确设定，那么这个域会被认作来自设置 cookie 的那个域。</li><li><b>路径：</b> 对于指定域中的那个路径，应该向服务器发送 cookie。例如，你可以指定 cookie 只有从<a href=\"https://link.zhihu.com/?target=http%3A//www.wrox.com/books/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">wrox.com/books/</span><span class=\"invisible\"></span></a> 中才能访问，那么 <a href=\"https://link.zhihu.com/?target=http%3A//www.wrox.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">wrox.com</span><span class=\"invisible\"></span></a> 的页面就不会发送 cookie 信息，即使请求都是来自同一个域的。</li><li><b>失效时间：</b> 表示 cookie 何时应该被删除的时间戳(也就是，何时应该停止向服务器发送这个cookie)。默认情况下，浏览器会话结束时即将所有 cookie 删除;不过也可以自己设置删除时间。 这个值是个 GMT 格式的日期(Wdy, DD-Mon-YYYY HH:MM:SS GMT)，用于指定应该删除 cookie 的准确时间。因此，cookie可在浏览器关闭后依然保存在用户的机器上。如果你设置的失 效日期是个以前的时间，则 cookie 会被立刻删除。</li><li><b>安全标志：</b> 指定后，cookie 只有在使用 SSL 连接的时候才发送到服务器。例如，cookie 信息只 能发送给<a href=\"https://link.zhihu.com/?target=https%3A//www.wrox.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">wrox.com</span><span class=\"invisible\"></span></a>，而 <a href=\"https://link.zhihu.com/?target=http%3A//www.wrox.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">wrox.com</span><span class=\"invisible\"></span></a> 的请求则不能发送 cookie。每一段信息都作为 Set-Cookie 头的一部分，使用分号加空格分隔每一段，如下例所示。</li></ol><h3>获取cookie，更改cookie</h3><p>我们通过js是很方便获取cookie的只需要<code>document.cookie</code>，我们就能获取到当前页面的cookie。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9023f752841b760dc2e023a4250183af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"994\" class=\"origin_image zh-lightbox-thumb\" width=\"655\" data-original=\"https://pic4.zhimg.com/v2-9023f752841b760dc2e023a4250183af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;655&#39; height=&#39;994&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"994\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"655\" data-original=\"https://pic4.zhimg.com/v2-9023f752841b760dc2e023a4250183af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9023f752841b760dc2e023a4250183af_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面在控制台通过<code>document.cookie</code>获取到的cookie</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-610b1ddb11b3eb5a669746749b33fd40_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1352\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb\" width=\"1352\" data-original=\"https://pic1.zhimg.com/v2-610b1ddb11b3eb5a669746749b33fd40_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1352&#39; height=&#39;966&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1352\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1352\" data-original=\"https://pic1.zhimg.com/v2-610b1ddb11b3eb5a669746749b33fd40_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-610b1ddb11b3eb5a669746749b33fd40_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们发现我们获取到的cookie是一长串字符串，而我们在Application看到是已经经过序列化的cookie了。我们既然获取到了cookie，剩下的就是自己进行序列化处理，操作字符串了，我就不多赘述了。</p><p>我们更改cookie的话，如果有相同值，会覆盖，如果没有，会创建新的</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ac4b23e098644a0015fb8bd981f64ef1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"352\" class=\"content_image\" width=\"293\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;293&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"352\" class=\"content_image lazy\" width=\"293\" data-actualsrc=\"https://pic2.zhimg.com/v2-ac4b23e098644a0015fb8bd981f64ef1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过上面我们能知道<code>document.cookie</code>是如何获取和更改cookie值的，不管cookie保存了什么，都会跟随请求一并带到服务端去。如果我们需要频繁操作cookie的值，我们可以自己封装操作cookie的get、set方法。</p><hr/><p>cookie就这些，毕竟我们现在应该不会大量使用cookie去完成前端数据存储的工作，一是存储的数量太小，二是请求都会带上，浪费带宽。也因为请求会带上cookie，所以中间穿插了一些请求携带cookie的点。</p><hr/><h2>Web Storage</h2><p>Web Storage 克服了由cookie代来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。Web Storage的两个主要目的：<br/> <b>1. 提供一种在cookie之外的存储会话数据的途径；</b><br/> <b>2. 提供一种存储大量可以跨会话存在的数据的机制。</b></p><h3>sessionStorage和localStorage共同的Storage Api</h3><p>sessionStorage和localStorage同属于Web Storage，虽然他们的有效时间不同，但是有着相同的方法供开发者使用</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// clear方法，可以删除sessionStorage中所有的值\n</span><span class=\"c1\"></span><span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span> <span class=\"c1\">// 清除所有sessionStorage中的数据\n</span><span class=\"c1\"></span><span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span> <span class=\"c1\">// 清除所有localStorage中的数据\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// getItem(name) 根据指定的名字name获取对应的值\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">getItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取key为name的value\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">getItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 获取key为name的value\n</span><span class=\"c1\">// 当然，我们也可以不这么着获取storage中的值，也可以像下面这样获取值\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span> <span class=\"c1\">// 获取key为name的value\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span> <span class=\"c1\">// 获取key为name的value\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// key(index) 可以获取到index位置处的值的名字\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// 获取到了sessionStorage中排在第一个的值的key，比如刚才的’name‘\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// 获取到了localStorage中排在第一个的值的key，比如刚才的’name‘\n</span><span class=\"c1\">// 获取到了排在第一位的key值，我们就可以根据这个key获取对应的value了\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">getItem</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span> <span class=\"c1\">// 这样我们就获取到了排在第一位的name的value值\n</span><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">getItem</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span> <span class=\"c1\">// 这样我们就获取到了排在第一位的name的value值\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// removedItem(name) 删除由name指定的键值对\n</span><span class=\"c1\"></span><span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">removedItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 删除了key为name的value\n</span><span class=\"c1\"></span><span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">removedItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 删除了key为name的value\n</span><span class=\"c1\">// 我们也能使用删除对象中属性的delete方法来删除\n</span><span class=\"c1\"></span><span class=\"k\">delete</span> <span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"k\">delete</span> <span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// setItem(name, value) 为指定的name设置一个对应的值\n</span><span class=\"c1\"></span><span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">setItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;zhanwuzha&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 在sessionStorage中存了一个name，值为zhanwuzha\n</span><span class=\"c1\"></span><span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">setItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;zhanwuzha&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 在localStorage中存了一个name，值为zhanwuzha\n</span><span class=\"c1\">// 我们也可以使用另一种方法来设置\n</span><span class=\"c1\"></span><span class=\"nx\">sessionStorage</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zhanwuzha&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 在sessionStorage中存了一个name，值为zhanwuzha\n</span><span class=\"c1\"></span><span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zhanwuzha&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 在localStorage中存了一个name，值为zhanwuzha\n</span></code></pre></div><p>以上就是Web Storage中的方法，涵盖了增删改查。<code>delete</code>操作符在WebKit中无法删除数据，所以我们还是使用<code>removeItem()</code>方法吧；</p><p>Web Storage中保存的数据，不会跟随请求一同发回服务器，这是跟cookie最大的区别，并且是按键值对来保存数据的，虽然cookie也是键值对，但是是类似<code>&#39;name=zhanwuzha&amp;age=16&#39;</code>这样的字符串，还需要在进一步处理。</p><h3>sessionStorage</h3><blockquote> sessionStorage对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。这个对象就像会话cookie，也会在浏览器关闭后消失。存储在sessionStorage中的数据可以跨越页面的刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可用（Firefox和WebKit都支持，IE则不行）。——————《JavaScript高级程序设计》<br/> </blockquote><p>sessionStorage在满足上面storage共同的方法之外，它的使用是绑定在某个会话的：</p><ol><li>遵循浏览器的同源策略，不同源的根本就访问不到</li><li>符合同源策略的，必须是同一个会话即使是相同地址，不是同一个会话也不行</li></ol><p>例子：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b8052ae46921215143f9ab23248b8c4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"1090\" data-original=\"https://pic2.zhimg.com/v2-b8052ae46921215143f9ab23248b8c4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1090&#39; height=&#39;538&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1090\" data-original=\"https://pic2.zhimg.com/v2-b8052ae46921215143f9ab23248b8c4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b8052ae46921215143f9ab23248b8c4d_b.jpg\"/></figure><p> 我们在页面中设置一个sessionStorage，key为<code>name</code>，value为<code>zhanwuzha</code>,这个时候我们点击页面中的“新页面打开相同页”的按钮在新标签页打开页面</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b35eb5651aa89b8292d02075a00649a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb\" width=\"588\" data-original=\"https://pic2.zhimg.com/v2-b35eb5651aa89b8292d02075a00649a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;588&#39; height=&#39;515&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"588\" data-original=\"https://pic2.zhimg.com/v2-b35eb5651aa89b8292d02075a00649a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b35eb5651aa89b8292d02075a00649a9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们打开新标签页的sessionStorage中依然有我们刚才保存的数据，可是如果我们直接在地址栏输入地址呢</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e07420ef9edf4d6d8d6fabeeed24d3cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb\" width=\"588\" data-original=\"https://pic1.zhimg.com/v2-e07420ef9edf4d6d8d6fabeeed24d3cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;588&#39; height=&#39;515&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"588\" data-original=\"https://pic1.zhimg.com/v2-e07420ef9edf4d6d8d6fabeeed24d3cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e07420ef9edf4d6d8d6fabeeed24d3cc_b.jpg\"/></figure><p> 这个时候就没有了，所以我们发现只有处在相同会话的sessionStorage；<br/> <b>通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session</b></p><p>这下小伙伴知道什么情况下页面会共享同一个sessionStorage了吧</p><h3>localStorage</h3><p>相比sessionStorage，localStorage就容易理解的多，只要通过上面提到的方法存储的数据，不手动进行删除的情况下，会一直保留，并且只要符合同源策略的页面，都是可以共享相同的localStorage。</p><p><b>就这么好理解~</b></p><h2>indexedDB</h2><h3>what is indexedDB</h3><p>IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。我们都知道cookie只能存储4到5kb的数据，而Web Storage则可以存储2.5mb到10mb之间（各家浏览器不同），而indexedDB一般来说不少于250mb，甚至没有上限。感觉就是个很牛逼的技术。</p><p>不仅拥有大量的存储空间，还支持建立索引，异步，事务等真正数据库已有的功能</p><p>下面有阮一峰大神些的专门聊indexedDB的博客，大神写的很详细，有概念，有操作，感觉以后可能真能用的上这样的技术，所以可以提前了解一下</p><h2>废弃</h2><p><b>文中没有提及到的Web SQL和globalStorage基本处于废弃状态，所以就没有写啦</b></p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2018/07/indexeddb.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《浏览器数据库 IndexedDB 入门教程》——阮一峰</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/lmk123/blog/issues/66\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开》</a></li></ol><p>打卡下班~五一放假啦~</p><hr/><p>我是前端战五渣，一个前端界的小学生。向大佬们低头。</p>", 
            "topic": [
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": [
                {
                    "userName": "马云", 
                    "userLink": "https://www.zhihu.com/people/b50db3bf6171c2eb6480d6585afb02cf", 
                    "content": "写的有点复杂", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "shinn", 
                            "userLink": "https://www.zhihu.com/people/27fd8750f4f67e7703a5745a3c3f1eba", 
                            "content": "我感觉这个叫详细[飙泪笑]，基本都是干货没有废话啊。", 
                            "likes": 0, 
                            "replyToAuthor": "马云"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/63629321", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 134, 
            "title": "前端战五渣学前端——跨域", 
            "content": "<h2>跨域（Cross-Origin）</h2><blockquote> 这几年的工作、面试中，还遇到一个不能回避的问题，那就是<b>跨域</b>，一般面试的时候会问你‘怎么解决跨域问题’，‘跨域是什么’，‘为什么会有跨域’等类似的问题。前段时间后端大佬又弄服务器什么正向、反向代理，就又想到了跨域的问题，所以今天就总结一下前端在跨域问题中怎么解决  <br/> </blockquote><p><b><i>总结一句话：跨域是不可能靠前端单方面解决的，不管是怎么解决，都需要服务端的支持</i></b></p><h2>同源策略</h2><h3>什么是同源策略</h3><p>说到前端跨域，那就不得不说同源策略，因为造成前端会有跨域问题的“罪魁祸首”就是浏览器的同源限制策略</p><blockquote><b>同源策略</b>限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。————————《MDN web docs》<br/> </blockquote><p>上面这段话说的直白一点就是，我在一个域名地址下的网页，如果请求一个受到同源策略限制的地址接口的时候，就会报错，这是为了在我的网页下请求别的地址的文件可能是恶意代码，造成不必要的问题。默认从自己同一个源请求的文件就是。。。安全可信赖的。</p><h3>什么样是同源，什么样是非同源</h3><p>那按照同源策略，不同源的是不能进行请求等操作的，那什么样的是同源，什么样的又不是同源呢（我想从事前端的小伙伴多多少少应该都应该知道）；<br/> 只要满足  <b><i>协议、主机、端口</i></b>   一致，则两个页面具有相同的源  </p><hr/><p>例子：假如我们从<code>http://www.zhanwuzha.com/home/index.html</code>向以下地址发送请求<br/> 1. <code>http://www.zhanwuzha.com/home/detail.html</code> 成功，路径不同<br/> 2. <code>http://www.zhanwuzha.com/description/detail.html</code> 成功，路径不同<br/> 3. <code>https://www.zhanwuzha.com/home/list.html</code> 失败，协议不同（http 和 https）<br/> 4. <code>http://www.zhanwuzha.com:8848/home/manange.html</code> 失败， 端口不同（默认80 和 8848）<br/> 5. <code>http://mobile.zhanwuzha.com/home/secret.html</code> 失败，域名不同（www 和 mobile）</p><hr/><p>好，我们现在知道什么情况算是同源了，因为不同源造成的请求错误，发送的请求就会跨域，那我们在实际生产、开发环境可能都会遇到，那我们现在着手解决这个问题</p><h2>JSONP</h2><p>我相信只要从事过前端的小伙伴用没用过不说，但应该都听说过<code>JSONP</code>这个技术。毕竟面试问不问，准备的时候都会了解。那<code>JSONP</code>到底是怎么解决跨域的呢？</p><h3><code>src</code>和<code>href</code>属性</h3><p>刚才说了只要<b><i>协议、主机、端口</i></b>不一致，就会有跨域的问题，但是，HTML的标签中有一个属性是可以请求外部地址的，那就是<code>src</code>和<code>href</code>属性⬇️</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;http://www.zhanwuzha.com/media/001.jpeg&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;stylesheet&#34;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;http://www.zhanwuzha.com/css/reset.css&#34;</span><span class=\"p\">&gt;</span> \n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.bootcss.com/jquery/3.4.0/jquery.min.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;https://cdn.bootcss.com/twitter-bootstrap/4.3.1/css/bootstrap.min.css&#34;</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;stylesheet&#34;</span><span class=\"p\">&gt;</span></code></pre></div><p>以上这种引用，我们肯定都知道是可以的，可以请求外部地址的js或者css，请求cdn服务器上的公共资源，并且不会出现问题，所以根据<code>src</code>的这一个特性，优秀的工程师们想到一个解决跨域的办法，俗称<code>JSONP</code>。</p><h3>JSON with Padding</h3><p>下面我们就来看看<code>JSONP</code>到底是怎么实现的跨域请求<br/> 大家都知道<code>&lt;script&gt;</code>标签不管是从哪请求回来的js文件，都会立即执行，好，那我们看下面的代码⬇️<br/> index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>JSONP<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;http://www.zhanwuzha.com/jsonp/js/index.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>jsonp/js/index.js  </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;我是src请求回来的js文件，我被执行了&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p>不出意外，我们浏览器的控制台肯定会输出‘我是src请求回来的js文件，我被执行了’这句话，那我们再来看下面的示例 index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>JSONP<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">print</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;http://www.zhanwuzha.com/jsonp/js/index.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>jsonp/js/index.js  </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;我是src请求回来的js文件，我被执行了&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p>不出意外的话，这个也会输出‘我是src请求回来的js文件，我被执行了’这句话，但是跟刚才不同，我们是实现声明好了一个叫<code>print</code>的方法，然后在<code>jsonp/js/index.js</code>返回的js文件中，调用这个方法，然后顺利的执行，那我们是不是可以通过动态添加<code>&lt;script&gt;</code>的标签，可控的去请求远端js并执行，接下来我们来看一个完整版的请求⬇️<br/> index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>JSONP<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">print</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`我叫</span><span class=\"si\">${</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`我今年</span><span class=\"si\">${</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"si\">}</span><span class=\"sb\">岁`</span><span class=\"p\">);</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">jsonpScript</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">&#39;jsonpScript&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">removeChild</span><span class=\"p\">(</span><span class=\"nx\">jsonpScript</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">jsonpRequest</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">jsonpScript</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;script&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">jsonpScript</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"sb\">`http://www.zhanwuzha.com/jsonp/js/index.js?callback=</span><span class=\"si\">${</span><span class=\"nx\">callback</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n      <span class=\"nx\">jsonpScript</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;jsonpScript&#39;</span><span class=\"p\">;</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">jsonpScript</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onclick</span><span class=\"o\">=</span><span class=\"s\">&#34;jsonpRequest(&#39;print&#39;)&#34;</span><span class=\"p\">&gt;</span>发个JSONP请求<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>jsonp/js/index.js  </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">print</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;前端战五渣&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"mi\">18</span>\n  <span class=\"p\">})</span>\n</code></pre></div><p>这样我们就实现了点击页面上的按钮，我们去执行<code>jsonpRequest()</code>方法，并且传进去参数<code>&#34;print&#34;</code>的字符串作为回调函数的名字，显示在页面上添加一个<code>&lt;script&gt;</code>标签并且src的地址为<code>http://www.zhanwuzha.com/jsonp/js/index.js?callback=print</code>，等js文件请求回来以后执行我们先前传入的名为<code>&#34;print&#34;</code>的方法，并且传入了一个对象作为参数，这时控制台就会输出两句话‘我叫前端战五渣\\n 我今年18岁’。<br/> <b>后端拿到了<code>callback=print</code>只需要进行字符串拼接，调用名为<code>print</code>的方法，并且把需要传回来的数据作为参数拼进去，<code>jsonp/js/index.js</code>就是后端动态生成的</b><br/> 这样我们就完整的进行了一次<code>JSONP</code>的请求<br/> <b>其实<code>JSONP</code>并不算真正意义上的AJAX请求，只是请求了一个js文件并且执行了，而且这种跨域方法只能进行GET请求</b></p><h2>CORS</h2><p>接下来我们要讲得这个CORS方法的全称是Cross-origin resource sharing，中文名叫“跨域资源共享”，这可能是目前很多公司解决跨域问题的方法，它允许浏览器向跨源服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p><p><b>这一节我们能知道其实同源策略不仅仅是浏览器这边做了限制，在服务端也是有限制的</b></p><h3>简单请求</h3><p>只要满足以下条件的请求，就属于简单请求<br/> 1. 请求方法为HEAD、GET或者POST中的一种 2. HTTP的头信息不超过以下几种字段<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Last-Event-ID</code>以及<code>Content-Type</code>的值只限于<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>三个  </p><p>对于简单请求来说，从浏览器发出请求的时候，浏览器会自动在请求头中添加一个字段<code>Origin</code>，值为发出请求网页的源地址</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a30a1883fcbf07f8c7d86e9b73511186_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"654\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"654\" data-original=\"https://pic3.zhimg.com/v2-a30a1883fcbf07f8c7d86e9b73511186_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;654&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"654\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"654\" data-original=\"https://pic3.zhimg.com/v2-a30a1883fcbf07f8c7d86e9b73511186_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a30a1883fcbf07f8c7d86e9b73511186_b.jpg\"/></figure><p> 服务端根据这个值，决定是否同意这次请求，如果<code>Origin</code>的值不在指定的许可范围，服务端返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段，就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。 如果Access-Control-Allow-Origin字段正好跟带过去的<code>Origin</code>的值一样，则返回对应的数据，完成一次请求。</p><h3>非简单请求以及<code>option</code>请求</h3><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p><p>在进行非简单请求之前，浏览器会在正式请求之前发送一次预检请求，这就是有时候我们会在控制台中看到的<code>option</code>请求，就是说，正式请求之前，浏览器会去问服务端我这个地址能不能访问你，如果可以，浏览器才会发送正式的请求，否则报错。</p><hr/><p><b>关于简单请求和非简单请求的相关字段以及解释，可以看阮一峰大佬的博客，虽然是2016年写的，但是通俗易懂不过时<a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2016/04/cors.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《跨域资源共享 CORS 详解》</a></b></p><hr/><h3>CORS总结</h3><p>总的来说，CORS实现跨域的方法就是根据请求头的<code>Origin</code>值和响应头的<code>Access-Control-Request-Headers</code>和<code>Access-Control-Request-Method</code>的值进行比对，通过了就可以请求成功，没通过就请求失败。</p><h2>反向代理</h2><h3>node反向代理</h3><p>如果我们用的是node起的前端服务，那我们可以使用node来直接进行反向代理</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d59cbaa673a28e66144cb0aecdde155d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1002\" data-rawheight=\"561\" class=\"origin_image zh-lightbox-thumb\" width=\"1002\" data-original=\"https://pic2.zhimg.com/v2-d59cbaa673a28e66144cb0aecdde155d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1002&#39; height=&#39;561&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1002\" data-rawheight=\"561\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1002\" data-original=\"https://pic2.zhimg.com/v2-d59cbaa673a28e66144cb0aecdde155d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d59cbaa673a28e66144cb0aecdde155d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>以上是我用express框架起的服务，我们只需要引入一个处理代理的插件，然后如图中的配置，代理接口地址，然后配置一个<code>target</code>，就是需要代理到的地址，起服务，监听<code>8848</code>端口；这时我们假如我们的ip地址是<code>http://127.0.0.1:8848</code>，我们就可以访问当我们的页面，然后从页面中向<code>http://127.0.0.1:8848/a</code>以及<code>http://127.0.0.1:8848/b</code>接口发送请求的时候，前端服务接到请求会向<code>http://127.0.0.1:8080/a</code>以及<code>http://127.0.0.1:8080/b</code>的接口请求，然后再返回数据。这就用反向代理实现了跨域请求，因为我们的前端服务在<code>8848</code>端口，而要请求的端口在<code>8080</code>，所以实现了一次完美的跨域请求。</p><p><b>不仅用node可以反向代理，有一大部分的公司用的是nginx进行的代理（nginx没怎么玩过，就不献丑了），或者进行CORS来解决跨域，所以解决的方案一样，只是工具的选择不同</b></p><h3>为什么反向代理可以跨域</h3><p>如上面所说，我们在前端服务器上代理了后端的接口，我们只需要访问跟页面在同一源地址下的接口就行了，但是这是为什么呢？</p><p>一开始我们就说过，<b>同源策略只是浏览器的一个安全策略</b>，只适用于浏览器向服务器发送请求的时候，当服务器跟服务器发送请求的时候，自然就没有这么一层限制，只要是接口，就会返回。</p><p>有人说那不需要权限验证吗？？当然需要了，但是在权限不通过的时候，也是会请求成功200的，只是返回的是“需要登录”等信息，但是如果是浏览器跨域访问这个接口，返回的只能是一个错误。</p><h3>反向代理和正向代理</h3><p>什么是正向代理和反向代理，我先来一张图</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d9aa7396972483022e3146b18f8d2bdd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"937\" class=\"origin_image zh-lightbox-thumb\" width=\"759\" data-original=\"https://pic2.zhimg.com/v2-d9aa7396972483022e3146b18f8d2bdd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;759&#39; height=&#39;937&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"937\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"759\" data-original=\"https://pic2.zhimg.com/v2-d9aa7396972483022e3146b18f8d2bdd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d9aa7396972483022e3146b18f8d2bdd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>正向代理</h3><p>什么是正向代理呢，众所周知的科学上网，就是一个很典型的实例， </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0950c6f393d08fb09c02552588255fe8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"676\" data-rawheight=\"322\" class=\"origin_image zh-lightbox-thumb\" width=\"676\" data-original=\"https://pic1.zhimg.com/v2-0950c6f393d08fb09c02552588255fe8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;676&#39; height=&#39;322&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"676\" data-rawheight=\"322\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"676\" data-original=\"https://pic1.zhimg.com/v2-0950c6f393d08fb09c02552588255fe8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0950c6f393d08fb09c02552588255fe8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当我们从客户端没有办法访问到目标服务器的时候，我们可以通过正向代理，把请求代理到一个有权访问到目标服务器的代理服务器，然后让代理服务器去请求目标服务器，拿到数据再返回来，进而实现科学上网的目的。在整个过程中，我们用户，客户端其实是很清楚实际数据是哪台服务器返回来的，很明显是目标服务器返回的数据，只是中间经过了别人一手而已。</p><h3>反向代理</h3><p>反向代理的例子其实不用再说了，就是我们将node时候的作用，在上面的反向代理的图中，我们可以看到，是各个客户端都会向代理服务器发送请求，然后代理服务器再向各个真正获取数据的服务器发送请求获取数据。相对正向代理，反向代理的客户端，是不清楚数据到底是从哪台服务器获取的，他们只知道是从代理服务器返回的数据，在反向代理的流程中，其实在客户端的眼里代理服务器就是目标服务器，并不知道存在真正的目标服务器</p><h3>总结</h3><p><b>到底是正向代理还是反向代理，只需要判断客户端知不知道真正返回数据的服务器在谁，知道就是正向代理，不知道就是反向代理</b></p><hr/><p><b>以上就是我工作到现在对解决跨域的理解，当然还有别的方法解决跨域，我说的是我接触到的比较常见的解决方案，在介绍CORS解决方案的时候不是很详细，因为我觉得阮一峰大佬说的很清楚，我就不赘述了。其他的如果有问题，各位大佬可以call我，在这向各位大佬递头了</b></p><hr/><h2>参考资料</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《MDN web docs》</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2016/04/cors.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《跨域资源共享 CORS 详解》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/hansexploration/article/details/80314948\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《jsonp原理详解——终于搞清楚jsonp是啥了》</a></li></ol><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "跨域", 
                    "tagLink": "https://api.zhihu.com/topics/19612046"
                }, 
                {
                    "tag": "前端工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19573936"
                }
            ], 
            "comments": [
                {
                    "userName": "山海", 
                    "userLink": "https://www.zhihu.com/people/48eb1ea5c623d53cad6be33dda5e24e5", 
                    "content": "加油！", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "戈德斯文", 
                            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
                            "content": "谢谢~", 
                            "likes": 0, 
                            "replyToAuthor": "山海"
                        }
                    ]
                }, 
                {
                    "userName": "万人王", 
                    "userLink": "https://www.zhihu.com/people/bec9527ee3b7ea1badaa53b723f69c44", 
                    "content": "谢谢，持续关注！", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gwen", 
                    "userLink": "https://www.zhihu.com/people/46868e9762441c8a18c19fc73287a7ad", 
                    "content": "太赞了！看很久资料都没懂，看你这个懂了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "tomcattt", 
                    "userLink": "https://www.zhihu.com/people/de4f746e78561ea55d373a940a12e2c9", 
                    "content": "感觉都在关注如何解决跨域，好像同源策略都成了浏览器一个bug了一样。同源策略不只限制了网络请求，还和cookie，dom，storage等共同作用，来保证普通用户最基本的信息安全。", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "世界这么大有钱最潇洒", 
                    "userLink": "https://www.zhihu.com/people/15c51d9e8325e7bc652b2999b364ba05", 
                    "content": "<p>楼主，你说的正向和反向，唯一的区别就是对谁是隐藏的，但是最终整个流程下来，所有的请求都是跑向这个代理服务器的，由它处理，那既然都是这样，那什么时候改用正向，什么时候用反向啊，反正都是服务器去请求服务器的接口不是吗···打扰你了，希望你有空的时候可以解答一下。谢谢楼主</p><a class=\"comment_sticker\" href=\"https://pic2.zhimg.com/v2-5cc3f8dc72f94dc7e30391d104ec5319.gif\" data-width=\"\" data-height=\"\">[疑惑]</a>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "宅居动物", 
                    "userLink": "https://www.zhihu.com/people/29484854771906763ac916c00fd7a1da", 
                    "content": "非常感谢。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Tiki-Taka", 
                    "userLink": "https://www.zhihu.com/people/ca07218a1f8a84c49cbb533f6bf8e4f0", 
                    "content": "非常不错，感谢作者!", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "戈德斯文", 
                    "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
                    "content": "<p>谢谢大佬支持~</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "戈德斯文", 
                    "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
                    "content": "<p>太客气了吧</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Sky灬灿然", 
                    "userLink": "https://www.zhihu.com/people/0d7a3c5630ea4b16b841dba33ce943d1", 
                    "content": "谢谢，已关注", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "李舜阳", 
                    "userLink": "https://www.zhihu.com/people/c2a8791118f33bf1f3a6578240687a2b", 
                    "content": "你好，我是moka的前端负责人。看到你的文章觉得写的很好，感兴趣来moka吗？[大笑]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/62208055", 
            "userName": "戈德斯文", 
            "userLink": "https://www.zhihu.com/people/489b5199ca99f74d99e9d6d469f69186", 
            "upvote": 0, 
            "title": "前端战五渣学JavaScript——void 运算符", 
            "content": "<blockquote> 最近有点忙，公司有个新项目要尽快上线，所以工作时间很长，没有太多的时间去学习和总结，所以博客也没空更新了。但是充足的工作量让自己觉得很充足，沉淀的知识也有了用武之地，还不错。今天就写写这两天突然想到的一个小问题吧，感觉不是很重要，了解一下就ok了<br/> </blockquote><h2>时常见到<code>void</code>或者<code>void(0)</code></h2><p>在我刚接触前端的时候，在那个前端还没有从蛮荒时代走出来的时候，很多时候方法和属性都是直接写在标签上的，类似下面⬇️</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">onclick</span><span class=\"o\">=</span><span class=\"s\">&#34;aaa&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">onmouseenter</span><span class=\"o\">=</span><span class=\"s\">&#34;bbb&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;https://www.alibaba.com/&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span></code></pre></div><p>绝大多数的时候我发现很多<code>a</code>标签的href写的不是个地址，或者<code>#</code>等各种锚点，而是⬇️</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;javascript:void(0);&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span></code></pre></div><p>像上面这种写法，我估计很多前端的小伙伴也都见过，并且可能知道这么写是为了让<code>a</code>标签没有作用，不会跳转页面，也不会跳转锚点，但是为什么要这么写，我也是前几天突然想到的，就找了找资料看了一下。</p><h2>认识<code>void</code></h2><blockquote><b><code>void</code>运算符</b>对给定的表达式进行求值，然后返回<code>undefined</code>;————《MDN web docs》<br/> </blockquote><p>理解一下上面的解释能执行包含的代码，然后再返回<code>undefined</code>;</p><h2>立即调用的函数表达式</h2><p><code>void</code>可以完成如下的骚操作⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"p\">})();</span> <span class=\"c1\">// 123\n</span><span class=\"c1\"></span>\n<span class=\"k\">void</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">321</span><span class=\"p\">)</span>\n<span class=\"p\">}();</span> <span class=\"c1\">// 321\n</span><span class=\"c1\"></span>\n<span class=\"kd\">function</span> <span class=\"nx\">b</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">}();</span> <span class=\"c1\">// 报错\n</span></code></pre></div><p>第一种方法我们很清楚是一个自执行的函数，而第二种方法我们在一个方法前面写上<code>void</code>并且在函数末尾写上执行的括号，这个函数也变成了一个自执行的函数，而三种的方法只是为了证实我们不写<code>void</code>的时候，这种写法是不会执行，并且报错的。</p><blockquote> 在使用立即执行的函数表达式时，可以利用<code>void</code>运算符让JavaScript引擎把一个<code>function</code>关键字识别成函数表达式而不是函数声明（语句）。————《MDN web docs》<br/> </blockquote><p><b>就是说<code>void</code>会识别后面为自执行的函数，而不是仅仅声明一个函数</b></p><p>函数表达式和声明函数不明白的可以查看<a href=\"https://zhuanlan.zhihu.com/write\" class=\"internal\">函数表达式</a></p><h2>javascript URIs &amp; javscript:void(0)；</h2><p>我们首先要知道，我们开头提到的在<code>a</code>标签的<code>href</code>属性上写<code>javascript:</code>URI 的时候，它会执行URI中的代码，然后用返回的值替换页面内容，除非返回的值是<code>undefined</code>，而<code>void()</code>恰巧可以返回<code>undefined</code>。<br/> 我们先来看看javascript URIs是如何执行代码的。</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;javascript: alert(&#39;我被执行了&#39;);&#34;</span><span class=\"p\">&gt;</span>弹出弹框<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> <span class=\"c\">&lt;!-- 点击页面我们可以看见alert弹框被弹出来了 --&gt;</span></code></pre></div><p>上面的代码我们可以看出来javascript URIs确实可以再<code>href</code>中被执行。<br/> 下面我们来看加入<code>void</code>运算符的结果⬇️</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"c\">&lt;!-- 以下操作请用火狐浏览器操作，chrome不会有变化，所以可以看出有些方法至今各大浏览器的解析策略还是不一样的 --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;javascript: 0;&#34;</span><span class=\"p\">&gt;</span>替换页面为0<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> <span class=\"c\">&lt;!-- 这个a标签在页面中点击以后，页面会被替换成0 --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;javascript: void(0);&#34;</span><span class=\"p\">&gt;</span>替换页面为0<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> <span class=\"c\">&lt;!-- 而这个a标签在页面中点击以后，页面没有任何反应，因为void(0)返回的是0，所以不做处理 --&gt;</span></code></pre></div><p>上面的代码我们能发现加入了<code>void()</code>以后，页面无动于衷，也没有被0替换。</p><h2><code>href=&#34;#&#34;</code>和<code>href=&#34;javascript: void(0)&#34;</code></h2><p>经过上面的章节我们已经知道了<code>href=&#34;javascript: void(0)&#34;</code>是让点击<code>a</code>标签没有任何效果，但是我们前端的小伙伴有时候为了阻止这种情况发生，会<code>href=&#34;#&#34;</code>这么写。这么写的意思是什么呢？执行的时候会默认执行<code>href=&#34;#top&#34;</code>，页面的滚动条会滚动到页面的最上面，所以，这自然不是我们想要的。（而且地址栏的地址后面会跟上一个井号，多难看啊）</p><h2>JavaScript中使用<code>void</code></h2><p>既然我们知道了<code>void</code>的作用，那在实际的JS编程中有什么作用呢。来，上代码⬇️</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"kc\">undefined</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;我是全局的undefined，我被人修改了&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">print</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"kc\">undefined</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;我是局部的undefined，我被人修改了&#39;</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">print</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n</code></pre></div><p>这样一行代码看看会执行成什么样<br/> </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8c8fb652bec7f699d4379cfc7e77819d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"561\" data-original=\"https://pic2.zhimg.com/v2-8c8fb652bec7f699d4379cfc7e77819d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;561&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"561\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"561\" data-original=\"https://pic2.zhimg.com/v2-8c8fb652bec7f699d4379cfc7e77819d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8c8fb652bec7f699d4379cfc7e77819d_b.jpg\"/></figure><p> 这是在node中运行的，我们可以看出来不管是全局还是局部的<code>undefined</code>都被我们重新赋值了，我们再来看看浏览器中的结果</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f156139e55a1a292a1cb13f73d0a942c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1160\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"1160\" data-original=\"https://pic1.zhimg.com/v2-f156139e55a1a292a1cb13f73d0a942c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1160&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1160\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1160\" data-original=\"https://pic1.zhimg.com/v2-f156139e55a1a292a1cb13f73d0a942c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f156139e55a1a292a1cb13f73d0a942c_b.jpg\"/></figure><p> 好样的，这样看来浏览器是有自己的结界的，但是我们如果不输出全局的呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c22d59d673cf4603239233a569d95556_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"876\" data-original=\"https://pic3.zhimg.com/v2-c22d59d673cf4603239233a569d95556_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;876&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"876\" data-original=\"https://pic3.zhimg.com/v2-c22d59d673cf4603239233a569d95556_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c22d59d673cf4603239233a569d95556_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>完蛋，结界被破了，这下我们得出来一个结论<br/> <b>浏览器环境中的局部作用域中是可以更改<code>undefined</code>的值，而在node环境全局和局部都可以更改<code>undefined</code>的值，究其原因，因为<code>undefined</code>在JavaScript中既不是关键字也不是保留字，所以很容易被污染</b> 证据：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-04ee6be22bcdb663e492d7c3abb35a31_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2024\" data-rawheight=\"1232\" class=\"origin_image zh-lightbox-thumb\" width=\"2024\" data-original=\"https://pic2.zhimg.com/v2-04ee6be22bcdb663e492d7c3abb35a31_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2024&#39; height=&#39;1232&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2024\" data-rawheight=\"1232\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2024\" data-original=\"https://pic2.zhimg.com/v2-04ee6be22bcdb663e492d7c3abb35a31_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-04ee6be22bcdb663e492d7c3abb35a31_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-05ff180af50ba284aaca42ed3d10f04b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1238\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb\" width=\"1238\" data-original=\"https://pic4.zhimg.com/v2-05ff180af50ba284aaca42ed3d10f04b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1238&#39; height=&#39;436&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1238\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1238\" data-original=\"https://pic4.zhimg.com/v2-05ff180af50ba284aaca42ed3d10f04b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-05ff180af50ba284aaca42ed3d10f04b_b.jpg\"/></figure><p> 以上都是摘自《JavaScript高级程序设计》</p><h2>underscore中的使用</h2><p>那<code>undefined</code>的值这么容易就被人改变，但像我们这种菜鸡当然不会用严谨的方式去取的<code>undefined</code>的值，但是想一些开源库，力求严谨的态度，让他们会使用<code>void(0)</code>这种方法去获取<code>undefined</code>的值</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5909542c45130cdbac316a3e2e259baf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1069\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb\" width=\"1069\" data-original=\"https://pic4.zhimg.com/v2-5909542c45130cdbac316a3e2e259baf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1069&#39; height=&#39;546&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1069\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1069\" data-original=\"https://pic4.zhimg.com/v2-5909542c45130cdbac316a3e2e259baf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5909542c45130cdbac316a3e2e259baf_b.jpg\"/></figure><p> 上面只是我截取的underscore中的部分代码，但从中我们就可以发现，他们确实是使用<code>void 0</code>去获取<code>undefined</code>的值</p><p>但是令我费解的是😲，师出同门的Lodash却没有使用这种方法。。。。。为啥？？</p><h2>就这些吧</h2><p>以上就是我目前对<code>void</code>这个东西的理解了。。。也不知道理解到什么程度。。尴尬  </p><p>今天就先这样吧，有人催我更新，不是我不想更，实在是没有时间呢最近，中午午休的时间总结一下最近看的<code>void</code>。干活啦，公司这次的项目感觉会很牛逼。</p><h2>参考链接</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《MDN web docs》</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/js/js-void.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《菜鸟教程》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000000474941\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《谈谈Javascript中的void操作符》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000009346082\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《(void 0)与undefined之间的小九九》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5c8a5798e51d4556d04c1636\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《为什么用「void 0」代替「undefined」》</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/Qian123/p/5345697.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《javascript:void(0)和javascript:;的用法》</a></li></ol><hr/><p>我是前端战五渣，一个前端界的小学生。</p>", 
            "topic": [
                {
                    "tag": "前端入门", 
                    "tagLink": "https://api.zhihu.com/topics/19590813"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1104711500975104000"
}
