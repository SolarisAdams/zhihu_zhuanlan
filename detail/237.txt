{
    "title": "5分钟GET一个极客技能", 
    "description": "5分钟，可以玩一局王者荣耀，也可以GET一个极客技能", 
    "followers": [
        "https://www.zhihu.com/people/mo-da-hu-16", 
        "https://www.zhihu.com/people/shuang-ren-yu-guo", 
        "https://www.zhihu.com/people/chou-jay-14", 
        "https://www.zhihu.com/people/ocarol", 
        "https://www.zhihu.com/people/da-jin-shui-gou", 
        "https://www.zhihu.com/people/tian-ma-xing-kong-de-ren", 
        "https://www.zhihu.com/people/ymg-90", 
        "https://www.zhihu.com/people/nuo-wei-6-28", 
        "https://www.zhihu.com/people/gao-gong-96-86", 
        "https://www.zhihu.com/people/jacob-fe", 
        "https://www.zhihu.com/people/da-xue-20-38", 
        "https://www.zhihu.com/people/wangyongyue", 
        "https://www.zhihu.com/people/guo-ji-chen", 
        "https://www.zhihu.com/people/forl", 
        "https://www.zhihu.com/people/lvda-pi-jia", 
        "https://www.zhihu.com/people/shan-he-yi-jiu", 
        "https://www.zhihu.com/people/ba-miao-zhu-chang-1", 
        "https://www.zhihu.com/people/wang-zheng-97-73-94", 
        "https://www.zhihu.com/people/luo-pan-36-60", 
        "https://www.zhihu.com/people/meng-a-li-82", 
        "https://www.zhihu.com/people/tonnytwo", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/wang-liu-ji-26", 
        "https://www.zhihu.com/people/ggff-ss", 
        "https://www.zhihu.com/people/camark", 
        "https://www.zhihu.com/people/connaught-93", 
        "https://www.zhihu.com/people/tao-han", 
        "https://www.zhihu.com/people/lipengyu", 
        "https://www.zhihu.com/people/firstlife", 
        "https://www.zhihu.com/people/eeeeeeeeeeeeeee", 
        "https://www.zhihu.com/people/100-1-57", 
        "https://www.zhihu.com/people/taiyuannb", 
        "https://www.zhihu.com/people/kEviN9H", 
        "https://www.zhihu.com/people/yue-guang-qin-liao-cheng", 
        "https://www.zhihu.com/people/jun-zhong-lu-hua-50", 
        "https://www.zhihu.com/people/jerryding21", 
        "https://www.zhihu.com/people/wj2014-59", 
        "https://www.zhihu.com/people/yuan-fang-91-30", 
        "https://www.zhihu.com/people/hanxu2016", 
        "https://www.zhihu.com/people/everyxing-99", 
        "https://www.zhihu.com/people/daniel-91-36", 
        "https://www.zhihu.com/people/xue-xi-xiao-bai-78-28", 
        "https://www.zhihu.com/people/mo-shan-39", 
        "https://www.zhihu.com/people/fp567s0626-45", 
        "https://www.zhihu.com/people/pie-dao-chuan-69-64", 
        "https://www.zhihu.com/people/song-lei-lei-94", 
        "https://www.zhihu.com/people/hu-dong-peng-13", 
        "https://www.zhihu.com/people/mei-hua-16-57", 
        "https://www.zhihu.com/people/meng-ti-san-chi-jian", 
        "https://www.zhihu.com/people/taltao", 
        "https://www.zhihu.com/people/civic-tesla", 
        "https://www.zhihu.com/people/cai-mo-gu-de-mei-jing-ling", 
        "https://www.zhihu.com/people/mess-66-74", 
        "https://www.zhihu.com/people/gu-feng-58-10", 
        "https://www.zhihu.com/people/pi-pi-87-78", 
        "https://www.zhihu.com/people/fendoudexiaoniao", 
        "https://www.zhihu.com/people/van-wang-8", 
        "https://www.zhihu.com/people/yuan-bao-die-15", 
        "https://www.zhihu.com/people/cole-72-85", 
        "https://www.zhihu.com/people/jin-li-76-69", 
        "https://www.zhihu.com/people/zhang-hua-song", 
        "https://www.zhihu.com/people/liu-guang-90-59", 
        "https://www.zhihu.com/people/ng-jim", 
        "https://www.zhihu.com/people/cai-cai-7-85", 
        "https://www.zhihu.com/people/wen-ren-shi-7", 
        "https://www.zhihu.com/people/zhang-zhang-41-48-52", 
        "https://www.zhihu.com/people/yang-guang-xiao", 
        "https://www.zhihu.com/people/zhang-kumakichi", 
        "https://www.zhihu.com/people/zhang-zhi-shi-43-28", 
        "https://www.zhihu.com/people/li-duo-sheng-89", 
        "https://www.zhihu.com/people/jason-lee-38-93", 
        "https://www.zhihu.com/people/jl-zhu", 
        "https://www.zhihu.com/people/divineddc", 
        "https://www.zhihu.com/people/hu-xiao-lai-77", 
        "https://www.zhihu.com/people/zzzzzwyu", 
        "https://www.zhihu.com/people/wu-huo-de-hui-jin-25", 
        "https://www.zhihu.com/people/fish_tx", 
        "https://www.zhihu.com/people/zheng-mason", 
        "https://www.zhihu.com/people/zhao-rui-66-48", 
        "https://www.zhihu.com/people/wu-hong-28-46", 
        "https://www.zhihu.com/people/li-li-92-48-36", 
        "https://www.zhihu.com/people/yoming-wong", 
        "https://www.zhihu.com/people/feng-xie-42-47", 
        "https://www.zhihu.com/people/liu-jin-35-9", 
        "https://www.zhihu.com/people/xiao-ke-10-21", 
        "https://www.zhihu.com/people/tian-dian-83", 
        "https://www.zhihu.com/people/zhang-jin-ling-31-20", 
        "https://www.zhihu.com/people/liang-min-hong-88", 
        "https://www.zhihu.com/people/shuang231", 
        "https://www.zhihu.com/people/xing-zhe-wu-jiang-36", 
        "https://www.zhihu.com/people/jiang-he-66-21", 
        "https://www.zhihu.com/people/chen-bu-zhi-32", 
        "https://www.zhihu.com/people/li-yi-heng-60-80", 
        "https://www.zhihu.com/people/sen-lin-jian-shang", 
        "https://www.zhihu.com/people/bright-20-29-46", 
        "https://www.zhihu.com/people/qqq112347", 
        "https://www.zhihu.com/people/shi-wei-yang-63", 
        "https://www.zhihu.com/people/yi-si-te-34", 
        "https://www.zhihu.com/people/doublej-2", 
        "https://www.zhihu.com/people/lu-andy-88", 
        "https://www.zhihu.com/people/qi-che-ren-82", 
        "https://www.zhihu.com/people/huaxia249", 
        "https://www.zhihu.com/people/lan-feng-44-63", 
        "https://www.zhihu.com/people/dogdog-7", 
        "https://www.zhihu.com/people/bolide74", 
        "https://www.zhihu.com/people/woo-woo", 
        "https://www.zhihu.com/people/aaronlaw", 
        "https://www.zhihu.com/people/mo-mi-13", 
        "https://www.zhihu.com/people/han-xiao-23-25", 
        "https://www.zhihu.com/people/fighting-tq", 
        "https://www.zhihu.com/people/zheng-xu-99-41", 
        "https://www.zhihu.com/people/jia-pang-zi", 
        "https://www.zhihu.com/people/gushan", 
        "https://www.zhihu.com/people/whjxnyzh", 
        "https://www.zhihu.com/people/zhuo1997", 
        "https://www.zhihu.com/people/sandy-80-90", 
        "https://www.zhihu.com/people/yan-lei-9-64", 
        "https://www.zhihu.com/people/fei-qi-67-55", 
        "https://www.zhihu.com/people/du-xu-chong", 
        "https://www.zhihu.com/people/ji-luo-74", 
        "https://www.zhihu.com/people/BearRobot", 
        "https://www.zhihu.com/people/wu-wan-93", 
        "https://www.zhihu.com/people/hammer-cui", 
        "https://www.zhihu.com/people/windge", 
        "https://www.zhihu.com/people/liu-lang-hai", 
        "https://www.zhihu.com/people/wang-shan-40-82", 
        "https://www.zhihu.com/people/zhang-chun-lei-34-53", 
        "https://www.zhihu.com/people/someonelikeypp", 
        "https://www.zhihu.com/people/wu-zhong-sheng-you-30-96", 
        "https://www.zhihu.com/people/davidxp", 
        "https://www.zhihu.com/people/bu-ding-long", 
        "https://www.zhihu.com/people/kong-kan-kan-91", 
        "https://www.zhihu.com/people/gai-ge-16", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/zhou-jin-jun-59", 
        "https://www.zhihu.com/people/wukong.sun", 
        "https://www.zhihu.com/people/tracy-72-82", 
        "https://www.zhihu.com/people/yi-chen-88-68", 
        "https://www.zhihu.com/people/xxsgdsg", 
        "https://www.zhihu.com/people/siyee-4", 
        "https://www.zhihu.com/people/te-te-54", 
        "https://www.zhihu.com/people/zhang-chi-carol", 
        "https://www.zhihu.com/people/324863", 
        "https://www.zhihu.com/people/yu-si-wen-98", 
        "https://www.zhihu.com/people/da-jiang-30-30", 
        "https://www.zhihu.com/people/duanbingnan", 
        "https://www.zhihu.com/people/xu-zhi-mo-de-shi-ge", 
        "https://www.zhihu.com/people/hui-zeng-59", 
        "https://www.zhihu.com/people/zhao-yong-65-34", 
        "https://www.zhihu.com/people/yixie-zhi-qiu-56-66", 
        "https://www.zhihu.com/people/shihan96", 
        "https://www.zhihu.com/people/bleriot.z", 
        "https://www.zhihu.com/people/lipafneng", 
        "https://www.zhihu.com/people/zhou-yong-chang-67", 
        "https://www.zhihu.com/people/liujiahao-91", 
        "https://www.zhihu.com/people/tommoo", 
        "https://www.zhihu.com/people/vmin-13", 
        "https://www.zhihu.com/people/linku-64", 
        "https://www.zhihu.com/people/luqianqian-5", 
        "https://www.zhihu.com/people/ewenwan", 
        "https://www.zhihu.com/people/wang-gang-62", 
        "https://www.zhihu.com/people/mao-ming-33", 
        "https://www.zhihu.com/people/lemi-lemi", 
        "https://www.zhihu.com/people/qin-fw", 
        "https://www.zhihu.com/people/dou-dou-dou-68-96", 
        "https://www.zhihu.com/people/misaka0w0", 
        "https://www.zhihu.com/people/jiang-nan-34-75-89", 
        "https://www.zhihu.com/people/chao-ji-ma-li-19-51", 
        "https://www.zhihu.com/people/rusty-nail", 
        "https://www.zhihu.com/people/Akagi201", 
        "https://www.zhihu.com/people/anks-akin", 
        "https://www.zhihu.com/people/wang-wang-28", 
        "https://www.zhihu.com/people/proxy-z", 
        "https://www.zhihu.com/people/li-ke-meng", 
        "https://www.zhihu.com/people/lei-zi-hai", 
        "https://www.zhihu.com/people/wang-ya-kun-29-28", 
        "https://www.zhihu.com/people/huang-bu-24", 
        "https://www.zhihu.com/people/shu-ke-58", 
        "https://www.zhihu.com/people/mu-zheng-72", 
        "https://www.zhihu.com/people/ghostalpha", 
        "https://www.zhihu.com/people/luoxuan-73", 
        "https://www.zhihu.com/people/6666666666666", 
        "https://www.zhihu.com/people/chen_juntong", 
        "https://www.zhihu.com/people/xi-yang-wu-qu", 
        "https://www.zhihu.com/people/watsonl", 
        "https://www.zhihu.com/people/esharyday", 
        "https://www.zhihu.com/people/xiao-jing-bo-53", 
        "https://www.zhihu.com/people/yan-shui-chong-cha", 
        "https://www.zhihu.com/people/keen-lin", 
        "https://www.zhihu.com/people/feng-si-98-62", 
        "https://www.zhihu.com/people/shuai-qi-de-hui", 
        "https://www.zhihu.com/people/liang-ge-e-meng", 
        "https://www.zhihu.com/people/saitofang", 
        "https://www.zhihu.com/people/jueying2015", 
        "https://www.zhihu.com/people/he-he-he-he-he-he-61-80", 
        "https://www.zhihu.com/people/chen-bo-kai-72", 
        "https://www.zhihu.com/people/qiqi-35", 
        "https://www.zhihu.com/people/bai-yi-jiang-gong-zi", 
        "https://www.zhihu.com/people/shuang-zhi-an-shang", 
        "https://www.zhihu.com/people/zhou-ling-chao-39", 
        "https://www.zhihu.com/people/xiaotozhi", 
        "https://www.zhihu.com/people/sushengbuhuo", 
        "https://www.zhihu.com/people/ti-mo-65-62", 
        "https://www.zhihu.com/people/elvin-76-68", 
        "https://www.zhihu.com/people/beiyangfelix", 
        "https://www.zhihu.com/people/liu-meng-yuan-72-95", 
        "https://www.zhihu.com/people/thomasyang-24", 
        "https://www.zhihu.com/people/da-zi-44", 
        "https://www.zhihu.com/people/lian-zhi-wen", 
        "https://www.zhihu.com/people/guo-jun-85-45", 
        "https://www.zhihu.com/people/shisu", 
        "https://www.zhihu.com/people/dingin917", 
        "https://www.zhihu.com/people/ilinlin-80", 
        "https://www.zhihu.com/people/li-yuan-41-96-3", 
        "https://www.zhihu.com/people/yidian-er-xiao-jiao-ao", 
        "https://www.zhihu.com/people/feilaoda", 
        "https://www.zhihu.com/people/mu-mu-8-68", 
        "https://www.zhihu.com/people/xiang-fei-de-zhu-64-92", 
        "https://www.zhihu.com/people/zeng-1-76", 
        "https://www.zhihu.com/people/he-huangcai", 
        "https://www.zhihu.com/people/man-man-na-mian-bao", 
        "https://www.zhihu.com/people/zuo-guo-cai-15", 
        "https://www.zhihu.com/people/lan-tang-13", 
        "https://www.zhihu.com/people/simon-cai-47", 
        "https://www.zhihu.com/people/xin-sui-jing-qian-61", 
        "https://www.zhihu.com/people/ke-luo-di-ya-ya-te-lu", 
        "https://www.zhihu.com/people/meng-zi-lalalla", 
        "https://www.zhihu.com/people/azer.xu", 
        "https://www.zhihu.com/people/eztester", 
        "https://www.zhihu.com/people/chang-broots", 
        "https://www.zhihu.com/people/flyo", 
        "https://www.zhihu.com/people/hao-ren-79-93", 
        "https://www.zhihu.com/people/you-dang-de-xiao-za-bing", 
        "https://www.zhihu.com/people/shaop-ju", 
        "https://www.zhihu.com/people/xdays", 
        "https://www.zhihu.com/people/lan-zhi-zhu-49", 
        "https://www.zhihu.com/people/yuanfeiz", 
        "https://www.zhihu.com/people/wang-ming-66-71", 
        "https://www.zhihu.com/people/party55555", 
        "https://www.zhihu.com/people/duan-fang-liang", 
        "https://www.zhihu.com/people/tian-kai-96", 
        "https://www.zhihu.com/people/awen162awen"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/78109926", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 0, 
            "title": "5分钟GET H5 - 被玩坏了的异步处理 RxJS（一）", 
            "content": "<p>知识点 GET：什么是异步，用什么工具处理异步<br/>建议玩家等级：学生党，大前端码农，有志于大前端的其它码农<br/>阅读此文先解锁技能：Angular 成功运行 Hello World<br/><br/><b>PART 1: 同步(Sync) vs 异步(Async)</b><br/>举个🌰：技术宅小明上班第一天早上起床后做了3件任务，</p><ol><li>打开自动煮蛋器，并一直等待煮蛋完成，用时8分钟</li><li>打开自动咖啡机，并一直等待咖啡完成，用时2分钟</li><li>打开自动面包机，并一直等待面包完成，用时6分钟</li></ol><p>总共用时：8+2+6=16分钟，于是小明上班迟到了😭</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2880b198fde8f700d7474b37104594d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb\" width=\"679\" data-original=\"https://pic1.zhimg.com/v2-2880b198fde8f700d7474b37104594d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;679&#39; height=&#39;279&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"679\" data-original=\"https://pic1.zhimg.com/v2-2880b198fde8f700d7474b37104594d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2880b198fde8f700d7474b37104594d0_b.jpg\"/></figure><p>上班第二天早上，小明调整了任务策略，</p><ol><li>打开自动煮蛋器，然后不管它，8分钟后，鸡蛋完成</li><li>打开自动咖啡机，然后不管它，2分钟后，咖啡完成</li><li>打开自动面包机，然后不管它，6分钟后，面包完成</li></ol><p>总共用时：8分钟，小明成功把早起这件事的时间效率提升了50%</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-587a5ee80de1df3118a571f2081babcf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic4.zhimg.com/v2-587a5ee80de1df3118a571f2081babcf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;680&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"680\" data-original=\"https://pic4.zhimg.com/v2-587a5ee80de1df3118a571f2081babcf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-587a5ee80de1df3118a571f2081babcf_b.jpg\"/></figure><p>理解<b>同步(Sync)</b>：小明第一天执行每件任务，会一直等待当前任务完成，才退出任务执行下一件任务</p><p>理解<b>异步(Async)</b>：小明第二天执行每件任务，开启当前任务后就立刻退出该任务，并执行下一件任务</p><p>敲黑板：<b>异步是提升效率利器，系统效率如此，生活效率亦如此</b></p><p><br/><b>PART 2: 被观察者(Observable) vs 观察者(Observer)</b><br/>接着举小明的🌰，来理解程序猿世界里的小明和煮蛋器长什么样子</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e534e298ad0230de574c2265d671215d_b.jpg\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb\" width=\"564\" data-original=\"https://pic2.zhimg.com/v2-e534e298ad0230de574c2265d671215d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;564&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"564\" data-original=\"https://pic2.zhimg.com/v2-e534e298ad0230de574c2265d671215d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e534e298ad0230de574c2265d671215d_b.jpg\"/><figcaption>图1</figcaption></figure><p>理解<b>观察者(Observer)</b>：小明是观察者。小明观察煮蛋器</p><p>理解<b>被观察者(Observable)</b>：煮蛋器是被观察者。煮蛋器被小明观察，完成煮蛋后发出消息通知小明</p><p>理解<b>订阅(Subscribe)</b>：小明订阅煮蛋器。小明打开煮蛋器，等同于给了自己一个确定的通知预期，煮蛋器完成后会通知自己</p><p>敲黑板：<b>观察者 订阅 被观察者，被观察者 发送消息通知 观察者</b><br/><br/><br/><b>PART 3: RxJS 帮你实现</b></p><p>配合 <b>图1</b> 重点理解 <b>next()</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;rxjs&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;[5分钟GET H5] - 被玩坏了的异步处理 RxJS&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 煮蛋器\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">eggMachine</span><span class=\"o\">:</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">((</span><span class=\"nx\">xiaoMing</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;8点&#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;分 煮鸡蛋&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n  <span class=\"nx\">xiaoMing</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"s1\">&#39;8点&#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;分 [鸡蛋完成]&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 面包机\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">toastMachine</span><span class=\"o\">:</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">((</span><span class=\"nx\">xiaoMing</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;8点&#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;分 烤面包&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n  <span class=\"nx\">xiaoMing</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"s1\">&#39;8点&#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;分 [面包完成]&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 咖啡机\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">cafeMachine</span><span class=\"o\">:</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">((</span><span class=\"nx\">xiaoMing</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;8点&#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;分 煮咖啡&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"nx\">xiaoMing</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"s1\">&#39;8点&#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;分 [咖啡完成]&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>配合 <b>图1</b> 重点理解 <b>subscribe()</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 同步\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;[5分钟GET H5] - 同步的第一天：&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nx\">eggMachine</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">cafeMachine</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">toastMachine</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 异步\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;[5分钟GET H5] - 异步的第二天：&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nx\">eggMachine</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nx\">cafeMachine</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minute</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nx\">toastMachine</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">Observer</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c27b16f9f55bd2e4feddee8626417897_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"364\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic4.zhimg.com/v2-c27b16f9f55bd2e4feddee8626417897_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;610&#39; height=&#39;364&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"364\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"610\" data-original=\"https://pic4.zhimg.com/v2-c27b16f9f55bd2e4feddee8626417897_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c27b16f9f55bd2e4feddee8626417897_b.jpg\"/></figure><p><br/><br/><b>Part Final: Do It Yourself</b><br/>此刻应有掌声，恭喜你只花5分钟GET了知识点：</p><ol><li>同步和异步</li><li>观察者和被观察者</li><li>大前端鄙视链技术之一RxJS入门 </li></ol><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/fengjihua/rxjs-app\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载本文源代码</a> 亲自调试一下<br/></p><hr/><p><i>想转载就转载吧，知识是无界的~</i></p>", 
            "topic": [
                {
                    "tag": "RxJS", 
                    "tagLink": "https://api.zhihu.com/topics/20036245"
                }, 
                {
                    "tag": "异步", 
                    "tagLink": "https://api.zhihu.com/topics/19571217"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35140033", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 3, 
            "title": "5分钟GET音乐检索 - 泛音识别", 
            "content": "<p>本文攻略：使用计算机技术识别并检索音乐，科普乐理基础</p><p>建议玩家等级：音乐党，发烧友，学生党，中级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点乐理基础</li><li>一点点 Python 基础</li></ol><p>实践此文推荐装备：</p><ol><li>Python 版本：3.6</li><li>编程软件：Jupyter Notebook, VS Code</li><li>音乐软件：MuseScore</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 引言</b></h2><p><a href=\"https://zhuanlan.zhihu.com/p/34433387\" class=\"internal\">上篇文章</a> 我们介绍了如何分析检测一段音频中的频率，最近PO主接着上次的成果终于写完了第一个Beta版，依照惯例先上成果：</p><p>视频中右边为MuseScore打谱软件播放音乐，左边为Beta版检测当前播放的音乐进度，算法还未做到完美，在此先抛砖引玉。</p><blockquote><i>Beta版中的 Measure 表示当前小节，Beat 表示当前拍子，Pitch 表示当前检测到的主音</i></blockquote><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/963206018105323520\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/80/v2-fce37084d8fcf5c558cce638cb0d8e2c_b.jpg\" data-lens-id=\"963206018105323520\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/80/v2-fce37084d8fcf5c558cce638cb0d8e2c_b.jpg\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/963206018105323520</span></span></a><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 理解泛音</b></h2><p>对于PO主这位乐理小白来说，泛音算是这次 Beta 版过程中最大的苦主了。</p><p>那我们就先来简单了解一下这位苦主：</p><ol><li>原理了解一下：当我们在钢琴上弹下 C4(do) 的时候，钢琴会发出 C4 对应的约等于 262Hz 频率声波，同时钢琴还会发出一系列约等于 262Hz 整数倍频率的声波。</li><li>专业名词了解一下：262Hz 是 C4 的 <b>基频</b>，262*2Hz 是 C4 的 <b>第一泛音</b>，262*3Hz 是 C4 的 <b>第二泛音</b>，262*4Hz 是 C4 的 <b>第三泛音</b>，262*5Hz 是 C4 的 <b>第四泛音 </b>等等等等，以此类推。</li><li>总结陈词：我们人耳听到的钢琴声 C4，其实质是 C4 的基频及其所有泛音频率一起共振的结果。</li></ol><p>了解了泛音的原理后，结合实操我们得出以下结论：</p><ol><li>使用我们之前的频率检测方法，检测到的频率有可能是基频，也有可能是泛音频率，并非完全可以用来准确确定这段音频的主音。</li><li>如果一个音（例如 C4）的基频（262Hz）及其一系列泛音频率（262*2Hz, 262*3Hz, 262*4Hz...）都被检测到，则可以认为这段音频中大概率包含该音。</li></ol><p>根据这个原理，接下来我们就开始撸代码升级我们的检测算法。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 生产者与消费者</b></h2><blockquote><i>前方高能，非码农玩家可以忽略代码部分</i></blockquote><p>到了撸代码环节，在开始做泛音检测前，先介绍一下本次代码架构。</p><p>PO主用了经典的数据结构 - 队列，作为切入点，并写了两个并发线程，分别是大家熟悉的生产者（ProducerThread）和消费者（ConsumerThread）。</p><p>生产者：负责向队列生产音频数据。音频数据来源可以有两种方式，wav文件和麦克风。</p><p>消费者：负责消费（处理）队列中的音频数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 1: 创建队列</b></p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 生产者监听麦克风，每次读取 4096 个音频数据样本，并将数据样本放入队列 Q</b></p><blockquote><i>这里使用 Python 类库 PyAudio 读取麦克风音频数据</i></blockquote><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">CHUNK_UNIT</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>\n<span class=\"n\">TIME</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">CHUNK</span> <span class=\"o\">=</span> <span class=\"n\">CHUNK_UNIT</span> <span class=\"o\">*</span> <span class=\"n\">TIME</span>\n<span class=\"n\">FORMAT</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">paInt16</span>\n<span class=\"n\">CHANNELS</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">RATE</span> <span class=\"o\">=</span> <span class=\"mi\">44100</span>\n<span class=\"n\">RECORD_SECONDS</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span>\n\n<span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">FORMAT</span><span class=\"p\">,</span>\n                <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">CHANNELS</span><span class=\"p\">,</span>\n                <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"n\">RATE</span><span class=\"p\">,</span>\n                <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">frames_per_buffer</span><span class=\"o\">=</span><span class=\"n\">CHUNK</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;* recording&#34;</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">RATE</span> <span class=\"o\">/</span> <span class=\"n\">CHUNK</span> <span class=\"o\">*</span> <span class=\"n\">RECORD_SECONDS</span><span class=\"p\">)):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">CHUNK</span><span class=\"p\">,</span> <span class=\"n\">exception_on_overflow</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Producer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;* done recording&#34;</span><span class=\"p\">)</span>\n\n<span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">stop_stream</span><span class=\"p\">()</span>\n<span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 消费者从队列 Q 得到一批（4096个）音频数据样本，并定义一个流水线函数 Pipeline 处理每一批音频数据。</b></p><p>流水线包括以下处理步骤：</p><ol><li>将该批次 4096 个音频数据样本转换为整型数组 waveData，然后分离音频数据左右通道 waveData[0] 和 waveData[1]</li><li>将 4096 个音频数据样本按每次迭代 1024 个（waveDataUnit）分批循环处理，这样做的原因是尽可能检测短时音频的频率，短时音频的频率才是有意义的结果。</li><li>将 1024 个数据样本（waveDataUnit）做快速傅里叶变换（FFT），得到一组 512 个一般人看不懂的傅里叶变换数据 FFT_DATA，以及一组 512 个频率数据 frequency。</li><li>定义一个全局数组 WAVE_DATA 时序保存所有音频数据样本，并始终保持 WAVE_DATA 最多只保存最近 5 秒采集到的音频数据，这样可以节省内存空间并提高计算速度。</li><li>执行音符检测算法函数 pitchDetect（稍后详细分解），通过分析频率数据 frequency，返回分析出的主音（pitchName），置信度（pitchConfidence），损失值（pitchLoss）。置信度用来表示该音的靠谱程度，损失值用来表示该音的不靠谱程度。</li><li>定义一个全局数组 LIVE_DATA 时序保存所有检测出的音符结果数据。</li><li>执行总谱检索算法函数 pitchScoreMatch，对检测到的时序音符数据 LIVE_DATA 和预先定义好的总谱数据（MuseScore 播放的总谱）进行即时匹配。</li></ol><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">def</span> <span class=\"nf\">pipeline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Consumer Pipeline:&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n    <span class=\"n\">waveData</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int16</span><span class=\"p\">)</span> <span class=\"c1\">### 1</span>\n    <span class=\"n\">waveData</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n    <span class=\"n\">waveData</span> <span class=\"o\">=</span> <span class=\"n\">waveData</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n    <span class=\"k\">global</span> <span class=\"n\">TIME</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">TIME</span><span class=\"p\">):</span> <span class=\"c1\">### 2</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">CHUNK_UNIT</span> <span class=\"o\">*</span> <span class=\"n\">i</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">CHUNK_UNIT</span>\n        <span class=\"n\">waveDataUnit</span> <span class=\"o\">=</span> <span class=\"n\">waveData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"n\">end</span><span class=\"p\">]</span>\n\n        <span class=\"k\">global</span> <span class=\"n\">FFT_DATA</span><span class=\"p\">,</span> <span class=\"n\">FFT_DATA2</span>\n        <span class=\"n\">FFT_DATA2</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">frequency2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fft2</span><span class=\"p\">(</span><span class=\"n\">waveDataUnit</span><span class=\"p\">)</span> <span class=\"c1\">### 3</span>\n\n        <span class=\"k\">global</span> <span class=\"n\">WAVE_DATA</span>\n        <span class=\"n\">WAVE_DATA</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">WAVE_DATA</span><span class=\"p\">,</span> <span class=\"n\">waveDataUnit</span><span class=\"p\">))</span> <span class=\"c1\">### 4</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">WAVE_DATA</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">RATE</span> <span class=\"o\">*</span> <span class=\"n\">PLOT_XLIM</span><span class=\"p\">:</span>\n            <span class=\"n\">WAVE_DATA</span> <span class=\"o\">=</span> <span class=\"n\">WAVE_DATA</span><span class=\"p\">[</span><span class=\"n\">CHUNK_UNIT</span><span class=\"p\">:]</span>\n\n        <span class=\"n\">pitchName</span><span class=\"p\">,</span> <span class=\"n\">pitchConfidence</span><span class=\"p\">,</span> <span class=\"n\">pitchLoss</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pitchDetect</span><span class=\"p\">(</span>\n            <span class=\"n\">frequency2</span><span class=\"p\">,</span> <span class=\"n\">numPitch</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">### 5</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">pitchConfidence</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n            <span class=\"n\">pitchName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;No&#39;</span>\n\n        <span class=\"k\">global</span> <span class=\"n\">LIVE_DATA</span>\n        <span class=\"n\">LIVE_DATA</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">LIVE_DATA</span><span class=\"p\">,</span> <span class=\"n\">pitchName</span><span class=\"p\">)</span> <span class=\"c1\">### 6</span>\n\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pitchScoreMatch</span><span class=\"p\">()</span> <span class=\"c1\">### 7</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: 检测算法升级</b></h2><p>这一部分我们就开始详细分析泛音的检测，PO主再说明一下算法并非完美，仍有很大优化空间，希望可以抛砖引玉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们定义了一个音符检测算法函数 pitchDetect，向函数输入一组检测到的频率数据freqData（即是 PART 3 的 frequency）:</p><div class=\"highlight\"><pre><code class=\"language-text\">def pitchDetect(self, freqData, numPitch=1):</code></pre></div><p>依次通过以下 5 个步骤来计算这组频率的主音。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 1: 定义标准音泛音频率矩阵</b></p><p>首先我们使用最常用到的三个八度空间 C3~B3, C4~B4, C5~B5，一共 36 个标准半音音符作为矩阵第一个维度，取每一个半音的 n 个泛音作为矩阵的第二个维度，构建一个形状为 (36,n) 的二维矩阵。（玩家也可以构建全部 88 个半音，形状为 (88,n) 的二维矩阵）</p><blockquote><i>这里使用了 Python 的 music21 类库，freqHarmonicArray 为标准音泛音频率矩阵</i></blockquote><div class=\"highlight\"><pre><code class=\"language-text\">def preparePitchHarmonicFrequency(self, numHarmonic=10):\n    pitchNameList = []\n    freqHarmonicArray = np.array([])\n\n    useScale = music21.scale.ChromaticScale(&#39;C3&#39;)\n    for p in useScale.pitches:\n        if p.nameWithOctave == &#39;C4&#39;:\n            continue\n\n        pitchNameList.append(p.nameWithOctave)\n        freqFundamental = p.frequency\n        freqsHarmonic = list()\n        for i in range(numHarmonic):\n            freqsHarmonic.append(freqFundamental * (i + 1))\n        freqHarmonicArray = np.append(\n            freqHarmonicArray, np.array(freqsHarmonic), axis=0)\n\n    useScale = music21.scale.ChromaticScale(&#39;C4&#39;)\n    for p in useScale.pitches:\n        if p.nameWithOctave == &#39;C5&#39;:\n            continue\n\n        pitchNameList.append(p.nameWithOctave)\n        freqFundamental = p.frequency\n        freqsHarmonic = list()\n        for i in range(numHarmonic):\n            freqsHarmonic.append(freqFundamental * (i + 1))\n        freqHarmonicArray = np.append(\n            freqHarmonicArray, np.array(freqsHarmonic), axis=0)\n\n    useScale = music21.scale.ChromaticScale(&#39;C5&#39;)\n    for p in useScale.pitches:\n        if p.nameWithOctave == &#39;C6&#39;:\n            continue\n\n        pitchNameList.append(p.nameWithOctave)\n        freqFundamental = p.frequency\n        freqsHarmonic = list()\n        for i in range(numHarmonic):\n            freqsHarmonic.append(freqFundamental * (i + 1))\n        freqHarmonicArray = np.append(\n            freqHarmonicArray, np.array(freqsHarmonic), axis=0)\n\n    freqHarmonicArray.shape = (-1, numHarmonic)\n    return pitchNameList, freqHarmonicArray</code></pre></div><p>这里我们打印前 5 个标准音（C3, C#3, D3, D#3, E3）的泛音频率矩阵，让玩家们直观理解</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-895bea537f9c7bb07a44b1897d9d1295_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb\" width=\"1320\" data-original=\"https://pic2.zhimg.com/v2-895bea537f9c7bb07a44b1897d9d1295_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1320&#39; height=&#39;624&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1320\" data-original=\"https://pic2.zhimg.com/v2-895bea537f9c7bb07a44b1897d9d1295_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-895bea537f9c7bb07a44b1897d9d1295_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 计算泛音权值矩阵</b></p><p>对输入的每个检测频率进行以下计算：</p><ol><li>将检测频率与标准音泛音频率矩阵进行除法计算，得到检测频率与标准频率的偏差百分比矩阵。</li><li>将权值 (weight = 1) 赋予偏差在 2% (lossThreshold)  以内的标准频率，认为该标准频率被检测到 1 次，得到单个检测频率的泛音权值矩阵 result。</li><li>将所有检测频率的泛音权值矩阵求和，得到输入频率数组的泛音权值矩阵 resultSum。</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">lossThreshold = 0.02\nweight = 1\nresultSum = np.zeros_like(self.freqHarmonicArray)\n\nfor freq in freqData:\n    result = self.freqHarmonicArray / freq\n    result = np.abs(result - 1)\n    result[result &gt; lossThreshold] = 0\n    result[result &gt; 0] += weight\n    resultSum += result</code></pre></div><p>因篇幅有限，这里仅打印每个检测频率的第一个标准音 C3 （result[0:1]）的泛音权值矩阵：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-727273b5e6aa2d75b3954cddc54046aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1474\" data-rawheight=\"1476\" class=\"origin_image zh-lightbox-thumb\" width=\"1474\" data-original=\"https://pic3.zhimg.com/v2-727273b5e6aa2d75b3954cddc54046aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1474&#39; height=&#39;1476&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1474\" data-rawheight=\"1476\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1474\" data-original=\"https://pic3.zhimg.com/v2-727273b5e6aa2d75b3954cddc54046aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-727273b5e6aa2d75b3954cddc54046aa_b.jpg\"/></figure><p>再打印一下所有检测频率求和后的最终泛音权值矩阵，图中标注了其中某三个标准音C3, G3, G4：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-97e413569bea54671645c3f19b1f2a72_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"851\" class=\"origin_image zh-lightbox-thumb\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-97e413569bea54671645c3f19b1f2a72_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;739&#39; height=&#39;851&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"851\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-97e413569bea54671645c3f19b1f2a72_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-97e413569bea54671645c3f19b1f2a72_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 对泛音权值矩阵第一维求和，每个标准音计算出一个数值</b></p><div class=\"highlight\"><pre><code class=\"language-text\">pitchConfidenceSumArray = np.sum(resultSum, axis=1)</code></pre></div><p>通过打印结果，我们已经可以初步看到检测出哪几个标准音及其泛音共振较高了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d64c2fe17248f45c796bd19d8d738af7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"110\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic4.zhimg.com/v2-d64c2fe17248f45c796bd19d8d738af7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;653&#39; height=&#39;110&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"110\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"653\" data-original=\"https://pic4.zhimg.com/v2-d64c2fe17248f45c796bd19d8d738af7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d64c2fe17248f45c796bd19d8d738af7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 4: 计算置信度和损失值</b></p><p>使用 numpy.modf 函数将整数和小数分离，整数部分是权值和，小数部分是偏差和。这里简单的将置信度赋值权值和，损失值赋值平均偏差即可。</p><div class=\"highlight\"><pre><code class=\"language-text\">pitchCostArray, pitchConfidenceArray = np.modf(pitchConfidenceSumArray)\npitchLossArray = np.zeros_like(pitchCostArray)\npitchLossArray[pitchCostArray&gt;0] = pitchCostArray[pitchCostArray&gt;0] / pitchConfidenceArray[pitchCostArray&gt;0] * 100.0</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f8fc2e7bbb9f06954f577ffc9888b5b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic2.zhimg.com/v2-f8fc2e7bbb9f06954f577ffc9888b5b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;178&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic2.zhimg.com/v2-f8fc2e7bbb9f06954f577ffc9888b5b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f8fc2e7bbb9f06954f577ffc9888b5b5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 5: 注意力系数</b></p><p>我们已知泛音频率约等于基频的整数倍，我们又已知差一个八度的两个音其频率值也差一倍。</p><p>通过以上打印结果我们确实可以观察到这两个已知事实：</p><ol><li>泛音权值矩阵命中了 G3 第一、三、五、七、九泛音（共 5 个），G3 的置信度为 5</li><li>泛音权值矩阵命中了 G4 的基频、第一、二、三、四、五、六、八泛音（共 7 个），G4 的置信度为 7</li><li>G3 第一、三、五、七、九泛音频率分别等于 G4 的基频、第一、二、三、四、五泛音的频率</li></ol><p>为了进一步提高这段音频主音结果是 G4 的正确率，我们定义了一个 <b>注意力系数</b>，用来检测单个标准音的连续递增泛音值。并将 <b>置信度矩阵 </b>与 <b>注意力系数矩阵 </b>相乘，得到最终 <b>置信度矩阵</b>。</p><div class=\"highlight\"><pre><code class=\"language-text\">pitchConfidenceAttention = list()\nnumPitch, numHaronic = resultSum.shape\nfor i in range(numPitch):\n    attention = 0\n    attentionMax = 0\n    for j in range(numHaronic):\n        if resultSum[i][j] &gt; 0:\n            attention += 1\n        else:\n            if attention &gt; attentionMax:\n                attentionMax = attention\n            attention = 0\n\n    if attention &gt; attentionMax:\n        attentionMax = attention\n    pitchConfidenceAttention.append(attentionMax)\npitchConfidenceArray = pitchConfidenceArray * np.array(pitchConfidenceAttention)</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-27db96a6621a74ed0f4cb674c013f3f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"820\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb\" width=\"820\" data-original=\"https://pic1.zhimg.com/v2-27db96a6621a74ed0f4cb674c013f3f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;820&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"820\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"820\" data-original=\"https://pic1.zhimg.com/v2-27db96a6621a74ed0f4cb674c013f3f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-27db96a6621a74ed0f4cb674c013f3f8_b.jpg\"/></figure><p>很明显在这段样本中，G3 没有出现连续泛音（第一、三、五、七、九泛音），而 G4 出现了连续递增泛音（第一、二、三、四、五、六泛音）。</p><p>于是可以计算出 G3 的注意力系数为 1，G4的注意力系数为 6，在两个矩阵相乘后，最终选出置信度最大值 42 所对应音 G4。</p><div class=\"highlight\"><pre><code class=\"language-text\">idx = np.argmax(pitchConfidenceArray)\n\npitchName = self.pitchNameList[idx]\npitchConfidence = pitchConfidenceArray[idx]\npitchLoss = pitchLossArray[idx]</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 5: PyQt</b></h2><p>最后，我们使用 PyQt 给 Beta 版做一个 UI。</p><p><b>Step 1: 定义一个 PlotCanvas 类显示音频时域和频率图形</b></p><div class=\"highlight\"><pre><code class=\"language-text\">self.m = PlotCanvas(self, width=8, height=6)\nself.m.move(0, 0)\n\nclass PlotCanvas(FigureCanvas):\n\n    def __init__(self, parent=None, width=8, height=6, dpi=100):\n        fig, (self.ax1, self.ax2, self.ax3) = plt.subplots(3, figsize=(width, height), dpi=dpi)\n\n        FigureCanvas.__init__(self, fig)\n        self.setParent(parent)\n\n        FigureCanvas.setSizePolicy(self,\n                                   QSizePolicy.Expanding,\n                                   QSizePolicy.Expanding)\n        FigureCanvas.updateGeometry(self)\n        self.plot()\n\n    def plot(self):\n        self.plotChunk = 1024\n        self.plotYlim = 10000\n\n        x = np.arange(0, self.plotChunk, 1)\n        x_fft2 = np.linspace(0, RATE, CHUNK_UNIT / 2)\n        x_fft = np.arange(0, RATE, 2)\n\n        self.ax1.set_title(&#39;Wave&#39;)\n        self.ax1.set_xlim(0, self.plotChunk)\n        self.ax1.set_ylim(-self.plotYlim, self.plotYlim)\n        self.line1, = self.ax1.plot(x, np.zeros_like(x))\n\n        self.ax2.set_title(&#39;FFT2&#39;)\n        self.ax2.set_xlim(20, RATE / 2)\n        self.line2, = self.ax2.plot(x_fft2, np.zeros_like(x_fft2))\n\n        self.ax3.set_title(&#39;FFT&#39;)\n        self.ax3.set_xlim(20, RATE / 2)\n        self.line3, = self.ax3.plot(x_fft, np.zeros_like(x_fft))\n\n        self.draw()</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 定义三个 QLabel 分别显示 Measure、Beat、Pitch</b></p><div class=\"highlight\"><pre><code class=\"language-text\">self.label1 = QLabel(&#39;Measure:&#39;, self)\nself.label1.setTextFormat(Qt.RichText)\nself.label1.move(50, 630)\nself.label1.setMinimumWidth(200)\nself.label1.setText(&#39;&lt;font color=&#34;red&#34; size=&#34;20&#34;&gt;Measure: 0&lt;/font&gt;&#39;)\n\nself.label2 = QLabel(&#39;Beat:&#39;, self)\nself.label2.setTextFormat(Qt.RichText)\nself.label2.move(300, 630)\nself.label2.setMinimumWidth(200)\nself.label2.setText(&#39;&lt;font color=&#34;green&#34; size=&#34;20&#34;&gt;Beat: 0&lt;/font&gt;&#39;)\n\nself.label3 = QLabel(&#39;Pitch:&#39;, self)\nself.label3.setTextFormat(Qt.RichText)\nself.label3.move(550, 630)\nself.label3.setMinimumWidth(200)\nself.label3.setText(&#39;&lt;font color=&#34;blue&#34; size=&#34;20&#34;&gt;Pitch: &lt;/font&gt;&#39;)</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 定义一个定时器 QTimer，每 0.1 秒更新数据图形和 QLabel</b></p><div class=\"highlight\"><pre><code class=\"language-text\">self.timer = QTimer(self)  # 初始化一个定时器\nself.timer.timeout.connect(self.on_timer)  # 计时结束调用operate()方法\nself.timer.start(0.1)  # 设置计时间隔并启动\n\ndef on_timer(self):\n    # print(&#39;Timer&#39;)\n    self.refreshPitch()\n    self.m.refresh()</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART Final: Do it your self</b></h2><p>最后关于总谱检索算法函数 pitchScoreMatch 的实现，各位玩家不如自行思考一下如何实现，最后献上<a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1VR9hze3ykoZKTvc0K2dT9Q\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">本文源代码</a>抛砖引玉。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "音乐检索", 
                    "tagLink": "https://api.zhihu.com/topics/19663980"
                }, 
                {
                    "tag": "音频处理", 
                    "tagLink": "https://api.zhihu.com/topics/19786874"
                }, 
                {
                    "tag": "音乐识别", 
                    "tagLink": "https://api.zhihu.com/topics/19609289"
                }
            ], 
            "comments": [
                {
                    "userName": "长岛雪", 
                    "userLink": "https://www.zhihu.com/people/e39cb70983ba75c3c936c7520b3e6d9d", 
                    "content": "<p>学习了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Hubert", 
                    "userLink": "https://www.zhihu.com/people/3745c2816d710c9750b5556d364ac083", 
                    "content": "<p>太牛逼了啊啊啊</p><p></p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34433387", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 11, 
            "title": "5分钟GET音乐检索 - 音乐和编程", 
            "content": "<p>本文攻略：使用计算机技术识别并检索音乐，科普乐理零基础</p><p>建议玩家等级：音乐党，发烧友，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点乐理基础</li><li>一点点 Python 基础</li></ol><p>实践此文推荐装备：</p><ol><li>Python 版本：3.6</li><li>编程软件：Jupyter Notebook</li><li>音乐软件：MuseScore</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 引言</b></h2><p>PO 主最近接到了一个比较有挑战性且有意思的任务。听过音乐会的同学都知道因为现场指挥的心情和风格是一个极不可控的因素，所以同一个章节每次演绎的时长都是不同的，而这次任务目标就是要写一个程序能自动识别音乐会现场演奏音乐的进度，并根据当前进度实时控制灯光和画面等其他视觉效果。</p><p>我们首先把任务程序拆解成两大部分：第一部分负责识别音乐，第二部分负责控制灯光画面。很显然控制灯光画面部分只需要调用相关接口就能实现，并没有什么难度。我们这个系列重点要讲的是第一部分也是核心部分，识别音乐。</p><p>在 PART 2 开始之前，PO 主先普及一下之后我们需要用到工具：</p><ol><li>MuseScore：一款可以编辑五线谱的打谱软件。优点是免费，Mac和Win都支持。</li><li>Jupyter Notebook：一款 Python 开发工具。</li><li>Music21：一款 Python 音乐开发库，架起了音乐和编程之间的友谊桥梁，类似的还有 Mingus。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 优美的乐理</b></h2><p>在我们开始识别音乐前，先花时间学习一下什么是音乐。这一章节对程序猿来说是音乐入门课，对音乐党来说是编程入门课，每一位玩家请确保自己同时掌握了基础的乐理和编程。</p><p>PO 主差不多花了两天时间才看完 Music21 所有的文档（然而作者的文档也才写了一半），并重新复习已经丢了 20 年的乐理，在这里做一个最简洁通俗的总结：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ef46ba325c96ff2638901a97261a9713_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2356\" data-rawheight=\"1164\" class=\"origin_image zh-lightbox-thumb\" width=\"2356\" data-original=\"https://pic4.zhimg.com/v2-ef46ba325c96ff2638901a97261a9713_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2356&#39; height=&#39;1164&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2356\" data-rawheight=\"1164\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2356\" data-original=\"https://pic4.zhimg.com/v2-ef46ba325c96ff2638901a97261a9713_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ef46ba325c96ff2638901a97261a9713_b.jpg\"/></figure><p><b>总谱：Score</b>。</p><p><b>分谱：Part</b>。例如女高音、男高音、钢琴、小提琴等各个部分都有各自的谱子。</p><p><b>小节：Measure</b>。</p><p><b>调号：KeySignature</b>。升调记为♯，降调记为♭。这个记号就是通常说的什么大调，什么小调。</p><p><b>拍号：TimeSignature</b>。这个记号就是通常说的2/4拍、3/4拍、4/4拍。拿2/4拍举例，4分音符为一拍，每小节2拍。</p><p><b>音符：Note</b>。就是我们平时唱的 do re mi fa so la si do，用国际标准输写就是 C4 D4 E4 F4 G4 A4 B4 C5，C5 比 C4 高一个<b>八度（Octave）</b>。最常见的有16分音符、8分音符、4分音符、2分音符、全音符。</p><p><b>时值：Duration</b>。16分音符0.0625，8分音符0.125，4分音符0.25，2分音符0.5，全音符1</p><p>乐理部分还有很多很多需要学习的地方，这里罗列的只是非常基础但必需的部分。</p><p>另外找了一张 Music21 官方提供的图片，非常到位地概括了一个音乐对象通常在程序中的层级结构：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-90a0d12adbd0896b80c3440ae9c1b8ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"872\" data-original=\"https://pic2.zhimg.com/v2-90a0d12adbd0896b80c3440ae9c1b8ad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;872&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"872\" data-original=\"https://pic2.zhimg.com/v2-90a0d12adbd0896b80c3440ae9c1b8ad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-90a0d12adbd0896b80c3440ae9c1b8ad_b.jpg\"/></figure><blockquote><i>m 表示 measure，clef 表示 谱号，4/4 表示 拍号，q 表示 4分音符 (quarter)，h 表示 2分音符 (half)</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 时域和频域</b></h2><p>接下来我们再来学习一下时域和频域，这两个又是什么鬼？PO 主不知道专业学习乐理的同学是否学习过这两个鬼，反正我们学计算机的同学压根没学过，不过既然说了要学就得先告知同学们为什么得学。</p><p>我们都知道 do re mi 怎么唱：</p><ol><li>用常理解释，大家都知道，mi 比 do 高2个音</li><li>用乐理解释，mi 比 do 高 4 个“半音”</li><li>用科学解释，mi 比 do 高 68Hz。Hz(赫兹) 代表了声波 1 秒钟振动的次数，可不是租车公司噢。</li></ol><p>有了科学解释，我们就很容易理解每个音其实都是一个标准频率，音越高就意味着频率越高。不管是钢琴弹出的 do，还是小提琴拉出的 do，或是周杰伦唱出的 do，这个 do 都是同一个 do，有同一个频率值 262Hz。</p><p>所以我们把音乐识别问题就自然转化成了频率识别问题，我们的目标是提取一段音乐里一共出现过多少个不同频率值的信号，也就代表了有多少个不同的音符。</p><p>继续说回时域和频率，我们通常拿到一段音乐音频，这张图就是该音频时域的样子：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7b62efa43524597582f7f08d49ffe104_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2359\" data-rawheight=\"527\" class=\"origin_image zh-lightbox-thumb\" width=\"2359\" data-original=\"https://pic1.zhimg.com/v2-7b62efa43524597582f7f08d49ffe104_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2359&#39; height=&#39;527&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2359\" data-rawheight=\"527\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2359\" data-original=\"https://pic1.zhimg.com/v2-7b62efa43524597582f7f08d49ffe104_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7b62efa43524597582f7f08d49ffe104_b.jpg\"/></figure><blockquote><i>x轴表示时间，y轴表示采样点幅度值（并不是频率值），通常 1 秒钟采样 44100 个点，图中显示了一秒采样数据</i></blockquote><p>但我们需要知道这段音乐音频里有哪些频率（音），就必须得看看该音频频域的样子：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c9d2bb950596071dda5fb9691f006986_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2395\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"2395\" data-original=\"https://pic3.zhimg.com/v2-c9d2bb950596071dda5fb9691f006986_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2395&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2395\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2395\" data-original=\"https://pic3.zhimg.com/v2-c9d2bb950596071dda5fb9691f006986_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c9d2bb950596071dda5fb9691f006986_b.jpg\"/></figure><blockquote><i>x轴表示频率范围，y轴表示频率强弱值</i></blockquote><p>显然从时域图中我们几乎看不出这段音乐里有什么东西，但是换到频域图一目了然有 1 个很明显的频率（音符）落在了0~1KHz区域，这很有可能就是这段音乐的主音符。</p><p>PART 3 最后发一张时域和频域的合影，它们只是从 2 个不同的角度观察了同一段音乐 :</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a3df5e98627e943cf5d0029eab66fc14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a3df5e98627e943cf5d0029eab66fc14_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;433&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a3df5e98627e943cf5d0029eab66fc14_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a3df5e98627e943cf5d0029eab66fc14_b.jpg\"/></figure><blockquote><i>关于时域和频域更深刻的理解，可以穿越去 <a href=\"https://zhuanlan.zhihu.com/p/19763358\" class=\"internal\">这篇文章</a>，合影图片也是引用自这篇文章，感谢这位作者的知识分享</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: 傅里叶变换</b></h2><p>还没到撸代码环节，等 PO 主再介绍最后一个鬼，傅里叶变换。</p><p>通过 PART 3 我们了解到了：</p><ol><li>我们通常拿到的音乐是 <b>时域数据</b></li><li>我们需要将 <b>时域数据 </b>转换为 <b>频域数据</b></li><li>我们最终从 <b>频域数据 </b>中获得音乐的频率</li></ol><p><b>傅里叶变换 </b>就是帮助我们实现时域数据向频域数据转换的伟大发现，学过高数的同学应该都对傅里叶同学的大名如(hen)雷(zhi)贯(ru)耳(gu)了吧。</p><p>关于傅里叶变换是什么，为什么能这么牛逼这类问题，背后依然有很多很多高等数学的理论知识需要补习，PO 主并不打算也没能力解释清楚了。</p><blockquote><i>关于傅里叶变换更深刻的理解，依然可以穿越去 <a href=\"https://zhuanlan.zhihu.com/p/19763358\" class=\"internal\">这篇文章</a>，第二次为这位作者打电话</i></blockquote><p>傅里叶变换根据不同问题有很多衍生，我们常用到的是其中一种叫 <b>快速傅里叶变换（FFT）</b>的方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 5: Make your hands dirty</b></h2><p>终于到了撸代码的环节，在撸代码之前先自己动手配置好环境：</p><ol><li>建议使用 Python v3.6</li><li>成功安装 Numpy, Scipy, Matplotlib, Music21 开发库</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 1: 读取并显示音频文件参数</b></p><p>PO 主自己剪辑了一段很短的 wav 格式音频文件，打印音频信息可以看到采样率是标准的 44100Hz，一共有 446535 个采样，声音包含左右 2 通道：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">wave</span>\n\n<span class=\"n\">readFile</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/wav/canon_2.wav&#39;</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">wave</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">readFile</span><span class=\"p\">,</span><span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">getparams</span><span class=\"p\">()</span>\n<span class=\"n\">nchannels</span><span class=\"p\">,</span> <span class=\"n\">sampwidth</span><span class=\"p\">,</span> <span class=\"n\">framerate</span><span class=\"p\">,</span> <span class=\"n\">nframes</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span></code></pre></div><blockquote><i>_wave_params(nchannels=2, sampwidth=2, framerate=44100, nframes=446535, comptype=&#39;NONE&#39;, compname=&#39;not compressed&#39;)</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 读取音频数据，并分离左右通道数据</b></p><p>此时分离好的音频数据为时域数据</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">strData</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readframes</span><span class=\"p\">(</span><span class=\"n\">nframes</span><span class=\"p\">)</span> <span class=\"c1\">#读取音频，字符串格式</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">waveData</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"n\">strData</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int16</span><span class=\"p\">)</span> <span class=\"c1\">#将字符串转化为int</span>\n\n<span class=\"n\">waveData</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span>\n<span class=\"n\">waveData</span> <span class=\"o\">=</span> <span class=\"n\">waveData</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;waveData:&#39;</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">waveData</span><span class=\"p\">),</span> <span class=\"n\">waveData</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">waveData</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">waveData</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">waveData</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;waveData left:&#39;</span><span class=\"p\">,</span> <span class=\"n\">waveData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;waveData right:&#39;</span><span class=\"p\">,</span> <span class=\"n\">waveData</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 时域转频域算法实现</b></p><p>定义一个函数，输入为时域数据，输出为频域数据。</p><p>这里自然用到了快速傅里叶变换 FFT，算法除了计算 FFT 之外还做了一些数据变换的步骤。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">def</span> <span class=\"nf\">getFrequencies</span><span class=\"p\">(</span><span class=\"n\">recordedSignal</span><span class=\"p\">,</span> <span class=\"n\">recordSampleRateIn</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recordedSignal</span><span class=\"p\">)</span>\n    <span class=\"n\">nUniquePts</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.0</span><span class=\"p\">))</span>\n    \n    <span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">recordedSignal</span><span class=\"p\">)</span>\n    <span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">fft</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">nUniquePts</span><span class=\"p\">]</span>\n    <span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)</span>\n    <span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">fft</span> <span class=\"o\">/</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">fft</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n    <span class=\"c1\"># odd nfft excludes Nyquist point</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"c1\"># we&#39;ve got odd number of points fft</span>\n        <span class=\"n\">fft</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">fft</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">fft</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fft</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"c1\"># we&#39;ve got even number of points fft</span>\n\n    <span class=\"n\">freqMaxIdx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)</span>\n    <span class=\"n\">freqs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nUniquePts</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">44100</span><span class=\"o\">*</span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;rms:&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">(</span><span class=\"n\">recordedSignal</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">freqs</span><span class=\"p\">[</span><span class=\"n\">freqMaxIdx</span><span class=\"p\">]</span></code></pre></div><blockquote><i>通过傅里叶变换计算频率的算法，搜遍百度无果后在 Google 上才找到了比较靠谱清楚的算法实现并将其搬砖封装，希望以后可以让有需要的同学方便使用。</i> <i>算法中会输出 rms (root mean square) 计算两个值，用于检验我们的算法准确性。如果两个值几乎相等，则可以证明该算法结果非常靠谱。</i> <i>贴上<a href=\"https://link.zhihu.com/?target=http%3A//samcarcagno.altervista.org/blog/basic-sound-processing-python/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法原作地址</a>，供大家学习。</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 4: 分析音频</b></p><p>时域转频域算法实现后，我们就测试音频吧，再对返回的频率值进行标准音频率规范化，就知道是哪个音了。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">from</span> <span class=\"nn\">music21</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">recordedSignal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">waveData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">framerate</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">framerate</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">getFrequencies</span><span class=\"p\">(</span><span class=\"n\">recordedSignal</span><span class=\"p\">,</span> <span class=\"n\">framerate</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;freq:&#39;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"p\">)</span>\n\n<span class=\"n\">pitchesList</span> <span class=\"o\">=</span> <span class=\"n\">audioSearch</span><span class=\"o\">.</span><span class=\"n\">detectPitchFrequencies</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">freq</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pitchesList:&#39;</span><span class=\"p\">,</span> <span class=\"n\">pitchesList</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">detectedPitches</span><span class=\"p\">,</span> <span class=\"n\">listplot</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">audioSearch</span><span class=\"o\">.</span><span class=\"n\">pitchFrequenciesToObjects</span><span class=\"p\">(</span><span class=\"n\">pitchesList</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;detectedPitches:&#39;</span><span class=\"p\">,</span> <span class=\"n\">detectedPitches</span><span class=\"p\">)</span></code></pre></div><blockquote><i>freq: 495.0</i> <i>pitchesList: 493.8833012561241</i> <i>detectedPitches: &lt;music21.pitch.Pitch B4&gt;</i></blockquote><p>这里检测出来这段音频的主音是B4</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>Part Final: Do it your self</b></h2><p>正所谓万事开头难，费了老大劲总算能检测出音乐的频率了。接下来 PO主要忙于去实现音乐识别逻辑，下一期和大家分享更多成果，玩家也可以自己 <a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1P2C1DtsQvpJ5PVaj-DqO8A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载本文源代码</a> 亲并自动手写一些关于音乐的程序吧。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "音乐识别", 
                    "tagLink": "https://api.zhihu.com/topics/19609289"
                }, 
                {
                    "tag": "音频处理", 
                    "tagLink": "https://api.zhihu.com/topics/19786874"
                }, 
                {
                    "tag": "音乐检索", 
                    "tagLink": "https://api.zhihu.com/topics/19663980"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>啊~音乐会演奏的音乐在时刻t如果有不止一个主音怎么办？另外po主好博学，我是从tendermint看过来的。。嗯，似乎也有办法，在频域图里有多条线。哎，高数都忘光了。。什么工作可以天天玩这些好玩的东西，求介绍。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Hubert", 
                    "userLink": "https://www.zhihu.com/people/3745c2816d710c9750b5556d364ac083", 
                    "content": "<p>通信的孩子表示信号处理，编程都在行，音乐不太得hhh。博主牛逼！</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33639313", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 1, 
            "title": "5分钟GET AI - 写一款更聪明的 iOS App", 
            "content": "<p>本文攻略：使用计算机视觉和AI技术，开发一个能自动识别物体的 iOS App</p><p>建议玩家等级：YOLO 基础，中级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>Swift 基础  <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/swift/swift-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学一学这门出身名门的语言</a></li><li>Object-C 基础  <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/w3cnote/objective-c-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学一学这门不受人待见的语言</a></li><li>使用 Xcode 完成 Hello World</li><li>YOLO 基础（一）：<a href=\"https://zhuanlan.zhihu.com/p/32097670\" class=\"internal\">5分钟学会AI - How to use YOLO with python</a></li><li>YOLO 基础（二）：<a href=\"https://zhuanlan.zhihu.com/p/32172286\" class=\"internal\">5分钟学会AI - How YOLO only look once</a></li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra 10.12.6+</li><li>IDE：Xcode 9.2+</li><li>设备：iPhone/iPad一部，运行 iOS 11.0+</li><li>苹果开发者账号一个（每年按时交99美刀开发税的账号）</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 产品思维驱动开发</b></h2><p>本期将接着上一篇的阶段性成果 <a href=\"https://zhuanlan.zhihu.com/p/33376737\" class=\"internal\">5分钟学会AI - 写一款聪明的 iOS App</a>，继续打造这款聪明的 iOS APP。回顾一下上一篇我们提到了三个目标，并已经实现了其中两点：</p><ol><li>识别清晰度（Finish）</li><li>识别物体（Finish）</li><li>当被识别的指定物体位于中间，并且足够清晰时，自动按下快门保存照片（TODO）</li></ol><p>然鹅，产品思维这两天又开始作祟，促使PO主无意识的写下了两个新的需求：</p><ol><li>提供两个可手动调节阈值参数的交互，分别调节清晰值和物体识别置信度，当且仅当两个阈值都满足时，APP 自动拍照（TODO）</li><li>拍完的照片可以进行常规手势操作，双指缩放+单指移动（TODO）</li><li>挑战：是否可以做到更聪明，例如准确定位物体（TODO）</li></ol><p>话不多说，接下来带大家跪着填完自己挖的坑。</p><p>撸代码前，依旧是老样子先上成果图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42bda5523edb206db65e8cc7718a75fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1529\" data-rawheight=\"1358\" class=\"origin_image zh-lightbox-thumb\" width=\"1529\" data-original=\"https://pic1.zhimg.com/v2-42bda5523edb206db65e8cc7718a75fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1529&#39; height=&#39;1358&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1529\" data-rawheight=\"1358\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1529\" data-original=\"https://pic1.zhimg.com/v2-42bda5523edb206db65e8cc7718a75fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-42bda5523edb206db65e8cc7718a75fc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 聪明的 iOS APP</b></h2><p><b>Step 1: 自动拍照</b></p><p>我们先定义三个变量分别表示清晰度阈值、目标物体置信度阈值、当前视频帧图像数据（从视频流获取到的当前帧）</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">var</span> <span class=\"nv\">thresholdBlur</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"o\">!</span>\n<span class=\"kd\">var</span> <span class=\"nv\">thresholdPropability</span><span class=\"p\">:</span> <span class=\"nb\">Float</span><span class=\"o\">!</span>\n<span class=\"kd\">var</span> <span class=\"nv\">thresholdBest</span><span class=\"p\">:</span> <span class=\"n\">CVPixelBuffer</span><span class=\"o\">!</span></code></pre></div><p>然后判断当前视频帧图像数据 pixelBuffer 的清晰度，大于清晰度阈值 thresholdBlur 才会交给 AI 神经网络模型去检测物体置信度并将当前 pixelBuffer 赋值 thresholdBest，否则忽略 pixelBuffer</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"c1\">// 预测分类</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">opencv</span><span class=\"p\">.</span><span class=\"n\">blur</span> <span class=\"o\">&gt;=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdBlur</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdBest</span> <span class=\"p\">=</span> <span class=\"n\">pixelBuffer</span>\n    <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">predictClassification</span><span class=\"p\">(</span><span class=\"n\">pixelBuffer</span><span class=\"p\">:</span> <span class=\"n\">pixelBuffer</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p>最后我们需要筛选预测结果中是否有我们的检测目标（栗子里的检测目标物体是显示器“monitor”），并判断检测目标物体置信度（目标物体是显示器“monitor”的概率值），当置信度大于目标物体置信度阈值 thresholdPropability 时，将视频帧图像数据 thresholdBest 自动保存为照片，切换到新的场景显示该照片</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"k\">for</span> <span class=\"n\">classification</span> <span class=\"k\">in</span> <span class=\"n\">topClassifications</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">classification</span><span class=\"p\">.</span><span class=\"n\">identifier</span><span class=\"p\">.</span><span class=\"bp\">contains</span><span class=\"p\">(</span><span class=\"s\">&#34;monitor&#34;</span><span class=\"p\">)</span>\n    <span class=\"o\">&amp;&amp;</span> <span class=\"n\">classification</span><span class=\"p\">.</span><span class=\"n\">confidence</span> <span class=\"o\">&gt;=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdPropability</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"kd\">let</span> <span class=\"nv\">bestImage</span> <span class=\"p\">=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">getImageFromPixelBuffer</span><span class=\"p\">(</span><span class=\"n\">pixelBuffer</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdBest</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&#34;could not get UIImage from pixel buffer&#34;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">performSegue</span><span class=\"p\">(</span><span class=\"n\">withIdentifier</span><span class=\"p\">:</span> <span class=\"s\">&#34;CameraToBestImage&#34;</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">bestImage</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 照片操作</b></p><p>我们给拍好的照片添加缩放和位移手势，这部分逻辑实现很容易百度到：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">image</span> <span class=\"p\">=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">image</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"kd\">let</span> <span class=\"nv\">pinchGesture</span> <span class=\"p\">=</span> <span class=\"n\">UIPinchGestureRecognizer</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"k\">#selector</span><span class=\"p\">(</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">pinchGestureHandler</span><span class=\"p\">))</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">addGestureRecognizer</span><span class=\"p\">(</span><span class=\"n\">pinchGesture</span><span class=\"p\">)</span>\n\n<span class=\"kd\">let</span> <span class=\"nv\">panGesture</span> <span class=\"p\">=</span> <span class=\"n\">UIPanGestureRecognizer</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"k\">#selector</span><span class=\"p\">(</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">panGestureHandler</span><span class=\"p\">))</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">addGestureRecognizer</span><span class=\"p\">(</span><span class=\"n\">panGesture</span><span class=\"p\">)</span></code></pre></div><p>实现双指缩放手势：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kr\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">pinchGestureHandler</span><span class=\"p\">(</span><span class=\"n\">recognizer</span><span class=\"p\">:</span> <span class=\"n\">UIPinchGestureRecognizer</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">Void</span> <span class=\"p\">{</span>\n    <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">transform</span> <span class=\"p\">=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">scaledBy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"p\">==</span> <span class=\"p\">.</span><span class=\"n\">ended</span> <span class=\"p\">{</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span> <span class=\"p\">=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">a</span>\n        \n        <span class=\"k\">if</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.75</span> <span class=\"p\">{</span>\n            <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span> <span class=\"p\">=</span> <span class=\"mf\">0.75</span>\n            <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">transform</span> <span class=\"p\">=</span> <span class=\"n\">CGAffineTransform</span><span class=\"p\">.</span><span class=\"n\">identity</span><span class=\"p\">.</span><span class=\"n\">scaledBy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"p\">{</span>\n            <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span> <span class=\"p\">=</span> <span class=\"mi\">2</span>\n            <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">transform</span> <span class=\"p\">=</span> <span class=\"n\">CGAffineTransform</span><span class=\"p\">.</span><span class=\"n\">identity</span><span class=\"p\">.</span><span class=\"n\">scaledBy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">scale</span> <span class=\"p\">=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span></code></pre></div><p>实现单指位移手势：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kr\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">panGestureHandler</span><span class=\"p\">(</span><span class=\"n\">recognizer</span><span class=\"p\">:</span> <span class=\"n\">UIPanGestureRecognizer</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">Void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//拖拽的距离(距离是一个累加)</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">trans</span> <span class=\"p\">=</span> <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">translation</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"p\">:</span> <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">view</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">var</span> <span class=\"nv\">center</span> <span class=\"p\">=</span>  <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">center</span><span class=\"p\">;</span>\n    <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"n\">trans</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">;</span>\n    <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">+=</span> <span class=\"n\">trans</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">scale</span><span class=\"p\">;</span>\n    <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">center</span> <span class=\"p\">=</span> <span class=\"n\">center</span><span class=\"p\">;</span>\n    \n    <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">setTranslation</span><span class=\"p\">(</span><span class=\"n\">CGPoint</span><span class=\"p\">.</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"k\">in</span><span class=\"p\">:</span> <span class=\"n\">recognizer</span><span class=\"p\">.</span><span class=\"n\">view</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 阈值交互</b></p><p>还记得之前设置的清晰度阈值 thresholdBlur 和目标物体置信度阈值 thresholdPropability，我们需要使用一个常见的滑动条 UISlider 控制改变这两个阈值：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kr\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">sliderValueChanged</span><span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">Void</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">sliderValue</span> <span class=\"p\">=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">slider</span><span class=\"p\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">if</span> <span class=\"n\">sliderValue</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1.0</span> <span class=\"p\">{</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdBlur</span> <span class=\"p\">=</span> <span class=\"nb\">Int</span><span class=\"p\">(</span><span class=\"n\">sliderValue</span><span class=\"p\">)</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">labelThresholdKey</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">&#34;Blur 阈值:&#34;</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">labelThresholdValue</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdBlur</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdPropability</span> <span class=\"p\">=</span> <span class=\"n\">sliderValue</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">labelThresholdKey</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">&#34;Model 阈值:&#34;</span>\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">labelThresholdValue</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"p\">:</span> <span class=\"s\">&#34;%.2f&#34;</span><span class=\"p\">,</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">thresholdPropability</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>至此，我们完成了一个完整并聪明的iOS APP，但别忘了我们给自己立的Flag挑战。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 聪明过头的 iOS APP</b></h2><p>聪明的算法能告诉你这张图里有什么，更聪明的算法应该能告诉你这张图里有什么，并且在哪里。</p><p>是的没错，在这里就直接把两位物体检测 AI 大佬介绍给各位玩家，他们是 YOLO 和 SSD，本文我们先介绍如何使用 YOLO 模型。</p><blockquote><i>关于 YOLO 的具体介绍可以参考 <b>阅读此文先解锁技能</b>，本文将不做详解</i></blockquote><p>首先初始化 YOLO 模型，并仍然指定模型预测后回调的处理函数 predictDidComplete，注意 YOLO 模型的输入图像预处理需要使用 scaleFill 而非 centerCrop：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">let</span> <span class=\"nv\">model</span> <span class=\"p\">=</span> <span class=\"k\">try</span> <span class=\"n\">VNCoreMLModel</span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"p\">:</span> <span class=\"n\">TinyYOLO</span><span class=\"p\">().</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">classificationRequest</span> <span class=\"p\">=</span> <span class=\"n\">VNCoreMLRequest</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">completionHandler</span><span class=\"p\">:</span> <span class=\"n\">predictDidComplete</span><span class=\"p\">)</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">classificationRequest</span><span class=\"p\">.</span><span class=\"n\">imageCropAndScaleOption</span> <span class=\"p\">=</span> <span class=\"p\">.</span><span class=\"n\">scaleFill</span></code></pre></div><p>然后进行模型预测，和之前的模型预测并无区别：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">func</span> <span class=\"nf\">predictClassification</span><span class=\"p\">(</span><span class=\"n\">pixelBuffer</span><span class=\"p\">:</span> <span class=\"n\">CVPixelBuffer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">semaphore</span><span class=\"p\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n        \n    <span class=\"n\">DispatchQueue</span><span class=\"p\">.</span><span class=\"n\">global</span><span class=\"p\">(</span><span class=\"n\">qos</span><span class=\"p\">:</span> <span class=\"p\">.</span><span class=\"n\">userInitiated</span><span class=\"p\">).</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">handler</span> <span class=\"p\">=</span> <span class=\"n\">VNImageRequestHandler</span><span class=\"p\">(</span><span class=\"n\">cvPixelBuffer</span><span class=\"p\">:</span> <span class=\"n\">pixelBuffer</span><span class=\"p\">)</span>\n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"k\">try</span> <span class=\"n\">handler</span><span class=\"p\">.</span><span class=\"n\">perform</span><span class=\"p\">([</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">classificationRequest</span><span class=\"p\">])</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&#34;Failed to perform classification.</span><span class=\"se\">\\n</span><span class=\"si\">\\(</span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">localizedDescription</span><span class=\"si\">)</span><span class=\"s\">&#34;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>处理 YOLO 模型预测结果前，先科普一下 YOLO 预测结果的数据结构长什么样子：</p><ol><li>clssIndex：物体分类索引</li><li>score：物体分类置信度</li><li>rect：物体所在的位置坐标</li></ol><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">struct</span> <span class=\"nc\">Prediction</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">classIndex</span><span class=\"p\">:</span> <span class=\"nb\">Int</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">score</span><span class=\"p\">:</span> <span class=\"nb\">Float</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">rect</span><span class=\"p\">:</span> <span class=\"n\">CGRect</span>\n<span class=\"p\">}</span></code></pre></div><p>最后处理 YOLO 模型预测结果：</p><ol><li>YOLO 的结果数据类型是 VNCoreMLFeatureValueObservation，区别于其它模型结果类型 VNClassificationObservation</li><li>YOLO.computePredictions 封装了对 YOLO 预测结果的坐标计算过程</li><li>for 循环的代码有点冗长，主要逻辑是将 YOLO 坐标系的坐标位置转换为 iPhone 坐标系的坐标位置。并显示出定位物体的边框 BoundingBox。</li></ol><blockquote><i>需要转换坐标系的原因是 YOLO 模型预测的视频流图像帧数据与肉眼看到的 iPhone 处理后的图像有90度的旋转。</i></blockquote><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">let</span> <span class=\"nv\">featureValues</span> <span class=\"p\">=</span> <span class=\"n\">results</span> <span class=\"k\">as</span><span class=\"o\">!</span> <span class=\"p\">[</span><span class=\"n\">VNCoreMLFeatureValueObservation</span><span class=\"p\">]</span>\n<span class=\"kd\">let</span> <span class=\"nv\">features</span> <span class=\"p\">=</span> <span class=\"n\">featureValues</span><span class=\"p\">.</span><span class=\"bp\">first</span><span class=\"o\">!</span><span class=\"p\">.</span><span class=\"n\">featureValue</span><span class=\"p\">.</span><span class=\"n\">multiArrayValue</span><span class=\"o\">!</span>\n\n<span class=\"kd\">let</span> <span class=\"nv\">predictions</span> <span class=\"p\">=</span> <span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">computePredictions</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">features</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mf\">0.</span><span class=\"p\">.&lt;</span><span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">boundingBoxes</span><span class=\"p\">.</span><span class=\"bp\">count</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">predictions</span><span class=\"p\">.</span><span class=\"bp\">count</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">prediction</span> <span class=\"p\">=</span> <span class=\"n\">predictions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        \n        <span class=\"cm\">/*\n</span><span class=\"cm\">         ** YOLO Coordinate\n</span><span class=\"cm\">         */</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">heightYolo</span> <span class=\"p\">=</span> <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">bounds</span><span class=\"p\">.</span><span class=\"n\">width</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">widthYolo</span> <span class=\"p\">=</span> <span class=\"n\">heightYolo</span> <span class=\"o\">*</span> <span class=\"mi\">4</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">scaleXYolo</span> <span class=\"p\">=</span> <span class=\"n\">widthYolo</span> <span class=\"o\">/</span> <span class=\"n\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">inputWidth</span><span class=\"p\">)</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">scaleYYolo</span> <span class=\"p\">=</span> <span class=\"n\">heightYolo</span> <span class=\"o\">/</span> <span class=\"n\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">inputHeight</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\">// Translate and scale the rectangle.</span>\n        <span class=\"kd\">var</span> <span class=\"nv\">rectYolo</span> <span class=\"p\">=</span> <span class=\"n\">prediction</span><span class=\"p\">.</span><span class=\"n\">rect</span>\n        <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">scaleXYolo</span>\n        <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">*=</span> <span class=\"n\">scaleYYolo</span>\n        <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">*=</span> <span class=\"n\">scaleXYolo</span>\n        <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">*=</span> <span class=\"n\">scaleYYolo</span>\n        \n        <span class=\"cm\">/*\n</span><span class=\"cm\">         ** iPhone Coordinate\n</span><span class=\"cm\">         */</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">width</span> <span class=\"p\">=</span> <span class=\"n\">heightYolo</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">height</span> <span class=\"p\">=</span> <span class=\"n\">widthYolo</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">top</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">imageView</span><span class=\"p\">.</span><span class=\"n\">bounds</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        \n        <span class=\"kd\">var</span> <span class=\"nv\">rect</span> <span class=\"p\">=</span> <span class=\"n\">prediction</span><span class=\"p\">.</span><span class=\"n\">rect</span>\n        <span class=\"n\">rect</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">height</span>\n        <span class=\"n\">rect</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"p\">=</span> <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">x</span>\n        <span class=\"n\">rect</span><span class=\"p\">.</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">+=</span> <span class=\"n\">top</span>\n        <span class=\"n\">rect</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">=</span> <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">height</span>\n        <span class=\"n\">rect</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"p\">=</span> <span class=\"n\">rectYolo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">width</span>\n        \n        <span class=\"c1\">// Show the bounding box.</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">label</span> <span class=\"p\">=</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"p\">:</span> <span class=\"s\">&#34;%@ %.1f&#34;</span><span class=\"p\">,</span> <span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">prediction</span><span class=\"p\">.</span><span class=\"n\">classIndex</span><span class=\"p\">],</span> <span class=\"n\">prediction</span><span class=\"p\">.</span><span class=\"n\">score</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">color</span> <span class=\"p\">=</span> <span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"n\">prediction</span><span class=\"p\">.</span><span class=\"n\">classIndex</span><span class=\"p\">]</span>\n        <span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">boundingBoxes</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">rect</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">YOLO</span><span class=\"p\">.</span><span class=\"n\">boundingBoxes</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">hide</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>此处应有掌声~</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: Make your hands dirty</b></h2><p>我们几乎实现了一个完美聪明的 iOS APP，至少在识别物体自动拍照方面它是完美的。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/fengjihua/DemoCoreML/releases/tag/v0.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最后献上源代码</a>和 <a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1jIW4o7s\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">YOLO 模型</a>，并希望各位玩家自己也可以从工作学习中写出更聪明的应用。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "iOS 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19555404"
                }, 
                {
                    "tag": "物体识别", 
                    "tagLink": "https://api.zhihu.com/topics/19617234"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33376737", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 5, 
            "title": "5分钟GET AI - 写一款聪明的 iOS App", 
            "content": "<p>本文攻略：使用计算机视觉和AI技术，开发一个能自动识别物体的 iOS App</p><p>建议玩家等级：AI零基础，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>Swift 基础  <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/swift/swift-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学一学这门出身名门的语言</a></li><li>Object-C 基础  <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/w3cnote/objective-c-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学一学这门不受人待见的语言</a></li><li>使用 Xcode 完成 Hello World</li><li>一点点计算机视觉基础</li><li>一点点 AI 基础</li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra 10.12.6+</li><li>IDE：Xcode 9.2+</li><li>设备：iPhone/iPad一部，运行 iOS 11.0+</li><li>苹果开发者账号一个（每年按时交99美刀开发税的账号）</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 产品思维驱动开发</b></h2><p>PO 主最近接到一个任务，客户的一款APP在拍照场景下表现的不够优秀，主要表现出2个问题：</p><ol><li>拍照时用户经常手抖，导致照片清晰度不够，无法进行准确的病情分析</li><li>用户需要对准指定的部位（例如眼睛）进行拍照，并将该部位置于照片中间，系统才能做出准确的部位（眼睛）病情分析</li></ol><p>这两个问题引发了关于产品的思考：</p><ol><li>用户总是容易犯错的，这不是用户的错，更不是产品推脱责任的借口</li><li>优秀的产品应该是聪明的，它应该让用户做最简单的操作，得到最完美的结果</li></ol><p>接下来，让我们来想象一下极致的用户体验应该是怎样的：</p><ol><li>用户做最简单的操作：打开 APP -&gt; 打开摄像头 -&gt; 对着指定部位（眼睛）</li><li>得到了最完美的结果：一张清晰的照片，照片中间是指定的部位（眼睛）</li></ol><p>从最简单的用户操作到最完美的用户结果的所有中间过程，那就应该是这款产品的责任和使命，它需要足够聪明做到以下3点：</p><ol><li>识别清晰度</li><li>识别物体（眼睛）</li><li>当被识别的指定物体（眼睛）位于中间，并且足够清晰时，自动按下快门保存照片</li></ol><p>这3点就是这次的任务目标了，为了做到这3点（尤其是前面2点，感觉貌似挺难的），我们会陆续介绍重量级人物一一登场，登场之前先来看下我们这次要完成的 Demo 颜值（实践证明手动截图会模糊确实是用户不可避免的错误）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-02e9e1d7db22c8f3ba905acff810b28b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2289\" data-rawheight=\"1358\" class=\"origin_image zh-lightbox-thumb\" width=\"2289\" data-original=\"https://pic4.zhimg.com/v2-02e9e1d7db22c8f3ba905acff810b28b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2289&#39; height=&#39;1358&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2289\" data-rawheight=\"1358\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2289\" data-original=\"https://pic4.zhimg.com/v2-02e9e1d7db22c8f3ba905acff810b28b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-02e9e1d7db22c8f3ba905acff810b28b_b.jpg\"/></figure><p>先科普一下 Demo 的成果：</p><ol><li>Blur 值代表了照片清晰度</li><li>FPS 值游戏玩家们都懂，代表了处理器每秒可以处理图片的数量，低于24肉眼会感觉卡顿</li><li>成功识别出了照片中的显示器、电脑和我的可可粉（如果愿意，它可以识别出更多）</li><li>附赠两个5毛特效</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><i>以下章节非码农玩家可以无视代码的存在</i></blockquote><h2><b>PART 2: 视觉总监 OpenCV</b></h2><p>我们先介绍登场的是负责5毛特效的视觉总监 OpenCV（免费的跨平台计算机视觉库），除了附赠的5毛特效，他在这次项目中还负责识别清晰度。</p><p>如果玩家对计算机视觉还不是很了解的话，只要记住任何关于图片图形的问题找这位总监就对了，他可牛的很：</p><ol><li>精通 Windows/Linux/iOS/Android 四大操作系统</li><li>精通 C/C++/Python/Java 等开发语言</li><li>精通所有二次元（图片）的操作</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 1: 下载安装开发包 OpenCV for iOS</b></p><p>我们推荐<a href=\"https://link.zhihu.com/?target=https%3A//opencv.org/releases.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">直接官网下载</a>已编译好的版本 2.4.*，解压后添加到 Xcode 项目中，并且为项目添加对开发包的引用</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e0057a5072dbf9c65caf34cf5590b8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1462\" class=\"origin_image zh-lightbox-thumb\" width=\"2560\" data-original=\"https://pic4.zhimg.com/v2-3e0057a5072dbf9c65caf34cf5590b8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2560&#39; height=&#39;1462&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1462\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2560\" data-original=\"https://pic4.zhimg.com/v2-3e0057a5072dbf9c65caf34cf5590b8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e0057a5072dbf9c65caf34cf5590b8b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 图片数据格式转换</b></p><p>OpenCV 在处理 iOS 图片前，需要统一先将 iOS UIImage 转换为自己认识的矩阵数组类  cv::Mat：</p><div class=\"highlight\"><pre><code class=\"language-objective-c++\">// iOS Image to OpenCV Matrix\nUIImage* image;\ncv::Mat img_rgb;\nUIImageToMat(image, img_rgb);</code></pre></div><p>同样在 OpenCV 处理完成后，将矩阵数组类 cv::Mat 转换回 iOS 认识的 UIImage：</p><div class=\"highlight\"><pre><code class=\"language-objective-c++\">// OpenCV Matrix to iOS Image\ncv::Mat img_final;\nUIImage* image = MatToUIImage(img_final);</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 实现5毛特效</b></p><p>附赠玩家的两个5毛特效其实是两个非常有名的边缘检测算法，Sobel 算子和 Laplace算子（学过高数的玩家除了高斯之外应该也听说过拉普拉斯）。</p><p>在进行边缘检测之前，我们通常会先将图片做灰度化（Gray）处理，说人话就是把彩色图片变成黑白图片：</p><div class=\"highlight\"><pre><code class=\"language-objective-c++\">cv::Mat img_gray;\ncv::cvtColor(img_rgb, img_gray, cv::COLOR_RGB2GRAY);</code></pre></div><p>5毛特效之一，Sobel 算子：</p><div class=\"highlight\"><pre><code class=\"language-objective-c++\">- (cv::Mat)sobel:(cv::Mat)img_src {\n    cv::Mat img_dst;\n    int ksize = 5;\n    cv::Sobel(img_src, img_dst, CV_8U, 1, 1, ksize);\n    return img_dst;\n}</code></pre></div><p>5毛特效之二，Laplace 算子：</p><div class=\"highlight\"><pre><code class=\"language-objective-c++\">- (cv::Mat)laplace:(cv::Mat)img_src {\n    cv::Mat img_dst;\n    int ksize = 5;\n    cv::Laplacian(img_src, img_dst, CV_8U, ksize);\n    return img_dst;\n}</code></pre></div><p>玩家可以自行调节算法内核数（ksize），体验一把调参师的工作。共享的代码中还附赠了神秘的第三个特效彩蛋。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 4: 计算清晰度数值 Blur</b></p><p>我们需要识别一张照片的清晰度，本质其实是识别照片中的物体是否都有足够清晰的轮廓（边缘），这也是我们先介绍边缘检测算法的原因。</p><p>我们通常计算 Laplace 算子结果矩阵数组（也就是5毛特效照片）的均值（mean）或者方差（stddev），清晰度和均值或方差大小成正比：</p><div class=\"highlight\"><pre><code class=\"language-objective-c++\">cv::Mat img_final;\nimg_final = [self laplace:img_gray];\n\ncv::Scalar mean;\ncv::Scalar stddev;\ncv::meanStdDev(img_final, mean, stddev);\n\nself.blur = int(stddev[0]);</code></pre></div><p>有了视觉总监 OpenCV 的帮助，识别照片清晰度技能很轻松就 Get 到了，接下来让我们一起 Get 一个碾压世界的技能，AI 人工智能。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 最强大脑 CoreML</b></h2><p>这期先教各位玩家入个门，怎么使用 AI 模型。我们把 AI 模型看成一个最强大脑（算法），你给他一张图片（输入），他告诉你这张图片里有什么（输出）。</p><p>从 iOS 11.0 开始，苹果设备已全面支持 AI 模型的开发和运行，使用起来也是极为方便的，和普通的调包没太大区别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 1: 下载 AI 模型</b></p><p>我们下载了<a href=\"https://link.zhihu.com/?target=https%3A//developer.apple.com/machine-learning/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">苹果官方</a>已经为我们训练好的几个模型文件：</p><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//docs-assets.developer.apple.com/coreml/models/MobileNet.mlmodel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MobileNet</a>：谷歌爸爸设计的适用于手机设备运行的神经网络</li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs-assets.developer.apple.com/coreml/models/SqueezeNet.mlmodel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SqueezeNet</a>：伯克利和斯坦福联手打造的精简高效神经网络，非常适用于手机设备</li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs-assets.developer.apple.com/coreml/models/GoogLeNetPlaces.mlmodel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GoogLeNet</a>：谷歌爸爸致敬神经网络鼻祖 LeNet 的经典之作</li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs-assets.developer.apple.com/coreml/models/Resnet50.mlmodel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ResNet50</a>：ImageNet 2015 冠军模型，微软爸爸立足 AI 学术界的扬名之作</li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs-assets.developer.apple.com/coreml/models/Inceptionv3.mlmodel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">InceptionV3</a>：ImageNet 2014 冠军模型，谷歌爸爸立足 AI 学术界的传世之作，目前最新是 InceptionV4 版本</li><li><a href=\"https://link.zhihu.com/?target=https%3A//docs-assets.developer.apple.com/coreml/models/VGG16.mlmodel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">VGG16</a>：ImageNet 2014 亚军模型，太大了没下载</li></ol><p>干货太多了挑哪个，没关系我们都放到项目里去一个个用过来</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2f4da487efd3f76cae0b271c02264ee5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1462\" class=\"origin_image zh-lightbox-thumb\" width=\"2560\" data-original=\"https://pic2.zhimg.com/v2-2f4da487efd3f76cae0b271c02264ee5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2560&#39; height=&#39;1462&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1462\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2560\" data-original=\"https://pic2.zhimg.com/v2-2f4da487efd3f76cae0b271c02264ee5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2f4da487efd3f76cae0b271c02264ee5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2: 使用 AI 模型</b></p><p>我们使用苹果SDK官方提供的 CoreML 和 Vision:</p><ol><li>CoreML 负责解析下载好的 AI 模型，并与之建立连接后生成类提供给我们开发调用</li><li>Vision 本身自带了苹果很多内置的人脸识别，条形码识别等模型调用接口。在这里 Vision 只为我们提供了图片预处理服务，将图片处理成神经网络模型规定的输入图像大小和格式（CVPixelBuffer）</li></ol><p>首先初始化 AI 模型，栗子使用的是 MobielNet，并指定了模型预测后回调的处理函数 predictDidComplete：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">var</span> <span class=\"nv\">classificationRequest</span><span class=\"p\">:</span> <span class=\"n\">VNCoreMLRequest</span><span class=\"o\">!</span>\n<span class=\"kd\">let</span> <span class=\"nv\">semaphore</span> <span class=\"p\">=</span> <span class=\"n\">DispatchSemaphore</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"kd\">let</span> <span class=\"nv\">model</span> <span class=\"p\">=</span> <span class=\"k\">try</span> <span class=\"n\">VNCoreMLModel</span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"p\">:</span> <span class=\"n\">MobileNet</span><span class=\"p\">().</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">classificationRequest</span> <span class=\"p\">=</span> <span class=\"n\">VNCoreMLRequest</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">completionHandler</span><span class=\"p\">:</span> <span class=\"n\">predictDidComplete</span><span class=\"p\">)</span>\n<span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">classificationRequest</span><span class=\"p\">.</span><span class=\"n\">imageCropAndScaleOption</span> <span class=\"p\">=</span> <span class=\"p\">.</span><span class=\"n\">centerCrop</span></code></pre></div><p>然后进行模型预测：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">func</span> <span class=\"nf\">predictClassification</span><span class=\"p\">(</span><span class=\"n\">pixelBuffer</span><span class=\"p\">:</span> <span class=\"n\">CVPixelBuffer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">semaphore</span><span class=\"p\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n        \n    <span class=\"n\">DispatchQueue</span><span class=\"p\">.</span><span class=\"n\">global</span><span class=\"p\">(</span><span class=\"n\">qos</span><span class=\"p\">:</span> <span class=\"p\">.</span><span class=\"n\">userInitiated</span><span class=\"p\">).</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">handler</span> <span class=\"p\">=</span> <span class=\"n\">VNImageRequestHandler</span><span class=\"p\">(</span><span class=\"n\">cvPixelBuffer</span><span class=\"p\">:</span> <span class=\"n\">pixelBuffer</span><span class=\"p\">)</span>\n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"k\">try</span> <span class=\"n\">handler</span><span class=\"p\">.</span><span class=\"n\">perform</span><span class=\"p\">([</span><span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">classificationRequest</span><span class=\"p\">])</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&#34;Failed to perform classification.</span><span class=\"se\">\\n</span><span class=\"si\">\\(</span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">localizedDescription</span><span class=\"si\">)</span><span class=\"s\">&#34;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p>最后处理模型预测结果，显示排名前3被识别的物体：</p><div class=\"highlight\"><pre><code class=\"language-swift\"><span class=\"kd\">func</span> <span class=\"nf\">predictDidComplete</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">VNRequest</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Error</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n    <span class=\"n\">DispatchQueue</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"kd\">let</span> <span class=\"nv\">results</span> <span class=\"p\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">results</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">labelClassification</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">&#34;Unable to classify image.&#34;</span>\n            <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&#34;Unable to classify image.&#34;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">classifications</span> <span class=\"p\">=</span> <span class=\"n\">results</span> <span class=\"k\">as</span><span class=\"o\">!</span> <span class=\"p\">[</span><span class=\"n\">VNClassificationObservation</span><span class=\"p\">]</span>\n        \n        <span class=\"k\">if</span> <span class=\"n\">classifications</span><span class=\"p\">.</span><span class=\"bp\">isEmpty</span> <span class=\"p\">{</span>\n            <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&#34;Nothing recognized.&#34;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kd\">let</span> <span class=\"nv\">topClassifications</span> <span class=\"p\">=</span> <span class=\"n\">classifications</span><span class=\"p\">.</span><span class=\"kr\">prefix</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"kd\">let</span> <span class=\"nv\">descriptions</span> <span class=\"p\">=</span> <span class=\"n\">topClassifications</span><span class=\"p\">.</span><span class=\"bp\">map</span> <span class=\"p\">{</span> <span class=\"n\">classification</span> <span class=\"k\">in</span>\n                <span class=\"c1\">// Formats the classification for display; e.g. &#34;(0.37) cliff, drop, drop-off&#34;.</span>\n                <span class=\"k\">return</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"p\">:</span> <span class=\"s\">&#34;(%.2f)  %@&#34;</span><span class=\"p\">,</span> <span class=\"n\">classification</span><span class=\"p\">.</span><span class=\"n\">confidence</span><span class=\"p\">,</span> <span class=\"n\">classification</span><span class=\"p\">.</span><span class=\"n\">identifier</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&#34;Classification:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span> <span class=\"o\">+</span> <span class=\"n\">descriptions</span><span class=\"p\">.</span><span class=\"n\">joined</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kc\">self</span><span class=\"p\">.</span><span class=\"n\">semaphore</span><span class=\"p\">.</span><span class=\"n\">signal</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3: 优雅的 iOS 技巧</b></p><p>通常 AI 模型的计算会占用更多的 CPU/GPU 资源和时间，所以在使用时一定需要进行并发处理，我们提供了一些 iOS 处理并发的技巧：</p><ol><li>使用 DispatchQueue.global.async：开启一个新的线程单独处理 AI 模型计算，这样不会阻塞主线程导致的 APP 等待</li><li>使用 DispatchQueue.main.async：系统主线程只负责 UI 界面更新</li><li>使用 DispatchSemaphore(value: 2)：规定了2个信号量，表示最多只允许2个线程同时处理 AI 模型计算（敲黑板，这很重要！！！）</li><li>使用 semaphore.wait()：占用1个信号量，当信号量满额时，会等待计算信号量被释放</li><li>使用 semaphore.signal()：释放1个信号量</li><li>项目中使用了 Swift 和 Object-C 混编，因为 OpenCV 部分需要 Object-C 才能进行调用。</li></ol><blockquote><i>在没有使用 <b>信号量</b> 限制资源的时候，APP 运行半分钟就会闪退，原因是计算线程不受限制并且 AI 预测计算的速度跟不上视频流生成速度，导致了越来越多视频流堆积内存等待被计算最终内存溢出。</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: Make your hands dirty</b></h2><p>至此，我们已经 Get 到了：</p><ol><li>如何用 OpenCV 检测照片清晰度</li><li>如何用 CoreML + Vision + AI模型 识别照片中的物体</li><li>如何优雅高效的处理 iOS 并发</li></ol><p>那就可以撸起袖子敲代码吧，先用现有的模型识别一个常见物体（例如杯子），然后自动拍一张清晰的杯子在屏幕中间的照片。最后双手<a href=\"https://link.zhihu.com/?target=https%3A//github.com/fengjihua/DemoCoreML/releases/tag/v0.1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">献上 Demo 源代码</a>（OpenCV和模型请自行下载）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "iOS 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19555404"
                }, 
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33249503", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 2, 
            "title": "5分钟GET全栈开发 - 无所不能的前端", 
            "content": "<p>本文攻略：独立全栈开发一个项目，用 HTML+CSS+JavaScript 完成前端开发</p><p>建议玩家等级：中级码农（初级码农以下等级慎入）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点命令行基础</li><li>HTML 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/html/html-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">两天包学会</a></li><li>CSS 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/css/css-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">两天包学会</a></li><li>JavaScript 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/jquery/jquery-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三天包学会</a></li><li>jQuery 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/js/js-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三至七天包学会</a></li><li>AngularJS v1.* 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/angularjs/angularjs-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三至七天包学会</a></li><li>一点点全栈开发知识：<a href=\"https://zhuanlan.zhihu.com/p/33003538\" class=\"internal\">5分钟学会全栈开发</a></li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra（Windows也没毛病）</li><li>IDE：VSCode</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 前端开发从入门到放弃</b></h2><p>有些话 PO 主想写在前端开发入门前：</p><ol><li>PO 主的不完全统计，在很多完整的全栈商业项目中，前端开发工作量通常占据了整个项目的 60% ~ 80%，甚至更多。</li><li>对于后端开发，会一个技能例如 JAVA, GO, C# 或 PHP 就能在江湖闯荡一番了。而对于前端开发而言，至少先学会三个基础技能 HTML+CSS+JavaScript（以下简称JS），还不保证能立足于江湖（从本文需解锁技能之多就能体会到了）。</li><li>从职场角度出发，总监、老板或客户们几乎都只关心项目产品的前端表现。“为什么成品比设计稿做的丑，为什么一点就花屏了，为什么提交了没反应”，这些锅甩来甩去最后往往都是由前端开发来背。</li><li>这些都意味着，前端开发往往是加班狗中的加班狗，背锅侠中的背锅侠，但也是程序猿中的程序猿，无所不能。</li></ol><p>刚入门或打算入门的玩家们，如果到了这里还没打算放弃，说明很具潜力成为一名高薪前端开发（重点突出高薪二字）。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 前端开发编年史</b></h2><p>我们举个栗子，把开发一个完整的互联网前端应用看成是造一栋豪华智能别墅：</p><ol><li>首先登场的是老大 HTML：负责别墅的结构设计与建筑施工，具体工作是设计别墅要有卧室、客厅、厨房、卫浴、游泳池、停车场、电影院等设施，并把这些设施都造好。</li><li>然后登场的是艺术天赋最好的老二 CSS：负责别墅的精装修，具体工作是把 HTML 造好的设施都按照设计稿的样子装修好，它没法改动设施的前后顺序，但可以改变设施的样子，微调设施的位置。</li><li>最后登场的是智商最高性格最霸道的老三 JS：具体工作是负责别墅的所有智能控制，例如自动调节室温、水温，自动照明，自动清扫等，也会把这些控制权限通过一些开关让主人进行手动交互进行控制。JS 也会对 HTML 的施工和 CSS 的装修指手画脚，看到哪里不顺眼了还可以对 HTML 和 CSS 的成果进行调整。总之，主人（客户）想要什么 JS 都能在实现，甚至是在别墅里搞一场烟花表演（不可理喻天马行空的需求）。</li></ol><p>这个栗子在 10 年前还是非常贴切的，但放到 2018 年就会有很多最前沿的前端大神跳出来进行反驳。PO 主做了一个最简单的归纳，让我们先了解一下这 10 年前端开发究竟发生了什么变化：</p><ol><li>10 年前，HTML + CSS 是一对黄金搭档，受到大众青睐。而聪明的 JS 却遭到大家的一致唾弃，原因是其面向过程式的脚本语言，开发出来的代码总是一坨一坨又臭又长，极难维护，甚至是 2 个月后的自己也很难看懂，运行也比较慢。</li><li>5 年前，进入移动互联网时代，HTML 多学了一些技能，变成了一个时代的新宠儿 <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/html/html5-intro.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTML5</a>，就是大家口中的 H5。CSS 也多学了一些技能，变成了 <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/css3/css3-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CSS3</a>，还修炼了出一个优秀框架叫 <a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/bootstrap4/bootstrap4-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Bootstrap</a>。JS 也修炼出了一个优秀框架叫 <a href=\"https://link.zhihu.com/?target=http%3A//jquery.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">jQuery</a>，jQuery 的出现一改 JS 以往的不好印象，将面象过程开发这件事做到了优雅至极，维护方便，为 JS 未来的霸业一统起到了奠基作用。</li><li>最近两三年算是 JS 称霸前端开发的黄金时代，孕育出了新一批的优秀框架，最著名的有三个：<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReactJS（脸书亲儿子）</a>，<a href=\"https://link.zhihu.com/?target=https%3A//angularjs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AngularJS（谷歌亲儿子）</a>，<a href=\"https://link.zhihu.com/?target=https%3A//vuejs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vue.js</a>。这三个框架的出现彻头彻尾改变了传统的前端开发方式：</li></ol><ul><li>JS 也可以面象对象开发，定义类，导入类库类包什么的不再是后端开发的专属</li><li>JS 也有了设计模式，什么 MVC、依赖注入，后端开发流行什么，也能在前端流行</li><li>JS 主导项目开发，不再是当年那个辅助 HTML+CSS 的特效小弟，相反 HTML 和 CSS 都得听 JS 老板指挥安排，甚至出现了一个叫 <a href=\"https://link.zhihu.com/?target=http%3A//lesscss.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Less.js</a> 的小弟专门为 JS 管理 CSS</li><li>JS 也可以编译，并不是真正的编译，本质是项目发布前的代码混淆、合并、压缩构建。著名的工具有 <a href=\"https://link.zhihu.com/?target=https%3A//gulpjs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gulp</a>, <a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">webpack</a>, <a href=\"https://link.zhihu.com/?target=https%3A//gruntjs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">grunt</a></li><li>创造了时髦的单页应用，仅仅用一个 HTML 页面就能无刷新搞定所有事情，任性得根本不把搜索引擎多年制定的 SEO 规则放在眼里</li><li>JS 不仅跟上了后端的发展，更是祭出了 <a href=\"https://link.zhihu.com/?target=https%3A//nodejs.org/en/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Node.js</a> 大杀器杀入后端开发阵营</li></ul><p>PO 主是从四年前开始停止JS 开发工作的，又从半年前重新开始了 JS 开发工作，中间错过了 JS 黄金时代感觉甚是遗憾，仍需时日才能把新知识学习回来。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 前端的增删改查（CRUD）</b></h2><p>让我们接着<a href=\"https://zhuanlan.zhihu.com/p/33123924\" class=\"internal\">上篇文章</a>的步伐，回到这次项目的前端开发。项目用的 JS 框架是 AngularJS v1.5，而 AngularJS 的版本截止 2018 年 1 月 已经是 v5.0 了，两者开发方式上也大有差别。但作为入门初段，我们仍然推荐比较传统的 HTML+CSS+JS(jQuery + AngularJS) 的组合，这种做法更有助于理解项目，并会适当结合一些目前最流行的技术。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们将要对分类做一个完整的交互式前端开发，分别完成增删改查（CRUD）4个操作。</p><p><b>Step 1. 浏览</b></p><p>统一使用一个表格 Table/Grid 来显示数据，墙裂推荐 <a href=\"https://link.zhihu.com/?target=http%3A//lorenzofox3.github.io/smart-table-website/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Smart Table</a>，很方便显示出了所有的分类数据。可阅读源码项目 Client/src/js/controllers/table.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ff45997ecf4272408b7078020131e050_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ff45997ecf4272408b7078020131e050_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;731&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ff45997ecf4272408b7078020131e050_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ff45997ecf4272408b7078020131e050_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step2. 删</b></p><p>统一使用对话框进行一次交互确认，这里使用了 bootstrap 提供的 modal 组件。可阅读源码项目 Client/src/js/controllers/modal.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-07dceead3dcbf34f1d19cda6d16497b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-07dceead3dcbf34f1d19cda6d16497b2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;731&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-07dceead3dcbf34f1d19cda6d16497b2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-07dceead3dcbf34f1d19cda6d16497b2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3. 增/改</b></p><p>使用了 ngAside 组件，将操作表单从左边侧滑出来。它是基于 Step2 modal 组件开发的。增加和修改操作都会通过一个变量传递给 ngAside，用以区分不同操作。可阅读源码项目 Client/src/js/controllers/form.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-342c6099789a7ca8a180b25b57295aea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-342c6099789a7ca8a180b25b57295aea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;731&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-342c6099789a7ca8a180b25b57295aea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-342c6099789a7ca8a180b25b57295aea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 4. 查</b></p><p>在搜索栏对输入的关键字做 AutoComplete 检索。可阅读源码项目 Client/src/js/controllers/table.js</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-10945b14d55d8197a7acce0ce5fe0747_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-10945b14d55d8197a7acce0ce5fe0747_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;731&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"731\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-10945b14d55d8197a7acce0ce5fe0747_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-10945b14d55d8197a7acce0ce5fe0747_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 5. Restful API</b></p><p>前端的增删改查（CRUD）操作最终都会通过 Restful API 送去后端，在这里我们也封装了前端的 Restful API 服务，它会接收所有的数据提交 HTTP 请求，并将后端的 HTTP 返回结果统一处理。可阅读源码项目 Client/src/js/services/restful.js</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后，再介绍一些项目中使用到，前端大神们也会常使用的一些开发小技巧：</p><ol><li>lazyload：前端项目通常会使用很多第三方 JS 和 CSS 文件，第一次加载所有这些文件会占据大量的时间，导致用户等待很久。使用 lazyload 可以做到延迟加载，只有当使用到的时候再对某几个 JS 和 CSS 文件进行加载，避免了用户长时间等待。</li><li>localization：主要针对多语言版本的前端开发。合理的做法是使用 JS 变量代替文字字符串输出在页面上，再将这些变量维护成多个语言版本文件。参考项目中 Client/src/l10n。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//eslint.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">eslint</a>：JS 代码素来以量大难维护著称，eslint 神器的出现主要用于统一 JS 代码格式规范，修正 JS 语法错误。配置完成后，在保存文件的同时会根据你的 eslint 配置立即校正冗长的 JS 代码。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: 前端构建发布</b></h2><p>前端的构建发布常用的几个步骤：</p><ol><li>代码合成。将所有 CSS 文件合成为一个 app.css，所有 JS 文件合成为一个 app.js</li><li>代码混淆。将合成后的 app.js 变量名和方法名都改成 a,b,c,d,e 等等，混淆的目的一是代码压缩，二是最大限度的保护源码逻辑使其难以被黑客理解</li><li>代码压缩。将混淆后的 app.js 进行空格和换行去除，最终从几千几万行的 JS 代码压缩成很长的一行 JS 代码。app.css 也会进行压缩。最终得到 app.min.css 和 app.min.js。这样做的目的同样是为了使用户浏览和等待体验达到最优。</li></ol><p>在这里我们使用了 grunt 工具进行构建，构建脚本已经写好，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">grunt build:dist</code></pre></div><p>稍等片刻后，就能得到一个占据空间极少的前端发布版本了，是不是觉得很爽。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后安利一下 PO 主使用的<a href=\"https://link.zhihu.com/?target=http%3A//preview.themeforest.net/item/angulr-bootstrap-admin-web-app-with-angularjs/full_screen_preview/8437259%3Fref%3Dthemespad7%26clickthrough_id%26redirect_back%3Dtrue\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">前端模板</a>，项目界面和框架并非 PO 主从零开发，我们只是站在巨人的肩膀上做了二次开发。喜欢这个项目前端框架的玩家可以自行购买，只需20多美刀，目测能节省两个月的开发时间。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4845da45175cdadaacfac5deb5ee1d9c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2558\" data-rawheight=\"1278\" class=\"origin_image zh-lightbox-thumb\" width=\"2558\" data-original=\"https://pic1.zhimg.com/v2-4845da45175cdadaacfac5deb5ee1d9c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2558&#39; height=&#39;1278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2558\" data-rawheight=\"1278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2558\" data-original=\"https://pic1.zhimg.com/v2-4845da45175cdadaacfac5deb5ee1d9c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4845da45175cdadaacfac5deb5ee1d9c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>至此，我们已经介绍了如何从思考，到后端开发，到前端开发的全栈开发过程，在这里建议各位玩家花一周时间把源代码读一遍，再自己敲一个新的功能模块例如 ‘商品管理’，make your hands dirty 才能成为一名合格的入门全栈开发工程师。</p><p>之后的文章，我们将分享更多全栈开发的细节。</p><p>最后献上<a href=\"https://link.zhihu.com/?target=https%3A//github.com/fengjihua/DemoFullStack/releases/tag/v0.2.0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源代码</a>，学会使用 Github 也是全栈工程师必修技能。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "全栈工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19940527"
                }, 
                {
                    "tag": "全栈开发", 
                    "tagLink": "https://api.zhihu.com/topics/20043281"
                }, 
                {
                    "tag": "Angular​", 
                    "tagLink": "https://api.zhihu.com/topics/20015467"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32242018", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 13, 
            "title": "5分钟GET AI - YOLO的卷积神经网络", 
            "content": "<p>本文攻略：通过分析 YOLO 神经网络，理解卷积神经网络工作原理</p><p>建议玩家等级：技术圈外人(建议只看图片，也能理解)，AI新手，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点命令行基础</li><li>一点点 C++ 基础</li><li>卷积神经网络基础</li><li>YOLO 基础：<a href=\"https://zhuanlan.zhihu.com/p/32097670\" class=\"internal\">How to use YOLO with python</a>, <a href=\"https://zhuanlan.zhihu.com/p/32172286\" class=\"internal\">How YOLO only look once</a></li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra</li><li>IDE：VSCode</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 卷积神经网络 Convolution Neural Network</b></h2><p>神经网络是一个狂拽炫酷的名词，前面再加卷积二字听起来更是吊炸天。本文就不普及卷积神经网络了，因为有很多大神的科普文章已经让人无法超越，我们只要站在大神的肩膀上进行操作，并理解 YOLO 黑魔法的本质原理。</p><p>YOLO 作者使用了自己设计的卷积神经网络模型，取名 Darknet。YOLOv2 使用了32层网络，Tiny YOLO 只使用了16层网络，这也是后者运行速度更快，而前者检测成功率更高的原因。</p><p>卷积层 conv：负责提取特征图片</p><p>池化层 max：负责降低特征图片维度，从而降低运算量。这里使用的是 max pooling</p><p>输出层 detection：输出一维预测数组</p><p>YOLOv2 32 层网络具体如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8897cc0ca286f0be01f04c772a187cff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic4.zhimg.com/v2-8897cc0ca286f0be01f04c772a187cff_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;708&#39; height=&#39;727&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"708\" data-original=\"https://pic4.zhimg.com/v2-8897cc0ca286f0be01f04c772a187cff_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8897cc0ca286f0be01f04c772a187cff_b.jpg\"/></figure><p>Tiny YOLO 16 层网络具体如图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f0b69e2414c4c4ab38cbe51440c67f99_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb\" width=\"707\" data-original=\"https://pic2.zhimg.com/v2-f0b69e2414c4c4ab38cbe51440c67f99_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;707&#39; height=&#39;377&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"707\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"707\" data-original=\"https://pic2.zhimg.com/v2-f0b69e2414c4c4ab38cbe51440c67f99_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f0b69e2414c4c4ab38cbe51440c67f99_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 特征图片 Feature Map</b></h2><p>特征图片可以理解为AI对一张图片理解过程的中间产物，神经网络模型设计的越好，AI的理解就会越深刻。特征图片在源码里都是一维特征数组，于是我提取了神经网络每一层输出的特征数组，并将其进行图片可视化。这里展示的是 Tiny YOLO 版本的特征图片。</p><p>神经网络第 0 层输入图片：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2527fd291dd868f9bd517bc6a7742596_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"416\" data-rawheight=\"416\" class=\"content_image\" width=\"416\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;416&#39; height=&#39;416&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"416\" data-rawheight=\"416\" class=\"content_image lazy\" width=\"416\" data-actualsrc=\"https://pic3.zhimg.com/v2-2527fd291dd868f9bd517bc6a7742596_b.jpg\"/></figure><p>第 0 层卷积输出，第 1 层池化输出，共 16 个通道：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1c210a1b9f8281cc91e2e907684e49f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2272\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb\" width=\"2272\" data-original=\"https://pic2.zhimg.com/v2-1c210a1b9f8281cc91e2e907684e49f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2272&#39; height=&#39;1130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2272\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2272\" data-original=\"https://pic2.zhimg.com/v2-1c210a1b9f8281cc91e2e907684e49f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1c210a1b9f8281cc91e2e907684e49f9_b.jpg\"/></figure><p>第 2 层卷积输出，第 3 层池化输出，共 32 个通道：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0c4f7fbc5fa5a0c4ee22797f227dc941_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2272\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb\" width=\"2272\" data-original=\"https://pic2.zhimg.com/v2-0c4f7fbc5fa5a0c4ee22797f227dc941_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2272&#39; height=&#39;1130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2272\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2272\" data-original=\"https://pic2.zhimg.com/v2-0c4f7fbc5fa5a0c4ee22797f227dc941_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0c4f7fbc5fa5a0c4ee22797f227dc941_b.jpg\"/></figure><p>第 4 层卷积输出，第 5 层池化输出，共 64 个通道：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-af39dc16809d0a31ab5f1a165f0ec4f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2267\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb\" width=\"2267\" data-original=\"https://pic2.zhimg.com/v2-af39dc16809d0a31ab5f1a165f0ec4f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2267&#39; height=&#39;1130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2267\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2267\" data-original=\"https://pic2.zhimg.com/v2-af39dc16809d0a31ab5f1a165f0ec4f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-af39dc16809d0a31ab5f1a165f0ec4f1_b.jpg\"/></figure><p>第 6 层卷积输出，第 7 层池化输出，共 128 个通道：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-77a3b30bbecb74927826fc80636e8600_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2267\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb\" width=\"2267\" data-original=\"https://pic1.zhimg.com/v2-77a3b30bbecb74927826fc80636e8600_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2267&#39; height=&#39;1130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2267\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2267\" data-original=\"https://pic1.zhimg.com/v2-77a3b30bbecb74927826fc80636e8600_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-77a3b30bbecb74927826fc80636e8600_b.jpg\"/></figure><p>第 8 层卷积输出，第 9 层池化输出，共 256 个通道：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-091d359cefa1d9d7d45e3698deb4ed49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2267\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb\" width=\"2267\" data-original=\"https://pic2.zhimg.com/v2-091d359cefa1d9d7d45e3698deb4ed49_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2267&#39; height=&#39;1130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2267\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2267\" data-original=\"https://pic2.zhimg.com/v2-091d359cefa1d9d7d45e3698deb4ed49_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-091d359cefa1d9d7d45e3698deb4ed49_b.jpg\"/></figure><p>这里我分别只展示了第0~9层网络输出后的特征图片，因为第9层后的所有特征图片大小都为13*13，已经呈现出人类肉眼难以理解的像素颗粒。但我们可以通过这个特征提取过程，直观的感受到 YOLO 的神经网络对一张图片究竟干了些什么。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART FINAL: Do it yourself</b></h2><p>这就是黑魔法神经网络如何预测一张图片的过程，当然这里面我隐藏了很多很多的原理细节，是这些细节才构成了神经网络，这些细节是人类智慧真正的结晶。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1hsgYTKg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">--&gt;附赠代码、特征数组和</a><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1hsgYTKg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特征</a><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1hsgYTKg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">图片，猛戳下载&lt;--</a></p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "物体识别", 
                    "tagLink": "https://api.zhihu.com/topics/19617234"
                }, 
                {
                    "tag": "卷积神经网络（CNN）", 
                    "tagLink": "https://api.zhihu.com/topics/20043586"
                }
            ], 
            "comments": [
                {
                    "userName": "Ren97", 
                    "userLink": "https://www.zhihu.com/people/048f71d9ea4cab39c46bc4ca06e5a97c", 
                    "content": "<p>你好。我想问一下如果查看YOLOv3特征图也是用提供的代码吗，我没太看明白怎么使用，比如里面txt文件和.ipynb的部分。方便的话可以提供以下运行步骤吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "cuishle琛", 
                    "userLink": "https://www.zhihu.com/people/7c92408962e69ede7070d6e8daf6ace4", 
                    "content": "<p>您好，我最近也在试图实现可视化yolo每一层的输出，想请教一下您是如何提取神经网络每一层输出的特征数组？万分感谢</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32172286", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 22, 
            "title": "5分钟GET AI - YOLO 如何做到一眼识别", 
            "content": "<p>本文攻略：通过分析 YOLO 源码，理解 YOLO 检测物体原理</p><p>建议玩家等级：技术圈外人(建议只看图片，也能理解)，AI新手，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点命令行基础</li><li>一点点 C++ 基础</li><li>一点点 AI 基础</li><li>一点点 YOLO 基础：<a href=\"https://zhuanlan.zhihu.com/p/32097670\" class=\"internal\">How to use YOLO with python</a></li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra</li><li>IDE：VSCode</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 理解 = 论文 + 源码</b></h2><p>抽空读了 <a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1612.08242\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">YOLO 作者的论文</a>，觉得对 YOLO 的理解还不够深刻，于是决定把 YOLO 源码拿出来撸一撸，撸完以后有点被作者大神的杰作感动到，是的~大神都是不走寻常路，人家用Python，大神只用C，指针、二级指针、内存地址都在大神的掌控之中。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 如何分析源码</b></h2><p>1. IDE：用 VSCode，安装 M$ 官方C++插件就可以阅读源码了</p><p>2. 分析：使用地球人都会的 printf() 方法打印输出帮助分析</p><p>3. 编译：命令行输入</p><div class=\"highlight\"><pre><code class=\"language-text\">make</code></pre></div><p>4. 运行：命令行输入</p><div class=\"highlight\"><pre><code class=\"language-text\">./darknet detect cfg/tiny-yolo.cfg weights/tiny-yolo.weights data/person.jpg</code></pre></div><p>一切顺利的话，控制台除了原有的输出之外，还能可以看到新加的分析输出</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-05328fb4fa11e58b68237da97ceb9e4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"708\" class=\"origin_image zh-lightbox-thumb\" width=\"725\" data-original=\"https://pic2.zhimg.com/v2-05328fb4fa11e58b68237da97ceb9e4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;725&#39; height=&#39;708&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"708\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"725\" data-original=\"https://pic2.zhimg.com/v2-05328fb4fa11e58b68237da97ceb9e4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-05328fb4fa11e58b68237da97ceb9e4d_b.jpg\"/></figure><blockquote><i>这里使用了其它高级语言通用的 “package.module.function()” 方式来标注调用到的C语言方法</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: Make your hands dirty</b></h2><p>通过 PART 2 输出的分析结果，我们可以看到 YOLO 检测一张图片一共有 6 个步骤，分别对应源码中的 6 个方法：</p><ol><li>主函数入口：examples.darknet.Main()</li><li>图片检测入口：examples.detector.test_detector()</li><li>神经网络预测：src.network.network_predict()</li><li>生成检测框：src.region_layer.get_region_boxes()</li><li>检测结果排序：src.box.do_nms_sort()</li><li>画出检测结果：src.image.draw_detections()</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>接下来开始我们真正的 YOLO 探索之旅：</p><p><b>Step 1. 主函数入口</b></p><p>只是分析命令行参数 argc argv, nothing special.</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 2. 图片检测入口</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-efedbcca0a2c31ccafde6e5e8be01ab1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"826\" data-original=\"https://pic2.zhimg.com/v2-efedbcca0a2c31ccafde6e5e8be01ab1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;826&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"826\" data-original=\"https://pic2.zhimg.com/v2-efedbcca0a2c31ccafde6e5e8be01ab1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-efedbcca0a2c31ccafde6e5e8be01ab1_b.jpg\"/></figure><p>做了很多初始化工作：</p><ol><li>读取文件 data/coco.names ，一共包含 80 个分类名称，说明神经网络能预测 80 个分类</li><li>根据 .cfg 和 .weights 文件加载神经网络，这里加载的是 Tiny YOLO，一共 16 层</li><li>指定检测图片数量1张</li><li>将我们要检测的图片尺寸640*424调整为416*416，这是神经网络输入图片的规定尺寸</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4e06fb98d6270c3fe89fb6c5d358f2e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1071\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"1071\" data-original=\"https://pic1.zhimg.com/v2-4e06fb98d6270c3fe89fb6c5d358f2e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1071&#39; height=&#39;440&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1071\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1071\" data-original=\"https://pic1.zhimg.com/v2-4e06fb98d6270c3fe89fb6c5d358f2e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4e06fb98d6270c3fe89fb6c5d358f2e8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 3. 神经网络预测</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3fba3b60a209b87617e53c7ab4e7cd9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic3.zhimg.com/v2-3fba3b60a209b87617e53c7ab4e7cd9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;377&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"706\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic3.zhimg.com/v2-3fba3b60a209b87617e53c7ab4e7cd9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3fba3b60a209b87617e53c7ab4e7cd9e_b.jpg\"/></figure><p>关于神经网络是如何做到预测的，这一期我们不做科学家，先做码农把它理解为一种黑魔法操作：</p><ol><li>第 0 层接收 416*416 大小，3 通道（RGB）的彩色图片，开启神经网络魔法旅程</li><li>经过第 1~14 层魔法变换后，得到一张 13*13 大小，425 通道的特征图片（feature map）</li><li>第 15 层对该特征图片进行终极奥义魔法，最终输出一维预测数组（predictions）包含 13*13*5*85 个数值。是的没错，作者的代码里把多维数组（矩阵）降到一维数组。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 4. 生成检测框（bounding box）</b></p><p>经过神经网络黑魔法操作后，我们得到了 13*13*5*85 个数值，深入分析这 4 个数字的意义，它们代表了 YOLO 思想的精髓</p><ol><li>13 * 13：代表了特征图（feature map）的宽*高，一共有 13 * 13 个特征单元。YOLO 将原始图片（416*416）平均划分成 13*13 个区域（cell），每个特征单元对应的一个图片区域（cell）</li><li>5：代表了 5 个形状不同的检测框（bounding box），YOLO 在每个图片区域（cell）都会生成 5 个形状不同的检测框（bounding box）以该区域（cell）的中心点为检测框（bounding box）的中心点去检测物体，所以 YOLO 一共会用 13*13*5 个检测框（bounding box）去检测一张图片</li><li>85：分拆成 3 部分理解，4 + 1 + 80</li></ol><ul><li>4：每个检测框（bounding box）包含 4 个坐标值 (x, y, width, height)</li><li>1：每个检测框（bounding box）都有 1 个检测物体自信值（0~1），理解为检测到物体的自信概率。</li><li>80：每个检测框（bounding box）都有 80 个分类检测概率值（0~1），理解为检测框内的物体分别可能是每个分类的概率。</li></ul><p>总结成一句话：一张 416*416 的图片，被平均划分成 13*13 个图片区域（cell），每个图片区域生成 5 个检测框（bounding box），每个检测框包含 85 个值（4 个坐标值 + 1 个检测物体自信值 + 80 个分类检测值），最后得到的一维预测数组（predictions）代表了图片中检测到的物体，数组共包含 13*13*5*85 个数值 predictions[0] ~ predictions[13*13*5*85-1]</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2a08e6106b4a436e86440b7fb28158f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"416\" data-rawheight=\"416\" class=\"content_image\" width=\"416\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;416&#39; height=&#39;416&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"416\" data-rawheight=\"416\" class=\"content_image lazy\" width=\"416\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a08e6106b4a436e86440b7fb28158f7_b.jpg\"/></figure><p>接下来我们解剖一维预测数组（predictions）中的每一个数值，这是个消耗脑细胞工程，我在循环中输出了所有生成的 13*13*5 个检测框（bounding box）： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8d20504cb87f50c13ab3a86ffd86a198_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1477\" data-rawheight=\"432\" class=\"origin_image zh-lightbox-thumb\" width=\"1477\" data-original=\"https://pic1.zhimg.com/v2-8d20504cb87f50c13ab3a86ffd86a198_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1477&#39; height=&#39;432&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1477\" data-rawheight=\"432\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1477\" data-original=\"https://pic1.zhimg.com/v2-8d20504cb87f50c13ab3a86ffd86a198_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8d20504cb87f50c13ab3a86ffd86a198_b.jpg\"/></figure><ul><li>row：检测框（bounding box）在 13 行中的哪一行</li><li>col：检测框（bounding box）在 13 列中的哪一列</li><li>cell：检测框（bounding box）在 13*13 个特征单元中的哪一个（在哪一个图片区域）</li><li>box：可以看到每个图片区域内循环了5次分别生成了5个检测框（bounding box）</li><li>index：每个检测框（bounding box）的索引值， 0~13*13*5-1</li><li>box_index：在一维预测数组（predictions）中，检测框（bounding box） 4 个坐标值的索引起始值（起始指针）</li><li>obj_index：在一维预测数组（predictions）中，检测框（bounding box） 1 个检测物体自信值的索引起始值（起始指针）</li><li>class_index：在一维预测数组（predictions）中，检测框（bounding box） 80 个分类概率值的索引起始值（起始指针）</li></ul><p>直接上我的分析答案：</p><ul><li>predictions[0] ~ predictions[13*13*1*85-1]：包含形状0检测框（bounding box）在图片中的所有预测值，共 14365 个数值</li><li>predictions[13*13*1*85] ~ predictions[13*13*2*85-1]：包含形状1检测框（bounding box）在图片中的所有预测值，共 14365 个数值</li><li>predictions[13*13*2*85] ~ predictions[13*13*3*85-1]：包含形状2检测框（bounding box）在图片中的所有预测值，共 14365 个数值</li><li>predictions[13*13*3*85] ~ predictions[13*13*4*85-1]：包含形状3检测框（bounding box）在图片中的所有预测值，共 14365 个数值</li><li>predictions[13*13*4*85] ~ predictions[13*13*5*85-1]：包含形状4检测框（bounding box）在图片中的所有预测值，共 14365 个数值</li><li>每 14365 个预测值分三部分：[13*13*4个数值, 13*13*1个数值, 13*13*80个数值]，依次表示在所有 13*13 个区域（cell）预测到的 4个坐标值 + 1个物体检测自信值 + 80分类检测概率值，循环中计算出的 box_index, obj_index 和 class_index 分别是这三部分起始索引值（起始指针）</li></ul><p>文字解释清楚后，如果没有理解的话，我们直接上图（干嘛不早上图）。</p><p>我取了其中3个图片区域（cell），区域坐标分别是 (1,1), (6,6), (9,9) ，生成 5 个检测框（bounding box）后的图片，注意到图片的尺寸仍然是416*416：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-47ec60cd766f59fbcfabc62bc56cfc95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1284\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"1284\" data-original=\"https://pic2.zhimg.com/v2-47ec60cd766f59fbcfabc62bc56cfc95_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1284&#39; height=&#39;440&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1284\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1284\" data-original=\"https://pic2.zhimg.com/v2-47ec60cd766f59fbcfabc62bc56cfc95_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-47ec60cd766f59fbcfabc62bc56cfc95_b.jpg\"/></figure><p>然后所有的检测框（bounding box）会根据原图片尺寸（640*424）进行一次校正：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-793f89bcc9ad9c10dc224a4aa23998de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1956\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"1956\" data-original=\"https://pic3.zhimg.com/v2-793f89bcc9ad9c10dc224a4aa23998de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1956&#39; height=&#39;448&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1956\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1956\" data-original=\"https://pic3.zhimg.com/v2-793f89bcc9ad9c10dc224a4aa23998de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-793f89bcc9ad9c10dc224a4aa23998de_b.jpg\"/></figure><p>YOLO 使用概率阈值（thresh）对所有检测框（bounding box）的 80 个分类概率值进行筛选，并制定了一套筛选规则：</p><ol><li>第一轮海选，每个检测框（bounding box）的80个分类内部先进行PK，选出一个概率值最高的冠军分类</li><li>第二轮预赛，冠军分类与概率阈值（thresh）进行PK，数值大于概率阈值的检测框（bounding box）才有资格进入决赛。概率阈值默认值为0.24(24%)，在命令行运行时可以使用 -thresh 参数进行调整</li></ol><p>这里我把通过预赛的检测框（bounding box）显示在图片上，可以看出只要是&gt;0.24默认阈值概率的分类概率值，就已经很准确了。</p><ul><li>分类 dog：有2个检测框（bounding box）通过预赛</li><li>分类 person：有3个检测框（bounding box）通过预赛</li><li>分类 horse：有5个检测框（bounding box）通过预赛</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b395756454d29da06887ed5b4324a10d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-b395756454d29da06887ed5b4324a10d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-b395756454d29da06887ed5b4324a10d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b395756454d29da06887ed5b4324a10d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 5. 检测结果排序</b></p><p>可以看到，如果检测框（bounding box）只通过预赛的话，会出现一个物体多个检测框的情况，显然我们需要最后的决赛来为每个物体PK出一个王者，决赛用到的PK方法叫做 IoU，表示两个检测框重合率（0~1），值越高越重合。<a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/lanchunhui/article/details/71190055\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Read more about IoU</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-baf3e069c8aa72cf49d7630690208222_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"457\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"457\" data-original=\"https://pic3.zhimg.com/v2-baf3e069c8aa72cf49d7630690208222_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;457&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"457\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"457\" data-original=\"https://pic3.zhimg.com/v2-baf3e069c8aa72cf49d7630690208222_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-baf3e069c8aa72cf49d7630690208222_b.jpg\"/></figure><p>通过输出分析，能看出决赛是如何进行的：</p><ol><li>分类 class: 1 (person) 有三个检测框（bounding box）#251, #420, #433 进入了最终的决赛</li><li>进行qsort对各自的检测概率降序排序</li><li>两两计算IoU，如果重合度 IoU&gt;0.3，就将概率低的选手淘汰</li><li>最终得出了分类 class: 1 (person) 的唯一王者检测框（bounding box）#420</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Step 6. 画出检测结果</b></p><p>最后的最后，就是将3个检测到的分类王者检测框（bounding box）画到原图上，并配上美美的颜色和抬头，保存为大家熟悉的 predictions.png。</p><blockquote>”只有冠军才会被大家记住，AI的世界同样如此“</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dafc2d35a0e440157ab880d5088bb815_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-dafc2d35a0e440157ab880d5088bb815_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-dafc2d35a0e440157ab880d5088bb815_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dafc2d35a0e440157ab880d5088bb815_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART FINAL: Do it yourself</b></h2><p>对于神经网络黑魔法好奇的同学，可以穿越去 <a href=\"https://zhuanlan.zhihu.com/p/32242018\" class=\"internal\">Convolution Neural Network in YOLO</a>，Have fun!</p><p><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1dFvsey9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">--&gt;附赠修改代码，猛戳下载&lt;--</a></p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p><p></p>", 
            "topic": [
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "物体识别", 
                    "tagLink": "https://api.zhihu.com/topics/19617234"
                }, 
                {
                    "tag": "AI技术", 
                    "tagLink": "https://api.zhihu.com/topics/20106982"
                }
            ], 
            "comments": [
                {
                    "userName": "夏夕空", 
                    "userLink": "https://www.zhihu.com/people/8f7dae81ff259128b785fe3cc41a3378", 
                    "content": "通俗易懂，赞一个", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Kissrabbit", 
                    "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                    "content": "<p>这个是yolo-v2吧</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>为什么不用经过darknet-19提取特征就直接神经网络检测了</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32097670", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 116, 
            "title": "5分钟GET AI - 用 Python 玩转 YOLO", 
            "content": "<p>本文攻略：如何使用最先进的AI技术，识别图片和视频中的物体</p><p>建议玩家等级：技术圈外人，AI零基础，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>命令行基础</li><li>Git 基础</li><li>Python 基础</li><li>Python ctypes：<a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/release/3.0.1/library/ctypes.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">英文党戳此链接</a>，<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/night-ride-depart/p/4907613.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中国人最爱此链接</a></li><li>几乎不需要 AI 基础</li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra</li><li>IDE：Jupyter Notebook, VSCode, Sublime, Atom</li><li>Python v3.6</li><li>NVIDIA 1080 Titan 显卡一块（非必需，人民币玩家可以有）</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1：What is YOLO</b></h2><p>YOLO 是时下最流行(state of the art)的物体检测(Object Detection) AI 模型之一，流行的原因是因为好用，好用的标准归纳为3条：</p><ol><li>检测范围广：YOLO9000 覆盖了9000种常用分类，YOLOv2 覆盖了PASCAL VOC和COCO数据集分类。（说人话：就是可以检测出9000种常见物体）</li><li>检测准确率高</li><li>检测速度快：平民玩家用普通CPU就能运行低配乞丐版（Tiny YOLO），人民币玩家用GPU运行高配豪华版 (YOLOv2)。作者大神给出的参考值是 Tiny YOLO 可以达到200FPS，YOLOv2 达到40FPS，当然这是用 NVIDIA Titan X 传奇装备跑出来的分数。</li></ol><blockquote><i>PASCAL VOC 和 COCO 数据集是什么？</i>数据集由成千上万张图片组成，AI通过学习数据集图片中包含的物体以及该物体的分类，最终能达到正确识别所有图片中的物体所属的分类。PASCAL VOC 和 COCO 是两个有名的图片物体分类数据集，同样有名的还有 ImageNet 数据集。<br/><br/><i>200FPS 是什么？</i>可以理解为一秒钟处理200张图片，普通视频24FPS肉眼就不会感到卡顿</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: How to get YOLO</b></h2><p>Step 1. Git 获取 YOLO 代码，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">git clone https://github.com/pjreddie/darknet</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>Step 2. 因为是用C++写的，所以需要编译下载后的 YOLO 代码，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd darknet\nmake</code></pre></div><p>编译成功后，发现 darknet 根目录下多了两个文件 libdarknet.so 和 libdarknet.a，这两家伙是干什么用的？Don&#39;t worry，这是C++源码编译后的产物，在这里我们不必关心这些细节</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Step 3. 下载 weights 文件</p><p>YOLO作者大神已经为我们准备好了YOLO不同的版本，先下载其中两个最具代表版本 Tiny YOLO（低配乞丐版） 和 YOLOv2（高配豪华版），每一个版本都由两个文件配对组成</p><p>cfg 文件：模型参数配置文件。该文件已经随源代码一起下载下来，保存在cfg目录。</p><p>weights 文件：模型学习好的权重文件。该文件较大，因为文件里面包含了从数据集中学习到的海量“知识”，这些“知识”正是AI之所以“聪明”的原因，需另外下载。为了方便管理我都保存在 weights 目录。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1u6MXhOciSF3hd1FHFzdANg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">猛击下载 tiny-yolo.weights</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1DB2k1pFxEMg3mBa-xY8BvQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">猛击下载 yolo.weights</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2c522429855ca141f83a2e185a9d19e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"638\" class=\"origin_image zh-lightbox-thumb\" width=\"1320\" data-original=\"https://pic3.zhimg.com/v2-2c522429855ca141f83a2e185a9d19e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1320&#39; height=&#39;638&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"638\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1320\" data-original=\"https://pic3.zhimg.com/v2-2c522429855ca141f83a2e185a9d19e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2c522429855ca141f83a2e185a9d19e2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: How to use YOLO</b></h2><p>完成 PART 2 后，来看看YOLO究竟有多Cool，先来识别2张作者大神提供的官方图片。</p><p>先试试高配豪华版 YOLOv2，运行过程会有点慢，但准确率很高，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">./darknet detect cfg/yolo.cfg weights/yolo.weights data/dog.jpg</code></pre></div><p>再试试低配乞丐版 Tiny YOLO，运行过程很快，以损失一些准确率作为代价，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">./darknet detect cfg/tiny-yolo.cfg weights/tiny-yolo.weights data/dog.jpg</code></pre></div><p>运行后，命令行输出的信息包含：神经网络（没错，就是用这个很炫酷的东西实现的）模型每一层的参数，最终的分类结果和分类结果自信度（0.81可以理解为81%概率属于该分类）。（这部分看不懂的玩家可以自行忽略，其实很重要的喂！）</p><p>在 darknet 根目录下会生成一张结果图片 predictions.png，操作不太友好的是识别不同图片永远都只会生成同一个结果图片文件名，并且覆盖之前的结果图片。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cafbc6d04a81ed2f01e82f09e72962ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb\" width=\"774\" data-original=\"https://pic3.zhimg.com/v2-cafbc6d04a81ed2f01e82f09e72962ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;774&#39; height=&#39;616&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"774\" data-original=\"https://pic3.zhimg.com/v2-cafbc6d04a81ed2f01e82f09e72962ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cafbc6d04a81ed2f01e82f09e72962ca_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-515866d351f8cc776301cb2ea6569097_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"646\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"646\" data-original=\"https://pic4.zhimg.com/v2-515866d351f8cc776301cb2ea6569097_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;646&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"646\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"646\" data-original=\"https://pic4.zhimg.com/v2-515866d351f8cc776301cb2ea6569097_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-515866d351f8cc776301cb2ea6569097_b.jpg\"/></figure><p>此处应有掌声，很多玩家会“Wow！“一声，感叹AI的强大</p><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><i>PART 4 章节为码农必修，小白选修</i></blockquote><h2><b>PART 4: Make your hands dirty</b></h2><p>PART 3 的2张结果图片引发了一系列思考：</p><p>这么Cool的应用能不能应用到视频检测？</p><p>这么Cool的应用我该怎么拿来调用，让我的产品智商向阿法狗看齐？</p><p>......接下来我们要做的，就是撸起袖子敲代码</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Step 1. 封装YOLO</p><p>调用YOLO的原理本质是调用 PART 2 编译好的库文件 libdarknet.so 里的方法。Python ctypes（详见技能4）能帮助我们使用Python调用C++库里的方法，这里还是要感谢作者大神已经为我们写好了 python/darknet.py，该文件的作用是把YOLO库中的C++方法一一翻译成Python方法并封装成Python模块，让我们完全可以忽略C++部分，只需要实现调用Python方法即可。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7ae0be64a5c6a31d057a5d5cb2a6017a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1458\" class=\"origin_image zh-lightbox-thumb\" width=\"2560\" data-original=\"https://pic3.zhimg.com/v2-7ae0be64a5c6a31d057a5d5cb2a6017a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2560&#39; height=&#39;1458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2560\" data-original=\"https://pic3.zhimg.com/v2-7ae0be64a5c6a31d057a5d5cb2a6017a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7ae0be64a5c6a31d057a5d5cb2a6017a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Step 2. 检测图片</p><p>站在大神的肩膀上，只敲了6行Python代码，就能检测任意图片了</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">python.darknet</span> <span class=\"k\">as</span> <span class=\"nn\">dn</span>\n\n<span class=\"n\">dn</span><span class=\"o\">.</span><span class=\"n\">set_gpu</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">dn</span><span class=\"o\">.</span><span class=\"n\">load_net</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&#34;cfg/tiny-yolo.cfg&#34;</span><span class=\"p\">),</span>\n                  <span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&#34;weights/tiny-yolo.weights&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">dn</span><span class=\"o\">.</span><span class=\"n\">load_meta</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&#34;cfg/coco.data&#34;</span><span class=\"p\">))</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dn</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&#34;data/dog.jpg&#34;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span></code></pre></div><p>运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ffea6d375dd0930dffbc2fc9fa27aa76_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"825\" data-rawheight=\"576\" class=\"origin_image zh-lightbox-thumb\" width=\"825\" data-original=\"https://pic3.zhimg.com/v2-ffea6d375dd0930dffbc2fc9fa27aa76_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;825&#39; height=&#39;576&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"825\" data-rawheight=\"576\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"825\" data-original=\"https://pic3.zhimg.com/v2-ffea6d375dd0930dffbc2fc9fa27aa76_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ffea6d375dd0930dffbc2fc9fa27aa76_b.jpg\"/></figure><p>注意几点：</p><ol><li>Python2使用原始字符串&#34;cfg/tiny-yolo.cfg&#34;，Python3必须使用str.encode(&#34;cfg/tiny-yolo.cfg&#34;)进行字符串格式转换，因为2个版本的Python字符串数据结构有差异，作者大神封装的API是Python2版本，需要向下兼容</li><li>我的本子只有CPU，所以这里用了低配乞丐版 Tiny YOLO 保证运行速度，GPU玩家可以根据自己的情况替换 cfg 和 weights 文件。（贫穷限制了AI的运算能力）</li><li>meta 是数据集分类配置文件，因为使用的 cfg 和 weights 文件是基于COCO数据集训练的，所以检测的分类结果也得对应COCO数据集分类结果</li><li>输出结果 r 是一维数组 [(物体1), (物体2), (物体3)]，代表了一共检测到几个物体，每个物体均包含以下信息：(分类名称, 分类自信度, (物体中心x, 物体中心y, 物体宽度, 物体高度))</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>Step 3. 视频实时检测</p><p>视频的每一帧本质是一张图片，所以我们设计了一个处理管道（func pipeline）循环处理每一帧图片：</p><p>1）输入待处理图片（img）</p><p>2）使用YOLO检测，并获得检测结果（result）</p><p>3）在待处理图片（img）上画出检测结果（result），生成最终图片（img_final）</p><p>4）输出最终图片（img_final）</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">def</span> <span class=\"nf\">pipeline</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">):</span>\n    <span class=\"c1\"># image data transform：</span>\n    <span class=\"c1\"># img - cv image</span>\n    <span class=\"c1\"># im - yolo image</span>\n    <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">array_to_image</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n    <span class=\"n\">dn</span><span class=\"o\">.</span><span class=\"n\">rgbgr_image</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n    <span class=\"n\">img_final</span> <span class=\"o\">=</span> <span class=\"n\">draw_boxes</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">img_final</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>主程序使用 OpenCV 调用摄像头，并从摄像头获取视频流，按&#39;q&#39;退出主程序</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n<span class=\"n\">count_frame</span><span class=\"p\">,</span> <span class=\"n\">process_every_n_frame</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># get camera device</span>\n<span class=\"n\">cap</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"c1\"># get a frame</span>\n    <span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n    <span class=\"n\">count_frame</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># show a frame</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">fx</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">fy</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>  <span class=\"c1\"># resize image half</span>\n    <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">&#34;Video&#34;</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if running slow on your computer, try process_every_n_frame = 10</span>\n    <span class=\"k\">if</span> <span class=\"n\">count_frame</span> <span class=\"o\">%</span> <span class=\"n\">process_every_n_frame</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">&#34;YOLO&#34;</span><span class=\"p\">,</span> <span class=\"n\">pipeline</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># press keyboard &#39;q&#39; to exit</span>\n    <span class=\"k\">if</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span> <span class=\"o\">==</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">&#39;q&#39;</span><span class=\"p\">):</span>\n        <span class=\"k\">break</span>\n\n<span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">destroyAllWindows</span><span class=\"p\">()</span></code></pre></div><p><a href=\"https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1c2po0Di\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">--&gt;附赠完整代码攻略，猛戳下载&lt;--</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>此刻掌声应再次响起，可以打开手机相册对着摄像头多检测一些图片，恭喜你创造了一个连泰迪熊和单身狗也能准确识别的AI，这还只是CPU配Tiny YOLO的结果，如果用GPU搭配YOLOv2，AI表现会更理想</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b8d59310ba40311bf5bf180f3d886bc9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-b8d59310ba40311bf5bf180f3d886bc9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;858&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-b8d59310ba40311bf5bf180f3d886bc9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b8d59310ba40311bf5bf180f3d886bc9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e66fe5bfa4924b3737edafeedfcc6419_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"854\" class=\"origin_image zh-lightbox-thumb\" width=\"1276\" data-original=\"https://pic2.zhimg.com/v2-e66fe5bfa4924b3737edafeedfcc6419_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1276&#39; height=&#39;854&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"854\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1276\" data-original=\"https://pic2.zhimg.com/v2-e66fe5bfa4924b3737edafeedfcc6419_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e66fe5bfa4924b3737edafeedfcc6419_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 5: Use YOLO in our life</b></h2><p>常见的YOLO可使用场景例如：</p><ol><li>停车场的车牌自动识别</li><li>相机的人脸自动识别</li><li>无人驾驶的车辆、行人和交通标志识别</li><li>商场和街道的人流、车流检测统计</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART FINAL: 更多攻略，Have fun!</b></h2><p>想要了解 YOLO 工作原理，穿越去 <a href=\"https://zhuanlan.zhihu.com/p/32172286\" class=\"internal\">5分钟学会AI - How YOLO only look once</a></p><p>想要了解 YOLO 核心技术，穿越去 <a href=\"https://zhuanlan.zhihu.com/p/32242018\" class=\"internal\">5分钟学会AI - Convolution Neural Network in YOLO</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//pjreddie.com/darknet/yolo/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">YOLO Official</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/allanzelener/YAD2K\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Keras 也能用 YOLO: YAD2K - Yet Another Darknet 2 Keras</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//machinethink.net/blog/yolo-coreml-versus-mps-graph/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">iPhone 也能用 YOLO: YOLO with Core ML</a></p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "物体识别", 
                    "tagLink": "https://api.zhihu.com/topics/19617234"
                }, 
                {
                    "tag": "AI技术", 
                    "tagLink": "https://api.zhihu.com/topics/20106982"
                }
            ], 
            "comments": [
                {
                    "userName": "张均隆", 
                    "userLink": "https://www.zhihu.com/people/04445b33712f0fe61530c807bbdc62bb", 
                    "content": "能不能介绍一下如何训练？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Orange", 
                    "userLink": "https://www.zhihu.com/people/f4f3b527e1a25675fcaa5161d8fc2d0c", 
                    "content": "<p>用自己的数据可以用yolo训练一个二分类模型吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "古柳-DesertsX", 
                    "userLink": "https://www.zhihu.com/people/4606d5b7cdaac898cd5b73cc70b91f7d", 
                    "content": "不错", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>大佬18天就在看了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "古柳-DesertsX"
                        }, 
                        {
                            "userName": "古柳-DesertsX", 
                            "userLink": "https://www.zhihu.com/people/4606d5b7cdaac898cd5b73cc70b91f7d", 
                            "content": "我不是，我没有，别瞎说啊", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "weweiwew", 
                    "userLink": "https://www.zhihu.com/people/72e557984354c0b700afa9118c3acfbe", 
                    "content": "大佬", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Askfk", 
                    "userLink": "https://www.zhihu.com/people/7b589047045c5f587690ede945a2afd0", 
                    "content": "<p>您好看了您的文章获益匪浅，但是我在实际操作中遇到了一些问题。我用的是macos系统，按照yolo官网的说明在终端运行可以使用gpu运算，可在python中设置darknet.set_gpu(1)之后，程序仍是cpu运算，希望大神为我解答一下，谢谢。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>GPU我本地没跑过。我的猜测应该是只支持NVIDIA的显卡，mac如果是笔记本通常是intel显卡</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Askfk"
                        }, 
                        {
                            "userName": "Askfk", 
                            "userLink": "https://www.zhihu.com/people/7b589047045c5f587690ede945a2afd0", 
                            "content": "<p>我的mac是GTX750M显卡，而且在终端调用YOLO官网示例代码也可以进行gpu运算，但是在python中就无法调用gpu，我尝试了把cuda.c中cuda_set_device函数的gpu_index直接设置为1，也无法实现gpu运算，我对c++了解的不是很多，希望大神能够帮我，谢谢。</p><p></p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "雅思要过8", 
                    "userLink": "https://www.zhihu.com/people/6465723bcd5ce7a68ea454ce2f7b45be", 
                    "content": "<p>您好！看了这篇文章，受益匪浅，我想请教一下用python跑带有nnpack的darknet怎么用它本来的darknet.py文件不行呢？一编译它就报错，说什么undefined symbol:cvWaitKey，在网上查了很久资料也没解决，求教大佬~（急）</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "嘻嘻嘻嘻", 
                    "userLink": "https://www.zhihu.com/people/aba85e6e80320b046d69d06d2a0e5541", 
                    "content": "<p>cd darknet<br>make   </p><p>为什么我运行总是bash-make command not found</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我想问一下，我也出现了这样的问题，你是怎么解决的？非常感谢！</p>", 
                            "likes": 0, 
                            "replyToAuthor": "嘻嘻嘻嘻"
                        }
                    ]
                }, 
                {
                    "userName": "陈旭源", 
                    "userLink": "https://www.zhihu.com/people/5723f3abab9e70917d2bb31e869cf447", 
                    "content": "<p>谢谢，帮到我了hhh</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "不为人知", 
                    "userLink": "https://www.zhihu.com/people/521a98886f99b9a6a3bbf279739d8d0d", 
                    "content": "<p>麻烦问一下FLOPS一栏里面，Bn是什么的缩写。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "fnima", 
                    "userLink": "https://www.zhihu.com/people/0652712d703111ee9229e9f1e9630414", 
                    "content": "<p>你好，它显示无法打开libdarknet.so文件。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "椰子le", 
                            "userLink": "https://www.zhihu.com/people/a759bb74d6544b360c27289508c2291a", 
                            "content": "libdarknet.so路径改一下就行了", 
                            "likes": 0, 
                            "replyToAuthor": "fnima"
                        }
                    ]
                }, 
                {
                    "userName": "OjoRojo", 
                    "userLink": "https://www.zhihu.com/people/141f133c25936801ccedb3e09d390139", 
                    "content": "<p>darknet不是用C++写的，是用C和CUDA写的</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>谢谢指正</p>", 
                            "likes": 0, 
                            "replyToAuthor": "OjoRojo"
                        }
                    ]
                }, 
                {
                    "userName": "椰子le", 
                    "userLink": "https://www.zhihu.com/people/a759bb74d6544b360c27289508c2291a", 
                    "content": "python接口调用的检测时间和darknet下面的检测时间为什么会有一个数量级的差距呢，大神能回答一下嘛", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这个不能用WIN操作吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "翻翻学姐", 
                    "userLink": "https://www.zhihu.com/people/a00904ee84fdeee06a9da44b80e5c712", 
                    "content": "<p>运行python 版本的 <a href=\"http://link.zhihu.com/?target=http%3A//darknet.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">darknet.py</a> 没有生成的prediction.png 图了，请问一下要怎样存预测出来的结果图？</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33123924", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 12, 
            "title": "5分钟GET全栈开发 - 增删改查的取经之路", 
            "content": "<p>本文攻略：独立全栈开发一个项目，实现 Restful 接口，实现 Web 服务，实现数据库增删改查（CRUD）</p><p>建议玩家等级：技术小白，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点命令行基础</li><li>一点点 GO 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/go/go-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三天包学会</a></li><li>一点点 Restful API 基础</li><li>一点点 MongoDB 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/mongodb/mongodb-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一天包学会</a></li><li>一点点全栈开发知识：<a href=\"https://zhuanlan.zhihu.com/p/33003538\" class=\"internal\">5分钟学会全栈开发</a></li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra（Windows也没毛病）</li><li>IDE：VSCode</li><li>Restful API 工具：Paw、Postman 或者 Swagger Editor</li><li>数据库：MongoDB</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 增删改查的前世今生 What is CRUD</b></h2><p>全栈开发这件事，其本质是把数据从前端开始，翻山越岭，历经81难，最终运送到数据库的过程。</p><p>举个栗子，几乎每个商业项目都会有分类（Category）模块，假设星巴克有4种商品分类：咖啡、甜品、三明治、茶瓦纳。</p><p>而伴随着分类数据一起诞生的是数据操作孪生四兄弟：增删改查（CRUD）。学过数据库的玩家对这四个家伙那一定是又爱又恨。</p><ol><li>增（Create）：增加一个分类，从无到有</li><li>删（Delete）：删除一个分类，从有变无</li><li>改（Update）：修改一个分类，已存在的分类，只是内容变了</li><li>查（Retrieve）：查询一个分类的一切内容</li></ol><p>在全栈开发的每一个栈里，我们都将和操作四兄弟（CRUD）形影不离。</p><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><i>本篇文章会暂时先忽略前端实现增删改查的细节，直接从前端调用 Restful API 说起，关于前端开发实现会在下篇文章着重全篇讲解</i></blockquote><h2><b>PART 2: 增删改查的前端数据起点 - Restful API</b></h2><p>栗子中，假设一个分类数据 ‘咖啡’ 已被前端操作完毕，放在了 Restful API 邮政局门口准备被 HTTP 运送去被指定的后端（云端）数据加工厂，HTTP 运送 ’咖啡‘ 分类的时候会严格按照 Restful 邮政标准流程，流程中规定了其中两件很重要的事：</p><ul><li>HTTP 使用 URL 规范告诉数据加工厂，这条 ‘咖啡’ 分类数据将被送到工厂里处理 ‘分类’ 的部门</li><li>HTTP 使用 Method 规范告诉数据加工厂，这条 ‘咖啡’ 分类数据将在处理 ‘分类’ 部门中进行增删改查（CRUD）中的哪个加工操作</li></ul><p>于是我们实现4个 Restful API，分别对应分类（Category）的增删改查（CRUD）4个操作：</p><ol><li>增。HTTP URL：<a href=\"https://link.zhihu.com/?target=http%3A//xn--yfr8tk2g3by58b/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://{加工厂地址}/</a>api/category/Add，HTTP Method：POST</li><li>删。HTTP URL：<a href=\"https://link.zhihu.com/?target=http%3A//xn--yfr8tk2g3by58b/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://{加工厂地址</a><a href=\"https://link.zhihu.com/?target=http%3A//xn--yfr8tk2g3by58b/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">}/</a>api/category/edit，HTTP Method：DELETE</li><li>改。HTTP URL：<a href=\"https://link.zhihu.com/?target=http%3A//xn--yfr8tk2g3by58b/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://{加工厂地址}/</a>api/category/remove，HTTP Method：PUT</li><li>查。HTTP URL：<a href=\"https://link.zhihu.com/?target=http%3A//xn--yfr8tk2g3by58b/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://{加工厂地址}/</a>api/category/list，HTTP Method：GET</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b9a93a253da01e376485df037a7b49f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1098\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb\" width=\"1098\" data-original=\"https://pic2.zhimg.com/v2-b9a93a253da01e376485df037a7b49f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1098&#39; height=&#39;656&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1098\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1098\" data-original=\"https://pic2.zhimg.com/v2-b9a93a253da01e376485df037a7b49f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b9a93a253da01e376485df037a7b49f1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><i>后端加工厂可以是一个体系结构简单的传统小作坊，也可以是一个体系结构及其大而复杂的现代化智能工厂。这取决于后端程序处理的具体业务逻辑需求以及后端程序架构师的设计，这又是一个很大的范畴，本篇文章不做详细讲解。</i></blockquote><h2><b>PART 3: 增删改查的后端数据加工厂 - GO</b></h2><p>我们的后端加工厂用了一种常见的架构叫做MVC（Model-View-Controller），简单易用<b>。</b>我们将加工厂分为以下几个部门一起协同工作：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. Web 服务部门</b></p><p>这是个炒鸡忙碌的部门，他们熟知  Restful API 规范标准，从 HTTP 手里拿到 ‘咖啡’ 分类数据后（HTTP Request），并把 ‘咖啡’ 数据精准无误送给 Controllers 部门对应的那个分类加工操作去处理，等待处理结束后将 ‘咖啡’ 处理结果通过 HTTP 原路交还给前端（HTTP Response）。</p><p>我们墙裂推荐使用 gin 这个第三方 Web Server API 并<a href=\"https://link.zhihu.com/?target=https%3A//github.com/gin-gonic/gin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">献上 gin 的地址</a>。</p><p>我们用 gin 定义了4个路由，分别对应之前定义的4个 Restful API，并交由 Controllers 部门里4个方法进行 ’咖啡‘ 分类操作处理：</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"c1\">// Handle Restful API: /api\n</span><span class=\"c1\"></span><span class=\"nx\">app</span> <span class=\"o\">:=</span> <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nf\">Group</span><span class=\"p\">(</span><span class=\"s\">&#34;/api&#34;</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">GET</span><span class=\"p\">(</span><span class=\"s\">&#34;/category/list&#34;</span><span class=\"p\">,</span> <span class=\"nx\">controllers</span><span class=\"p\">.</span><span class=\"nx\">GetCategoryList</span><span class=\"p\">)</span>\n\t<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">POST</span><span class=\"p\">(</span><span class=\"s\">&#34;/category/add&#34;</span><span class=\"p\">,</span> <span class=\"nx\">controllers</span><span class=\"p\">.</span><span class=\"nx\">CategoryAdd</span><span class=\"p\">)</span>\n\t<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">PUT</span><span class=\"p\">(</span><span class=\"s\">&#34;/category/edit&#34;</span><span class=\"p\">,</span> <span class=\"nx\">controllers</span><span class=\"p\">.</span><span class=\"nx\">CategoryEdit</span><span class=\"p\">)</span>\n\t<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">DELETE</span><span class=\"p\">(</span><span class=\"s\">&#34;/category/remove&#34;</span><span class=\"p\">,</span> <span class=\"nx\">controllers</span><span class=\"p\">.</span><span class=\"nx\">CategoryRemove</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. Model 部门</b></p><p>这个部门比较闲，但很严谨，他们定义了一个分类的规范，在后端长什么样子，在前端长什么样子（json），在数据库又长什么样子（bson）。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">type</span> <span class=\"nx\">Category</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">ID</span>       <span class=\"nx\">bson</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span> <span class=\"s\">`bson:&#34;_id&#34; json:&#34;id&#34;`</span>\n\t<span class=\"nx\">Title</span>    <span class=\"kt\">string</span>        <span class=\"s\">`bson:&#34;title&#34; json:&#34;title&#34;`</span>\n\t<span class=\"nx\">IsActive</span> <span class=\"kt\">int8</span>          <span class=\"s\">`bson:&#34;is_active&#34; json:&#34;is_active&#34;`</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. Controller 部门</b></p><p>这个部门是核心业务处理部门，所有数据都要在这个部门进行加工处理后才能出厂，我们定义了4个方法来分别处理 ’咖啡‘ 分类的增删改查4个操作。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">CategoryAdd</span><span class=\"p\">()</span> <span class=\"p\">{}</span> <span class=\"c1\">// 增\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">CategoryRemove</span><span class=\"p\">()</span> <span class=\"p\">{}</span> <span class=\"c1\">// 删\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">CategoryEdit</span><span class=\"p\">()</span> <span class=\"p\">{}</span> <span class=\"c1\">// 改\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">GetCategoryList</span><span class=\"p\">()</span> <span class=\"p\">{}</span> <span class=\"o\">//</span> <span class=\"nx\">查</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4. DB 部门</b></p><p>这个部门是干脏活累活的部门，但又很重要的部门。他们听从 Controllers 部门的指挥，负责把 ’咖啡‘ 分类数据在 Controllers 部门和数据库之间进行运输。</p><p>我们使用的数据库是 MongoDB，所以我们墙裂推荐使用 mgo，mgo 是一个帮助GO语言操作MongoDB的第三方API，同样<a href=\"https://link.zhihu.com/?target=http%3A//labix.org/mgo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">献上 mgo 地址</a>。</p><p>然后 Controllers 就只需要3行代码，就可以轻松操作 MongoDB：</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">session</span><span class=\"p\">,</span> <span class=\"nx\">db</span> <span class=\"o\">:=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nf\">Get</span><span class=\"p\">()</span>\n<span class=\"nx\">collection</span> <span class=\"o\">:=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nf\">C</span><span class=\"p\">(</span><span class=\"s\">&#34;category&#34;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nf\">Insert</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"c1\">// 增\n</span><span class=\"c1\"></span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nf\">Update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"c1\">// 删，改\n</span><span class=\"c1\"></span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">().</span><span class=\"nf\">One</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"nx\">查</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5. Libs 部门</b></p><p>这个部门是支持部门，我们会把一些常用的公共操作和方法一起放在这里，提供给所有其他部门使用。</p><p>着重提一下 Libs 下的日志部门，在开发和运维的过程中，排查问题和数据统计的重要来源是系统日志，所以日志部门事无巨细的记录着所有工厂里大大小小的事情，虽然做的事情并不起眼，但离开了他们，一旦系统出任何问题的时候就会变得毫无头绪，所以当系统发生问题的时候，日志的作用堪称全厂MVP。</p><p>我们使用了一款很优雅的第三方日志库 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/op/go-logging\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Golang logging</a>，来看看它的颜值有多高吧。</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Debugf</span><span class=\"p\">(</span><span class=\"s\">&#34;debug %s&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;hello&#34;</span><span class=\"p\">)</span> <span class=\"c1\">// 常用于开发调试信息输出\n</span><span class=\"c1\"></span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Info</span><span class=\"p\">(</span><span class=\"s\">&#34;info&#34;</span><span class=\"p\">)</span> <span class=\"c1\">// 最普通的信息输出\n</span><span class=\"c1\"></span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Notice</span><span class=\"p\">(</span><span class=\"s\">&#34;notice&#34;</span><span class=\"p\">)</span> <span class=\"c1\">// 比 Info 更重要一点的信息输出\n</span><span class=\"c1\"></span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Warning</span><span class=\"p\">(</span><span class=\"s\">&#34;warning&#34;</span><span class=\"p\">)</span> <span class=\"c1\">// 系统有警告，但仍然可以正常运行\n</span><span class=\"c1\"></span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Error</span><span class=\"p\">(</span><span class=\"s\">&#34;err&#34;</span><span class=\"p\">)</span> <span class=\"c1\">// 系统发生错误，有可能无法正常运行\n</span><span class=\"c1\"></span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Critical</span><span class=\"p\">(</span><span class=\"s\">&#34;crit&#34;</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"nx\">系统崩溃</span><span class=\"err\">，</span><span class=\"nx\">无法正常运行</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8e79f1a552a4043d3e20b6dca54ea927_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"856\" data-original=\"https://pic4.zhimg.com/v2-8e79f1a552a4043d3e20b6dca54ea927_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;856&#39; height=&#39;264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"856\" data-original=\"https://pic4.zhimg.com/v2-8e79f1a552a4043d3e20b6dca54ea927_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8e79f1a552a4043d3e20b6dca54ea927_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: 增删改查的数据归宿 - MongoDB</b></h2><p>我们先讲解一下传统 SQL （例如 MySQL）是怎么做增删改查操作的：</p><div class=\"highlight\"><pre><code class=\"language-sql\"><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">category</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">&#39;5a4e5edb51ed8c6880ca11b7&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;咖啡&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"o\">#</span> <span class=\"err\">增</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">category</span> <span class=\"k\">SET</span> <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5a4e5edb51ed8c6880ca11b7&#39;</span><span class=\"p\">;</span> <span class=\"o\">#</span> <span class=\"err\">删</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">category</span> <span class=\"k\">SET</span> <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Coffee&#39;</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5a4e5edb51ed8c6880ca11b7&#39;</span><span class=\"p\">;</span> <span class=\"o\">#</span> <span class=\"err\">改</span>\n<span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">category</span> <span class=\"k\">WHERE</span> <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">#</span> <span class=\"err\">查</span></code></pre></div><blockquote><i>Tips：通常商业项目不会真正物理删除一条已存在的数据，所以我们加一个 is_active 字段表示逻辑删除，1-代表可使用，0-代表已删除</i></blockquote><p>很久很久以前，我们的后端 DB 部门会使用一个封装好的 SQLHelper API 来操作数据库：</p><div class=\"highlight\"><pre><code class=\"language-csharp\"><span class=\"n\">SQLHelper</span><span class=\"p\">.</span><span class=\"n\">Connect</span><span class=\"p\">(</span><span class=\"s\">&#34;Server=localhost;Port=3306;Database=category;&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">SQLHelper</span><span class=\"p\">.</span><span class=\"n\">Open</span><span class=\"p\">()</span>\n<span class=\"kt\">string</span> <span class=\"n\">sql</span> <span class=\"p\">=</span> <span class=\"s\">&#34;UPDATE category SET is_active = 0 WHERE id = &#39;5a4e5edb51ed8c6880ca11b7&#39;&#34;</span>\n<span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"n\">SQLHelper</span><span class=\"p\">.</span><span class=\"n\">Execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n<span class=\"n\">SQLHelper</span><span class=\"p\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n</code></pre></div><p>虽然已经很方便了，但是我们总是嫌弃数据库操作不够聪明，每次都需要编写 SQL，于是有了一种更 Popular 的做法称之为 ORM，这里省略了很多 ORM 原理和实现细节，最终代码只需要这么写：</p><div class=\"highlight\"><pre><code class=\"language-csharp\"><span class=\"n\">Category</span> <span class=\"n\">model</span> <span class=\"p\">=</span> <span class=\"n\">Factory</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"s\">&#34;Category&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">ID</span> <span class=\"p\">=</span> <span class=\"s\">&#34;5a4e5edb51ed8c6880ca11b7&#34;</span>\n<span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">Remove</span><span class=\"p\">()</span>\n</code></pre></div><blockquote><i>至于复杂的 ORM 是怎么把数据库的字段变成 Model 对象的，都一并交给 Factory.Create() 这个部门去实现，本篇文章不做详细讲解。</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>我们再回过来讲一下 NoSQL 的 MongoDB 是怎么做增删改查操作的：</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">category</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">({</span><span class=\"s\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"nf\">ObjectId</span><span class=\"p\">(</span><span class=\"s\">&#34;5a4e5edb51ed8c6880ca11b7&#34;</span><span class=\"p\">),</span> <span class=\"s\">&#34;title&#34;</span><span class=\"p\">:</span> <span class=\"s\">&#34;咖啡&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;is_active&#34;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"err\">#</span> <span class=\"nx\">增</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">category</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"s\">&#34;_id&#34;</span> <span class=\"p\">:</span> <span class=\"nf\">ObjectId</span><span class=\"p\">(</span><span class=\"s\">&#34;5a4e5edb51ed8c6880ca11b7&#34;</span><span class=\"p\">)},</span> <span class=\"p\">{</span><span class=\"err\">$</span><span class=\"nx\">set</span><span class=\"p\">:{</span><span class=\"s\">&#34;is_active&#34;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}})</span> <span class=\"err\">#</span> <span class=\"nx\">删</span> <span class=\"nx\">改</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">category</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">()</span> <span class=\"err\">#</span> <span class=\"nx\">查</span></code></pre></div><p>我们的后端 DB 部门没有做什么 ORM 处理操作，事实上 NoSQL 也不需要 ORM，我们使用后端 DB 部门使用的 mgo 作用类似上面提到的 SQLHelper，帮助后端方便的进行 MongoDB 增删改查数据操作。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART Final: 全栈测试</b></h2><p>最后的环节，让我们测试一下我们敲完的代码，测试之前先确认几点：</p><ol><li>Web Server 默认端口 8080 没有被占用。占用了可换其他端口。</li><li>MongoDB 正常启动运行，默认端口 27017。</li><li>使用的第三方库都正常获取到了本地，获取方式很简单，命令行输入：</li></ol><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/gin-gonic/gin\ngo get gopkg.in/mgo.v2\ngo get github.com/op/go-logging</code></pre></div><p>一切准备就绪，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">go run main.go</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-482d7cfc89420f901213e856d68475ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1112\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb\" width=\"1112\" data-original=\"https://pic1.zhimg.com/v2-482d7cfc89420f901213e856d68475ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1112&#39; height=&#39;616&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1112\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1112\" data-original=\"https://pic1.zhimg.com/v2-482d7cfc89420f901213e856d68475ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-482d7cfc89420f901213e856d68475ec_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9ee453c7f707eac64b224261568b7cad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2196\" data-rawheight=\"1434\" class=\"origin_image zh-lightbox-thumb\" width=\"2196\" data-original=\"https://pic2.zhimg.com/v2-9ee453c7f707eac64b224261568b7cad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2196&#39; height=&#39;1434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2196\" data-rawheight=\"1434\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2196\" data-original=\"https://pic2.zhimg.com/v2-9ee453c7f707eac64b224261568b7cad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9ee453c7f707eac64b224261568b7cad_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a0accbd13a774c18a3eeddb998fccc9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"774\" data-original=\"https://pic3.zhimg.com/v2-a0accbd13a774c18a3eeddb998fccc9a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;774&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"774\" data-original=\"https://pic3.zhimg.com/v2-a0accbd13a774c18a3eeddb998fccc9a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a0accbd13a774c18a3eeddb998fccc9a_b.jpg\"/></figure><p>此处应有掌声~</p><p>现在我们离全栈工程师就只差一个前端的距离了，<a href=\"https://zhuanlan.zhihu.com/p/33249503\" class=\"internal\">只需下一篇5分钟学习</a>，就能解锁全栈工程师。</p><p>最后献上<a href=\"https://link.zhihu.com/?target=https%3A//github.com/fengjihua/DemoFullStack/releases/tag/v0.1.0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">本文代码</a>，学会使用 Github 也是全栈工程师必修技能。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "全栈开发", 
                    "tagLink": "https://api.zhihu.com/topics/20043281"
                }, 
                {
                    "tag": "全栈工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19940527"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33003538", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 0, 
            "title": "5分钟GET全栈开发 - 全栈的乐趣", 
            "content": "<p>本文攻略：解惑全栈开发，如何独立全栈开发一个项目</p><p>建议玩家等级：技术小白，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 理解全栈 Full Stack</b></h2><p>1. 全栈开发攻城狮是什么鬼</p><p>举个栗子：2088年教育部宣布任何学生可以只选择一门课程进行学习，于是巴菲特同学选了数学，杰克马同学选了外语，马斯克同学和我都选了数学、物理和化学。在自我介绍时，巴菲特说自己是个数学学生，杰克马说自己是个外语学生，马斯克很拽的向世界宣布自己是<b>全栈</b>学生，我也觉得自己作为全栈学生好像有了主角光环。</p><p>栗子中，语文、数学、外语（等其他学科）代表了前端、后端、数据库（等其他领域），学生代表了开发攻城狮。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 全栈为王吗</p><p>20年后的栗子：巴菲特数学考了100分，成为了股神。杰克马外语考了100分，精通六国语言。马斯克数学、物理和化学都考了100分，造汽车火箭去了火星。我数学、物理和化学都考了60分，默默敲代码改Bug。</p><p>结论一：只深耕细作单个领域，同样会成为大神。参考巴菲特、杰克马两位同学</p><p>结论二：精力和能力都会有上限，只有 best of best 才能把全栈变成全能。参考马斯克同学</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 全栈 == 收入更高？</p><p>公式一：能力强 = 收入更高</p><p>公式二：能力强 != 全栈</p><p>公式三：能力强 = 解决问题的速度 + 质量 + 态度 + 抗压 + 沟通</p><p>结论：收入高低和你是否全栈没太大关系</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 全栈最简入门</b></h2><p>最近做了一个小项目，完成了第一个测试版本，总结一下全栈开发的从入门到放弃。</p><p>几乎每一个完整的商业项目都会包含以下三个栈：</p><ol><li>前端：你手机上装的APP，你系统里装的程序，你浏览器里显示的网页。你通过使用它们浏览界面，并和界面交互后创造出属于你的数据</li><li>后端：你的数据被网络运送到了云上，云上某处会有另外一个程序在处理你的数据，同时也会在云上创造新的数据，并通过网络运送到你的前端界面里</li><li>用户数据：你创造的所有数据，以数据库和文件的形式被保存在了云上</li></ol><p>好了接下来切换成程序猿，回到我的项目中：</p><ol><li>前端：使用语言 HTML+CSS+JS</li><li>后端：使用语言 Golang</li><li>用户数据：使用数据库 MongoDB，云存储服务 OSS</li></ol><p>入门前，先上一张测试版本成果图直观感受一下项目长什么样子（项目数据均为模拟数据，仅供测试效果观察）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4d219ae542adf5bba42ac9b6d497b6e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"890\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-4d219ae542adf5bba42ac9b6d497b6e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;890&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"890\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-4d219ae542adf5bba42ac9b6d497b6e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4d219ae542adf5bba42ac9b6d497b6e1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 全栈的乐趣</b></h2><p>要完成一个合格的全栈项目，首先从上帝视角看这个项目的每一个部分：</p><ol><li>还是前端：使用语言 HTML+CSS+JS 的原因是该项目本质是一个网页管理系统。</li><li>还是后端：使用语言 Golang 考虑到跨平台，高并发性能好，撸起来简单，以及使用习惯等优点。编程语言哪家强是一个世纪性话题，这里不做讨论，PO主始终支持PHP是最好的语言。</li><li>数据库：使用 MongoDB 主要考虑简单易用，几乎不需要在数据库上做任何工作，能帮助PO主快速出一个项目版本。PO主也是MySQL和PostgreSQL的拥护者。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//help.aliyun.com/document_detail/31817.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">云存储服务OSS</a>：亚马逊有个大名鼎鼎的S3对象存储服务，国产的佼佼者当属阿里云OSS存储服务。使用云存储服务是考虑到用户的图片、文档等等文件数据需要全局统一存储和管理，把云存储视作一个无限大的硬盘，不用再为服务器硬盘容量不够和文件数据迁移合并这些问题困扰。</li><li>前端和后端如何高效合作：</li><ol><li>HTTP/HTTPS 协议：伟大的 HTTP/HTTPS 无处不在，前端会使用协议中 GET, POST, PUT, DELETE 这4个常用方法和后端进行通信</li><li><a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2014/05/restful_api.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RESTful</a> API 设计规范：GET, POST, PUT, DELETE 一一对应 查询, 添加, 修改, 删除 这4种数据操作，让你从此爱上写接口</li><li>JSON 数据格式：前端对象数据以 JSON 格式打包，通过 HTTP/HTTPS 运送到后端，被完美解析成后端对象数据。JSON 优雅得让你忘记曾经还有个情人叫 XML。</li></ol><li>后端和数据库如何高效合作：</li><ol><li>ORM：将后端对象数据字段与数据库表中字段一一对应后，只需对后端数据对象进行查询, 添加, 修改, 删除操作，即会自动完成对数据库中数据的相应操作。</li><li>DBHelper：封装了常用的数据库操作，最著名的有 SqlHelper。</li><li>因为 MongoDB 的 NoSQL 特性，所以没有 ORM 的工作，只是用了 <a href=\"https://link.zhihu.com/?target=http%3A//labix.org/mgo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mgo</a> 使 GO 语言可以方便的连接和读写 MongoDB。</li></ol><li>后端和云储存如何高效合作：</li><ol><li>HTTP/HTTPS 协议</li><li><a href=\"https://link.zhihu.com/?target=https%3A//help.aliyun.com/document_detail/32169.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OSS SDK</a> </li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART FINAL: 装备推荐</b></h2><p>准备撸起袖子敲代码的各位玩家，推荐各位一些相当好用的装备</p><ol><li>IDE：敲代码用的，前后端一个全搞定。VS Code, Sublime, Atom</li><li>RESTful API：直接编写接口。Paw (仅MacOS，强推，PO主已购买), Postman, Swagger</li><li>MongoDB Compass：Mongo 官方提供，查看 MongoDB 存储的数据</li><li>oss-brower：阿里云官方提供，查看 OSS 存储的数据。（OSS服务需自行购买）</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>都准备好了，就开始全栈开发之旅：<a href=\"https://zhuanlan.zhihu.com/p/33123924\" class=\"internal\">5分钟学会全栈开发 - 增删改查之从接口到数据库 CRUD from Restful API to Database</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6058d4cdd047a85c0856585530b675bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-6058d4cdd047a85c0856585530b675bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;570&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-6058d4cdd047a85c0856585530b675bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6058d4cdd047a85c0856585530b675bf_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fcce2d39a4caf0052831eece53efeb89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"652\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-fcce2d39a4caf0052831eece53efeb89_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;652&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"652\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-fcce2d39a4caf0052831eece53efeb89_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fcce2d39a4caf0052831eece53efeb89_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8a3ec25bd041a7ab718035c6fa6ea8f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-8a3ec25bd041a7ab718035c6fa6ea8f3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;578&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"578\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-8a3ec25bd041a7ab718035c6fa6ea8f3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8a3ec25bd041a7ab718035c6fa6ea8f3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-043222cf3800ac99a23bf52f7d85da22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"666\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-043222cf3800ac99a23bf52f7d85da22_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;666&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"666\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-043222cf3800ac99a23bf52f7d85da22_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-043222cf3800ac99a23bf52f7d85da22_b.jpg\"/></figure><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "全栈开发", 
                    "tagLink": "https://api.zhihu.com/topics/20043281"
                }, 
                {
                    "tag": "REST", 
                    "tagLink": "https://api.zhihu.com/topics/19579857"
                }, 
                {
                    "tag": "全栈工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19940527"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33154604", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 32, 
            "title": "5分钟GET区块链 - 开发一条区块链 Develop BlockChain", 
            "content": "<p>本文攻略：解惑区块链开发，学习 Tendermint，给自己造一条区块链</p><p>建议玩家等级：技术小白，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><p>阅读此文先解锁技能：</p><ol><li>一点点命令行基础</li><li>一点点 GO 基础：<a href=\"https://link.zhihu.com/?target=http%3A//www.runoob.com/go/go-tutorial.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三天包学会</a></li><li>一点点区块链知识：<a href=\"https://zhuanlan.zhihu.com/p/33081515\" class=\"internal\">5分钟学会区块链 - 关于区块链的一切 All About Blockchain</a></li></ol><p>实践此文推荐装备：</p><ol><li>操作系统：macOS Sierra（Windows也没毛病）</li><li>IDE：VSCode，并自动安装一批官方建议的GO插件</li><li>Restful API 工具：Paw（非必需，浏览器也可以）</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: Tendermint 是什么</b></h2><p><a href=\"https://zhuanlan.zhihu.com/p/33081515\" class=\"internal\">上篇文章</a>我们举了雷布斯、杰克马、坡尼马和强东哥打麻将共同记账的栗子，这回PO主见他们手写记账这么原始，就想给这四位写一个区块链记账APP，让他们从此告别手写账本。</p><p>既然重新造轮子这件事是不存在的，于是向大家介绍一款区块链轮子叫 <b><a href=\"https://link.zhihu.com/?target=https%3A//tendermint.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tendermint</a>（以下简称 TM）</b>，如果有玩家听说过以太坊（Ethereum），这个什么坊有个分支 Ethermint 就是基于 TM 开发的，反正PO主只懂撸代码不懂炒币，不是很了解这到底是个什么工坊。</p><p>好了，先来了解一下 TM 的原理，因为实在没什么可以可视化的 UI 让玩家们一目了然。TM 主要包含两部分：</p><ol><li>Tendermint Core：区块链共识引擎。它负责两件事情：节点之间的数据同步有序传输，拜占庭共识机制的实现。</li><li>ABCI：区块链应用接口。它被设计成一组有接口规范的协议，目的是可以使用多种语言实现区块链应用逻辑。</li></ol><p>那他两到底干啥用的，说了半天好像还是不太理解，没关系先记住他们，PO主刚开始看原文档的时候也和各位玩家有着同样的感受。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: Tendermint 安装运行</b></h2><p><b>1. 官方安装指南</b></p><p>让我们忽略更多的理论，直接撸起袖子做程序猿最喜欢做的事情，先下载轮子，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">go get github.com/Masterminds/glide\ngo get github.com/tendermint/tendermint/cmd/tendermint</code></pre></div><p>下载过程比较长，这个轮子比较大（可能需要科学上网），下载完成后安装，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">cd</span> <span class=\"nv\">$GOPATH</span>/src/github.com/tendermint/tendermint\nglide install\ngo install ./cmd/tendermint</code></pre></div><p>安装过程也比较长，安装完成后验证安装是否成功，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">tendermint version\nabci-cli version</code></pre></div><p>截止本文的发表时间，tendermint 版本 0.15.0，abci-cli 版本 0.9.0</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. 运行官方栗子</b></p><p>官方文档提供了两个栗子，已经集成在了刚才的安装里：</p><ol><li>dummy：一个简单的键值存储区块链应用，使用起来有点像 Redis 或 ElasticSearch。</li><li>counter：一个简单的计数器区块链应用，写入区块的数字必须递增，否则将不被区块接受。</li></ol><p>这里我们简单介绍一下 dummy 这个栗子，首先启动这个区块链应用，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">abci-cli dummy</code></pre></div><p>然后启动 TM，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">tendermint init\ntendermint node</code></pre></div><p>顺利的话，可以看到 abci 和 tendermint 两个程序连通（Connect）了，并且 tendermint 会像心跳一样每一秒提交一个空区块，我们接下来准备写入有实质内容的新区块，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">curl -s <span class=\"s1\">&#39;localhost:46657/broadcast_tx_commit?tx=&#34;abcd&#34;&#39;</span>\ncurl -s <span class=\"s1\">&#39;localhost:46657/broadcast_tx_commit?tx=&#34;name=satoshi&#34;&#39;</span></code></pre></div><p>我们的区块链里就有了一个记录“abcd”的区块和另一个记录“name=satoshi”的区块，如果需要对区块链内容进行查询，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">curl -s <span class=\"s1\">&#39;localhost:46657/abci_query?data=&#34;name&#34;&#39;</span></code></pre></div><blockquote><i>curl 是 Linux 常用工具，玩家可以通过网页浏览器直接输入 localhost:46657/abci_query?data=&#34;name&#34;</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. 探索官方工具</b></p><p>最后介绍 abci-cli 这个坑人工具登场，让我们先关闭刚才运行的 dummy 应用和 tendermint，命令行重新输入运行 dummy：</p><div class=\"highlight\"><pre><code class=\"language-bash\">abci-cli dummy</code></pre></div><p>命令行再输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">abci-cli console</code></pre></div><p>然后他两连通了（Connect），此时很多玩家会困惑于这两个都叫 abci 的家伙怎么也能互相连通，abci 到底是个什么东西？他又干了什么？让我们通过 PART 3 来重新梳理一下我们刚才究竟都在区块链里的什么地方做了些什么事。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: Tendermint 再理解</b></h2><p>PO主先把官方文档里用的最多并容易让人混淆的名词都罗列出来：</p><ol><li>ABCI Server</li><li>ABCI Client</li><li>Tendermint Core</li><li>ABCI Application</li><li>ABCI App</li></ol><p>然后总结了三个名词来帮助理解，下文约定统一使用这三个名词：</p><ol><li><b>ABCI</b>：区块链内部，ABCI Server，启动后加载 ABCI Application/App，为 Tendermint 提供 Socket 服务，服务地址：tcp://localhost:46658</li><li><b>Tendermint</b>：区块链内部，ABCI Client/Tendermint Core，启动后与 ABCI 提供的 Socket 服务创建 3 条连接（Connect），同时会提供 HTTP 服务给区块链外部客户端，服务地址：http://localhost:46657</li><li><b>Client</b>：区块链外部，真正的客户端，通过 Tendermint 提供的服务对区块链进行读写访问</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>还是把栗子举一举，假设强东哥在使用我写的的区块链记账 APP（用iOS开发的）：</p><ol><li>Client 就是区块链记账 APP，强东哥记录了一条新数据 ‘Jack Pony $10’，然后保存</li><li>Client 会发起请求 http://localhost:46657/broadcast_tx_commit?tx=&#34;Jack Pony $10&#34;</li><li>Tendermint 收到 tx=&#34;Jack Pony $10&#34;，通过 Socket 向 ABCI 发出指令 CheckTx:&#34;Jack Pony $10&#34;</li><li>ABCI 运行了我写的 ABCI App（用GO开发的）里的 CheckTx 方法，作用是验证 &#34;Jack Pony $10&#34; 是否符合数据规范，如果不符合就要通知 Temdermint 拒绝这条 tx</li><li>假设 ABCI CheckTx 验证通过后通知 Tendermint</li><li>Tendermint 把 &#34;Jack Pony $10&#34; 暂存在内存池（mempool）里，并把这条 tx 通过 P2P 网络复制给其它 Tendermint 节点（杰克马、坡尼马和雷布斯各自运行的 Tendermint 节点）</li><li>Tendermint 发起了对 &#34;Jack Pony $10&#34; 这条 tx 的拜占庭共识投票，所有4个 Tendermint 节点都参与了。投票过程分三轮，第一轮预投票（PreVote），超过 2/3 认可后进入第二轮预提交（PreCommit），超过 2/3 认可后进入最后一轮正式提交（Commit）</li><li>Tendermint 提交（Commit）时依次向 ABCI 发送指令：BeginBlock -&gt; DeliverTx * n次 -&gt; EndBlock -&gt; Commit，大致意思就是：快接受新区快 -&gt; 正在接受区块内容 * n条 -&gt; 区块内容接受完了 -&gt; 提交到区块链去吧</li><li>ABCI 提交（Commit）成功后会通知 Tendermint</li><li>至此，区块链多了一个区块记录了 1 条 transaction  &#34;Jack Pony $10&#34; ，当然我们也可以记录 n 条后再保存，那么一个区块就会记录 n 条 transaction</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>最后再总结几点：</p><ol><li>说回刚才那个坑人的 abci-cli，当他运行 &#39;abci-cli dummy&#39; 时其实是运行了 ABCI，当他运行了 &#39;abci-cli console&#39; 时其实是运行了 Tendermint，所以一起运行后会进行 Socket 连接（Connect）</li><li>Tendermint 和 ABCI 之间的 Socket 连接有 3 条：1 条用于验证数据（CheckTx 指令），1 条用于查询数据（Query 指令），1 条用于共识数据（BeginBlock, DeliverTx, EndBlock, Commit 指令）</li><li>Tendermit 提供给 Client 的 HTTP 接口有很多，浏览器访问 http://localhost:46657 就都知道了</li><li>玩家也可以亲自拜读一下<a href=\"https://link.zhihu.com/?target=https%3A//tendermint.readthedocs.io/en/master/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官方文档</a></li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: 开发一条区块链</b></h2><p>总算到了撸代码环节，我们先把项目架构整理一下：</p><ol><li>ClientApp：区块链记账 APP，可以用任意语言任意平台实现（iOS/Android/H5/其它），这个版本里我们用 GO 做了最简单的控制台命令行实现，甚至没有 UI 界面。</li><li>TendermintApp：区块链服务程序，这个里面包括 Tendermint 和 ABCI 两部分。</li><li>ABCI：因为是接口协议，设计上可以用任何语言去实现，我们使用了 GO 语言。开发上主要是实现 CheckTx, DeliverTx, Commit 等 ABCI 指令的具体逻辑</li><li>Tendermint：几乎没有需要开发的地方，前面提到了它已经为我们做了两件事情，P2P网络同步有序传输数据和拜占庭共识引擎。我们在这里就将它运行即可。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>接下来正式撸代码，我们主要讲解一部分核心逻辑：</p><p><b>1. ClientApp</b></p><p>模拟了5个区块，每个区块记录10条记录，将这些记录转成 json 提交给 Tendermint</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">blocksNumber</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>                                     <span class=\"c1\">// how many blocks\n</span><span class=\"c1\"></span><span class=\"nx\">transactionsPerBlock</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>                            <span class=\"c1\">// how many transactions in each block\n</span><span class=\"c1\"></span><span class=\"nx\">players</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">string</span><span class=\"p\">{</span><span class=\"s\">&#34;Lei&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;Jack&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;Pony&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;Richard&#34;</span><span class=\"p\">}</span> <span class=\"c1\">// 4 players\n</span><span class=\"c1\"></span><span class=\"nx\">random</span> <span class=\"o\">:=</span> <span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">New</span><span class=\"p\">(</span><span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nf\">NewSource</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">Now</span><span class=\"p\">().</span><span class=\"nf\">UnixNano</span><span class=\"p\">()))</span>\n<span class=\"nx\">json</span> <span class=\"o\">:=</span> <span class=\"nx\">jsoniter</span><span class=\"p\">.</span><span class=\"nx\">ConfigCompatibleWithStandardLibrary</span>\n\n<span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"p\">&lt;</span> <span class=\"nx\">blocksNumber</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n    <span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">Sleep</span><span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nx\">Second</span> <span class=\"o\">*</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nx\">transactions</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"nx\">controllers</span><span class=\"p\">.</span><span class=\"nx\">Transaction</span><span class=\"p\">{}</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">j</span> <span class=\"p\">&lt;</span> <span class=\"nx\">transactionsPerBlock</span><span class=\"p\">;</span> <span class=\"nx\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"nx\">from</span> <span class=\"o\">:=</span> <span class=\"nx\">players</span><span class=\"p\">[</span><span class=\"nx\">random</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">players</span><span class=\"p\">))]</span>\n        <span class=\"nx\">to</span> <span class=\"o\">:=</span> <span class=\"nx\">players</span><span class=\"p\">[</span><span class=\"nx\">random</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">players</span><span class=\"p\">))]</span>\n        <span class=\"k\">for</span> <span class=\"nx\">from</span> <span class=\"o\">==</span> <span class=\"nx\">to</span> <span class=\"p\">{</span>\n            <span class=\"nx\">to</span> <span class=\"p\">=</span> <span class=\"nx\">players</span><span class=\"p\">[</span><span class=\"nx\">random</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">players</span><span class=\"p\">))]</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">btc</span> <span class=\"o\">:=</span> <span class=\"nb\">float32</span><span class=\"p\">(</span><span class=\"nx\">random</span><span class=\"p\">.</span><span class=\"nf\">Intn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">tran</span> <span class=\"o\">:=</span> <span class=\"nx\">controllers</span><span class=\"p\">.</span><span class=\"nx\">Transaction</span><span class=\"p\">{</span>\n            <span class=\"nx\">From</span><span class=\"p\">:</span>    <span class=\"nx\">from</span><span class=\"p\">,</span>\n            <span class=\"nx\">To</span><span class=\"p\">:</span>      <span class=\"nx\">to</span><span class=\"p\">,</span>\n            <span class=\"nx\">Bitcoin</span><span class=\"p\">:</span> <span class=\"nx\">btc</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"p\">=</span> <span class=\"nx\">tran</span><span class=\"p\">.</span><span class=\"nf\">Create</span><span class=\"p\">()</span>\n        <span class=\"nx\">transactions</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">transactions</span><span class=\"p\">,</span> <span class=\"nx\">tran</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">bytes</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">json</span><span class=\"p\">.</span><span class=\"nf\">Marshal</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">transactions</span><span class=\"p\">)</span>\n    <span class=\"nx\">data</span> <span class=\"o\">:=</span> <span class=\"nx\">strings</span><span class=\"p\">.</span><span class=\"nf\">Replace</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nx\">bytes</span><span class=\"p\">),</span> <span class=\"s\">&#34;\\&#34;&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;&#39;&#34;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">tx</span> <span class=\"o\">:=</span> <span class=\"nx\">data</span>\n    <span class=\"c1\">// tmAsync(tx)\n</span><span class=\"c1\"></span>    <span class=\"nf\">tmCommit</span><span class=\"p\">(</span><span class=\"nx\">tx</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"nf\">tmCommit</span><span class=\"p\">(</span><span class=\"nx\">tx</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">url</span> <span class=\"o\">:=</span> <span class=\"s\">&#34;http://localhost:46657/broadcast_tx_async?tx=\\&#34;&#34;</span> <span class=\"o\">+</span> <span class=\"nx\">tx</span> <span class=\"o\">+</span> <span class=\"s\">&#34;\\&#34;&#34;</span>\n\t<span class=\"nf\">txHandle</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. Tendermint</b></p><p>通过命令行运行一个定义好的 Shell 脚本，并且把运行结果打印到控制台和日志文件中去</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nf\">Create</span><span class=\"p\">(</span><span class=\"s\">&#34;logs/tendermint.log&#34;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;Tendermint log init error:&#34;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">multiWriter</span> <span class=\"o\">:=</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nf\">MultiWriter</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span><span class=\"p\">)</span>\n\n<span class=\"k\">go</span> <span class=\"kd\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">cmd</span> <span class=\"o\">:=</span> <span class=\"nx\">exec</span><span class=\"p\">.</span><span class=\"nf\">Command</span><span class=\"p\">(</span><span class=\"s\">&#34;bash&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;-c&#34;</span><span class=\"p\">,</span> <span class=\"s\">&#34;sh run-tm.sh&#34;</span><span class=\"p\">)</span>\n    <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span> <span class=\"p\">=</span> <span class=\"nx\">multiWriter</span>\n    <span class=\"nx\">cmd</span><span class=\"p\">.</span><span class=\"nf\">Start</span><span class=\"p\">()</span>\n<span class=\"p\">}()</span></code></pre></div><p>run-tm.sh 脚本内容：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">echo</span> tendermint start\ntendermint init\ntendermint unsafe_reset_all\ntendermint node --consensus.create_empty_blocks<span class=\"o\">=</span><span class=\"nb\">false</span>\n<span class=\"nb\">echo</span> tendermint end</code></pre></div><blockquote><i>unsafe_reset_all 作用是每次重置本机的区块链数据，仅供开发使用</i> <i>consensus.create_empty_blocks 作用是关闭 Tendermint 自带的每秒生成新的空区块功能</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. ABCI</b></p><p>实现 ABCI 指令接口，这里我们直接使用了官方栗子 dummy 应用，来保存提交的 json 记录，并且在每个实现接口里做了日志打印（因篇幅有限，省略了长长的代码）</p><div class=\"highlight\"><pre><code class=\"language-go\"><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">app</span> <span class=\"o\">*</span><span class=\"nx\">DummyApplication</span><span class=\"p\">)</span> <span class=\"nf\">CheckTx</span><span class=\"p\">(</span><span class=\"nx\">tx</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span><span class=\"p\">)</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseCheckTx</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Debug</span><span class=\"p\">(</span><span class=\"s\">&#34;CheckTx&#34;</span><span class=\"p\">)</span>\n\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Notice</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nx\">tx</span><span class=\"p\">))</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseCheckTx</span><span class=\"p\">{</span><span class=\"nx\">Code</span><span class=\"p\">:</span> <span class=\"nx\">code</span><span class=\"p\">.</span><span class=\"nx\">CodeTypeOK</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">app</span> <span class=\"o\">*</span><span class=\"nx\">DummyApplication</span><span class=\"p\">)</span> <span class=\"nf\">DeliverTx</span><span class=\"p\">(</span><span class=\"nx\">tx</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span><span class=\"p\">)</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseDeliverTx</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Debug</span><span class=\"p\">(</span><span class=\"s\">&#34;DeliverTx&#34;</span><span class=\"p\">)</span>\n\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Notice</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nx\">tx</span><span class=\"p\">))</span>\n\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\t<span class=\"k\">return</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseDeliverTx</span><span class=\"p\">{</span><span class=\"nx\">Code</span><span class=\"p\">:</span> <span class=\"nx\">code</span><span class=\"p\">.</span><span class=\"nx\">CodeTypeOK</span><span class=\"p\">,</span> <span class=\"nx\">Tags</span><span class=\"p\">:</span> <span class=\"nx\">tags</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">app</span> <span class=\"o\">*</span><span class=\"nx\">DummyApplication</span><span class=\"p\">)</span> <span class=\"nf\">Commit</span><span class=\"p\">()</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseCommit</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Debug</span><span class=\"p\">(</span><span class=\"s\">&#34;Commit&#34;</span><span class=\"p\">)</span>\n\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Debug</span><span class=\"p\">(</span><span class=\"s\">&#34;Commit Hash&#34;</span><span class=\"p\">,</span> <span class=\"nx\">hash</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseCommit</span><span class=\"p\">{</span><span class=\"nx\">Code</span><span class=\"p\">:</span> <span class=\"nx\">code</span><span class=\"p\">.</span><span class=\"nx\">CodeTypeOK</span><span class=\"p\">,</span> <span class=\"nx\">Data</span><span class=\"p\">:</span> <span class=\"nx\">hash</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">app</span> <span class=\"o\">*</span><span class=\"nx\">DummyApplication</span><span class=\"p\">)</span> <span class=\"nf\">Query</span><span class=\"p\">(</span><span class=\"nx\">reqQuery</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">RequestQuery</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nx\">resQuery</span> <span class=\"nx\">types</span><span class=\"p\">.</span><span class=\"nx\">ResponseQuery</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">lib</span><span class=\"p\">.</span><span class=\"nx\">Log</span><span class=\"p\">.</span><span class=\"nf\">Debug</span><span class=\"p\">(</span><span class=\"s\">&#34;Query&#34;</span><span class=\"p\">)</span>\n\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4. 编译</b></p><p>我们写好了编译脚本，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">sh make.sh</code></pre></div><p>编译脚本本质就是把三个运行程序编译出来：</p><div class=\"highlight\"><pre><code class=\"language-bash\">go build ./TendermintApp/ABCIServer/\ngo build ./TendermintApp/ABCIClient/\ngo build  -o Client ./ClientApp/</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5. 测试</b></p><p>到了激动人心的一刻，我们已经离一条自造的区块链很接近了。</p><p>先运行 ABCI，命令行输入:</p><div class=\"highlight\"><pre><code class=\"language-text\">./ABCIServer</code></pre></div><p>再运行 Tendermint，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">./ABCIClient</code></pre></div><p>可以看到 Tendermint 和 ABCI 已经有 3 个连接（Connect） Socket 握手了，表示整个区块链服务已经准备就绪，最后我们只需要使用 Client 往区块链里写数据就行了，命令行输入：</p><div class=\"highlight\"><pre><code class=\"language-text\">./Client</code></pre></div><p>把条命令理解成使用记账 APP 记录了 5 页，每页 10 条记录，然后点击保存后送去了区块链。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>附上一张运行结果图，大致能观察到三个程序都已成功运行</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-35e2aa72a40d5c59dfb291a0dde3316e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"973\" class=\"origin_image zh-lightbox-thumb\" width=\"935\" data-original=\"https://pic3.zhimg.com/v2-35e2aa72a40d5c59dfb291a0dde3316e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;935&#39; height=&#39;973&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"973\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"935\" data-original=\"https://pic3.zhimg.com/v2-35e2aa72a40d5c59dfb291a0dde3316e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-35e2aa72a40d5c59dfb291a0dde3316e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>最终我们创造了一条区块链，一共有 7 个区块，2~6 号区块各自写有 10 条账本记录，第 1 和第 7 号区块是系统创建的空区块。</p><blockquote><i>空区块是怎么回事？原先 PO 主也以为是 BUG，去了官方的开发 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/tendermint/ethermint/issues/308\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">issue</a> 里了解到 Tendermint 每次收到新的 tx 或者区块链 hash 值变化的时候（就是区块链状态变了）会产生一个新区块去接受 mempool 里未被提交的新 tx，这是 Tendermint 用于正常自检工作产生的。</i></blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>来看看这条区块链长什么样子，这里展示了 2, 3, 4 号区块的账本记录</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fd990f15cd6771f07f07279865d8bdb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-fd990f15cd6771f07f07279865d8bdb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1041&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-fd990f15cd6771f07f07279865d8bdb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fd990f15cd6771f07f07279865d8bdb2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-224d681b63714eff735fe0dc799d9e02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-224d681b63714eff735fe0dc799d9e02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1041&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-224d681b63714eff735fe0dc799d9e02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-224d681b63714eff735fe0dc799d9e02_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-acac8915aa3a7420735377e31fca08e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-acac8915aa3a7420735377e31fca08e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1041&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-acac8915aa3a7420735377e31fca08e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-acac8915aa3a7420735377e31fca08e2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>感觉有好多$$在这小小的几个区块里，最后献上<a href=\"https://link.zhihu.com/?target=https%3A//github.com/fengjihua/DemoBlockChain/releases/tag/v0.1.0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">本文代码</a>，希望各位玩家也创造一条属于自己的区块链。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "区块链(Blockchain)", 
                    "tagLink": "https://api.zhihu.com/topics/19901773"
                }, 
                {
                    "tag": "以太坊", 
                    "tagLink": "https://api.zhihu.com/topics/20042675"
                }, 
                {
                    "tag": "Go 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052037"
                }
            ], 
            "comments": [
                {
                    "userName": "老顽童", 
                    "userLink": "https://www.zhihu.com/people/376820652c95ba8b483b66ed711553b8", 
                    "content": "文章很棒！什么时候出下一篇？<br>如果想查符合特定条件的记录怎么做？比如Lei的所有交易，或者某个时间段内的记录。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我也在做数据检索方面的研究，多多交流</p>", 
                            "likes": 0, 
                            "replyToAuthor": "老顽童"
                        }
                    ]
                }, 
                {
                    "userName": "克洛迪亚亚特鲁", 
                    "userLink": "https://www.zhihu.com/people/b08fbe0f7f1d01a3ee2800c3f26f1e1a", 
                    "content": "很好的入门文章，我先去学习下go语言，期待作者的后续文章", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "小小智", 
                    "userLink": "https://www.zhihu.com/people/143bac9b21816579e9d66aa6d3c61213", 
                    "content": "<p>推荐一个适合区块链新手的以太坊DApp开发教程：<a href=\"http://link.zhihu.com/?target=http%3A//xc.hubwiz.com/course/5a952991adb3847553d205d1%3Faffid%3D20180329zhihu\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xc.hubwiz.com/course/5a</span><span class=\"invisible\">952991adb3847553d205d1?affid=20180329zhihu</span><span class=\"ellipsis\"></span></a></p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "ZCXiong", 
                    "userLink": "https://www.zhihu.com/people/e686761ca3fa7113f9c64bbd1d490dc5", 
                    "content": "<p>你好，<br>go get <a href=\"http://link.zhihu.com/?target=http%3A//github.com/tendermint/tendermint/cmd/tendermint\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.com/tendermint/t</span><span class=\"invisible\">endermint/cmd/tendermint</span><span class=\"ellipsis\"></span></a><br>配置环境时候终端输入上面内容会出现部分网址超时，请问下你有额外配置其他东西么？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我是按照官方文档配置成功的，科学上网再试试看</p>", 
                            "likes": 0, 
                            "replyToAuthor": "ZCXiong"
                        }
                    ]
                }, 
                {
                    "userName": "陈宇", 
                    "userLink": "https://www.zhihu.com/people/a0cd3133ef34fba134f084a3ab30dfc2", 
                    "content": "<p>您好，请教个问题 我现在使用Tendermint+Ethermint，发现节点和账户是没有绑定的，所以区块奖励它给到了0x0000000000000000000000000000000000000000，也就是没有实现节点奖励，Tendermint为什么没有设计节点奖励呢？如果我们要实现节点奖励，是不是需要初始化时，先创建账号，然后修改程序将节点和账号绑定，然后在确认区块打包完成时，进行对应的奖励？即验证节点和账号是如何绑定的？如何将奖励给到节点账户？希望得到您的帮助，谢谢</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "不好意思，您的问题可能超出我的解答能力范畴。可以加好友交流一下", 
                            "likes": 0, 
                            "replyToAuthor": "陈宇"
                        }, 
                        {
                            "userName": "邓文奇", 
                            "userLink": "https://www.zhihu.com/people/2c7874f438ae9ee5c676bb5502a173e3", 
                            "content": "<p>可以加个微信吗，我也在研究Cosmos开发公链</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "siyee", 
                    "userLink": "https://www.zhihu.com/people/f88883a4c88b7a7421ae4ed66a6093e4", 
                    "content": "<p>有创业想法吗？如果有可以沟通下。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>选择基于tendermint是出于什么考虑呢？如果不是看跨链就看不到cosmos，看不到cosmos就看不到tendermint。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "王六级", 
                    "userLink": "https://www.zhihu.com/people/6284ab2d67d80bf090dc28e5160b1356", 
                    "content": "<p>学习了 不错的文章</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "小霖子", 
                    "userLink": "https://www.zhihu.com/people/497e55ea8f667cd393dc722da5bd6417", 
                    "content": "<p>你这是只开启一个tendermint节点的吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "老顽童", 
                    "userLink": "https://www.zhihu.com/people/376820652c95ba8b483b66ed711553b8", 
                    "content": "文章很棒！什么时候出下一篇？<br>如果想查符合特定条件的记录怎么做？比如Lei的所有交易，或者某个时间段内的记录。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我也在做数据检索方面的研究，多多交流</p>", 
                            "likes": 0, 
                            "replyToAuthor": "老顽童"
                        }
                    ]
                }, 
                {
                    "userName": "克洛迪亚亚特鲁", 
                    "userLink": "https://www.zhihu.com/people/b08fbe0f7f1d01a3ee2800c3f26f1e1a", 
                    "content": "很好的入门文章，我先去学习下go语言，期待作者的后续文章", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "小小智", 
                    "userLink": "https://www.zhihu.com/people/143bac9b21816579e9d66aa6d3c61213", 
                    "content": "<p>推荐一个适合区块链新手的以太坊DApp开发教程：<a href=\"http://link.zhihu.com/?target=http%3A//xc.hubwiz.com/course/5a952991adb3847553d205d1%3Faffid%3D20180329zhihu\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">xc.hubwiz.com/course/5a</span><span class=\"invisible\">952991adb3847553d205d1?affid=20180329zhihu</span><span class=\"ellipsis\"></span></a></p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "ZCXiong", 
                    "userLink": "https://www.zhihu.com/people/e686761ca3fa7113f9c64bbd1d490dc5", 
                    "content": "<p>你好，<br>go get <a href=\"http://link.zhihu.com/?target=http%3A//github.com/tendermint/tendermint/cmd/tendermint\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">github.com/tendermint/t</span><span class=\"invisible\">endermint/cmd/tendermint</span><span class=\"ellipsis\"></span></a><br>配置环境时候终端输入上面内容会出现部分网址超时，请问下你有额外配置其他东西么？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>我是按照官方文档配置成功的，科学上网再试试看</p>", 
                            "likes": 0, 
                            "replyToAuthor": "ZCXiong"
                        }
                    ]
                }, 
                {
                    "userName": "陈宇", 
                    "userLink": "https://www.zhihu.com/people/a0cd3133ef34fba134f084a3ab30dfc2", 
                    "content": "<p>您好，请教个问题 我现在使用Tendermint+Ethermint，发现节点和账户是没有绑定的，所以区块奖励它给到了0x0000000000000000000000000000000000000000，也就是没有实现节点奖励，Tendermint为什么没有设计节点奖励呢？如果我们要实现节点奖励，是不是需要初始化时，先创建账号，然后修改程序将节点和账号绑定，然后在确认区块打包完成时，进行对应的奖励？即验证节点和账号是如何绑定的？如何将奖励给到节点账户？希望得到您的帮助，谢谢</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "不好意思，您的问题可能超出我的解答能力范畴。可以加好友交流一下", 
                            "likes": 0, 
                            "replyToAuthor": "陈宇"
                        }, 
                        {
                            "userName": "邓文奇", 
                            "userLink": "https://www.zhihu.com/people/2c7874f438ae9ee5c676bb5502a173e3", 
                            "content": "<p>可以加个微信吗，我也在研究Cosmos开发公链</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "siyee", 
                    "userLink": "https://www.zhihu.com/people/f88883a4c88b7a7421ae4ed66a6093e4", 
                    "content": "<p>有创业想法吗？如果有可以沟通下。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>选择基于tendermint是出于什么考虑呢？如果不是看跨链就看不到cosmos，看不到cosmos就看不到tendermint。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "王六级", 
                    "userLink": "https://www.zhihu.com/people/6284ab2d67d80bf090dc28e5160b1356", 
                    "content": "<p>学习了 不错的文章</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "小霖子", 
                    "userLink": "https://www.zhihu.com/people/497e55ea8f667cd393dc722da5bd6417", 
                    "content": "<p>你这是只开启一个tendermint节点的吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33081515", 
            "userName": "长脚", 
            "userLink": "https://www.zhihu.com/people/59e31f1c355dd88f47fd61d2937b02aa", 
            "upvote": 21, 
            "title": "5分钟GET区块链 - 关于区块链的一切 All About Blockchain", 
            "content": "<p>本文攻略：解惑区块链，如何开发一个区块链项目</p><p>建议玩家等级：币圈，技术小白，学生党，初级码农</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 1: 区块链是什么 What is Blockchain</b></h2><p>举个栗子：杰克马、雷布斯、坡尼马、强东哥四个好朋友经常一起打麻将，每局结束都用支付宝相互结算。某天聪明的雷布斯提议以后每局结束由他计算输赢金额并告诉大家，大家各自都记在自己的账本上，每记完 1024 条就发起一次审计投票，只要有三个人同意认可这批记录，就把这批记录归档成一页并且编号留存，最后再根据这批记录结果一次性结算，于是大家都同意了这个 good idea。</p><p>让我们通过栗子来通俗的理解区块链背后那些高不可攀的名词：</p><ul><li>Transaction：事务。账本上的每一笔记录，都代表了一个系统 Transaction。</li><li>Block：区块。每 1024 笔记录归档成一页，每一页都代表了一个系统 Block，每一个 Block 都记录了 1024 个 Transaction。（1024只是栗子中约定的，这个数字每个项目自由发挥）</li><li>Broadcast：广播。每局结束后，由雷布斯向大家宣布输赢金额，大家听到以后各自记录，账本只记录四人麻将输赢有关的记录，不记录其它无关消息。一个节点收到消息会进行验证，通过验证后会进行全网广播，其它节点收到广播后进行同样的验证，并记录下来。</li><li>Consensus：共识机制。每次审计 1024 条记录，只有至少三个人都投认可票，这批记录才会被认为有效并提交。系统每写 1024 个 Transaction 就发起一次公投，超过 2/3 投票认可后被认为有效，并提交为新的 Block（这部分会在 PART 4 详解）</li><li>Commit：提交。四人每次审计1024 条记录达成共识后，就把该页保存归档，然后换新的一页继续记录。系统每写 1024 个 Transaction 就 Commit 一次，Commit 成功后会产生一个系统 Block。</li><li>Hash：哈希值，具有全局唯一性。账本每记录完一页，会计算出一个全局唯一编号，作为该页的归档编号，同时也将该页码记录在新一页的第一行。每次 Commit 会计算出一个全局唯一 Hash 值作为该 Block 签名，同时也记录在下个 Block 初始位置。</li><li>Chain：链。账本记录的每一页都标有归档编号和上一页的归档编号，这样所有的页都按归档编号的先后顺序装订在一起形成了一个完整的账本，一直可以从当前页追溯到第一页，只要大家愿意，这个账本可以记录三生三世，没有长度限制。系统的每一个 Block 都有各自唯一的 Hash 值，同时也记录了上一个 Block 的 Hash 值，形成了一个完整有顺序的 BlockChain，这也是区块链名称的由来。</li><li>Query：查询。四个人都能查询账本里的每一笔记录。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 2: 区块链革命 Blockchain Revolution</b></h2><p>理解了区块链，再顺便理解一下为什么区块链被舆论认为是一场革命，一场去中心化的革命。</p><p>“中心化”是什么？栗子中，四个人原本相信的转账记录是来自支付宝，转账记录由支付宝统一管理，四个人都只对支付宝的转账记录达成共识。“中心化”就是所有记录都在支付宝手上，它远在云端。</p><p>“去中心化”又是什么？栗子中，自从有了雷布斯的提议以后，四个人人手一本账本，大家对转账记录的共识从原来的支付宝那里转移到了自己手上的账本，这是一本经过大家审核完全可信任的账本。“去中心化”就是所有记录都在自己的账本上，就在自己身边，那这个时候支付宝转账记录又是什么？Who cares？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>再顺便理解一下区块链鼻祖，比特币。</p><p>“中心化”是什么？所有的流通货币都是由金融或者政府机构发行控制管理的，几百年来亘古不变，货币使用者都必须对发行机构的权威性达成共识，才会去兑换和使用发行的货币。</p><p>“去中心化”又是什么？比特币是虚拟货币，如果只是某某论坛里的虚拟货币那几乎不会有人相信他是可以流通且有价值的。但因为区块链的共识机制特性，栗子中的账本和现实中的比特币都具有被使用者共识的特性，每一枚比特币从诞生到消费，从一个账号转移到任意一个其他账号，这些记录都被所有参与用户共同记录并且通过审计。那么想象一下，全世界人如果都在用比特币，那么美元是什么？美联储又是谁？Who cares？</p><p>当然PO主还是希望区块链技术用于各个领域，给各个领域带来好的发展，而不是去做一些违背社会秩序和发展的项目，做了也未必能成功。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 3: 区块链安全吗 Blockchain Security</b></h2><p>我们再把栗子举起来：</p><p>假设杰克马、雷布斯、坡尼马、强东哥四个好朋友都是君子，不会有人作弊，那么账本肯定是非常可靠安全的。但人与人之间的信任总是那么脆弱，某天强东哥趁大家不注意，偷偷改写了自己的账本，甚至还偷改了杰克马和坡尼马的账本，企图在审计投票时让自己的假账通过大家的共识，当然最后被杰克马和坡尼马都识破了，因为签名和字迹不一样。强东哥这种行为我们有个很洋气的名词称之为 <b>拜占庭（Byzantine）</b>。</p><p>再假设某天因为强东哥账本忘记在家里了没带，所以那天他只能打麻将不能和大家一起正常记账。这种行为我们也有个很洋气的名词称之为 <b>非拜占庭</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么，区块链看似靠谱的共识机制，在这两种情况发生时是否真的安全？</p><p>情况一：一群人在做同一件事，遇到其中某些人因各种原因无法正常参与工作，但这件事情仍然可以继续进行且结果不受到任何影响，我们称之为 <b>非拜占庭容错</b></p><p>情况二：一群人在做同一件事，遇到其中某些人非但不正常参与工作，还背叛了大家，蓄意做出有损大家利益的事情，好在大家能有效遏制坏人的破坏行为，这件事情仍然可以继续进行且结果不受到任何影响，我们称之为 <b>拜占庭容错（Byzantine Fault Tolerance）</b></p><p>接下来，让我们通过 PART 4 来思考区块链是否真的安全。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 4: 区块链共识机制 Blockchain Consensus</b></h2><p>从字面意思理解，共识机制就是大家共同认可一套安全可靠的审计规则，只有通过这套审计规则的数据大家才会一起认可并记录归档。那么这样安全又可靠的审计规则有哪些呢？</p><ol><li>拜占庭容错（Byzantine Fault Tolerance）：栗子中四人共同认同账本的规则是基于四人投票，只有三人认同就审计通过，这个规则就是基于拜占庭容错设计的。拜占庭容错规定至少有2/3的投票通过，数据才会被提交，并且可以允许少于1/3的坏蛋在故意搞破坏。至于1/3和2/3这两个数字是怎么得来的，请穿越去 <a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/5fea30b25f0a\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拜占庭</a></li><li>工作量证明（Proof of work）：这就是大家熟悉的比特币挖矿，通过与或运算，计算出一个满足规则的随机数，即获得本次区块记账权，发出本轮需要记录的数据，全网其它节点验证后一起存储</li></ol><p>这里PO主只列出了其中2种共识机制，还有好几种机制PO主也在学习中，有兴趣的玩家可以自行找度娘学习。</p><p>还是回到区块链是否安全的问题，结论是只要低于所使用共识机制的容错率，他就是安全可靠的，这个好像是废话。</p><p>那容错率高了怎么办？我们拿工作量证明来说，一个坏蛋如果要对区块进行造假，他就必须满足一个条件，每次都得比全世界所有人都先计算出满足规则的随机数，这也意味着坏蛋的计算能力要至少占据全世界计算总能力的50%，什么概念？就是全世界如果有100万台电脑在计算区块随机数（挖矿），这个坏蛋必须有其中的50万台才能至少保证有可能每次都第一个计算出新的区块随机数（挖矿）。好了，现在的你是否可以放心安心的去购买比特币了，希望机智的你可以抄到底。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>PART 5: 区块链项目开发准备 Prepare for Blackchain Develop</b></h2><p>铺垫了那么多，总算该到了PO主最擅长的撸代码部分了。PO主会先给各位有志于做区块链项目的玩家布置一些开工前的准备工作：</p><ol><li>学会GO语言：如果你是一名程序猿，不管是哪家语言的，学习GO语言对你来说简单的很，认真花三天时间包会。如果你是一名零基础，请找一名程序猿来让他学，然后告诉他你想实现什么。</li><li>理解区块链：PO主只是根据个人理解把区块链通俗的做了解释，希望各位玩家还花点时间在区块链理论的海洋里自己遨游一下，如果PO主有理解错误之处，也希望各位来指正和补充，跪谢。</li><li>亲自看到 GO 代码输出 Hello World，并且知道 go get 是什么命令</li><li>再推荐几款IDE给各位玩家，VS Code, Atom, Sublime，总有一款适合你</li><li>最后，当你都掌握了以上内容，可以开始预习 Tendermint 框架，我们将站在巨人的肩膀上进行区块链项目开发。</li></ol><p>关于区块链的一切，PO主理解完了。关于开发的一切，我们<a href=\"https://zhuanlan.zhihu.com/p/33154604\" class=\"internal\">下篇文章</a>见。</p><hr/><p><i>如需合作或转载请联系本文作者，跪谢</i></p>", 
            "topic": [
                {
                    "tag": "区块链(Blockchain)", 
                    "tagLink": "https://api.zhihu.com/topics/19901773"
                }
            ], 
            "comments": [
                {
                    "userName": "克洛迪亚亚特鲁", 
                    "userLink": "https://www.zhihu.com/people/b08fbe0f7f1d01a3ee2800c3f26f1e1a", 
                    "content": "下一篇文章是什么时候", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>两三天内更新</p>", 
                            "likes": 1, 
                            "replyToAuthor": "克洛迪亚亚特鲁"
                        }
                    ]
                }, 
                {
                    "userName": "余余", 
                    "userLink": "https://www.zhihu.com/people/613a2be70b747346bd66e4838cb4157e", 
                    "content": "非常棒，请收下我的赞，谢谢！", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "有爱的大羚羊", 
                    "userLink": "https://www.zhihu.com/people/7adcb80869511b9bc6f1e7c8033b399b", 
                    "content": "任何一种比特币都局限在产生它的特定区块链中。既然有这种局限性，比特币怎么能与真实货币相提并论？", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/GeekFive"
}
