{
    "title": "Java学习小分队", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/wu-yang-hong-55", 
        "https://www.zhihu.com/people/liu-hai-52-90", 
        "https://www.zhihu.com/people/mr-h-15-45", 
        "https://www.zhihu.com/people/zhang-ming-yuan-55-35", 
        "https://www.zhihu.com/people/mr-lin-82-68", 
        "https://www.zhihu.com/people/tang-tang-95-35-33", 
        "https://www.zhihu.com/people/bai-dy", 
        "https://www.zhihu.com/people/li-li-4-91-98", 
        "https://www.zhihu.com/people/cang-sheng-ta-ge-xie-wu-xiao"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/64659372", 
            "userName": "方嘉贤", 
            "userLink": "https://www.zhihu.com/people/748e73968def860d4e34af992f2c3251", 
            "upvote": 3, 
            "title": "排序算法--冒泡排序（Java语言）", 
            "content": "<h2>冒泡排序（Bubble Sort）是啥？</h2><blockquote>来源百度百科：<br/>冒泡排序是一种简单的排序算法。它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</blockquote><h2>通俗理解</h2><p>简单的说，如果我们想将一个数组从小到大排列，我们可以这样做：<br/>1.首先可以将数组的最大值移动到最后面。<br/>2.再将次大值移动到倒数第二位。<br/>3.以此类推，直到将所有数排列好。</p><p>那冒泡排序是怎么实现上述操作的呢？我们来看下算法描述</p><h2>算法描述</h2><p>假设我们有数组arr<br/>1.令j为0，arr[j]和arr[j+1]比较，使这两个元素的较大值在排在后面，即若arr[j]&gt;arr[j+1]，两数交换位置，若arr[j]&lt;arr[j+1],不换。</p><p>2.不管换与不换，j++。</p><p>3.此时的arr[j]和arr[j+1]再进行比较，重复上述操作直到j=arr.length-1（这是整个排序过程的第一轮排序，即将整个数组中的最大值移动到最后面，所以这一轮排序是在j=arr.length-2的时候停止）</p><p>4.第一轮结束后我们接着进行第二轮，即将次大值移动到数组的倒数第二个位置。那么这一轮结束的标志就是j=arr.length-3</p><p>5.接着进行第三轮，第四轮...直到第二小的数排好序（你想啊，我们将其他数都排好了，最后一个肯定就是最小值啦）所以我们一共要进行arr.length-1轮排序。</p><p>6.每一轮排序结束的标志是j=arr.length-1-i。</p><h2>动图演示</h2><blockquote>图片来源网络，侵删</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.gif\" data-rawwidth=\"826\" data-rawheight=\"257\" data-size=\"normal\" data-caption=\"\" data-thumbnail=\"https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"826\" data-original=\"https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;826&#39; height=&#39;257&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"826\" data-rawheight=\"257\" data-size=\"normal\" data-caption=\"\" data-thumbnail=\"https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"826\" data-original=\"https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.gif\"/></figure><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">public</span> <span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">BubbleSort</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"p\">{</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n    <span class=\"n\">bubbleSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">bubbleSort</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//控制多少轮\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//控制每一轮的次数\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n                <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n                <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span> \n                <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Arrays</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">));</span>\n\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><p>以上就是我个人对冒泡排序的一些理解，如果有错误的地方欢迎大家指正<br/><b>我的公众号：Java小部落</b></p><p><b>我的个人博客：<a href=\"https://link.zhihu.com/?target=http%3A//www.fangjiaxian.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">fangjiaxian.cn</span><span class=\"invisible\"></span></a></b></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "排序", 
                    "tagLink": "https://api.zhihu.com/topics/19572852"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64660884", 
            "userName": "方嘉贤", 
            "userLink": "https://www.zhihu.com/people/748e73968def860d4e34af992f2c3251", 
            "upvote": 12, 
            "title": "如何把ER模型转换为关系模型（超详细，含例题）", 
            "content": "<p>本文转载自：<a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttp%253A%252F%252Fblog.csdn.net%252FHaoDaWang%252Farticle%252Fdetails%252F78098937%253FlocationNum%253D4%2526fps%253D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://blog.csdn.net/HaoDaWang/article/details/78098937?locationNum=4&amp;fps=1</a> 超级感谢博主分享</p><p>本篇博文中的例题只涉及到N:M和N:M:P的转换，大家看完后可以再去看下下面的这几个例题。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%253A%252F%252Fblog.csdn.net%252FFlora_SM%252Farticle%252Fdetails%252F84645752\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://blog.csdn.net/Flora_SM/article/details/84645752</a></p><hr/><p>如何把ER模型转换为关系模型<br/>这是数据库工程设计进行到逻辑设计的一重大环节，简单的说，如果概念设计是用ER模型， 整合为全局的ER模型，那么在逻辑设计这块， 主要任务就是把ER模型转换为关系模型。</p><p>转换只需知道三个转换准则:</p><p>1:1<br/>遇到1:1 关系的话在两个实体任选一个添加另一个实体的主键即可。</p><p>1:N<br/>1:N 遇到 1:N 关系的话在N端添加另一端的主键，假如有学生和班级两个实体，一个班级可以容纳多个学生，但是一个学生只能选择一个班级， 因此班级和学生是1:N的关系，现在要转换为关系模型， 我们只需在学生的这端加上班级的唯一标识即可，这样做的原因是，因为一个学生只能有一个班级，班级是相对学生唯一的。</p><p>N:M<br/>遇到N:M我们需要将联系转换为实体，然后在该实体上加上另外两个实体的主键，作为联系实体的主键，然后再加上该联系自身带的属性即可。例如有学生和老师两个实体， 一个学生可以由多名老师来授课，一名老师也可以授课多名学生，它们是M:N关系的，假如联系为授课，该联系上有成绩属性，因此当我们把它转换为关系模型时，我们把联系转换为联系实体，并添加学生实体的主键（学号）和教师实体的主键（教师编号）作为自己的主键，值得注意的是，授课实体的外键分别是学号和教师编号，但是它的主键是（学号，教师编号），另外它还拥有自己的一个属性成绩。</p><p>1:1:N<br/>这是三元联系的对应关系，但是当转换为关系模型时，和1:N的情况是差不多的。我们只需将N端添加另外两端的主键即可。</p><p>M:N:P<br/>这种三元联系的三种多对应关系，看上去很复杂，其实转换起来并不是那么复杂了，我们要做的仅仅是将其中的联系转换为联系实体，然后在联系实体上添加M端N端P端的主键，然后加上联系实体自身的属性，就行了。</p><p>例子：<br/>说了这么多看个小例子。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d1f41b3bc9a53277e879fcdc0baed1d5_b.jpg\" data-rawwidth=\"603\" data-rawheight=\"342\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"603\" data-original=\"https://pic2.zhimg.com/v2-d1f41b3bc9a53277e879fcdc0baed1d5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;603&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"603\" data-rawheight=\"342\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"603\" data-original=\"https://pic2.zhimg.com/v2-d1f41b3bc9a53277e879fcdc0baed1d5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d1f41b3bc9a53277e879fcdc0baed1d5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这是一份关于商店商品仓库的ER图。</p><p>先看仓库和商品之间是M:N的关系，于是我们首先想到的应该是把联系 库存转换为库存实体。<br/>库存 （仓库号，商品号，日期，库存量）<br/>然后是商品实体和仓库实体<br/>商品（商品号，商品名，单价）<br/>仓库（仓库号，仓库名，地址）</p><p>除此之外仓库和商品还有一个供应关系，同样是M:N关系：<br/>供应 （仓库号，商品号 ，月份，月供应量）</p><p>在上图的商店和仓库之间的关系可能写漏了，但是它们应该也是M:N的关系，一个商店可以被多个仓库供应，一个仓库也可以供应多个商店。上面已经创建了供应实体，现在只需在供应实体中假如商店号即可，也就是商店实体的主键。</p><p>供应（仓库号，商品号，商店号 ，月份，月供应量）<br/>商店（商店号，商店名，地址）</p><p>总结<br/>至此，转换关系模型也完成了，当然这只是个例子，实际的开发中，我们可能会遇到各式各样奇怪的需求，这就更要求我们做好概念设计的环节，对后来的数据库设计和维护都有好处。ER图的好坏，始终是数据库设计的重要一节。</p><p>我的公众号：Java小部落</p><p>我的个人博客：<a href=\"https://link.zhihu.com/?target=http%3A//www.fangjiaxian.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">fangjiaxian.cn</span><span class=\"invisible\"></span></a></p>", 
            "topic": [
                {
                    "tag": "SQL", 
                    "tagLink": "https://api.zhihu.com/topics/19553557"
                }, 
                {
                    "tag": "数据库", 
                    "tagLink": "https://api.zhihu.com/topics/19552067"
                }, 
                {
                    "tag": "数据库原理", 
                    "tagLink": "https://api.zhihu.com/topics/19617529"
                }
            ], 
            "comments": [
                {
                    "userName": "棒子锅", 
                    "userLink": "https://www.zhihu.com/people/eaf7e1fb133b9a98f90dcf61a3775a88", 
                    "content": "那个库存那个为什么不行啊", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64659156", 
            "userName": "方嘉贤", 
            "userLink": "https://www.zhihu.com/people/748e73968def860d4e34af992f2c3251", 
            "upvote": 10, 
            "title": "排序算法-快速排序（Java实现）", 
            "content": "<p>上篇我们讲了冒泡排序，这次我们讲它的升级版快速排序，“快速”，一看就是个好算法~</p><h2>快速排序（QuickSort）是啥？</h2><p>我们先看下百度百科的介绍</p><blockquote>快速排序（Quicksort）是对冒泡排序的一种改进。<br/>快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</blockquote><hr/><h2>简单点~</h2><p>我们可以把快速排序看着三个步骤：<br/>1.选择基准值：在待排序列中，按照某种方式挑出一个元素，作为基准值。<br/>2.分割操作：以该基准值在序列中的实际位置，把序列分成两个子序列，一边是比它大的值，另外一边是比它小的值。<br/>3.递归：对两个子序列进行快排，直到序列为空或者只有一个元素。</p><hr/><h2>过程演示</h2><p>这是我画的一张图，结合这张图再看下面的代码可能会比较好理解一点，当然在看代码的时候最后可以自己画一张草图，可以熟悉一下整个过程，加深理解！</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c54e1f41979fb20d007c2cefc9acbc0f_b.jpg\" data-rawwidth=\"1000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-c54e1f41979fb20d007c2cefc9acbc0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;1125&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-c54e1f41979fb20d007c2cefc9acbc0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c54e1f41979fb20d007c2cefc9acbc0f_b.jpg\"/></figure><hr/><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">public</span> <span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">QuickSort</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"p\">{</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">};</span>\n    <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Arrays</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">));</span>\n    \n<span class=\"p\">}</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">low</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">high</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">temp</span><span class=\"p\">;</span>\n    \n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">low</span> <span class=\"o\">&gt;=</span> <span class=\"n\">high</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">//p就是基准数,这里就是每个数组的第一个\n</span><span class=\"c1\"></span>    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">low</span><span class=\"p\">];</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">low</span><span class=\"p\">;</span>\n    <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">high</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//右边当发现小于p的值时停止循环\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n                        \n        <span class=\"c1\">//这里一定是右边开始，上下这两个循环不能调换（下面有解析，可以先想想）    \n</span><span class=\"c1\"></span>\n        <span class=\"c1\">//左边当发现大于p的值时停止循环\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        \n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">low</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"c1\">//这里的arr[i]一定是停小于p的，经过i、j交换后i处的值一定是小于p的(j先走)\n</span><span class=\"c1\"></span>    <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span> \n    <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"n\">low</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>  <span class=\"c1\">//对左边快排\n</span><span class=\"c1\"></span>    <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">high</span><span class=\"p\">);</span> <span class=\"c1\">//对右边快排\n</span><span class=\"c1\"></span>    \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><h2>一些问题</h2><p>1.什么是基准值：<br/>其实就是在数组里面找一个数，一般选择数组的第一个数作为基准值，当然这不一定是最佳的基准值，但这不妨碍我们做快速排序。本篇只讲标配版的快排，所以就选第一位作为基准值，以后有机会再更新高配版的~</p><hr/><p>2.快排中为什么一定是右边先开始循环？<br/>从右边先开始的前提是我们选择序列中最左边的元素最为基准值。<br/>先从右边开始可以保证i,j相等的时候，arr[i] = arr[j] 小于基准值p。这样交换之后才能保证基准值左右两边分别小于和大于它的值。<br/>我们图片演示一下：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eab38abd2d918c9a476c9aee650866fd_b.jpg\" data-rawwidth=\"1000\" data-rawheight=\"563\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-eab38abd2d918c9a476c9aee650866fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;563&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1000\" data-rawheight=\"563\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-eab38abd2d918c9a476c9aee650866fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eab38abd2d918c9a476c9aee650866fd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>可以发现如果左边先走的话将导致分组不成功，即左边的元素并不是都小于基准值。</p><hr/><p>本篇完，如果有错误的地方欢迎大家指正，一起学习一起进步💪<br/>我的公众号：Java小部落</p><p>我的个人博客：<a href=\"https://link.zhihu.com/?target=http%3A//www.fangjiaxian.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">fangjiaxian.cn</span><span class=\"invisible\"></span></a><br/>不定时发发笔记，找一起学习的伙伴，欢迎大家来搞~</p>", 
            "topic": [
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": [
                {
                    "userName": "Forward", 
                    "userLink": "https://www.zhihu.com/people/0a3fbfb6cb1bd06846fca2791b6951b6", 
                    "content": "<p>你这个图画得真好</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "晔晔瞳影", 
                    "userLink": "https://www.zhihu.com/people/849b56280125786152311d3c6cfaf277", 
                    "content": "太好了，讲的真明白", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64658779", 
            "userName": "方嘉贤", 
            "userLink": "https://www.zhihu.com/people/748e73968def860d4e34af992f2c3251", 
            "upvote": 1, 
            "title": "排序算法-插入排序（Java实现）", 
            "content": "<h2>基本思想</h2><p>通过构建有序数列，对于未排序元素，在已排序数列中从后往前扫描，找到相应位置并插入。</p><hr/><h2>简单点~</h2><h3>实现过程</h3><p>1.将一个具有n个元素的待排序数列分成两个子数列，一个有序和一个无序。<br/>2.刚开始，我们将左边第一个元素看成一个有序数列，右边n-1个元素看成无序数列。<br/>3.从右边无序数列中取出一个元素，在已排序数列中从后往前扫描（比较），找到相应的位置并插入，使插入后有序数列仍然有序。<br/>4.重复第3步，直到完成整个排序过程。</p><hr/><h3>过程演示</h3><blockquote>图片来源网络，侵删</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b292f97a76c264e49179c3db90d52e12_b.gif\" data-rawwidth=\"300\" data-rawheight=\"180\" data-size=\"normal\" data-caption=\"\" data-thumbnail=\"https://pic3.zhimg.com/v2-b292f97a76c264e49179c3db90d52e12_b.jpg\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"300\" data-rawheight=\"180\" data-size=\"normal\" data-caption=\"\" data-thumbnail=\"https://pic3.zhimg.com/v2-b292f97a76c264e49179c3db90d52e12_b.jpg\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic3.zhimg.com/v2-b292f97a76c264e49179c3db90d52e12_b.gif\"/></figure><p><br/>过程演示</p><hr/><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">public</span> <span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">InsertSort</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">52</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">};</span>\n    <span class=\"n\">insertSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span>\n    <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Arrays</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">insertSort</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//从i=1 开始，因为单独一个元素arr[0]是有序的；\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//从无序数列中取出一个元素赋值给temp\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"c1\">//不断往前寻找，直到找到比temp小的值或者t小于0为止\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">//将temp插在其之后\n</span><span class=\"c1\"></span>        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n        \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div><hr/><p>本篇完，如果有错误的地方欢迎大家指正<br/>不定时发发笔记，欢迎大家来搞~<br/></p><p>我的公众号：Java小部落</p><p>我的个人博客：<a href=\"https://link.zhihu.com/?target=http%3A//www.fangjiaxian.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">fangjiaxian.cn</span><span class=\"invisible\"></span></a></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64658354", 
            "userName": "方嘉贤", 
            "userLink": "https://www.zhihu.com/people/748e73968def860d4e34af992f2c3251", 
            "upvote": 1, 
            "title": "排序算法—希尔排序", 
            "content": "<h2>希尔排序</h2><blockquote>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。</blockquote><h3>基本思想</h3><p>设待排序元素序列有n个元素<br/>1.取一个整数increment（小于n）作为间隔将全部元素分为increment个子序列<br/>2.每间隔increment取一个元素，并放在同一个子序列中，对每个子序列实行直接插入排序。<br/>3.缩小间隔increment<br/>4.重复上述子序列划分和排序工作。直到increment=1，即所有元素放在同一个子序列中进行最后的排序。</p><hr/><h3>简单点~</h3><p>假设有数组：{a0,a1,a2,a3,a4,a5,a6,a7,a8,a9}<br/>此时 n = 10<br/>1.一般情况下，我们取increment为：10/2 = 5,则此时：{a0,a5}、{a1,a6}、{a2,a7}、{a3,a8}、{a4,a9}这五组就是该数组的子序列,分别对这些子序列进行插入排序。<br/>2.我们再取increment为：5/2 = 2，则此时：{a0,a2,a4,a6,a8}和{a1,a3,a5,a7,a9}这两组就是该数组的子序列,分别对这两个序列进行插入排序。<br/>3.我们再取increment为：2/1 = 1,则此时：{a0,a1,a2,a3,a4,a5,a6,a7,a8,a9}所有元素都在同一个子序列中。<br/>4.此时对其进行插入排序，因为有前面的工作基础，大多数元素已经基本有序，所以排序速度仍然很快。<br/>从上面我们可以看到，增量increment是在逐渐减小的，所以这个方法我们也叫它为：缩小增量排序。</p><hr/><h3>图示：</h3><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-66d217e6e98ad020c6b25e1f240420f5_b.jpg\" data-rawwidth=\"822\" data-rawheight=\"564\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"822\" data-original=\"https://pic2.zhimg.com/v2-66d217e6e98ad020c6b25e1f240420f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;822&#39; height=&#39;564&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"822\" data-rawheight=\"564\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"822\" data-original=\"https://pic2.zhimg.com/v2-66d217e6e98ad020c6b25e1f240420f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-66d217e6e98ad020c6b25e1f240420f5_b.jpg\"/></figure><hr/><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">public</span> <span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">ShellSort</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">34</span><span class=\"p\">,</span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">,</span><span class=\"mi\">67</span><span class=\"p\">,</span><span class=\"mi\">88</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">};</span>\n    <span class=\"n\">shellSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span>\n    <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Arrays</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">shellSort</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">increment</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span><span class=\"p\">(;</span><span class=\"n\">increment</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">increment</span><span class=\"o\">/=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//下面这段代码和插入排序相同，只是这里的间隔是increment\n</span><span class=\"c1\"></span>        <span class=\"c1\">//直接插入排序的间隔是1\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">increment</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span><span class=\"p\">(;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">increment</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">];</span>\n                <span class=\"n\">t</span> <span class=\"o\">-=</span> <span class=\"n\">increment</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">+</span><span class=\"n\">increment</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n            \n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><p>本篇完，如果有错误的地方欢迎大家指正<br/>不定时发发笔记，欢迎大家来搞~<br/></p><p>我的公众号：Java小部落</p><p>我的个人博客：<a href=\"https://link.zhihu.com/?target=http%3A//www.fangjiaxian.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">fangjiaxian.cn</span><span class=\"invisible\"></span></a></p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/64657700", 
            "userName": "方嘉贤", 
            "userLink": "https://www.zhihu.com/people/748e73968def860d4e34af992f2c3251", 
            "upvote": 3, 
            "title": "排序算法-选择排序", 
            "content": "<h2>选择排序（Selection sort）</h2><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><hr/><h2>简单点~</h2><p>我们可以将选择排序看下一下几个步骤：<br/>1.遍历待排序数列，找到其中的最大值（或者最小值）。<br/>2.将该值与数列的最后一位（或者第一位）交换位置。<br/>3.再次遍历待排序数列，找到其中的找到其中的最大值（或者最小值）<br/>4.将该值与数列的倒数第二位（或者第二位）交换位置。<br/>5.重复上述操作，直到完成排序。</p><hr/><h3>图示</h3><h2><br/></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a7405e6f47f9e891af0acd18250347cf_b.jpg\" data-rawwidth=\"799\" data-rawheight=\"863\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic4.zhimg.com/v2-a7405e6f47f9e891af0acd18250347cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;863&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"799\" data-rawheight=\"863\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic4.zhimg.com/v2-a7405e6f47f9e891af0acd18250347cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a7405e6f47f9e891af0acd18250347cf_b.jpg\"/></figure><p><br/>image</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">public</span> <span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">SelectionSort</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"p\">{</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">67</span> <span class=\"p\">};</span>\n    <span class=\"n\">SelectionSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span>   \n    <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Arrays</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">SelectionSort</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">[]</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// pos用来记录最大值角标\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"n\">pos</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 交换的变量\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 控制一共遍历多少轮\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//初始化角标\n</span><span class=\"c1\"></span>        <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 控制每一轮需要比较的次数\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n\n            <span class=\"p\">}</span>\n\n        <span class=\"p\">}</span>\n        <span class=\"c1\">//将每次遍历到的最大值移动到待排序数列的末尾\n</span><span class=\"c1\"></span>        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">];</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div><hr/><p>本篇完，如果有错误的地方欢迎大家指正<br/>不定时发发笔记，欢迎大家来搞~<br/></p><p>我的公众号：Java小部落</p><p>我的个人博客：<a href=\"https://link.zhihu.com/?target=http%3A//www.fangjiaxian.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">fangjiaxian.cn</span><span class=\"invisible\"></span></a></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1108728563574059008"
}
