{
    "title": "pytorch填坑系列", 
    "description": "pytorch填坑系列", 
    "followers": [
        "https://www.zhihu.com/people/you-zi-96-69", 
        "https://www.zhihu.com/people/stefenief", 
        "https://www.zhihu.com/people/seg3522438", 
        "https://www.zhihu.com/people/li-xiao-song-84", 
        "https://www.zhihu.com/people/xiong-sheng-87-40", 
        "https://www.zhihu.com/people/568xian-sheng", 
        "https://www.zhihu.com/people/xiaohuihuichao", 
        "https://www.zhihu.com/people/liu-hao-77-3", 
        "https://www.zhihu.com/people/ai-jie-ke-49", 
        "https://www.zhihu.com/people/ldxiao-93", 
        "https://www.zhihu.com/people/hen-wen-yi-de-ni-cheng", 
        "https://www.zhihu.com/people/zhuang-ng-han", 
        "https://www.zhihu.com/people/stone-82-84", 
        "https://www.zhihu.com/people/cheng-shi-xiao-lang-jun-76-71", 
        "https://www.zhihu.com/people/boby-young", 
        "https://www.zhihu.com/people/mata-fu", 
        "https://www.zhihu.com/people/zhang-da-xia-58-8", 
        "https://www.zhihu.com/people/yu-hai-long-22", 
        "https://www.zhihu.com/people/ling-feng-41-65", 
        "https://www.zhihu.com/people/xiang-xiao-jun-85", 
        "https://www.zhihu.com/people/a-ai-41-94-79", 
        "https://www.zhihu.com/people/ma-hui-chao-33", 
        "https://www.zhihu.com/people/bu-niang-de-shi-hao", 
        "https://www.zhihu.com/people/zhang-cai-ming-24", 
        "https://www.zhihu.com/people/hanyd", 
        "https://www.zhihu.com/people/ykp-41", 
        "https://www.zhihu.com/people/fu-tong-19-69", 
        "https://www.zhihu.com/people/lao-ke-24-83", 
        "https://www.zhihu.com/people/cherish-35-31", 
        "https://www.zhihu.com/people/liu-jun-51-66", 
        "https://www.zhihu.com/people/52cv", 
        "https://www.zhihu.com/people/zhu-forrest", 
        "https://www.zhihu.com/people/niuxiaotian", 
        "https://www.zhihu.com/people/abbott-Meng", 
        "https://www.zhihu.com/people/da-sheng-lai-ye-63", 
        "https://www.zhihu.com/people/gu-ge-70-33", 
        "https://www.zhihu.com/people/wang-jing-70-24-78", 
        "https://www.zhihu.com/people/wu-bing-zhe-67", 
        "https://www.zhihu.com/people/zhen-bu-sheng-jiu-li", 
        "https://www.zhihu.com/people/fang-albert", 
        "https://www.zhihu.com/people/you-yin-shi-ren-17", 
        "https://www.zhihu.com/people/caorui1995", 
        "https://www.zhihu.com/people/cloud-49-7", 
        "https://www.zhihu.com/people/li-xiang-34", 
        "https://www.zhihu.com/people/XiaMin1314", 
        "https://www.zhihu.com/people/ha-ha-mo-mo-32", 
        "https://www.zhihu.com/people/luodahei", 
        "https://www.zhihu.com/people/Steven_Jokes", 
        "https://www.zhihu.com/people/yugengde1999", 
        "https://www.zhihu.com/people/wuyefeima", 
        "https://www.zhihu.com/people/angel-ray", 
        "https://www.zhihu.com/people/hu-ming-16-38", 
        "https://www.zhihu.com/people/jeffrey-green", 
        "https://www.zhihu.com/people/ideaplat", 
        "https://www.zhihu.com/people/forgetreadnot", 
        "https://www.zhihu.com/people/zhang_tao0906", 
        "https://www.zhihu.com/people/kleeeea", 
        "https://www.zhihu.com/people/666233-95-78", 
        "https://www.zhihu.com/people/yhan-22-12", 
        "https://www.zhihu.com/people/liu-fei-94-95", 
        "https://www.zhihu.com/people/leo-lee-58-57", 
        "https://www.zhihu.com/people/x1993", 
        "https://www.zhihu.com/people/yang-troy-89", 
        "https://www.zhihu.com/people/ren-feng-lei-61", 
        "https://www.zhihu.com/people/wei-lu-hua-lao", 
        "https://www.zhihu.com/people/zhu-zhen-xuan-50", 
        "https://www.zhihu.com/people/pwq1989", 
        "https://www.zhihu.com/people/michael-hsu", 
        "https://www.zhihu.com/people/pray-90-47", 
        "https://www.zhihu.com/people/huang-xiao-neng-70-57", 
        "https://www.zhihu.com/people/spearous", 
        "https://www.zhihu.com/people/xing-chi-jun-85", 
        "https://www.zhihu.com/people/guo-xin-tao-3", 
        "https://www.zhihu.com/people/hqwsky", 
        "https://www.zhihu.com/people/jysu", 
        "https://www.zhihu.com/people/redblue-71", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/qiu-qiang", 
        "https://www.zhihu.com/people/moni-gg", 
        "https://www.zhihu.com/people/xie-chu-xin-52", 
        "https://www.zhihu.com/people/gabbar-wang", 
        "https://www.zhihu.com/people/yunyanglee", 
        "https://www.zhihu.com/people/muzi618", 
        "https://www.zhihu.com/people/saynonono", 
        "https://www.zhihu.com/people/goolenba-te-2", 
        "https://www.zhihu.com/people/solvercorleone", 
        "https://www.zhihu.com/people/bai-fan-35-96", 
        "https://www.zhihu.com/people/zhangeditor", 
        "https://www.zhihu.com/people/duyankang", 
        "https://www.zhihu.com/people/zhi-bu-hu-47-45", 
        "https://www.zhihu.com/people/wang-kai-97-80-46", 
        "https://www.zhihu.com/people/zhao-jian-long-94", 
        "https://www.zhihu.com/people/feijiang1201", 
        "https://www.zhihu.com/people/zhou-jie-77-75", 
        "https://www.zhihu.com/people/gai-bian-75-96", 
        "https://www.zhihu.com/people/yi-liang-23-12", 
        "https://www.zhihu.com/people/wang-jian-89-85", 
        "https://www.zhihu.com/people/feng-zhong-de-yi-han-83", 
        "https://www.zhihu.com/people/mo-fei-te-xian-sen-56", 
        "https://www.zhihu.com/people/xiao-yu-22-71-20", 
        "https://www.zhihu.com/people/ju-shang-38", 
        "https://www.zhihu.com/people/young-joe-91", 
        "https://www.zhihu.com/people/xiao-dong-bei-250", 
        "https://www.zhihu.com/people/aihaoge1314", 
        "https://www.zhihu.com/people/pi-zhao-zhu-pi-de-lang-76", 
        "https://www.zhihu.com/people/han-wei-guang", 
        "https://www.zhihu.com/people/yixie-zhi-qiu-29-14-98", 
        "https://www.zhihu.com/people/luxun-huang", 
        "https://www.zhihu.com/people/icecho", 
        "https://www.zhihu.com/people/xylon-49", 
        "https://www.zhihu.com/people/xie-liu-feng", 
        "https://www.zhihu.com/people/nicklaus-15", 
        "https://www.zhihu.com/people/xxxxxxooooo", 
        "https://www.zhihu.com/people/na-shui-60-42", 
        "https://www.zhihu.com/people/helianus-hu", 
        "https://www.zhihu.com/people/luo-bi-cheng", 
        "https://www.zhihu.com/people/bluemachinelearning", 
        "https://www.zhihu.com/people/jdjw6688", 
        "https://www.zhihu.com/people/la-lian-86", 
        "https://www.zhihu.com/people/tony-huang-89", 
        "https://www.zhihu.com/people/yueyue-brother", 
        "https://www.zhihu.com/people/mo_zhu", 
        "https://www.zhihu.com/people/ggff-ss", 
        "https://www.zhihu.com/people/nextchen", 
        "https://www.zhihu.com/people/lin-hui-xiang", 
        "https://www.zhihu.com/people/hu-bing-78-85", 
        "https://www.zhihu.com/people/leviding", 
        "https://www.zhihu.com/people/a-li-ba-ba-20-78", 
        "https://www.zhihu.com/people/xiao-yi-75-76", 
        "https://www.zhihu.com/people/tao-de-72", 
        "https://www.zhihu.com/people/nu-li-que-chang-chang-shi-bai", 
        "https://www.zhihu.com/people/xiyao-lin", 
        "https://www.zhihu.com/people/xc-li-28", 
        "https://www.zhihu.com/people/aslong-46", 
        "https://www.zhihu.com/people/guang-ming-gmg", 
        "https://www.zhihu.com/people/xu-hua-qing-6", 
        "https://www.zhihu.com/people/ming-ri-wu-feng", 
        "https://www.zhihu.com/people/leengsmile", 
        "https://www.zhihu.com/people/qinkang-69", 
        "https://www.zhihu.com/people/ge-chen-1993", 
        "https://www.zhihu.com/people/yxchi", 
        "https://www.zhihu.com/people/tang-ke-41", 
        "https://www.zhihu.com/people/kuang-peng-30", 
        "https://www.zhihu.com/people/kai-xu-37-40", 
        "https://www.zhihu.com/people/ma-ti-60", 
        "https://www.zhihu.com/people/roger-gou", 
        "https://www.zhihu.com/people/chen-ma-6", 
        "https://www.zhihu.com/people/qinlibo_nlp", 
        "https://www.zhihu.com/people/zenlp", 
        "https://www.zhihu.com/people/liang-zhi-25-82", 
        "https://www.zhihu.com/people/zhang-yun-ming-14", 
        "https://www.zhihu.com/people/guan-dai-73", 
        "https://www.zhihu.com/people/quan-wei-sheng-dan", 
        "https://www.zhihu.com/people/tang-xiao-liang-72", 
        "https://www.zhihu.com/people/ilvylb", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/sunnyos", 
        "https://www.zhihu.com/people/kong-cheng-zui-da-ying-jia", 
        "https://www.zhihu.com/people/anham-lee", 
        "https://www.zhihu.com/people/xu-yin-da-58", 
        "https://www.zhihu.com/people/yildhd-wang", 
        "https://www.zhihu.com/people/chen-hui-31-37", 
        "https://www.zhihu.com/people/walker-star", 
        "https://www.zhihu.com/people/wang-ying-jun-97", 
        "https://www.zhihu.com/people/luo-chuan-chen-79", 
        "https://www.zhihu.com/people/xu-guo-xia-9", 
        "https://www.zhihu.com/people/qinyi20060410", 
        "https://www.zhihu.com/people/kevin-hill", 
        "https://www.zhihu.com/people/gdshen", 
        "https://www.zhihu.com/people/zencoding", 
        "https://www.zhihu.com/people/wang-frey", 
        "https://www.zhihu.com/people/zhanjun-tuo", 
        "https://www.zhihu.com/people/yan-hong-yu-67-4"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/88480442", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 2, 
            "title": "ScaleNet阅读笔记", 
            "content": "<p>It&#39;s All About The Scale - Efficient Text Detection Using Adaptive Scaling 是最近翻到的一篇文本检测论文。</p><p>地址如下</p><a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1907.12122.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">arxiv.org/pdf/1907.1212</span><span class=\"invisible\">2.pdf</span><span class=\"ellipsis\"></span></a><h2>动机</h2><ol><li>现有的方法对小文本检测不好。</li><li>现有的方法需要将整幅图像输入网络进行文本检测，背景会占据太多的计算量。</li></ol><h2>贡献</h2><ol><li>所提出方法可以自适应的缩放文本区域，比整张图固定的缩放更好。</li><li>提出了一种新的文本语义分割思路</li></ol><h2>网络结构</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2ed0008322ba82cee47c8f3c0fa9125e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb\" width=\"664\" data-original=\"https://pic3.zhimg.com/v2-2ed0008322ba82cee47c8f3c0fa9125e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;664&#39; height=&#39;511&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"664\" data-original=\"https://pic3.zhimg.com/v2-2ed0008322ba82cee47c8f3c0fa9125e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2ed0008322ba82cee47c8f3c0fa9125e_b.jpg\"/></figure><p>网络使用resnet50+FPN结构，网络输出有三个：</p><ol><li>文本实例text的分割图。</li><li>缩放后kernel的分割图</li><li>scale map。</li></ol><h2>训练数据的标签生成</h2><p>训练所需的gt如下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7051a40d877c7f90986580cd073c4b7a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-7051a40d877c7f90986580cd073c4b7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;661&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"661\" data-original=\"https://pic3.zhimg.com/v2-7051a40d877c7f90986580cd073c4b7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7051a40d877c7f90986580cd073c4b7a_b.jpg\"/></figure><p><b>text和kernel的gt</b>和pse是一样的，kernel缩放方式也和psenet一样，不过比例(r)设为0.4。缩放公式如下</p><p><img src=\"https://www.zhihu.com/equation?tex=d%3D%5Cfrac%7B%5Coperatorname%7BArea%7D%28P%29+%5Ctimes%5Cleft%281-r%5E%7B2%7D%5Cright%29%7D%7B%5Coperatorname%7BPerimeter%7D%28P%29%7D\" alt=\"d=\\frac{\\operatorname{Area}(P) \\times\\left(1-r^{2}\\right)}{\\operatorname{Perimeter}(P)}\" eeimg=\"1\"/> </p><p><b>scale map 的gt</b>是一个分割图，分割图中每一个文本像素处的值就是该像素所在文本框的平均高度(或者w,h里较小的一个)，w,h可以通过<code>cv2.minAreaRect()</code>得到。 之所以用h,是因为h不受字符数的影响，并且与字体大小和单词之间的间距密切相关。</p><p>推理</p><h2>loss函数</h2><p><b>text和kernel的loss</b>函数和pse一样，均为</p><p><img src=\"https://www.zhihu.com/equation?tex=L%28S%2C+G%29%3D1-%5Cfrac%7B2+%5Csum_%7Bx%2C+y%7D%5Cleft%28S_%7Bx%2C+y%7D+%5Ctimes+G_%7Bx%2C+y%7D%5Cright%29%7D%7B%5Csum_%7Bx%2C+y%7D+S_%7Bx%2C+y%7D%5E%7B2%7D%2B%5Csum_%7Bx%2C+y%7D+G_%7Bx%2C+y%7D%5E%7B2%7D%7D\" alt=\"L(S, G)=1-\\frac{2 \\sum_{x, y}\\left(S_{x, y} \\times G_{x, y}\\right)}{\\sum_{x, y} S_{x, y}^{2}+\\sum_{x, y} G_{x, y}^{2}}\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 是网络输出， <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"/> 是gt。</p><p>文本分割的总loss使用text和kernel loss的加权和：</p><p><img src=\"https://www.zhihu.com/equation?tex=L_%7B%5Ctext+%7Bsegment%7D%7D%3D0.5+%5Ccdot+L_%7Bc%7D%2B0.5+%5Ccdot+L_%7Bs%7D\" alt=\"L_{\\text {segment}}=0.5 \\cdot L_{c}+0.5 \\cdot L_{s}\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=L_%7Bc%7D\" alt=\"L_{c}\" eeimg=\"1\"/> 是text的loss, <img src=\"https://www.zhihu.com/equation?tex=L_%7Bs%7D\" alt=\"L_{s}\" eeimg=\"1\"/>  是kernel的，只在 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bc%7D\" alt=\"L_{c}\" eeimg=\"1\"/> 是使用比例为3的OHEM。</p><p>其实上面这个文本分割的loss就是pse里的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>scale map的loss</b>采用的目标检测里预测anchor的思想，具体如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=s_%7B%5Chat%7Bi%7D%2C+j%7D%5E%7B%5Cprime%7D%3D%5Clog+%5Cleft%28%5Cfrac%7Bs_%7Bi%2C+j%7D%7D%7Bs_%7Br+e+f%7D%7D%5Cright%29\" alt=\"s_{\\hat{i}, j}^{\\prime}=\\log \\left(\\frac{s_{i, j}}{s_{r e f}}\\right)\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=s_%7Bi%2C+j%7D\" alt=\"s_{i, j}\" eeimg=\"1\"/> 是文本像素 <img src=\"https://www.zhihu.com/equation?tex=%28i%2Cj%29\" alt=\"(i,j)\" eeimg=\"1\"/> 处预测的文本的高度。 <img src=\"https://www.zhihu.com/equation?tex=S_%7Br+e+f%7D\" alt=\"S_{r e f}\" eeimg=\"1\"/> 是常亮，默认25。</p><p>然后使用 <img src=\"https://www.zhihu.com/equation?tex=Smooth-L1+loss\" alt=\"Smooth-L1 loss\" eeimg=\"1\"/> </p><p><img src=\"https://www.zhihu.com/equation?tex=L_%7B%5Ctext+%7Bscale%7D%7D%5Cleft%28%5Chat%7Bs%7D%2C+%5Chat%7Bs%7D_%7Bg+t%7D%5Cright%29%3D%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%7B0.5%5Cleft%28%5Chat%7Bs%7D-%5Chat%7Bs%7D_%7Bg+t%7D%5Cright%29%5E%7B2%7D%2C%7D+%26+%7B%5Ctext+%7B+if+%7D%5Cleft%7C%5Chat%7Bs%7D-%5Chat%7Bs%7D_%7Bg+t%7D%5Cright%7C%3C1%7D+%5C%5C+%7B%5Cleft%7C%5Chat%7Bs%7D-%5Chat%7Bs%7D_%7Bg+t%7D%5Cright%7C-0.5%7D+%26+%7B%5Ctext+%7B+otherwise+%7D%7D%5Cend%7Barray%7D%5Cright.\" alt=\"L_{\\text {scale}}\\left(\\hat{s}, \\hat{s}_{g t}\\right)=\\left\\{\\begin{array}{ll}{0.5\\left(\\hat{s}-\\hat{s}_{g t}\\right)^{2},} &amp; {\\text { if }\\left|\\hat{s}-\\hat{s}_{g t}\\right|&lt;1} \\\\ {\\left|\\hat{s}-\\hat{s}_{g t}\\right|-0.5} &amp; {\\text { otherwise }}\\end{array}\\right.\" eeimg=\"1\"/></p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=%5Chat%7B%5Cmathcal%7BS%7D%7D\" alt=\"\\hat{\\mathcal{S}}\" eeimg=\"1\"/> 是网络输出的归一化后的scale，<img src=\"https://www.zhihu.com/equation?tex=%5Chat%7Bs%7D_%7Bg+t%7D\" alt=\"\\hat{s}_{g t}\" eeimg=\"1\"/> 是gt的归一化后的scale。</p><p>总的loss为：</p><p><img src=\"https://www.zhihu.com/equation?tex=L%3DL_%7B%5Ctext+%7Bsegment%7D%7D%2B0.1+%5Ccdot+L_%7B%5Ctext+%7Bscale%7D%7D\" alt=\"L=L_{\\text {segment}}+0.1 \\cdot L_{\\text {scale}}\" eeimg=\"1\"/> </p><p>ps: <img src=\"https://www.zhihu.com/equation?tex=S_%7Br+e+f%7D\" alt=\"S_{r e f}\" eeimg=\"1\"/> 和各个loss 的权重都是实验得到的。</p><h2><b>推理</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-89290c25144025a0aec6470f45096a1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-89290c25144025a0aec6470f45096a1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-89290c25144025a0aec6470f45096a1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-89290c25144025a0aec6470f45096a1b_b.jpg\"/></figure><p>推理过程中，网络需要走两遍。</p><ol><li>第一编，图像缩小之后进入网络进行文本大致区域的分割。</li><li>根据text map分割结果去原图上裁剪文字区域。</li><li>对每一个文本区域进行缩放，缩放后高度为1.5 <img src=\"https://www.zhihu.com/equation?tex=S_%7Br+e+f%7D\" alt=\"S_{r e f}\" eeimg=\"1\"/> 。</li><li>缩放后的文本区域贴在一个图上，贴图过程使用Maximal Rectangles Best Short Side Fit algorithm(A thousand ways to pack the bin-a practical approach to two-dimensional rectangle bin packing)。</li><li>第二遍，贴图后的图片再走一遍网络进行文字的检测。</li><li>kernel map的输出结果用来计算文本框，并且根据训练时的缩放比例(0.4)进行放大以形成完整的文本框。</li><li>根据scale map 对第6步中的文本框进行缩放，以保证大小为原图中的大小，然后根据贴图的位置，进行坐标变换。</li><li>输出文本框。</li></ol><p>在训练过程中，还会随机的对图片进行裁剪和堆叠，以添加贴图的效果。</p>", 
            "topic": [
                {
                    "tag": "读书笔记", 
                    "tagLink": "https://api.zhihu.com/topics/19590861"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79111059", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 18, 
            "title": "PAN(PSENet2)", 
            "content": "<p>Efficient and Accurate Arbitrary-Shaped Text Detection with Pixel Aggregation Network是face++发表在ICCV2019的一篇文章，可以看做psenet的改进，两篇文章地址如下</p><a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1908.05900.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PAN</a><a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1903.12473.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PSENet</a><p>代码(开发中，未完成)</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/WenmuZhou/PAN.pytorch\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-6fcfaf7b16d8341551a02339d401219b_ipico.jpg\" data-image-width=\"300\" data-image-height=\"300\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WenmuZhou/PAN.pytorch</a><h2>网络结构</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bff34e39a271b732834a41317a1e38ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1043\" data-rawheight=\"486\" class=\"origin_image zh-lightbox-thumb\" width=\"1043\" data-original=\"https://pic3.zhimg.com/v2-bff34e39a271b732834a41317a1e38ba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1043&#39; height=&#39;486&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1043\" data-rawheight=\"486\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1043\" data-original=\"https://pic3.zhimg.com/v2-bff34e39a271b732834a41317a1e38ba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bff34e39a271b732834a41317a1e38ba_b.jpg\"/></figure><p>网络由backbone+FPEM+FFM+output组成。</p><h2>Backbone</h2><p>选择的是resnet18, 提取stride为4,8,16,32的conv2,conv3,conv4,conv5的输出作为高低层特征。每层的特征图的通道数都使用 <img src=\"https://www.zhihu.com/equation?tex=1%5Ctimes1\" alt=\"1\\times1\" eeimg=\"1\"/> 卷积降维至128得到轻量级的特征图 <img src=\"https://www.zhihu.com/equation?tex=F_%7Br%7D\" alt=\"F_{r}\" eeimg=\"1\"/> 。</p><h2>FPEM</h2><p>Feature Pyramid Enhancement Module，特征金字塔增强模块，作者提出的用于增强backbone输出特征图的一个模块，结构如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-00ca25ef85cbd9f316044a52c1618f65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic2.zhimg.com/v2-00ca25ef85cbd9f316044a52c1618f65_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;512&#39; height=&#39;405&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"512\" data-original=\"https://pic2.zhimg.com/v2-00ca25ef85cbd9f316044a52c1618f65_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-00ca25ef85cbd9f316044a52c1618f65_b.jpg\"/></figure><p>FPEM模块可以看成是一个轻量级的FPN，只不过这个FPEM计算量不大，可以不停级联以达到不停增强特征的作用。每个FPEM模块都会输出和 <img src=\"https://www.zhihu.com/equation?tex=F_%7Br%7D\" alt=\"F_{r}\" eeimg=\"1\"/> 的特征图。级联4个就会输出4组 <img src=\"https://www.zhihu.com/equation?tex=F_%7Br%7D\" alt=\"F_{r}\" eeimg=\"1\"/> 。</p><h2>FFM</h2><p>Feature Fusion Module模块用于融合不同尺度的特征，其结构如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9e179c098a989fe08310abcc4c1a26d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic3.zhimg.com/v2-9e179c098a989fe08310abcc4c1a26d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;490&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"490\" data-original=\"https://pic3.zhimg.com/v2-9e179c098a989fe08310abcc4c1a26d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9e179c098a989fe08310abcc4c1a26d6_b.jpg\"/></figure><p><img src=\"https://www.zhihu.com/equation?tex=n_%7Bc%7D\" alt=\"n_{c}\" eeimg=\"1\"/> 级联的FPEM会输出 <img src=\"https://www.zhihu.com/equation?tex=n_%7Bc%7D\" alt=\"n_{c}\" eeimg=\"1\"/> 组 <img src=\"https://www.zhihu.com/equation?tex=F_%7Br%7D\" alt=\"F_{r}\" eeimg=\"1\"/> ( <img src=\"https://www.zhihu.com/equation?tex=n_%7Bc%7D\" alt=\"n_{c}\" eeimg=\"1\"/> 是级联的数量)，如果直接将里面的特征上采样之后concat的话，特征的维度就会达到 <img src=\"https://www.zhihu.com/equation?tex=4%5Ctimes128%5Ctimes+n_%7Bc%7D\" alt=\"4\\times128\\times n_{c}\" eeimg=\"1\"/> ，这样会极大的降低后面的输出层速度，因此作者使用FFM模块先将同尺度的特征图进行element-wise addition，然后再上采样之后进行concat，这样输出的维度只有 <img src=\"https://www.zhihu.com/equation?tex=4%5Ctimes128\" alt=\"4\\times128\" eeimg=\"1\"/> ，此时的输出为 <img src=\"https://www.zhihu.com/equation?tex=F_%7Bf%7D\" alt=\"F_{f}\" eeimg=\"1\"/> 。</p><h2>Output</h2><p>output层应该就是一个 <img src=\"https://www.zhihu.com/equation?tex=1%5Ctimes1\" alt=\"1\\times1\" eeimg=\"1\"/> 的卷积，输出 <img src=\"https://www.zhihu.com/equation?tex=w%5Ctimes+h%5Ctimes+6\" alt=\"w\\times h\\times 6\" eeimg=\"1\"/> 。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>网络输出</h2><ol><li>text_region， <img src=\"https://www.zhihu.com/equation?tex=w%5Ctimes+h+%5Ctimes+1\" alt=\"w\\times h \\times 1\" eeimg=\"1\"/> </li><li>kernel，<img src=\"https://www.zhihu.com/equation?tex=w%5Ctimes+h+%5Ctimes+1\" alt=\"w\\times h \\times 1\" eeimg=\"1\"/></li><li>similarity vectors (无监督学习)，<img src=\"https://www.zhihu.com/equation?tex=w%5Ctimes+h+%5Ctimes+4\" alt=\"w\\times h \\times 4\" eeimg=\"1\"/>。在无监督聚类中，通过找一个聚类中心使得周围点到聚类中心的距离最小，这个距离的计算需要聚类中心点和待聚类点的一个值来计算，此处的similarity vectors输出的就是那个值。</li></ol><h2>loss函数</h2><p>总的loss如下，其中 <img src=\"https://www.zhihu.com/equation?tex=L_%7Btex%7D\" alt=\"L_{tex}\" eeimg=\"1\"/>和 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bker%7D\" alt=\"L_{ker}\" eeimg=\"1\"/>分别是文本实例和kernel的分割loss， <img src=\"https://www.zhihu.com/equation?tex=L_%7Bagg%7D\" alt=\"L_{agg}\" eeimg=\"1\"/> 是衡量文本实例和其对应kernel的loss， <img src=\"https://www.zhihu.com/equation?tex=L_%7Bdis%7D\" alt=\"L_{dis}\" eeimg=\"1\"/> 是不同文本实例的kernel的loss。 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha%EF%BC%8C%5Cbeta\" alt=\"\\alpha，\\beta\" eeimg=\"1\"/> 是平衡各个loss的值，设为0.5和0.25。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d258d785a67af7f354820559fadfdec1_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"53\" class=\"content_image\" width=\"371\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;371&#39; height=&#39;53&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"53\" class=\"content_image lazy\" width=\"371\" data-actualsrc=\"https://pic2.zhimg.com/v2-d258d785a67af7f354820559fadfdec1_b.png\"/></figure><p><img src=\"https://www.zhihu.com/equation?tex=L_%7Btex%7D\" alt=\"L_{tex}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bker%7D\" alt=\"L_{ker}\" eeimg=\"1\"/>的公式和psenet1一致，使用dice loss:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3b9209ea17f00c7b68fa3a4c76e2ecbf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"146\" class=\"content_image\" width=\"384\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;384&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"146\" class=\"content_image lazy\" width=\"384\" data-actualsrc=\"https://pic4.zhimg.com/v2-3b9209ea17f00c7b68fa3a4c76e2ecbf_b.jpg\"/></figure><p>论文的重点在于 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bagg%7D\" alt=\"L_{agg}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bdis%7D\" alt=\"L_{dis}\" eeimg=\"1\"/> ，下面分别描述。</p><p><img src=\"https://www.zhihu.com/equation?tex=L_%7Bagg%7D\" alt=\"L_{agg}\" eeimg=\"1\"/>  用于衡量文本实例和其对应kernel的loss，其作用是保证同一文本实例的kernel和文本实例内其他像素点之间的距离&lt; <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7Bagg%7D\" alt=\"\\delta_{agg}\" eeimg=\"1\"/> 。其公式为:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-011a3b6455b7a678a50d7f5bd2905d4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"87\" class=\"content_image\" width=\"398\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;398&#39; height=&#39;87&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"87\" class=\"content_image lazy\" width=\"398\" data-actualsrc=\"https://pic2.zhimg.com/v2-011a3b6455b7a678a50d7f5bd2905d4d_b.jpg\"/></figure><p>其中， <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> 是图像中文本实例的数量，<img src=\"https://www.zhihu.com/equation?tex=T_%7Bi%7D\" alt=\"T_{i}\" eeimg=\"1\"/> 表示第 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> 个文本实例， <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 是文本实例对于的kernel。 <img src=\"https://www.zhihu.com/equation?tex=D%28p%2Ck_%7Bi%7D%29\" alt=\"D(p,k_{i})\" eeimg=\"1\"/> 定义的了文本实例 <img src=\"https://www.zhihu.com/equation?tex=T_%7Bi%7D\" alt=\"T_{i}\" eeimg=\"1\"/> 内的像素 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 之间的距离，其公式如下:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b4461521e86b746afb2c85e2f9701c3d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"40\" class=\"content_image\" width=\"408\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;408&#39; height=&#39;40&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"40\" class=\"content_image lazy\" width=\"408\" data-actualsrc=\"https://pic2.zhimg.com/v2-b4461521e86b746afb2c85e2f9701c3d_b.png\"/></figure><p>其中， <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7Bagg%7D\" alt=\"\\delta_{agg}\" eeimg=\"1\"/> 是一个常量，默认0.5， <img src=\"https://www.zhihu.com/equation?tex=F_%7Bp%7D\" alt=\"F_{p}\" eeimg=\"1\"/> 是网络在像素 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 处输出的相似度向量， <img src=\"https://www.zhihu.com/equation?tex=G%28%5Cbullet%29\" alt=\"G(\\bullet)\" eeimg=\"1\"/> 是 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 的相似度向量，计算公式为：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-293dd99dc79d0a7375afa6774397b244_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"159\" data-rawheight=\"32\" class=\"content_image\" width=\"159\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;159&#39; height=&#39;32&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"159\" data-rawheight=\"32\" class=\"content_image lazy\" width=\"159\" data-actualsrc=\"https://pic1.zhimg.com/v2-293dd99dc79d0a7375afa6774397b244_b.png\"/></figure><p><img src=\"https://www.zhihu.com/equation?tex=G%28%5Cbullet%29\" alt=\"G(\\bullet)\" eeimg=\"1\"/> 的计算就是对于 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 里的每一个像素 <img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"q\" eeimg=\"1\"/> ，网络在像素 <img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"q\" eeimg=\"1\"/> 处输出的相似度向量/ <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 的像素点数量，<b><img src=\"https://www.zhihu.com/equation?tex=%5Cleft%7C+K_%7Bi%7D%5Cright%7C\" alt=\"\\left| K_{i}\\right|\" eeimg=\"1\"/></b> 指 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 的L1范数，这里代表的就是<img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/>里像素点的数量。</p><p><img src=\"https://www.zhihu.com/equation?tex=D%28p%2CK_%7Bi%7D%29\" alt=\"D(p,K_{i})\" eeimg=\"1\"/> 里的 <img src=\"https://www.zhihu.com/equation?tex=%5Cleft%7C%7C+F%28p%29+-+G%28K_%7Bi%7D%29+%5Cright%7C%7C\" alt=\"\\left|| F(p) - G(K_{i}) \\right||\" eeimg=\"1\"/> 表示 <img src=\"https://www.zhihu.com/equation?tex=+F%28p%29+-+G%28K_%7Bi%7D%29\" alt=\" F(p) - G(K_{i})\" eeimg=\"1\"/>的L2范数，是一个用于衡量像素点到 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 距离的值，值越小表示相似度越大，公式中距离小于 <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7Bagg%7D\" alt=\"\\delta_{agg}\" eeimg=\"1\"/> 的像素点就没必要参与loss计算了，关注那些距离远的值即可。</p><p><img src=\"https://www.zhihu.com/equation?tex=L_%7Bdis%7D\" alt=\"L_{dis}\" eeimg=\"1\"/> 用于是不同文本实例的kernel的loss，其作用是保证任意两个kernel之间的距离&gt; <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7Bdis%7D\" alt=\"\\delta_{dis}\" eeimg=\"1\"/> 。其公式为:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ac6172f248de43c150ae9e87dcff9efc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"97\" class=\"content_image\" width=\"392\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;392&#39; height=&#39;97&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"97\" class=\"content_image lazy\" width=\"392\" data-actualsrc=\"https://pic1.zhimg.com/v2-ac6172f248de43c150ae9e87dcff9efc_b.jpg\"/></figure><p>即对于每一个文本实例kernel，分别计算和其他kernel的距离。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8ec1fa44f56b7d2a440304fbf1de286c_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"35\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic1.zhimg.com/v2-8ec1fa44f56b7d2a440304fbf1de286c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;35&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"35\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic1.zhimg.com/v2-8ec1fa44f56b7d2a440304fbf1de286c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8ec1fa44f56b7d2a440304fbf1de286c_b.png\"/></figure><p>其中， <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7Bdis%7D\" alt=\"\\delta_{dis}\" eeimg=\"1\"/> 是一个常量，默认3。当两个kernel之间的距离 <img src=\"https://www.zhihu.com/equation?tex=%5Cleft%7C%7C+G%28K_%7Bi%7D%29+-+G%28K_%7Bj%7D%29+%5Cright%7C%7C\" alt=\"\\left|| G(K_{i}) - G(K_{j}) \\right||\" eeimg=\"1\"/>&gt; <img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7Bdis%7D\" alt=\"\\delta_{dis}\" eeimg=\"1\"/> 时，就表示这两个kernel的距离已经足够远了。</p><p>另外，在训练过程中， <img src=\"https://www.zhihu.com/equation?tex=L_%7Btex%7D\" alt=\"L_{tex}\" eeimg=\"1\"/> 的计算使用的OHEM，正负像素之比是1:3，计算 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bker%7D\" alt=\"L_{ker}\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=L_%7Bagg%7D\" alt=\"L_{agg}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=L_%7Bdis%7D\" alt=\"L_{dis}\" eeimg=\"1\"/> 时均只考虑ground truth内的文本像素。</p><h2><b>后处理</b></h2><ol><li>从kernel中通过连通域确定初始的文本实例集合 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"/> 。</li><li>对于每一个文本实例 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> ，按4方向从text_region中融合文本像素。融合条件: 文本像素点 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=K_%7Bi%7D\" alt=\"K_{i}\" eeimg=\"1\"/> 之间similarity vectors的欧式距离&lt; <img src=\"https://www.zhihu.com/equation?tex=d\" alt=\"d\" eeimg=\"1\"/>  (测试过程中 <img src=\"https://www.zhihu.com/equation?tex=d\" alt=\"d\" eeimg=\"1\"/> 默认为6)。</li><li>重复步骤2直到text_region没有文本像素。</li></ol><h2>实验结果</h2><p>级联不同数量FPEM的实验对比</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-99a263bb27d1c52d513ff57cb7f96945_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-99a263bb27d1c52d513ff57cb7f96945_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;508&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-99a263bb27d1c52d513ff57cb7f96945_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-99a263bb27d1c52d513ff57cb7f96945_b.jpg\"/></figure><p>FFM的作用</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6919e5e76370e6e61d726923f18d0166_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic3.zhimg.com/v2-6919e5e76370e6e61d726923f18d0166_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic3.zhimg.com/v2-6919e5e76370e6e61d726923f18d0166_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6919e5e76370e6e61d726923f18d0166_b.jpg\"/></figure><p>和SOTA的对比</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-674f6ad82bf25ed6812bd574e84cf445_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-674f6ad82bf25ed6812bd574e84cf445_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;349&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-674f6ad82bf25ed6812bd574e84cf445_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-674f6ad82bf25ed6812bd574e84cf445_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cda2a6ab718e6bee45846dbe1389c4e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"503\" data-original=\"https://pic3.zhimg.com/v2-cda2a6ab718e6bee45846dbe1389c4e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;503&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"503\" data-original=\"https://pic3.zhimg.com/v2-cda2a6ab718e6bee45846dbe1389c4e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cda2a6ab718e6bee45846dbe1389c4e2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ac5e090a9fedd9e199d4f2e4a14727a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic1.zhimg.com/v2-ac5e090a9fedd9e199d4f2e4a14727a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;523&#39; height=&#39;401&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"523\" data-original=\"https://pic1.zhimg.com/v2-ac5e090a9fedd9e199d4f2e4a14727a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ac5e090a9fedd9e199d4f2e4a14727a8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-69e9a61e03243d639d8dcf2c589b0ded_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb\" width=\"519\" data-original=\"https://pic2.zhimg.com/v2-69e9a61e03243d639d8dcf2c589b0ded_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;519&#39; height=&#39;311&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"519\" data-original=\"https://pic2.zhimg.com/v2-69e9a61e03243d639d8dcf2c589b0ded_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-69e9a61e03243d639d8dcf2c589b0ded_b.jpg\"/></figure><p>可视化结果</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e07dc12b7e4ce0229456e214d7ac10dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1087\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb\" width=\"1087\" data-original=\"https://pic2.zhimg.com/v2-e07dc12b7e4ce0229456e214d7ac10dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1087&#39; height=&#39;466&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1087\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1087\" data-original=\"https://pic2.zhimg.com/v2-e07dc12b7e4ce0229456e214d7ac10dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e07dc12b7e4ce0229456e214d7ac10dd_b.jpg\"/></figure><h2>疑问</h2><ol><li>后处理：当图片里的文本数量过多时，psenet的后处理部分会非常的耗时，理论上psenet的后处理是需要搜索完全部的文本像素(但是我感觉遍历一张图也不需要这么久)。现在PAN的后处理也是需要遍历全部的文本像素，不知道这个后处理的耗时是不是比psenet的要低。</li><li>网络：将PAN的网络嫁接到PSENet上会不会也会极大的提升PSENet的速度。</li><li>输出：输出的similarity vectors四个维度的值分别表示的是什么含义。</li></ol>", 
            "topic": [
                {
                    "tag": "OCR（光学字符识别）", 
                    "tagLink": "https://api.zhihu.com/topics/19574441"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "ICCV", 
                    "tagLink": "https://api.zhihu.com/topics/20747921"
                }
            ], 
            "comments": [
                {
                    "userName": "学西瓜", 
                    "userLink": "https://www.zhihu.com/people/bb0bf03292da8daa6c627c4aa5392668", 
                    "content": "最后similarity vector取四维应该是聚类所用的4个特征，从论文4.5中可以看出这四维的特征谱可以做pca。在速度上PSE是最后6个kernel做BFS，时间复杂度确实是比PAN要大的。后处理上也是计算对应像素点的similarity vector到聚类中心的距离，文中没有给出具体的阈值（d）。预测的特征谱kernel用作计算聚类中心，预测的text用来取确定有效的similarity vector，再用similarity vector去确定最终的text instance。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "学西瓜", 
                            "userLink": "https://www.zhihu.com/people/bb0bf03292da8daa6c627c4aa5392668", 
                            "content": "以上是我自己的理解，PAN在速度上的提升确实惊到我了。", 
                            "likes": 0, 
                            "replyToAuthor": "学西瓜"
                        }, 
                        {
                            "userName": "周军", 
                            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
                            "content": "有道理", 
                            "likes": 0, 
                            "replyToAuthor": "学西瓜"
                        }
                    ]
                }, 
                {
                    "userName": "学西瓜", 
                    "userLink": "https://www.zhihu.com/people/bb0bf03292da8daa6c627c4aa5392668", 
                    "content": "嗯，但是kernel会比原来大一些，遍历的像素会少一些，另外速度体现在网络的前传上吧。", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "陈琳丹", 
                    "userLink": "https://www.zhihu.com/people/297d9e2f06a40832401b7a26f60aad4c", 
                    "content": "可以可以，文暮哥还是很厉害的", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "周军", 
                            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
                            "content": "是哪位群友", 
                            "likes": 0, 
                            "replyToAuthor": "陈琳丹"
                        }
                    ]
                }, 
                {
                    "userName": "MeMeMe", 
                    "userLink": "https://www.zhihu.com/people/b7c0f5b2160eab365c63349c836f88df", 
                    "content": "<p>请问您那边说速度很快，我看论文也是提升很大，但是我自己跑在cpu上提升并不明显，您那边说的是GPU还是CPU啊？</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68855938", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 5, 
            "title": "Character Region Awareness for Text Detection阅读笔记", 
            "content": "<h2>动机</h2><p>之前基于bounding box的检测方法在检测弯曲文本上效果不行</p><h2>贡献</h2><ol><li>提出了一种新的用于检测弯曲文字的方法</li><li>所提出的方法可以做到字符级检测</li></ol><h2>网络结构</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7f67feb50a4f2571b8e1c772127f7433_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb\" width=\"539\" data-original=\"https://pic4.zhimg.com/v2-7f67feb50a4f2571b8e1c772127f7433_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;539&#39; height=&#39;568&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"539\" data-original=\"https://pic4.zhimg.com/v2-7f67feb50a4f2571b8e1c772127f7433_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7f67feb50a4f2571b8e1c772127f7433_b.jpg\"/></figure><p>网络是一个基于vgg16的类似unet的分割网络。网络最终输出有两个</p><ol><li>region score: 一个高斯heatmap，代表该像素是字符中心点的概率</li><li>affinity score: 一个高斯heatmap，代表该像素是相连字符之间空间的中心点的概率</li></ol><h2>训练数据的标签生成</h2><ol><li><b>生成图像</b></li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5b3934910f60ed55e26748a42ecd7985_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"1063\" data-original=\"https://pic2.zhimg.com/v2-5b3934910f60ed55e26748a42ecd7985_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1063&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1063\" data-original=\"https://pic2.zhimg.com/v2-5b3934910f60ed55e26748a42ecd7985_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5b3934910f60ed55e26748a42ecd7985_b.jpg\"/></figure><p>在生成图像中，每个字符的box角点是已知的。</p><p>对于affinity score的box，通过下面的步骤进行计算</p><p>对于两个相连的字符，分布进行如下操作</p><ol><li>连接字符box的两对对焦点能够得到上三角形和下三角形</li><li>计算得到两个三角形的中心点</li></ol><p>计算得到的四个中心点就是affinity score box的四个角点坐标。</p><p>拿到affinity socre的box之后，region score和affinity score的label制作过程的一样的。</p><ol><li>准备好一个2d高斯map和一个原图大小的全 0 label图</li><li>根据高斯map和字符box计算出一个透视矩阵</li><li>使用透视变换将高斯map变成字符box的形状</li><li>将透视之后的高斯map根据字符box在原图的坐标贴到label图里</li></ol><h2>训练过程</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b69bd42b3d5a552c00cba6347ae315b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1140\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"1140\" data-original=\"https://pic4.zhimg.com/v2-b69bd42b3d5a552c00cba6347ae315b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1140&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1140\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1140\" data-original=\"https://pic4.zhimg.com/v2-b69bd42b3d5a552c00cba6347ae315b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b69bd42b3d5a552c00cba6347ae315b3_b.jpg\"/></figure><p>对于icdar 15 这类只提供了单词级box和word的数据集来说，训练过程如下：</p><ol><li>文字区域的crop图片进入网络，先得到region score和affinity score的heatmap</li><li>heatmap经过<b>切分</b>得到boxes，然后使用boxes制作伪label，并且通过后处理得到的字符数量和实际的文本内容计算一个分数 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bconf%7D%28w%29\" alt=\"S_{conf}(w)\" eeimg=\"1\"/> </li><li>如果 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bconf%7D%28w%29\" alt=\"S_{conf}(w)\" eeimg=\"1\"/> &lt;0.5, 就讲文字区域进行等宽划分，并且将 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bconf%7D%28w%29\" alt=\"S_{conf}(w)\" eeimg=\"1\"/> 置为0.5</li></ol><p>下面的训练过程就和生成数据一致了。</p><p><b>切分步骤</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9cb0073d8acd7f0b0177c9229a9a0398_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1157\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"1157\" data-original=\"https://pic1.zhimg.com/v2-9cb0073d8acd7f0b0177c9229a9a0398_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1157&#39; height=&#39;490&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1157\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1157\" data-original=\"https://pic1.zhimg.com/v2-9cb0073d8acd7f0b0177c9229a9a0398_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9cb0073d8acd7f0b0177c9229a9a0398_b.jpg\"/></figure><ol><li>从word-level 标注中crop出文本图像</li><li>文本图像走一遍网络，拿到region score 和 affinity score</li><li>使用分水岭算法分割字符</li><li>将字符框的坐标转换回原始图像坐标</li></ol><h2>训练策略</h2><p>在SynthText数据集上迭代50k次后，在其他数据集上fine-tuning。fine-tuning期间，训练数据集和SynthText数据集按照1:5的比例进行训练以保证字符能够被很好的分开。按照1:3使用OHEM。</p><h2>Loss函数</h2><p>loss函数如下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d407785f34b3e2637c11bd319d1a7367_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic4.zhimg.com/v2-d407785f34b3e2637c11bd319d1a7367_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;76&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic4.zhimg.com/v2-d407785f34b3e2637c11bd319d1a7367_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d407785f34b3e2637c11bd319d1a7367_b.png\"/></figure><p>其中， <img src=\"https://www.zhihu.com/equation?tex=S_%7Br%7D%5E%7B%2A%7D%28p%29\" alt=\"S_{r}^{*}(p)\" eeimg=\"1\"/> ,<img src=\"https://www.zhihu.com/equation?tex=S_%7Ba%7D%5E%7B%2A%7D%28p%29\" alt=\"S_{a}^{*}(p)\" eeimg=\"1\"/> 分别表示region score 和affinity score 的label map，<img src=\"https://www.zhihu.com/equation?tex=S_%7Br%7D%28p%29\" alt=\"S_{r}(p)\" eeimg=\"1\"/> ,<img src=\"https://www.zhihu.com/equation?tex=S_%7Ba%7D%28p%29\" alt=\"S_{a}(p)\" eeimg=\"1\"/> 分别表示网络输出的region score map 和affinity score map。 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bc%7D%28p%29\" alt=\"S_{c}(p)\" eeimg=\"1\"/> 是一个由 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bconf%7D%28w%29\" alt=\"S_{conf}(w)\" eeimg=\"1\"/> 计算出来的mask矩阵。</p><p><img src=\"https://www.zhihu.com/equation?tex=S_%7Bc%7D%28p%29%3D%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%7Bs_%7Bc+o+n+f%7D%28w%29%7D+%26+%7Bp+%E5%9C%A8%E6%96%87%E6%9C%AC%E6%A1%86%E5%86%85%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%98%AF%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%7D+%5C%5C+%7B1%7D+%26+%7B%5Ctext+%7B+otherwise+%7D%7D%5Cend%7Barray%7D%5Cright.\" alt=\"S_{c}(p)=\\left\\{\\begin{array}{ll}{s_{c o n f}(w)} &amp; {p 在文本框内并且不是生成数据} \\\\ {1} &amp; {\\text { otherwise }}\\end{array}\\right.\" eeimg=\"1\"/> </p><p>其中 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bconf%7D%28w%29\" alt=\"S_{conf}(w)\" eeimg=\"1\"/> 表示一个文本框本分成多个字符框的置信度。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bb23ba667aacfacbbf87cd5ef769beb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"88\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-bb23ba667aacfacbbf87cd5ef769beb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;485&#39; height=&#39;88&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"485\" data-rawheight=\"88\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"485\" data-original=\"https://pic3.zhimg.com/v2-bb23ba667aacfacbbf87cd5ef769beb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bb23ba667aacfacbbf87cd5ef769beb2_b.jpg\"/></figure><p>其中， <img src=\"https://www.zhihu.com/equation?tex=l%28w%29%3Dlen%28word%29\" alt=\"l(w)=len(word)\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=l%5E%7Bc%7D%28w%29\" alt=\"l^{c}(w)\" eeimg=\"1\"/> 表示heatmap经过后处理得到的boxes的数量。</p><h2>推理</h2><p>根据需要可以得到下面的几种框。</p><ul><li>字符级框</li></ul><p>字符级的框可以直接根据region socre map使用分水岭算法得到</p><ul><li>四角点box</li></ul><ol><li>初始化一个和输入图像一样大的全0矩阵, <img src=\"https://www.zhihu.com/equation?tex=M%28p%29%3D%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%7B1%7D+%26+%7BS_%7Br%7D%28p%29%3Et_%7Br%7D+or+S_%7Ba%7D%28p%29%3Et_%7Ba%7D+%7D+%5C%5C+%7B0%7D+%26+%7B%5Ctext+%7B+otherwise+%7D%7D%5Cend%7Barray%7D%5Cright.\" alt=\"M(p)=\\left\\{\\begin{array}{ll}{1} &amp; {S_{r}(p)&gt;t_{r} or S_{a}(p)&gt;t_{a} } \\\\ {0} &amp; {\\text { otherwise }}\\end{array}\\right.\" eeimg=\"1\"/> </li><li>cv2.connectedComponents 标记连通域</li><li>cv2.minAreaRect 和 cv2.boxPoints 获取四角点坐标</li></ol><ul><li>曲形</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1d89000a8760aa43637efc8c7ed8b81e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"434\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic3.zhimg.com/v2-1d89000a8760aa43637efc8c7ed8b81e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;523&#39; height=&#39;434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"434\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"523\" data-original=\"https://pic3.zhimg.com/v2-1d89000a8760aa43637efc8c7ed8b81e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1d89000a8760aa43637efc8c7ed8b81e_b.jpg\"/></figure><ol><li>第一步是沿着扫描方向(x方向)找到字符区域的局部极大值线，在图中表示为在椭圆内部且垂直扫描方向的最长线。</li><li>连接局部极大值的所有中心点的线称为中心线，用黄色表示。</li><li>将局部极大值线旋转到垂直于中心线的位置，以反映字符的倾斜角，用红色箭头表示。局部极大值线的端点是文本多边形边缘控制点的候选点。</li><li>为了完全覆盖文本区域，将最倾斜的两条局部极大值线沿着局部极大值中心线向外移动，形成最终的控制点(绿色点)。移动的终止点为刚好左右椭圆相切的地方。</li></ol>", 
            "topic": [
                {
                    "tag": "OCR（光学字符识别）", 
                    "tagLink": "https://api.zhihu.com/topics/19574441"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "图像分割", 
                    "tagLink": "https://api.zhihu.com/topics/20137632"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/63289258", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 3, 
            "title": "使用rust加速python(cython和ctypes形式)", 
            "content": "<p>以编辑距离为例，记录下rust加速python的过程</p><p>先放完整代码地址</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//github.com/WenmuZhou/rust_python\" data-image=\"https://pic4.zhimg.com/v2-6fcfaf7b16d8341551a02339d401219b_ipico.jpg\" data-image-width=\"300\" data-image-height=\"300\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WenmuZhou/rust_python</a><h2>新建一个工程</h2><div class=\"highlight\"><pre><code class=\"language-bash\">cargo new rust_python\n<span class=\"nb\">cd</span> rust_python</code></pre></div><h2>编辑 Cargo.toml文件</h2><p>在文件中加上</p><div class=\"highlight\"><pre><code class=\"language-rust\"><span class=\"p\">[</span><span class=\"n\">lib</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&#34;edit_distence_rust&#34;</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">最终生存的</span><span class=\"n\">so文件命名为</span><span class=\"w\"> </span><span class=\"s\">&#34;lib{name}.so&#34;</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">crate</span><span class=\"o\">-</span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">&#34;dylib&#34;</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">.</span><span class=\"n\">cpython</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&#34;*&#34;</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">&#34;extension-module&#34;</span><span class=\"p\">]</span><span class=\"w\">\n</span></code></pre></div><h2>编辑src/lib.rs文件</h2><p>在lib.rs文件内写下如下内容</p><div class=\"highlight\"><pre><code class=\"language-rust\"><span class=\"cp\">#[macro_use]</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">cpython</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cpython</span>::<span class=\"p\">{</span><span class=\"n\">PyResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Python</span><span class=\"p\">};</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"c1\">// 生成可以直接在python中import的so\n</span><span class=\"c1\">// 此处的module_name 和 initmodule_name可以随意命名\n</span><span class=\"c1\">// PyInit_edit_distence_rust1 这里的edit_distence_rust1要和使用时的so的文件名一致\n</span><span class=\"c1\"></span><span class=\"n\">py_module_initializer</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">module_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">initmodule_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PyInit_edit_distence_rust</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">py</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">py</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&#34;__doc__&#34;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&#34;Module documentation string&#34;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">py</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&#34;edit_distance&#34;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">py_fn</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">py</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">edit_distance_py</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">});</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">fn</span> <span class=\"nf\">edit_distance_py</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">Python</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">PyResult</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">edit_distance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">edit_distance</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c1\">// handle special case of 0 length\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c1\">// initialize string b\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">..</span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c1\">// calculate edit distance\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">ca</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"c1\">// get first column for this row\n</span><span class=\"c1\"></span><span class=\"w\">        </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"c1\">// deletion\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"c1\">// insertion\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"c1\">// match or substitution\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">cb</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}));</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"c1\">// 生成单独的so文件，python中使用ctypes调用\n</span><span class=\"c1\"></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">raw</span>::<span class=\"n\">c_char</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">CStr</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"cp\">#[no_mangle]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&#34;C&#34;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">edit_distance_so</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_char</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_char</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">CStr</span>::<span class=\"n\">from_ptr</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">CStr</span>::<span class=\"n\">from_ptr</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//\n</span><span class=\"c1\"></span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c1\">// handle special case of 0 length\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">len_a</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">len_b</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c1\">// initialize string b\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">..</span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c1\">// calculate edit distance\n</span><span class=\"c1\"></span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">ca</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"c1\">// get first column for this row\n</span><span class=\"c1\"></span><span class=\"w\">        </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"c1\">// deletion\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"c1\">// insertion\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"c1\">// match or substitution\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">cb</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}));</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"n\">cur</span><span class=\"p\">[</span><span class=\"n\">len_b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div><h2>生成python包</h2><div class=\"highlight\"><pre><code class=\"language-bash\">cargo build --release</code></pre></div><p>会看到如下输出</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f2ddb0494efcd0ac39e5d81e512559ab_b.jpg\" data-rawwidth=\"521\" data-rawheight=\"245\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"521\" data-original=\"https://pic4.zhimg.com/v2-f2ddb0494efcd0ac39e5d81e512559ab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;521&#39; height=&#39;245&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"521\" data-rawheight=\"245\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"521\" data-original=\"https://pic4.zhimg.com/v2-f2ddb0494efcd0ac39e5d81e512559ab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f2ddb0494efcd0ac39e5d81e512559ab_b.jpg\"/></figure><p>拷贝生成的so文件到项目目录下</p><div class=\"highlight\"><pre><code class=\"language-bash\">cp target/release/libedit_distence_rust.so edit_distence_rust.so</code></pre></div><p><b>src/lib.rs </b>里的<b>PyInit_edit_distence_rust</b>中的<b>edit_distence_rust</b>要和这里cp的目标文件名一致，不然会报如下错误(手动将edit_distence_rust.so改为hello.so，然后在python里执行import hello)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6c0f8aad384ff7140f202238ea2c408e_b.png\" data-rawwidth=\"646\" data-rawheight=\"70\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"646\" data-original=\"https://pic3.zhimg.com/v2-6c0f8aad384ff7140f202238ea2c408e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;646&#39; height=&#39;70&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"646\" data-rawheight=\"70\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"646\" data-original=\"https://pic3.zhimg.com/v2-6c0f8aad384ff7140f202238ea2c408e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6c0f8aad384ff7140f202238ea2c408e_b.png\"/></figure><h2><b>编辑test</b>.py</h2><p>这里使用python的编辑距离包<b>Levenshtein</b>进行结果和速度的对比</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">Levenshtein</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">edit_distence_rust</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">edit_distence_rust</span><span class=\"p\">))</span>\n\n<span class=\"n\">tic</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">270000</span><span class=\"p\">):</span>\n    <span class=\"n\">dis</span> <span class=\"o\">=</span> <span class=\"n\">edit_distence_rust</span><span class=\"o\">.</span><span class=\"n\">edit_distance</span><span class=\"p\">(</span><span class=\"s1\">&#39;我的中国心1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;别人也是调用的底层C文件吧&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;我的 rust cython so:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"n\">tic</span><span class=\"p\">,</span> <span class=\"n\">dis</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n<span class=\"n\">so</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">CDLL</span><span class=\"p\">(</span><span class=\"s1\">&#39;edit_distence_rust.so&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">tic</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">270000</span><span class=\"p\">):</span>\n    <span class=\"n\">dis</span> <span class=\"o\">=</span> <span class=\"n\">so</span><span class=\"o\">.</span><span class=\"n\">edit_distance_so</span><span class=\"p\">(</span><span class=\"s1\">&#39;我的中国心&#39;</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;别人也是调用的底层C文件吧&#39;</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;我的 rust ctypes so:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"n\">tic</span><span class=\"p\">,</span> <span class=\"n\">dis</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">Levenshtein</span>\n<span class=\"n\">tic</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">270000</span><span class=\"p\">):</span>\n    <span class=\"n\">dis</span> <span class=\"o\">=</span> <span class=\"n\">Levenshtein</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">&#39;我的中国心1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;别人也是调用的底层C文件吧&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;别人的库&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"n\">tic</span><span class=\"p\">,</span> <span class=\"n\">dis</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">minDistance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n\n        <span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">word2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">l2</span> <span class=\"o\">&gt;</span> <span class=\"n\">l1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">minDistance</span><span class=\"p\">(</span><span class=\"n\">word2</span><span class=\"p\">,</span> <span class=\"n\">word1</span><span class=\"p\">)</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">l2</span>  <span class=\"c1\"># 遍历到底i行时m[i]表示s1[:i-1]替换为s2[:j-1]的编辑距离</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l2</span><span class=\"p\">):</span>\n            <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># 用于存储上一行左上角的值</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l1</span><span class=\"p\">):</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l2</span><span class=\"p\">):</span>\n                <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>  <span class=\"c1\"># 先将上一行i处的结果存起来</span>\n                <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span> <span class=\"k\">if</span> <span class=\"n\">word1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">word2</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span>\n                                                <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span>\n        <span class=\"k\">return</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">l2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Solution</span><span class=\"p\">()</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">tic</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">270000</span><span class=\"p\">):</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">minDistance</span><span class=\"p\">(</span><span class=\"s1\">&#39;我的中国心&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;别人也是调用的底层C文件吧&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;自己的py实现&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"n\">tic</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span></code></pre></div><p>结果如下</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-89d0516de792c54b4da8917ab80ae397_b.png\" data-rawwidth=\"756\" data-rawheight=\"103\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"756\" data-original=\"https://pic4.zhimg.com/v2-89d0516de792c54b4da8917ab80ae397_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;756&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"756\" data-rawheight=\"103\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"756\" data-original=\"https://pic4.zhimg.com/v2-89d0516de792c54b4da8917ab80ae397_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-89d0516de792c54b4da8917ab80ae397_b.png\"/></figure><p>相比纯python实现，可以取得43倍的加速，cython形式的so也比ctypes调用的快一些。</p><p>完结。</p>", 
            "topic": [
                {
                    "tag": "Rust 编程", 
                    "tagLink": "https://api.zhihu.com/topics/20052040"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52947051", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 2, 
            "title": "Seglink阅读笔记", 
            "content": "<h2><b>引言</b></h2><p>由于以下原因，通用的目标检测算法并不是很适合直接用在文本检测上：</p><ol><li>文本通常具有很大的长宽比，如没有空格的非拉丁文</li><li>文本通常具有明显的方向</li></ol><h2><b>贡献</b></h2><ol><li>将检测文本行的任务分解为检测segment和link的两个小任务</li><li>提出了一个端到端的可训练的文本检测网络</li></ol><h2><b>网络结构图</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d186481b3135cbca93fcf326c16fcc0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1051\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"1051\" data-original=\"https://pic4.zhimg.com/v2-d186481b3135cbca93fcf326c16fcc0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1051&#39; height=&#39;497&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1051\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1051\" data-original=\"https://pic4.zhimg.com/v2-d186481b3135cbca93fcf326c16fcc0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d186481b3135cbca93fcf326c16fcc0f_b.jpg\"/></figure><p>作者采用了ssd的结构，感觉网络结构没啥大的变化，重点是改变了网络的输出，即数据的表现形式。</p><h2><b>Segment and Links</b></h2><p><b>Segments</b>表示一个文本框里的一个部分，可以是一个文字也可以是多个文字。segment是一个五元组 <img src=\"https://www.zhihu.com/equation?tex=x%2Cy%2Cw%2Ch%2C%5Ctheta\" alt=\"x,y,w,h,\\theta\" eeimg=\"1\"/> ,分别表示：中心的坐标，矩形框的宽高，矩形框的角度。</p><p>在ssd中，每一个特征图的每一个像素会生成多个default box，但是在seglink中，只有一个宽高比为1的default box。</p><p><b>links</b>分为<b>Within-Layer Link</b>和<b>Cross-Layer Link</b>，分别表示特征图内和跨特征图的segment是否应该相连。</p><blockquote>每个link有两个分数，一个用是正分，一个是负分，正分用来表示二者是否属于同一个单词；负分表示二者是否属于不同单词，应该断开连接</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-44c7dcaa86350884aef2ca3d0c40c8af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb\" width=\"506\" data-original=\"https://pic4.zhimg.com/v2-44c7dcaa86350884aef2ca3d0c40c8af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;506&#39; height=&#39;498&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"506\" data-original=\"https://pic4.zhimg.com/v2-44c7dcaa86350884aef2ca3d0c40c8af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-44c7dcaa86350884aef2ca3d0c40c8af_b.jpg\"/></figure><p><b>Within-Layer Link：</b>衡量了每一个特征图内部的segment是否应该相连，对于当前的segment，会寻找其八邻域内的segment是否与其相连</p><p><br/><b>Cross-Layer Link：</b>衡量了当前特征图和其上一级特征图内部的segment是否应该相连，对于当前的segment，会寻找其四邻域内的segment是否与其相连。如 <img src=\"https://www.zhihu.com/equation?tex=l_6\" alt=\"l_6\" eeimg=\"1\"/> 层和 <img src=\"https://www.zhihu.com/equation?tex=l_5\" alt=\"l_5\" eeimg=\"1\"/> 层, 所以只需要对conv7, conv8_2, conv9_2, conv10_2, conv11进行cross-layer link检测。</p><blockquote>总结来说：<b>对于conv4_3层，其link输出的维度为2*8=16；对于conv7, conv8_2, conv9_2, conv10_2, conv11其输出的link维度为2*8+2*4=24</b></blockquote><h2><b>训练数据的标签生成</b></h2><p><b>Segment</b></p><p><b>default box和文本框匹配</b>分为以下两种情况</p><p>1. 当前图像只有一个文本框的情况</p><p>在这种情况下需要默认的default box满足以下两种情况即视为正样本</p><p>    a. default box的中心在当前文本行内</p><p>    b. default box的size <img src=\"https://www.zhihu.com/equation?tex=al\" alt=\"al\" eeimg=\"1\"/> 与文本行的高度 <img src=\"https://www.zhihu.com/equation?tex=h\" alt=\"h\" eeimg=\"1\"/> 必须满足： <img src=\"https://www.zhihu.com/equation?tex=max%28%5Cfrac%7Ba_l%7D%7Bh%7D%2C%5Cfrac%7Bh%7D%7Ba_l%7D%29%5Cleq1.5\" alt=\"max(\\frac{a_l}{h},\\frac{h}{a_l})\\leq1.5\" eeimg=\"1\"/> </p><p>2. 当前图像有多个文本框的情况</p><p>若不满足一个文本框情况下的两个条件，则default box为负样本，否则default box为正样本，并与 <img src=\"https://www.zhihu.com/equation?tex=+%5Cfrac%7Ba_l%7D%7Bh%7D\" alt=\" \\frac{a_l}{h}\" eeimg=\"1\"/> 最小（高度最接近）的文本行匹配。</p><p><b>offset</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-de59ad20d56a15c1a840c9f9c670dcdd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"549\" data-original=\"https://pic2.zhimg.com/v2-de59ad20d56a15c1a840c9f9c670dcdd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;549&#39; height=&#39;433&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"549\" data-original=\"https://pic2.zhimg.com/v2-de59ad20d56a15c1a840c9f9c670dcdd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-de59ad20d56a15c1a840c9f9c670dcdd_b.jpg\"/></figure><p>在标注数据中，文本框一般为一个大的框，因此要通过一定规则将其转换为segment，然后与default box计算偏移量，转换步骤如下：</p><p>    1. 将标注的文本框根据角度旋转至水平方向</p><p>    2. 然后对文本框进行裁剪，保留与default box相交的部分</p><p>    3. 绕default box的中心点进行顺时针旋转，即转回到原来的角度</p><p>    4. 得到一个裁剪后的带角度的bbox，它就是groundtruth segment</p><p>网络要学习的偏移实际上就是default box相对于裁剪后的groundtruth segment的偏移。偏移量的计算和ssd一致</p><p><b>Link</b></p><p>两种link的标记方式一致，满足以下两个条件的link被标记为positive：</p><p>1. 链接到这个link的两个default box都是正样本</p><p>2. 链接到这个link的两个default box都匹配同一个文本框</p><h2><b>参考资料</b></h2><a href=\"https://zhuanlan.zhihu.com/p/37781277\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-129653f23b86adb0172a42ccb9e2d49f_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"500\" class=\"internal\">燕小花：文本检测之SegLink</a><a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1703.06520.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">arxiv.org/pdf/1703.0652</span><span class=\"invisible\">0.pdf</span><span class=\"ellipsis\"></span></a><p></p>", 
            "topic": [
                {
                    "tag": "OCR（光学字符识别）", 
                    "tagLink": "https://api.zhihu.com/topics/19574441"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52397564", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 14, 
            "title": "SSD阅读笔记", 
            "content": "<h2><b>摘要</b></h2><p>我们提出了一种使用单个深度神经网络检测图像中的对象的方法。我们的方法名为SSD，<b>将边界框的输出空间离散化为一组默认框，分布在不同的宽高比和每个要素图位置的比例上</b>。<b>在预测时，网络为每个默认框中的每个对象类别的存在生成分数，并产生对框的调整以更好地匹配目标形状</b>。此外，<b>网络将来自具有不同分辨率的多个特征图的预测组合在一起，以自然地处理各种尺寸的目标</b>。 SSD相对于需要目标提议的方法而言是简单的，因为它完全消除了提议生成和后续像素或特征重采样阶段，并将所有计算封装在单个网络中。这使得SSD易于训练并且可以直接集成到需要检测组件的系统中。 PASCAL VOC，COCO和ILSVRC数据集的实验结果证实，SSD与使用额外目标建议步骤的方法相比具有竞争力，并且速度更快，同时为训练和推理提供了统一的框架。对于300x300输入，SSD在VOC2007测试中获得74.3％mAP，在Nvidia Titan X上为59 FPS，对于512x512输入，SSD达到76.9％mAP，优于同类最先进的Faster R-CNN模型。与其他单级方法相比，即使输入图像尺寸较小，SSD也具有更高的精度。</p><h2><b>模型</b></h2><p>SSD方法基于前向卷积网络生成一个固定大小的bboxes和对应目标类别的scores，然后紧跟着NMS步骤来生成最后的检测。early网络层基于高质量的图像分类网络标准架构，被称为base网络。</p><h2><b>多尺度特征图</b></h2><p>在base网络层最后增加卷积特征网络层。<b>这些网络层的尺寸逐渐减小（这里可以对应分类器的输入卷积结构）</b>，并允许在多个尺度上预测检测。卷积模型中用于预测检测结果的每个特征层是不同的。</p><h2><b>卷积预测器</b></h2><p>每个添加的特征网络层（<b>或可选地来自基础网络的现有特征网络层</b>）可以<b>使用一组卷积滤波器生成一组固定的检测预测（这里可以对应模型架构图中的分类器）</b>。对于具有$p$个通道的大小为 <img src=\"https://www.zhihu.com/equation?tex=m%5Ctimes+n\" alt=\"m\\times n\" eeimg=\"1\"/> 的特征层，用于预测潜在检测参数的基本元素是 <img src=\"https://www.zhihu.com/equation?tex=3%5Ctimes+3\" alt=\"3\\times 3\" eeimg=\"1\"/> 的小内核， 生成类别的分数，或相对于default box坐标的形状偏移。</p><h2><b>网络架构图</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-19d1a853abfb3b75acf74588f62aa5a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1313\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb\" width=\"1313\" data-original=\"https://pic4.zhimg.com/v2-19d1a853abfb3b75acf74588f62aa5a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1313&#39; height=&#39;373&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1313\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1313\" data-original=\"https://pic4.zhimg.com/v2-19d1a853abfb3b75acf74588f62aa5a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-19d1a853abfb3b75acf74588f62aa5a3_b.jpg\"/></figure><h2><b>default box和纵横比</b></h2><p>为了处理不同的目标尺度，一些方法建议以不同的尺寸处理图像并在之后组合结果。 但是，通过利用单个网络中几个不同层的特征图进行预测，可以模拟相同的效果，同时还可以<b>跨所有目标尺度共享参数</b>。在这些方法的推动下（FCN skip connections），我们使用lower和upper的特征图进行检测。在一个网络内来自于不同levels的特征图有不同大小的感受野。本文假设使用m个特征图进行预测，每一个特征图的default boxes尺度计算参考<b>default box和纵横比</b>章节。最后每一个特征图feature map位置上共有6个default boxes，包括纵横比（1，2，3，1/2，1/3），同时对于纵横比为1的情况下增加了一个新的尺度 <img src=\"https://www.zhihu.com/equation?tex=s_k%5E%7B%5Cprime%7D%3D%5Csqrt%7B%7Bs_k%7D%7Bs_%7Bk%2B1%7D%7D%7D\" alt=\"s_k^{\\prime}=\\sqrt{{s_k}{s_{k+1}}}\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>SSD将[&#39;conv4_3&#39;, &#39;conv7&#39;, &#39;conv8_2&#39;, &#39;conv9_2&#39;, &#39;conv10_2&#39;, &#39;conv11_2&#39;] 这6层的特征图分别拉出来进行边界框偏移量的预测和类别的分类。需要在这六个尺度上分别生成很多的default box。</p><ul><li>步骤1：以feature map上每个点的中点为中心（offset=0.5），生成一些同心的default box；</li><li>步骤2：default box最小边长为 <img src=\"https://www.zhihu.com/equation?tex=min+_+%7B-%7D+size\" alt=\"min _ {-} size\" eeimg=\"1\"/> ，最大边长为<img src=\"https://www.zhihu.com/equation?tex=%5Csqrt+%7B+min+_+%7B-%7D+size+%2A+max+_+%7B+-+%7D+size%7D\" alt=\"\\sqrt { min _ {-} size * max _ { - } size}\" eeimg=\"1\"/> ；</li><li>步骤3：增加纵横比为<img src=\"https://www.zhihu.com/equation?tex=aspect+_+%7B-%7Dratio\" alt=\"aspect _ {-}ratio\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=1%2Faspect_%7B-%7Dratio\" alt=\"1/aspect_{-}ratio\" eeimg=\"1\"/> 的default box，长宽分别为 <img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7B1%2Faspect_ratio%7D+%2A+min_size\" alt=\"\\sqrt{1/aspect_ratio} * min_size\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7Baspect_ratio%7D+%2A+min_size\" alt=\"\\sqrt{aspect_ratio} * min_size\" eeimg=\"1\"/> ；</li><li>步骤4：每一个feature map对应的default box的 <img src=\"https://www.zhihu.com/equation?tex=min+_+%7B-%7D+size\" alt=\"min _ {-} size\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=max+_+%7B-%7D+size\" alt=\"max _ {-} size\" eeimg=\"1\"/> 由公式 <img src=\"https://www.zhihu.com/equation?tex=s_k%3Ds_%7Bmin%7D%2B%5Cfrac%7Bs_%7Bmax%7D-s_%7Bmin%7D%7D%7Bm-1%7D%28k-1%29\" alt=\"s_k=s_{min}+\\frac{s_{max}-s_{min}}{m-1}(k-1)\" eeimg=\"1\"/> 计算，其中 <img src=\"https://www.zhihu.com/equation?tex=S_%7Bmin%7D%3D0.2%2CS_%7Bmax%7D%3D0.9\" alt=\"S_{min}=0.2,S_{max}=0.9\" eeimg=\"1\"/> ，也就是第一层feature map对应的 <img src=\"https://www.zhihu.com/equation?tex=min+_+%7B-%7D+size+%3D+s_1%2Cmax+_+%7B-%7D+size+%3D+s_2\" alt=\"min _ {-} size = s_1,max _ {-} size = s_2\" eeimg=\"1\"/> ，第二层feature map对应的 <img src=\"https://www.zhihu.com/equation?tex=min+_+%7B-%7D+size+%3D+s_2%2Cmax+_+%7B-%7D+size+%3D+s_3\" alt=\"min _ {-} size = s_2,max _ {-} size = s_3\" eeimg=\"1\"/> ，以此类推。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a36991dcd3f7b506aad0bdada35a311d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"776\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"776\" data-original=\"https://pic2.zhimg.com/v2-a36991dcd3f7b506aad0bdada35a311d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;776&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"776\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"776\" data-original=\"https://pic2.zhimg.com/v2-a36991dcd3f7b506aad0bdada35a311d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a36991dcd3f7b506aad0bdada35a311d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>一个生成default box的代码如下</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">class</span> <span class=\"nc\">PriorBox</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cfg</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PriorBox</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_size</span> <span class=\"o\">=</span> <span class=\"mi\">300</span> <span class=\"c1\"># 图片大小</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feature_maps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># 特征图的宽高</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"mi\">162</span><span class=\"p\">,</span> <span class=\"mi\">213</span><span class=\"p\">,</span> <span class=\"mi\">264</span><span class=\"p\">]</span> <span class=\"c1\"># 计算default box的min_size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"mi\">162</span><span class=\"p\">,</span> <span class=\"mi\">213</span><span class=\"p\">,</span> <span class=\"mi\">264</span><span class=\"p\">,</span> <span class=\"mi\">315</span><span class=\"p\">]</span> <span class=\"c1\"># 计算default box的max_size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">strides</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]</span> <span class=\"c1\"># 计算卷积层产生的prior_box距离原图的步长，先验框中心点的坐标会乘以step，相当于从feature map位置映射回原图位置，比如conv4_3输出特征图大小为38*38，而输入的图片为300*300，所以38*8约等于300，所以映射步长为8。这是针对300*300的训练图片。</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aspect_ratios</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"c1\"># 每一个特征图对应的default box比例，[2]表示两种框： h/w = 2 和 w/h = 2的框</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"p\">):</span>\n        <span class=\"s2\">&#34;&#34;&#34;Generate SSD Prior Boxes.\n</span><span class=\"s2\">            It returns the center, height and width of the priors. The values are relative to the image size\n</span><span class=\"s2\">            Returns:\n</span><span class=\"s2\">                priors (num_priors, 4): The prior boxes represented as [[center_x, center_y, w, h]]. All the values\n</span><span class=\"s2\">                    are relative to the image size.\n</span><span class=\"s2\">        &#34;&#34;&#34;</span>\n        <span class=\"n\">priors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feature_maps</span><span class=\"p\">):</span>\n            <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_size</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">strides</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n                <span class=\"c1\"># unit center x,y</span>\n                <span class=\"n\">cx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">scale</span>\n                <span class=\"n\">cy</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">scale</span>\n\n                <span class=\"c1\"># small sized square box 宽高比例为1的最小框</span>\n                <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_sizes</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_size</span>\n                <span class=\"n\">priors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">cx</span><span class=\"p\">,</span> <span class=\"n\">cy</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">])</span>\n\n                <span class=\"c1\"># big sized square box  宽高比例为1的最大框</span>\n                <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_sizes</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_sizes</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n                <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_size</span>\n                <span class=\"n\">priors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">cx</span><span class=\"p\">,</span> <span class=\"n\">cy</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">])</span>\n\n                <span class=\"c1\"># change h/w ratio of the small sized box</span>\n                <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_sizes</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_size</span>\n                <span class=\"k\">for</span> <span class=\"n\">ratio</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aspect_ratios</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]:</span>\n                    <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">ratio</span><span class=\"p\">)</span>\n                    <span class=\"n\">priors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">cx</span><span class=\"p\">,</span> <span class=\"n\">cy</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"n\">ratio</span><span class=\"p\">])</span>\n                    <span class=\"n\">priors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">cx</span><span class=\"p\">,</span> <span class=\"n\">cy</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">/</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"n\">ratio</span><span class=\"p\">])</span>\n\n        <span class=\"n\">priors</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">(</span><span class=\"n\">priors</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">priors</span></code></pre></div><p>default box的表现形式为<code>[x,y,w,h]</code>，下面分别介绍<code>x</code>,<code>y</code>,<code>w</code>,<code>h</code>是怎么来的</p><p><b>x,y</b>：每个default box的中心位置设置成 <img src=\"https://www.zhihu.com/equation?tex=%5Cleft%28+%5Cfrac+%7B+i+%2B+0.5+%7D+%7B+%5Cleft%7C+f+_+%7B+k+%7D+%5Cright%7C+%7D+%2C+%5Cfrac+%7B+j+%2B+0.5+%7D+%7B+%5Cleft%7C+f+_+%7B+k+%7D+%5Cright%7C+%7D+%5Cright%29\" alt=\"\\left( \\frac { i + 0.5 } { \\left| f _ { k } \\right| } , \\frac { j + 0.5 } { \\left| f _ { k } \\right| } \\right)\" eeimg=\"1\"/>  ，其中 <img src=\"https://www.zhihu.com/equation?tex=%5Cleft%7C+f+_+%7B+k+%7D+%5Cright%7C\" alt=\"\\left| f _ { k } \\right|\" eeimg=\"1\"/>  表示第k个特征图的大小 <img src=\"https://www.zhihu.com/equation?tex=i+%2C+j+%5Cin+%5Cleft%5B+0+%2C+%5Cleft%7C+f+_+%7B+k+%7D+%5Cright%7C+%5Cright%29\" alt=\"i , j \\in \\left[ 0 , \\left| f _ { k } \\right| \\right)\" eeimg=\"1\"/>  。</p><p><b>w,h</b>: 每个default box的宽高分别为： <img src=\"https://www.zhihu.com/equation?tex=w+_+%7B+k+%7D+%5E+%7B+a+%7D+%3D+s+_+%7B+k+%7D+%5Csqrt+%7B+a+_+%7B+r+%7D+%7D%2C+h+_+%7B+k+%7D+%5E+%7B+a+%7D+%3D+s+_+%7B+k+%7D+%2F+%5Csqrt+%7B+a+_+%7B+r+%7D+%7D\" alt=\"w _ { k } ^ { a } = s _ { k } \\sqrt { a _ { r } }, h _ { k } ^ { a } = s _ { k } / \\sqrt { a _ { r } }\" eeimg=\"1\"/>  ( <img src=\"https://www.zhihu.com/equation?tex=a_%7Br%7D\" alt=\"a_{r}\" eeimg=\"1\"/> 为default box的比例)。对于 <img src=\"https://www.zhihu.com/equation?tex=a_%7Br%7D%3D1\" alt=\"a_{r}=1\" eeimg=\"1\"/> 的情况还会多生成一个尺寸为 <img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k+%7D+%5E+%7B+%5Cprime+%7D+%3D+%5Csqrt+%7B+s+_+%7B+k+%7D+s+_+%7B+k+%2B+1+%7D+%7D\" alt=\"s _ { k } ^ { \\prime } = \\sqrt { s _ { k } s _ { k + 1 } }\" eeimg=\"1\"/> 的default box</p><p>对于 <img src=\"https://www.zhihu.com/equation?tex=s_k\" alt=\"s_k\" eeimg=\"1\"/> 的计算分为两种情况，一种是论文中的描述，另一种的代码中的计算，我们先看论文的描述。</p><h2><b>论文中的描述</b></h2><p>每一层特征图上default box的尺寸由下面的公式计算：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k+%7D+%3D+s+_+%7B+%5Cmin+%7D+%2B+%5Cfrac+%7B+s+_+%7B+%5Cmax+%7D+-+s+_+%7B+%5Cmin+%7D+%7D+%7B+m+-+1+%7D+%28+k+-+1+%29+%2C+%5Cquad+k+%5Cin+%5B+1+%2C+m+%5D\" alt=\"s _ { k } = s _ { \\min } + \\frac { s _ { \\max } - s _ { \\min } } { m - 1 } ( k - 1 ) , \\quad k \\in [ 1 , m ]\" eeimg=\"1\"/> </p><p>其中，<img src=\"https://www.zhihu.com/equation?tex=s_%7B%5Cmin%7D%3D0.2%2Cs_%7B%5Cmax%7D%3D0.9\" alt=\"s_{\\min}=0.2,s_{\\max}=0.9\" eeimg=\"1\"/> ，<img src=\"https://www.zhihu.com/equation?tex=m\" alt=\"m\" eeimg=\"1\"/> 为特征图的数量， <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/> 为当前的特征图index 计算举例如下</p><blockquote>第一层特征图：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k1+%7D+%3D+0.2+%2B+%5Cfrac+%7B+0.9+-+0.2+%7D+%7B+6+-+1+%7D+%28+1+-+1+%29+%3D+0.2\" alt=\"s _ { k1 } = 0.2 + \\frac { 0.9 - 0.2 } { 6 - 1 } ( 1 - 1 ) = 0.2\" eeimg=\"1\"/> <br/>第二层特征图：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k2+%7D+%3D+0.2+%2B+%5Cfrac+%7B+0.9+-+0.2+%7D+%7B+6+-+1+%7D+%28+2+-+1+%29+%3D+0.34\" alt=\"s _ { k2 } = 0.2 + \\frac { 0.9 - 0.2 } { 6 - 1 } ( 2 - 1 ) = 0.34\" eeimg=\"1\"/> <br/>第三层特征图：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k3+%7D+%3D+0.2+%2B+%5Cfrac+%7B+0.9+-+0.2+%7D+%7B+6+-+1+%7D+%28+3+-+1+%29+%3D+0.48\" alt=\"s _ { k3 } = 0.2 + \\frac { 0.9 - 0.2 } { 6 - 1 } ( 3 - 1 ) = 0.48\" eeimg=\"1\"/> <br/>第四层特征图：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k4+%7D+%3D+0.2+%2B+%5Cfrac+%7B+0.9+-+0.2+%7D+%7B+6+-+1+%7D+%28+4+-+1+%29+%3D+0.62\" alt=\"s _ { k4 } = 0.2 + \\frac { 0.9 - 0.2 } { 6 - 1 } ( 4 - 1 ) = 0.62\" eeimg=\"1\"/> <br/>第五层特征图：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k5+%7D+%3D+0.2+%2B+%5Cfrac+%7B+0.9+-+0.2+%7D+%7B+6+-+1+%7D+%28+5+-+1+%29+%3D+0.76\" alt=\"s _ { k5 } = 0.2 + \\frac { 0.9 - 0.2 } { 6 - 1 } ( 5 - 1 ) = 0.76\" eeimg=\"1\"/> <br/>第六层特征图：<img src=\"https://www.zhihu.com/equation?tex=s+_+%7B+k6+%7D+%3D+0.2+%2B+%5Cfrac+%7B+0.9+-+0.2+%7D+%7B+6+-+1+%7D+%28+6+-+1+%29+%3D+0.9\" alt=\"s _ { k6 } = 0.2 + \\frac { 0.9 - 0.2 } { 6 - 1 } ( 6 - 1 ) = 0.9\" eeimg=\"1\"/><br/> </blockquote><p>按照这样的计算思路，<img src=\"https://www.zhihu.com/equation?tex=s_k\" alt=\"s_k\" eeimg=\"1\"/> 应该是这样的</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"mi\">102</span><span class=\"p\">,</span><span class=\"mi\">144</span><span class=\"p\">,</span><span class=\"mi\">186</span><span class=\"p\">,</span><span class=\"mi\">228</span><span class=\"p\">,</span><span class=\"mi\">270</span><span class=\"p\">]</span>\n<span class=\"n\">min_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"mi\">102</span><span class=\"p\">,</span><span class=\"mi\">144</span><span class=\"p\">,</span><span class=\"mi\">186</span><span class=\"p\">,</span><span class=\"mi\">228</span><span class=\"p\">,</span><span class=\"mi\">270</span><span class=\"p\">]</span>\n<span class=\"n\">max_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">102</span><span class=\"p\">,</span><span class=\"mi\">144</span><span class=\"p\">,</span><span class=\"mi\">186</span><span class=\"p\">,</span><span class=\"mi\">228</span><span class=\"p\">,</span><span class=\"mi\">270</span><span class=\"p\">,</span><span class=\"mi\">312</span><span class=\"p\">]</span></code></pre></div><p>但是在代码中并不是这样的。</p><h2><b>代码中的计算</b></h2><p>先看一下源码</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/weiliu89/caffe/blob/ssd/examples/ssd/ssd_pascal_orig.py%23L304-L324\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">caffe源码</a><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">min_dim</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>   <span class=\"c1\"># 维度</span>\n<span class=\"c1\"># conv4_3 ==&gt; 38 x 38</span>\n<span class=\"c1\"># fc7 ==&gt; 19 x 19</span>\n<span class=\"c1\"># conv6_2 ==&gt; 10 x 10</span>\n<span class=\"c1\"># conv7_2 ==&gt; 5 x 5</span>\n<span class=\"c1\"># conv8_2 ==&gt; 3 x 3</span>\n<span class=\"c1\"># conv9_2 ==&gt; 1 x 1</span>\n<span class=\"n\">mbox_source_layers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;conv4_3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fc7&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;conv6_2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;conv7_2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;conv8_2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;conv9_2&#39;</span><span class=\"p\">]</span> <span class=\"c1\"># prior_box来源层，可以更改。很多改进都是基于此处的调整。</span>\n<span class=\"c1\"># in percent %</span>\n<span class=\"n\">min_ratio</span> <span class=\"o\">=</span> <span class=\"mi\">20</span> <span class=\"c1\"># 这里即是论文中所说的Smin=0.2，Smax=0.9的初始值，经过下面的运算即可得到min_sizes，max_sizes。</span>\n<span class=\"n\">max_ratio</span> <span class=\"o\">=</span> <span class=\"mi\">90</span>\n<span class=\"c1\"># math.floor()函数表示：求一个最接近它的整数，它的值小于或等于这个浮点数。</span>\n<span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">((</span><span class=\"n\">max_ratio</span> <span class=\"o\">-</span> <span class=\"n\">min_ratio</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mbox_source_layers</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)))</span><span class=\"c1\"># 取一个间距步长，即在下面for循环给ratio取值时起一个间距作用。可以用一个具体的数值代替，这里等于17。</span>\n<span class=\"n\">min_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># 经过以下运算得到min_sizes和max_sizes。</span>\n<span class=\"n\">max_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">ratio</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">min_ratio</span><span class=\"p\">,</span> <span class=\"n\">max_ratio</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">):</span>  <span class=\"c1\"># 从min_ratio至max_ratio+1每隔step=17取一个值赋值给ratio。注意xrange函数的作用。</span>\n<span class=\"c1\">## min_sizes.append（）函数即把括号内部每次得到的值依次给了min_sizes。</span>\n  <span class=\"n\">min_sizes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">min_dim</span> <span class=\"o\">*</span> <span class=\"n\">ratio</span> <span class=\"o\">/</span> <span class=\"mf\">100.</span><span class=\"p\">)</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_sizes</span><span class=\"p\">)</span>\n  <span class=\"n\">max_sizes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">min_dim</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">ratio</span> <span class=\"o\">+</span> <span class=\"n\">step</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">100.</span><span class=\"p\">)</span>\n<span class=\"n\">min_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">min_dim</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">/</span> <span class=\"mf\">100.</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">min_sizes</span>\n<span class=\"n\">max_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">min_dim</span> <span class=\"o\">*</span> <span class=\"mi\">20</span> <span class=\"o\">/</span> <span class=\"mf\">100.</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">max_sizes</span>\n<span class=\"n\">steps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]</span></code></pre></div><p>可以看到代码中<code>step</code>的公式里除掉的是 <img src=\"https://www.zhihu.com/equation?tex=m-2\" alt=\"m-2\" eeimg=\"1\"/> ，但是在论文中是 <img src=\"https://www.zhihu.com/equation?tex=m-1\" alt=\"m-1\" eeimg=\"1\"/> ，这个地方就导致了论文中和代码里的不同。</p><h2><b>训练</b></h2><p>训练SSD和一个典型的使用区域建议的检测器的关键区别在于gt真实值信息需要被赋值到检测器输出的具体输出中。训练过程不仅包括选择default boxes和scales集合，也包括negative mining和数据扩充策略。</p><h2><b>匹配策略(摘自gluonbook)</b></h2><blockquote> 在训练集中，我们将每个default box视为一个训练样本。为了训练目标检测模型，我们需要为每个default box标注两类标签：一是default box所含目标的类别，简称类别；二是真实边界框相对default box的偏移量，简称偏移量（offset）。在目标检测时，我们首先生成多个default box，然后为每个default box预测类别以及偏移量，接着根据预测的偏移量调整default box位置从而得到预测边界框，最后筛选需要输出的预测边界框。<br/><br/> 我们知道，在目标检测的训练集中，每个图像已标注了真实边界框的位置以及所含目标的类别。在生成default box之后，我们主要依据与default box相似的真实边界框的位置和类别信息为default box标注。那么，该如何为default box分配与其相似的真实边界框呢？<br/><br/> 假设图像中default box分别为 <img src=\"https://www.zhihu.com/equation?tex=A_1%2C+A_2%2C+%5Cldots%2C+A_%7Bn_a%7D\" alt=\"A_1, A_2, \\ldots, A_{n_a}\" eeimg=\"1\"/> ，真实边界框分别为 <img src=\"https://www.zhihu.com/equation?tex=B_1%2C+B_2%2C+%5Cldots%2C+B_%7Bn_b%7D\" alt=\"B_1, B_2, \\ldots, B_{n_b}\" eeimg=\"1\"/> ，且 <img src=\"https://www.zhihu.com/equation?tex=n_a+%5Cgeq+n_b\" alt=\"n_a \\geq n_b\" eeimg=\"1\"/> 。定义矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D+%5Cin+%5Cmathbb%7BR%7D%5E%7Bn_a+%5Ctimes+n_b%7D\" alt=\"\\boldsymbol{X} \\in \\mathbb{R}^{n_a \\times n_b}\" eeimg=\"1\"/> ，其中第 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> 行第 <img src=\"https://www.zhihu.com/equation?tex=j\" alt=\"j\" eeimg=\"1\"/> 列的元素 <img src=\"https://www.zhihu.com/equation?tex=x_%7Bij%7D\" alt=\"x_{ij}\" eeimg=\"1\"/> 为default box <img src=\"https://www.zhihu.com/equation?tex=A_i\" alt=\"A_i\" eeimg=\"1\"/> 与真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_j\" alt=\"B_j\" eeimg=\"1\"/> 的交并比。<br/><br/> 首先，我们找出矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中最大元素，并将该元素的行索引与列索引分别记为 <img src=\"https://www.zhihu.com/equation?tex=i_1%2Cj_1\" alt=\"i_1,j_1\" eeimg=\"1\"/> 。我们为default box <img src=\"https://www.zhihu.com/equation?tex=A_%7Bi_1%7D\" alt=\"A_{i_1}\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_%7Bj_1%7D\" alt=\"B_{j_1}\" eeimg=\"1\"/> 。显然，default box <img src=\"https://www.zhihu.com/equation?tex=A_%7Bi_1%7D\" alt=\"A_{i_1}\" eeimg=\"1\"/> 和真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_%7Bj_1%7D\" alt=\"B_{j_1}\" eeimg=\"1\"/> 在所有的“default box—真实边界框”的配对中相似度最高。接下来，将矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中第 <img src=\"https://www.zhihu.com/equation?tex=i_1\" alt=\"i_1\" eeimg=\"1\"/> 行和第 <img src=\"https://www.zhihu.com/equation?tex=j_1\" alt=\"j_1\" eeimg=\"1\"/> 列上的所有元素丢弃。找出矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中剩余的最大元素，并将该元素的行索引与列索引分别记为 <img src=\"https://www.zhihu.com/equation?tex=i_2%2Cj_2\" alt=\"i_2,j_2\" eeimg=\"1\"/> 。我们为default box <img src=\"https://www.zhihu.com/equation?tex=A_%7Bi_2%7D\" alt=\"A_{i_2}\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_%7Bj_2%7D\" alt=\"B_{j_2}\" eeimg=\"1\"/> ，再将矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中第 <img src=\"https://www.zhihu.com/equation?tex=i_2\" alt=\"i_2\" eeimg=\"1\"/> 行和第 <img src=\"https://www.zhihu.com/equation?tex=j_2\" alt=\"j_2\" eeimg=\"1\"/> 列上的所有元素丢弃。此时矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中已有两行两列的元素被丢弃。依此类推，直到矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中所有 <img src=\"https://www.zhihu.com/equation?tex=n_b\" alt=\"n_b\" eeimg=\"1\"/> 列元素全部被丢弃。这个时候，我们已为 <img src=\"https://www.zhihu.com/equation?tex=n_b\" alt=\"n_b\" eeimg=\"1\"/> 个default box各分配了一个真实边界框。</blockquote><p>这时候如果直接去训练，正负样本的数量是极度不均衡的，因此，就需要下面的步骤：</p><blockquote> 接下来，我们只遍历剩余的 <img src=\"https://www.zhihu.com/equation?tex=n_a+-+n_b\" alt=\"n_a - n_b\" eeimg=\"1\"/> 个default box：给定其中的default box <img src=\"https://www.zhihu.com/equation?tex=A_i\" alt=\"A_i\" eeimg=\"1\"/> ，根据矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 的第 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> 行找到与 <img src=\"https://www.zhihu.com/equation?tex=A_i\" alt=\"A_i\" eeimg=\"1\"/> 交并比最大的真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_j\" alt=\"B_j\" eeimg=\"1\"/> ，只有当该交并比大于预先设定的阈值时，才为default box <img src=\"https://www.zhihu.com/equation?tex=A_i\" alt=\"A_i\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_j\" alt=\"B_j\" eeimg=\"1\"/> 。<br/> 如图下图（左）所示，假设矩阵 <img src=\"https://www.zhihu.com/equation?tex=%5Cboldsymbol%7BX%7D\" alt=\"\\boldsymbol{X}\" eeimg=\"1\"/> 中最大值为 <img src=\"https://www.zhihu.com/equation?tex=x_%7B23%7D\" alt=\"x_{23}\" eeimg=\"1\"/> ，我们将为default box <img src=\"https://www.zhihu.com/equation?tex=A_2\" alt=\"A_2\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_3\" alt=\"B_3\" eeimg=\"1\"/> 。然后，丢弃矩阵中所有第2行第3列的元素，找出剩余阴影部分的最大元素 <img src=\"https://www.zhihu.com/equation?tex=x_%7B71%7D\" alt=\"x_{71}\" eeimg=\"1\"/> ，为default box <img src=\"https://www.zhihu.com/equation?tex=A_7\" alt=\"A_7\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_1\" alt=\"B_1\" eeimg=\"1\"/> 。接着如图下图（中）所示，丢弃矩阵中所有第7行第1列的元素，找出剩余阴影部分的最大元素 <img src=\"https://www.zhihu.com/equation?tex=x_%7B54%7D\" alt=\"x_{54}\" eeimg=\"1\"/> ，为default box <img src=\"https://www.zhihu.com/equation?tex=A_5\" alt=\"A_5\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_4\" alt=\"B_4\" eeimg=\"1\"/> 。最后如图下图（右）所示，丢弃矩阵中所有第5行第4列的元素，找出剩余阴影部分的最大元素 <img src=\"https://www.zhihu.com/equation?tex=x_%7B92%7D\" alt=\"x_{92}\" eeimg=\"1\"/> ，为default box <img src=\"https://www.zhihu.com/equation?tex=A_9\" alt=\"A_9\" eeimg=\"1\"/> 分配真实边界框 <img src=\"https://www.zhihu.com/equation?tex=B_2\" alt=\"B_2\" eeimg=\"1\"/> 。之后，我们只需遍历除去 <img src=\"https://www.zhihu.com/equation?tex=A_2%2C+A_5%2C+A_7%2C+A_9\" alt=\"A_2, A_5, A_7, A_9\" eeimg=\"1\"/> 的剩余default box，并根据阈值判断是否为剩余default box分配真实边界框。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3f6023aa408efed1e1d8f6cc5aa6a68f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-3f6023aa408efed1e1d8f6cc5aa6a68f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic4.zhimg.com/v2-3f6023aa408efed1e1d8f6cc5aa6a68f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3f6023aa408efed1e1d8f6cc5aa6a68f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>标签处理(摘自gluonbook)</b></h2><blockquote>在标注数据中，文本框的表现形式一般是<code>[x1,y1,x2,y2,alpha]</code>，其中<code>alpha</code>代表文本检测任务中框的倾斜角度。SSD算法通过<code>匹配策略</code>完成default bbox和gt bbox和匹配。但是在计算loss时，由于数据集中各个框的位置和大小各异，这些相对位置和相对大小通常需要一些特殊变换，才能使偏移量的分布更均匀从而更容易拟合。设default box AA 及其被分配的真实边界框 BB 的中心坐标分别为 ( <img src=\"https://www.zhihu.com/equation?tex=x+_+%7B+a+%7D%2Cy+_+%7B+a+%7D\" alt=\"x _ { a },y _ { a }\" eeimg=\"1\"/> ),( <img src=\"https://www.zhihu.com/equation?tex=x+_+%7B+b+%7D%2Cy+_+%7B+b+%7D\" alt=\"x _ { b },y _ { b }\" eeimg=\"1\"/> )，AA 和 BB 的宽分别为 <img src=\"https://www.zhihu.com/equation?tex=w+_+%7B+a+%7D\" alt=\"w _ { a }\" eeimg=\"1\"/> ,  <img src=\"https://www.zhihu.com/equation?tex=w+_+%7B+b+%7D\" alt=\"w _ { b }\" eeimg=\"1\"/> ,高分别为  <img src=\"https://www.zhihu.com/equation?tex=h+_+%7B+a+%7D\" alt=\"h _ { a }\" eeimg=\"1\"/> , <img src=\"https://www.zhihu.com/equation?tex=h+_+%7B+b+%7D\" alt=\"h _ { b }\" eeimg=\"1\"/> ，一个常用的技巧是将 AA 的偏移量标注为：<img src=\"https://www.zhihu.com/equation?tex=%5Cleft%28+%5Cfrac+%7B+%5Cfrac+%7B+x++_+%7B+b+%7D+-+x+_+%7B+a+%7D+%7D+%7B+w+_+%7B+a+%7D+%7D+-+%5Cmu+_+%7B+x+%7D+%7D+%7B+%5Csigma+_+%7B+x+%7D+%7D+%2C+%5Cfrac+%7B+%5Cfrac+%7B+y+_+%7B+b+%7D+-+y+_+%7B+a+%7D+%7D+%7B+h+_+%7B+a+%7D+%7D+-+%5Cmu+_+%7B+y+%7D+%7D+%7B+%5Csigma+_+%7B+y+%7D+%7D+%2C+%5Cfrac+%7B+%5Clog+%5Cfrac+%7B+w+_+%7B+b+%7D+%7D+%7B+w+_+%7B+a+%7D+%7D+-+%5Cmu+_+%7B+w+%7D+%7D+%7B+%5Csigma+_+%7B+w+%7D+%7D+%2C+%5Cfrac+%7B+%5Clog+%5Cfrac+%7B+h+_+%7B+b+%7D+%7D+%7B+h+_+%7B+a+%7D+%7D+-+%5Cmu+_+%7B+h+%7D+%7D+%7B+%5Csigma+_+%7B+h+%7D+%7D+%5Cright%29+\" alt=\"\\left( \\frac { \\frac { x  _ { b } - x _ { a } } { w _ { a } } - \\mu _ { x } } { \\sigma _ { x } } , \\frac { \\frac { y _ { b } - y _ { a } } { h _ { a } } - \\mu _ { y } } { \\sigma _ { y } } , \\frac { \\log \\frac { w _ { b } } { w _ { a } } - \\mu _ { w } } { \\sigma _ { w } } , \\frac { \\log \\frac { h _ { b } } { h _ { a } } - \\mu _ { h } } { \\sigma _ { h } } \\right) \" eeimg=\"1\"/> <br/>其中常数的默认值为  <img src=\"https://www.zhihu.com/equation?tex=%CE%BC+_+%7B+x+%7D+%3D+%CE%BC+_+%7B+y+%7D%3D+%CE%BC+_+%7B+w+%7D+%3D+%CE%BC+_+%7B+h+%7D+%3D+0+%2C+%7B+%5Csigma+_+%7B+x+%7D+%7D+%3D++%7B+%5Csigma+_+%7B+y+%7D+%7D+%3D+0.1%2C+%7B+%5Csigma+_+%7B+w+%7D+%7D+%3D++%7B+%5Csigma+_+%7B+h+%7D+%7D+%3D+0.2\" alt=\"μ _ { x } = μ _ { y }= μ _ { w } = μ _ { h } = 0 , { \\sigma _ { x } } =  { \\sigma _ { y } } = 0.1, { \\sigma _ { w } } =  { \\sigma _ { h } } = 0.2\" eeimg=\"1\"/> 。如果一个default box没有被分配真实边界框，我们只需将该default box的类别设为背景。类别为背景的default box通常被称为负类default box，其余则被称为正类default box 。</blockquote><h2><b>训练目标函数</b></h2><p>损失函数定义为位置误差（locatization loss， loc）与置信度误差（confidence loss, conf）的加权和：</p><p><img src=\"https://www.zhihu.com/equation?tex=L%28x%2C+c%2C+l%2C+g%29%3D%5Cfrac%7B1%7D%7BN%7D%28%28L_%7Bconf%7D%28x%2Cc%29%2B%5Calpha+L_%7Bloc%7D%28x%2Cl%2Cg%29%29%29\" alt=\"L(x, c, l, g)=\\frac{1}{N}((L_{conf}(x,c)+\\alpha L_{loc}(x,l,g)))\" eeimg=\"1\"/> </p><p>其中 <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> 是匹配到GT（Ground Truth）的default box数量，这 <img src=\"https://www.zhihu.com/equation?tex=x+_+%7B+ij+%7D+%5E+%7B+p+%7D+%5Cin+%7B+1%2C0+%7D\" alt=\"x _ { ij } ^ { p } \\in { 1,0 }\" eeimg=\"1\"/> 为一个指示参数，当 <img src=\"https://www.zhihu.com/equation?tex=x+_+%7B+ij+%7D+%5E+%7B+p+%7D+%3D1\" alt=\"x _ { ij } ^ { p } =1\" eeimg=\"1\"/> 时表示第 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"/> 个default box与第 <img src=\"https://www.zhihu.com/equation?tex=j\" alt=\"j\" eeimg=\"1\"/> 个ground truth匹配，并且ground truth的类别为 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 。 <img src=\"https://www.zhihu.com/equation?tex=c\" alt=\"c\" eeimg=\"1\"/> 为置信度的预测值。 如下计算，当 <img src=\"https://www.zhihu.com/equation?tex=x_%7Bij%7D%5E%7Bk%7D%3D1\" alt=\"x_{ij}^{k}=1\" eeimg=\"1\"/> ，也就是匹配时，才计算预测box以及真实目标框的smooth L1定位损失。</p><h2><b>定位损失</b></h2><p>对于 <img src=\"https://www.zhihu.com/equation?tex=L+_+%7B+%5Coperatorname+%7B+con+%7D+f+%7D+%28+x+%2C+c+%29\" alt=\"L _ { \\operatorname { con } f } ( x , c )\" eeimg=\"1\"/> ，和Faster RCNN类似，这里预测的是相对于default default box<code>[x,y,w,h]</code>的偏移，采用的是Smooth L1 loss:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b1633c7145db54c4020402012e5266a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"681\" data-original=\"https://pic2.zhimg.com/v2-b1633c7145db54c4020402012e5266a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;681&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"681\" data-original=\"https://pic2.zhimg.com/v2-b1633c7145db54c4020402012e5266a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b1633c7145db54c4020402012e5266a9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>置信度损失</b></h2><p>置信度confidence损失是多类置信度下的softmax loss，其中对于i是正例样本的default box，计算正例样本的default box，如果是负例样本的default box，计算负例样本的default box，既不是正例样本也不是负例样本则忽略。</p><p><img src=\"https://www.zhihu.com/equation?tex=L_%7Bconf%7D%28x%2Cc%29%3D-%5Csum_%7Bi+%5Cin+Pos%7D%5E%7BN%7D%7Bx_%7Bij%7D%5E%7Bp%7D+%5Clog%7B%28%5Chat%7Bc%7D%7Bi%7D%5E%7Bp%7D%29%7D%7D-%5Csum%7Bi+%5Cin+Neg%7D%5E%7BN%7D%7B+%5Clog%7B%28%5Chat%7Bc%7D_%7Bi%7D%5E%7B0%7D%29%7D%7D\" alt=\"L_{conf}(x,c)=-\\sum_{i \\in Pos}^{N}{x_{ij}^{p} \\log{(\\hat{c}{i}^{p})}}-\\sum{i \\in Neg}^{N}{ \\log{(\\hat{c}_{i}^{0})}}\" eeimg=\"1\"/> </p><p><img src=\"https://www.zhihu.com/equation?tex=%5Chat%7Bc%7D%7Bi%7D%5E%7Bp%7D%3D%5Cfrac%7B%5Cexp%7Bc%7Bi%7D%5E%7Bp%7D%7D%7D%7B%5Csum_%7Bp%7D%7B%5Cexp%7Bc_%7Bi%7D%5E%7Bp%7D%7D%7D%7D\" alt=\"\\hat{c}{i}^{p}=\\frac{\\exp{c{i}^{p}}}{\\sum_{p}{\\exp{c_{i}^{p}}}}\" eeimg=\"1\"/> </p><h2><b>困难样本挖掘</b></h2><p>Hard negative mining，匹配步骤以后，大部分的default boxes都是负例样本。这就引入了正例样本和负例样本的不平衡。通过使用最大的置信度损失（较难分类）的default box并且选择整理了样本和负例样本，使得比例为1:3，这个策略使得更好的优化以及更稳定的训练。</p><h2><b>数据增广</b></h2><p>为了使得对不同目标大小shapes的适应，每一个训练图像按照下述选项随机采样： - 使用整张原始输入图像； - 采样和原目标有0.1，0.3，0.5，0.7或0.9的patch； - 随机采样patch；</p><p>每一个采样patch的大小是原始输入图像大小的$[0.1, 1]$，并且纵横比在1/2和2之间。如果gt真实框的中心在采样patch的中心那么保持gt真实目标框。采样步骤后，每一个采样patch被resized到固定大小并且0.5概率的水平翻转，同时额外增加一些photo-metric畸变。</p><h2><b>实验结果</b></h2><p>本文的实验都是基于VGG16，改进如下所示： - 转换fc6和fc7为卷积网络层； - 池化pool5从2x2-s2转换为3x3-s1，同时使用空洞卷积来增强丢失的感受野； - 去除所有dropout网络层和fc8网络层；</p><p>SSD300模型中，使用了conv4_3,conv7,conv8_2,conv9_2,conv10_2,conv11_2这6个不同stride的feture map来预测location和confidences。其中在conv4_3中设置default box尺度为0.1。使用xavier方法初始化参数。对于conv4_3,conv10_2和conv11_2，仅仅关联4个default boxes（舍弃aspect ratios 1/3和3）。<b>由于conv4_3和其他网络层相比有不同的特征尺度，本文使用了L2 norm缩放特征norm到20并且在BP期间学习scale</b>。在40k的迭代过程中使用学习率0.0001，然后继续使用0.0001和0.00001的学习率微调10k迭代。SSD300模型比Fast R-CNN精度更高，SSD512模型比Faster R-CNN精度更高（在VOC 2007提升1.7%mAP）。</p><p>SSD对于bbox大小非常敏感，在更小的目标上比起更大的目标性能更差，因为那些非常小的目标甚至在非常top的网络层中也没有足够的信息。减小这种更差性能的问题，可以增加输入大小（从300x300增加到512x512）能帮助提升检测小的目标。好的一面是，SSD对于大的目标表现较好，并且对于不同的目标纵横比表现较为鲁棒（因为在每一个feature map位置上使用了不同纵横比的default boxes）。</p><h2><b>更多的default box形状</b></h2><p>使用不同的aspect ratio，比如2,1/2,3,1/3都会提升精度。</p><h2><b>空洞卷积</b></h2><p>使用了空洞卷积和直接池化层下采样的比较：精度相同但是速度提升了20%。</p><h2><b>不同分辨率的多个输出网络层</b></h2><p>SSD的主要贡献是在不同的输出层上使用不同比例的default box。</p><h2><b>运行时间</b></h2><p>考虑到从我们的方法生成的大量目标框，必须在测试期间有效地执行非最大抑制（nms）。通过使用0.01的置信度阈值，我们可以过滤掉大多数bbox。然后，我们应用nms，每个类的IOU重叠为0.45，并保持每个图像的前200个检测。 对于SSD300和20个VOC，此步骤每张图像的成本约为1.7毫秒，这接近于在所有新添加的层上花费的总时间（2.4毫秒）。</p><p>我们的SSD300和SSD512方法在速度和精度方面均优于Faster R-CNN。尽管Fast YOLO 的运行速度为155FPS，但精度较低，几乎可达到22％mAP。据我们所知，SSD300是第一个实现70％以上mAP的实时方法。请注意，大约80％的转发时间花在基础网络上（在我们的例子中是VGG16）。因此，使用更快的基础网络甚至可以进一步提高速度，这也可能使SSD512模型达到实时运行。</p><h2><b>参考资料</b></h2><p> 这两篇博客对于default box的讲解详细 </p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/gbyy42299/article/details/81235891\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-5171fdf338e093bfc38bfa268eadd2fb_180x120.jpg\" data-image-width=\"372\" data-image-height=\"242\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SSD详解 + default box生成过程</a><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://zhuanlan.zhihu.com/p/32666193\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/equation_ipico.jpg\" data-image-width=\"0\" data-image-height=\"0\" class=\"internal\">夏至：理解SSD</a><p>gluon book对于default box的处理将的很清晰</p><a href=\"https://link.zhihu.com/?target=https%3A//zh.diveintodeeplearning.org/chapter_computer-vision/anchor.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">锚框 - 《动手学深度学习》 文档</a><a href=\"https://link.zhihu.com/?target=https%3A//github.com/guanfuchen/objdet\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8e3ae36c49abad8141447a018b292202_ipico.jpg\" data-image-width=\"240\" data-image-height=\"240\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">guanfuchen/objdet</a><p>  基于pytorch1.0的优质ssd代码</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/lufficc/SSD\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-642ab44a7125975d57b45f0861f0f6c7_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">lufficc/SSD</a><p></p>", 
            "topic": [
                {
                    "tag": "目标检测", 
                    "tagLink": "https://api.zhihu.com/topics/19596960"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "PyTorch", 
                    "tagLink": "https://api.zhihu.com/topics/20075993"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45072687", 
            "userName": "周军", 
            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
            "upvote": 26, 
            "title": "pytorch1.0 模型打包指南（部署）", 
            "content": "<h2>pytorch1.0预览版已于2018-09-20发布，基本api和0.4保持一致，主要的变化在部署模型这一块</h2><p>在官网教程中已经有了详细的说明，这里简要提一下如何保存和加载。</p><a href=\"https://link.zhihu.com/?target=https%3A//pytorch.org/tutorials/advanced/cpp_export.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Loading a PyTorch Model in C++</a><h2>保存</h2><p>参考官网教程，在训练完之后，会保存一个模型的权重，接下来，需要重新将权重加载到网络中，并进行保存，示例代码如下：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models.crnn</span> <span class=\"k\">import</span> <span class=\"n\">CRNN</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">save_path</span><span class=\"p\">):</span>\n    <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"nb\">eval</span><span class=\"p\">()</span>\n    <span class=\"n\">traced_script_module</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">jit</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">)</span>\n    <span class=\"n\">traced_script_module</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">save_path</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">jit</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">320</span><span class=\"p\">)</span>\n    <span class=\"n\">model_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./model.pth&#39;</span>\n    <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">CRNN</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>\n    <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">load_state_dict</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">))</span>\n    <span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./model.pt&#39;</span><span class=\"p\">)</span></code></pre></div><p>此处以crnn为例，可以看到，在保存之前，我们需要先将模型设置为测试模式，不设置的话，dropout和bn这些和训练状态相关的层会报错(算是一个小坑吧)。</p><p>保存分为两步</p><ol><li>使用<code>torch.jit.trace()</code>将<code>pytorch模型</code>转换为<code>Torch Script</code> ,该方法会返回一<code>ScriptModule</code>。 </li><li>调用返回的<code>ScriptModule</code>的<code>save()</code>方法将模型保存下来。 </li></ol><h2>加载</h2><p>加载模型也非常简单，只需要一句话</p><div class=\"highlight\"><pre><code class=\"language-text\">net = torch.jit.load(model_path)</code></pre></div><p>之前使用<code>torch.save</code>也可以将计算图和权重保存在一起。但是那样保存的计算图依赖于 原始文件，文件发生改变就不能加载了。使用1.0的方式保存的模型不依赖于原始文件，可以任意移动。</p><p>打印一下trace前后的<code>net</code> </p><p>之前</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-aa750259c28be86cd7d7a49c8176cb18_b.jpg\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb\" width=\"774\" data-original=\"https://pic1.zhimg.com/v2-aa750259c28be86cd7d7a49c8176cb18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;774&#39; height=&#39;597&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"774\" data-original=\"https://pic1.zhimg.com/v2-aa750259c28be86cd7d7a49c8176cb18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-aa750259c28be86cd7d7a49c8176cb18_b.jpg\"/><figcaption>trace之前</figcaption></figure><p>之后</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4482ca5bb927f7ac926e4f6ed4a35ead_b.jpg\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"426\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;426&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"426\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic2.zhimg.com/v2-4482ca5bb927f7ac926e4f6ed4a35ead_b.jpg\"/><figcaption>trace之后</figcaption></figure><p>可以看到<code>relu</code>和<code>pool</code> 都被移除了，至于为什么目前还没有研究清楚。等待大神的详细解答。</p>", 
            "topic": [
                {
                    "tag": "PyTorch", 
                    "tagLink": "https://api.zhihu.com/topics/20075993"
                }
            ], 
            "comments": [
                {
                    "userName": "Liang", 
                    "userLink": "https://www.zhihu.com/people/d1833b23debac8073e4353af078af5f4", 
                    "content": "<p>it might because there is not any parameter in relu and pool</p>", 
                    "likes": 7, 
                    "childComments": []
                }, 
                {
                    "userName": "陈或", 
                    "userLink": "https://www.zhihu.com/people/d9885704bf146ea357586ed11f0b1c83", 
                    "content": "<p>C++依赖库LibTorch在哪里下呢。。</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "周军", 
                            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
                            "content": "文章里给出的那个官方文档里面有下载链接", 
                            "likes": 0, 
                            "replyToAuthor": "陈或"
                        }, 
                        {
                            "userName": "周军", 
                            "userLink": "https://www.zhihu.com/people/6522d358e9b65eca42eeedb4b0ece9fd", 
                            "content": "官网下载pytorch的地方有链接", 
                            "likes": 0, 
                            "replyToAuthor": "陈或"
                        }
                    ]
                }, 
                {
                    "userName": "Liang", 
                    "userLink": "https://www.zhihu.com/people/d1833b23debac8073e4353af078af5f4", 
                    "content": "<p>it might because there is not any parameter in relu and pool</p>", 
                    "likes": 7, 
                    "childComments": []
                }, 
                {
                    "userName": "Devin", 
                    "userLink": "https://www.zhihu.com/people/580c3d03824f34cf96fa07cedc0b6732", 
                    "content": "请问为啥推断输出的一行两列tensor值不在(-1，1)之间呢，我做的是二分类。", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1026438980358864896"
}
