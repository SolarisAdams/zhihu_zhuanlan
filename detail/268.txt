{
    "title": "《计算机视觉中的多视图几何》——学习总结", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/tang-yu-99-88", 
        "https://www.zhihu.com/people/meng-die-90-67", 
        "https://www.zhihu.com/people/bai-wu-57-48", 
        "https://www.zhihu.com/people/tian-dao-chou-qin-97-7", 
        "https://www.zhihu.com/people/cai-cai-23-15-35", 
        "https://www.zhihu.com/people/tian-sheng-hui-60", 
        "https://www.zhihu.com/people/li-hao-tian-45-57", 
        "https://www.zhihu.com/people/yihao-duan", 
        "https://www.zhihu.com/people/hou-dao-14-92", 
        "https://www.zhihu.com/people/quan-quan-69-16", 
        "https://www.zhihu.com/people/han-ke-di", 
        "https://www.zhihu.com/people/guting-wu", 
        "https://www.zhihu.com/people/lin-huan-Lafley", 
        "https://www.zhihu.com/people/sun-mou-mou-26-6", 
        "https://www.zhihu.com/people/wan-li-wu-yi-45-35", 
        "https://www.zhihu.com/people/wu-ming-de-ji-du", 
        "https://www.zhihu.com/people/YaoGISer", 
        "https://www.zhihu.com/people/chen-gui-comeon", 
        "https://www.zhihu.com/people/ren-tian-you-37", 
        "https://www.zhihu.com/people/haienzi", 
        "https://www.zhihu.com/people/zi-shan-57-15", 
        "https://www.zhihu.com/people/laoyoutiao_trap", 
        "https://www.zhihu.com/people/xie-liang-liang-88", 
        "https://www.zhihu.com/people/li-xue-jian-25", 
        "https://www.zhihu.com/people/yang-sen-70-25-71", 
        "https://www.zhihu.com/people/advtsl", 
        "https://www.zhihu.com/people/friedrich-78", 
        "https://www.zhihu.com/people/huang-feng-34-47", 
        "https://www.zhihu.com/people/liu-zhen-bo-90", 
        "https://www.zhihu.com/people/happy-time-35", 
        "https://www.zhihu.com/people/zhou-wu-67-21", 
        "https://www.zhihu.com/people/gipong", 
        "https://www.zhihu.com/people/wangchengmo", 
        "https://www.zhihu.com/people/end-jaker", 
        "https://www.zhihu.com/people/kong-ping-zi-97", 
        "https://www.zhihu.com/people/peng-bo-36-74", 
        "https://www.zhihu.com/people/yang-gang-69-84", 
        "https://www.zhihu.com/people/wo-shi-guai-xiao-hai-39", 
        "https://www.zhihu.com/people/usename6", 
        "https://www.zhihu.com/people/emplin", 
        "https://www.zhihu.com/people/chen-cai-fu-14", 
        "https://www.zhihu.com/people/aisalon.cn", 
        "https://www.zhihu.com/people/zhang-ji-qi-99", 
        "https://www.zhihu.com/people/guan-hai-ting-tao-27-15", 
        "https://www.zhihu.com/people/chen-jie-77-63", 
        "https://www.zhihu.com/people/tiger-81", 
        "https://www.zhihu.com/people/b-q-liu", 
        "https://www.zhihu.com/people/yike-20-21-97", 
        "https://www.zhihu.com/people/shen-hai-tai-tan-24-11", 
        "https://www.zhihu.com/people/li-sheng-38-23", 
        "https://www.zhihu.com/people/ldlong-83", 
        "https://www.zhihu.com/people/da-bao-27-68-72", 
        "https://www.zhihu.com/people/banana16314", 
        "https://www.zhihu.com/people/yu-zhou-60-88", 
        "https://www.zhihu.com/people/qi-yu-58-39", 
        "https://www.zhihu.com/people/tao-tao-56-98-29", 
        "https://www.zhihu.com/people/qing-shen-jue-qian", 
        "https://www.zhihu.com/people/a-mao-54-71", 
        "https://www.zhihu.com/people/shuang-zi-xing-xing", 
        "https://www.zhihu.com/people/qiu-zhi-71-46", 
        "https://www.zhihu.com/people/wang-xiao-hua-66-48-91", 
        "https://www.zhihu.com/people/shi-shui-zhan-liao-wo-de-ni-cheng", 
        "https://www.zhihu.com/people/yan-xian-93", 
        "https://www.zhihu.com/people/cxfchxy", 
        "https://www.zhihu.com/people/nan-huang-2", 
        "https://www.zhihu.com/people/zhao-xin-99-25", 
        "https://www.zhihu.com/people/cha-lin-63-71", 
        "https://www.zhihu.com/people/zhang-yuan-song-44", 
        "https://www.zhihu.com/people/sai-33-71", 
        "https://www.zhihu.com/people/x_fly", 
        "https://www.zhihu.com/people/dai-wen-65", 
        "https://www.zhihu.com/people/fanjiale", 
        "https://www.zhihu.com/people/hou-wen-bo-16-69", 
        "https://www.zhihu.com/people/mo-lu-chi-shang-13", 
        "https://www.zhihu.com/people/wo-shan-xian-ni", 
        "https://www.zhihu.com/people/mianbao96", 
        "https://www.zhihu.com/people/liu-yi-fan-74-22", 
        "https://www.zhihu.com/people/chang-feng-po-lang-99", 
        "https://www.zhihu.com/people/lu-peng-15-57", 
        "https://www.zhihu.com/people/jian-nan-yi-mei", 
        "https://www.zhihu.com/people/zheng-dong-dong-76", 
        "https://www.zhihu.com/people/hao-guo-qing-25", 
        "https://www.zhihu.com/people/olessgirl", 
        "https://www.zhihu.com/people/ceng-xiong-92-79", 
        "https://www.zhihu.com/people/zhihushabi_hehe", 
        "https://www.zhihu.com/people/zhou-jia-feng-73", 
        "https://www.zhihu.com/people/zhenzhong-God", 
        "https://www.zhihu.com/people/philoxmyu", 
        "https://www.zhihu.com/people/imustli-qi", 
        "https://www.zhihu.com/people/tao-yi-bo-39", 
        "https://www.zhihu.com/people/monitorji", 
        "https://www.zhihu.com/people/FlyCharles-81-23", 
        "https://www.zhihu.com/people/yang-bin-6-82-12", 
        "https://www.zhihu.com/people/xiang-lai-xiao-se-ye-wu-wei", 
        "https://www.zhihu.com/people/okeah", 
        "https://www.zhihu.com/people/kong-fu-zi-77", 
        "https://www.zhihu.com/people/ziqiulin", 
        "https://www.zhihu.com/people/nu-li-wei-liao-shan-ding", 
        "https://www.zhihu.com/people/zhuo-sun-40", 
        "https://www.zhihu.com/people/schmidtgan", 
        "https://www.zhihu.com/people/lu-cheng-lin-25", 
        "https://www.zhihu.com/people/feng-kou-shang-de-zhu-hou", 
        "https://www.zhihu.com/people/dong-xiao-jian", 
        "https://www.zhihu.com/people/guo-xiao-liang-57", 
        "https://www.zhihu.com/people/liushuan-81", 
        "https://www.zhihu.com/people/cook-cooller", 
        "https://www.zhihu.com/people/hu-yun-song-22", 
        "https://www.zhihu.com/people/dong-feng-66-72", 
        "https://www.zhihu.com/people/qiaonima", 
        "https://www.zhihu.com/people/darkriver404", 
        "https://www.zhihu.com/people/chen-hao-ming-87", 
        "https://www.zhihu.com/people/rxtfeng", 
        "https://www.zhihu.com/people/AlbertRen", 
        "https://www.zhihu.com/people/t-zero-16", 
        "https://www.zhihu.com/people/frozenfire", 
        "https://www.zhihu.com/people/xiao-chong-12-1", 
        "https://www.zhihu.com/people/woodknight", 
        "https://www.zhihu.com/people/xue-wen-11", 
        "https://www.zhihu.com/people/sr-wang-19", 
        "https://www.zhihu.com/people/david-li-60-97", 
        "https://www.zhihu.com/people/si-jiao-ji", 
        "https://www.zhihu.com/people/oasis-64-22", 
        "https://www.zhihu.com/people/weixiaokang-42", 
        "https://www.zhihu.com/people/manchery", 
        "https://www.zhihu.com/people/cai-da-fu-65", 
        "https://www.zhihu.com/people/xu-hua-hao-68", 
        "https://www.zhihu.com/people/dan-lian-xu", 
        "https://www.zhihu.com/people/holms-holms-31", 
        "https://www.zhihu.com/people/li-zhen-yu-87-75", 
        "https://www.zhihu.com/people/lin-zang-40", 
        "https://www.zhihu.com/people/miller-zhang", 
        "https://www.zhihu.com/people/qiao-zhi-83-9", 
        "https://www.zhihu.com/people/gumei-22", 
        "https://www.zhihu.com/people/zhang-dou-68", 
        "https://www.zhihu.com/people/yanleirex", 
        "https://www.zhihu.com/people/qihebetter", 
        "https://www.zhihu.com/people/ha-ha-he-he-95", 
        "https://www.zhihu.com/people/li-pwu-33", 
        "https://www.zhihu.com/people/whitecafe", 
        "https://www.zhihu.com/people/ai-xiao-de-alfred", 
        "https://www.zhihu.com/people/zhou-bo-43-4", 
        "https://www.zhihu.com/people/tang-xiao-liang-72", 
        "https://www.zhihu.com/people/yh-lin-35", 
        "https://www.zhihu.com/people/xu-jun-zhong", 
        "https://www.zhihu.com/people/wu-zhi-shang-de-wu-dao", 
        "https://www.zhihu.com/people/zhao-ming-41-62", 
        "https://www.zhihu.com/people/zou-lei", 
        "https://www.zhihu.com/people/jiangziqian", 
        "https://www.zhihu.com/people/laze-sun", 
        "https://www.zhihu.com/people/sky-shaw", 
        "https://www.zhihu.com/people/gao-chen-1995", 
        "https://www.zhihu.com/people/xerphong", 
        "https://www.zhihu.com/people/quiescencent", 
        "https://www.zhihu.com/people/hawk.wang", 
        "https://www.zhihu.com/people/long-jian-1", 
        "https://www.zhihu.com/people/jiang-23-71", 
        "https://www.zhihu.com/people/mao-xian-sheng-1-1", 
        "https://www.zhihu.com/people/jihuatong", 
        "https://www.zhihu.com/people/shi-kong-chuan-suo-64", 
        "https://www.zhihu.com/people/yan-xiang-83-26", 
        "https://www.zhihu.com/people/liao-wu-4", 
        "https://www.zhihu.com/people/handiing", 
        "https://www.zhihu.com/people/chen-kun-40-87", 
        "https://www.zhihu.com/people/ri-yue-20-41", 
        "https://www.zhihu.com/people/hanyd", 
        "https://www.zhihu.com/people/qi-long-31", 
        "https://www.zhihu.com/people/seantao", 
        "https://www.zhihu.com/people/xie-wen-kai-85", 
        "https://www.zhihu.com/people/xiang-hui-yu-li-ming", 
        "https://www.zhihu.com/people/sx_AH", 
        "https://www.zhihu.com/people/zhuang-xiao-p", 
        "https://www.zhihu.com/people/lin-da-17-7", 
        "https://www.zhihu.com/people/mao-mao-56-51-46", 
        "https://www.zhihu.com/people/silence-57-28-74", 
        "https://www.zhihu.com/people/HeZhi-Liang", 
        "https://www.zhihu.com/people/zhao-xi-xian-6", 
        "https://www.zhihu.com/people/bing-feng-bian-yuan", 
        "https://www.zhihu.com/people/guo-feng-xiao-65", 
        "https://www.zhihu.com/people/ni-hao-jiu-shi-guang-63-11", 
        "https://www.zhihu.com/people/qia-tong-xue-shao-nian-49-15", 
        "https://www.zhihu.com/people/lin-da-bao-4", 
        "https://www.zhihu.com/people/lu-jian-quan-90", 
        "https://www.zhihu.com/people/nan-nan-85-31", 
        "https://www.zhihu.com/people/xiao-ai-43-45-82", 
        "https://www.zhihu.com/people/gpq-likkas", 
        "https://www.zhihu.com/people/zhang-yin-song-44", 
        "https://www.zhihu.com/people/xia-xia-26-60-50", 
        "https://www.zhihu.com/people/grant-68", 
        "https://www.zhihu.com/people/peng-han-74", 
        "https://www.zhihu.com/people/bo-pai-kuang-pai", 
        "https://www.zhihu.com/people/hao-lin-25", 
        "https://www.zhihu.com/people/mu-hang-80", 
        "https://www.zhihu.com/people/cv2019", 
        "https://www.zhihu.com/people/zhmman-9", 
        "https://www.zhihu.com/people/zxx-32-31", 
        "https://www.zhihu.com/people/lu-chi-zou-bu-chu-hu-bu-xiang", 
        "https://www.zhihu.com/people/ykp-41", 
        "https://www.zhihu.com/people/haffman", 
        "https://www.zhihu.com/people/hu-jun-96", 
        "https://www.zhihu.com/people/shmm91", 
        "https://www.zhihu.com/people/qia-qia-qia-qia-qia-qia-27", 
        "https://www.zhihu.com/people/catchmeifyoucanhah", 
        "https://www.zhihu.com/people/meng-wen-ming-23", 
        "https://www.zhihu.com/people/karrychen", 
        "https://www.zhihu.com/people/gu-jin-ming-57-12", 
        "https://www.zhihu.com/people/foolyiming", 
        "https://www.zhihu.com/people/yyc-47-2", 
        "https://www.zhihu.com/people/shao-lin-xiao-zi-24", 
        "https://www.zhihu.com/people/liuwenlin", 
        "https://www.zhihu.com/people/agentdaisy", 
        "https://www.zhihu.com/people/yo-ha-17", 
        "https://www.zhihu.com/people/libin-sui", 
        "https://www.zhihu.com/people/zhao-hu-41-13", 
        "https://www.zhihu.com/people/yildhd-wang", 
        "https://www.zhihu.com/people/li-pei-xuan-59", 
        "https://www.zhihu.com/people/zhang-xu-75-44", 
        "https://www.zhihu.com/people/hua-teng-12-7", 
        "https://www.zhihu.com/people/stephen-wang-1", 
        "https://www.zhihu.com/people/triocrossing", 
        "https://www.zhihu.com/people/xiao-ma-jia-55-39", 
        "https://www.zhihu.com/people/jmmmmmmmm", 
        "https://www.zhihu.com/people/gao-shuai-29-25", 
        "https://www.zhihu.com/people/long-gang-62-42", 
        "https://www.zhihu.com/people/nathen-42-36", 
        "https://www.zhihu.com/people/yang-tao-49-63", 
        "https://www.zhihu.com/people/he-da-shi-69-7", 
        "https://www.zhihu.com/people/feng-sheng-8-1", 
        "https://www.zhihu.com/people/yang-60-6-83", 
        "https://www.zhihu.com/people/zlgsyv", 
        "https://www.zhihu.com/people/piaozhx", 
        "https://www.zhihu.com/people/jin-jie-13-61", 
        "https://www.zhihu.com/people/zhuang-xiao-xian-27", 
        "https://www.zhihu.com/people/liu-bo-32-55", 
        "https://www.zhihu.com/people/fang-fa-64-69", 
        "https://www.zhihu.com/people/flyaudio", 
        "https://www.zhihu.com/people/fu-li-43-28", 
        "https://www.zhihu.com/people/li-chunpeng", 
        "https://www.zhihu.com/people/shi-dian-yu", 
        "https://www.zhihu.com/people/wangwenpeng-72", 
        "https://www.zhihu.com/people/mu-mu-jun-74-19", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/guo-jie-tian", 
        "https://www.zhihu.com/people/zhi-zhi-12-49", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/guangqin", 
        "https://www.zhihu.com/people/superpermutation", 
        "https://www.zhihu.com/people/zhu-forrest", 
        "https://www.zhihu.com/people/tan-jing-14-97-58", 
        "https://www.zhihu.com/people/liao-xian-hao-1108", 
        "https://www.zhihu.com/people/frank999-1", 
        "https://www.zhihu.com/people/ou-yang-cai-zi-54", 
        "https://www.zhihu.com/people/haior", 
        "https://www.zhihu.com/people/zhou-lei-35-73", 
        "https://www.zhihu.com/people/wu-kai-68-71", 
        "https://www.zhihu.com/people/luo-chuan-chen-79", 
        "https://www.zhihu.com/people/wu-ding-shang-de-xiao-niao"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/56700255", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 12, 
            "title": "《CV中的多视图几何》——基础矩阵、本质矩阵", 
            "content": "<p><b>更新2019-2-16</b>：</p><p>感觉急急忙忙写完基础矩阵总觉得差些什么，光讲概念有点少，所以想想再加上基础矩阵的应用吧，简单说一下关于从<b>基础矩阵 <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/></b> 和<b>本质矩阵 <img src=\"https://www.zhihu.com/equation?tex=E\" alt=\"E\" eeimg=\"1\"/></b> 恢复<b>相机矩阵 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> </b>，事实上，是没法直接恢复出唯一的 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> <b>。</b></p><hr/><p>一拖就拖了两个月，，，</p><p>这一段时间一直在做object detection领域的调研，所以就没有顾得上这件事，趁着假期做完了大部分调研工作，就过来把<b>基础矩阵</b>这一块补上（兑现承诺），差不多到这，MVG的总结就暂时先告一段落了，日后若是有幸踏入三维重建的领域，还会再来更新的。只有短短的几章总结，每章也只是讲的有些浅显，自身水平实在有限，还望读者见谅。</p><p>OK，正文开始！</p><h2><b>一、基础矩阵（Fundamental Matrix）</b></h2><p>前面几章，我们一直在研究的是<b>单视图问题</b>，即一个空间点和图像中的像素点之间的对应关系（针孔相机模型）。但是，很多时候，相机是运动的，或者空间物体是运动的，所以，我们更好奇的是，某一空间点 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> ，在时刻 <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 时，处在图像中的位置是 <img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/>，在时刻 <img src=\"https://www.zhihu.com/equation?tex=t%2B1\" alt=\"t+1\" eeimg=\"1\"/> 时，处在图像中（显然是一个新的一帧图像）的位置是 <img src=\"https://www.zhihu.com/equation?tex=x_2\" alt=\"x_2\" eeimg=\"1\"/>，那么这两个位置有什么关系呢？（肯定有关系，没有就出了鬼了呢！），我们把这个问题说得再宽泛些：对于一个空间点<img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/>，它在两个不同的图像帧（这两个帧可以是由两个不同的相机获得的）中的位置<img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/>，<img src=\"https://www.zhihu.com/equation?tex=x_2\" alt=\"x_2\" eeimg=\"1\"/>之间存在什么样的数学关系呢？或者说，已知图像位置 <img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/> ，如何去确定它在下一幅图像中的位置 <img src=\"https://www.zhihu.com/equation?tex=x_2\" alt=\"x_2\" eeimg=\"1\"/> 呢？我们将这种问题称之为<b>双视图几何问题</b>，解决这一问题的出发点，就是两幅图像之间的<b>对极几何</b>。如图一所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-28e5f176c1425ee7ec4bbd0a5f405447_b.jpg\" data-size=\"normal\" data-rawwidth=\"1252\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb\" width=\"1252\" data-original=\"https://pic4.zhimg.com/v2-28e5f176c1425ee7ec4bbd0a5f405447_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1252&#39; height=&#39;593&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1252\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1252\" data-original=\"https://pic4.zhimg.com/v2-28e5f176c1425ee7ec4bbd0a5f405447_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-28e5f176c1425ee7ec4bbd0a5f405447_b.jpg\"/><figcaption>图一 双视图对极几何模型</figcaption></figure><p>首先，简单地描述一下图一的几何模型：</p><p>假定一个三维空间点 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 在两幅图像中的成像位置分别为 <img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=x_2\" alt=\"x_2\" eeimg=\"1\"/> 。显然，这三个点确定一个平面，记为 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"/> ，也称之为<b>极平面</b>。两个光心的连线称之为<b>基线</b>，由于光心与图像点和空间点是共线的，因此光心也是处在极平面中的。基线与两幅图像的交点 <img src=\"https://www.zhihu.com/equation?tex=e_1%EF%BC%8Ce_2\" alt=\"e_1，e_2\" eeimg=\"1\"/> 称为<b>对极点，</b>从针孔相机模型的几何意义上来看，对极点就是光心在另一幅图像中的投影，即 <img src=\"https://www.zhihu.com/equation?tex=e_2\" alt=\"e_2\" eeimg=\"1\"/> 是光心 <img src=\"https://www.zhihu.com/equation?tex=C_1\" alt=\"C_1\" eeimg=\"1\"/> 在第二幅图像平面中的投影位置。显然，对极点与图像点之间的连线 <img src=\"https://www.zhihu.com/equation?tex=l_1%EF%BC%8Cl_2\" alt=\"l_1，l_2\" eeimg=\"1\"/> 就是极平面 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"/> 与两个图像平面的交线，称<img src=\"https://www.zhihu.com/equation?tex=l_1%EF%BC%8Cl_2\" alt=\"l_1，l_2\" eeimg=\"1\"/>为<b>对极线。</b></p><p>现在，假定我们只知道 <img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/> ，我们会问其对应点 <img src=\"https://www.zhihu.com/equation?tex=x_2\" alt=\"x_2\" eeimg=\"1\"/> 是如何被约束在第二幅图像中的呢？或者说在第二幅图像中的哪个位置呢？从对极几何模型可知， <img src=\"https://www.zhihu.com/equation?tex=x_2\" alt=\"x_2\" eeimg=\"1\"/> 必然在极线 <img src=\"https://www.zhihu.com/equation?tex=l_2\" alt=\"l_2\" eeimg=\"1\"/> 上，但是具体在<img src=\"https://www.zhihu.com/equation?tex=l_2\" alt=\"l_2\" eeimg=\"1\"/> 上的哪里呢？如果不知道空间点 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 的具体位置，那显然我们也没法回答这个问题，如图二便可以做出解释。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a8d7af84f394e285808e880a3f392004_b.jpg\" data-size=\"normal\" data-rawwidth=\"1173\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb\" width=\"1173\" data-original=\"https://pic1.zhimg.com/v2-a8d7af84f394e285808e880a3f392004_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1173&#39; height=&#39;651&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1173\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1173\" data-original=\"https://pic1.zhimg.com/v2-a8d7af84f394e285808e880a3f392004_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a8d7af84f394e285808e880a3f392004_b.jpg\"/><figcaption>图二</figcaption></figure><p>图二中的第二幅图中的三个蓝点位置都可以作为 <img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/> 的对应点，也就是说，在只知道<img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/>的情况下，我们无法确定其在第二幅图像中的对应点，只知道是在对极线 <img src=\"https://www.zhihu.com/equation?tex=l_2\" alt=\"l_2\" eeimg=\"1\"/> 上（因此，有一种技术叫<b>极线搜索</b>，用来再另一幅图像中寻找对应点，原理就是对应点只会在极线上或者附近，不会出现在其他位置），这里我们不考虑噪声的影响。因为不知道空间点 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 的位置，那么<img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/>反向投影的射线上的每一个空间点在第二幅图像上的投影点都可以是对应点。所以，存在一个从一幅图像上的点到另一幅图像上与之对应的对极线的映射：</p><p><img src=\"https://www.zhihu.com/equation?tex=x%3A%5Crightarrow+l\" alt=\"x:\\rightarrow l\" eeimg=\"1\"/> </p><p>我们要探索的就是这个映射的本质，代表这一本质的映射矩阵，就是<b>基础矩阵（Fundamental Matrix）。</b>所以，接下来我们的目标就是要推导出这一映射，在MVG这本书中，先是进行了几何推导，然后再进行代数推导，这里，我们直接从代数推导开始，借助相机几何模型，利用代数关系推导出映射关系，或者说，基础矩阵。</p><p>前面我们已经知道，图像点 <img src=\"https://www.zhihu.com/equation?tex=x_1\" alt=\"x_1\" eeimg=\"1\"/> 反向投影的空间点所在的射线为下式：</p><p><img src=\"https://www.zhihu.com/equation?tex=X%28%5Clambda%29%3DP_1%5E%7B%2B%7Dx_1%2B%5Clambda+C_1\" alt=\"X(\\lambda)=P_1^{+}x_1+\\lambda C_1\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=P_1%5E%7B%2B%7D%3DP_1%5ET%28P_1+P_1%5ET%29%5E%7B-1%7D\" alt=\"P_1^{+}=P_1^T(P_1 P_1^T)^{-1}\" eeimg=\"1\"/> ，是第一幅图像的相机矩阵（ <img src=\"https://www.zhihu.com/equation?tex=P%3DK%5BR%7Ct%5D\" alt=\"P=K[R|t]\" eeimg=\"1\"/> ）的伪逆， <img src=\"https://www.zhihu.com/equation?tex=C_1\" alt=\"C_1\" eeimg=\"1\"/> 是第一幅图像的光心。该射线上的两个特殊点 <img src=\"https://www.zhihu.com/equation?tex=P_1%5E%7B%2B%7Dx_1\" alt=\"P_1^{+}x_1\" eeimg=\"1\"/> 和<img src=\"https://www.zhihu.com/equation?tex=C_1\" alt=\"C_1\" eeimg=\"1\"/>在第二幅图像中的投影分别为<img src=\"https://www.zhihu.com/equation?tex=P_2P_1%5E%7B%2B%7Dx_1\" alt=\"P_2P_1^{+}x_1\" eeimg=\"1\"/>和 <img src=\"https://www.zhihu.com/equation?tex=P_2C_1\" alt=\"P_2C_1\" eeimg=\"1\"/> ，依照定义，后者就是对极点 <img src=\"https://www.zhihu.com/equation?tex=e_2\" alt=\"e_2\" eeimg=\"1\"/> 。我们已经知道，对极线 <img src=\"https://www.zhihu.com/equation?tex=l_2\" alt=\"l_2\" eeimg=\"1\"/> 就是这两个点的连线(即叉乘)：</p><p><img src=\"https://www.zhihu.com/equation?tex=l_2+%3D+%28P_2C_1%29%5Ctimes%28P_2P_1%5E%2Bx_1%29%3De_2%5Ctimes%28P_2P_1%5E%2Bx_1%29%3De_2%5E%7B%5Cwedge%7D%28P_2P_1%5E%2Bx_1%29%3D%EF%BC%88e_2%5E%7B%5Cwedge%7DP_2P_1%5E%2B%EF%BC%89x_1\" alt=\"l_2 = (P_2C_1)\\times(P_2P_1^+x_1)=e_2\\times(P_2P_1^+x_1)=e_2^{\\wedge}(P_2P_1^+x_1)=（e_2^{\\wedge}P_2P_1^+）x_1\" eeimg=\"1\"/> </p><p>于是，我们便得到了这一映射，即基础矩阵：</p><p><img src=\"https://www.zhihu.com/equation?tex=F%3De_2%5E%7B%5Cwedge%7DP_2P_1%5E%2B\" alt=\"F=e_2^{\\wedge}P_2P_1^+\" eeimg=\"1\"/> </p><p>这里我们注意一个问题，上述的推导的大前提是两个光心 <img src=\"https://www.zhihu.com/equation?tex=C_1\" alt=\"C_1\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=C_2\" alt=\"C_2\" eeimg=\"1\"/> 不能相同，否则<img src=\"https://www.zhihu.com/equation?tex=P_2C_1%3D0\" alt=\"P_2C_1=0\" eeimg=\"1\"/>，我们就不能得到基础矩阵了，或者说 <img src=\"https://www.zhihu.com/equation?tex=F%3D0\" alt=\"F=0\" eeimg=\"1\"/> ，这个结果是没有意义的。一般什么情况下两个光心 <img src=\"https://www.zhihu.com/equation?tex=C_1\" alt=\"C_1\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=C_2\" alt=\"C_2\" eeimg=\"1\"/>会相同呢？一个很容易想到的情况就是第二幅图像是由第一幅图像绕光心做<b>纯旋转运动</b>得到的。</p><p>最后再考虑一个具体点的例子，也是书中的原题。</p><p>假设摄像机矩阵是一个已标定的双目装置且世界原点在第一个摄像机上（即以第一图像作为参考系）：( <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7B0%7D\" alt=\"\\tilde{0}\" eeimg=\"1\"/> 表示零向量，避免混淆)</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1%3DK_1%5BI%7C%5Ctilde%7B0%7D%5D%EF%BC%8CP_2%3DK_2%5BR%7Ct%5D\" alt=\"P_1=K_1[I|\\tilde{0}]，P_2=K_2[R|t]\" eeimg=\"1\"/> </p><p>则:( <img src=\"https://www.zhihu.com/equation?tex=C_2\" alt=\"C_2\" eeimg=\"1\"/> 的形式如果不记得了，可以回看相机模型那一章)</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1%5E%2B%3D+%5Cbegin%7Bbmatrix%7D+K_1%5E%7B-1%7D%5C%5C+%5Ctilde%7B0%7D%5E%7BT%7D+%5Cend%7Bbmatrix%7D%EF%BC%8C+C_1%3D%5Cbegin%7Bbmatrix%7D+%5Ctilde%7B0%7D%5C%5C+1+%5Cend%7Bbmatrix%7D%EF%BC%8C+C_2%3D%5Cbegin%7Bbmatrix%7D+-R%5ETt%5C%5C+1+%5Cend%7Bbmatrix%7D\" alt=\"P_1^+= \\begin{bmatrix} K_1^{-1}\\\\ \\tilde{0}^{T} \\end{bmatrix}， C_1=\\begin{bmatrix} \\tilde{0}\\\\ 1 \\end{bmatrix}， C_2=\\begin{bmatrix} -R^Tt\\\\ 1 \\end{bmatrix}\" eeimg=\"1\"/> </p><p>于是，得到基础矩阵：</p><p><img src=\"https://www.zhihu.com/equation?tex=F%3D%28P_2C_1%29%5Ctimes%28P_2P_1%5E%2B%29%3DK_2%5E%7B-T%7DRK_1%5E%7B-T%7D%28K_1R%5ETt%29%5E%7B%5Cwedge%7D\" alt=\"F=(P_2C_1)\\times(P_2P_1^+)=K_2^{-T}RK_1^{-T}(K_1R^Tt)^{\\wedge}\" eeimg=\"1\"/> </p><p>和两个对极点：</p><p><img src=\"https://www.zhihu.com/equation?tex=e_1%3DP_1C_2%3DK_1R%5ETt%EF%BC%8Ce_2%3DP_2C_1%3DK_2t\" alt=\"e_1=P_1C_2=K_1R^Tt，e_2=P_2C_1=K_2t\" eeimg=\"1\"/> </p><p>当然，任何一个数学公式都可以由不同的方法来推导出，这里我们只介绍了这一种，MVG书中还会说到更多的关于基础矩阵的推导，这里不再说了。</p><p>至此，我们可以做个总结，代数形式上，基础矩阵就是满足如下条件的矩阵：</p><p><img src=\"https://www.zhihu.com/equation?tex=x_2%5ETFx_1%3D0\" alt=\"x_2^TFx_1=0\" eeimg=\"1\"/></p><p>这个结论是显然的。</p><h2><b>二、本质矩阵（Essential Matrix）</b></h2><p>上面的讨论中，如果两幅图像的相机标定矩阵相同 <img src=\"https://www.zhihu.com/equation?tex=K_1%3DK_2%3DK\" alt=\"K_1=K_2=K\" eeimg=\"1\"/> ，那么我们就可以抛开标定矩阵了，形式上，基础矩阵会更简洁一些。在讲相机模型的时候我们提到过<b>相机归一化平面</b>的概念，及在相机坐标系下，讲空间点的坐标除以自身的 <img src=\"https://www.zhihu.com/equation?tex=Z\" alt=\"Z\" eeimg=\"1\"/> 坐标：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+X%5C%5C+Y%5C%5C+Z%5C%5C+%5Cend%7Bbmatrix%7D%5Crightarrow+%5Cbegin%7Bbmatrix%7D+X%2FZ%5C%5C+Y%2FZ%5C%5C+1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix} X\\\\ Y\\\\ Z\\\\ \\end{bmatrix}\\rightarrow \\begin{bmatrix} X/Z\\\\ Y/Z\\\\ 1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p>然后这个归一化坐标再经由标定矩阵的作用映射到图像中的像素坐标。现在，既然已经抛开了标定矩阵（<img src=\"https://www.zhihu.com/equation?tex=K_1%3DK_2%3DK\" alt=\"K_1=K_2=K\" eeimg=\"1\"/>，已知），那么我们也就从图像上升到归一化平面来研究基础矩阵，我们记 <img src=\"https://www.zhihu.com/equation?tex=x_1%EF%BC%8Cx_2\" alt=\"x_1，x_2\" eeimg=\"1\"/> 的归一化坐标为：<img src=\"https://www.zhihu.com/equation?tex=p_1%3DK%5E%7B-1%7Dx_1%EF%BC%8Cp_2%3DK%5E%7B-1%7Dx_2\" alt=\"p_1=K^{-1}x_1，p_2=K^{-1}x_2\" eeimg=\"1\"/>，此时两个归一化平面的相机矩阵为 <img src=\"https://www.zhihu.com/equation?tex=M_1%3DK%5E%7B-1%7DP_1%3D%5BI%7C%5Ctilde%7B0%7D%5D%EF%BC%8CM_2%3DK%5E%7B-1%7DP_2%3D%5BR%7Ct%5D\" alt=\"M_1=K^{-1}P_1=[I|\\tilde{0}]，M_2=K^{-1}P_2=[R|t]\" eeimg=\"1\"/> 。则利用前面已经得到的基础矩阵形式，可以很容易地（只需要把相机内参丢掉就好）得到在归一化平面的情况下的基础矩阵：</p><p><img src=\"https://www.zhihu.com/equation?tex=F%3DR%28R%5ETt%29%5E%7B%5Cwedge%7D%3Dt%5E%7B%5Cwedge%7DR\" alt=\"F=R(R^Tt)^{\\wedge}=t^{\\wedge}R\" eeimg=\"1\"/></p><p>按惯例，我们称归一化平面的基础矩阵为<b>本质矩阵（Essential Matrix）:</b></p><p><img src=\"https://www.zhihu.com/equation?tex=E%3DR%28R%5ETt%29%5E%7B%5Cwedge%7D%3Dt%5E%7B%5Cwedge%7DR\" alt=\"E=R(R^Tt)^{\\wedge}=t^{\\wedge}R\" eeimg=\"1\"/> </p><p>前面得到的结论 <img src=\"https://www.zhihu.com/equation?tex=x_2%5ETFx_1%3D0\" alt=\"x_2^TFx_1=0\" eeimg=\"1\"/> 套用在这里可以写为 <img src=\"https://www.zhihu.com/equation?tex=p_2%5ETEp_1%3D0\" alt=\"p_2^TEp_1=0\" eeimg=\"1\"/>，并且很容易得到本质矩阵与基础矩阵之间的关系： <img src=\"https://www.zhihu.com/equation?tex=E%3DK%5E%7B-T%7DFK\" alt=\"E=K^{-T}FK\" eeimg=\"1\"/> 。</p><p>三、从基础矩阵中恢复相机矩阵</p><p>在第一节，我们给出了基础矩阵的计算公式：</p><p><img src=\"https://www.zhihu.com/equation?tex=F%3D%28P_2C_1%29%5Ctimes%28P_2P_1%5E%2B%29%3De_2%5E%7B%5Cwedge%7DP_2P_1%5E%2B\" alt=\"F=(P_2C_1)\\times(P_2P_1^+)=e_2^{\\wedge}P_2P_1^+\" eeimg=\"1\"/> </p><p>及其结论：</p><p><img src=\"https://www.zhihu.com/equation?tex=x_2%5ETFx_1%3D0\" alt=\"x_2^TFx_1=0\" eeimg=\"1\"/> </p><p>通常情况下，图像的坐标是很容易获取的，两张图像的对应点也是较容易获取的（比如ORB特征点、SIFT特征点等等），如果我们只有两张图像，手里有对应点 <img src=\"https://www.zhihu.com/equation?tex=x_1%EF%BC%8Cx_2\" alt=\"x_1，x_2\" eeimg=\"1\"/> ，那么我们可以通过一些手段计算出 <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> （基于 <img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/> 的思想，采用五点法、八点法等等，这里就不细说了。），有的时候我们对图像所对应的相机矩阵 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> 很感兴趣（比如位姿估计，这里我们暂时考虑标定矩阵 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"/> 未知），从基础矩阵的计算公式，我们可以看到对于已知的 <img src=\"https://www.zhihu.com/equation?tex=P_1%EF%BC%8CP_2\" alt=\"P_1，P_2\" eeimg=\"1\"/> ，可以唯一的计算出 <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> ，那么反过来，已知 <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/>，能否唯一地解出 <img src=\"https://www.zhihu.com/equation?tex=P_1%EF%BC%8CP_2\" alt=\"P_1，P_2\" eeimg=\"1\"/>呢？下面，我们就简单地研究一下这个问题，我们会发现，这个问题是多解的。</p><p>首先，给出结论：<b>如果H是表示3维射影变换的一个</b> <img src=\"https://www.zhihu.com/equation?tex=4%5Ctimes4\" alt=\"4\\times4\" eeimg=\"1\"/> <b>矩阵，那么对应于相机矩阵</b> <img src=\"https://www.zhihu.com/equation?tex=P_1%EF%BC%8CP_2\" alt=\"P_1，P_2\" eeimg=\"1\"/> <b>和</b> <img src=\"https://www.zhihu.com/equation?tex=P_1H%EF%BC%8CP_2H\" alt=\"P_1H，P_2H\" eeimg=\"1\"/> <b>的基础矩阵</b> <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> <b>是相同的。</b></p><p>对于上面结论，我们可以从两方面来说明。一方面， <img src=\"https://www.zhihu.com/equation?tex=x%3DPX%3D%28PH%29%28H%5E%7B-1%7DX%29\" alt=\"x=PX=(PH)(H^{-1}X)\" eeimg=\"1\"/> ，（这个 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 可以理解为世界坐标系发生了变化，这也就说明了， <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> 是不依赖于世界坐标系选取的。）所以两个相机矩阵对应同一个图像坐标，自然也就意味着这两个相机矩阵都对应于相同的基础矩阵；另一方面:<img src=\"https://www.zhihu.com/equation?tex=F%3D%28P_2C_1%29%5Ctimes%28P_2P_1%5E%2B%29%3D%28%28P_2H%29%28H%5E%7B-1%7DC_1%29%29%5Ctimes%28%28P_2H%29%28P_1H%29%5E%2B%29\" alt=\"F=(P_2C_1)\\times(P_2P_1^+)=((P_2H)(H^{-1}C_1))\\times((P_2H)(P_1H)^+)\" eeimg=\"1\"/> </p><p>也说明了这结论的正确性。我们把这个问题称之为<b>给定</b> <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> <b>后的相机矩阵射影多义性</b>。也就说说，对于一个已知的 <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> ，求解出的 <img src=\"https://www.zhihu.com/equation?tex=P_1%EF%BC%8CP_2\" alt=\"P_1，P_2\" eeimg=\"1\"/>，在<b>相差右乘一个射影变换的意义下</b>的唯一解，因此基础矩阵主要刻画了两个相机的射影关系。这也充分表明了，世界坐标系的定义并不影响 <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> 。</p><p>似乎，我们走到了死胡同。</p><p>不过，请大家想想，在V-SLAM中我们是怎么做位姿估计的？有经验的人都知道，事实上，其中的一种常用手段就是我们求解当前帧的位姿的时候，都是相当于参考帧的，求出的位姿是相对于参考帧的，即相对位姿，然后再将这个相对位姿作用在参考帧的位姿上，我们就得到了当前帧的位姿，所以，我们比较在意两帧之间的相对变换，我们并不奢求于直接给出两帧各自的位姿。那么，无论是 <img src=\"https://www.zhihu.com/equation?tex=P_1%EF%BC%8CP_2\" alt=\"P_1，P_2\" eeimg=\"1\"/>，还是<img src=\"https://www.zhihu.com/equation?tex=P_1H%EF%BC%8CP_2H\" alt=\"P_1H，P_2H\" eeimg=\"1\"/>，其相对变换 <img src=\"https://www.zhihu.com/equation?tex=%5Ctriangle+P_%7B21%7D%3DP_2P_1%5E%7B-1%7D%3DP_2H%28P_1H%29%5E%7B-1%7D\" alt=\"\\triangle P_{21}=P_2P_1^{-1}=P_2H(P_1H)^{-1}\" eeimg=\"1\"/> 都是一样的，清楚这一点是很重要的，所以，接下里，为了便于继续研究，我们不妨设定 <img src=\"https://www.zhihu.com/equation?tex=P_1%3D%5BI%7C0%5D%EF%BC%8CP_2%3D%5BA%7Ca%5D\" alt=\"P_1=[I|0]，P_2=[A|a]\" eeimg=\"1\"/> （称之为<b>规范形式的相机矩阵</b>），那么我们可以有下面的结论：</p><p><b>基本矩阵</b> <img src=\"https://www.zhihu.com/equation?tex=F\" alt=\"F\" eeimg=\"1\"/> <b>的相机矩阵可以选择为</b><img src=\"https://www.zhihu.com/equation?tex=P_1%3D%5BI%7C0%5D%EF%BC%8CP_2%3D%5Be_2%5E%7B%5Cwedge%7DF%7Ce_2%5D\" alt=\"P_1=[I|0]，P_2=[e_2^{\\wedge}F|e_2]\" eeimg=\"1\"/> 。</p><p>注意，，这里说的是“可以”，而不是唯一解。这个结论怎么来的，我们不需要在意。</p><p>如果我们知道了标定矩阵，那么我们就可以从本质矩阵出发来研究这个问题，前面已经说到，对于相机矩阵，更确切地说，相机位姿（因为我们从 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> 中拿掉 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"/> 了）：</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1%3D%5BI%7C0%5D%EF%BC%8CP_2%3D%5BR%7Ct%5D\" alt=\"P_1=[I|0]，P_2=[R|t]\" eeimg=\"1\"/></p><p>有 <img src=\"https://www.zhihu.com/equation?tex=E%3Dt%5E%7B%5Cwedge%7DR\" alt=\"E=t^{\\wedge}R\" eeimg=\"1\"/> ，然后就可以用SVD的方法来求解 <img src=\"https://www.zhihu.com/equation?tex=R%EF%BC%8Ct\" alt=\"R，t\" eeimg=\"1\"/> 了。一共有四个解：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8aa4ceb025b1d13453884ddfd4081662_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"866\" data-original=\"https://pic3.zhimg.com/v2-8aa4ceb025b1d13453884ddfd4081662_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;866&#39; height=&#39;648&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"866\" data-original=\"https://pic3.zhimg.com/v2-8aa4ceb025b1d13453884ddfd4081662_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8aa4ceb025b1d13453884ddfd4081662_b.jpg\"/></figure><p>显然，只有左上角的才是有意义的解，所以我们只需要拿一个点做测试即可选出正解。</p><p>最后，我还想再强调一下，研究问题的时候，总是做了这个规定：</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1%3D%5BI%7C0%5D%EF%BC%8CP_2%3D%5BR%7Ct%5D\" alt=\"P_1=[I|0]，P_2=[R|t]\" eeimg=\"1\"/></p><p>这其实就相当于把 <img src=\"https://www.zhihu.com/equation?tex=P_1\" alt=\"P_1\" eeimg=\"1\"/> 作为了参考帧， <img src=\"https://www.zhihu.com/equation?tex=P_2\" alt=\"P_2\" eeimg=\"1\"/> 是当前帧，其 <img src=\"https://www.zhihu.com/equation?tex=R%2Ct\" alt=\"R,t\" eeimg=\"1\"/> 都是相对于 <img src=\"https://www.zhihu.com/equation?tex=P_1\" alt=\"P_1\" eeimg=\"1\"/> 的相对变化量。并不是说 <img src=\"https://www.zhihu.com/equation?tex=P_1\" alt=\"P_1\" eeimg=\"1\"/> 就应该是长 <img src=\"https://www.zhihu.com/equation?tex=%5BI%7C0%5D\" alt=\"[I|0]\" eeimg=\"1\"/>这样子的。 </p><h2><b>三、总结</b></h2><p>这一章介绍了基础矩阵与本矩阵的概念，说得较浅，一些细节没有说到，由于不是很了解CV几何问题，如三维重建，所以不敢贸然瞎说，以免误导大家。在视觉SLAM中，基础矩阵，尤其是本质矩阵，在位姿估计中是很有用的，如果是做视觉SLAM的，个人感觉没必要了解太多，高博的《视觉SLAM十四讲》讲的这一块就足够了，而且那里的推导更简单、更清晰一些（MVG比较严谨、完整、理论，看的时候可能不可避免地会怀疑人生，然后弃坑了。）</p><p>今年ECCV_2018上有一篇文章《Deep Fundamental Matrix Estimation》，本来想读一下，然后在这对此文的方法做个总结的，但一忙起来，就没时间读这篇文章了，所以就只能留着遗憾了。</p><hr/><p>《CV中的多视图几何》这个系列就暂时完结了（这个暂时可能会是很漫长的时间），自己现在主要是在调研和跟踪object detection这个领域的发展和前沿（想过做一下这个领域的总结的，但已经有很多大佬做了总结，虽然很多总结内容都已经不够新了，没有实时更新，加之这个领域每年都有很多新工作，这要是总结起来，还是挺困难的，所以就算了），CV几何问题、V-SLAM已经脱坑（好像我连坑都没入过欸~）了，加上自身水平有限，认识较浅，所以对MVG的认识不充分，难以总结到位，因此，先这样吧~希望这些文章能对大家有所帮助吧。</p><p>最后祝每一个阅读此文的小伙伴都能发顶刊、顶会呦~~</p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "多视图几何", 
                    "tagLink": "https://api.zhihu.com/topics/20205109"
                }, 
                {
                    "tag": "同步定位与地图构建", 
                    "tagLink": "https://api.zhihu.com/topics/20688379"
                }
            ], 
            "comments": [
                {
                    "userName": "bluestyle", 
                    "userLink": "https://www.zhihu.com/people/6573fe0148f32cd9cb9a4314202d3dae", 
                    "content": "哇，竟然遇到跟我一样是泉水姐粉丝的校友（我女神真好看）", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "幸会幸会呀！", 
                            "likes": 0, 
                            "replyToAuthor": "bluestyle"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52790054", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 6, 
            "title": "《CV中的多视图几何》——再谈相机模型", 
            "content": "<p>继续说一说相机模型，这里仍旧以基本的针孔相机模型为讨论对象。前面已经讲解了针孔模型公式，图像中像素坐标 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bx%7D%3D%5Bu%2Cv%2C1%5D%5ET\" alt=\"\\text{x}=[u,v,1]^T\" eeimg=\"1\"/> 与空间点坐标 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BX%7D%3D%5BX%2CY%2CZ%2C1%5D%5ET\" alt=\"\\text{X}=[X,Y,Z,1]^T\" eeimg=\"1\"/> 之间的映射关系如下：</p><p><b>（1）</b> <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bx%7D%3DKR%5BI%7C-%5Ctilde%7BC%7D%5D%5Ctext%7BX%7D\" alt=\"\\text{x}=KR[I|-\\tilde{C}]\\text{X}\" eeimg=\"1\"/> </p><p>其中：</p><p><img src=\"https://www.zhihu.com/equation?tex=K%3D+%5Cbegin%7Bbmatrix%7D+f_x%26c%26u_0%5C%5C+0%26f_y%26v_0%5C%5C+0%260%261%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"K= \\begin{bmatrix} f_x&amp;c&amp;u_0\\\\ 0&amp;f_y&amp;v_0\\\\ 0&amp;0&amp;1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> ，称为相机的<b>标定矩阵（内参矩阵）</b>，而 <img src=\"https://www.zhihu.com/equation?tex=R%5BI%7C-%5Ctilde%7BC%7D%5D_%7B3%5Ctimes4%7D\" alt=\"R[I|-\\tilde{C}]_{3\\times4}\" eeimg=\"1\"/> 是相机的<b>外参矩阵。</b>形式上，我们记 <img src=\"https://www.zhihu.com/equation?tex=M%3DKR\" alt=\"M=KR\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=P%3DKR%5BI%7C-%5Ctilde%7BC%7D%5D\" alt=\"P=KR[I|-\\tilde{C}]\" eeimg=\"1\"/> ，则针孔相机模型的公式可以简写为：</p><p><b>（2）</b> <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bx%7D%3DP%5Ctext%7BX%7D\" alt=\"\\text{x}=P\\text{X}\" eeimg=\"1\"/> </p><p>一般的<b>射影相机模型</b>都遵循上式，即图像坐标 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bx%7D\" alt=\"\\text{x}\" eeimg=\"1\"/>与空间点坐标 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BX%7D\" alt=\"\\text{X}\" eeimg=\"1\"/> 由一个射影变换 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> 来关联。这个看起来比较简单的形式，在后面推导基本矩阵时候会常用到的。下一次就准备写MVG书中的基础矩阵那一块的，所以这次先做一些必要的铺垫。</p><h2><b>1.相机对点的作用</b></h2><p>前面在说到相机的外参时，提到过，（1）式中的 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BC%7D\" alt=\"\\tilde{C}\" eeimg=\"1\"/> 即为相机的光心在世界坐标系下的位置，我们用 <img src=\"https://www.zhihu.com/equation?tex=C\" alt=\"C\" eeimg=\"1\"/> 来表示相机的中心，显然 <img src=\"https://www.zhihu.com/equation?tex=C%3D%5Ctilde%7BC%7D\" alt=\"C=\\tilde{C}\" eeimg=\"1\"/> ，并且 <img src=\"https://www.zhihu.com/equation?tex=PC%3D0\" alt=\"PC=0\" eeimg=\"1\"/> ，因此相机中心是 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> 的一维右零空间。下面，开始说一下相机对点的作用。</p><p>对于<b>正向投影</b>，我们已经知道，一般的相机模型根据（2）式将空间中的点映射到图像平面中，所以没有什么需要多说的。但是，对于<b>反向投影</b>，情况就不一样了，再把之前的针孔相机模型图搬过来：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-be04d9d39893ab14003a7e7849ec030b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1297\" data-rawheight=\"658\" class=\"origin_image zh-lightbox-thumb\" width=\"1297\" data-original=\"https://pic4.zhimg.com/v2-be04d9d39893ab14003a7e7849ec030b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1297&#39; height=&#39;658&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1297\" data-rawheight=\"658\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1297\" data-original=\"https://pic4.zhimg.com/v2-be04d9d39893ab14003a7e7849ec030b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-be04d9d39893ab14003a7e7849ec030b_b.jpg\"/></figure><p>直观上来看，通过空间点与相机中心的连线与图像平面的交点即可确定正向投影，但是，现在反过来，如果我们已知一个图像点，那么如何去找它所对应空间点呢？很显然，根据正向投影可知，图像点所对应的空间点 处在<b>该点与相机中心的所构成的射线</b>上，该条射线上的任意点都能通过正向投影得到这个图像点，因此，我们发现，一个图像点反向投影时，得到的并不是一个点，而是一条<b>射线</b>！这点也意味着，对于单张图像，我们无法去找到一个图像点应该正确对应的那个空间点！我们必须得有额外的信息（比如再来一张其他视角的图像，利用三角测量法，或者给定该图像点的深度信息。。。等等），那么，我们就只能将问题从图像点所对应的空间点是什么转换到图像点所对应的空间点所在的射线是什么。</p><p>首先，我们知道这条射线上的两个点：<b>中心</b> <img src=\"https://www.zhihu.com/equation?tex=C%28PC%3D0%29\" alt=\"C(PC=0)\" eeimg=\"1\"/> 和点 <img src=\"https://www.zhihu.com/equation?tex=P%5E%2B%5Ctext+x+\" alt=\"P^+\\text x \" eeimg=\"1\"/> ，其中， <img src=\"https://www.zhihu.com/equation?tex=P%5E%2B\" alt=\"P^+\" eeimg=\"1\"/> 是 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> 的伪逆： <img src=\"https://www.zhihu.com/equation?tex=P%5E%2B%3DP%5ET%28PP%5ET%29%5E%7B-1%7D\" alt=\"P^+=P^T(PP^T)^{-1}\" eeimg=\"1\"/> ，满足 <img src=\"https://www.zhihu.com/equation?tex=PP%5E%2B%3DI\" alt=\"PP^+=I\" eeimg=\"1\"/> 我们可以验证点 <img src=\"https://www.zhihu.com/equation?tex=P%5E%2B%5Ctext+x+\" alt=\"P^+\\text x \" eeimg=\"1\"/>的确是图像点 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7Bx%7D\" alt=\"\\text{x}\" eeimg=\"1\"/> 的一个允许的空间点： <img src=\"https://www.zhihu.com/equation?tex=P%28P%5E%2B%5Ctext+x%29%3DP%28P%5ET%28PP%5ET%29%5E%7B-1%7D%29%5Ctext+x%3D%5Ctext+x\" alt=\"P(P^+\\text x)=P(P^T(PP^T)^{-1})\\text x=\\text x\" eeimg=\"1\"/> 。那么射线可由这两点的连接所形成：</p><p><b>（3）</b> <img src=\"https://www.zhihu.com/equation?tex=%5Ctext+X%28%5Clambda%29%3DP%5E%2B%5Ctext+x%2B%5Clambda+C\" alt=\"\\text X(\\lambda)=P^+\\text x+\\lambda C\" eeimg=\"1\"/> </p><p>这个式子在后面推导<b>基础矩阵（Fundamental Matrix）</b>时候会用到的。</p><h2><b>2.相机对直线的作用</b></h2><p>既然说了点，那就必须要说一下线了。如下图，空间中的一条直线 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\"/> 与相机中心确定一个平面 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"/> ，该平面与图像平面的交线 <img src=\"https://www.zhihu.com/equation?tex=l\" alt=\"l\" eeimg=\"1\"/> 即为直线的投影。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-aaf2ffe8157b0ffda15301aa3f94d240_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"996\" data-rawheight=\"752\" class=\"origin_image zh-lightbox-thumb\" width=\"996\" data-original=\"https://pic1.zhimg.com/v2-aaf2ffe8157b0ffda15301aa3f94d240_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;996&#39; height=&#39;752&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"996\" data-rawheight=\"752\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"996\" data-original=\"https://pic1.zhimg.com/v2-aaf2ffe8157b0ffda15301aa3f94d240_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-aaf2ffe8157b0ffda15301aa3f94d240_b.jpg\"/></figure><p>我们取直线 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\"/> 的上个点 <img src=\"https://www.zhihu.com/equation?tex=A%EF%BC%8CB\" alt=\"A，B\" eeimg=\"1\"/> ，则直线 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\"/>上任意点可写为 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BX%7D%28%5Clambda%29%3DA%2B%5Clambda+B\" alt=\"\\text{X}(\\lambda)=A+\\lambda B\" eeimg=\"1\"/> ，投影到直线 <img src=\"https://www.zhihu.com/equation?tex=l\" alt=\"l\" eeimg=\"1\"/> 上的点为：</p><p><b>（4）</b> <img src=\"https://www.zhihu.com/equation?tex=%5Ctext+x%28%5Clambda%29%3DP%28A%2B%5Clambda+B%29%3DPA%2B%5Clambda+PB+%3Da%2B%5Clambda+b\" alt=\"\\text x(\\lambda)=P(A+\\lambda B)=PA+\\lambda PB =a+\\lambda b\" eeimg=\"1\"/> </p><p>如果已知图像中直线 <img src=\"https://www.zhihu.com/equation?tex=l\" alt=\"l\" eeimg=\"1\"/> ，那么是否能确定其所对应的空间直线 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\"/> 呢？显然是不能的，因为对于平面 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"/> 上任意一条与直线 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\"/>平行的直线都能得到图像中直线 <img src=\"https://www.zhihu.com/equation?tex=l\" alt=\"l\" eeimg=\"1\"/>。相对于点反投影得到的是一条从相机中心出发的射线，那么图像中的直线反投影得到的自然就是与相机中心所构成的平面，该平面中任意一条平行于它的空间直线都可能是其所对应的空间直线。并且，该平面是 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%3DP%5ETl\" alt=\"\\pi=P^Tl\" eeimg=\"1\"/> 。因为：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext+x%5Cin+l%2C%5Ctext+X%5Cin+L%5CLeftrightarrow+l%5ET%5Ctext+x%3D0%EF%BC%8C%5Ctext+x%3DP%5Ctext+X\" alt=\"\\text x\\in l,\\text X\\in L\\Leftrightarrow l^T\\text x=0，\\text x=P\\text X\" eeimg=\"1\"/> ，故有 <img src=\"https://www.zhihu.com/equation?tex=l%5ETP%5Ctext+X%3D0\" alt=\"l^TP\\text X=0\" eeimg=\"1\"/> ，故得到平面参数：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi%5ET%5Ctext+X%3D0%5CRightarrow%5Cpi%3DP%5ETl\" alt=\"\\pi^T\\text X=0\\Rightarrow\\pi=P^Tl\" eeimg=\"1\"/> </p><hr/><p>到此，对于针孔相机模型要说的基本东西也都说的差不多了，至于相机对平面的作用、相机中心的重要性，这里暂时就不说了，若日后需要的话，会回来再加上的。下一次，会总结一下双视图几何中的一个重要概念：<b>基础矩阵（Fundamental Matrix）</b>。</p><p>最后祝每一个阅读此文的小伙伴都能发顶刊、顶会呦~~</p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "计算机视觉（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121245"
                }, 
                {
                    "tag": "多视图几何", 
                    "tagLink": "https://api.zhihu.com/topics/20205109"
                }
            ], 
            "comments": [
                {
                    "userName": "JmmmSu", 
                    "userLink": "https://www.zhihu.com/people/e4c8939dffbc6b6a21add9c521fb4d90", 
                    "content": "说好的基础矩阵呢", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "啊，在家懒惰中😂😂😂😂😂会写，会写的", 
                            "likes": 0, 
                            "replyToAuthor": "JmmmSu"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>想问一个问题，为什么射线的表达式不是(1-lambda)A + lambda*B，而是A+lambda*B呢？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "你说的那种定义就把点限制在了AB之间了，而不是整个射线上", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "我觉得不一定吧，lamdba只要取值范围可以大于1或者小于-1，就是一条射线吧？", 
                            "likes": 0, 
                            "replyToAuthor": "Kissrabbit"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52322904", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 15, 
            "title": "《CV中的多视图几何》——相机模型与标定", 
            "content": "<p>今天总结一下相机模型这一块的内容，主要内容是讲解针孔相机模型，对于仿射相机模型、无穷远相机模型不多说，用得较少，然后再说完相机模型后，会详细讲一下目前最最常用的张正友标定法。总的来说，本文主要内容如下：</p><ol><li>相机模型，主要讲解针孔相机模型；</li><li>详解针对针孔相机模型的张正友标定法；</li></ol><hr/><p>做计算机视觉，必然离不开相机，对相机不了解，如同上了战场不知道怎么放枪。所以，在一切工作的开始之前，先谈谈相机模型是必不可少的工作，我们先从最具体和最简单的相机模型即针孔相机模型开始。</p><h2><b>1.基本的针孔相机模型</b></h2><p>考虑空间中的一个点 <img src=\"https://www.zhihu.com/equation?tex=P%3D%5BX%2CY%2CZ%5D%5ET\" alt=\"P=[X,Y,Z]^T\" eeimg=\"1\"/> ，到一张平面上的中心投影，令投影中心位于一个欧式坐标系中，投影平面处在 <img src=\"https://www.zhihu.com/equation?tex=z%3Df\" alt=\"z=f\" eeimg=\"1\"/> 的位置，称之为<b>图像平面</b>或者<b>聚焦平面</b>。如图一所示，其中<b>相机中心</b>也成为<b>光心</b>，相机中心到图像平面的垂线称为相机的<b>主轴</b>或<b>主射线</b>，而主轴与图像平面的交点称为<b>主点</b>，过相机中心平行于图像平面的平面称为相机的<b>主平面</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-72523feae4a0f57bbebdd7ffb61516ca_b.jpg\" data-size=\"normal\" data-rawwidth=\"1545\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb\" width=\"1545\" data-original=\"https://pic3.zhimg.com/v2-72523feae4a0f57bbebdd7ffb61516ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1545&#39; height=&#39;772&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1545\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1545\" data-original=\"https://pic3.zhimg.com/v2-72523feae4a0f57bbebdd7ffb61516ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-72523feae4a0f57bbebdd7ffb61516ca_b.jpg\"/><figcaption>图一 针孔相机模型</figcaption></figure><p>由简单的相似三角形关系，就能得出来<b>图像平面</b>上的投影点坐标 <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Cy%5D%5ET\" alt=\"p=[x,y]^T\" eeimg=\"1\"/> 与<b>空间点坐标</b><img src=\"https://www.zhihu.com/equation?tex=P%3D%5BX%2CY%2CZ%5D%5ET\" alt=\"P=[X,Y,Z]^T\" eeimg=\"1\"/>的关系：</p><p><b>（1）</b> <img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bcases%7D+x%3DfX%2FZ%5C%5C+y%3DfY%2FZ%5C%5C+%5Cend%7Bcases%7D\" alt=\"\\begin{cases} x=fX/Z\\\\ y=fY/Z\\\\ \\end{cases}\" eeimg=\"1\"/> </p><p>将上式写成矩阵的形式：</p><p><b>（2）</b> <img src=\"https://www.zhihu.com/equation?tex=Z+%5Cbegin%7Bbmatrix%7D+x%5C%5Cy%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D%3D+%5Cbegin%7Bbmatrix%7D+f%26%26%260%5C%5C%26f%26%260%5C%5C%26%261%260%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes4%7D+%5Cbegin%7Bbmatrix%7D+X%5C%5CY%5C%5CZ%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"Z \\begin{bmatrix} x\\\\y\\\\1\\\\ \\end{bmatrix}= \\begin{bmatrix} f&amp;&amp;&amp;0\\\\&amp;f&amp;&amp;0\\\\&amp;&amp;1&amp;0\\\\ \\end{bmatrix}_{3\\times4} \\begin{bmatrix} X\\\\Y\\\\Z\\\\1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p>其中的 <img src=\"https://www.zhihu.com/equation?tex=Z\" alt=\"Z\" eeimg=\"1\"/> 很容易想到就是空间点在相机坐标系中的深度，不过，更一般的写法是可以把等式左边的 <img src=\"https://www.zhihu.com/equation?tex=Z\" alt=\"Z\" eeimg=\"1\"/> 换成一个“尺度因子” <img src=\"https://www.zhihu.com/equation?tex=s\" alt=\"s\" eeimg=\"1\"/> ，不过，在实际情况中，我们还是常常把这个尺度因子取成深度值 <img src=\"https://www.zhihu.com/equation?tex=Z\" alt=\"Z\" eeimg=\"1\"/> ，所以这里的就不采用教材中的公司符号来写了。</p><p>由于相机都是采用像素来表示图像信息的，因此需要对图像平面进行量化，即用“像素”这种量化单位来表征图像平面的信息，因此，从图像平面到像素平面之间还有一个尺度伸缩（取决于单位像素的尺寸）和平面的变换（取决于像素平面的坐标原点设定，通常采用图像的左上角作为），我们设像素坐标为 <img src=\"https://www.zhihu.com/equation?tex=%5Bu%2Cv%5D%5ET\" alt=\"[u,v]^T\" eeimg=\"1\"/> ，则具体<b>像素坐标</b>与<b>图像坐标</b>之间的关系为：</p><p><br/>（<b>3）</b><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bcases%7D+u%3D%5Calpha+x%2Bu_0%5C%5C+v%3D%5Cbeta+y%2Bv_0%5C%5C+%5Cend%7Bcases%7D\" alt=\"\\begin{cases} u=\\alpha x+u_0\\\\ v=\\beta y+v_0\\\\ \\end{cases}\" eeimg=\"1\"/></p><p>将（2）式带进去，然后再写成矩阵形式，我们就可以得到：</p><p><b>（4）</b><img src=\"https://www.zhihu.com/equation?tex=Z+%5Cbegin%7Bbmatrix%7D+u%5C%5Cv%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D%3D+%5Cbegin%7Bbmatrix%7D+%5Calpha+f%26%26u_0%260%5C%5C%26%5Cbeta+f%26v_0%260%5C%5C%26%261%260%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes4%7D+%5Cbegin%7Bbmatrix%7D+X%5C%5CY%5C%5CZ%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"Z \\begin{bmatrix} u\\\\v\\\\1\\\\ \\end{bmatrix}= \\begin{bmatrix} \\alpha f&amp;&amp;u_0&amp;0\\\\&amp;\\beta f&amp;v_0&amp;0\\\\&amp;&amp;1&amp;0\\\\ \\end{bmatrix}_{3\\times4} \\begin{bmatrix} X\\\\Y\\\\Z\\\\1\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p>设 <img src=\"https://www.zhihu.com/equation?tex=K%3D+%5Cbegin%7Bbmatrix%7D+f_x+%26%26u_0%5C%5C%26f_y+%26v_0%5C%5C%26%261%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes3%7D\" alt=\"K= \\begin{bmatrix} f_x &amp;&amp;u_0\\\\&amp;f_y &amp;v_0\\\\&amp;&amp;1\\\\ \\end{bmatrix}_{3\\times3}\" eeimg=\"1\"/> ， 这里， <img src=\"https://www.zhihu.com/equation?tex=f_x%3D%5Calpha+f%EF%BC%8Cf_y%3D%5Cbeta+f\" alt=\"f_x=\\alpha f，f_y=\\beta f\" eeimg=\"1\"/> ，称之为相机的<b>标定矩阵</b>或<b>内参矩阵</b><img src=\"https://www.zhihu.com/equation?tex=x%3D%5Bu%2Cv%5D%5ET\" alt=\"x=[u,v]^T\" eeimg=\"1\"/> ，则上式可以更简洁地写成：</p><p><b>（5）</b> <img src=\"https://www.zhihu.com/equation?tex=Zx%3DK%5BI%7C0%5DP\" alt=\"Zx=K[I|0]P\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=%5BI%7C0%5D%3D+%5Cbegin%7Bbmatrix%7D+1%260%260%260%5C%5C+0%261%260%260%5C%5C+0%260%261%260%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"[I|0]= \\begin{bmatrix} 1&amp;0&amp;0&amp;0\\\\ 0&amp;1&amp;0&amp;0\\\\ 0&amp;0&amp;1&amp;0\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里，补充个小概念：<b>归一化坐标。</b>回到（4）式，可以很容易地处理得到：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+u%5C%5Cv%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D%3D+%5Cbegin%7Bbmatrix%7D+%5Calpha+f%26%26u_0%5C%5C%26%5Cbeta+f%26v_0%5C%5C%26%261%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes3%7D+%5Cbegin%7Bbmatrix%7D+X%2FZ%5C%5CY%2FZ%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix} u\\\\v\\\\1\\\\ \\end{bmatrix}= \\begin{bmatrix} \\alpha f&amp;&amp;u_0\\\\&amp;\\beta f&amp;v_0\\\\&amp;&amp;1\\\\ \\end{bmatrix}_{3\\times3} \\begin{bmatrix} X/Z\\\\Y/Z\\\\1\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p>记 <img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%2C1%5D%5ET%3D%5BX%2FZ%2CY%2FZ%2C1%5D%5ET\" alt=\"[x,y,1]^T=[X/Z,Y/Z,1]^T\" eeimg=\"1\"/> ，其实就是前面提到的图像平面坐标，这里我们从相机坐标系来考虑，这就相当于相机坐标系 <img src=\"https://www.zhihu.com/equation?tex=Z%3D1\" alt=\"Z=1\" eeimg=\"1\"/> 平面上的点，因此，称之为<b>归一化坐标。</b>因此，整个过程大概可以描述为：<b>空间点 </b><img src=\"https://www.zhihu.com/equation?tex=%5BX%2CY%2CZ%5D%5ET\" alt=\"[X,Y,Z]^T\" eeimg=\"1\"/><b> →归一化坐标 </b><img src=\"https://www.zhihu.com/equation?tex=%5BX%2FZ%2CY%2FZ%2C1%5D%5ET\" alt=\"[X/Z,Y/Z,1]^T\" eeimg=\"1\"/><b> →像素坐标 </b><img src=\"https://www.zhihu.com/equation?tex=%5Bu%2Cv%5D%5ET\" alt=\"[u,v]^T\" eeimg=\"1\"/><b> 。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>设定由于相机坐标系通常总是运动的，所以我们更关心的是世界坐标系（固定坐标系）的空间点，而上式是从相机坐标系开始研究的，即 <img src=\"https://www.zhihu.com/equation?tex=P%3DP_c\" alt=\"P=P_c\" eeimg=\"1\"/> ，所以这中间必不可少地要涉及到从世界坐标系到相机坐标系的一个坐标系，不妨设<b>相机坐标系</b>在<b>世界坐标系</b>中的位姿矩阵 <img src=\"https://www.zhihu.com/equation?tex=T_%7Bwc%7D\" alt=\"T_{wc}\" eeimg=\"1\"/> 如下：</p><p><b>（6）</b> <img src=\"https://www.zhihu.com/equation?tex=T_%7Bwc%7D%3D%5Cbegin%7Bbmatrix%7D+R_%7B3%5Ctimes3%7D%26%5Ctilde%7BC%7D%5C%5C+0%5ET%261+%5Cend%7Bbmatrix%7D_%7B4%5Ctimes4%7D\" alt=\"T_{wc}=\\begin{bmatrix} R_{3\\times3}&amp;\\tilde{C}\\\\ 0^T&amp;1 \\end{bmatrix}_{4\\times4}\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=R_%7B3%5Ctimes3%7D\" alt=\"R_{3\\times3}\" eeimg=\"1\"/> 表示相机在世界坐标系中的姿态矩阵， <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BC%7D\" alt=\"\\tilde{C}\" eeimg=\"1\"/> 表示为相机光心在世界坐标系中的坐标，即光心相对于世界坐标系的平移量。而 <img src=\"https://www.zhihu.com/equation?tex=T_%7Bwc%7D\" alt=\"T_{wc}\" eeimg=\"1\"/> 下角标的含义如下：<img src=\"https://www.zhihu.com/equation?tex=w%3Dworld%EF%BC%8Cc%3Dcamera%EF%BC%8Cwc%3Dc%5Crightarrow+w\" alt=\"w=world，c=camera，wc=c\\rightarrow w\" eeimg=\"1\"/> </p><p>对于（6）的位姿矩阵，我们称之为相机的<b>外参矩阵</b>。</p><p>则世界坐标系中的空间点 <img src=\"https://www.zhihu.com/equation?tex=P_w\" alt=\"P_w\" eeimg=\"1\"/> 变换到相机坐标系中的点 <img src=\"https://www.zhihu.com/equation?tex=P_c\" alt=\"P_c\" eeimg=\"1\"/> 的变换公式如下：</p><p><b>（7）</b> <img src=\"https://www.zhihu.com/equation?tex=P_c%3DT_%7Bcw%7DP_w%3DT_%7Bwc%7D%5E%7B-1%7DP_w%3D+%5Cbegin%7Bbmatrix%7D+R_%7B3%5Ctimes3%7D%5ET%26-R_%7B3%5Ctimes3%7D%5ET%5Ctilde%7BC%7D%5C%5C+0%5ET%261+%5Cend%7Bbmatrix%7DP_w\" alt=\"P_c=T_{cw}P_w=T_{wc}^{-1}P_w= \\begin{bmatrix} R_{3\\times3}^T&amp;-R_{3\\times3}^T\\tilde{C}\\\\ 0^T&amp;1 \\end{bmatrix}P_w\" eeimg=\"1\"/> </p><p>很容易知道<img src=\"https://www.zhihu.com/equation?tex=R_%7B3%5Ctimes3%7D%5ET\" alt=\"R_{3\\times3}^T\" eeimg=\"1\"/>表示世界坐标系在相机坐标系中的姿态矩阵，为了形式上的方便、好看，我们就用新的<img src=\"https://www.zhihu.com/equation?tex=R_%7B3%5Ctimes3%7D\" alt=\"R_{3\\times3}\" eeimg=\"1\"/> 代替<img src=\"https://www.zhihu.com/equation?tex=R_%7B3%5Ctimes3%7D%5ET\" alt=\"R_{3\\times3}^T\" eeimg=\"1\"/>， <img src=\"https://www.zhihu.com/equation?tex=t%3D-R_%7B3%5Ctimes3%7D%5ET%5Ctilde%7BC%7D\" alt=\"t=-R_{3\\times3}^T\\tilde{C}\" eeimg=\"1\"/> ，因此，上式可以更简洁的写成：</p><p><b>（8）</b><img src=\"https://www.zhihu.com/equation?tex=P_c%3D+%5Cbegin%7Bbmatrix%7D+R_%7B3%5Ctimes3%7D%26t%5C%5C+0%5ET%261+%5Cend%7Bbmatrix%7DP_w\" alt=\"P_c= \\begin{bmatrix} R_{3\\times3}&amp;t\\\\ 0^T&amp;1 \\end{bmatrix}P_w\" eeimg=\"1\"/> </p><p>带入到（5）式中，我们便得到了 针孔相机模型的一般表达式：</p><p><b>（9）</b><img src=\"https://www.zhihu.com/equation?tex=Zx%3DKR%5BI%7C-%5Ctilde%7BC%7D%5DP_w\" alt=\"Zx=KR[I|-\\tilde{C}]P_w\" eeimg=\"1\"/><br/> </p><p>另外，对于内参矩阵 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"/> 补充一点，通常，由于相机的知道误差，图像平面很难保证XY轴是互相垂直的，因此，需要对 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"/> 增加一个系数 <img src=\"https://www.zhihu.com/equation?tex=c\" alt=\"c\" eeimg=\"1\"/> ，称之为<b>扭曲参数</b>，于是，一般的相机内参矩阵形式如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=K%3D+%5Cbegin%7Bbmatrix%7D+%5Calpha+f%26c%26u_0%5C%5C%26%5Cbeta+f%26v_0%5C%5C%26%261%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes3%7D\" alt=\"K= \\begin{bmatrix} \\alpha f&amp;c&amp;u_0\\\\&amp;\\beta f&amp;v_0\\\\&amp;&amp;1\\\\ \\end{bmatrix}_{3\\times3}\" eeimg=\"1\"/></p><p>不过大多数时候， <img src=\"https://www.zhihu.com/equation?tex=c%3D0\" alt=\"c=0\" eeimg=\"1\"/> 也足够用了。</p><h2><b>2.张正友标定法</b></h2><p>讲完了相机的针孔模型，下面就说说如何去确定相机的内参矩阵。通常，相机在出厂的时候，都会得到已经标定好的内参，但是我们在使用过程中，内参不可避免地会发生些变化，并且，使用久了的相机的内参也会与刚出厂时候有些差别了，因此，对相机的标定是计算机视觉中十分重要的一步。对于摄像机标定，有很多方法，包括传统的标定方法（需要事先做一个精确的互相垂直的3个平面）、和自标定法，这里我们详细介绍一下最常用的<b>张正友标定</b>法，相关方法都已经在OpenCV中、MatLAB中写好了，实际标定的时候可以直接调用相关的库函数。</p><p>同时，这里也推荐一遍博客，详解了如何使用OpenCV进行张正友相机标定，写得非常好</p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/dcrmg/article/details/52939318\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/dcrmg/art</span><span class=\"invisible\">icle/details/52939318</span><span class=\"ellipsis\"></span></a><p>下面，来详细讲一下张正友标定法的原理。</p><p>张正友标定法是基于针孔相机模型的，相关公式我们再写一遍：</p><p><b>（1）</b><img src=\"https://www.zhihu.com/equation?tex=Zx%3DKR%5BI%7C-%5Ctilde%7BC%7D%5DP_w\" alt=\"Zx=KR[I|-\\tilde{C}]P_w\" eeimg=\"1\"/></p><p>原文的公式形式如下：</p><p>记像素坐标为 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bm%7D%3D%5Bu%2Cv%2C1%5D%5ET\" alt=\"\\tilde{m}=[u,v,1]^T\" eeimg=\"1\"/> ，3D点坐标为 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BM%7D%3D%5BX%2CY%2CZ%2C1%5D%5ET\" alt=\"\\tilde{M}=[X,Y,Z,1]^T\" eeimg=\"1\"/> ，则上式可写为：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-58974b3f11742b8ebc75a389aff69031_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"273\" data-rawheight=\"66\" class=\"content_image\" width=\"273\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;273&#39; height=&#39;66&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"273\" data-rawheight=\"66\" class=\"content_image lazy\" width=\"273\" data-actualsrc=\"https://pic2.zhimg.com/v2-58974b3f11742b8ebc75a389aff69031_b.jpg\"/></figure><p>其中的 <img src=\"https://www.zhihu.com/equation?tex=s\" alt=\"s\" eeimg=\"1\"/> 是尺度因子，这在上面说过，之前我们直接就取了深度 <img src=\"https://www.zhihu.com/equation?tex=Z\" alt=\"Z\" eeimg=\"1\"/> ，这在实际中通常是这么做的，不过这里采用更为一般的形式来研究问题，毕竟标定过程中，我们并不知道这些点的深度是多少。姿态矩阵 <img src=\"https://www.zhihu.com/equation?tex=R\" alt=\"R\" eeimg=\"1\"/> 按列向量的形式来书写 <img src=\"https://www.zhihu.com/equation?tex=R%3D%5Br_1%2Cr_2%2Cr_3%5D\" alt=\"R=[r_1,r_2,r_3]\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 与上文提到的 <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 是一样的； <img src=\"https://www.zhihu.com/equation?tex=A\" alt=\"A\" eeimg=\"1\"/> 即相机的内参矩阵，形式如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c30a73db3d09faffc71f6aabbc8ef346_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"128\" class=\"content_image\" width=\"227\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;227&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"128\" class=\"content_image lazy\" width=\"227\" data-actualsrc=\"https://pic3.zhimg.com/v2-c30a73db3d09faffc71f6aabbc8ef346_b.jpg\"/></figure><p>其中的 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha%2C%5Cbeta\" alt=\"\\alpha,\\beta\" eeimg=\"1\"/> 即为上文给出的 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"/> 中的 <img src=\"https://www.zhihu.com/equation?tex=f_x%2Cf_y\" alt=\"f_x,f_y\" eeimg=\"1\"/> 。</p><p>张正友标定法中拍摄的图像是一个平面（比如棋盘图），为了方便，不失一般性的将世界坐标系建在了这个平面中，所以所有的空间的坐标的 <img src=\"https://www.zhihu.com/equation?tex=Z\" alt=\"Z\" eeimg=\"1\"/> 值都为0。因此，可以更简单地写为：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4295f9047fc15c143e44976cee0b2553_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb\" width=\"990\" data-original=\"https://pic4.zhimg.com/v2-4295f9047fc15c143e44976cee0b2553_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;990&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"990\" data-original=\"https://pic4.zhimg.com/v2-4295f9047fc15c143e44976cee0b2553_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4295f9047fc15c143e44976cee0b2553_b.jpg\"/></figure><p>改记 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BM%7D%3D%5BX%2CY%2C1%5D%5ET\" alt=\"\\tilde{M}=[X,Y,1]^T\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=H%3DA%5Br_1%2Cr_2%2Ct%5D_%7B3%5Ctimes3%7D\" alt=\"H=A[r_1,r_2,t]_{3\\times3}\" eeimg=\"1\"/> ，称之为<b>单应矩阵（homography）</b>，整理可有：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-40199fce20f2fd9ed70da86fa4f134d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb\" width=\"726\" data-original=\"https://pic4.zhimg.com/v2-40199fce20f2fd9ed70da86fa4f134d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;726&#39; height=&#39;76&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"726\" data-original=\"https://pic4.zhimg.com/v2-40199fce20f2fd9ed70da86fa4f134d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-40199fce20f2fd9ed70da86fa4f134d7_b.jpg\"/></figure><p>事实上，由于尺度因子 <img src=\"https://www.zhihu.com/equation?tex=s\" alt=\"s\" eeimg=\"1\"/> 的存在，导致单应矩阵 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/>存在一个尺度性，即 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 只有8个自由度，不妨记 <img src=\"https://www.zhihu.com/equation?tex=H%3D%5Bh_1%2Ch_2%2Ch_3%5D\" alt=\"H=[h_1,h_2,h_3]\" eeimg=\"1\"/> ，我们有：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2447e40fa88449e4419c2c8fb334b14c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb\" width=\"581\" data-original=\"https://pic1.zhimg.com/v2-2447e40fa88449e4419c2c8fb334b14c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;581&#39; height=&#39;70&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"70\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"581\" data-original=\"https://pic1.zhimg.com/v2-2447e40fa88449e4419c2c8fb334b14c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2447e40fa88449e4419c2c8fb334b14c_b.jpg\"/></figure><p>很显然， <img src=\"https://www.zhihu.com/equation?tex=%5Clambda%3D%5Cfrac%7B1%7D%7Bs%7D\" alt=\"\\lambda=\\frac{1}{s}\" eeimg=\"1\"/> （即把 <img src=\"https://www.zhihu.com/equation?tex=s\" alt=\"s\" eeimg=\"1\"/> 拿到了 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 中，形式上有 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bm%7D%3DH%5Ctilde%7BM%7D\" alt=\"\\tilde{m}=H\\tilde{M}\" eeimg=\"1\"/> ）。于是，可以得到下面两个关系式：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cc13dfb8bdaa9277063dc63087c89ff0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb\" width=\"538\" data-original=\"https://pic1.zhimg.com/v2-cc13dfb8bdaa9277063dc63087c89ff0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;538&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"538\" data-original=\"https://pic1.zhimg.com/v2-cc13dfb8bdaa9277063dc63087c89ff0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cc13dfb8bdaa9277063dc63087c89ff0_b.jpg\"/></figure><p>形式上，我们记：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8001817990b9a8742184c4b56b9095fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"871\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"871\" data-original=\"https://pic1.zhimg.com/v2-8001817990b9a8742184c4b56b9095fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;871&#39; height=&#39;334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"871\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"871\" data-original=\"https://pic1.zhimg.com/v2-8001817990b9a8742184c4b56b9095fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8001817990b9a8742184c4b56b9095fc_b.jpg\"/></figure><p>我们将 <img src=\"https://www.zhihu.com/equation?tex=B\" alt=\"B\" eeimg=\"1\"/> 展成一个向量（目的是为了后面构造一个便于求解的线性方程组）：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8d94193678c701329d61e68e5499b0b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"578\" data-rawheight=\"64\" class=\"origin_image zh-lightbox-thumb\" width=\"578\" data-original=\"https://pic1.zhimg.com/v2-8d94193678c701329d61e68e5499b0b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;578&#39; height=&#39;64&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"578\" data-rawheight=\"64\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"578\" data-original=\"https://pic1.zhimg.com/v2-8d94193678c701329d61e68e5499b0b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8d94193678c701329d61e68e5499b0b4_b.jpg\"/></figure><p>于是就可以将上面关于 <img src=\"https://www.zhihu.com/equation?tex=A\" alt=\"A\" eeimg=\"1\"/> 的两个方程改写为如下形式：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e788f5854ed25b0c7cb179a862f275d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"254\" data-rawheight=\"68\" class=\"content_image\" width=\"254\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;254&#39; height=&#39;68&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"254\" data-rawheight=\"68\" class=\"content_image lazy\" width=\"254\" data-actualsrc=\"https://pic2.zhimg.com/v2-e788f5854ed25b0c7cb179a862f275d1_b.jpg\"/></figure><p>其中，</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2ab4a3746ca26596cf314ea6aa7712c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"108\" class=\"origin_image zh-lightbox-thumb\" width=\"701\" data-original=\"https://pic4.zhimg.com/v2-2ab4a3746ca26596cf314ea6aa7712c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;701&#39; height=&#39;108&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"108\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"701\" data-original=\"https://pic4.zhimg.com/v2-2ab4a3746ca26596cf314ea6aa7712c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2ab4a3746ca26596cf314ea6aa7712c7_b.jpg\"/></figure><p>最终我们有了关于向量 <img src=\"https://www.zhihu.com/equation?tex=b\" alt=\"b\" eeimg=\"1\"/> 的一个方程：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d26452153c31ab8554a66cc3d15426da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"147\" data-rawheight=\"44\" class=\"content_image\" width=\"147\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;147&#39; height=&#39;44&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"147\" data-rawheight=\"44\" class=\"content_image lazy\" width=\"147\" data-actualsrc=\"https://pic3.zhimg.com/v2-d26452153c31ab8554a66cc3d15426da_b.jpg\"/></figure><p>对于这个方程的求解，就很容易了，无论是 <img src=\"https://www.zhihu.com/equation?tex=SVD\" alt=\"SVD\" eeimg=\"1\"/> 还是最小二乘法。我们观察一下上面的过程，不难发现，只要求出了 <img src=\"https://www.zhihu.com/equation?tex=b\" alt=\"b\" eeimg=\"1\"/> ，我们就能计算出相机内参和尺度因子 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"/> （而 <img src=\"https://www.zhihu.com/equation?tex=s%3D%5Cfrac%7B1%7D%7B%5Clambda%7D\" alt=\"s=\\frac{1}{\\lambda}\" eeimg=\"1\"/> ），具体公式如下：]</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-58b677b60814a6b1d9fa6cceb53216bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"711\" data-original=\"https://pic4.zhimg.com/v2-58b677b60814a6b1d9fa6cceb53216bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;711&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"711\" data-original=\"https://pic4.zhimg.com/v2-58b677b60814a6b1d9fa6cceb53216bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-58b677b60814a6b1d9fa6cceb53216bf_b.jpg\"/></figure><p>同时，有了<img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"/>，对应图像的相机外参也能计算出了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8b537c7ffc95fdb252da97ca73d07a01_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"637\" data-rawheight=\"39\" class=\"origin_image zh-lightbox-thumb\" width=\"637\" data-original=\"https://pic2.zhimg.com/v2-8b537c7ffc95fdb252da97ca73d07a01_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;637&#39; height=&#39;39&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"637\" data-rawheight=\"39\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"637\" data-original=\"https://pic2.zhimg.com/v2-8b537c7ffc95fdb252da97ca73d07a01_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8b537c7ffc95fdb252da97ca73d07a01_b.jpg\"/></figure><p>然而，到这里，就会有一个问题，想求出 <img src=\"https://www.zhihu.com/equation?tex=b\" alt=\"b\" eeimg=\"1\"/> ，得先知道 <img src=\"https://www.zhihu.com/equation?tex=V\" alt=\"V\" eeimg=\"1\"/> ，而想知道 <img src=\"https://www.zhihu.com/equation?tex=V\" alt=\"V\" eeimg=\"1\"/> ，就得先知道 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> ，对于解这个 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> ，原文的附录A给出了解决办法：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e8f72c7af8a46fc917c4f0b435f11292_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-e8f72c7af8a46fc917c4f0b435f11292_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;787&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-e8f72c7af8a46fc917c4f0b435f11292_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e8f72c7af8a46fc917c4f0b435f11292_b.jpg\"/></figure><p>即做一个图中的优化问题来估计 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> ，其中， <img src=\"https://www.zhihu.com/equation?tex=m_i\" alt=\"m_i\" eeimg=\"1\"/> 是从图像中获得的像素坐标（如棋盘图的角点），另一个 <img src=\"https://www.zhihu.com/equation?tex=m_i\" alt=\"m_i\" eeimg=\"1\"/> 上三角（打不出来这个符号，，，）是由 <img src=\"https://www.zhihu.com/equation?tex=HM_i\" alt=\"HM_i\" eeimg=\"1\"/> 来获得的， <img src=\"https://www.zhihu.com/equation?tex=M_i\" alt=\"M_i\" eeimg=\"1\"/> 是角点的空间坐标。因此，我们会发现，想解决这个优化问题，我们必须获得像素点坐标<img src=\"https://www.zhihu.com/equation?tex=m_i\" alt=\"m_i\" eeimg=\"1\"/>和对应的空间点坐标<img src=\"https://www.zhihu.com/equation?tex=M_i\" alt=\"M_i\" eeimg=\"1\"/>，因此，在使用张正友标定法时，需要量一下棋盘图格的长宽、棋盘格有多少行、多少列，为的就是能够获得角点的空间点坐标（这里就需要我们<b>保证提取棋盘图角点时能够获得棋盘图上的所有角点</b>，便于我们写个简单的算法就获得这些点的空间坐标，否则的话，这张图像就作废，换下一个），这个需要手动去量实际中所使用的棋盘图格的长宽，算是该算法的一个局限性吧。</p><p>不过，从上面获得相机内参外（重点在内参，我们对于在标定过程中计算出的相机外参并不是很关注），往往会受到噪声的影响，因此，需要做一个优化问题，来优化一下结果。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ad1a1ab41cc3572d1cdf988642caf5fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"83\" class=\"content_image\" width=\"380\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;380&#39; height=&#39;83&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"83\" class=\"content_image lazy\" width=\"380\" data-actualsrc=\"https://pic4.zhimg.com/v2-ad1a1ab41cc3572d1cdf988642caf5fb_b.jpg\"/></figure><p>对于这个优化，没有什么可说的，比如使用 <b>Levenberg-Marquardt</b>算法。</p><p>除了内参，还需要标定相机的畸变系数，张正友标定法中只考虑了影响较大的<b>径向畸变</b>，对于<b>切向畸变</b>没有考虑。我们记 <img src=\"https://www.zhihu.com/equation?tex=%28u%2Cv%29\" alt=\"(u,v)\" eeimg=\"1\"/> 为理想情况下（即不存在畸变）的像素点坐标， <img src=\"https://www.zhihu.com/equation?tex=%28%5Ctilde%7Bu%7D%2C%5Ctilde%7Bv%7D%29\" alt=\"(\\tilde{u},\\tilde{v})\" eeimg=\"1\"/> 为实际中存在畸变的像素点坐标，类似地，再记 <img src=\"https://www.zhihu.com/equation?tex=%28x%2Cy%29\" alt=\"(x,y)\" eeimg=\"1\"/> 为理想情况下（即不存在畸变）的归一化坐标， <img src=\"https://www.zhihu.com/equation?tex=%28%5Ctilde%7Bx%7D%2C%5Ctilde%7By%7D%29\" alt=\"(\\tilde{x},\\tilde{y})\" eeimg=\"1\"/> 为实际中存在畸变的归一化坐标。径向畸变的公式如下： <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bx%7D%3Dx%2Bx%5Bk_1%28x%5E2%2By%5E2%29%2Bk_2%28x%5E2%2By%5E2%29%5E2%5D\" alt=\"\\tilde{x}=x+x[k_1(x^2+y^2)+k_2(x^2+y^2)^2]\" eeimg=\"1\"/> </p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7By%7D%3Dy%2By%5Bk_1%28x%5E2%2By%5E2%29%2Bk_2%28x%5E2%2By%5E2%29%5E2%5D\" alt=\"\\tilde{y}=y+y[k_1(x^2+y^2)+k_2(x^2+y^2)^2]\" eeimg=\"1\"/></p><p>而由针孔相机模型我们又有归一化坐标和像素坐标之间的关系：</p><p><img src=\"https://www.zhihu.com/equation?tex=u%3D%5Calpha+x%2B%5Cbeta+y%2Bu_0\" alt=\"u=\\alpha x+\\beta y+u_0\" eeimg=\"1\"/> ，<img src=\"https://www.zhihu.com/equation?tex=v%3D%5Cbeta+y%2Bv_0\" alt=\"v=\\beta y+v_0\" eeimg=\"1\"/></p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bu%7D%3D%5Calpha+%5Ctilde%7Bx%7D%2B%5Cbeta+%5Ctilde%7By%7D%2Bu_0\" alt=\"\\tilde{u}=\\alpha \\tilde{x}+\\beta \\tilde{y}+u_0\" eeimg=\"1\"/>， <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bv%7D%3D%5Cbeta%5Ctilde%7By%7D%2Bv_0\" alt=\"\\tilde{v}=\\beta\\tilde{y}+v_0\" eeimg=\"1\"/> </p><p>代入上式得到：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bu%7D%3Du%2B%28u-u_0%29%5Bk_1%28x%5E2%2By%5E2%29%2Bk_2%28x%5E2%2By%5E2%29%5E2%5D\" alt=\"\\tilde{u}=u+(u-u_0)[k_1(x^2+y^2)+k_2(x^2+y^2)^2]\" eeimg=\"1\"/></p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bv%7D%3Dv%2B%28v-v_0%29%5Bk_1%28x%5E2%2By%5E2%29%2Bk_2%28x%5E2%2By%5E2%29%5E2%5D\" alt=\"\\tilde{v}=v+(v-v_0)[k_1(x^2+y^2)+k_2(x^2+y^2)^2]\" eeimg=\"1\"/></p><p>做一下形式上的处理，就可以得到下面的线性方程组：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+%28u-u_0%29%28x%5E2%2By%5E2%29%26%28u-u_0%29%28x%5E2%2By%5E2%29%5E2%5C%5C+%28v-v_0%29%28x%5E2%2By%5E2%29%26%28v-v_0%29%28x%5E2%2By%5E2%29%5E2%5C%5C+%5Cend%7Bbmatrix%7D+%5Cbegin%7Bbmatrix%7D+k_1%5C%5Ck_2%5C%5C+%5Cend%7Bbmatrix%7D%3D+%5Cbegin%7Bbmatrix%7D+%5Ctilde%7Bu%7D-u%5C%5C%5Ctilde%7Bv%7D-v%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix} (u-u_0)(x^2+y^2)&amp;(u-u_0)(x^2+y^2)^2\\\\ (v-v_0)(x^2+y^2)&amp;(v-v_0)(x^2+y^2)^2\\\\ \\end{bmatrix} \\begin{bmatrix} k_1\\\\k_2\\\\ \\end{bmatrix}= \\begin{bmatrix} \\tilde{u}-u\\\\\\tilde{v}-v\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p>对于这个方程组的求解，也没什么好说的。不过，有个细节要说一下，就是如何获取 <img src=\"https://www.zhihu.com/equation?tex=%28x%2Cy%29%2C%28u%2Cv%29%2C%28%5Ctilde%7Bu%7D%2C%5Ctilde%7Bv%7D%29\" alt=\"(x,y),(u,v),(\\tilde{u},\\tilde{v})\" eeimg=\"1\"/> ，毕竟必须知道这几个数才能解上面的方程。</p><p><b>1.</b>对于 <img src=\"https://www.zhihu.com/equation?tex=%28x%2Cy%29\" alt=\"(x,y)\" eeimg=\"1\"/> ：直接用3D空间点（上面在说计算 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 的时候已经提到了这个3D点的获取的事情）计算出归一化坐标即可；</p><p><b>2.</b>对于 <img src=\"https://www.zhihu.com/equation?tex=%28u%2Cv%29\" alt=\"(u,v)\" eeimg=\"1\"/> ：使用针孔相机模型公式（4）计算即可；</p><p><b>3.</b>对于<img src=\"https://www.zhihu.com/equation?tex=%28%5Ctilde%7Bu%7D%2C%5Ctilde%7Bv%7D%29\" alt=\"(\\tilde{u},\\tilde{v})\" eeimg=\"1\"/>：直接从图像中获得（如棋盘格的角点坐标）。</p><p>于是，畸变矫正的事情也说完了，在具体操作中，可以先在不考虑畸变的情况下，估计出相机内参，然后再用这个估计出的内参代入畸变的公式中去估计畸变系数，然后轮流优化畸变系数和内参，不过作者发现这样收敛很慢，而同时优化他们效果会更好：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dcdb5a3073804d3b1b6b8137068fb7b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"88\" class=\"origin_image zh-lightbox-thumb\" width=\"464\" data-original=\"https://pic2.zhimg.com/v2-dcdb5a3073804d3b1b6b8137068fb7b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;464&#39; height=&#39;88&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"88\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"464\" data-original=\"https://pic2.zhimg.com/v2-dcdb5a3073804d3b1b6b8137068fb7b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dcdb5a3073804d3b1b6b8137068fb7b1_b.jpg\"/></figure><p>至此，张正友标定法说完了，在实际过程中只要采集（至少）3张图即可完成标定（注意，不要有彼此平行的图像，这样会造成退化，对于此问题很好解决，拍照的时候转转相机就完事了），当然，多拍几张有助于提高标定的精度。</p><hr/><p>最后说一嘴，由于张正友标定法已经在OpenCV、MatLAB中都有相关的库函数了，所以，不需要我们自己再去造轮子了，我们只需要对这一方面的基本原理有个清晰的认识即可，没必要去亲自实现一遍，造别人已经造好的轮子，何况自己造的那轮子效果未必就能比人家的轮子好。</p><p>最后祝每一个阅读此文的小伙伴都能发顶刊、顶会呦~~<br/> </p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "计算机视觉（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121245"
                }, 
                {
                    "tag": "多视图几何", 
                    "tagLink": "https://api.zhihu.com/topics/20205109"
                }
            ], 
            "comments": [
                {
                    "userName": "Undine", 
                    "userLink": "https://www.zhihu.com/people/16a0b210cd1271d73021b3efc3b8c55f", 
                    "content": "我最近也在上这门课，好难啊🤯", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "MVG还有课？？？", 
                            "likes": 0, 
                            "replyToAuthor": "Undine"
                        }, 
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "啊！你在德国呀！加油", 
                            "likes": 0, 
                            "replyToAuthor": "Undine"
                        }
                    ]
                }, 
                {
                    "userName": "gadfly621", 
                    "userLink": "https://www.zhihu.com/people/f4301ec084690b3ae8543a5043f4d1ef", 
                    "content": "<p>最近也在看MVG,youtube 上有 Daniel Cremers的课，讲的很好</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>图像平面不是距离相机中心f的距离吗？为什么归一化平面会是图像平面？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "图象平面的定义就是你说的，我文中给的图也是这么定义的，我刚才看了一下我写的，是有句话很有歧义，带来了不必要的误会，非常感谢指出来毛病😁😁😁", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>写的非常nice，感谢分享。有个疑问，博主图一的针孔相机模型中相机坐标系的方向是否有误？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "具体是指？", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>博主的相机坐标系z轴朝前，x轴朝左，y轴向上。是否应该为：z轴朝前，x轴朝右，y轴向下。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Kissrabbit"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34761031", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 14, 
            "title": "《CV中的多视图几何》-RANSAC求解单应矩阵（homography）", 
            "content": "<p>前些日子写了一篇简介《CV中的多视图几何》-RANSAC原理的文章，这几天又费劲写了个用RANSAC来计算两张图像的单应，当作一次很好的练习。</p><p>原理是这样，我们首先找出两张图像的匹配点（我利用的是Harri角点来做匹配的，因为它的精度并不是很高，所以比较适合鲁棒问题），然后利用RANSAC方法来求解单应。大致过程如下：</p><ol><li>给定匹配点集 <img src=\"https://www.zhihu.com/equation?tex=X%3D%5Bx_%7B1%7D%2Cx_%7B2%7D%2C...%2Cx_%7BN%7D%5D_%7B3%5Ctimes+N%7D\" alt=\"X=[x_{1},x_{2},...,x_{N}]_{3\\times N}\" eeimg=\"1\"/> 和  <img src=\"https://www.zhihu.com/equation?tex=Y%3D%5By_%7B1%7D%2Cy_%7B2%7D%2C...%2Cy_%7BN%7D%5D_%7B3%5Ctimes+N%7D\" alt=\"Y=[y_{1},y_{2},...,y_{N}]_{3\\times N}\" eeimg=\"1\"/> ，其行数等于3，列数等于点的数目 <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> ，注意，这里用的是齐次坐标。因此第三行都是1；</li><li>随机选出四对匹配点（因为，最小需要4个点才能求解单应，具体可以参靠《CV中的多视图几何》第三章，讲的很清楚），对数据进行归一化（这种归一化操作要使点集的中心出处于原点，到原点的平均距离为 <img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7B2%7D\" alt=\"\\sqrt{2}\" eeimg=\"1\"/> ），然后求解出由这些归一化的匹配点得出的 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> ，然后再反解出 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 。然后就是标准的RANSAC流程，大概如下：</li><li>计算内点的数目，这里距离阈值我们采用如下表达式： <img src=\"https://www.zhihu.com/equation?tex=dist%3D%5Csqrt%7B%7C%7Cy_%7Bi%7D-Hx_%7Bi%7D%7C%7C%5E%7B2%7D_%7B2%7D%2B%7C%7Cx_%7Bi%7D-H%5E%7B-1%7Dy_%7Bi%7D%7C%7C%5E%7B2%7D_%7B2%7D%7D\" alt=\"dist=\\sqrt{||y_{i}-Hx_{i}||^{2}_{2}+||x_{i}-H^{-1}y_{i}||^{2}_{2}}\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=i%3D1%2C2%2C3...%2CN\" alt=\"i=1,2,3...,N\" eeimg=\"1\"/> </li><li>得到最多的内点后，再重新用这些内点求解 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 。</li></ol><p>其实，在我们求解 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 的过程所找到的内点，可以认为是给定的匹配点集的一次优化，在给定的精度要求下，好的匹配可以很好的满足 <img src=\"https://www.zhihu.com/equation?tex=y_%7Bi%7D%3DHx_%7Bi%7D\" alt=\"y_{i}=Hx_{i}\" eeimg=\"1\"/> ，不好的匹配，则很难保证，然后我们可以重新绘制经过优化后的匹配，也就是把原先给定的匹配点中的内点绘制出来。</p><p>下面，就给出相关代码。由于我们需要进行角点的匹配，因此，需要用到Harri角点求解，以及匹配的程序，如程序1所示。其次，再给出用四对点计算单应矩阵和用RANSAC求解单应矩阵的程序，如程序2所示。</p><p><b>程序1：</b></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">win_unicode_console</span>\n<span class=\"n\">win_unicode_console</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.ndimage</span> <span class=\"kn\">import</span> <span class=\"n\">filters</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">compute_harris_response</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;在一副灰度图像中，对每个像素计算Harris角点检测器响应函数&#34;&#34;&#34;</span>\n    <span class=\"c1\">#计算图像导数</span>\n    <span class=\"n\">img_x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,(</span><span class=\"n\">sigma</span><span class=\"p\">,</span><span class=\"n\">sigma</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">img_x</span><span class=\"p\">)</span>\n    <span class=\"n\">img_y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,(</span><span class=\"n\">sigma</span><span class=\"p\">,</span><span class=\"n\">sigma</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">img_y</span><span class=\"p\">)</span>\n    <span class=\"c1\">#计算Harris矩阵</span>\n    <span class=\"n\">Wxx</span> <span class=\"o\">=</span> <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">img_x</span><span class=\"o\">*</span><span class=\"n\">img_x</span><span class=\"p\">,</span><span class=\"n\">sigma</span><span class=\"p\">)</span>\n    <span class=\"n\">Wxy</span> <span class=\"o\">=</span> <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">img_x</span><span class=\"o\">*</span><span class=\"n\">img_y</span><span class=\"p\">,</span><span class=\"n\">sigma</span><span class=\"p\">)</span>\n    <span class=\"n\">Wyy</span> <span class=\"o\">=</span> <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">img_y</span><span class=\"o\">*</span><span class=\"n\">img_y</span><span class=\"p\">,</span><span class=\"n\">sigma</span><span class=\"p\">)</span>\n    <span class=\"c1\">#计算特征值和迹</span>\n    <span class=\"n\">Wdet</span> <span class=\"o\">=</span> <span class=\"n\">Wxx</span><span class=\"o\">*</span><span class=\"n\">Wyy</span> <span class=\"o\">-</span> <span class=\"n\">Wxy</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n    <span class=\"n\">Wtr</span> <span class=\"o\">=</span> <span class=\"n\">Wxx</span> <span class=\"o\">+</span> <span class=\"n\">Wyy</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Wdet</span><span class=\"o\">/</span><span class=\"n\">Wtr</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_harris_points</span><span class=\"p\">(</span><span class=\"n\">harrisimg</span><span class=\"p\">,</span><span class=\"n\">min_dist</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;从一幅Harris响应图中返回角点。min_dist为分割角点和图像边界的最少像素数目&#34;&#34;&#34;</span>\n    <span class=\"c1\">#寻找高于阈值的候选角点</span>\n    <span class=\"n\">corner_threshold</span> <span class=\"o\">=</span> <span class=\"n\">harrisimg</span><span class=\"o\">.</span><span class=\"nb\">max</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">threshold</span>\n    <span class=\"n\">harrisimg_t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">harrisimg</span> <span class=\"o\">&gt;</span> <span class=\"n\">corner_threshold</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">1</span>\n    <span class=\"c1\">#得到候选点的坐标</span>\n    <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">harrisimg_t</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">T</span>\n    <span class=\"c1\">#以及它们的Harris响应值</span>\n    <span class=\"n\">candidate_values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">harrisimg</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">coords</span><span class=\"p\">]</span>\n    <span class=\"c1\">#对候选点按照Harris响应值进行排序</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">candidate_values</span><span class=\"p\">)</span>\n    <span class=\"c1\">#将可行点的位置保存到数组中</span>\n    <span class=\"n\">allowed_locations</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">harrisimg</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">allowed_locations</span><span class=\"p\">[</span><span class=\"n\">min_dist</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">min_dist</span><span class=\"p\">,</span><span class=\"n\">min_dist</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">min_dist</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"c1\">#按照min_distance原则，选择最佳的Harris点</span>\n    <span class=\"n\">filtered_coords</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">index</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">allowed_locations</span><span class=\"p\">[</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">filtered_coords</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"n\">allowed_locations</span><span class=\"p\">[(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">min_dist</span><span class=\"p\">):(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">min_dist</span><span class=\"p\">),</span>\n                                <span class=\"p\">(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">min_dist</span><span class=\"p\">):(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">min_dist</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">filtered_coords</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plot_harris_points</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span><span class=\"n\">filtered_coords</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;绘制图像中检测到的角点&#34;&#34;&#34;</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">()</span>\n    <span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n    <span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">filtered_coords</span><span class=\"p\">],[</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">filtered_coords</span><span class=\"p\">],</span><span class=\"s1\">&#39;*&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_descriptors</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">filtered_coords</span><span class=\"p\">,</span> <span class=\"n\">wid</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;对于每个返回的点，返回点周围2*wid+1个像素的值（假设选取点的min_distance &gt; wid）&#34;&#34;&#34;</span>\n    <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">coords</span> <span class=\"ow\">in</span> <span class=\"n\">filtered_coords</span><span class=\"p\">:</span>\n        <span class=\"n\">patch</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">wid</span><span class=\"p\">:</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">wid</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">wid</span><span class=\"p\">:</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">wid</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n        <span class=\"n\">desc</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">patch</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">desc</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">,</span><span class=\"n\">desc2</span><span class=\"p\">,</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;对于第一幅图像中的每个角点的描述子，使用归一化互相关，选取它在第二幅图像中的匹配角点&#34;&#34;&#34;</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"c1\">#点对的距离</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">),</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">desc2</span><span class=\"p\">)))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">desc2</span><span class=\"p\">)):</span>\n            <span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">desc2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">desc2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]))</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">desc2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\n            <span class=\"n\">ncc_value</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">d1</span> <span class=\"o\">*</span> <span class=\"n\">d2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ncc_value</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ncc_value</span>\n    <span class=\"n\">ndx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"p\">)</span>\n    <span class=\"n\">matchscores</span> <span class=\"o\">=</span> <span class=\"n\">ndx</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">matchscores</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">match_twosided</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">,</span><span class=\"n\">desc2</span><span class=\"p\">,</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;两边对称版本的match&#34;&#34;&#34;</span>\n    <span class=\"n\">matches_12</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">desc1</span><span class=\"p\">,</span><span class=\"n\">desc2</span><span class=\"p\">,</span><span class=\"n\">threshold</span><span class=\"p\">)</span>\n    <span class=\"n\">matches_21</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">desc2</span><span class=\"p\">,</span><span class=\"n\">desc1</span><span class=\"p\">,</span><span class=\"n\">threshold</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ndx_12</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">matches_12</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"c1\">#去除非对称的匹配</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">ndx_12</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">matches_21</span><span class=\"p\">[</span><span class=\"n\">matches_12</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]]</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n            <span class=\"n\">matches_12</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">matches_12</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">appendimages</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;返回将两幅图像并排拼接成的一幅新图像&#34;&#34;&#34;</span>\n    <span class=\"c1\">#选取具有最少行数的图像，然后填充足够的空行</span>\n    <span class=\"n\">rows1</span> <span class=\"o\">=</span> <span class=\"n\">img1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">rows2</span> <span class=\"o\">=</span> <span class=\"n\">img2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">rows1</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows2</span><span class=\"p\">:</span>\n        <span class=\"n\">img1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">rows2</span><span class=\"o\">-</span><span class=\"n\">rows1</span><span class=\"p\">,</span><span class=\"n\">img1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))),</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">rows1</span> <span class=\"o\">&gt;</span> <span class=\"n\">rows2</span><span class=\"p\">:</span>\n        <span class=\"n\">img2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">img2</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">rows1</span><span class=\"o\">-</span><span class=\"n\">rows2</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))),</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"c1\">#如果这些情况都没有，那么他们的行数相同，不需要进行填充</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"p\">),</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plot_matches</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"p\">,</span><span class=\"n\">locs1</span><span class=\"p\">,</span><span class=\"n\">locs2</span><span class=\"p\">,</span><span class=\"n\">matchscores</span><span class=\"p\">,</span><span class=\"n\">show_below</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;显示一幅带有连接匹配之间连线的图片\n</span><span class=\"s2\">       输入：img1，img2（数组图像），locs1，locs2（特征位置），matchscores（match()的输出），\n</span><span class=\"s2\">       show_below（如果图像应该显示在匹配的下方）&#34;&#34;&#34;</span>\n    <span class=\"n\">img3</span> <span class=\"o\">=</span> <span class=\"n\">appendimages</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">show_below</span><span class=\"p\">:</span>\n        <span class=\"n\">img3</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">img3</span><span class=\"p\">,</span><span class=\"n\">img3</span><span class=\"p\">))</span> <span class=\"c1\">#np.vstack()是垂直地把数组拼接在一起</span>\n    \n    <span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">img3</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cols1</span> <span class=\"o\">=</span> <span class=\"n\">img1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">matchscores</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">m</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">locs1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">locs2</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">cols1</span><span class=\"p\">],[</span><span class=\"n\">locs1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">locs2</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]],</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span></code></pre></div><p>这些代码是之前学习《Python计算机视觉》时候，跟着书里面敲的代码（推荐这本书，可以学到一些python的基本图像处理方法，本书用的是python2，需要注意。没必要全看）。</p><p><b>程序2：</b></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">win_unicode_console</span>\n<span class=\"n\">win_unicode_console</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">H_from_points</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">,</span><span class=\"n\">tp</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;使用线性DLT方法，计算单应性矩阵H，使fp映射到tp。点自动进行归一化&#34;&#34;&#34;</span>\n    <span class=\"k\">if</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">!=</span> <span class=\"n\">tp</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;number of points do not match&#39;</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\">#对点进行归一化</span>\n    <span class=\"c1\">#---映射起始点---</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">maxstd</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mf\">1e-9</span>\n    <span class=\"n\">C1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">maxstd</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">maxstd</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">C1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">maxstd</span>\n    <span class=\"n\">C1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">maxstd</span>\n    <span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">C1</span><span class=\"p\">,</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#---映射对应点---</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">tp</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">maxstd</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">tp</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mf\">1e-9</span>\n    <span class=\"n\">C2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">maxstd</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">maxstd</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">C2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">maxstd</span>\n    <span class=\"n\">C2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">maxstd</span>\n    <span class=\"n\">tp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">C2</span><span class=\"p\">,</span><span class=\"n\">tp</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#创建用于线性方法的矩阵，对于每个对应对，在矩阵中会出现两行数值</span>\n    <span class=\"n\">nbr_correspondences</span> <span class=\"o\">=</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">nbr_correspondences</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">))</span>   <span class=\"c1\">#因为一个点能够提供两个约束</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nbr_correspondences</span><span class=\"p\">):</span>\n        <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">,:]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"o\">-</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">tp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">tp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">tp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n        <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,:]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"o\">-</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">tp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">tp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">tp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n    \n    <span class=\"n\">U</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">svd</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">V</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n    <span class=\"c1\">#反归一化</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">C2</span><span class=\"p\">),</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">C1</span><span class=\"p\">))</span>\n\n    <span class=\"c1\">#归一化，然后返回</span>\n    <span class=\"k\">return</span> <span class=\"n\">H</span> <span class=\"c1\">#/ H[2,2]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">homography</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;输入X:数据集，其中X.shape[0] = 特征的数目，X.shape[1] = 数据的数目；\n</span><span class=\"s2\">       输入Y:真值集，其中Y.shape[0] = 特征的数目，Y.shape[1] = 数据的数目；\n</span><span class=\"s2\">       输入t:模型估计的值与真值的距离阈值\n</span><span class=\"s2\">       输出：学习到的单应矩阵\n</span><span class=\"s2\">    &#34;&#34;&#34;</span>\n\n    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mf\">0.9</span><span class=\"p\">)</span>                       <span class=\"c1\">#内点数目的阈值</span>\n    <span class=\"n\">t_</span> <span class=\"o\">=</span> <span class=\"n\">t</span>                                        <span class=\"c1\">#点到生成的模型的距离阈值</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>                                       <span class=\"c1\">#外点的比例的初始估计</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mf\">0.99</span>                                      <span class=\"c1\">#选择的子集中至少有一次没有外点的概率</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>                                   <span class=\"c1\">#选择次数的初始估计，这个数给的非常大也无所谓，后面很快就降下来了</span>\n    <span class=\"n\">sample_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>                              <span class=\"c1\">#采样的次数</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>                       <span class=\"c1\">#样本的总数</span>\n    <span class=\"n\">min_points</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>                       <span class=\"c1\">#每次选取的点的数目</span>\n    <span class=\"n\">X_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">min_points</span><span class=\"p\">])</span>\n    <span class=\"n\">Y_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">min_points</span><span class=\"p\">])</span>\n    <span class=\"n\">inliers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>                                  <span class=\"c1\">#用来存放每个内点子集</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>                                    <span class=\"c1\">#inliers中最大内点子集的下标</span>\n    <span class=\"n\">max_num</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>                                  <span class=\"c1\">#inliers中最大内点子集的数目</span>\n\n    <span class=\"c1\">###开始运行ransac</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">sample_count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">randnum</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">min_points</span><span class=\"p\">)</span>   <span class=\"c1\">#随机选出min_points个点</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">min_points</span><span class=\"p\">):</span>\n            <span class=\"n\">X_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"n\">randnum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n            <span class=\"n\">Y_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"n\">randnum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n        <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">H_from_points</span><span class=\"p\">(</span><span class=\"n\">X_batch</span><span class=\"p\">,</span><span class=\"n\">Y_batch</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">###开始寻找内点</span>\n        <span class=\"n\">inliers_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>                        <span class=\"c1\">#用来存放内点的位置</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">y_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"n\">x_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"p\">)</span>\n            <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">y_</span><span class=\"o\">/</span><span class=\"n\">y_</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,:]</span>                   <span class=\"c1\">#y_/y_[-1,:]，这一步是让坐标的第三维归一化，因为是齐次坐标，下一行同理</span>\n            <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">x_</span><span class=\"o\">/</span><span class=\"n\">x_</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,:]</span>\n            <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">))</span>   <span class=\"c1\">#计算距离</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n                <span class=\"n\">inliers_index</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;length: &#39;</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_num</span><span class=\"p\">:</span>\n            <span class=\"n\">max_num</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span>          <span class=\"c1\">#更新内点的最大数目</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">sample_count</span>                  <span class=\"c1\">#更新最大内点子集的位置</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">T</span><span class=\"p\">:</span>               <span class=\"c1\">#当前采集到的内点子集的数目大于给定阈值，则说明本次估计的H足够好了，返回H</span>\n            <span class=\"k\">break</span>\n        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">inliers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span>             <span class=\"c1\">#将内点子集放入inliers中</span>\n        <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"o\">+</span><span class=\"mf\">1e-14</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"n\">min_points</span><span class=\"o\">+</span><span class=\"mf\">1e-14</span><span class=\"p\">)</span>   <span class=\"c1\">#更新选择次数N</span>\n        <span class=\"n\">sample_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;the amount of inlier_set: &#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;the max number of inlier_set: &#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]))</span>\n\n    <span class=\"c1\">###用得到的含有最多内点的子集重新估计模型</span>\n    <span class=\"n\">sub_point</span> <span class=\"o\">=</span> <span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n    <span class=\"n\">X_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])])</span>\n    <span class=\"n\">Y_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])):</span>\n        <span class=\"n\">X_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"n\">sub_point</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n        <span class=\"n\">Y_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"n\">sub_point</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">H_from_points</span><span class=\"p\">(</span><span class=\"n\">X_batch</span><span class=\"p\">,</span><span class=\"n\">Y_batch</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">X_batch</span><span class=\"p\">,</span><span class=\"n\">Y_batch</span></code></pre></div><p><b>测试程序：</b></p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">harris</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ransac</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">win_unicode_console</span>\n<span class=\"n\">win_unicode_console</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">img1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;D:/work/CV_python/000000.png&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">img2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;D:/work/CV_python/000001.png&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">wid</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n\n<span class=\"n\">harrisimg_1</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">compute_harris_response</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">)</span>             <span class=\"c1\">#计算Harris响应</span>\n<span class=\"n\">filtered_coords_1</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">get_harris_points</span><span class=\"p\">(</span><span class=\"n\">harrisimg_1</span><span class=\"p\">)</span>      <span class=\"c1\">#获取Harris角点的坐标</span>\n<span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">plot_harris_points</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span> <span class=\"n\">filtered_coords_1</span><span class=\"p\">)</span>             <span class=\"c1\">#在图像中绘制Harris角点的位置</span>\n<span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">get_descriptors</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">filtered_coords_1</span><span class=\"p\">,</span><span class=\"n\">wid</span><span class=\"p\">)</span>        <span class=\"c1\">#获取Harris角点的描述子</span>\n\n<span class=\"n\">harrisimg_2</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">compute_harris_response</span><span class=\"p\">(</span><span class=\"n\">img2</span><span class=\"p\">)</span>\n<span class=\"n\">filtered_coords_2</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">get_harris_points</span><span class=\"p\">(</span><span class=\"n\">harrisimg_2</span><span class=\"p\">)</span>\n<span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">plot_harris_points</span><span class=\"p\">(</span><span class=\"n\">img2</span><span class=\"p\">,</span> <span class=\"n\">filtered_coords_2</span><span class=\"p\">)</span>\n<span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">get_descriptors</span><span class=\"p\">(</span><span class=\"n\">img2</span><span class=\"p\">,</span><span class=\"n\">filtered_coords_2</span><span class=\"p\">,</span><span class=\"n\">wid</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;strating matching&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">match_points_coords_1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">match_points_coords_2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">)</span>   <span class=\"c1\">#获取匹配关系,这个函数得到的匹配精度不太好。如果想获得更加精确些的匹配，可以调用harris.match_twosided(d1,d2)</span>\n\n<span class=\"c1\">###获取匹配点</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">match_points_coords_1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">filtered_coords_1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"n\">match_points_coords_2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">filtered_coords_2</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">])</span>\n<span class=\"n\">points_1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">match_points_coords_1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"n\">points_2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">match_points_coords_2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n    \n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">points_1</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">points_1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])])</span>\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">points_2</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">points_2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])])</span>\n\n<span class=\"c1\">###利用这些匹配点计算两个图的单应矩阵</span>\n<span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">X_</span><span class=\"p\">,</span><span class=\"n\">Y_</span> <span class=\"o\">=</span> <span class=\"n\">ransac</span><span class=\"o\">.</span><span class=\"n\">homography</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">)</span>\n    \n<span class=\"c1\">###绘制在图片上的原始匹配</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">()</span>\n<span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">plot_matches</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"p\">,</span><span class=\"n\">filtered_coords_1</span><span class=\"p\">,</span><span class=\"n\">filtered_coords_2</span><span class=\"p\">,</span><span class=\"n\">matches</span><span class=\"p\">)</span>\n<span class=\"n\">show</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">img3</span> <span class=\"o\">=</span> <span class=\"n\">harris</span><span class=\"o\">.</span><span class=\"n\">appendimages</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">,</span><span class=\"n\">img2</span><span class=\"p\">)</span>\n<span class=\"n\">img3</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">img3</span><span class=\"p\">,</span><span class=\"n\">img3</span><span class=\"p\">))</span> <span class=\"c1\">#np.vstack()是垂直地把数组拼接在一起</span>\n<span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">img3</span><span class=\"p\">)</span>\n<span class=\"c1\">###绘制经过优化后的匹配</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X_</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n    <span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">X_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">Y_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">img1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]],[</span><span class=\"n\">X_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">Y_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]],</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">show</span><span class=\"p\">()</span></code></pre></div><p>运行结果：</p><p>图1的角点：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ab00bcd34b007fe490c961358ecc0378_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"1109\" data-original=\"https://pic1.zhimg.com/v2-ab00bcd34b007fe490c961358ecc0378_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1109&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1109\" data-original=\"https://pic1.zhimg.com/v2-ab00bcd34b007fe490c961358ecc0378_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ab00bcd34b007fe490c961358ecc0378_b.jpg\"/></figure><p>图2的角点：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bed9c8762d1c4aeba0129dc1bd577194_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb\" width=\"1109\" data-original=\"https://pic1.zhimg.com/v2-bed9c8762d1c4aeba0129dc1bd577194_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1109&#39; height=&#39;290&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1109\" data-original=\"https://pic1.zhimg.com/v2-bed9c8762d1c4aeba0129dc1bd577194_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bed9c8762d1c4aeba0129dc1bd577194_b.jpg\"/></figure><p>原始匹配：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f54d2b396814598aaa2e1d1f1c6ffd7e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1116\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb\" width=\"1116\" data-original=\"https://pic3.zhimg.com/v2-f54d2b396814598aaa2e1d1f1c6ffd7e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1116&#39; height=&#39;315&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1116\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1116\" data-original=\"https://pic3.zhimg.com/v2-f54d2b396814598aaa2e1d1f1c6ffd7e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f54d2b396814598aaa2e1d1f1c6ffd7e_b.jpg\"/></figure><p>优化后的匹配：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d041bcb194ca86e9e15a093b425e26c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1112\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"1112\" data-original=\"https://pic3.zhimg.com/v2-d041bcb194ca86e9e15a093b425e26c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1112&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1112\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1112\" data-original=\"https://pic3.zhimg.com/v2-d041bcb194ca86e9e15a093b425e26c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d041bcb194ca86e9e15a093b425e26c2_b.jpg\"/></figure><p>计算出的单应矩阵：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b1defbed32857ac29d396dab848c20cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"68\" class=\"origin_image zh-lightbox-thumb\" width=\"491\" data-original=\"https://pic1.zhimg.com/v2-b1defbed32857ac29d396dab848c20cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;491&#39; height=&#39;68&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"68\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"491\" data-original=\"https://pic1.zhimg.com/v2-b1defbed32857ac29d396dab848c20cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b1defbed32857ac29d396dab848c20cc_b.jpg\"/></figure><p><b>讨论：</b></p><p>说实话,优化的结果也不是很好。因为一开始给的匹配就不是多么好的匹配，如果匹配精度比较好的化，优化的结果也会好一些。所以，就当作是一次应用演示吧，总归是有些收获的。另外，在调用函数：</p><div class=\"highlight\"><pre><code class=\"language-text\">H,X_,Y_ = ransac.homography(X,Y,10)</code></pre></div><p>其中参数10是距离阈值，不过，说实话，我对于书中的距离阈值如何具体去选择，还是有些不太明白，所以这里10是我自己给的，所以有些不太好，距离阈值对于求解单应、优化匹配的时候也是很重要。希望大佬能指点一下！</p><hr/><p>RANSAC这一块就可以翻过去了，继续往后啃了。。。。。。前途一片黑暗</p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "计算机视觉（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121245"
                }
            ], 
            "comments": [
                {
                    "userName": "王尔玉", 
                    "userLink": "https://www.zhihu.com/people/72adbd1ddbf164d36c0b6eb5eabf0095", 
                    "content": "你的H不normalize到H22=1上吗", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "<p>有的时候令H22=1不是一个好选择，尤其是求出的H22很小的话，再归一化到H22=1，那么就会导致其他的数很大，容易病态，MVG的手中也说到了这一点。另外，我是在没有设定H22=1的情况下去求解H，这样求出的H可以保证两张图像的每个对应像素都能够满足这个H的映射，所以我要是再做H22=1的归一化就不妥了。除非我是先令H22=1，然后再去求解H，就没事了，所以我说这个不是必要的，但的确是一个常用的手段。😁</p>", 
                            "likes": 0, 
                            "replyToAuthor": "王尔玉"
                        }, 
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "<p>具体的你可以去看一下我写的《CV中的多视图几何》-图像之间的单应变换，提到了两个求解方法，一个就是你说的，约束H22=1，另一个就是我说的这种，直接基于SVD或者最小二乘做优化，两个方法都是常用的手段</p>", 
                            "likes": 0, 
                            "replyToAuthor": "王尔玉"
                        }
                    ]
                }, 
                {
                    "userName": "Kissrabbit", 
                    "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                    "content": "<p>这不是必要的。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "向东", 
                    "userLink": "https://www.zhihu.com/people/ff598bc490ae937fc80ba1af4d686924", 
                    "content": "<p>距离阈值能不能小于1？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "也不是不可以，阈值这东西都是经验得到的", 
                            "likes": 0, 
                            "replyToAuthor": "向东"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/34676804", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 38, 
            "title": "《CV中的多视图几何》-RANSAC", 
            "content": "<p>最近一直在啃《多视图几何》，厚厚的一本，不知何年何月能啃完，然而大神们都已经啃了好几次了，惭愧惭愧。。。。。。</p><p>前几天读完了RANSAC那一章节，对这个鲁棒算法还是很感兴趣的，第一次见到这个算法还是在高博的《SLAM十四讲》中的代码看到的。。。那时候也不知道这是个什么玩意，后来在给导师翻译文章的时候遇到了这个算法的介绍，算是了解了一点点，直到看完了多视图几何中所讲的RANSAC，才算是理出了一些头绪。在知乎上也看了很多大佬的文章，加深了理解，自己也想写点文章，作为学习笔记，同时也希望能对初学者有一些帮助吧。</p><p>RANSAC，随机采样一致性，是一种鲁棒算法。我们以直线拟合作为例子，在拟合一条直线时，我们最常用，最先想到的，肯定是最小二乘法了，简单又实用！简单地说一下最小二乘法，以拟合直线为例子。</p><p>记 <img src=\"https://www.zhihu.com/equation?tex=Y%3DHX\" alt=\"Y=HX\" eeimg=\"1\"/> ，其中， <img src=\"https://www.zhihu.com/equation?tex=Y%3D%5Cleft%5B+y_%7B1%7D%2C+y_%7B2%7D%2Cy_%7B3%7D%2C...%2Cy_%7Bn%7D%5Cright%5D_%7B1%5Ctimes+n%7D\" alt=\"Y=\\left[ y_{1}, y_{2},y_{3},...,y_{n}\\right]_{1\\times n}\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=H%3D%5Cleft%5B+h_%7B1%7D%2Ch_%7B2%7D+%5Cright%5D_%7B1%5Ctimes2%7D\" alt=\"H=\\left[ h_{1},h_{2} \\right]_{1\\times2}\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=X%3D%5Cleft%5B+x_%7B1%7D+%2C+x_%7B2%7D+%2C...%2C+x_%7Bn%7D+%5Cright%5D_%7B2%5Ctimes+n%7D\" alt=\"X=\\left[ x_{1} , x_{2} ,..., x_{n} \\right]_{2\\times n}\" eeimg=\"1\"/> ，其中， <img src=\"https://www.zhihu.com/equation?tex=x_%7Bi%7D%3D%5Cleft%5B+x%5E%7B%28i%29%7D%2C1%5Cright%5D_%7B2%5Ctimes+n%7D%5E%7BT%7D\" alt=\"x_{i}=\\left[ x^{(i)},1\\right]_{2\\times n}^{T}\" eeimg=\"1\"/> 。</p><p>常用的代价函数就是 <img src=\"https://www.zhihu.com/equation?tex=L_%7B2%7D\" alt=\"L_{2}\" eeimg=\"1\"/> 代价函数：</p><p><img src=\"https://www.zhihu.com/equation?tex=J%3D%5Cfrac%7B1%7D%7B2%7D%7C%7CY-HX%7C%7C_%7B2%7D%5E%7B2%7D%3D%5Cfrac%7B1%7D%7B2%7D%5Cleft%28+Y-HX+%5Cright%29%5E%7BT%7D%28+Y-HX+%29\" alt=\"J=\\frac{1}{2}||Y-HX||_{2}^{2}=\\frac{1}{2}\\left( Y-HX \\right)^{T}( Y-HX )\" eeimg=\"1\"/> </p><p>很容易算出来，在我的这种矩阵形式的下（也就说，矩阵 <img src=\"https://www.zhihu.com/equation?tex=X%EF%BC%8CY\" alt=\"X，Y\" eeimg=\"1\"/> 的定义形式不同，比如把 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 的行数定义为点的总数，列数为特征的数目，解的形式也会有形式上的差异），解析解为：</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3DYX%5E%7BT%7D%28XX%5E%7BT%7D%29%5E%7B-1%7D\" alt=\"H=YX^{T}(XX^{T})^{-1}\" eeimg=\"1\"/> </p><p>所以，只要给定数据集，我们套用上面的公式很容易就算出来最小二乘解，但是，当数据中有一些很大的噪声，导致个别点偏离正确模型非常远时（将这种点称为“外点（outliers）”）,会导致我们的最小二乘解会偏向这些外点，从而失去了精度，比如，下面这个图的情况：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6d5ba6b866556fe43bef5e2ba915ff6a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb\" width=\"555\" data-original=\"https://pic3.zhimg.com/v2-6d5ba6b866556fe43bef5e2ba915ff6a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;555&#39; height=&#39;416&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"416\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"555\" data-original=\"https://pic3.zhimg.com/v2-6d5ba6b866556fe43bef5e2ba915ff6a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6d5ba6b866556fe43bef5e2ba915ff6a_b.jpg\"/></figure><p>其中，绿线是用最小二乘估计出来的，红线为真解。</p><p>因此，在存在外点的情况下，最小二乘法往往很容易失去精度。这个时候，我们就要采用鲁棒代价函数，来尽可能地减小外点的干扰。如Huber函数，还有本文要讲的RANSAC。下面，我们就来看什么是RANSAC。</p><p><b>RANSAC的基本思路：</b></p><p><b>（1）</b>.从数据中采集最小子集（最小子集的大小由所研究的问题决定，如拟合直线，则最小子集数目为2，因为两点确定一条直线），然后用这个最小子集拟合一条直线 <img src=\"https://www.zhihu.com/equation?tex=l_%7Bi%7D\" alt=\"l_{i}\" eeimg=\"1\"/> （得到 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> ）；</p><p><b>（2）</b>.计算每个点到直线 <img src=\"https://www.zhihu.com/equation?tex=l_%7B1%7D\" alt=\"l_{1}\" eeimg=\"1\"/> 的距离 <img src=\"https://www.zhihu.com/equation?tex=d_%7B%5Cbot%7D\" alt=\"d_{\\bot}\" eeimg=\"1\"/> （在拟合直线的情况下，我采用的是点 <img src=\"https://www.zhihu.com/equation?tex=x_%7Bi%7D\" alt=\"x_{i}\" eeimg=\"1\"/> 通过 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> 得到的 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7By_%7Bi%7D%7D%3D%5Ctilde%7BH%7Dx_%7Bi%7D\" alt=\"\\tilde{y_{i}}=\\tilde{H}x_{i}\" eeimg=\"1\"/> 与真值的差的绝对值 <img src=\"https://www.zhihu.com/equation?tex=%7Cy_%7Bi%7D-%5Ctilde%7By_%7Bi%7D%7D%7C\" alt=\"|y_{i}-\\tilde{y_{i}}|\" eeimg=\"1\"/> ），如果 <img src=\"https://www.zhihu.com/equation?tex=d_%7B%5Cbot%7D%3Ct\" alt=\"d_{\\bot}&lt;t\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 是距离阈值，则记为“内点（inlier）”。统计本次得到的内点的数目 <img src=\"https://www.zhihu.com/equation?tex=n_%7Bi%7D\" alt=\"n_{i}\" eeimg=\"1\"/> 。如果 <img src=\"https://www.zhihu.com/equation?tex=n_%7Bi%7D%3ET\" alt=\"n_{i}&gt;T\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 是内点数目阈值，则说明当前所估计的 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> 足够好，利用这些内点再重新估计<img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> ，然后返回 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/>  ，退出。否则返回（1）继续执行。</p><p>不停地重复上面两步，直到估计的 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> 可以得到最大的内点数，然后利用这些内点再重新估计<img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/> 即可。但有一个问题还没有解决，那就是我们究竟需要重复上面步骤多少次？即采集多少次子集？一种最直观的想法就是遍历数据中的所有点，这固然是一个容易想到的方法，但是，如果数据集非常大，则这种方法就是非常费时间的了，效率会变低。为了解决这个问题，给出了这样的一个公式，用来决定需要采样次数 <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> ：</p><p><img src=\"https://www.zhihu.com/equation?tex=N%3Dlog%281-p%29%2Flog%281-%281-%5Cvarepsilon%29%5E%7BS%7D%29\" alt=\"N=log(1-p)/log(1-(1-\\varepsilon)^{S})\" eeimg=\"1\"/> </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 子集的大小， <img src=\"https://www.zhihu.com/equation?tex=p+\" alt=\"p \" eeimg=\"1\"/> 表示由 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> 个点组成的随机样本中至少有一次没有外点的概率，通常取 <img src=\"https://www.zhihu.com/equation?tex=p%3D0.99\" alt=\"p=0.99\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=%5Cvarepsilon\" alt=\"\\varepsilon\" eeimg=\"1\"/> 表示数据集中出现外点的概率（我们可以用数据集中外点所占数据集的比例来近似）。有了这个公式我们就可以估计出我们需要采样多少次了。</p><p>然而，这就又引出了另一个问题—— <img src=\"https://www.zhihu.com/equation?tex=%5Cvarepsilon\" alt=\"\\varepsilon\" eeimg=\"1\"/> 我们不知道啊！通常我们并不知道我们的数据集中有多少个外点。所以，这就引出了<b>自适应决定采样次数</b>版本的RANSAC：</p><ul><li><img src=\"https://www.zhihu.com/equation?tex=N%3D%5Cinfty\" alt=\"N=\\infty\" eeimg=\"1\"/> （或者取100000，总之很大就行），sample_count = 0</li><li>当sample_count&lt; <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> </li></ul><ol><li><i>选取一个样本，估计 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/>，并计算内点数。若内点数大于阈值，则利用这些内点重新估计 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/>，然后返回 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/>，终止。</i></li><li><i>令 <img src=\"https://www.zhihu.com/equation?tex=%5Cvarepsilon\" alt=\"\\varepsilon\" eeimg=\"1\"/> = <img src=\"https://www.zhihu.com/equation?tex=1-\" alt=\"1-\" eeimg=\"1\"/> （内点数）/（总点数）</i></li><li><i>取 <img src=\"https://www.zhihu.com/equation?tex=p%3D0.99\" alt=\"p=0.99\" eeimg=\"1\"/> ，由 <img src=\"https://www.zhihu.com/equation?tex=N%3Dlog%281-p%29%2Flog%281-%281-%5Cvarepsilon%29%5E%7BS%7D%29\" alt=\"N=log(1-p)/log(1-(1-\\varepsilon)^{S})\" eeimg=\"1\"/> ，求出 <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/></i> </li><li><i>sample_count++</i></li></ol><ul><li>用得到的最多的内点，重新估计 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7BH%7D\" alt=\"\\tilde{H}\" eeimg=\"1\"/>，然后返回，终止。</li></ul><p>以上就是RANSAC的算法的基本介绍了。总而言之，RANSAC的核心思想在于<b>从带有外点的数据中尽可能地找出所有的内点，然后利用内点来拟合出最佳的模型</b>。</p><p>下面，给出我自己用python写的RANSAC算法的实现，以及小例子（本人代码功底堪忧，没啥风格，望大佬轻喷/(ㄒoㄒ)/~~）</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">win_unicode_console</span>\n<span class=\"n\">win_unicode_console</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">curve_fitting</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"s2\">&#34;&#34;&#34;输入X:数据集，其中X.shape[0] = 特征的数目，X.shape[1] = 数据的数目；\n</span><span class=\"s2\">       输入Y:真值集，其中Y.shape[0] = 特征的数目，Y.shape[1] = 数据的数目；\n</span><span class=\"s2\">       输入t:模型估计的值与真值的距离\n</span><span class=\"s2\">       输出：学习到的参数矩阵\n</span><span class=\"s2\">    &#34;&#34;&#34;</span>\n    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mf\">0.9</span><span class=\"p\">)</span>                       <span class=\"c1\">#内点数目的阈值</span>\n    <span class=\"n\">t_</span> <span class=\"o\">=</span> <span class=\"n\">t</span>                                        <span class=\"c1\">#点到生成的模型的距离阈值</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>                                       <span class=\"c1\">#外点的比例的初始估计</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mf\">0.99</span>                                      <span class=\"c1\">#选择的子集中至少有一次没有外点的概率</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>                                   <span class=\"c1\">#选择次数的初始估计，这个数给的非常大也无所谓，后面很快就降下来了</span>\n    <span class=\"n\">sample_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>                              <span class=\"c1\">#采样的次数</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>                       <span class=\"c1\">#样本的总数</span>\n    <span class=\"n\">min_points</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>                       <span class=\"c1\">#每次选取的点的数目</span>\n    <span class=\"n\">X_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">min_points</span><span class=\"p\">])</span>\n    <span class=\"n\">Y_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">min_points</span><span class=\"p\">])</span>\n    <span class=\"n\">inliers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>                                  <span class=\"c1\">#用来存放每个内点子集</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>                                    <span class=\"c1\">#inliers中最大内点子集的下标</span>\n    <span class=\"n\">max_num</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>                                  <span class=\"c1\">#inliers中最大内点子集的数目</span>\n\n    <span class=\"c1\">###开始运行ransac</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">sample_count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">randnum</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">min_points</span><span class=\"p\">)</span>   <span class=\"c1\">#随机选出min_points个点</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">min_points</span><span class=\"p\">):</span>\n            <span class=\"n\">X_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"n\">randnum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n            <span class=\"n\">Y_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"n\">randnum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n        <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">Y_batch</span><span class=\"p\">,</span><span class=\"n\">X_batch</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n        <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">X_batch</span><span class=\"p\">,</span><span class=\"n\">X_batch</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n        <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n        <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">C</span><span class=\"p\">)</span>                           <span class=\"c1\">#得到的H估计</span>\n\n        <span class=\"c1\">###开始寻找内点</span>\n        <span class=\"n\">inliers_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>                        <span class=\"c1\">#用来存放内点的位置</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">])</span>        <span class=\"c1\">#计算模型估计出的值与真值的距离</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n                <span class=\"n\">inliers_index</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;length: &#39;</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_num</span><span class=\"p\">:</span>\n            <span class=\"n\">max_num</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span>          <span class=\"c1\">#更新内点的最大数目</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">sample_count</span>                  <span class=\"c1\">#更新最大内点子集的位置</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">T</span><span class=\"p\">:</span>               <span class=\"c1\">#当前采集到的内点子集的数目大于给定阈值，则说明本次估计的H足够好了，返回H</span>\n            <span class=\"n\">inliers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">inliers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">inliers_index</span><span class=\"p\">)</span>             <span class=\"c1\">#将内点子集放入inliers中</span>\n        <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"o\">+</span><span class=\"mf\">1e-14</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"n\">min_points</span><span class=\"o\">+</span><span class=\"mf\">1e-14</span><span class=\"p\">)</span>   <span class=\"c1\">#更新选择次数N</span>\n        <span class=\"n\">sample_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;the amount of inlier_set: &#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;the max number of inlier_set: &#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]))</span>\n\n    <span class=\"c1\">###用得到的含有最多内点的子集重新估计模型</span>\n    <span class=\"n\">sub_point</span> <span class=\"o\">=</span> <span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n    <span class=\"n\">X_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])])</span>\n    <span class=\"n\">Y_batch</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">inliers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])):</span>\n        <span class=\"n\">X_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"n\">sub_point</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n        <span class=\"n\">Y_batch</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"n\">sub_point</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n    <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">Y_batch</span><span class=\"p\">,</span><span class=\"n\">X_batch</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">X_batch</span><span class=\"p\">,</span><span class=\"n\">X_batch</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">C</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">H</span>\n   \n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"c1\">###构造数据集</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">X_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])])</span>  <span class=\"c1\">#这一步的目的是将形如Y = HX+B整合为形如Y=HX的等价形式</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]])</span>                                      <span class=\"c1\">###真实的模型</span>\n    <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">X_</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>          <span class=\"c1\">#Y = HX_</span>\n    \n    <span class=\"c1\">###构造外点</span>\n    <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">100</span>\n\n    <span class=\"n\">H_estimation</span> <span class=\"o\">=</span> <span class=\"n\">curve_fitting</span><span class=\"p\">(</span><span class=\"n\">X_</span><span class=\"p\">,</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Estimation: &#39;</span><span class=\"p\">,</span> <span class=\"n\">H_estimation</span><span class=\"p\">)</span>\n    <span class=\"n\">Y_estimation</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">H_estimation</span><span class=\"p\">,</span><span class=\"n\">X_</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#用最小二乘直接估计</span>\n    <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"n\">X_</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">X_</span><span class=\"p\">,</span><span class=\"n\">X_</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n    <span class=\"n\">H_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">C</span><span class=\"p\">)</span>\n    <span class=\"n\">Y_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">H_</span><span class=\"p\">,</span><span class=\"n\">X_</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">###绘制图像</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>                    <span class=\"c1\">#真实值</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">Y_estimation</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>        <span class=\"c1\">#RANSAC估计得到的H</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">Y_</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"s1\">&#39;g&#39;</span><span class=\"p\">)</span>                  <span class=\"c1\">#最小二乘法得到的H</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n    \n    </code></pre></div><p>运行结果如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f66d5540a1a121a6b06d0d3ccba91a95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"538\" data-original=\"https://pic2.zhimg.com/v2-f66d5540a1a121a6b06d0d3ccba91a95_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;538&#39; height=&#39;414&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"538\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"538\" data-original=\"https://pic2.zhimg.com/v2-f66d5540a1a121a6b06d0d3ccba91a95_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f66d5540a1a121a6b06d0d3ccba91a95_b.jpg\"/></figure><p><b>补充</b>： <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> 初始取得非常大，这个不需要在意，只是一个估计，后面非常快地就会变成两位数。</p><p>第一次写知乎文章，写的不好，还望见谅。。。。。。希望能对大家有所帮助吧！共同进步O(∩_∩)O</p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "计算机视觉（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121245"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>算是写的很通俗了，最近也在看这方面的，希望能共同进步</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "<p>加油，(ง •_•)ง这书真难啃</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "gadfly621", 
                    "userLink": "https://www.zhihu.com/people/f4301ec084690b3ae8543a5043f4d1ef", 
                    "content": "<p>写的很好，很通俗，谢谢楼主,MVG这书确实难啃;另外代码有点小bug if len(inliers_index) &gt;= T:  和break 之间应该加入 inliers.append(inliers_index)；</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "嗯嗯，谢谢指出问题(*°∀°)=3", 
                            "likes": 0, 
                            "replyToAuthor": "gadfly621"
                        }
                    ]
                }, 
                {
                    "userName": "Undine", 
                    "userLink": "https://www.zhihu.com/people/16a0b210cd1271d73021b3efc3b8c55f", 
                    "content": "你看的是英文版还是中文版呀[可怜]", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "中文的呀", 
                            "likes": 0, 
                            "replyToAuthor": "Undine"
                        }
                    ]
                }, 
                {
                    "userName": "无偏估计", 
                    "userLink": "https://www.zhihu.com/people/65fed728cdde9255ef0a21acccd5380e", 
                    "content": "<p>点个赞！老哥！</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "<p>非常感谢~</p><a class=\"comment_sticker\" href=\"https://pic3.zhimg.com/v2-cb8443f07a41298e45191cef11b90fd2.gif\" data-width=\"\" data-height=\"\">[干杯]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "无偏估计"
                        }
                    ]
                }, 
                {
                    "userName": "小心鹅卵石", 
                    "userLink": "https://www.zhihu.com/people/90a6204a54b97f0cbc4f507729fbb35c", 
                    "content": "加油，现在还是用的现成的代码", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "嗯嗯，谢谢！！能用现成的还是用现成的，官方实现的肯定要比咱们自己写的效率高。哈哈(ಡωಡ)hiahiahia~不过自己实现一下可以加深印象", 
                            "likes": 0, 
                            "replyToAuthor": "小心鹅卵石"
                        }
                    ]
                }, 
                {
                    "userName": "世界那么大", 
                    "userLink": "https://www.zhihu.com/people/1b14c84a0a809c92de5be086f493a49b", 
                    "content": "很好呀，加油", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "谢谢(*°∀°)=3", 
                            "likes": 0, 
                            "replyToAuthor": "世界那么大"
                        }
                    ]
                }, 
                {
                    "userName": "策成风", 
                    "userLink": "https://www.zhihu.com/people/d264f733cf1b736cbf2dd9928427a549", 
                    "content": "很棒", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "谢谢(*°∀°)=3", 
                            "likes": 0, 
                            "replyToAuthor": "策成风"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52023208", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 18, 
            "title": "《CV中的多视图几何》——图像之间的单应变换", 
            "content": "<p>图像之间的单应变换主要研究的就是<b>如何将一张图像中的点都映射到另一张图像去（同时还保证共线的点仍然共线）</b>。举个很常见的例子，我有一张自拍，但无奈自己太丑了，所以我想把WYZ的头P上去（这里我们不去考虑各种P图软件，而是从原理的层次上去想这个问题），最直观的做法就是将一张WYZ的图像中脸部的每个像素都映射到我的脸上去，像下面的图这样：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bb8a69cfc0a3c47c2e9bc1eccaaa2b6f_b.jpg\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"553\" data-original=\"https://pic4.zhimg.com/v2-bb8a69cfc0a3c47c2e9bc1eccaaa2b6f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;553&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"553\" data-original=\"https://pic4.zhimg.com/v2-bb8a69cfc0a3c47c2e9bc1eccaaa2b6f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bb8a69cfc0a3c47c2e9bc1eccaaa2b6f_b.jpg\"/><figcaption>原谅我图画的实在有些瘆得慌</figcaption></figure><p>那么我们该怎么做呢？</p><p>这里就引出了图像之间的单应变换的概念——只要我能确定一个映射关系，然后作用到WYZ脸上的每个像素上去，将其映射到我的脸上，这样就实现了将一张帅气的脸成功P到了我的脸上。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4b321563418190e6fa484a78ff2d92e0_b.jpg\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"552\" data-original=\"https://pic1.zhimg.com/v2-4b321563418190e6fa484a78ff2d92e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;552&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"552\" data-original=\"https://pic1.zhimg.com/v2-4b321563418190e6fa484a78ff2d92e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4b321563418190e6fa484a78ff2d92e0_b.jpg\"/><figcaption>图中的H就是这样的一个变换</figcaption></figure><p>上图中的H就是我们要找的<b>单应变换</b>。简而言之，单应变换其实就是给出了任意两张图像中，像素之间的映射关系，其作用之一就是便于我们将一张图像P到另一张图像上去（当热，还有更多的其他应用），这里，我们并不在乎这两个图像是不是来自于一个相机（所以与相机的内参无关），我们也不在乎两个图像是不是一样大，只要是两个图像就可以，所以，这里的<b>单应变换</b>是一个很宽泛的概念，这与3D-2D中的单应变换不一样（有视觉SLAM基础或者三维重建基础的同学一定清楚这二者之间的区别）。</p><h2><b>1.单应变换、直接线性变换算法（DLT）</b></h2><p>给定两张图像， <img src=\"https://www.zhihu.com/equation?tex=I_1\" alt=\"I_1\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=I_2\" alt=\"I_2\" eeimg=\"1\"/> ，其中， <img src=\"https://www.zhihu.com/equation?tex=I_1\" alt=\"I_1\" eeimg=\"1\"/> 中有一像素点 <img src=\"https://www.zhihu.com/equation?tex=p_1%3D%5Bx_1%2Cy_1%2C1%5D%5ET\" alt=\"p_1=[x_1,y_1,1]^T\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=I_2\" alt=\"I_2\" eeimg=\"1\"/> 中有一像素点 <img src=\"https://www.zhihu.com/equation?tex=p_2%3D%5Bx_2%2Cy_2%2C1%5D%5ET\" alt=\"p_2=[x_2,y_2,1]^T\" eeimg=\"1\"/>（我习惯用 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 表示二维点， <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"/> 表示三维点），则二者之间的映射关系由一个单应矩阵 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 来确定：</p><p><img src=\"https://www.zhihu.com/equation?tex=p_2%3DHp_1\" alt=\"p_2=Hp_1\" eeimg=\"1\"/> </p><p>其中 <img src=\"https://www.zhihu.com/equation?tex=H%3D+%5Cbegin%7Bbmatrix%7D+h_1%26h_2%26h_3%5C%5C+h_4%26h_5%26h_6%5C%5C+h_7%26h_8%26h_9%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"H= \\begin{bmatrix} h_1&amp;h_2&amp;h_3\\\\ h_4&amp;h_5&amp;h_6\\\\ h_7&amp;h_8&amp;h_9\\\\ \\end{bmatrix}\" eeimg=\"1\"/> ，形式上，我们做以下几个符号规定：</p><p><img src=\"https://www.zhihu.com/equation?tex=h1%3D+%5Cbegin%7Bbmatrix%7D+h_1%5C%5Ch_2%5C%5Ch_3%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"h1= \\begin{bmatrix} h_1\\\\h_2\\\\h_3\\\\ \\end{bmatrix}\" eeimg=\"1\"/>， <img src=\"https://www.zhihu.com/equation?tex=h2%3D+%5Cbegin%7Bbmatrix%7D+h_4%5C%5Ch_5%5C%5Ch_6%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"h2= \\begin{bmatrix} h_4\\\\h_5\\\\h_6\\\\ \\end{bmatrix}\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=h3%3D+%5Cbegin%7Bbmatrix%7D+h_7%5C%5Ch_8%5C%5Ch_9%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"h3= \\begin{bmatrix} h_7\\\\h_8\\\\h_9\\\\ \\end{bmatrix}\" eeimg=\"1\"/> 。</p><p>于是有：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+x_2%5C%5Cy_2%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D%3D+%5Cbegin%7Bbmatrix%7D+h_1%26h_2%26h_3%5C%5C+h_4%26h_5%26h_6%5C%5C+h_7%26h_8%26h_9%5C%5C+%5Cend%7Bbmatrix%7D+%5Cbegin%7Bbmatrix%7D+x_1%5C%5Cy_1%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix} x_2\\\\y_2\\\\1\\\\ \\end{bmatrix}= \\begin{bmatrix} h_1&amp;h_2&amp;h_3\\\\ h_4&amp;h_5&amp;h_6\\\\ h_7&amp;h_8&amp;h_9\\\\ \\end{bmatrix} \\begin{bmatrix} x_1\\\\y_1\\\\1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> ，即：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+x_2%5C%5Cy_2%5C%5C1%5C%5C+%5Cend%7Bbmatrix%7D%3D++%5Cbegin%7Bbmatrix%7D+h1%5ETp_1%5C%5Ch2%5ETp_1%5C%5Ch3%5ETp_1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix} x_2\\\\y_2\\\\1\\\\ \\end{bmatrix}=  \\begin{bmatrix} h1^Tp_1\\\\h2^Tp_1\\\\h3^Tp_1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p>上式两边同时叉乘 <img src=\"https://www.zhihu.com/equation?tex=p_2\" alt=\"p_2\" eeimg=\"1\"/> ，则有：</p><p><img src=\"https://www.zhihu.com/equation?tex=0%3D%5Cbegin%7Bbmatrix%7D+y_2h3%5ETp_1-h2%5ETp_1%5C%5C+h1%5ETp_1-x_2h3%5ETp_1%5C%5C+x_2h2%5ETp_1-y_2h1%5ETp_1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"0=\\begin{bmatrix} y_2h3^Tp_1-h2^Tp_1\\\\ h1^Tp_1-x_2h3^Tp_1\\\\ x_2h2^Tp_1-y_2h1^Tp_1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p>为了形式上的方便，我们把等号两边换个位置：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+y_2h3%5ETp_1-h2%5ETp_1%5C%5C+h1%5ETp_1-x_2h3%5ETp_1%5C%5C+x_2h2%5ETp_1-y_2h1%5ETp_1%5C%5C+%5Cend%7Bbmatrix%7D%3D0\" alt=\"\\begin{bmatrix} y_2h3^Tp_1-h2^Tp_1\\\\ h1^Tp_1-x_2h3^Tp_1\\\\ x_2h2^Tp_1-y_2h1^Tp_1\\\\ \\end{bmatrix}=0\" eeimg=\"1\"/> </p><p>稍微整理一下上式，我们就可以得到线性方程组，解这个方程组，我们称之为“<b>直接线性变换算法（</b> <img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/> <b>）</b>”：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+0%5ET%26-p_1%5ET%26y_2p_1%5ET%5C%5C+p_1%5ET%260_T%26-x_2p_1%5ET%5C%5C+-y_2p_1%5ET%26x_2p_1%5ET%260%5ET%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes9%7D+%5Cbegin%7Bbmatrix%7D+h1%5C%5Ch2%5C%5Ch3%5C%5C+%5Cend%7Bbmatrix%7D_%7B9%5Ctimes1%7D+%3D0%5CLeftrightarrow+Ah%3D0\" alt=\"\\begin{bmatrix} 0^T&amp;-p_1^T&amp;y_2p_1^T\\\\ p_1^T&amp;0_T&amp;-x_2p_1^T\\\\ -y_2p_1^T&amp;x_2p_1^T&amp;0^T\\\\ \\end{bmatrix}_{3\\times9} \\begin{bmatrix} h1\\\\h2\\\\h3\\\\ \\end{bmatrix}_{9\\times1} =0\\Leftrightarrow Ah=0\" eeimg=\"1\"/> </p><p>注意，上式的系数矩阵A中的第三行可以由前两行的线性组合得到，因此，只有两个独立的方程，所以，通常把第三行舍去：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+0%5ET%26-p_1%5ET%26y_2p_1%5ET%5C%5C+p_1%5ET%260_T%26-x_2p_1%5ET%5C%5C+%5Cend%7Bbmatrix%7D_%7B2%5Ctimes9%7D+%5Cbegin%7Bbmatrix%7D+h1%5C%5Ch2%5C%5Ch3%5C%5C+%5Cend%7Bbmatrix%7D_%7B9%5Ctimes1%7D+%3D0%5CLeftrightarrow+Ah%3D0\" alt=\"\\begin{bmatrix} 0^T&amp;-p_1^T&amp;y_2p_1^T\\\\ p_1^T&amp;0_T&amp;-x_2p_1^T\\\\ \\end{bmatrix}_{2\\times9} \\begin{bmatrix} h1\\\\h2\\\\h3\\\\ \\end{bmatrix}_{9\\times1} =0\\Leftrightarrow Ah=0\" eeimg=\"1\"/> </p><p>可以看到，一对点提供两个约束，共有9个未知数，因此，怎么凑也凑不出正好9个约束，要么8个，要么10个，好尴尬诶~~事实上， <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 是存在一个尺度因子的，将其乘以2，在齐次坐标的意义下是一样的，所以其自由度是8，即只有8个独立变量。不过这里要说明的是，在上面的全部计算过程中，在最一开始，我就把图像点的齐次坐标中的 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 设为了1，而在书中，是保留 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 来推导的，所以，在已经规定了 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 的值后，其实就把 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 的这种齐次性给卡死了，这个还是很好理解的，就不多说了。下面说说怎么解：</p><p>有两种常用的方法：</p><p><b>方法一：</b>由于9个未知数中，只有8个是独立的，所以我可以规定 <img src=\"https://www.zhihu.com/equation?tex=h_9%3D1\" alt=\"h_9=1\" eeimg=\"1\"/> （在有些情况下，这个操作是很危险的！），这样，随便找4对点（我们的 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 必须保证<b>共线性</b>，即共线的点经过变换后仍要保持共线，所以选点的时候会涉及到点选的不好导致退化的问题，具体请阅读P55），就可以解出上面的方程了。</p><p><b>方法二：</b>随机找出 <img src=\"https://www.zhihu.com/equation?tex=N%28N%3E4%29\" alt=\"N(N&gt;4)\" eeimg=\"1\"/> 对点，并给出额外约束 <img src=\"https://www.zhihu.com/equation?tex=%7C%7Ch%7C%7C%3D1\" alt=\"||h||=1\" eeimg=\"1\"/> ，（这个约束不是必要的）然后使用SVD来求解出 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> ，或者用最小二乘法解出 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 。</p><p>以上就是对单应变换的基本总结，强调一下，这里呢，没有去考虑<b>理想点</b>这种特殊的点（ <img src=\"https://www.zhihu.com/equation?tex=w%3D0\" alt=\"w=0\" eeimg=\"1\"/> ），如果大家真碰到了涉及到<b>理想点</b>的特殊情况，首先<b>方法1</b>就无法使用了，大家可以看书上P55页的例子就明白为什么不能用了，其次，上面的全部过程中，设 <img src=\"https://www.zhihu.com/equation?tex=w%3D1\" alt=\"w=1\" eeimg=\"1\"/> 的地方就都要带上 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 去研究了。关于<b>理想点</b>的单应变换，这里就不多说了。</p><h2><b>2.数据归一化</b></h2><p>事实上，在使用 <img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/> 算法的时候，并不是直接取一堆点使用上面的方法，然后计算结果了事，通常，我们需要对给的数据进行归一化，然后对归一化数据使用<img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/>，求出归一化数据的单应变换，最后再进行一种反归一化的操作，求出了原始数据的单应变换，这种归一化的操作，会使得计算出的单应变换更好，对图像 的噪声能够更加的鲁棒，<img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/>方程组的条件数也会更好。这里不去说为什么，书上说的很清楚的东西我就不赘述了（搞不好我再说一遍，反而没说到位，只会误导大家），我们直接给出数据归一化的算法的具体操作：</p><p><b>（1）.归一化：</b></p><p>计算均值坐标 <img src=\"https://www.zhihu.com/equation?tex=p_%7B1%2Cm%7D%3D%5Bx_%7B1%2Cm%7D%2Cy_%7B1%2Cm%7D%2C1%5D%5ET\" alt=\"p_{1,m}=[x_{1,m},y_{1,m},1]^T\" eeimg=\"1\"/> ，其中（ <img src=\"https://www.zhihu.com/equation?tex=N%5Cgeq4\" alt=\"N\\geq4\" eeimg=\"1\"/> ，多多益善，减少噪声干扰）:</p><p><img src=\"https://www.zhihu.com/equation?tex=x_%7B1%2Cm%7D%3D%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bi%7D%5E%7BN%7D%7Bx_%7B1%2Ci%7D%7D\" alt=\"x_{1,m}=\\frac{1}{N}\\sum_{i}^{N}{x_{1,i}}\" eeimg=\"1\"/> ，<img src=\"https://www.zhihu.com/equation?tex=y_%7B1%2Cm%7D%3D%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bi%7D%5E%7BN%7D%7By_%7B1%2Ci%7D%7D\" alt=\"y_{1,m}=\\frac{1}{N}\\sum_{i}^{N}{y_{1,i}}\" eeimg=\"1\"/> </p><p>计算方差坐标 ：</p><p><img src=\"https://www.zhihu.com/equation?tex=x_%7B1%2C%5Csigma%7D%3D%5Cfrac%7B1%7D%7BN%7D%5Csqrt%7B%5Csum_%7Bi%7D%5E%7BN%7D%7B%28x_%7B1%2Ci%7D-x_%7B1%2Cm%7D%29%5E2%7D%7D\" alt=\"x_{1,\\sigma}=\\frac{1}{N}\\sqrt{\\sum_{i}^{N}{(x_{1,i}-x_{1,m})^2}}\" eeimg=\"1\"/> ，<img src=\"https://www.zhihu.com/equation?tex=y_%7B1%2C%5Csigma%7D%3D%5Cfrac%7B1%7D%7BN%7D%5Csqrt%7B%5Csum_%7Bi%7D%5E%7BN%7D%7B%28y_%7B1%2Ci%7D-y_%7B1%2Cm%7D%29%5E2%7D%7D\" alt=\"y_{1,\\sigma}=\\frac{1}{N}\\sqrt{\\sum_{i}^{N}{(y_{1,i}-y_{1,m})^2}}\" eeimg=\"1\"/> </p><p>然后取二者的最大值，记为 <img src=\"https://www.zhihu.com/equation?tex=%5Csigma_%7B%5Cmax%7D%3D%5Cmax%28x_%7B1%2C%5Csigma%7D%2Cy_%7B1%2C%5Csigma%7D%29\" alt=\"\\sigma_{\\max}=\\max(x_{1,\\sigma},y_{1,\\sigma})\" eeimg=\"1\"/> 。</p><p>于是我们得到了一个归一化矩阵：</p><p><img src=\"https://www.zhihu.com/equation?tex=T_1%3D+%5Cbegin%7Bbmatrix%7D+%5Cfrac%7B1%7D%7B%5Csigma_%7B%5Cmax%7D%7D%260%26%5Cfrac%7B-x_%7B1%2Cm%7D%7D%7B%5Csigma_%7B%5Cmax%7D%7D%5C%5C+0%26%5Cfrac%7B1%7D%7B%5Csigma_%7B%5Cmax%7D%7D%26%5Cfrac%7B-y_%7B1%2Cm%7D%7D%7B%5Csigma_%7B%5Cmax%7D%7D%5C%5C+0%260%261%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"T_1= \\begin{bmatrix} \\frac{1}{\\sigma_{\\max}}&amp;0&amp;\\frac{-x_{1,m}}{\\sigma_{\\max}}\\\\ 0&amp;\\frac{1}{\\sigma_{\\max}}&amp;\\frac{-y_{1,m}}{\\sigma_{\\max}}\\\\ 0&amp;0&amp;1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> ，<img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bp_%7B1%2Ci%7D%7D%3D+%5Cbegin%7Bbmatrix%7D+%5Cfrac%7B1%7D%7B%5Csigma_%7B%5Cmax%7D%7D%260%26%5Cfrac%7B-x_%7B1%2Cm%7D%7D%7B%5Csigma_%7B%5Cmax%7D%7D%5C%5C+0%26%5Cfrac%7B1%7D%7B%5Csigma_%7B%5Cmax%7D%7D%26%5Cfrac%7B-y_%7B1%2Cm%7D%7D%7B%5Csigma_%7B%5Cmax%7D%7D%5C%5C+0%260%261%5C%5C+%5Cend%7Bbmatrix%7D+p_%7B1%2Ci%7D%5CRightarrow+%5Cbegin%7Bbmatrix%7D+%5Cfrac%7Bx_%7B1%2Ci%7D-x_%7B1.m%7D%7D%7B%5Csigma_%7B%5Cmax%7D%7D%5C%5C+%5Cfrac%7By_%7B1%2Ci%7D-y_%7B1.m%7D%7D%7B%5Csigma_%7B%5Cmax%7D%7D%5C%5C+1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\tilde{p_{1,i}}= \\begin{bmatrix} \\frac{1}{\\sigma_{\\max}}&amp;0&amp;\\frac{-x_{1,m}}{\\sigma_{\\max}}\\\\ 0&amp;\\frac{1}{\\sigma_{\\max}}&amp;\\frac{-y_{1,m}}{\\sigma_{\\max}}\\\\ 0&amp;0&amp;1\\\\ \\end{bmatrix} p_{1,i}\\Rightarrow \\begin{bmatrix} \\frac{x_{1,i}-x_{1.m}}{\\sigma_{\\max}}\\\\ \\frac{y_{1,i}-y_{1.m}}{\\sigma_{\\max}}\\\\ 1\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p>将 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 作用在每一个 <img src=\"https://www.zhihu.com/equation?tex=p_%7B1%2Ci%7D\" alt=\"p_{1,i}\" eeimg=\"1\"/> 上，得到 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bp_%7B1%2Ci%7D%7D\" alt=\"\\tilde{p_{1,i}}\" eeimg=\"1\"/> ，于是我们完成了对点集 <img src=\"https://www.zhihu.com/equation?tex=p_1\" alt=\"p_1\" eeimg=\"1\"/> 的归一化，得到 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bp_1%7D\" alt=\"\\tilde{p_1}\" eeimg=\"1\"/> ，同样的方法得到 <img src=\"https://www.zhihu.com/equation?tex=T_2\" alt=\"T_2\" eeimg=\"1\"/> ，然后作用于点集 <img src=\"https://www.zhihu.com/equation?tex=p_2\" alt=\"p_2\" eeimg=\"1\"/> 进行归一化，得到 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bp_2%7D\" alt=\"\\tilde{p_2}\" eeimg=\"1\"/> 。</p><p><b>（2）.DLT求解</b></p><p>使用 <img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/> 算法求解 <img src=\"https://www.zhihu.com/equation?tex=%5Ctilde%7Bp_2%7D%3D%5Ctilde%7BH%7D%5Ctilde%7Bp_1%7D\" alt=\"\\tilde{p_2}=\\tilde{H}\\tilde{p_1}\" eeimg=\"1\"/> </p><p><b>（3）.反归一化</b></p><p>最后我们所求的 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> 可由下式得出：</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3DT_2%5E%7B-1%7D%5Ctilde%7BH%7DT_1\" alt=\"H=T_2^{-1}\\tilde{H}T_1\" eeimg=\"1\"/> </p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据归一化大概就是这样，其实对于一些做过机器学习的小伙伴应该都比较清楚归一化的好处，有助于我们的算法能够对数据进行更好的处理，给出更精确、更稳定的结果。上面的归一化 <img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/>便是如此，书中也强调了，归一化对于 <img src=\"https://www.zhihu.com/equation?tex=DLT\" alt=\"DLT\" eeimg=\"1\"/> 来说不是可有可无的，我们应该给予重视，说白了就是，你不用不行，这么好使的方法你干嘛不用？q(≧▽≦q)</p><p>事实上，除了归一化操作，通常还会使用<b>RANSAC（随机采样一致性）</b>算法来提高算法的鲁棒性，给出更好的两张图像之间的单应矩阵，关于RANSAC以及如何用RANSAC来求解单应变换我已经在我其他的文章写了，大家有兴趣可以翻翻看，就不多说了。</p><hr/><p>关于图像之间的单应变换，就不说太多了，单应变换是个比较简单的概念，不需要我们花费太多精力取琢磨，真正难的东西都还在后面呢，所以更新进度我也要放慢了，毕竟自己都没搞懂的话，怎么做出能让人看得懂的总结呢？</p><p>下次会总结一下<b>第五章摄像机模型</b>的内容。</p><p>最后，祝每一位阅读此文的小伙伴都能发顶刊、顶会呦~~</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "计算机视觉（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121245"
                }, 
                {
                    "tag": "多视图几何", 
                    "tagLink": "https://api.zhihu.com/topics/20205109"
                }
            ], 
            "comments": [
                {
                    "userName": "Undine", 
                    "userLink": "https://www.zhihu.com/people/16a0b210cd1271d73021b3efc3b8c55f", 
                    "content": "我还以为你要把痘痘p上去[捂嘴][开心]", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "<p>有点吓人呀😂</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Undine"
                        }
                    ]
                }, 
                {
                    "userName": "Kyle", 
                    "userLink": "https://www.zhihu.com/people/408d5d2a0c95412123f79a14a83df8b0", 
                    "content": "<p>博主，等式两边同时叉乘 p2之后得出的矩阵=0是怎么得到的呢？up to scale的向量是怎样进行叉乘呢？小白问的问题可能比较白痴</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "<p>应该是0=那一坨，只不过我习惯地把0放到右面了，这一块我改了过来。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Kyle"
                        }
                    ]
                }, 
                {
                    "userName": "张小二", 
                    "userLink": "https://www.zhihu.com/people/314a90f33fa623a11fe2f7756aa42254", 
                    "content": "<p>博主你好，阅读了你的文章，感觉博主写的非常棒。</p><p>有个问题想请教下，文中说到对数据归一化，当分别对X，Y数据求得中心点之后，然后你求了一个max，在去组成矩阵T，得到~X，请问博主为什么会这样去求max,这样做好像和最长距离的sqrt(2)联系不起来，不知博主有资料或论文给一下出处吗？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "你也是直接从MVG这本书摘过来地算法，没有仔细研究过，你可以看看书", 
                            "likes": 0, 
                            "replyToAuthor": "张小二"
                        }
                    ]
                }, 
                {
                    "userName": "一只特立独行的朱", 
                    "userLink": "https://www.zhihu.com/people/3ae353a5643a68afeb4ab8cd25928a50", 
                    "content": "<p>请问下这里的单应变换和3D-2D中的单应变换有什么区别</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "一个是2d2d，一个是2d3d，很明显不同啊。名字重了而已", 
                            "likes": 0, 
                            "replyToAuthor": "一只特立独行的朱"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/51957398", 
            "userName": "Kissrabbit", 
            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
            "upvote": 22, 
            "title": "《CV中的多视图几何》——基础章节", 
            "content": "<p>MVG断断续续看了不少，将三视图几何之前的都看完了，但没有总结，所以，学习的质量也不是很高，现在，基本上就是转入计算机视觉这个领域了。也是从此开始渐渐发现了一些浮躁的、不好的现象，比如：我会做些图像处理的技术=我是做视觉的；我会用Tensorflow做个图像分类，跑个YOLO=我是做视觉的。。。。。。类似的有很多，而诸如此类现象的共性之一就是——没有系统学习过计算机视觉，甚至相机模型中最基本的针孔相机模型、图像之间的单应变换、基础矩阵、本质矩阵都不知道是什么，会跑些深度学习的源码，就可以大言不惭说自己搞视觉的，个人觉得这实在是有些浮躁了（这就有点像是会用几个搜索算法，就可以跟别人吹嘘自己是搞人工智能的！）。所以自己在入门计算机视觉领域中时，不忘初心，深入去学习CV，但也不得不承认，在学习MVG这本书的时候，也多次质疑过自己，有必要去了解这些吗？OpenCV用的好不就完了，人家都造好轮子了！但是，知其然，知其所以然，仅仅会用别人的轮子，却不知道被人的轮子是怎么造出来，终究还是个门外汉，还是难以对计算机视觉这么一个庞大的领域有全面的认识，难以掌握核心技术。所以，在CV几何领域中，MVG这本书的价值是非常大的，也是非常有趣的，真的是每一个搞计算机视觉的研究人员都要花心思去学习的。</p><p><b>现在开始，就打算好好把MVG这本书的部分内容拿出来总结总结，做个笔记（自己没搞懂的，就不拿出来了，怪丢人的），没有说到的，大家可以自己去翻翻书看一看，希望能和大家共同进步！</b></p><p><b>路漫漫其修远兮，吾将上下而求索</b>！希望每一个CVer能够不忘初心，提升自身的理论水平、科研水平，多发Paper，成为一名优秀的计算机视觉大牛！</p><p>祝每一个阅读此文的小伙伴，都能发出顶刊、顶会呦~~</p><hr/><h2><b>一、点、线和平面的基本概念</b></h2><p><b><i>1. 点</i></b></p><p>以二维空间为例，通常在表述一个点的时候，经常使用形如<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%5D%5ET\" alt=\"[x,y]^T\" eeimg=\"1\"/>这样的坐标来表示，不过在计算机视觉中，我们更常常使用“<b>齐次坐标</b>”来表示一个点：<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%2Cw%5D%5ET\" alt=\"[x,y,w]^T\" eeimg=\"1\"/>，从形式上来看，就是在原来的<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%5D%5ET\" alt=\"[x,y]^T\" eeimg=\"1\"/>上多加了一个 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 坐标，这里不需要纠结这个 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 的意义，我们仅仅是为了处理方便，比如，如果不用齐次坐标，坐标变换就需要写成：</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1+%3DRP_0%2Bt\" alt=\"P_1 =RP_0+t\" eeimg=\"1\"/> </p><p>而使用了齐次坐标形式，我们就可以将上面的式子进行形式上的简化：</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1+%3DTP_0\" alt=\"P_1 =TP_0\" eeimg=\"1\"/></p><p>因此，我们目前只需要知道，齐次坐标的作用就是为了形式上的方便，不必深究。另外，由于<img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/>的存在，因此，齐次坐标形式的点存在尺度性，即<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%2Cw%5D%5ET\" alt=\"[x,y,w]^T\" eeimg=\"1\"/>与：<img src=\"https://www.zhihu.com/equation?tex=%5B2x%2C2y%2C2w%5D%5ET\" alt=\"[2x,2y,2w]^T\" eeimg=\"1\"/>，表达的都是一个点。通常情况下，如果没有特殊说明，常常把 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 归一化，酱紫，一个二维点可以用齐次坐标形式来表达：<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Fw%2Cy%2Fw%2C1%5D%5ET\" alt=\"[x/w,y/w,1]^T\" eeimg=\"1\"/>。那么如何写一个点的齐次坐标呢？只需要在其原坐标末尾上加一个1即可： <img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%5D%5ET%5Crightarrow%5Bx%2Cy%2C1%5D%5ET\" alt=\"[x,y]^T\\rightarrow[x,y,1]^T\" eeimg=\"1\"/> 。</p><p>对于三维空间的点，是一样的，一个三维空间点<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%2Cz%5D%5ET\" alt=\"[x,y,z]^T\" eeimg=\"1\"/>的齐次坐标形式为：<img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%2Cz%2C1%5D%5ET\" alt=\"[x,y,z,1]^T\" eeimg=\"1\"/>。</p><p>还是那句话，之所以使用齐次坐标这种有点违背常识的表述（咦，一个三维点就3个自由度。用3个坐标就可以了，怎么还多了一个维度），但这是为了数学上处理的方式而使用的一种简洁的形式，至于其数学含义，不是我们该纠结的。</p><p>上面在介绍点的时候，把 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 设为了1，自然我们会想到，为什么不设为0呢？因此，还是要简单说一说<img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/>。通常对于一个二维平面的齐次坐标点： <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Cy%2Cw%5D%5ET\" alt=\"p=[x,y,w]^T\" eeimg=\"1\"/> ，那如何去求出其二维点坐标呢？上面已经说到了，使用这么个简单的关系即可： <img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Fw%2Cy%2Fw%2C1%5D%5ET\" alt=\"[x/w,y/w,1]^T\" eeimg=\"1\"/> ，即除掉<img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/>，将其归一化。由此我们也能够看出来<img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/>仅仅是一个尺度的问题，不会影响到自由度。但是，但凡学过数学的人，都知道这里有一个很敏感的问题：若 <img src=\"https://www.zhihu.com/equation?tex=w%3D0\" alt=\"w=0\" eeimg=\"1\"/> ，那就没法除掉 <img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"/> 了啊！！不过，对于这种极端情况，并不意味着带来某种失效，或者灾难，反而带来了有趣的意义。举个例子，一个齐次坐标点： <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2C0%2Cw%5D%5ET\" alt=\"p=[x,0,w]^T\" eeimg=\"1\"/>，倘若 <img src=\"https://www.zhihu.com/equation?tex=w%5Cne0\" alt=\"w\\ne0\" eeimg=\"1\"/> ，则这是 <img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 轴上的一点<img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Fw%2C0%2C1%5D%5ET\" alt=\"p=[x/w,0,1]^T\" eeimg=\"1\"/>，但是，若 <img src=\"https://www.zhihu.com/equation?tex=w%3D0\" alt=\"w=0\" eeimg=\"1\"/> ，那么会有 <img src=\"https://www.zhihu.com/equation?tex=x%2Fw%5Crightarrow%5Cinfty\" alt=\"x/w\\rightarrow\\infty\" eeimg=\"1\"/> ，想想这个 <img src=\"https://www.zhihu.com/equation?tex=%5Cinfty\" alt=\"\\infty\" eeimg=\"1\"/> 表明了什么？<img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 轴上在无穷远处的点！换个思路，这不就可以用来表示<img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 轴了啊！</p><p>所以，通常用 <img src=\"https://www.zhihu.com/equation?tex=w%3D0\" alt=\"w=0\" eeimg=\"1\"/> 这样的形式： <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Cy%2C0%5D%5ET\" alt=\"p=[x,y,0]^T\" eeimg=\"1\"/>来表示无穷远处的点，特殊的，可以用： <img src=\"https://www.zhihu.com/equation?tex=p%3D%5B1%2C0%2C0%5D%5ET\" alt=\"p=[1,0,0]^T\" eeimg=\"1\"/>表示平面的<img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"X\" eeimg=\"1\"/> 轴，用： <img src=\"https://www.zhihu.com/equation?tex=p%3D%5B0%2C1%2C0%5D%5ET\" alt=\"p=[0,1,0]^T\" eeimg=\"1\"/>表示平面的<img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"Y\" eeimg=\"1\"/> 轴。</p><p>这些无穷远处的点，我们也称之为<b>理想点</b>。</p><p>后面还有些二次曲线、对偶二次曲线的概念，这里就不说了，大家可以看P6-P7。</p><p><b><i>2.直线</i></b></p><p>在中学时代，我们就知道平面中，一条直线的一般表达式为：</p><p><img src=\"https://www.zhihu.com/equation?tex=ax%2Bby%2Bc%3D0\" alt=\"ax+by+c=0\" eeimg=\"1\"/> </p><p>而上了大学学习了线性代数后，我们又可以把上面的式子写成两个向量的内积形式：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Ba%2Cb%2Cc%5D%5Bx%2Cy%2C1%5D%5ET%3D0\" alt=\"[a,b,c][x,y,1]^T=0\" eeimg=\"1\"/> </p><p>显然，上式中 <img src=\"https://www.zhihu.com/equation?tex=%5Bx%2Cy%2C1%5D%5ET\" alt=\"[x,y,1]^T\" eeimg=\"1\"/> 是二维平面点的齐次坐标，这里，我们可以用向量 <img src=\"https://www.zhihu.com/equation?tex=%5Ba%2Cb%2Cc%5D%5ET\" alt=\"[a,b,c]^T\" eeimg=\"1\"/>来表达一条直线，这是很好理解的。我们令 <img src=\"https://www.zhihu.com/equation?tex=l%3D%5Ba%2Cb%2Cc%5D%5ET\" alt=\"l=[a,b,c]^T\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Cy%2C1%5D%5ET\" alt=\"p=[x,y,1]^T\" eeimg=\"1\"/> ，于是，点在直线上的方程可以写成如下形式：</p><p><img src=\"https://www.zhihu.com/equation?tex=p%5ETl%3Dl%5ETp%3D0\" alt=\"p^Tl=l^Tp=0\" eeimg=\"1\"/> </p><p>对于上式，不做过多解释，结果是显然的。</p><p>通常在点和直线中，我们常常会关心两直线交点、两点确定一条直线这样的问题，下面不加证明的给出相关结论：</p><p><b>①两条直线</b> <img src=\"https://www.zhihu.com/equation?tex=l_1%2Cl_2\" alt=\"l_1,l_2\" eeimg=\"1\"/> <b>的交点：</b> <img src=\"https://www.zhihu.com/equation?tex=p%3Dl_1%5Ctimes+l_2\" alt=\"p=l_1\\times l_2\" eeimg=\"1\"/> （ <img src=\"https://www.zhihu.com/equation?tex=%5Ctimes\" alt=\"\\times\" eeimg=\"1\"/> 表示<b>矢量积/叉乘/外积</b>，下同）</p><p>②<b>两点</b> <img src=\"https://www.zhihu.com/equation?tex=p_1%2Cp_2\" alt=\"p_1,p_2\" eeimg=\"1\"/> <b>确定一条直线：</b> <img src=\"https://www.zhihu.com/equation?tex=l%3Dp_1%5Ctimes+p_2\" alt=\"l=p_1\\times p_2\" eeimg=\"1\"/> </p><p>以后如果没有特殊说明，点坐标均使用齐次坐标形式。</p><p><b><i>3.平面</i></b></p><p>在中学时代，我们就知道空间一点在平面的一般表达式为：</p><p><img src=\"https://www.zhihu.com/equation?tex=ax%2Bby%2Bcz%2Bd%3D0\" alt=\"ax+by+cz+d=0\" eeimg=\"1\"/> </p><p>仿照上一节对于直线的介绍的过程，这里，我们可以用向量 <img src=\"https://www.zhihu.com/equation?tex=%5Ba%2Cb%2Cc%2Cd%5D%5ET\" alt=\"[a,b,c,d]^T\" eeimg=\"1\"/>来表达一个平面，这是很好理解的。我们令 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%3D%5Ba%2Cb%2Cc%2Cd%5D%5ET\" alt=\"\\pi=[a,b,c,d]^T\" eeimg=\"1\"/> ， <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Cy%2Cz%2C1%5D%5ET\" alt=\"p=[x,y,z,1]^T\" eeimg=\"1\"/> ，于是，点在平面上的方程可以写成如下形式：</p><p><img src=\"https://www.zhihu.com/equation?tex=p%5ET%5Cpi%3D%5Cpi%5ETp%3D0\" alt=\"p^T\\pi=\\pi^Tp=0\" eeimg=\"1\"/> </p><p>对于上式，不做过多解释。同样，也能类似地给出几个结论：</p><p><b>①三点</b><img src=\"https://www.zhihu.com/equation?tex=p_1%2Cp_2%2Cp_3\" alt=\"p_1,p_2,p_3\" eeimg=\"1\"/><b>确定一个平面：</b> <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%3D%5Cbegin%7Bbmatrix%7D+++%28%5Ctilde%7Bp_1%7D-%5Ctilde%7Bp_3%7D%29%5Ctimes+%28%5Ctilde%7Bp_2%7D-%5Ctilde%7Bp_3%7D%29%5C%5C++-%5Ctilde%7Bp_3%7D%5ET%28%5Ctilde%7Bp_1%7D%5Ctimes%5Ctilde%7Bp_2%7D%29%5C%5C++%5Cend%7Bbmatrix%7D\" alt=\"\\pi=\\begin{bmatrix}   (\\tilde{p_1}-\\tilde{p_3})\\times (\\tilde{p_2}-\\tilde{p_3})\\\\  -\\tilde{p_3}^T(\\tilde{p_1}\\times\\tilde{p_2})\\\\  \\end{bmatrix}\" eeimg=\"1\"/> <b>，其中：</b></p><p><b><img src=\"https://www.zhihu.com/equation?tex=p_1%3D%5Cbegin%7Bbmatrix%7D+%5Ctilde%7Bp_1%7D%5C%5C+1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"p_1=\\begin{bmatrix} \\tilde{p_1}\\\\ 1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> ，</b><img src=\"https://www.zhihu.com/equation?tex=p_2%3D%5Cbegin%7Bbmatrix%7D+%5Ctilde%7Bp_2%7D%5C%5C+1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"p_2=\\begin{bmatrix} \\tilde{p_2}\\\\ 1\\\\ \\end{bmatrix}\" eeimg=\"1\"/><b> ，</b><img src=\"https://www.zhihu.com/equation?tex=p_3%3D%5Cbegin%7Bbmatrix%7D+%5Ctilde%7Bp_3%7D%5C%5C+1%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"p_3=\\begin{bmatrix} \\tilde{p_3}\\\\ 1\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p><b>②三平面</b> <img src=\"https://www.zhihu.com/equation?tex=%5Cpi_1%2C%5Cpi_2%2C%5Cpi_3\" alt=\"\\pi_1,\\pi_2,\\pi_3\" eeimg=\"1\"/> <b>确定一点</b> <img src=\"https://www.zhihu.com/equation?tex=p%3D%5Bx%2Cy%2Cz%2C1%5D%5ET\" alt=\"p=[x,y,z,1]^T\" eeimg=\"1\"/><b>：求下面的方程即可</b></p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+%5Cpi_1%5ET%5C%5C+%5Cpi_2%5ET%5C%5C+%5Cpi_3%5ET%5C%5C+%5Cend%7Bbmatrix%7D_%7B3%5Ctimes4%7Dp_%7B4%5Ctimes1%7D%3D0\" alt=\"\\begin{bmatrix} \\pi_1^T\\\\ \\pi_2^T\\\\ \\pi_3^T\\\\ \\end{bmatrix}_{3\\times4}p_{4\\times1}=0\" eeimg=\"1\"/> </p><p>注意，上述方程的系数矩阵表面上是不满秩的，但是，事实上，一个平面<img src=\"https://www.zhihu.com/equation?tex=%5Cpi%3D%5Ba%2Cb%2Cc%2Cd%5D%5ET\" alt=\"\\pi=[a,b,c,d]^T\" eeimg=\"1\"/>中的 <img src=\"https://www.zhihu.com/equation?tex=a%2Cb%2Cc\" alt=\"a,b,c\" eeimg=\"1\"/> 即为该平面的法向量参数，对于法向量，我们在乎的是它所在的方向，而不在乎大小（通常归一化），所以我们可以在上述方程中，加入一个额外约束： <img src=\"https://www.zhihu.com/equation?tex=a%5E2%2Bb%5E2%2Bc%5E2%3D1\" alt=\"a^2+b^2+c^2=1\" eeimg=\"1\"/> ，即归一化，不过，最简单的方式是让 <img src=\"https://www.zhihu.com/equation?tex=c%3D1\" alt=\"c=1\" eeimg=\"1\"/> 即可，所以，上述方程可以整理为如下形式：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D+a_1%26b_1%261%5C%5C+a_2%26b_2%261%5C%5C+a_3%26b_3%261%5C%5C+%5Cend%7Bbmatrix%7D+%5Cbegin%7Bbmatrix%7D+x%5C%5C+y%5C%5C+z%5C%5C+%5Cend%7Bbmatrix%7D%3D+%5Cbegin%7Bbmatrix%7D+-d_1%5C%5C+-d_2%5C%5C+-d_3%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix} a_1&amp;b_1&amp;1\\\\ a_2&amp;b_2&amp;1\\\\ a_3&amp;b_3&amp;1\\\\ \\end{bmatrix} \\begin{bmatrix} x\\\\ y\\\\ z\\\\ \\end{bmatrix}= \\begin{bmatrix} -d_1\\\\ -d_2\\\\ -d_3\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p>具体解的形式就不说了，很容易的。</p><h2><b>二、常见的几何变换</b></h2><p>在计算机视觉中，有一类问题是很受关注的：一台相机在不同时刻不同地点拍摄了两张图片，我们想知道这两个图像之间具有什么样的变换关系。（有计算机视觉基础的人都知道，这个变换是与相机内参和相机位姿有关的。）</p><p>下面，简介几个计算机视觉中，常用到的几何变换。</p><p><b><i>1.欧氏变换</i></b></p><p>这是最常用的变换。其特点就是<b>等距（isometric）</b>的，两点之间的距离不会因为发生一次欧氏变换而发生改变。我们记欧式变换为 <img src=\"https://www.zhihu.com/equation?tex=H\" alt=\"H\" eeimg=\"1\"/> ，其形式如下所示：</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3D+%5Cbegin%7Bbmatrix%7D+R%26t%5C%5C+0%261%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"H= \\begin{bmatrix} R&amp;t\\\\ 0&amp;1\\\\ \\end{bmatrix}\" eeimg=\"1\"/>   </p><p>其中， <img src=\"https://www.zhihu.com/equation?tex=R\" alt=\"R\" eeimg=\"1\"/> 为<b>旋转矩阵（</b> <img src=\"https://www.zhihu.com/equation?tex=3%5Ctimes3\" alt=\"3\\times3\" eeimg=\"1\"/> （对应于三维空间）或者 <img src=\"https://www.zhihu.com/equation?tex=2%5Ctimes2\" alt=\"2\\times2\" eeimg=\"1\"/> （对应于二维平面）的是我们常使用的<b>）</b>，并且是一个<b>正交矩阵</b>： <img src=\"https://www.zhihu.com/equation?tex=RR%5ET%3D1\" alt=\"RR^T=1\" eeimg=\"1\"/> ，<img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 为<b>平移向量（</b> <img src=\"https://www.zhihu.com/equation?tex=3%5Ctimes1\" alt=\"3\\times1\" eeimg=\"1\"/> 或者 <img src=\"https://www.zhihu.com/equation?tex=2%5Ctimes1\" alt=\"2\\times1\" eeimg=\"1\"/> <b>）</b>。两点之间的欧式变换可以写为：</p><p><img src=\"https://www.zhihu.com/equation?tex=P_1%3DHP_0\" alt=\"P_1=HP_0\" eeimg=\"1\"/>  </p><p>其中的点坐标均为齐次坐标。欧式变换是等距变换，即正方形经过欧式变换后，仍为正方形，圆经过欧式变换后仍未圆，即形状上不会发生改变，并且大小上也不会发生改变。这是最基本的几何变换。一个典型的欧式变换长下面这样：</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3D+%5Cbegin%7Bbmatrix%7D+%5Ccos%28%5Ctheta%29%26-%5Csin%28%5Ctheta%29%26t_x%5C%5C+%5Csin%28%5Ctheta%29%26%5Ccos%28%5Ctheta%29%26t_y%5C%5C+0%260%261%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"H= \\begin{bmatrix} \\cos(\\theta)&amp;-\\sin(\\theta)&amp;t_x\\\\ \\sin(\\theta)&amp;\\cos(\\theta)&amp;t_y\\\\ 0&amp;0&amp;1\\\\ \\end{bmatrix}\" eeimg=\"1\"/> </p><p><b><i>2.相似变换</i></b></p><p>相较于欧式变换，相似变换的特点是保形状，但不保距，即一个正方形经过相似变换的作用后，仍然是一个正方形，但大小和以前不一样了；一个圆经过相似变换的作用后，仍然是一个圆，但大小和以前不一样了，即相似变换保住了图形中各边之间的比例，但是各自的实际尺寸大小却发生了改变，比如一个三角形，三条边是3，4，5，作用了相似变换后，变成了0.3，0.4，0.5，三条边的比例仍然是3：4：5，但各自的大小却变了。体现在公式上，相似变换的定义如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3D+%5Cbegin%7Bbmatrix%7D+sR%26t%5C%5C+0%261%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"H= \\begin{bmatrix} sR&amp;t\\\\ 0&amp;1\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p>即比欧式变换多了一个尺度因子 <img src=\"https://www.zhihu.com/equation?tex=s\" alt=\"s\" eeimg=\"1\"/> 。</p><p><b><i>3.仿射变换</i></b></p><p>无论是欧式变换还是相似变换，其中都有一个比较特殊的矩阵 <img src=\"https://www.zhihu.com/equation?tex=R\" alt=\"R\" eeimg=\"1\"/> ——正交矩阵。这个正交矩阵保证了在变换的作用下，物体的形状不会发生改变。那么，如果把 <img src=\"https://www.zhihu.com/equation?tex=R\" alt=\"R\" eeimg=\"1\"/> 换成其他任意的矩阵<img src=\"https://www.zhihu.com/equation?tex=A\" alt=\"A\" eeimg=\"1\"/> 呢？</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3D+%5Cbegin%7Bbmatrix%7D+A%26t%5C%5C+0%261%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"H= \\begin{bmatrix} A&amp;t\\\\ 0&amp;1\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p>很容易想到，此时的变换就不在保形状了，不过，该变换仍有一些不变的量，我们称之为<b>不变量：</b></p><p><b>（1）平行线：</b>原本平行的两个直线在仿射变换的作用下，仍然是平行线。</p><p><b>（2）平行线段的长度比。</b></p><p><b>（3）面积比。</b></p><p><b><i>4.射影变换</i></b></p><p>最后再简单地说一个更为一般的变换：射影变换，射影变换的变换矩阵形式就更加一般了：</p><p><img src=\"https://www.zhihu.com/equation?tex=H%3D+%5Cbegin%7Bbmatrix%7D+A%26t%5C%5C+v%26w%5C%5C+%5Cend%7Bbmatrix%7D\" alt=\"H= \\begin{bmatrix} A&amp;t\\\\ v&amp;w\\\\ \\end{bmatrix}\" eeimg=\"1\"/></p><p>想了解更多的关于几何变换的知识，可以查阅书中的<b><i>1.4变换的层次</i></b>。</p><hr/><p>这一块，就写到这里吧，后续会继续写下一篇的，下一次总结总结图像之间的单应变换一块的知识，即MVG的第三章。欢迎大家在评论区留言交流、指正和批评。</p>", 
            "topic": [
                {
                    "tag": "计算机视觉", 
                    "tagLink": "https://api.zhihu.com/topics/19590195"
                }, 
                {
                    "tag": "计算机视觉（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20121245"
                }, 
                {
                    "tag": "多视图几何", 
                    "tagLink": "https://api.zhihu.com/topics/20205109"
                }
            ], 
            "comments": [
                {
                    "userName": "gadfly621", 
                    "userLink": "https://www.zhihu.com/people/f4301ec084690b3ae8543a5043f4d1ef", 
                    "content": "<p>赞，写的很清楚，楼主能否讲讲二次曲线、对偶二次曲线这些概念，看书看的似懂非懂</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "因为一直没有遇到过需要二次曲线，对偶二次曲线的问题，所以就没有做总结~", 
                            "likes": 0, 
                            "replyToAuthor": "gadfly621"
                        }, 
                        {
                            "userName": "祝你健康", 
                            "userLink": "https://www.zhihu.com/people/e0974c38ccdf541430a02fd9f7faab20", 
                            "content": "圆标志进行相机标定需要二次曲线知识", 
                            "likes": 0, 
                            "replyToAuthor": "Kissrabbit"
                        }
                    ]
                }, 
                {
                    "userName": "雪耕君", 
                    "userLink": "https://www.zhihu.com/people/c2b4ec1d77761be034cd3e37c117a41c", 
                    "content": "那些identity points, line at infinity，conic at infinity的部分有点抽象，不是很懂", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Kissrabbit", 
                            "userLink": "https://www.zhihu.com/people/0e5dab034b5bd66b72d3c3362ae013af", 
                            "content": "的确，毕竟不是很直观，等以后用到了再仔细研究也不迟", 
                            "likes": 0, 
                            "replyToAuthor": "雪耕君"
                        }
                    ]
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1055522783492243456"
}
