{
    "title": "机器学习与算法", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/luke-48-61-69", 
        "https://www.zhihu.com/people/an-ran-57", 
        "https://www.zhihu.com/people/cui-xi-66", 
        "https://www.zhihu.com/people/xiao-zhu-pei-qi-76-87-63", 
        "https://www.zhihu.com/people/dawdle", 
        "https://www.zhihu.com/people/ivan-7-21", 
        "https://www.zhihu.com/people/li-qiang-96-44-4", 
        "https://www.zhihu.com/people/kaiweb", 
        "https://www.zhihu.com/people/ha-lin-29", 
        "https://www.zhihu.com/people/skywalker01", 
        "https://www.zhihu.com/people/gu-bian-cheng", 
        "https://www.zhihu.com/people/mengtan", 
        "https://www.zhihu.com/people/xiang-le-song", 
        "https://www.zhihu.com/people/xin-er-99-40-13", 
        "https://www.zhihu.com/people/fly-60-62-94", 
        "https://www.zhihu.com/people/alston-3-13-37", 
        "https://www.zhihu.com/people/liu-zong-11-83", 
        "https://www.zhihu.com/people/jiong-shen-71", 
        "https://www.zhihu.com/people/yong-hu-he-ke-guan-de", 
        "https://www.zhihu.com/people/zuo-ru-bao", 
        "https://www.zhihu.com/people/yi-xiao-sheng-hua-96", 
        "https://www.zhihu.com/people/dong-jiu-0815", 
        "https://www.zhihu.com/people/lan-you-zi-60-88", 
        "https://www.zhihu.com/people/lou-dou-25", 
        "https://www.zhihu.com/people/han-wei-94-55", 
        "https://www.zhihu.com/people/lhlh-37", 
        "https://www.zhihu.com/people/xkk-16-38", 
        "https://www.zhihu.com/people/pattyxiao-tu-zi", 
        "https://www.zhihu.com/people/xu-hong-48-9", 
        "https://www.zhihu.com/people/he-kun-6-95", 
        "https://www.zhihu.com/people/liu-zhi-wei-37-26", 
        "https://www.zhihu.com/people/yi-xu-jun-10", 
        "https://www.zhihu.com/people/zhu-da-xia-23-95", 
        "https://www.zhihu.com/people/yao0118", 
        "https://www.zhihu.com/people/cblian", 
        "https://www.zhihu.com/people/yu-xiao-tao-63", 
        "https://www.zhihu.com/people/crush-93-87", 
        "https://www.zhihu.com/people/tao-zong-qi", 
        "https://www.zhihu.com/people/hu-hu-tu-tu-75", 
        "https://www.zhihu.com/people/wang-meng-66-84-81", 
        "https://www.zhihu.com/people/bu-shou-ni-hui-si", 
        "https://www.zhihu.com/people/15101544112", 
        "https://www.zhihu.com/people/su-li-min-33", 
        "https://www.zhihu.com/people/wei-ni-80-73", 
        "https://www.zhihu.com/people/ammydolphin", 
        "https://www.zhihu.com/people/hua-zi-71-34", 
        "https://www.zhihu.com/people/liubincodelife", 
        "https://www.zhihu.com/people/xi-yu-xia-ke", 
        "https://www.zhihu.com/people/haha-72-20", 
        "https://www.zhihu.com/people/antonia-32-34", 
        "https://www.zhihu.com/people/a-ha-ha-39-66", 
        "https://www.zhihu.com/people/1111111-51-87-91", 
        "https://www.zhihu.com/people/xiao-xian-sheng-37-75", 
        "https://www.zhihu.com/people/gate-bill-19", 
        "https://www.zhihu.com/people/fang-er-34-57", 
        "https://www.zhihu.com/people/feng-qing-yang-93", 
        "https://www.zhihu.com/people/jia-xu-yisi-liu", 
        "https://www.zhihu.com/people/chen-xiao-zheng-14", 
        "https://www.zhihu.com/people/xu-zhou-65-84", 
        "https://www.zhihu.com/people/huohuo-63-93", 
        "https://www.zhihu.com/people/biubiubiu_ni", 
        "https://www.zhihu.com/people/cun-fu-si-ji", 
        "https://www.zhihu.com/people/yao-yao-3-39", 
        "https://www.zhihu.com/people/wang-jing-yue-10", 
        "https://www.zhihu.com/people/ivoryhee", 
        "https://www.zhihu.com/people/zhang-rui-ping-9-69", 
        "https://www.zhihu.com/people/shi-po-87", 
        "https://www.zhihu.com/people/yong-cheng-42-49", 
        "https://www.zhihu.com/people/manshou", 
        "https://www.zhihu.com/people/platonic-51", 
        "https://www.zhihu.com/people/thanealex", 
        "https://www.zhihu.com/people/LaputaFox", 
        "https://www.zhihu.com/people/qinkang-69", 
        "https://www.zhihu.com/people/gutu-granth", 
        "https://www.zhihu.com/people/jack000000001", 
        "https://www.zhihu.com/people/jiang-chen-28-27", 
        "https://www.zhihu.com/people/glkyer", 
        "https://www.zhihu.com/people/petrhon", 
        "https://www.zhihu.com/people/mrying-zi", 
        "https://www.zhihu.com/people/wang-eddy", 
        "https://www.zhihu.com/people/sun-sun-95-97", 
        "https://www.zhihu.com/people/steven-li-96", 
        "https://www.zhihu.com/people/li-le-min-58-40", 
        "https://www.zhihu.com/people/yin-xiao-feng-17", 
        "https://www.zhihu.com/people/yuan-lai-mei-zhang-hao", 
        "https://www.zhihu.com/people/mary-29-58", 
        "https://www.zhihu.com/people/ke-ke-23-12", 
        "https://www.zhihu.com/people/he-he-88-64-7", 
        "https://www.zhihu.com/people/a-la-mu-si-73", 
        "https://www.zhihu.com/people/weng-zong-nan", 
        "https://www.zhihu.com/people/jiang-shan-59", 
        "https://www.zhihu.com/people/jiu-shi-ni-71-42", 
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/wu-qi-mo-50", 
        "https://www.zhihu.com/people/leonardo-87-18", 
        "https://www.zhihu.com/people/zhen-tan-tao-zi", 
        "https://www.zhihu.com/people/fu-tian-huang", 
        "https://www.zhihu.com/people/zhang-wu-yang-82", 
        "https://www.zhihu.com/people/aries-64-3-2", 
        "https://www.zhihu.com/people/ge-bi-zheng-zhi-de-de-wang-ge-ge", 
        "https://www.zhihu.com/people/ma-yue-27-32", 
        "https://www.zhihu.com/people/du-yang-qin", 
        "https://www.zhihu.com/people/yang-guo-wei-72", 
        "https://www.zhihu.com/people/dang-nian-ming-yue-20-61", 
        "https://www.zhihu.com/people/ren-gan-16", 
        "https://www.zhihu.com/people/wang-xiao-er-4-25-96", 
        "https://www.zhihu.com/people/xu-zi-51-9", 
        "https://www.zhihu.com/people/yokimi-39", 
        "https://www.zhihu.com/people/cai-gen-jin-yan", 
        "https://www.zhihu.com/people/lotus-75-57", 
        "https://www.zhihu.com/people/huang-rui-73-99", 
        "https://www.zhihu.com/people/marry-su-96", 
        "https://www.zhihu.com/people/shui-li-fang-40", 
        "https://www.zhihu.com/people/meng-zi-wei-79", 
        "https://www.zhihu.com/people/mojimin", 
        "https://www.zhihu.com/people/furlong-12", 
        "https://www.zhihu.com/people/mu-mu-bo-98", 
        "https://www.zhihu.com/people/zhao-zhai-81", 
        "https://www.zhihu.com/people/ruige-99", 
        "https://www.zhihu.com/people/fengsibo", 
        "https://www.zhihu.com/people/lh7-64", 
        "https://www.zhihu.com/people/dong-fang-yu-85", 
        "https://www.zhihu.com/people/bwiyouhaha", 
        "https://www.zhihu.com/people/kang-yue-qun", 
        "https://www.zhihu.com/people/zhuan-shen-yi-tian-ya", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/mechanical_wang", 
        "https://www.zhihu.com/people/huang-yuan-29-83", 
        "https://www.zhihu.com/people/xue-xiao-bei-45", 
        "https://www.zhihu.com/people/zhang-yun-hong-75-8", 
        "https://www.zhihu.com/people/ning-meng-55-27", 
        "https://www.zhihu.com/people/wang-xuan-48-73", 
        "https://www.zhihu.com/people/zhuri008", 
        "https://www.zhihu.com/people/lambert-71-89", 
        "https://www.zhihu.com/people/xu-shang-liang-65", 
        "https://www.zhihu.com/people/littlekiddrew", 
        "https://www.zhihu.com/people/lin-yi-60-19", 
        "https://www.zhihu.com/people/dkzzw", 
        "https://www.zhihu.com/people/li-zi-li-zi-80", 
        "https://www.zhihu.com/people/li-de-le", 
        "https://www.zhihu.com/people/lu-xiu-cai-5", 
        "https://www.zhihu.com/people/wang-xiao-t-62", 
        "https://www.zhihu.com/people/tiger-26-33", 
        "https://www.zhihu.com/people/liu-ying-fu-5", 
        "https://www.zhihu.com/people/cll123-79", 
        "https://www.zhihu.com/people/spongebob-53-24", 
        "https://www.zhihu.com/people/xiao-ming-jiang", 
        "https://www.zhihu.com/people/xie-xie-31-20", 
        "https://www.zhihu.com/people/rainbow_jjh", 
        "https://www.zhihu.com/people/smart-jone", 
        "https://www.zhihu.com/people/kuai-le-de-ning-bao-bao", 
        "https://www.zhihu.com/people/han-pei-hua", 
        "https://www.zhihu.com/people/clownwenwen", 
        "https://www.zhihu.com/people/hui-qiao-dai-ma-de-xiao-ge-ge", 
        "https://www.zhihu.com/people/xiao-mi-feng-12", 
        "https://www.zhihu.com/people/Barrywan", 
        "https://www.zhihu.com/people/peter-46-19-95", 
        "https://www.zhihu.com/people/nu-fa-chong-guan-bao-wei-yan", 
        "https://www.zhihu.com/people/lust..", 
        "https://www.zhihu.com/people/ning-meng-xin-73-58", 
        "https://www.zhihu.com/people/bingo-8-5", 
        "https://www.zhihu.com/people/AI_Technology", 
        "https://www.zhihu.com/people/wang-qi-47", 
        "https://www.zhihu.com/people/hu-gui-feng-45", 
        "https://www.zhihu.com/people/lizhu", 
        "https://www.zhihu.com/people/outlight", 
        "https://www.zhihu.com/people/zhu-hao-yan-10", 
        "https://www.zhihu.com/people/xifengwugu", 
        "https://www.zhihu.com/people/bo-luo-qian-3", 
        "https://www.zhihu.com/people/zhou-xiao-64-47", 
        "https://www.zhihu.com/people/wang-xian-sen-72-96", 
        "https://www.zhihu.com/people/ni-sha-76-70", 
        "https://www.zhihu.com/people/tao-zi-55-65", 
        "https://www.zhihu.com/people/hw-llll", 
        "https://www.zhihu.com/people/yao-zhao-xu", 
        "https://www.zhihu.com/people/chi-huo-75-15", 
        "https://www.zhihu.com/people/sysuyanxp", 
        "https://www.zhihu.com/people/zhang-hui-lin-71-5", 
        "https://www.zhihu.com/people/rong-ge-72-4", 
        "https://www.zhihu.com/people/ruo-li-3-86", 
        "https://www.zhihu.com/people/zhang-san-66-7-72", 
        "https://www.zhihu.com/people/hu-ke-51-44", 
        "https://www.zhihu.com/people/he-hui-hui-32", 
        "https://www.zhihu.com/people/lingguang-kang", 
        "https://www.zhihu.com/people/meng-li-35", 
        "https://www.zhihu.com/people/nelson-cheng-23", 
        "https://www.zhihu.com/people/arthur-chiang", 
        "https://www.zhihu.com/people/yourSHISHU", 
        "https://www.zhihu.com/people/inner-peace", 
        "https://www.zhihu.com/people/zs930831", 
        "https://www.zhihu.com/people/ITPOPE", 
        "https://www.zhihu.com/people/ha-lz", 
        "https://www.zhihu.com/people/qin-feng-77", 
        "https://www.zhihu.com/people/wtzhang95", 
        "https://www.zhihu.com/people/nu-li-nu-li-er", 
        "https://www.zhihu.com/people/yang-zhao-94-43", 
        "https://www.zhihu.com/people/da-ka_ka", 
        "https://www.zhihu.com/people/yan-hui-60", 
        "https://www.zhihu.com/people/tian-wei-ye", 
        "https://www.zhihu.com/people/young-mao-72", 
        "https://www.zhihu.com/people/chi-mei-wang-liang-55-58", 
        "https://www.zhihu.com/people/luo-zheng-ming-21", 
        "https://www.zhihu.com/people/feiying-93", 
        "https://www.zhihu.com/people/LeonardoFibonacci", 
        "https://www.zhihu.com/people/tian-long-79-73", 
        "https://www.zhihu.com/people/zhang-mao-lin-44", 
        "https://www.zhihu.com/people/seeleblank", 
        "https://www.zhihu.com/people/cai-shou-gui", 
        "https://www.zhihu.com/people/xihua-chen", 
        "https://www.zhihu.com/people/yang-ye-79", 
        "https://www.zhihu.com/people/atonement-21", 
        "https://www.zhihu.com/people/zhang-cheng-56-6", 
        "https://www.zhihu.com/people/tan-wei-81", 
        "https://www.zhihu.com/people/xun-wang", 
        "https://www.zhihu.com/people/wen-lei-11-25", 
        "https://www.zhihu.com/people/deng-chao-9", 
        "https://www.zhihu.com/people/zh_wu", 
        "https://www.zhihu.com/people/deercoder", 
        "https://www.zhihu.com/people/hg-gaaa", 
        "https://www.zhihu.com/people/astimegoby", 
        "https://www.zhihu.com/people/hackeryoung", 
        "https://www.zhihu.com/people/zhang-zi-jie-35", 
        "https://www.zhihu.com/people/forhaoc", 
        "https://www.zhihu.com/people/liu-meng-yuan-72-95", 
        "https://www.zhihu.com/people/chen-xun-66", 
        "https://www.zhihu.com/people/Micro-Kun", 
        "https://www.zhihu.com/people/luan-xue-dong", 
        "https://www.zhihu.com/people/sun-feng-69", 
        "https://www.zhihu.com/people/dong-feng-zao-ji", 
        "https://www.zhihu.com/people/liu-fei-94-95", 
        "https://www.zhihu.com/people/curtis-grayson", 
        "https://www.zhihu.com/people/jiao-sha-hao-ni-95", 
        "https://www.zhihu.com/people/feng-xing-long-5", 
        "https://www.zhihu.com/people/lbbbb-45-71", 
        "https://www.zhihu.com/people/gu-lang-po-tian", 
        "https://www.zhihu.com/people/sunbird-86", 
        "https://www.zhihu.com/people/wu-xiao-bai-92", 
        "https://www.zhihu.com/people/homer-wong-33", 
        "https://www.zhihu.com/people/liu-da-xu", 
        "https://www.zhihu.com/people/cheng-zi-46-93", 
        "https://www.zhihu.com/people/xin-ba-33-19", 
        "https://www.zhihu.com/people/jiu-ye-20-63", 
        "https://www.zhihu.com/people/amy-63-9-56", 
        "https://www.zhihu.com/people/bu-ru-gui-qu-22-63", 
        "https://www.zhihu.com/people/chu-sheng-24", 
        "https://www.zhihu.com/people/fu-qing-76", 
        "https://www.zhihu.com/people/Gtesla-10-49-76", 
        "https://www.zhihu.com/people/gao-shan-72-16", 
        "https://www.zhihu.com/people/li-gong-zhi-90", 
        "https://www.zhihu.com/people/aewgtgwr", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/erin-79-23", 
        "https://www.zhihu.com/people/lin-lin-28-40", 
        "https://www.zhihu.com/people/lin-yuan-27-27"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/29677765", 
            "userName": "dragon five", 
            "userLink": "https://www.zhihu.com/people/ae25561a8212ab0ea0ed9e103aa1d6f6", 
            "upvote": 395, 
            "title": "机器学习算法面试小结", 
            "content": "<p>目录：</p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme4b88elre79a84e58cbae588ab_1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM与LR的区别</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4bb8ee6a8a1e59e8be8a7a3e586b3e997aee9a298e79a84e696b9e5bc8fe69da5e79c8b_2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从模型解决问题的方式来看</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b8a4e88085e79a84e58cbae588ab_3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">两者的区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e696b9e6b395e79a84e98089e68ba9_4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">方法的选择</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e5ba94e794a8e59cbae699afe696b9e99da2e4b88de5908c_5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">应用场景方面不同</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme98082e59088e5a484e79086e4bb80e4b988e6a0b7e79a84e695b0e68daeefbc9f_6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM适合处理什么样的数据？</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e69cbae599a8e5ada6e4b9a0e5b8b8e8a781e7ae97e6b395e680bbe7bb93_7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习常见算法总结</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e69cb4e7b4a0e8b49de58fb6e696af_8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">朴素贝叶斯</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7babfe680a7e59b9ee5bd92_9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">线性回归</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23lre59b9ee5bd92_10\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LR回归</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4bc98e58c96e997aee9a298e79a84e6b182e8a7a3e696b9e6b395_11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优化问题的求解方法</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6a2afe5baa6e4b88be9998de6b395_12\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">梯度下降法</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4bc98e58c96e6809de683b3_13\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优化思想</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7bcbae782b9_14\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">缺点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e689b9e9878fe6a2afe5baa6e4b88be9998de6b395_15\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">批量梯度下降法</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e99a8fe69cbae6a2afe5baa6e4b88be9998de6b395_16\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">随机梯度下降法</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7899be9a1bfe6b395_17\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">牛顿法</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7899be9a1bfe6b395e6af94e6a2afe5baa6e4b88be9998de6b395e5bfab_18\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">牛顿法比梯度下降法快</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e68b9fe7899be9a1bfe6b395_19\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拟牛顿法</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e68b89e6a0bce69c97e697a5e6b395_20\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拉格朗日法</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e69cbae599a8e5ada6e4b9a0e7ae97e6b395e98089e68ba9_21\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习算法选择</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e8b49de58fb6e696af_22\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">贝叶斯</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23ke8bf91e982bb_23\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">K近邻</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b889e8a681e7b4a0efbc9a_24\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三要素：</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23ke580bce79a84e98089e68ba9_25\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">k值的选择</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e58886e7b1bbe586b3e7ad96e8a784e58899_26\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">分类决策规则</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4bc98e7bcbae782b9efbc9a_27\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优缺点：</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23kde6a091_28\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">KD树</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e69e84e980a0kde6a091_29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">构造KD树</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23kde6a091e79a84e6909ce7b4a2_30\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">KD树的搜索</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e586b3e7ad96e6a091_31\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">决策树</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e99a8fe69cbae6a3aee69e97_32\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">随机森林</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e59fbae69cace6a682e5bfb5_33\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基本概念</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e58f82e695b0e8b083e88a82_34\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">参数调节</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23rfe4b88ee4bca0e7bb9fbagginge79a84e58cbae588ab_35\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RF与传统bagging的区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23rfe79a84e4bc98e782b9_36\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RF的优点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7bcbae782b9_37\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">缺点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23rfe79a84e5ada6e4b9a0e7ae97e6b395_38\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RF的学习算法</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23gbdt_39\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e59fbae69cace6a682e5bfb5_40\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基本概念</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23gbdte4b88ee4bca0e7bb9fboostingefbc88adaboostefbc89e79a84e58cbae588ab_41\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT与传统Boosting（AdaBoost）的区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23gbdte6ada3e58899e58c96e79a84e696b9e5bc8f_42\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT正则化的方式</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23gbdte79a84e4bc98e7bcbae782b9_43\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT的优缺点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23gbdte9a284e6b58be697b6e6af8fe4b880e6a3b5e6a091e698afe590a6e883bde5b9b6e8a18cefbc9f_44\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT预测时每一棵树是否能并行？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23gbdte5928crfe79a84e58cbae588abe4b88ee88194e7b3bb_45\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT和RF的区别与联系</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23xgbooste79bb8e6af94e4ba8egbdte69c89e4bd95e4b88de5908cefbc9fxgbooste4b8bae4bb80e4b988e5bfabefbc9fxgbooste5a682e4bd95e694afe68c81e5b9b6e8a18cefbc9f_46\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">XGBOOST相比于GBDT有何不同？XGBOOST为什么快？XGBOOST如何支持并行？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23ababoost_47\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ababoost</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e99b86e68890e5ada6e4b9a0e4b88ee696b9e5b7aee5818fe5b7ae_48\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">集成学习与方差偏差</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b8bae4bb80e4b988e8afb4bagginge698afe5878fe5b091varianceefbc8ce8808cboostinge698afe5878fe5b091bias_49\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么说bagging是减少variance，而boosting是减少bias?</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b8bae4bb80e4b988e68a8ae789b9e5be81e7bb84e59088e4b98be5908ee8bf98e883bde68f90e58d87_50\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么把特征组合之后还能提升</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e680bbe4bd93e680a7e997aee9a298_51\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">总体性问题</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e58886e7b1bbe4b88ee59b9ee5bd92e79a84e58cbae588ab_52\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">分类与回归的区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7949fe68890e6a8a1e59e8be4b88ee588a4e588abe6a8a1e59e8be79a84e58cbae588ab_53\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">生成模型与判别模型的区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7b2bee7a1aee78e87e38081e58face59b9ee78e87e38081f120e580bce38081roce38081auc20e59084e887aae79a84e4bc98e7bcbae782b9e698afe4bb80e4b988efbc9f_54\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">精确率、召回率、F1 值、ROC、AUC 各自的优缺点是什么？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e8bf87e68b9fe59088_55\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">过拟合</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7babfe680a7e58886e7b1bbe599a8e4b88ee99d9ee7babfe680a7e58886e7b1bbe599a8e79a84e58cbae588abe4bba5e58f8ae4bc98e58aa3_56\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">线性分类器与非线性分类器的区别以及优劣</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6a0b7e69cace4b88de59d87e8a1a1e5a682e4bd95e8a7a3e586b3_57\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">样本不均衡如何解决</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e9878de98787e6a0b7efbc88resamplingefbc89e68a80e69cafefbc9a_58\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">重采样（resampling）技术：</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6b7b1e5baa6e5ada6e4b9a0e696b9e99da2e79a84e997aee9a298_59\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习方面的问题</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6b7b1e5baa6e5ada6e4b9a0e79a84e5ae9ee8b4a820e58f8ae585b620e4b88ee6b585e5b182e5ada6e4b9a0e79a84e58cbae588ab_60\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习的实质 及其 与浅层学习的区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23bpe7ae97e6b395e4b8bae4bb80e4b988e4b88de883bde98082e5ba94e4ba8ee6b7b1e5baa6e5ada6e4b9a0_61\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BP算法为什么不能适应于深度学习</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23cnne58db7e59fbae5b182e5928cpoolinge5b182e79a84e4bd9ce794a8_62\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CNN卷基层和pooling层的作用</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23dnne5b8b8e794a8e79a84e6bf80e6b4bbe587bde695b0e69c89e593aae4ba9befbc8ce59084e69c89e4bb80e4b988e789b9e782b9_63\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DNN常用的激活函数有哪些，各有什么特点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e8a7a3e586b3relue7a59ee7bb8fe58583e59d8fe6adbbe997aee9a298_64\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">解决relu神经元坏死问题</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4bb80e4b988e6a0b7e79a84e8b584e69699e4b88de98082e59088e794a8e6b7b1e5baa6e5ada6e4b9a0efbc9f_65\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">什么样的资料不适合用深度学习？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4bb80e4b988e698afe585b1e7babfe680a7efbc8ce8b79fe8bf87e68b9fe59088e69c89e4bd95e585b3e88194efbc9f_66\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">什么是共线性，跟过拟合有何关联？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23poolinge68a80e69cafe69c89e593aae4ba9befbc8ce69c89e4bb80e4b988e4bd9ce794a8e69c89e4bb80e4b988e58cbae588ab_67\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pooling技术有哪些，有什么作用,有什么区别</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23poolinge79a84e58f8de59091e4bca0e692ad_68\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pooling的反向传播</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e789b9e5be81e98089e68ba9e79a84e696b9e6b395_69\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特征选择的方法</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e789b9e5be81e98089e68ba9e696b9e6b395e4b8bee4be8b_70\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特征选择方法举例</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e789b9e5be81e98089e68ba9e696b9e6b395e58886e7b1bb_71\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">特征选择方法分类</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23filtere8bf87e6bba4e6b395_72\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Filter过滤法</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23embedded20e99b86e68890e696b9e6b395_73\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Embedded 集成方法</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e9998de7bbb4_74\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">降维</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23lre79bb8e585b3e997aee9a298_75\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LR相关问题</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23lre4b88ebp_76\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LR与BP</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23lre4b8bae4bb80e4b988e4bdbfe794a8sigmoide587bde695b0_77\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LR为什么使用sigmoid函数</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b8bae4bb80e4b988lre68a8ae789b9e5be81e7a6bbe695a3e58c96e5908ee69588e69e9ce69bb4e5a5bd_78\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么LR把特征离散化后效果更好</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e5a682e4bd95e794a8lre5bbbae7ab8be4b880e4b8aae5b9bfe5918ae782b9e587bbe79a84e6a8a1e59e8befbc9a_79\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何用LR建立一个广告点击的模型：</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23lre79a84e8bf87e68b9fe59088_80\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LR的过拟合</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e585b3e4ba8elre79a84e5a49ae58886e7b1bbefbc9asoftmax_81\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于LR的多分类：softmax</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme79bb8e585b3e997aee9a298_82\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM相关问题</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme79a84e4b8bbe8a681e789b9e782b9_83\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM的主要特点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7bcbae782b9efbc9a_84\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">缺点：</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b8bae4bb80e4b988e8a681e5bc95e585a5e5afb9e581b6e997aee9a298_85\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么要引入对偶问题</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6a0b7e69cace5a4b1e8a1a1e79a84e5bdb1e5938d_86\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">样本失衡的影响</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6a0b7e69cace5a4b1e8a1a1e697b6efbc8ce5a682e4bd95e8af84e4bbb7e58886e7b1bbe599a8e79a84e680a7e883bde5a5bde59d8fefbc9f_87\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">样本失衡时，如何评价分类器的性能好坏？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e6a0b7e69cace6b2a1e69c89e8a784e88c83e58c96e5afb9svme69c89e4bb80e4b988e5bdb1e5938defbc9f_88\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">样本没有规范化对SVM有什么影响？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e695b0e68daee7bbb4e5baa6e5a4a7e4ba8ee695b0e68daee9878fe79a84e5afb9svme79a84e5bdb1e5938defbc9f_89\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据维度大于数据量的对SVM的影响？</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e68b89e6a0bce69c97e697a5e4b998e5ad90e6b39520e5928ckkte69da1e4bbb6_90\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拉格朗日乘子法 和KKT条件</a></li><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e587b8e587bde695b0_91\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">凸函数</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e7ad89e5bc8fe69da1e4bbb6e7baa6e69d9f_92\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">等式条件约束</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b88de7ad89e5bc8fe7baa6e69d9fe4b88ekkte69da1e4bbb6_93\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不等式约束与KKT条件</a></li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme79a84e58e9fe997aee9a298e5928ce5afb9e581b6e997aee9a298_94\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM的原问题和对偶问题</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23e4b8bae4bb80e4b988e8a681e5bc95e585a5e5afb9e581b6e7ae97e6b395_95\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么要引入对偶算法</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme8a7a3e586b3e8bf87e68b9fe59088e79a84e696b9e6b395_96\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM解决过拟合的方法</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme4bc98e7bcbae782b9_97\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM优缺点</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23smoe7ae97e6b395_98\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SMO算法</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23svme5a49ae58886e7b1bbe997aee9a298_99\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SVM多分类问题</a></li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//markdown.xiaoshujiang.com/preview.html%23reference_100\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">reference</a></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>机器学习是做NLP和计算机视觉这类应用算法的基础，虽然现在深度学习模型大行其道，但是懂一些传统算法的原理和它们之间的区别还是很有必要的。可以帮助我们做一些模型选择。本篇博文就总结一下各种机器学习算法的特点和应用场景。本文是笔者结合自身面试中遇到的问题和总结网络上的资源得到的，所有引用已给出链接，如侵删。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-0d4c70a99717851c75f67ce5719f81fb_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"300\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"400\" data-rawheight=\"300\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic4.zhimg.com/v2-0d4c70a99717851c75f67ce5719f81fb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>机器学习</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM与LR的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>从模型解决问题的方式来看</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>Linear SVM直观上是trade-off两个量</p><p class=\"ztext-empty-paragraph\"><br/></p><p>a large margin，就是两类之间可以画多宽的gap ；不妨说是正样本应该在分界平面向左gap/2（称正分界），负样本应该在分解平面向右gap/2（称负分界）</p><p>L1 error penalty，对所有不满足上述条件的点做L1 penalty</p><p class=\"ztext-empty-paragraph\"><br/></p><p>给定一个数据集，一旦完成Linear SVM的求解，所有数据点可以被归成两类</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一类是落在对应分界平面外并被正确分类的点，比如落在正分界左侧的正样本或落在负分界右侧的负样本</p><p>第二类是落在gap里或被错误分类的点。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>假设一个数据集已经被Linear SVM求解，那么往这个数据集里面增加或者删除更多的一类点并不会改变重新求解的Linear SVM平面。不受数据分布的影响。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>求解LR模型过程中，<b>每一个数据点对分类平面都是有影响的</b>，它的影响力远离它到分类平面的距离指数递减。换句话说，LR的解是<b>受数据本身分布</b>影响的。在实际应用中，如果数据维度很高，LR模型都会配合参数的L1 regularization。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>两者的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>两个模型对<b>数据和参数</b>的敏感程度不同，Linear SVM比较依赖penalty的系数和<b>数据表达空间的测度</b>，而（带正则项的）LR<b>比较依赖对参数做L1 regularization的系数</b>。但是由于他们或多或少都是线性分类器，所以实际上对低维度数据overfitting的能力都比较有限，相比之下对高维度数据，LR的表现会更加稳定，为什么呢？因为Linear SVM在计算margin有多“宽”的时候是依赖数据表达上的距离测度的，换句话说如果这个测度不好（badly scaled，这种情况在高维数据尤为显著），所求得的所谓Large margin就没有意义了，这个问题即使换用kernel trick（比如用Gaussian kernel）也无法完全避免。所以使用Linear SVM之前一般都需要先对数据做normalization，而求解LR（without regularization）时则不需要或者结果不敏感。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Linear SVM和LR都是线性分类器<br/>Linear SVM不直接依赖数据分布，分类平面不受一类点影响；<b>LR则受所有数据点的影响，如果数据不同类别strongly unbalance一般需要先对数据做balancing</b>。<br/>Linear SVM<b>依赖数据表达的距离测度，所以需要对数据先做normalization</b>；LR不受其影响<br/>Linear SVM依赖penalty的系数，实验中需要做validation<br/>Linear SVM和LR的performance都会收到outlier的影响，其敏感程度而言，谁更好很难下明确结论。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>balance的方法</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>调整正、负样本在求cost时的权重，比如按比例加大正样本cost的权重。然而deep learning的训练过程是on-line的因此你需要按照batch中正、负样本的比例调整。</p><p>做训练样本选取：如hard negative mining，只用负样本中的一部分。</p><p>做训练样本选取：如通过data augmentation扩大正样本数量。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>过拟合方面</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>LR容易欠拟合，准确度低。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>SVM不太容易过拟合：松弛因子+损失函数形式</p><p class=\"ztext-empty-paragraph\"><br/></p><p>注意SVM的求解方法叫拉格朗日乘子法，而对于均方误差的优化方法是最小二乘法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>方法的选择</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>在Andrew NG的课里讲到过：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果Feature的数量很大，跟样本数量差不多，这时候选用LR或者是Linear Kernel的SVM</p><p>如果Feature的数量比较小，样本数量一般，不算大也不算小，选用SVM+Gaussian Kernel</p><p>如果Feature的数量比较小，而样本数量很多，需要手工添加一些feature变成第一种情况</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当你的数据非常非常非常非常非常大然后完全跑不动SVM的时候，跑LR。SVM适合于小样本学习。多大算是非常非常非常非常非常非常大？ 比如几个G，几万维特征，就勉强算大吧...而实际问题上几万个参数实在完全不算个事儿，太常见了。随随便便就得上spark。读一遍数据就老半天，一天能训练出来的模型就叫高效了。所以在新时代，LR其实反而比以前用的多了=. =</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>应用场景方面不同</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>拟合程度，样本量，</p><p class=\"ztext-empty-paragraph\"><br/></p><p>距离测度，数据balance</p><p class=\"ztext-empty-paragraph\"><br/></p><p>模型简单易解释</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果数据特征维度高，svm要使用核函数来求解</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Note：拉格朗日对偶没有改变最优解，但改变了算法复杂度：原问题—样本维度；对偶问题–样本数量。所以 线性分类&amp;&amp;样本维度&lt;样本数量：原问题求解（liblinear默认）； 非线性–升维—一般导致 样本维度&gt;样本数量：对偶问题求解</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM适合处理什么样的数据？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>高维稀疏，样本少。【参数只与支持向量有关，数量少，所以需要的样本少，由于参数跟维度没有关系，所以可以处理高维问题】</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>机器学习常见算法总结</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//kubicode.me/2015/08/16/Machine%2520Learning/Algorithm-Summary-for-Interview/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习常见算法个人总结（面试用）</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>朴素贝叶斯</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>朴素贝叶斯的<b>优点</b>：<br/>对小规模的数据表现很好，适合多分类任务，适合增量式训练。<br/><b>缺点</b>：<br/>对输入数据的表达形式很敏感（离散、连续，值极大极小之类的）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>线性回归</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>线性回归试图学得一个线性模型以尽可能准确地预测实值输出标记。均方误差是回归任务中最常用的性能度量，基于均方误差最小化来进行模型求解的方法成为最小二乘法。在线性回归中，最小二乘法就是试图找到一条直线，使得<b>所有样本到直线上的欧式距离之和最小</b>。这个想法和分类问题是正好相反的，分类问题是找到一个分界面离所有样本尽可能远。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>优化方法</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>当x矩阵是列满秩的时候，可以用最小二乘法，但是求矩阵的逆比较慢<br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-7f37d344ebe6b46aa846065527534a96_b.jpg\" data-rawwidth=\"216\" data-rawheight=\"61\" class=\"content_image\" width=\"216\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;216&#39; height=&#39;61&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"216\" data-rawheight=\"61\" class=\"content_image lazy\" width=\"216\" data-actualsrc=\"https://pic3.zhimg.com/v2-7f37d344ebe6b46aa846065527534a96_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>梯度下降法，以最大似然估计的结果对权值求梯度，sigmoid函数也是如此</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-35ab5dbffc8a38be3775286bea6becd3_b.jpg\" data-rawwidth=\"273\" data-rawheight=\"38\" class=\"content_image\" width=\"273\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;273&#39; height=&#39;38&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"273\" data-rawheight=\"38\" class=\"content_image lazy\" width=\"273\" data-actualsrc=\"https://pic4.zhimg.com/v2-35ab5dbffc8a38be3775286bea6becd3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>均方无法的概率解释</b><br/>假设根据特征的预测结果与实际结果有误差∈ (i) ,那么预测结果θ T x (i) 和真实结果y (i) 满足下<br/>式:<br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-32bb3b7eb50ee5cf071b8f0937fd06b6_b.jpg\" data-rawwidth=\"185\" data-rawheight=\"51\" class=\"content_image\" width=\"185\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;185&#39; height=&#39;51&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"185\" data-rawheight=\"51\" class=\"content_image lazy\" width=\"185\" data-actualsrc=\"https://pic3.zhimg.com/v2-32bb3b7eb50ee5cf071b8f0937fd06b6_b.jpg\"/></figure><p>一般来讲,误差满足平均值为 0 的高斯分布,也就是正态分布。那么 x 和 y 的条件概率也就<br/>是<br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-9d15533745d93ce9539ed0c84c78e86b_b.jpg\" data-rawwidth=\"407\" data-rawheight=\"60\" class=\"content_image\" width=\"407\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;407&#39; height=&#39;60&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"407\" data-rawheight=\"60\" class=\"content_image lazy\" width=\"407\" data-actualsrc=\"https://pic4.zhimg.com/v2-9d15533745d93ce9539ed0c84c78e86b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>用条件概率最大似然估计法得到：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-17792c6c39f4ee0a3687ba63e51de191_b.jpg\" data-rawwidth=\"192\" data-rawheight=\"67\" class=\"content_image\" width=\"192\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;192&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"192\" data-rawheight=\"67\" class=\"content_image lazy\" width=\"192\" data-actualsrc=\"https://pic2.zhimg.com/v2-17792c6c39f4ee0a3687ba63e51de191_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>LR回归</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-2d27c0b246c8df7561a1592990e21124_b.jpg\" data-rawwidth=\"275\" data-rawheight=\"128\" class=\"content_image\" width=\"275\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;275&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"275\" data-rawheight=\"128\" class=\"content_image lazy\" width=\"275\" data-actualsrc=\"https://pic1.zhimg.com/v2-2d27c0b246c8df7561a1592990e21124_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p>回归用来分类 0/1 问题,也就是预测结果属于 0 或者 1 的二值分类问题</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-e529ec0649ffd4ee647f9ce75848d6e3_b.jpg\" data-rawwidth=\"267\" data-rawheight=\"72\" class=\"content_image\" width=\"267\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;267&#39; height=&#39;72&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"267\" data-rawheight=\"72\" class=\"content_image lazy\" width=\"267\" data-actualsrc=\"https://pic4.zhimg.com/v2-e529ec0649ffd4ee647f9ce75848d6e3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>仍然求的是最大似然估计,然后求导,得到迭代公式结果为，梯度下降法：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-1951a28a4e0446e62695ceb41f0bf053_b.jpg\" data-rawwidth=\"269\" data-rawheight=\"42\" class=\"content_image\" width=\"269\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;269&#39; height=&#39;42&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"269\" data-rawheight=\"42\" class=\"content_image lazy\" width=\"269\" data-actualsrc=\"https://pic4.zhimg.com/v2-1951a28a4e0446e62695ceb41f0bf053_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>优化问题的求解方法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/maybe2030/p/4751804.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Math] 常见的几种最优化方法</a><br/>大部分的机器学习算法的本质都是建立优化模型，通过最优化方法对目标函数（或损失函数）进行优化，从而训练出最好的模型。常见的最优化方法有梯度下降法、牛顿法和拟牛顿法、共轭梯度法等等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>梯度下降法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>优化思想</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>当目标函数是凸函数时，梯度下降法的解是全局解。一般情况下，其解不保证是全局最优解，梯度下降法的速度也未必是最快的。梯度下降法的优化思想是用当前位置负梯度方向作为搜索方向，因为该方向为当前位置的最快下降方向，所以也被称为是”最速下降法“。最速下降法越接近目标值，步长越小，前进越慢。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>缺点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>梯度下降法的最大问题就是会陷入局部最优，靠近极小值时收敛速度减慢。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>批量梯度下降法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>最小化所有训练样本的损失函数，使得最终求解的是全局的最优解，即求解的参数是使得风险函数最小，但是对于<b>大规模样本问题效率低下</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>随机梯度下降法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>最小化每条样本的损失函数，虽然不是每次迭代得到的损失函数都向着全局最优方向， 但是大的整体的方向是向全局最优解的，最终的结果往往是在全局最优解附近，适用于<b>大规模训练样本</b>情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>随机梯度下降是通过每个样本来迭代更新一次，如果样本量很大的情况（例如几十万），那么可能<b>只用其中几万条或者几千条的样本</b>，就已经将theta迭代到最优解了，对比上面的批量梯度下降，迭代一次需要用到十几万训练样本，一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。但是，SGD伴随的一个问题是<b>噪音</b>较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>牛顿法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>牛顿法是一种在实数域和复数域上近似求解方程的方法。方法使用函数f (x)的<b>泰勒级数的前面几项</b>来寻找方程f (x) = 0的根。牛顿法最大的特点就在于它的收敛速度很快。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-91e6893caa470e4c320b8a128e3a9a6a_b.jpg\" data-rawwidth=\"223\" data-rawheight=\"64\" class=\"content_image\" width=\"223\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;223&#39; height=&#39;64&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"223\" data-rawheight=\"64\" class=\"content_image lazy\" width=\"223\" data-actualsrc=\"https://pic3.zhimg.com/v2-91e6893caa470e4c320b8a128e3a9a6a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>迭代公式</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>牛顿法比梯度下降法快</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>牛顿法是二阶收敛，梯度下降是一阶收敛，所以牛顿法就更快。如果更通俗地说的话，比如你想找一条最短的路径走到一个盆地的最底部，梯度下降法每次只从你当前所处位置选一个坡度最大的方向走一步，牛顿法在选择方向时，不仅会考虑坡度是否够大，还会考虑你走了一步之后，坡度是否会变得更大。所以，可以说牛顿法比梯度下降法看得更远一点，能更快地走到最底部。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但是牛顿法要<b>算hessian矩阵的逆</b>，比较费时间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>拟牛顿法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>　拟牛顿法的本质思想是改善牛顿法每次需要求解复杂的Hessian矩阵的逆矩阵的缺陷，它使<b>用正定矩阵来近似Hessian矩阵的逆</b>，从而简化了运算的复杂度。拟牛顿法和最速下降法一样只要求每一步迭代时知道目标函数的梯度。通过测量梯度的变化，构造一个目标函数的模型使之足以产生超线性收敛性。这类方法大大优于最速下降法，尤其对于困难的问题。另外，因为拟牛顿法不需要二阶导数的信息，所以有时比牛顿法更为有效。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>拉格朗日法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/maybe2030/p/4946256.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拉格朗日乘数法</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>拉格朗日乘子法主要用于解决约束优化问题，它的基本思想就是通过引入拉格朗日乘子来将含有n个变量和k个约束条件的约束优化问题转化为含有（n+k）个变量的无约束优化问题。拉格朗日乘子背后的数学意义是其为约束方程梯度线性组合中每个向量的系数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>通过引入拉格朗日乘子建立极值条件，对n个变量分别求偏导对应了n个方程，然后加上k个约束条件（对应k个拉格朗日乘子）一起构成包含了（n+k）变量的（n+k）个方程的方程组问题，这样就能根据求方程组的方法对其进行求解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>机器学习算法选择</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/26726794\" class=\"internal\">机器学习算法选择</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>随机森林平均来说最强，但也只在9.9%的数据集上拿到了第一，优点是鲜有短板。SVM的平均水平紧随其后，在10.7%的数据集上拿到第一。神经网络（13.2%）和boosting（~9%）表现不错。数据维度越高，随机森林就比AdaBoost强越多，但是整体不及SVM<a href=\"https://link.zhihu.com/?target=https%3A//www.github.com/DragonFive/CVBasicOp/raw/master/1505183290340.jpg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2</a>。数据量越大，神经网络就越强。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>贝叶斯</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>是相对容易理解的一个模型，至今依然被垃圾邮件过滤器使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>K近邻</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>典型的例子是KNN，它的思路就是——对于待判断的点，找到离它最近的几个数据点，根据它们的类型决定待判断点的类型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>它的特点是完全跟着数据走，没有数学模型可言。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>三要素：</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>k值的选择</p><p>距离的度量（常见的距离度量有欧式距离，马氏距离等）</p><p>分类决策规则 （多数表决规则）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>k值的选择</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>k值越小表明模型越复杂，更加容易过拟合</p><p>但是k值越大，模型越简单，如果k=N的时候就表明无论什么点都是训练集中类别最多的那个类</p><blockquote>所以一般k会取一个较小的值，然后用过交叉验证来确定<br/>这里所谓的交叉验证就是将样本划分一部分出来为预测样本，比如95%训练，5%预测，然后k分别取1，2，3，4，5之类的，进行预测，计算最后的分类误差，选择误差最小的k</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>分类决策规则</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>找到最近的k个实例之后，可以计算平均值作为预测值，也可以给这k个实例加上一个权重再求平均值，这个权重与度量距离成反比（越近权重越大）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>优缺点：</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>优点</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>思想简单</p><p>可用于非线性分类</p><p>训练时间复杂度为O(n)</p><p>准确度高，对outlier不敏感<br/><b>缺点</b></p><p>计算量大</p><p>样本不平衡问题不适用</p><p>需要大量的内存</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>KD树</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>KD树是一个二叉树，表示对<b>K维空间</b>的一个划分，可以进行快速检索</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>构造KD树</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>在k维的空间上循环找子区域的中位数进行划分的过程。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>假设现在有K维空间的数据集： , </p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先构造根节点，以坐标的中位数b为切分点，将根结点对应的矩形局域划分为两个区域，区域1中,区域2中</p><p>构造叶子节点，分别以上面两个区域中的中位数作为切分点，再次将他们两两划分，作为深度1的叶子节点，（如果a2=中位数，则a2的实例落在切分面）</p><p>不断重复2的操作，深度为j的叶子节点划分的时候，索取的 的，直到两个子区域没有实例时停止</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>KD树的搜索</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>首先从根节点开始递归往下找到包含x的叶子节点，每一层都是找对应的xi</p><p>将这个叶子节点认为是当前的“近似最近点”</p><p>递归向上回退，如果以x圆心，以“近似最近点”为半径的球与根节点的<b>另一半子区域</b>边界相交，则说明另一半子区域中存在与x更近的点，则进入另一个子区域中查找该点并且更新”近似最近点“</p><p>重复3的步骤，直到另一子区域与球体不相交或者退回根节点</p><p>最后更新的”近似最近点“与x真正的最近点</p><p class=\"ztext-empty-paragraph\"><br/></p><p>log(n)</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>决策树</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>决策树的特点是它总是在沿着特征做切分。随着层层递进，这个划分会越来越细。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为它能够生成清晰的基于特征(feature)选择不同预测结果的树状结构</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>随机森林</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/u010496169/article/details/73743973\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">器学习岗位面试问题汇总 之 集成学习</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>基本概念</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/Snoopy_Yuan/article/details/75808006\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">天池离线赛 - 移动推荐算法（四）：基于LR, RF, GBDT等模型的预测</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>它首先随机选取不同的特征(feature)和训练样本(training sample)<b>bagging</b>，生成大量的决策树，然后综合这些决策树的结果来进行最终的分类。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>随机森林在现实分析中被大量使用，它相对于决策树，在准确性上有了很大的提升</p><p class=\"ztext-empty-paragraph\"><br/></p><p>适用场景：<b>数据维度相对低</b>（几十维），同时对准确性有较高要求时。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>参数调节</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>是一种基于决策树基模型的集成学习方法，其核心思想是通过<b>特征采样来降低训练方差</b>，提高集成泛化能力。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>max_depth 属于基学习器参数，它控制着每个决策树的深度，一般来说，<b>决策树越深，模型拟合的偏差越小</b>，但同时拟合的开销也越大。一般地，需要保证足够的树深度，但也不宜过大。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>RF与传统bagging的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）<b>样本采样</b>：RF<b>有放回</b>选取和整体样本数目相同的样本，一般bagging用的样本&lt;总体样本数<br/>（2）<b>特征采样</b>：RF对特征进行采样，BAGGING用全部特征</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>RF的优点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）在数据集上表现良好，在当先很多数据集上要<b>优于现有的很多算法</b><br/>（2）可以<b>并行</b>，且<b>不是对所有属性</b>进行训练，训练速度相对较快<br/>（3）防止过拟合<br/>（4）能够处理高维特征，且不用做特征选择，可以给出<b>特征重要性的评分</b>，训练过程中，可以检测到feature的相互影响</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>缺点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>①树越多，随机森林的表现才会越稳定。所以在实际使用随机森林的时候需要注意如果树不够多的时候，可能会导致不稳定的情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>②不平衡数据集。分类结果会倾向于样本多的类别，所以训练样本中各类别的数据必须相同。Breiman在实际实现该算法的时候有考虑到了这个问题，采取了根据样本类别比例对决策树的判断赋予不同权值的方法</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>RF的学习算法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>ID3：离散<br/>C4.5：连续<br/>CART：离散或连续</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>GBDT</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>基本概念</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>GBDT（梯度迭代决策树）是一种基于<b>决策回归树的Boosting</b>模型，其核心思想是将提升过程建立在对“<b>之前残差的负梯度表示</b>”的回归拟合上，通过不断的迭代实现降低偏差的目的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>GBDT设置大量基学习器的目的是为了集成来<b>降低偏差</b>，所以 n_estimators （基决策器的个数）一般会设置得大一些。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于GBDT模型来说，其每个基学习器是一个弱学习器(欠拟合)，<b>决策树的深度一般设置得比较小，以此来降低方差</b>（模型复杂度低），之后在经过残差逼近迭代来降低偏差，从而形成强学习器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>GBDT与传统Boosting（AdaBoost）的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>Boosting算法，但与传统boosting有区别、<b>拟合上一步的残差</b>，传统意义上说不能并行，只能用CART回归树，降低偏差</p><p class=\"ztext-empty-paragraph\"><br/></p><p>迭代思路不同：传统boosting对训练样本进行加权，GBDT则是<b>拟合残差</b>，下一棵树沿残差梯度下降的方向进行拟合</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>GBDT正则化的方式</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）同AdaBoost，通过步长<br/>（2）CART树的剪枝<br/>（3）子抽样，<b>不放回</b>，SGBT，可以实现一定程度上的并行</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>GBDT的优缺点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>优点：（1）调参少的情况下，<b>准确率也高</b>（SVM）<br/>（2）灵活处理各种数据，包括连续和离散，无需归一化处理（LR）<br/>（3）模型非线性变换多，特征不用经过复杂处理即<b>可表达复杂信息</b><br/>（4）从一定程度上可以防止过拟合，小步而非大步拟合<br/>缺点：（1）一般来说传统的GBDT只能串行，但是也可以通过子采样比例（0.5~0.8）实现某种意义上的并行，但一般这就不叫GBDT了。<br/>（2）<b>对异常值敏感</b>，但是可以采取一些健壮的损失函数缓解，如Huber./Quantile损失函数</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>GBDT预测时每一棵树是否能并行？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>可以，训练需串行，<b>预测可并行</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>GBDT和RF的区别与联系</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>联系：多棵树进行训练+多棵树共同进行预测<br/>区别：（1）取样方式<br/>（2）预测时，RF多数投票，GBDT加权累加<br/>（3）样本的关系—&gt;并行和串行<br/>（4）学期器的种类，<b>GBDT只能用CART回归树</b> (因为要计算连续梯度)<br/>（5）对异常值的敏感性<br/>（6）通过减少方差/偏差提高性能</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>XGBOOST相比于GBDT有何不同？XGBOOST为什么快？XGBOOST如何支持并行？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）GBDT只能用CART回归树，而XGBOOST可以用CART树（回归/分类）,还可以用用想LR之类的线性模型，相当于加入L1、L2正则项的LR或线性回归<br/>（2）列抽样，可以并行，不是树粒度上的，是特征粒度上的，block块，并行计算所有信息增益等信息<br/>（3）可处理多种特征，且对缺失值也不用进行处理<br/>（4）GBDT在<b>残差梯度下降方向拟合，一阶导；XGBOOST泰勒展开至二阶导</b><br/>（5）近似直方图算法，高效生产候选分割点<br/>（6）shrink，缩减，叶子节点同时乘，防止过拟合<br/>（7）可以自己定义评价函数<br/>（8）代价函数含正则化项，防止过拟合</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>ababoost</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>daBoost的优缺点<br/>优点：（1）容易理解、实现简单<br/>（2）易编码<br/>（3）分类精度高<br/>（4）可以使用各种回归模型构建基分类器，非常灵活<br/>（5）作为二元分类器是，构造简单、结果可理解、少参数<br/>（6）相对来说，不宜过拟合<br/>缺点：（1）只能<b>串行</b><br/>（2）对<b>异常值敏感</b> boosting对异常值敏感</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>集成学习与方差偏差</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>我觉得，避免偏差的话，首先我们需要尽量选择正确的模型，所谓“对症下药”。我觉得有位同行把机器学习算法的使用比作医生开药方，是非常不错的比喻。我们要根据数据的分布和特点，选择合适的算法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其次，有了合适的算法，我们还要慎重选择数据集的大小。通常训练数据集越大越好，但是当大到数据集已经对整体所有数据有了一定的代表性之后，再多的数据已经不能提升模型的准确性，反而带来模型训练的计算量增加。但是，训练数据太少的话是一定不好的，这会带来过拟合的问题，过拟合就是模型复杂度太高，方差很大，不同的数据集训练出来的模型变化非常大</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-84f75ee0948fa021c20b33caa9aba13e_b.jpg\" data-rawwidth=\"433\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic3.zhimg.com/v2-84f75ee0948fa021c20b33caa9aba13e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"433\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic3.zhimg.com/v2-84f75ee0948fa021c20b33caa9aba13e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-84f75ee0948fa021c20b33caa9aba13e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>偏差与方差</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/xmu_jupiter/article/details/47314927\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从集成学习到模型的偏差和方差的理解</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/jasonfreak/p/5657196.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">使用sklearn进行集成学习——理论</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/yangxudong/article/details/53899260\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GBDT算法特征重要程度计算</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/28641663\" class=\"internal\">机器学习中，有哪些特征选择的工程方法？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>为什么说bagging是减少variance，而boosting是减少bias?</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>从机制上讲</b> <a href=\"https://www.zhihu.com/question/26760839\" class=\"internal\">为什么说bagging是减少variance，而boosting是减少bias</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>若各<b>子模型独立</b>，则有</p><p class=\"ztext-empty-paragraph\"><br/></p><p>，此时可以显著降低variance。若<b>各子模型完全相同</b>，则</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>，此时不会降低variance。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Bagging 是 Bootstrap Aggregating 的简称，意思就是再取样 (Bootstrap) 然后在每个样本上训练出来的模型取平均。<br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-d7fd9a40e9c6c40fae344d90b0d8aaa1_b.jpg\" data-rawwidth=\"129\" data-rawheight=\"40\" class=\"content_image\" width=\"129\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;129&#39; height=&#39;40&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"129\" data-rawheight=\"40\" class=\"content_image lazy\" width=\"129\" data-actualsrc=\"https://pic2.zhimg.com/v2-d7fd9a40e9c6c40fae344d90b0d8aaa1_b.jpg\"/></figure><p>，所以从偏差上看没有降低，但是由于各个子模型是单独训练的，有一定的独立性，所以方差降低比较多,<b>提高泛化能力</b>。特别是random forest这种方式，不仅对样本取样，还有特征取样。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>boosting从优化角度来看，是用forward-stagewise这种贪心法去最小化损失函数，在这个过程中偏差是逐步减小的，而由于各阶段分类器之间相关性较强，方差降低得少。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>举个例子</b><br/>gbdt是boosting的方式，它的决策树的深度比较小，模型会欠拟合，刚开始偏差大，后来就慢慢变小了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>为什么把特征组合之后还能提升</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>反正这些基本都是增强了特征的表达能力，或者说更容易线性可分吧</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>总体性问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>分类与回归的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>分类和回归的区别在于输出变量的类型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>定量输出称为回归，或者说是连续变量预测；<br/>定性输出称为分类，或者说是离散变量预测。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>生成模型与判别模型的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>有监督机器学习方法可以分为生成方法和判别方法（常见的生成方法有混合高斯模型、朴素贝叶斯法和隐形马尔科夫模型等，常见的判别方法有SVM、LR等），生成方法学习出的是生成模型，判别方法学习出的是判别模型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>监督学习，预测时，一般都是在求p(Y|X)生成模型： 从数据中学习联合概率分布p(X,Y)，然后利用贝叶斯公式求：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>，比如说朴素贝叶斯</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>判别模型：直接学习P(Y|X)， 它直观输入什么特征X，就直接预测出最可能的Y; 典型的模型包括：LR, SVM,CRF,Boosting,Decision tree....</p><p class=\"ztext-empty-paragraph\"><br/></p><p>生成方法的特点：生成方法可以还原联合概率分布，而判别方法则不能；生成方法的学习<b>收敛速度更快</b>，即当样本容量增加的时候，学习的模型可以更快的收敛于真实的模型；当存在<b>隐变量</b>时，仍可以用生成方法学习，此时判别方法就不能用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>判别方法的特点：判别方法直接学习的是条件概率或者决策函数，直接面对预测，往往学习的准确率更高；由于直接学习或者，可以对数据进行各种程度上的抽象、定义特征并使用特征，因此可以<b>简化学习问题</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>精确率、召回率、F1 值、ROC、AUC 各自的优缺点是什么？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-99697d722b9652f6b20661078613587f_b.jpg\" data-rawwidth=\"504\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb\" width=\"504\" data-original=\"https://pic4.zhimg.com/v2-99697d722b9652f6b20661078613587f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;504&#39; height=&#39;192&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"504\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"504\" data-original=\"https://pic4.zhimg.com/v2-99697d722b9652f6b20661078613587f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-99697d722b9652f6b20661078613587f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>精确率（Precision）为TP/(TP+FP)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>召回率（Recall）为TP/(TP+FN)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>F1值是精确率和召回率的调和均值，即F1=2PR/(P+R）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>ROC曲线（Receiver operating characteristic curve），ROC曲线其实是多个混淆矩阵的结果组合，如果在上述模型中我们没有定好阈值，而是将模型预测结果从高到低排序，将每个概率值依次作为阈值，那么就有多个混淆矩阵。对于每个混淆矩阵，我们计算两个指标TPR（True positive rate）和FPR（False positive rate），TPR=TP/(TP+FN)=Recall，<b>TPR就是召回率</b>，FPR=FP/(FP+TN)。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-41e7c2df392f095aaedd9b9926e73759_b.jpg\" data-rawwidth=\"280\" data-rawheight=\"267\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;267&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"280\" data-rawheight=\"267\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic2.zhimg.com/v2-41e7c2df392f095aaedd9b9926e73759_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在画ROC曲线的过程中，若有一个阈值，高于此阈值的均为坏人，低于此阈值的均为好人，则认为此模型已完美的区分开好坏用户。此时坏用户的预测准确率（TPR）为1，同时好用户的预测错误率（FPR）为0，ROC曲线经过（0,1）点。AUC（Area Under Curve）的值为ROC曲线下面的面积，若如上所述模型十分准确，则AUC为1。但现实生活中尤其是工业界不会有如此完美的模型，一般AUC均在0.5到1之间，AUC越高，模型的区分能力越好</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>若AUC=0.5，即与上图中红线重合，表示模型的区分能力与随机猜测没有差别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>所以AUC表征的是模型的分类能力。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>过拟合</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>如果一味的去提高<b>训练数据的预测能力</b>，所选模型的复杂度往往会很高，这种现象称为过拟合。所表现的就是模型训练时候的误差很小，但在测试的时候误差很大。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>产生的原因<br/>因为参数太多，会导致我们的模型复杂度上升，容易过拟合</p><p class=\"ztext-empty-paragraph\"><br/></p><p>权值学习迭代次数足够多(Overtraining),拟合了训练数据中的噪声和训练样例中没有代表性的特征.</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>解决方法</b></p><blockquote>交叉验证法<br/>减少特征<br/>正则化<br/><b>权值衰减</b><br/>验证数据</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>线性分类器与非线性分类器的区别以及优劣</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>如果模型是参数的线性函数，并且存在线性分类面，那么就是线性分类器，否则不是。<br/>常见的线性分类器有：LR,贝叶斯分类，单层感知机、线性回归<br/>常见的非线性分类器：决策树、RF、GBDT、多层感知机<br/>SVM两种都有(看线性核还是高斯核)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>线性分类器速度快、编程方便，但是可能拟合效果不会很好<br/>非线性分类器编程复杂，但是效果拟合能力强</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>特征比数据量还大</b>时，选择什么样的分类器？<br/>线性分类器，因为维度高的时候，数据一般在维度空间里面会比较稀疏，很有可能线性可分<br/>对于维度很高的特征，你是选择线性还是非线性分类器？<br/>理由同上<br/>对于维度极低的特征，你是选择线性还是非线性分类器？<br/>非线性分类器，因为低维空间可能很多特征都跑到一起了，导致线性不可分</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>样本不均衡如何解决</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=https%3A//www.jiqizhixin.com/articles/2017-03-20-8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从重采样到数据合成</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>主要三个方面，数据，模型和评估方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据上重采样和欠采样，使之均衡；</p><p>模型上选对样本不均衡问题不敏感的模型，和算法集成技术，如决策树，不能用KNN；</p><p>评估方法，用查全率，查准率之类</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>重采样（resampling）技术：</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>(1). <b>随机欠采样</b><br/>随机欠采样的目标是通过随机地消除占多数的类的样本来平衡类分布。<br/><b>优点</b><br/>它可以提升运行时间；并且当训练数据集很大时，可以通过减少样本数量来解决存储问题。<br/><b>缺点</b><br/>它会丢弃对构建规则分类器很重要的有价值的潜在信息。<br/>被随机欠采样选取的样本可能具有偏差。它不能准确代表大多数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>(2). <b>随机过采样</b>（Random Over-Sampling）<br/>过采样（Over-Sampling）通过随机复制少数类来增加其中的实例数量，从而可增加样本中少数类的代表性。<br/><b>优点</b><br/>与欠采样不同，这种方法不会带来信息损失。<br/>表现优于欠采样。<br/><b>缺点</b><br/>由于复制少数类事件，它加大了<b>过拟合</b>的可能性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>(3). 信息性过采样：<b>合成少数类</b>过采样技术<br/>直接复制少数类实例并将其添加到主数据集时。从少数类中把一个数据子集作为一个实例取走，接着创建相似的新合成的实例。这些合成的实例接着被添加进原来的数据集。新数据集被用作样本以训练分类模型。<br/><b>优点</b><br/>通过随机采样生成的合成样本而非实例的副本，可以缓解过拟合的问题。<br/>不会损失有价值信息。<br/><b>缺点</b><br/>当生成合成性实例时，SMOTE 并不会把来自其他类的相邻实例考虑进来。这导致了类重叠的增加，并会引入额外的噪音。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>深度学习方面的问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/u010496169/article/details/73550487\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习岗位面试问题汇总 之 深度学习</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>深度学习的实质 及其 与浅层学习的区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>深度学习实质：多隐层+海量数据——&gt;学习有用特征—–&gt;提高分类或预测准确性<br/>区别：（1）DL强调模型深度<br/>(2）DL突出特征学习的重要性：特征变换+非人工</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>BP算法为什么不能适应于深度学习</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>BP为传统多层感知机的训练方法，&lt;=5层<br/>问题：（1）梯度越来越稀疏（梯度扩散&lt;—-非凸目标函数）<br/>（2）局部最小<br/>（3）一般，有标签<br/>NOTE：解决其中局部最小值的方法：（1）多组不同随机参数，取最好参数 （2）启发式优化算法：模拟退火 或 遗传 （3）随机梯度下降</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>CNN卷基层和pooling层的作用</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>卷积层：特征提取<br/>子采样层/池化层：缩减输入数据的规模</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>DNN常用的激活函数有哪些，各有什么特点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）sigmoid：易饱和（梯度消失），非0均值 （2）tanh，改进了sigmoid的第二个缺点，即它是0均值的 （3）ReLU，收敛快（不容易饱和），求梯度简单（没有指数计算，只需要阈值就可以），有稀疏特性。缺点是<b>神经元容易坏死</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>       2行</p><p>由于ReLU在x&lt;0时梯度为0，这样就导致负的梯度在这个ReLU被置零，而且这个神经元有可能再也不会被任何数据激活。如果这个情况发生了，那么这个神经元之后的梯度就永远是0了，也就是ReLU神经元坏死了，不再对任何数据有所响应。实际操作中，如果你的learning rate 很大，那么很有可能你网络中的40%的神经元都坏死了<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>解决relu神经元坏死问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，如果你设置了一个合适的较小的learning rate，这个问题发生的情况其实也不会太频繁。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>relu的变种</b> <b>leaky-relu:</b> </p><p>，</p><p class=\"ztext-empty-paragraph\"><br/></p><p>，</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里的 α 是一个很小的常数。这样，即修正了数据分布，又保留了一些负轴的值，使得负轴信息不会全部丢失。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Parametric ReLU：</b> 对于 Leaky ReLU 中的α，通常都是通过先验知识人工赋值的。<br/>然而可以观察到，损失函数对α的导数我们是可以求得的，可不可以将它作为一个参数进行训练呢</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Randomized ReLU：</b><br/>Randomized Leaky ReLU 是 leaky ReLU 的random 版本 ,核心思想就是，在训练过程中，α 是从一个高斯分布 U(l,u) 中 随机出来的，然后再测试过程中进行修正（有点像dropout的用法)</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>什么样的资料不适合用深度学习？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）数据量小 （2）没有<b>局部相关性</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>什么是共线性，跟过拟合有何关联？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>共线性：高度相关—&gt;冗余——&gt;过拟合<br/>解决：排除相关、加入权重正则</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>pooling技术有哪些，有什么作用,有什么区别</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>pooling的结果是使得特征减少，参数减少，但pooling的目的并不仅在于此。pooling目的是为了保持某种不变性（<b>平移</b>），常用的有<b>mean-pooling，max-pooling和Stochastic-pooling</b>三种。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>mean-pooling，即对邻域内特征点只求平均，max-pooling，即对邻域内特征点取最大。根据相关理论，特征提取的误差主要来自两个方面：（1）邻域大小受限造成的估计值方差增大；（2）卷积层参数误差造成估计均值的偏移。一般来说，<b>mean-pooling能减小第一种误差，更多的保留图像的背景信息</b>，<b>max-pooling能减小第二种误差，更多的保留纹理信息</b>。Stochastic-pooling则介于两者之间，通过对像素点按照数值大小赋予概率，再按照概率进行亚采样，在平均意义上，与mean-pooling近似，在局部意义上，则服从max-pooling的准则。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>LeCun的“Learning Mid-Level Features For Recognition”对前两种pooling方法有比较详细的分析对比，如果有需要可以看下这篇论文。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其实pooling的目的就是为了使参数量减少，因为根本不需要那么多参数。pooling也只能做到在极小范围内的平移不变性，旋转和 伸缩是做不到的。其实不变性都是特征工程时代的概念了，现在在数据量极大的情况下，样本覆盖了足够多的variance，dnn自动就会把各种不变性学习出来</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用Pooling的目的之一是获取一定的特征不变性，目前<b>用的比较多的是Max Pooling</b>。<br/>max pooling是DCNN的非线性来源之一，然后在现代的深度神经网络中，最大的非线性来源是ReLU类的激活函数。<br/>因此，目前对使用Pooling也存在一定的争议，一些最新的工作已经不在网络的中间层使用pooling层了（或者只在最后一层使用average pooling，比如说network in network)。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>缺点在于会丢失信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>pooling的反向传播</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>对于mean pooling，真的是好简单：假设pooling的窗大小是2x2, 在forward的时候啊，就是在前面卷积完的输出上依次不重合的取2x2的窗平均，得到一个值就是当前mean pooling之后的值。<b>backward的时候，把一个值分成四等分放到前面2x2的格子</b>里面就好了。如下<br/>forward: [1 3; 2 2] -&gt; <a href=\"https://link.zhihu.com/?target=https%3A//www.github.com/DragonFive/CVBasicOp/raw/master/1505183290340.jpg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2</a><br/>backward: <a href=\"https://link.zhihu.com/?target=https%3A//www.github.com/DragonFive/CVBasicOp/raw/master/1505183290340.jpg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2</a> -&gt; [0.5 0.5; 0.5 0.5]</p><p class=\"ztext-empty-paragraph\"><br/></p><p>max pooling就稍微复杂一点，forward的时候你只需要把2x2窗子里面那个最大的拿走就好了，<b>backward的时候你要把当前的值放到之前那个最大的位置，其他的三个位置都弄成0</b>。如下<br/>forward: [1 3; 2 2] -&gt; 3<br/>backward: <a href=\"https://link.zhihu.com/?target=https%3A//www.github.com/DragonFive/CVBasicOp/raw/master/1505185139623.jpg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3</a> -&gt; [0 3; 0 0]</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>特征选择的方法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/28641663\" class=\"internal\">机器学习中，有哪些特征选择的工程方法？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>特征选择是特征工程中的重要问题（另一个重要的问题是特征提取），坊间常说：<b>数据和特征决定了机器学习的上限</b>，而模型和算法只是逼近这个上限而已。由此可见，特征工程尤其是特征选择在机器学习中占有相当重要的地位。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>特征选择方法举例</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>计算每一个特征与响应变量的<b>相关性</b>：工程上常用的手段有计算皮尔逊系数和互信息系数，皮尔逊系数只能衡量线性相关性而互信息系数能够很好地度量各种相关性</p><p>构建<b>单个特征的模型</b>，通过模型的准确性为特征排序，借此来选择特征</p><p>通过<b>L1正则项</b>来选择特征：L1正则方法具有稀疏解的特性，因此天然具备特征选择的特性，但是要注意，L1没有选到的特征不代表不重要，原因是两个具有高相关性的特征可能只保留了一个，如果要确定哪个特征重要应再通过L2正则方法交叉检验；</p><p>训练能够<b>对特征打分的预选模型</b>：RandomForest和Logistic Regression等都能对模型的特征打分，通过打分获得相关性后再训练最终模型；</p><p>通过深度学习来进行特征选择：目前这种手段正在随着深度学习的流行而成为一种手段，尤其是在计算机视觉领域，原因是深度学习具有自动学习特征的能力.</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>特征选择方法分类</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-613341da09ad023b0e5705e74c761ba6_b.jpg\" data-rawwidth=\"875\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"875\" data-original=\"https://pic3.zhimg.com/v2-613341da09ad023b0e5705e74c761ba6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;875&#39; height=&#39;967&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"875\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"875\" data-original=\"https://pic3.zhimg.com/v2-613341da09ad023b0e5705e74c761ba6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-613341da09ad023b0e5705e74c761ba6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>特征选择思维导图</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Filter：过滤法，按照<b>发散性或者相关性</b>对各个特征进行评分，设定阈值或者待选择阈值的个数，选择特征。</p><p>Wrapper：包装法，根据目标函数（通常是预测效果评分），每次选择若干特征，或者排除若干特征。</p><p>Embedded：集成方法，先使用某些机器学习的算法和模型进行训练，<b>得到各个特征的权值系数</b>，根据系数从大到小选择特征。类似于Filter方法，但是是通过训练来确定特征的优劣。</p><p>降维：PCA LDA等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>Filter过滤法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>方差选择法</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用方差选择法，先要计算各个<b>特征的方差</b>，然后根据阈值，选择方差大于阈值的特征</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>相关系数法</b><br/>使用相关系数法，先要计算各个特征对目标值的相关系数以及相关系数的P值</p><p><b>卡方检验</b><br/>经典的卡方检验是检验定性自变量对定性因变量的<b>相关性</b></p><p><b>互信息法</b><br/>经典的互信息也是评价定性自变量对定性因变量的相关性的</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>Embedded 集成方法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>基于<b>惩罚项</b>的特征选择法<br/>L1惩罚项降维的原理在于保留多个对目标值具有同等相关性的特征中的一个</p><p>基于<b>树模型</b>的特征选择法<br/>树模型中GBDT也可用来作为基模型进行特征选择</p><p>深度学习方法</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>降维</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>将原始的样本映射到维度更低的样本空间中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>PCA是为了让映射后的样本具有最大的<b>发散性</b>；而LDA是为了让映射后的样本有最好的<b>分类性能</b>。所以说PCA是一种无监督的降维方法，而LDA是一种有监督的降维方法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>LR相关问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>LR与BP</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/27823925\" class=\"internal\">BP神经网络是否优于logistic回归？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先，神经网络的最后一层，也就是输出层，是一个 Logistic Regression （或者 Softmax Regression ），也就是一个线性分类器，中间的隐含层起到特征提取的作用，把隐含层的输出当作特征，然后再将它送入下一个 Logistic Regression，一层层变换。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>神经网络的训练，实际上就是同时训练特征提取算法以及最后的 Logistic Regression的参数。为什么要特征提取呢，因为 Logistic Regression 本身是一个线性分类器，所以，通过特征提取，我们可以把原本线性不可分的数据变得线性可分。要如何训练呢，最简单的方法是**（随机，Mini batch）梯度下降法**</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>LR为什么使用sigmoid函数</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>源于sigmoid，或者说exponential family所具有的最佳性质，即<b>maximum entropy</b>的性质。maximum entropy给了logistic regression一个很好的数学解释。为什么maximum entropy好呢？entropy翻译过来就是熵，所以maximum entropy也就是最大熵。熵用在概率分布上可以表示这个<b>分布中所包含的不确定度</b>，熵越大不确定度越大。均匀分布熵最大，因为基本新数据是任何值的概率都均等。而我们现在关心的是，给定某些假设之后，熵最大的分布。也就是说这个分布应该在满足我假设的前提下越均匀越好。比如大家熟知的正态分布，正是假设已知mean和variance后熵最大的分布。首先，我们在建模预测 Y|X，并认为 Y|X 服从<b>bernoulli distribution</b>，所以我们只需要知道 P(Y|X)；其次我们需要一个线性模型，所以 P(Y|X) = f(wx)。接下来我们就只需要知道 f 是什么就行了。而我们可以通过最大熵原则推出的这个 f，就是sigmoid。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>面试问了如何在海量数据中查找给定部分数据最相似的top200向量，向量的维度也很高. 因为之前了解过其他面蚂蚁金服的朋友，也有问到这个题目的<br/>所以反应比较快，直接就说可以用KD树，聚类，hash,<br/>一天之内两连面，还是问了很多机器学习算法的东西 为什么LR需要归一化或者取对数，为什么LR把特征离散化后效果更好 为什么把特征组合之后还能提升，反正这些基本都是增强了特征的表达能力，或者更容易线性可分吧</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在logistic regression （LR）中，这个目标是什么呢？最大化条件似然度。考虑一个二值分类问题，训练数据是一堆（特征，标记）组合，（x1,y1), (x2,y2), .... 其中x是特征向量，y是类标记（y=1表示正类，y=0表示反类）。LR首先定义一个条件概率p(y|x；w）。 <b>p(y|x；w）表示给定特征x，类标记y的概率分布，其中w是LR的模型参数（一个超平面）</b>。有了这个条件概率，就可以在训练数据上定义一个似然函数，然后通过最大似然来学习w。这是LR模型的基本原理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>为什么LR把特征离散化后效果更好</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>逻辑回归属于广义线性模型，表达能力受限；单变量离散化为N个后，<b>每个变量有单独的权重</b>，相当于为模型<b>引入了非线性，能够提升模型表达能力</b>，加大拟合；(哑变量)<br/>特征离散化以后，起到了简化了逻辑回归模型的作用，降低了模型过拟合的风险。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/31989952\" class=\"internal\">连续特征的离散化：在什么情况下将连续的特征离散化之后可以获得更好的效果？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在工业界，很少直接将连续值作为逻辑回归模型的特征输入，而是将连续特征离散化为一系列0、1特征交给逻辑回归模型，这样做的优势有以下几点：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>离散特征的增加和减少都很容易，易于模型的快速迭代；</p><p><b>稀疏向量内积乘法运算速度快</b>，计算结果方便存储，容易扩展；</p><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li>离散化后的特征对<b>异常数据</b>有很强的鲁棒性：比如一个特征是年龄&gt;30是1，否则0。如果特征没有离散化，一个异常数据“年龄300岁”会给模型造成很大的干扰；</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li>逻辑回归属于广义线性模型，表达能力受限；<b>单变量离散化为N个后，每个变量有单独的权重，相当于为模型引入了非线性</b>，能够提升模型表达能力，加大拟合；</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li>离散化后可以进行特征交叉，由M+N个变量变为M*N个变量，进一步引入非线性，提升表达能力；</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li><b>特征离散化后，模型会更稳定</b>，比如如果对用户年龄离散化，20-30作为一个区间，不会因为一个用户年龄长了一岁就变成一个完全不同的人。当然处于区间相邻处的样本会刚好相反，所以怎么划分区间是门学问；</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ol><ol><li>特征离散化以后，起到了简化了逻辑回归模型的作用，降低了模型过拟合的风险。</li></ol></ol><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>李沐曾经说过：模型是使用离散特征还是连续特征，其实是一个“<b>海量离散特征+简单模型</b>” 同 “少量连续特征+复杂模型”的权衡。既可以离散化用线性模型，也可以用连续特征加深度学习。就看是喜欢折腾特征还是折腾模型了。通常来说，前者容易，而且可以n个人一起并行做，有成功经验；后者目前看很赞，能走多远还须拭目以待。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>如何用LR建立一个广告点击的模型：</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>特征提取—&gt;特征处理（<b>离散化、归一化</b>、onehot等）—&gt;找出候选集—-&gt;模型训练，得到结果</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>LR的过拟合</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>减少feature个数（人工定义留多少个feature、算法选取这些feature）</p><p>正则化（为了方便求解，L2使用较多）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>添加正则化后的损失函数变为：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>同时w的更新变为：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>关于LR的多分类：softmax</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里会输出当前样本下属于哪一类的概率，并且满足全部概率加起来=1</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>关于softmax和k个LR的选择</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果类别之间是否互斥（比如音乐只能属于古典音乐、乡村音乐、摇滚月的一种）就用softmax<br/>否则类别之前有联系（比如一首歌曲可能有影视原声，也可能包含人声，或者是舞曲），这个时候使用k个LR更为合适<br/><b>Logistic回归优点</b>：<br/>实现简单；<br/>分类时计算量非常小，速度很快，存储资源低；<br/><b>缺点</b>：<br/>容易欠拟合，一般准确度不太高<br/>只能处理两分类问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM相关问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/on2way/article/details/47729419\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">解密SVM系列（一）：关于拉格朗日乘子法和KKT条件</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/rosenor1/article/details/52318454\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">svmw问题整理</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM的主要特点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）非线性映射-理论基础<br/>（2）最大化分类边界-方法核心<br/>（3）支持向量-计算结果<br/>（4）小样本学习方法 ，最终的决策函数只有少量支持向量决定，避免了“维数灾难” ，少数支持向量决定最终结果—-&gt;可“剔除”大量冗余样本+算法简单+具有鲁棒性<br/>（7）学习问题可表示为凸优化问题—-&gt;全局最小值<br/>（8）可自动通过最大化边界控制模型，但需要用户指定核函数类型和引入松弛变量<br/>（9）适合于小样本，<b>优秀泛化能力（因为结构风险最小）</b><br/>（10）泛化错误率低，分类速度快，结果易解释</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>缺点：</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）<b>大规模训练样本</b>（m阶矩阵计算）<br/>（2）传统的不适合多分类<br/>（3）对缺失数据、参数、核函数敏感</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>为什么要引入对偶问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）容易求解 （2）核函数<br/>Note：拉格朗日对偶没有改变最优解，但改变了算法复杂度：原问题—样本维度；对偶问题–样本数量。所以 线性分类&amp;&amp;样本维度&lt;样本数量：原问题求解（liblinear默认）；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>非线性–升维—一般导致 样本维度&gt;样本数量：对偶问题求解</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>样本失衡的影响</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>超平面会靠近样本少的类别。因为使用的是软间隔分类，而如果对所有类别都是使用同样的惩罚系数，则由于优化目标里面有最小化惩罚量，所以靠近少数样本时，其惩罚量会少一些。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对正例和负例赋予不同的C值，例如正例远少于负例，则正例的C值取得较大，这种方法的缺点是可能会偏离原始数据的概率分布；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对训练集的数据进行预处理即对数量少的样本以某种策略进行采样，增加其数量或者减少数量多的样本</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>样本失衡时，如何评价分类器的性能好坏？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>使用ROC曲线</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>样本没有规范化对SVM有什么影响？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>对偶问题的优化目标函数中有向量的内积计算(优化过程中也会有内积计算的，见SMO)，径向基核函数中有向量的距离计算，存在值域小的变量会被忽略的问题，影响算法的精度。参考</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>数据维度大于数据量的对SVM的影响？</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>这种情况下一般采用线性核(即无核)，因为此时特征够用了(很大可能是线性问题)，没必要映射到更高维的特征空间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>拉格朗日乘子法 和KKT条件</h2><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>凸函数</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>前提条件凸函数：下图左侧是凸函数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-8654e05134f72d394eca7c5df8bf7859_b.jpg\" data-rawwidth=\"706\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb\" width=\"706\" data-original=\"https://pic2.zhimg.com/v2-8654e05134f72d394eca7c5df8bf7859_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;706&#39; height=&#39;370&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"706\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"706\" data-original=\"https://pic2.zhimg.com/v2-8654e05134f72d394eca7c5df8bf7859_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8654e05134f72d394eca7c5df8bf7859_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>左侧是凸函数</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>凸的就是开口朝一个方向（向上或向下）。更准确的数学关系就是：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-4494b393e8b4d45cc7529a43c86bc929_b.jpg\" data-rawwidth=\"216\" data-rawheight=\"39\" class=\"content_image\" width=\"216\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;216&#39; height=&#39;39&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"216\" data-rawheight=\"39\" class=\"content_image lazy\" width=\"216\" data-actualsrc=\"https://pic2.zhimg.com/v2-4494b393e8b4d45cc7529a43c86bc929_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>enter description here</p><p class=\"ztext-empty-paragraph\"><br/></p><p>或者</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-81aec7b2902204ad3c74e59c14b52f13_b.jpg\" data-rawwidth=\"216\" data-rawheight=\"39\" class=\"content_image\" width=\"216\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;216&#39; height=&#39;39&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"216\" data-rawheight=\"39\" class=\"content_image lazy\" width=\"216\" data-actualsrc=\"https://pic4.zhimg.com/v2-81aec7b2902204ad3c74e59c14b52f13_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于凸问题，你去求导的话，是不是只有一个极点，那么他就是最优点，很合理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>等式条件约束</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>当带有约束条件的凸函数需要优化的时候，一个带等式约束的优化问题就通过拉格朗日乘子法完美的解决了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>可以使用</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里可以看到与α1,α2相乘的部分都为0，根原来的函数是等价的。所以α1,α2的取值为全体实数。现在这个优化目标函数就没有约束条件了吧。然后求导数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>不等式约束与KKT条件</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>任何原始问题约束条件无非最多3种，等式约束，大于号约束，小于号约束，而这三种最终通过将约束方程化简化为两类：约束方程等于0和<b>约束方程小于0</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在将约束拿到目标函数中去就变成：<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>其中g是不等式约束，h是等式约束（像上面那个只有不等式约束，也可能有等式约束）。那么KKT条件就是函数的最优值必定满足下面条件：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>(1) L对各个x求导为零；<br/>(2) h(x)=0;<br/>(3) ，</p><p class=\"ztext-empty-paragraph\"><br/></p><p>第三个式子不好理解，因为我们知道在约束条件变完后，所有的g(x)&lt;=0，且αi≥0，然后求和还要为0，无非就是告诉你，<b>要么某个不等式gi(x)=0,要么其对应的αi=0</b>。那么为什么KKT的条件是这样的呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM的原问题和对偶问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>原问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-bf8677289ced84ccf6d5f86643955299_b.jpg\" data-rawwidth=\"282\" data-rawheight=\"64\" class=\"content_image\" width=\"282\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;282&#39; height=&#39;64&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"282\" data-rawheight=\"64\" class=\"content_image lazy\" width=\"282\" data-actualsrc=\"https://pic2.zhimg.com/v2-bf8677289ced84ccf6d5f86643955299_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>原问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>拉格朗日乘子法结果</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-b4aec85e88fa5f1125b5a49d015ec127_b.jpg\" data-rawwidth=\"542\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb\" width=\"542\" data-original=\"https://pic4.zhimg.com/v2-b4aec85e88fa5f1125b5a49d015ec127_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;542&#39; height=&#39;54&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"542\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"542\" data-original=\"https://pic4.zhimg.com/v2-b4aec85e88fa5f1125b5a49d015ec127_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b4aec85e88fa5f1125b5a49d015ec127_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对偶问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>求导得到</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-efa64f5f34bd5cbaf6f6aac65361350e_b.jpg\" data-rawwidth=\"360\" data-rawheight=\"112\" class=\"content_image\" width=\"360\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;360&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"360\" data-rawheight=\"112\" class=\"content_image lazy\" width=\"360\" data-actualsrc=\"https://pic3.zhimg.com/v2-efa64f5f34bd5cbaf6f6aac65361350e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>求导得到</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>代入乘子算式得到</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-194316ead872236efd7245a48e2addca_b.jpg\" data-rawwidth=\"521\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb\" width=\"521\" data-original=\"https://pic3.zhimg.com/v2-194316ead872236efd7245a48e2addca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;521&#39; height=&#39;233&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"521\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"521\" data-original=\"https://pic3.zhimg.com/v2-194316ead872236efd7245a48e2addca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-194316ead872236efd7245a48e2addca_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对偶结果</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>就得到的原问题的对偶问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-6671eb8a53e3b2e2f88c43f926f14926_b.jpg\" data-rawwidth=\"403\" data-rawheight=\"130\" class=\"content_image\" width=\"403\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;403&#39; height=&#39;130&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"403\" data-rawheight=\"130\" class=\"content_image lazy\" width=\"403\" data-actualsrc=\"https://pic3.zhimg.com/v2-6671eb8a53e3b2e2f88c43f926f14926_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对偶问题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>为什么要引入对偶算法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>对偶问题往往更加容易求解(结合拉格朗日和kkt条件)</p><p>可以很自然的引用<b>核函数</b>（拉格朗日表达式里面有内积，而核函数也是通过内积进行映射的）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM解决过拟合的方法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>决定SVM最优分类超平面的恰恰是那些占少数的支持向量，如果支持向量中碰巧存在异常点就会过拟合，解决的方法是加入松弛变量。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>另一方面从损失函数角度看，引入了L2正则。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为什么要把原问题转换为对偶问题？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为原问题是凸二次规划问题，转换为对偶问题更加高效。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为什么求解对偶问题更加高效？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为只用求解alpha系数，而alpha系数只有支持向量才非0，其他全部为0.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>alpha系数有多少个？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>样本点的个数</p><p class=\"ztext-empty-paragraph\"><br/></p><p>L1还可以用来选择特征</p><p class=\"ztext-empty-paragraph\"><br/></p><p>A 为什么<b>L1可以用来选择特征</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>B 因为L1的话会把某些不重要的特征压缩为0</p><p class=\"ztext-empty-paragraph\"><br/></p><p>A 为什么L1可以把某些特征压缩为0</p><p class=\"ztext-empty-paragraph\"><br/></p><p>B 因为（画图）L1约束是正方形的，经验损失最有可能和L1的正方形的顶点相交，L1比较有棱角。所以可以把某些特征压缩为0</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM优缺点</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><b>优点</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用核函数可以向高维空间进行映射</p><p>使用核函数可以解决非线性的分类</p><p>分类思想很简单，就是将样本与决策面的间隔最大化</p><p>分类效果较好</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>缺点</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对大规模数据训练比较困难</p><p>无法直接支持多分类，但是可以使用间接的方法来做</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SMO算法</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>SMO<br/>SMO是用于快速求解SVM的<br/>它选择凸二次规划的两个变量，其他的变量保持不变，然后根据这两个变量构建一个二次规划问题，这个二次规划关于这两个变量解会更加的接近原始二次规划的解，通过这样的子问题划分可以大大增加整个算法的计算速度</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>SVM多分类问题</h2><p class=\"ztext-empty-paragraph\"><br/></p><p>间接法<br/><b>一对多</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>其中某个类为一类，其余n-1个类为另一个类，比如A,B,C,D四个类，第一次A为一个类，{B,C,D}为一个类训练一个分类器，第二次B为一个类,{A,C,D}为另一个类,按这方式共需要训练4个分类器，最后在测试的时候将测试样本经过这4个分类器f1(x),f2(x),f3(x)和f4(x),取其最大值为分类器(这种方式由于是1对M分类，会存在偏置，很不实用)</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一对一(libsvm实现的方式)</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>任意两个类都训练一个分类器，那么n个类就需要个svm分类器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>还是以A,B,C,D为例,那么需要{A,B},{A,C},{A,D},{B,C},{B,D},{C,D}为目标共6个分类器，然后在预测的将测试样本通过这6个分类器之后进行投票选择最终结果。（这种方法虽好，但是需要个分类器代价太大，不过有好像使用循环图来进行改进）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>reference</h2><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/26768865\" class=\"internal\">Linear SVM 和 LR 有什么异同？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/21704547\" class=\"internal\">SVM和logistic回归分别在什么情况下使用?</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.100mian.com/mianshi/baidu/49214.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">百度 – 机器学习面试</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/rosenor1/article/details/52318454\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">svmw问题整理</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/26726794\" class=\"internal\">各种机器学习的应用场景分别是什么？例如，k近邻,贝叶斯，决策树，svm，逻辑斯蒂回归</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/hellochennan/p/6654084.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习面试问题汇总</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/u010496169/article/category/6984158\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习面试</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://www.zhihu.com/question/23259302/answer/174467341\" class=\"internal\">如何准备机器学习工程师的面试 ？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/Snoopy_Yuan/article/details/75808006\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">天池离线赛 - 移动推荐算法（四）：基于LR, RF, GBDT等模型的预测</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//kubicode.me/2015/08/16/Machine%2520Learning/Algorithm-Summary-for-Interview/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习常见算法个人总结（面试用）</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/q383700092/article/details/58605715\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习面试问题汇总</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//memoiry.me/2017/02/22/cs229/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">cs229机器学习笔记及代码</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://zhuanlan.zhihu.com/p/27813121\" class=\"internal\">腾讯17届校招面经合集</a></p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "技术面", 
                    "tagLink": "https://api.zhihu.com/topics/19765558"
                }
            ], 
            "comments": [
                {
                    "userName": "jasonfzs", 
                    "userLink": "https://www.zhihu.com/people/d40e5d582662fd5377440118dd5e1a5e", 
                    "content": "好像链接打不开哦？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "斗战胜佛", 
                    "userLink": "https://www.zhihu.com/people/6fe88a4e9a45338512730927460fcafc", 
                    "content": "我以为只有我一个人打不开，一个都不行", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "alancheg", 
                    "userLink": "https://www.zhihu.com/people/5800cc3bf59efb711c421ac042088918", 
                    "content": "可能这只是个目录", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>什么都看不到啊，题主</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "陈看山", 
                    "userLink": "https://www.zhihu.com/people/e3d1fe4283d3f68b2da5612f953a2196", 
                    "content": "<p>打不开啊 ，，，等。。。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27567922", 
            "userName": "dragon five", 
            "userLink": "https://www.zhihu.com/people/ae25561a8212ab0ea0ed9e103aa1d6f6", 
            "upvote": 1, 
            "title": "不会装cuda配环境的小学生怎么躺撸caffe", 
            "content": "<p>本文首发于个人博客 <a href=\"https://link.zhihu.com/?target=http%3A//%25E4%25B8%258D%25E4%25BC%259A%25E8%25A3%2585cuda%25E9%2585%258Dcaffe%25E7%259A%2584%25E5%25B0%258F%25E5%25AD%25A6%25E7%2594%259F%25E6%2580%258E%25E4%25B9%2588%25E7%258E%25A9caffe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不会装cuda配环境的小学生怎么躺撸caffe</a></p>\n<p>收录于简书专题<a href=\"https://link.zhihu.com/?target=http%3A//%25E6%25B7%25B1%25E5%25BA%25A6%25E5%25AD%25A6%25E4%25B9%25A0%25C2%25B7%25E8%25AE%25A1%25E7%25AE%2597%25E6%259C%25BA%25E8%25A7%2586%25E8%25A7%2589%25E4%25B8%258E%25E6%259C%25BA%25E5%2599%25A8%25E5%25AD%25A6%25E4%25B9%25A0%2520-%2520%25E4%25B8%2593%25E9%25A2%2598%2520-%2520%25E7%25AE%2580%25E4%25B9%25A6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\"></span><span class=\"visible\">http://%E6%B7%B1%E5%BA%</span><span class=\"invisible\">A6%E5%AD%A6%E4%B9%A0%C2%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%20-%20%E4%B8%93%E9%A2%98%20-%20%E7%AE%80%E4%B9%A6</span></a><a href=\"https://link.zhihu.com/?target=http%3A//%25E6%25B7%25B1%25E5%25BA%25A6%25E5%25AD%25A6%25E4%25B9%25A0%25C2%25B7%25E8%25AE%25A1%25E7%25AE%2597%25E6%259C%25BA%25E8%25A7%2586%25E8%25A7%2589%25E4%25B8%258E%25E6%259C%25BA%25E5%2599%25A8%25E5%25AD%25A6%25E4%25B9%25A0%2520-%2520%25E4%25B8%2593%25E9%25A2%2598%2520-%2520%25E7%25AE%2580%25E4%25B9%25A6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习·计算机视觉与机器学习</a></p>\n<p>DL如今已经快成为全民玄学了，感觉离民科入侵不远了。唯一的门槛可能是环境不好配，特别是caffe这种依赖数10种其它软件打框架。不过有了docker和k8s之后，小学生也能站撸DL了。</p>\n\n\n<h1>从nvidia-docker到docker，需要有这样的操作</h1>\n<p>大致流程如下，入门版通过docker pull一个GPU版本的caffe 的image,然后安装nvidia-docker 和 nvidia-docker-plugin 来映射宿主机的nvidia-driver并通过共享volume的方式来支持容器里面能“看到”宿主机的GPU。进阶版通过curl -s命令列出宿主机的配置显卡配置，并通过docker run的方式来启动。总结完成。纸上得来终觉浅，绝知此事要躬行，光说不练空把式，唯有实践出真知。<br/><a href=\"https://link.zhihu.com/?target=http%3A//%25E5%25BE%2590%25E6%2596%25B0%25E5%259D%25A4%25E7%259A%2584%25E5%258D%259A%25E5%25AE%25A2%2520%257C%2520XuXinkun%2520Blog\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tensorflow gpu in docker</a></p>\n<p>使用nvidia-docker</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">sudo nohup nvidia-docker-plugin &gt;/tmp/nvidia-docker.log &amp;  \n然后nvidia-docker run\n</code></pre></div><p>使用docker来代替 nvidia-docker</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">curl -s http://localhost:3476/docker/cli\n</code></pre></div><p>下面应该是输出：</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">--device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia7 --devic/dev/nvidia6 --device=/dev/nvidia5 --device=/dev/nvidia4 --device=/dev/nvidia3 --device=/dev/nvidia2 --device=/dev/nvidia1 --device=/dev/nvidia0 --volume-driver=nvidia-docker --volume=nvidia_driver_375.39:/usr/local/nvidia:ro\n</code></pre></div><p>这样其实</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">sudo docker run -ti `curl -s http://localhost:3476/v1.0/docker/cli` -v /mnt/share:/mnt/share -v /mnt/lustre:/mnt/lustre  -v /lib64:/lib64 镜像名 bash\n</code></pre></div><p>所以如果你想用docker的方式来运行GPU版本 那么你就需要指明你的所有的device信息，如果卸载rc文件里，那么只能这样</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">sudo docker run -ti --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia7 --device=/dev/nvidia6 --device=/dev/nvidia5 \\\n--device=/dev/nvidia4 --device=/dev/nvidia3 --device=/dev/nvidia2 --device=/dev/nvidia1 --device=/dev/nvidia0 \\\n--volume-driver=nvidia-docker --volume=nvidia_driver_375.39:/usr/local/nvidia:ro \\\n -v /mnt/share:/mnt/share -v /mnt/lustre:/mnt/lustre  -v /lib64:/lib64  镜像名  bash\n</code></pre></div><p>当前你也可以有这样风骚的走位</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">sudo docker run -ti  $(ls /dev/nvidia* | xargs -I{} echo &#39;--device={}&#39;)   -v /mnt/share:/mnt/share -v /mnt/lustre:/mnt/lustre  -v /lib64:/lib64  镜像名  bash\n</code></pre></div><h1>在镜像里安装ipython notebook，需要这样做</h1>\n<p>把大象装进冰箱分四步，映射端口，开通open-ssh服务器，安装jupyter,配置密码<br/>在镜像中执行</p>\n<ol><li>映射端口<br/>在dock run的时候加-p参数 </li>\n<li>开通ssh<div class=\"highlight\"><pre><code class=\"language-text\">sudo apt-get install openssh-server\n</code></pre></div></li>\n<li>安装jupyter<div class=\"highlight\"><pre><code class=\"language-text\">apt-get update\n#安装python dev包\napt-get install python-dev\n#安装jupyter\npip install jupyter\n</code></pre></div></li>\n<li>设置密码<br/>分三小步<br/>a. 生成jupyter配置文件，这个会生成配置文件.jupyter/jupyter_notebook_config.py<div class=\"highlight\"><pre><code class=\"language-text\">jupyter notebook --generate-config\n</code></pre></div>b. 从密码到ssa密文<br/>在命令行输入ipython，进入ipython命令行<div class=\"highlight\"><pre><code class=\"language-text\">#使用ipython生成密码\nIn [1]: from notebook.auth import passwd\nIn [2]: passwd()\nEnter password: \nVerify password: \nOut[2]: &#39;sha1:38a5ecdf288b:c82dace8d3c7a212ec0bd49bbb99c9af3bae076e&#39;\n`\n</code></pre></div>c. 改配置<div class=\"highlight\"><pre><code class=\"language-text\">#去配置文件.jupyter/jupyter_notebook_config.py中修改以下参数\nc.NotebookApp.ip=&#39;*&#39;                          #绑定所有地址\nc.NotebookApp.password = u&#39;刚才生成的密文也就是sha1:38a5ecdf288b:c82dace8d3c7a212ec0bd49bbb99c9af3bae076e&#39;\nc.NotebookApp.open_browser = False            #启动后是否在浏览器中自动打开，注意F大写\nc.NotebookApp.port =8888                      #指定一个访问端口，默认8888，注意和映射的docker端口对应\n</code></pre></div></li>\n</ol><p>然后执行ipython notebook —allow-root就可以在宿主机上用docker里面的环境了，爽歪歪。</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000007448177\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">把jupyter-notebook装进docker里</a>\n<h1>使用k8s与脚本一键式训练网络</h1>\n<h2>简要介绍</h2>\n<p>用k8s启动docker能够有效的管理宿主机资源，保证任务能够在资源许可的情况下顺利地执行，同时能够保护宿主机的安全。但是从使用k8s到训练网络这中间隔着几十步的操作、配置和交互，需要遵循相应的顺序和格式，比较繁琐。这里通过一种expect脚本的方式简化这种操作，让用户可以简洁而又正确的使用k8s.</p>\n<h2>操作步骤</h2>\n<ol><li>根据需要的资源修改yaml文件</li>\n<li>修改执行脚本里的资源和网络文件位置</li>\n<li>执行expect脚本<h2>修改yaml文件</h2>\n</li>\n</ol><p>这里举个例子并有一些注意事项。</p>\n<p>下面的yaml文件使用RC的方式创建pod</p>\n<div class=\"highlight\"><pre><code class=\"language-text\"> apiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: xxx-master2\n  labels:\n    name: xxx-master2\nspec:\n  replicas: 2\n  selector:\n    name: xxx-master2\n  template:\n    metadata:\n      labels:\n        name: xxx-master2\n    spec:\n      nodeSelector:\n        ip: five\n      containers:\n      - name: xxx-master\n        image: 10.10.31.26:5000/xxx_cuda8:2.1\n        #command: [&#34;/bin/sleep&#34;, &#34;infinity&#34;]\n        #securityContext:\n        #  privileged: true\n        ports:\n        - containerPort: 6380\n        imagePullPolicy: IfNotPresent\n        resources:\n          requests:\n            alpha.kubernetes.io/nvidia-gpu: 1\n            #cpu: 2\n            #memory: 30Gi\n          limits:\n            alpha.kubernetes.io/nvidia-gpu: 1\n            #cpu: 2\n            #memory: 30Gi\n        volumeMounts:\n        - mountPath: /usr/local/nvidia/\n          name: nvidia-driver\n          readOnly: true\n        - mountPath: /mnt/lustre/xxx/xxx/\n          name: sensenet\n        - mountPath: /mnt/lustre/share/\n          name: share\n      volumes:\n      - hostPath:\n          path: /var/lib/nvidia-docker/volumes/nvidia_driver/375.39\n        name: nvidia-driver\n      - hostPath:\n          path: /mnt/lustre/xxx/xxx\n        name: xxx\n      - hostPath:\n          path: /mnt/lustre/share/\n        name: share\n</code></pre></div>\n<p>需要注意的是：</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">  nodeSelector:\n      ip: five\n</code></pre></div>\n<p>表示选择标签为ip=five的结点，这句话也可以不要。注意后面的resource的gpu数不要超过物理机GPU总数。</p>\n<h2>修改expect脚本</h2>\n<p>注意这个expect 脚本运行前需保证各个pod都处于running 状态。</p>\n<p>xxx-pod-cfg.exp脚本内容</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">#!/usr/bin/expect -f\n\n# 设置超时时间\n\nset timeout 30000\n# 设置GPU个数\nset gpuNum 1\n# 创建rc创建pod\nexec kubectl create -f /mnt/lustre/xxx/xxx/yaml/xxxx_cuda_controller_test.yaml\nsleep 10\n\n# 首先通过k8s获得每个pod的ip与hostname对 放在一个临时文件中\nexec kubectl get po -o=custom-columns=IP:status.podIP,NAME:.metadata.name &gt;hehe\n\n# 接下来把每个ip对 放在数组里面去\nset fd [open &#34;hehe&#34; r]\ngets $fd line\nset numIp 0\nwhile { [gets $fd line] &gt;= 0 } {\n        set ips($numIp) [ lindex $line 0 ]\n        set hns($numIp) [ lindex $line 1 ]\n        incr numIp\n        #puts $numIp\n}\n#puts $ips(1)\n\n# 接下来登录每个pod上面去修改hosts文件\nfor {set i 0} {$i&lt;$numIp} {incr i} {\n        set sshIp $ips($i)\n        set sshUrl &#34;root@&#34;\n        append sshUrl $sshIp\n        # 连接上这个pod\n        spawn ssh $sshUrl\n        # 修改这个pod的文件\n        expect &#34;password:&#34;\n        send &#34;12345678\\r&#34;\n        # 下面把ip数组复制进文件里面\n        for { set j 0} {$j&lt;$numIp} {incr j} {\n                set ip $ips($j)\n                set hn $hns($j)\n                append ip &#34; &#34; $hn\n                expect &#34;#*&#34;\n                send &#34;echo $ip &gt;&gt; /etc/hosts\\r&#34;\n        }\n        # 如果有必要的话，可以在这里设置mpirun的位置\n        expect &#34;#*&#34;\n        send &#34;exit\\r&#34;\n        expect eof\n}\n\n# 下面生成第一个pod的key，并且copy到其它的pod里面.\nset sshIp $ips(0)\nset sshUrl &#34;root@&#34;\nappend sshUrl $sshIp\nspawn ssh $sshUrl\nexpect &#34;password:&#34;\nsend &#34;12345678\\r&#34;\n\nexpect &#34;#*&#34;\nsend &#34;ssh-keygen \\r&#34;\nexpect &#34;id_rsa):*&#34;\nsend &#34;\\r&#34;\nexpect &#34;passphrase):*&#34;\nsend &#34;\\r&#34;\nexpect &#34;again:*&#34;\nsend &#34;\\r&#34;\n\n# 接下来保证第一个pod能ssh连上其它所有的pod\nfor {set i 1} {$i&lt;$numIp} {incr i} {\n        set cmd &#34;ssh-copy-id -i ~/.ssh/id_rsa.pub &#34;\n        set ip $ips($i)\n        append cmd $ip\n        expect &#34;#*&#34;\n        send &#34;$cmd \\r&#34;\n        expect &#34;yes/no)?*&#34;\n        send &#34;yes\\r&#34;\n        expect &#34;password:*&#34;\n        send &#34;12345678\\r&#34;\n}\n\n# 下面制作hostfile文件,把ip数组写进文件里\nexpect &#34;#*&#34;\nsend &#34;cd /root\\r&#34;\nfor {set i 0} {$i&lt;$numIp} {incr i} {\n        #set content $ips($i)\n        expect &#34;#*&#34;\n        send &#34;echo $ips($i) &gt;&gt;hostfile\\r&#34;\n}\n\n# 下面开始训练resnet200\nexpect &#34;#*&#34;\nsend &#34;/mnt/lustre/share/intel64/bin/mpirun -n $numIp -ppn $gpuNum -f hostfile -env I_MPI_FABRICS shm:tcp /mnt/lustre/xxx/xxx/example/build/tools/caffe train --solver=/mnt/lustre/xxx/xxx/example/resnet200/resnet200_solver.prototxt\\r&#34;\n\nexpect eof\nexit\n</code></pre></div>\n<ol><li>下面这句表示超时时间，设置大一点比较好，不然可能提前结束<div class=\"highlight\"><pre><code class=\"language-text\">set timeout 30000\n</code></pre></div>\n</li>\n<li>下面这句是每个pod里面的GPU数量，根据实际情况自己设置<div class=\"highlight\"><pre><code class=\"language-text\">set gpuNum 1\n</code></pre></div>\n</li>\n<li>创建rc来创建pod ,sleep10保证在执行下一句之前pod能处于running 状态，根据需要时间可以调长 <div class=\"highlight\"><pre><code class=\"language-text\">exec kubectl create -f /mnt/lustre/xxx/xxxx/yaml/xxx_cuda_controller_test.yaml \nsleep 10\n</code></pre></div>\n</li>\n<li><p>下面是获取ip与hostname对</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">exec kubectl get po -l name==sensenet-master2  -o=custom-columns=IP:status.podIP,NAME:.metadata.name &gt;hehe\n</code></pre></div><p>-l后面跟的是你要获取的pod的过滤器，也就是label的值，这里我是用上面rc创建的两个pod,自动给pod打标签为name=xxx-master2,所以这里这样写。</p>\n</li>\n<li><p>训练网络的例子，根据自己需要进行修改</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">send &#34;/mnt/lustre/share/intel64/bin/mpirun -n $numIp -ppn $gpuNum -f hostfile -env I_MPI_FABRICS shm:tcp /mnt/lustre/xxx/xxx/example/build/tools/caffe train --solver=/mnt/lustre/xxx/xxxx/example/resnet200/resnet200_solver.prototxt\\r&#34;\n</code></pre></div><h2>执行expect脚本</h2>\n<div class=\"highlight\"><pre><code class=\"language-text\">expect sensenet-pod-cfg.exp\n</code></pre></div></li>\n</ol><h1>自己制作的某个支持cuda的dockerfile</h1>\n<div class=\"highlight\"><pre><code class=\"language-text\">FROM 10.10.31.26:5000/nvidia/cuda:8.0-cudnn5-runtime-centos7\n# 作者\nMAINTAINER xxx &#34;xxx.com&#34;\n# 先安装一批需要的软件\nCOPY local_base.repo  /etc/yum.repos.d/local_base.repo\nCOPY requirements.txt /root/requirements.txt\nCOPY sshd_config /etc/ssh/sshd_config\n\nRUN yum clean all -y &amp;&amp; yum clean metadata -y \\\n        &amp;&amp; yum clean dbcache -y &amp;&amp; yum makecache -y \\\n        &amp;&amp; yum update -y \\\n        &amp;&amp; yum install -y  \\\n        boost boost-devel \\\n        glog glog-devel \\\n        protobuf protobuf-devel protobuf-python \\\n        hdf5-devel hdf5 \\\n        openssh-server \\\n        lmdb-devel lmdb \\\n        leveldb leveldb-devel \\\n        opencv opencv-devel opencv-python \\\n        openblas-devel openblas \\\n        &amp;&amp; echo &#39;root:12345678&#39; | chpasswd \\\n        &amp;&amp; yum clean all \\\n        &amp;&amp; ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key \\\n        &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key \\\n        &amp;&amp; ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key \\\n        &amp;&amp; ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key \\\n        &amp;&amp; mkdir /var/run/sshd\n</code></pre></div><h1>参考资料</h1>\n<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000007448177\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">把jupyter-notebook装进docker里</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//%25E5%25BE%2590%25E6%2596%25B0%25E5%259D%25A4%25E7%259A%2584%25E5%258D%259A%25E5%25AE%25A2%2520%257C%2520XuXinkun%2520Blog\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tensorflow gpu in docker</a>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "Caffe（深度学习框架）", 
                    "tagLink": "https://api.zhihu.com/topics/20019488"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/dragonfive"
}
