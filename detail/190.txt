{
    "title": "Pilot Roadmap", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/cheng-zi-71-69-6", 
        "https://www.zhihu.com/people/woody-93", 
        "https://www.zhihu.com/people/nicolarun", 
        "https://www.zhihu.com/people/qi-yue-feng-51-21", 
        "https://www.zhihu.com/people/li-guang-21-32", 
        "https://www.zhihu.com/people/he-yuan-ming-43-33", 
        "https://www.zhihu.com/people/ven-31-77", 
        "https://www.zhihu.com/people/zhou-kai-2-38", 
        "https://www.zhihu.com/people/joker-78-24-86", 
        "https://www.zhihu.com/people/qi-che-ren-82", 
        "https://www.zhihu.com/people/feng-79-45", 
        "https://www.zhihu.com/people/liu-yi-60-28", 
        "https://www.zhihu.com/people/richard-51-87", 
        "https://www.zhihu.com/people/wang-si-bo-34", 
        "https://www.zhihu.com/people/guo-feng-yu", 
        "https://www.zhihu.com/people/li-yuan-36-79-49", 
        "https://www.zhihu.com/people/liu-lu-34-98", 
        "https://www.zhihu.com/people/deng-yong-zhang", 
        "https://www.zhihu.com/people/ling-du-21-23", 
        "https://www.zhihu.com/people/zhu-shen-huang-hun-18", 
        "https://www.zhihu.com/people/fen-yin-yue-zhi-ming", 
        "https://www.zhihu.com/people/qin-qin-xiao-qiong", 
        "https://www.zhihu.com/people/glarysun-83", 
        "https://www.zhihu.com/people/henry_hu", 
        "https://www.zhihu.com/people/bei-da-huang-69", 
        "https://www.zhihu.com/people/jason-15-59-38", 
        "https://www.zhihu.com/people/ruben_shaw", 
        "https://www.zhihu.com/people/zhu-que-70-61", 
        "https://www.zhihu.com/people/joe-37-79-67", 
        "https://www.zhihu.com/people/kelton-4", 
        "https://www.zhihu.com/people/don-si", 
        "https://www.zhihu.com/people/shi-zhi-dong-35-41", 
        "https://www.zhihu.com/people/sudabing", 
        "https://www.zhihu.com/people/rey-king", 
        "https://www.zhihu.com/people/chrean", 
        "https://www.zhihu.com/people/xuhaibin-36", 
        "https://www.zhihu.com/people/xiong-xiong-15-5-80", 
        "https://www.zhihu.com/people/vehansor", 
        "https://www.zhihu.com/people/andychen-67-51", 
        "https://www.zhihu.com/people/ping-yu-jun-57", 
        "https://www.zhihu.com/people/luo-xin-66-90", 
        "https://www.zhihu.com/people/ddd-0", 
        "https://www.zhihu.com/people/pan-chen-31-43", 
        "https://www.zhihu.com/people/chen-zhao-46-23", 
        "https://www.zhihu.com/people/xxxs-89", 
        "https://www.zhihu.com/people/xiao-q-13-87", 
        "https://www.zhihu.com/people/wang-wei-zheng-84", 
        "https://www.zhihu.com/people/donsylen-43", 
        "https://www.zhihu.com/people/hymao-90", 
        "https://www.zhihu.com/people/liliang-liu", 
        "https://www.zhihu.com/people/he-zheng-e", 
        "https://www.zhihu.com/people/gghjk-98", 
        "https://www.zhihu.com/people/zimu-37-9", 
        "https://www.zhihu.com/people/joe-zheng-74", 
        "https://www.zhihu.com/people/shuai-ge-ge-de-52", 
        "https://www.zhihu.com/people/yu-qi-qi-17-18", 
        "https://www.zhihu.com/people/richei-chen", 
        "https://www.zhihu.com/people/atiqian", 
        "https://www.zhihu.com/people/lta1szh", 
        "https://www.zhihu.com/people/cao-xu-52-64", 
        "https://www.zhihu.com/people/sun-zhen-xing-33", 
        "https://www.zhihu.com/people/yangdaiyu123", 
        "https://www.zhihu.com/people/yiiwood", 
        "https://www.zhihu.com/people/keanu-zhu", 
        "https://www.zhihu.com/people/ming-shu-3", 
        "https://www.zhihu.com/people/wu-ming-39-5-23", 
        "https://www.zhihu.com/people/xiao-qiao-mu-7", 
        "https://www.zhihu.com/people/munitis", 
        "https://www.zhihu.com/people/zhang-teng-fei-55-58", 
        "https://www.zhihu.com/people/chen-yan-cheng", 
        "https://www.zhihu.com/people/trac-46-51", 
        "https://www.zhihu.com/people/jeffery-93-27", 
        "https://www.zhihu.com/people/fwang16", 
        "https://www.zhihu.com/people/lijuqqkiko", 
        "https://www.zhihu.com/people/jax-59", 
        "https://www.zhihu.com/people/sheng-gao", 
        "https://www.zhihu.com/people/zero-31-14", 
        "https://www.zhihu.com/people/bu-qing-yun-59", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/dengwenwu", 
        "https://www.zhihu.com/people/hua-jian-yihu-jiu-16-74", 
        "https://www.zhihu.com/people/gogo-91-76", 
        "https://www.zhihu.com/people/ling-min", 
        "https://www.zhihu.com/people/mol-26-47", 
        "https://www.zhihu.com/people/hai-hun-95-66", 
        "https://www.zhihu.com/people/Schau_mal", 
        "https://www.zhihu.com/people/qi-guai-16", 
        "https://www.zhihu.com/people/ye-cha-4", 
        "https://www.zhihu.com/people/yang-liu-qing-73", 
        "https://www.zhihu.com/people/zhu-ya-ping", 
        "https://www.zhihu.com/people/liu-zhi-chao-43-88", 
        "https://www.zhihu.com/people/wang-xiao-bo-90"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/79624602", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 6, 
            "title": "Pilot Roadmap - 面向L3+自动驾驶的功能安全架构方案", 
            "content": "<blockquote>Ads：欢迎关注搭载SAE Level 3高速公路自动驾驶功能的Visteon DriveCore 域控制器产品，长期招人</blockquote><p>在SAE J3016:2018中确认的六个等级的车辆自动化系统中，一至二级被称为驾驶员辅助系统，三级以上则被划分为自动驾驶系统，三级以上自动驾驶功能中车辆和驾驶员责任的分割带来了功能责任的交割，进而带来了功能设计和系统架构上的变革。</p><p>以TTTech zFAS在Audi A8量产的自动驾驶功能Traffic Jam Pilot（交通拥堵驾驶）为例，在功能上简要地说就是，用户在功能设计运行区间内启动功能后，车辆通过环境建模做出路径规划和控制，实现车道线内的自动跟车功能。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-72c86b125041fb0325a38886a2a83418_b.jpg\" data-size=\"small\" data-rawwidth=\"846\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb\" width=\"846\" data-original=\"https://pic1.zhimg.com/v2-72c86b125041fb0325a38886a2a83418_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;846&#39; height=&#39;461&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"846\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"846\" data-original=\"https://pic1.zhimg.com/v2-72c86b125041fb0325a38886a2a83418_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-72c86b125041fb0325a38886a2a83418_b.jpg\"/><figcaption>Pic Source: https://www.audi-technology-portal.de/en/electrics-electronics/driver-assistant-systems/audi-a8-audi-ai-traffic-jam-pilot</figcaption></figure><p>Audi A8在<b>前向</b>传感器方案上选择了一枚前向激光雷达，一枚前向长距离毫米波雷达，两枚中距离毫米波角雷达，一枚前向广角镜头和两枚侧鱼眼镜头。在传感器性质方面可以实现物体识别，车道线识别，相对距离测距等功能。</p><p>自量产以来，Audi A8的传感器方案就受到了大量的关注，激光雷达的存在必要性饱受争议，但究其传感器选型的本质原因，除了性能要求外，安全要求也是其中的必要考量因素。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-151cc9993aeaba2de1cf17a2ba555518_b.jpg\" data-size=\"small\" data-rawwidth=\"876\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb\" width=\"876\" data-original=\"https://pic1.zhimg.com/v2-151cc9993aeaba2de1cf17a2ba555518_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;876&#39; height=&#39;494&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"876\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"876\" data-original=\"https://pic1.zhimg.com/v2-151cc9993aeaba2de1cf17a2ba555518_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-151cc9993aeaba2de1cf17a2ba555518_b.jpg\"/><figcaption>Pic Source: https://www.audi-technology-portal.de/en/electrics-electronics/driver-assistant-systems/audi-a8-audi-ai-traffic-jam-pilot </figcaption></figure><p>根据ISO26262-4中“车辆E/E系统故障导致的安全违规行为”以及SOTIF中“导致E/E无故障系统下错误传感器数据以及基于处理算法在传感器输入上应该避免和减轻的，以使系统处于安全状态”的需求。在出现故障时，系统必须关闭或必须通过（紧急）操作驱动。这意味着在SAE Level 3之后，特别是在SAE Level 4之后，有必要为失效操作提供功能安全、系统可用性和系统冗余的创新解决方案。</p><p>创新解决方案在系统安全领域中的要求可以理解为如果出现功能失效，必须在短时间内使系统保持在开启状态。为了达成这一目标，一方面可以通过设计风险最小化的简单功能达到功能失效状态下风险控制的目标，另一方面则可以通过正确开发系统安全架构机制和失效操作安全架构机制的方式来控制风险。</p><p>SAE Level 3的功能设计受限于高速公路等设计运行区间，而设计运行区间在不同时间空间上体现出的性质往往不同，在无相关规范指导的情况下，系统安全架构机制和失效操作安全机制就成为了良好的风险控制首选方案。目前在系统安全架构机制上大体分为两种，传统的Fail-safe安全机制以及现代的Fail-operational安全机制，Fail-safe安全机制要求系统监控关键的部件以达到失效后系统关断的目的，如在功能运行过程中监控摄像头系统，在摄像头无法正常工作时关闭系统以避免系统危害。</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-f4d0aa4dc7d6d98fbce9c90b9f3bc651_b.jpg\" data-size=\"small\" data-rawwidth=\"845\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb\" width=\"845\" data-original=\"https://pic2.zhimg.com/v2-f4d0aa4dc7d6d98fbce9c90b9f3bc651_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;845&#39; height=&#39;349&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"845\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"845\" data-original=\"https://pic2.zhimg.com/v2-f4d0aa4dc7d6d98fbce9c90b9f3bc651_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f4d0aa4dc7d6d98fbce9c90b9f3bc651_b.jpg\"/><figcaption>Pic Source: SAE International</figcaption></figure><p>上图是经典的驾驶辅助系统高等级功能架构模块示意图，Sensor，Processing，Actuator为系统正常工作状态下的功能通道，下方位置的Monitoring模块通过信息的反馈监控功能的状态。这种基于Fail-safe安全机制的架构方案在实现上与传统ECU相似，在系统架构中使用SEooC的方式满足功能安全的需求。但尽管功能安全的需求在Fail-safe的方案下可以被满足，自动驾驶功能本身“性质”的需求却无法满足。</p><p>在TJP状态下50KM/H工作的过程中，当驾驶员并未做好驾驶准备时出现了Fail-safe架构下的系统失效，系统突然的宕机会严重影响驾驶安全性，造成最高AIS 6等级的人身伤害。</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-b7c34d9e6a223d972150a67649a0f875_b.jpg\" data-size=\"small\" data-rawwidth=\"1611\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb\" width=\"1611\" data-original=\"https://pic2.zhimg.com/v2-b7c34d9e6a223d972150a67649a0f875_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1611&#39; height=&#39;507&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1611\" data-rawheight=\"507\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1611\" data-original=\"https://pic2.zhimg.com/v2-b7c34d9e6a223d972150a67649a0f875_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b7c34d9e6a223d972150a67649a0f875_b.jpg\"/><figcaption>Pic Source: SAE J3016:2018</figcaption></figure><blockquote>Ref: SAE J3016:2018 Use case sequence for a level 3 feature showing ADS engaged, occurrence of a failure or out-of-ODD condition, and the fallback-ready user performing the fallback, or, if the fallback-ready user fails to do so, a failure mitigation strategy, such as stop-in-lane.</blockquote><p>Fail-operational安全架构的存在解决了系统突然失效宕机可能造成的危害，这种架构可以实现关键系统模块的冗余，通过在两个或者多个不同的硬件和软件中实现多样性部署的方式，在系统失效的情况下提供备用解决方案。这些不同的硬件和软件可能有不同的物理特性，甚至来自于不用的开发团队和公司，作用就是提供关键信息的异构冗余。在Fail-operational的安全架构下有多种设计思路，常见的有1-Out-Of-2 Safety Architecture (1oo2)，2-Out-Of-3 Safety Architecture (2oo3) etc。</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-b9d2c92e2d3f58b1772ec19d6899d497_b.jpg\" data-size=\"small\" data-rawwidth=\"839\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb\" width=\"839\" data-original=\"https://pic4.zhimg.com/v2-b9d2c92e2d3f58b1772ec19d6899d497_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;839&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"839\" data-rawheight=\"306\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"839\" data-original=\"https://pic4.zhimg.com/v2-b9d2c92e2d3f58b1772ec19d6899d497_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b9d2c92e2d3f58b1772ec19d6899d497_b.jpg\"/><figcaption>Pic Source: SAE International</figcaption></figure><p>1-Out-Of-2 Safety Architecture (1oo2)的安全架构往往由两个独立的处理单元组成，两个独立的处理单元能够独立控制执行器，当一个处理单元发生故障时，通过诊断模块提供的故障信息，系统仍可在第二通道运行，这种解决方案通常存在于一些低成本的关键零部件中。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-c23d78811e474c62343a316b4f6d49d6_b.jpg\" data-size=\"small\" data-rawwidth=\"839\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb\" width=\"839\" data-original=\"https://pic3.zhimg.com/v2-c23d78811e474c62343a316b4f6d49d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;839&#39; height=&#39;455&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"839\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"839\" data-original=\"https://pic3.zhimg.com/v2-c23d78811e474c62343a316b4f6d49d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c23d78811e474c62343a316b4f6d49d6_b.jpg\"/><figcaption>Pic Source: SAE International</figcaption></figure><p>2-Out-Of-3 Safety Architecture (2oo3)的安全架构被广泛地应用在航空电子设备中，在这种安全架构方案下，三个独立的处理单元互相冗余并两两校验在输出端使用两个独立的判断单元对处理单元的输出进行校验，若三路输出一致则系统工作正常，若一路出现故障系统依然可以继续运行另外两路运算单元，这种高成本的解决方案在价格高昂的同时也会带来开发过程中如功耗散热问题的大量技术难题和供应链管理的复杂问题。</p><p>若将Fail-operational安全架构的思想扩展到SAE Level 3以上的具体自动驾驶系统开发中，系统失效状态下的鲁棒性就是一个关键的议题，如果系统在失效状态下在车辆道路上突然停止工作，结合高鲁棒性和成本的考虑，在自动驾驶控制器的选择上可以使用1oo2的解决方案。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-204b207146b400e27c49ec02069f17a4_b.jpg\" data-size=\"small\" data-rawwidth=\"1331\" data-rawheight=\"766\" class=\"origin_image zh-lightbox-thumb\" width=\"1331\" data-original=\"https://pic1.zhimg.com/v2-204b207146b400e27c49ec02069f17a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1331&#39; height=&#39;766&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1331\" data-rawheight=\"766\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1331\" data-original=\"https://pic1.zhimg.com/v2-204b207146b400e27c49ec02069f17a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-204b207146b400e27c49ec02069f17a4_b.jpg\"/><figcaption>Pic Source: SAE International</figcaption></figure><p>这种设计模式要求异构的传感器输入被独立地处理，异构的传感器摄像头，毫米波雷达以及激光雷达(等)提供冗余的感知方案，这也就解释了Audi A8上搭载激光雷达的必要性。</p><p>在功能正常运行的过程中，摄像头提供物体车道线2D信息，毫米波雷达提供物体相对位置信息，激光雷达提供物体车道线信息，通过冗余的传感器融合方案提供冗余的车道线和物体关键信息，Core 1和Core 2两块高性能处理器同时工作处理功能逻辑，并将输出传递到安全芯片的Core 3上进行对比。当对比结果出现偏差则进入降级失效通道，运行在Core 1或Core 2上的安全停车功能。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-40f1795900f54d40c6d77f21576e1168_b.jpg\" data-size=\"small\" data-rawwidth=\"675\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb\" width=\"675\" data-original=\"https://pic1.zhimg.com/v2-40f1795900f54d40c6d77f21576e1168_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;675&#39; height=&#39;325&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"675\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"675\" data-original=\"https://pic1.zhimg.com/v2-40f1795900f54d40c6d77f21576e1168_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-40f1795900f54d40c6d77f21576e1168_b.jpg\"/><figcaption>Pic Source: Visteon</figcaption></figure><p>在1oo2的架构层面思想下，TJP的功能在逻辑层面上可以被分解为三个通道，通道1和通道2互相独立，互相冗余，在正常工作状态下相互校验工作。在两异构通道输出不同时，由Safe Chip上的故障检测机制转入第三通道进行紧急操作至安全状态。</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-326eecd0bc525ee0382e8c34e1a3eb55_b.jpg\" data-size=\"small\" data-rawwidth=\"1445\" data-rawheight=\"706\" class=\"origin_image zh-lightbox-thumb\" width=\"1445\" data-original=\"https://pic2.zhimg.com/v2-326eecd0bc525ee0382e8c34e1a3eb55_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1445&#39; height=&#39;706&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1445\" data-rawheight=\"706\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1445\" data-original=\"https://pic2.zhimg.com/v2-326eecd0bc525ee0382e8c34e1a3eb55_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-326eecd0bc525ee0382e8c34e1a3eb55_b.jpg\"/><figcaption>Plus：可适应面向SAE Level 4的系统安全架构方案</figcaption></figure><p>在面向如TJP一类SAE Level 3功能ASIL D安全目标的解决方案中，根据ISO26262 5&amp;6的需求，系统安全概念在SoC上功能安全的要求可以分为软件和硬件两个层面，软件部分在SEooC概念下，通过AUTOSAR的方式提供高内聚低耦合的系统组件架构要求。</p><p>硬件层面上功能安全对于SoC的要求则主要体现在单点失效度量Single-Point Fault Metric和潜在故障度量Latent Fault Metric两个方面，前者表示系统故障的鲁棒性以及在故障情况下对于非故障功能的影响程度，值越高，必须采取的措施越多，后者则更关注系统故障之后带来的故障分析。</p><p>从系统安全概念层面分解下来对于硬件上的需求首先是具有锁步功能的多核处理器以支持高性能计算需求下的冗余方案，其次需要具有内存保护系统，信号量可以支持多个系统定时器的硬件扩展，以支持闪存分段和功能隔离的需求。内部的自检功能和每个CPU的单独重置功能以支持系统层面功能安全等等。</p><p>许多安全相关的应用功能将陆续在未来的几年内被应用于量产车型，随着自动驾驶接管任务越来越多的趋势增加，未来的自动驾驶汽车需要强制性更高的可用度，低成本的安全架构方案将极大程度地减少系统成本，收割更多的市场空间。</p><p></p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74228297", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 4, 
            "title": "Pilot Roadmap - ACC Safety Analysis by FMEA & FTA", 
            "content": "<blockquote>Ref：Safety Analysis of Adaptive Cruise Control System Using FMEA and FTA, ISSN: 2277 128X</blockquote><p><b>Before Going to Analysis：</b></p><p>对于智能驾驶功能来说，功能架构作为整车层面的产物涉及到感知决策控制三个部分，对应到相应的物理拓扑架构上可抽象地理解为传感器/电子控制单元-网络通讯-电子控制单元-网络通讯-执行机构/人机交互界面的形式，由多子系统协同工作完成功能。因此智能驾驶功能的失效可以理解为整车层面的失效，而物理拓扑结构上任何一环的失效都有可能导致功能的失效。</p><p>进行功能层面的安全分析的意义在于在整车层面保证功能的安全。传统子系统层面的失效分析只考虑到单一子系统的问题，对应物理拓扑上，意味着只考虑了电子控制单元以及其系统边界范围的失效问题。智能驾驶功能和子系统功能并未对等关系，两者之间的逻辑关系类似于STAMP思想中的大圈套小圈。由智能驾驶功能失效分析得出的功能在系统层面的失效原因和对应策略可以作为系统架构的重要输入，在后续的子系统功能失效分析的过程中也可以在保证与整车功能失效分析的可追溯性。</p><p>智能驾驶功能可以通过减少驾驶员的工作量来帮助预防事故。ACC自适应巡航是智能驾驶功能的一种，允许车辆的自适应巡航控制系统使车辆的速度适应交通环境。连接到车辆前部的雷达系统用于检测移动的车辆是否在ACC车辆的路径中。如果检测到移动的车辆，则ACC系统将控制车辆保持和前方车辆之间的间隙或时间间隔。如果系统检测到前方车辆不再处于ACC车辆的路径中，则ACC系统将车辆加速回到其设定的巡航控制速度。该操作允许车辆在没有驾驶员干预的情况下自动减速并加速。本文的目的是从安全角度描述基于故障模式和影响分析（FMEA）和故障树分析（FTA）的安全关键方法，以开发自适应巡航控制系统。这种使用FMEA的方法始于早期的系统设计。因此，可以在概念阶段及早发现整车层面导致潜在事故的设计缺陷并采取必要的干预措施。</p><p>系统安全分析方法是一种评估系统所带来的危险和风险以及最小化它们的方法，危险和风险是系统的一种状态或一组条件，与系统环境中的其他条件一起，将不可避免地导致事故。系统安全性分析的主要关注点是危害管理：通过分析，设计和管理程序进行识别，评估，消除和控制危害分析是第一阶段。风险分析是第二阶段，确定危害的可能结果和每种结果的出现频率。由此对系统中潜在危害源进行优先级处理和处理，以提高系统的安全性。系统安全分析过程基本上可以分为以下几个步骤：</p><ul><li>危害识别：此步骤识别功能中的潜在危险。</li><li>风险评估：检查每个已识别的危险，以确定它们构成的威胁程度。 这有助于确定将风险降低到可接受水平所需的步骤，在此阶段设定了许多初始安全要求。</li><li>初步系统安全评估（PSSA）：该阶段涉及确保拟议设计能够满足其安全要求，并在必要时改进这些安全要求。</li><li>系统安全评估：此阶段涉及产生证据，证明分析已满足安全要求。</li><li>安全分析方法：FMEA（故障模式影响分析）和FTA（故障树分析）是广泛使用的典型可靠性分析方法。</li></ul><blockquote>FMEA（故障模式影响分析）：故障模式和影响分析（FMEA）是一种渐进的方法，用于识别设计，制造或装配过程或生产者服务中的所有可能故障。根据故障的严重程度，故障发生的频率以及检测故障的程度，对故障进行优先排序。FMEA的目的是采取措施消除或减少故障，从最优先的故障开始。FMEA由三个主要阶段组成。在识别的第一阶段，需要确定可能出现的问题。在分析的第二阶段，需要确定失败的概率、其后果并根据此计算风险优先级数。在第三阶段，应该考虑如何消除不良结果的发生或降低其严重程度。故障模式和影响分析还记录了当前关于故障风险的知识和行动，以用于持续改进。 在设计过程中使用FMEA来防止故障。之后它在过程的持续运行之前和期间用于控制。 理想情况下，FMEA始于设计的最早概念阶段，并在产品或服务的整个生命周期中持续进行。<br/>FTA（Fault Tree Analysis）：故障树分析（FTA）是一种高效的危害识别工具。 它提供了一个标准化的方法来评估和控制危害。 FTA定性和定量的方法都用于识别系统中对安全操作最关键的区域。 </blockquote><p>执行FTA的步骤如下：</p><p>1. 假设系统状态并识别同时清楚地记录最高级别的不期望事件。</p><p>2. 通过自上而下的过程开发树的中层。这就是确定中间故障，这些故障或事件的组合是导致更高级别事件发生的最小值。</p><p>3. 继续自上而下的过程，直到识别出每个分支的根本原因和/或直到认为不需要进一步分解为止。</p><p>4. 将失效概率分配给树的每个分支中的最低级事件。</p><p>5. 使用布尔逻辑为树建立布尔方程，并评估不希望的顶级事件的概率。</p><p>6. 与系统级要求比较。如果不满足要求，则实施纠正措施。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>ACC Sample Safety Analysis：</b></p><p>ACC物理逻辑架构：</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-a0d5c767ec677a1f39ec1efff16963bc_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"841\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb\" width=\"841\" data-original=\"https://pic1.zhimg.com/v2-a0d5c767ec677a1f39ec1efff16963bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;841&#39; height=&#39;735&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"841\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"841\" data-original=\"https://pic1.zhimg.com/v2-a0d5c767ec677a1f39ec1efff16963bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a0d5c767ec677a1f39ec1efff16963bc_b.jpg\"/></figure><p>ACC物理架构由一系列互连组件和子系统组成，不同模块之间通过控制器局域网（CAN）的串行通信网络进行通讯。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-151c53821018c138cb4cf7139f609ff8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"353\" data-rawheight=\"354\" class=\"content_image\" width=\"353\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;353&#39; height=&#39;354&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"353\" data-rawheight=\"354\" class=\"content_image lazy\" width=\"353\" data-actualsrc=\"https://pic1.zhimg.com/v2-151c53821018c138cb4cf7139f609ff8_b.jpg\"/></figure><p>ACC模块 - ACC模块的主要功能是处理雷达信息以确定是否存在前方车辆。当ACC系统处于“时间间隙控制”时，它将信息发送到发动机控制和制动控制模块，以控制车辆和目标车辆之间的间隔。雷达信号将雷达信息发送到所有互连组件和系统。</p><p>发动机控制模块 - 发动机控制模块的主要功能是从ACC模块和仪表盘接收信息，并根据此信息通过控制发动机的油门控制车辆的速度。</p><p>制动控制模块 - 制动控制模块的主要功能是通过车轮调解车辆速度，并在ACC模块请求时通过制动器来减速。</p><p>仪表盘 - 仪表盘的主要功能是处理巡航开关并将其信息发送到ACC和发动机控制模块以及显示有关ACC系统状态的信息。</p><p>CAN - 控制器区域网络（CAN）是一种汽车标准网络，它使用两根通信线材来发送和接收数据。</p><p>巡航开关 - 巡航开关安装在方向盘上，并有几个按钮允许驾驶员指挥ACC系统的操作。开关包括：&#39;开&#39;：将系统置于&#39;ACC待机&#39;状态；&#39;关&#39;&#39;：取消ACC操作并将系统置于&#39;ACC关&#39;状态。</p><p>自适应巡航控制的失效模式和效果分析（FMEA）</p><p>FMEA是一种自下而上的技术，用于识别，优先排序和消除系统设计或过程中的潜在故障。</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-13bca67fb7f2b52a4b48e94bffb2a1eb_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1083\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb\" width=\"1083\" data-original=\"https://pic4.zhimg.com/v2-13bca67fb7f2b52a4b48e94bffb2a1eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1083&#39; height=&#39;664&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1083\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1083\" data-original=\"https://pic4.zhimg.com/v2-13bca67fb7f2b52a4b48e94bffb2a1eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-13bca67fb7f2b52a4b48e94bffb2a1eb_b.jpg\"/></figure><p>自适应巡航控制的故障树分析（FTA）</p><p>FTA是一种自上而下的故障分析，用于发现故障或潜在故障的根本原因。 </p><p>对于雷达传感器，故障状态被描述为“雷达传感器故障”。为了确定如何进一步扩展此故障。由逻辑门“OR”连接的三个独立事件重新表示故障：电气部件故障，雷达杂波故障和噪声故障。主要故障被定义为传感器内部的缺陷，最有可能发生在电气元件上且任何电气部件故障导致的结果是传感器输出等于该传感器的最大值或最小值。次级故障可表示为“由于环境混乱导致的雷达传感器故障”。“由于环境混乱引起的雷达传感器故障”的中间事件可以通过两个中间事件和未定义的事件来描述。由于腐蚀作用引起的雷达故障描述了任何环境中的传感器性能，并且可能影响电气部件的完整性并导致降级。</p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-bf2eb42e88bd5d817f7108331ed134eb_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"964\" data-rawheight=\"975\" class=\"origin_image zh-lightbox-thumb\" width=\"964\" data-original=\"https://pic4.zhimg.com/v2-bf2eb42e88bd5d817f7108331ed134eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;964&#39; height=&#39;975&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"964\" data-rawheight=\"975\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"964\" data-original=\"https://pic4.zhimg.com/v2-bf2eb42e88bd5d817f7108331ed134eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bf2eb42e88bd5d817f7108331ed134eb_b.jpg\"/></figure><p>若此事件无法进一步描述，则被视为未定义事件。杂波是指从目标返回的射频回波，这对雷达来说是无用的。这些目标包括自然物体，如地面，海洋，降水（如雨，雪或冰雹），沙尘暴，动物（尤其是鸟类），大气湍流和其他大气效应，如电离层反射，流星痕迹和三体分散尖峰。第三个故障是信号噪声，它是信号中随机变化的内部源，由所有电子元件产生。随着距离的增加，反射信号迅速下降，因此噪声会引入雷达范围限制。噪声基底和信噪比是影响范围性能的两种不同性能指标。距离太远的反射器产生的信号太少，无法超过噪声基底，无法检测到。噪声通常表现为叠加在雷达接收器中接收的期望回波信号上的随机变化。所需信号的功率越低，从噪声中辨别它就越困难。噪声系数是接收器与理想接收器相比产生的噪声的度量，需要将其最小化。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-9d9c74f0637e9f0985470c44528b91f2_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"781\" data-rawheight=\"799\" class=\"origin_image zh-lightbox-thumb\" width=\"781\" data-original=\"https://pic3.zhimg.com/v2-9d9c74f0637e9f0985470c44528b91f2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;781&#39; height=&#39;799&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"781\" data-rawheight=\"799\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"781\" data-original=\"https://pic3.zhimg.com/v2-9d9c74f0637e9f0985470c44528b91f2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9d9c74f0637e9f0985470c44528b91f2_b.jpg\"/></figure><p>车速传感器测量变速器输出或车轮速度。由于传感器系统的电源供应失败，速度传感器出现故障，并且关键电子元件也出现故障。当速度传感器的接线缺陷时，传感器没有电源供应，连接传感器的子系统也会发生故障。任何传感器的关键电子元件都是电阻器，电解电容器，陶瓷电容器，金属薄膜电容器，功率MOSFET，这些组件的故障导致传感器故障时会导致灾难性问题。突然的元件故障会产生足够的热量，因为故障电流会损坏传感器的绝缘材料并使其碳化。 这种碳化可导致不同电位的迹线之间的传导，并可能导致传感器失效。</p><p>要克服雷达传感器故障：</p><ul><li>雷达传感器由于电气元件故障，感应噪声和杂波效应而失效。由于天气条件和道路状况的变化而产生杂波效应。因此，雷达中使用的部件应能抵抗天气条件和道路状况。雷达中使用的电气元件应该可靠且正常工作。 </li><li>前方的雷达传感器应检测小物体（例如摩托车）或远离中心的车辆。应在车辆后部增加一个额外的雷达传感器，以检测车辆后方的速度和距离。</li></ul><p>要克服速度传感器故障：</p><ul><li>策略性地设计组件有助于在组件由于大量功耗而导致热或热失效时限制对传感器的损坏。</li><li>需要对环境应力进行稳健设计。</li><li>产生热量的组件应远离故障敏感部件，如电源供应或输入。</li><li>可能放电失败的元件，例如功率FET，可以策略性地放置，使得故障不会传播到元件之外。</li></ul><p>自适应巡航控制系统的开发旨在提高驾驶安全性和舒适性。它减少了驾驶所需的加速减速操作次数，使得驾驶员可以舒适地驾驶。本文通过使用FMEA和FTA的方式对自适应巡航控制系统在安全关键系统故障分析中可能出现的故障进行分析， 为整车功能系统到子系统的验证测试优先级和因果提供了重要的输入。</p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70037041", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 2, 
            "title": "Pilot Roadmap - System STPA Analysis(4)", 
            "content": "<p>本篇介绍STPA实例中的第三步以及第四步，Identify unsafe control actions &amp; Identify loss scenarios, 搬运自STPA Handbook</p><p>当控制模型被建好之后，下一步就是确定不安全的控制措施。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-98bd2ca304bc4778389161eef5a18639_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"336\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;336&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"336\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic2.zhimg.com/v2-98bd2ca304bc4778389161eef5a18639_b.jpg\"/></figure><p>定义：不安全控制措施（UCA）是一种控制措施，在特定环境和最坏情况下会导致危害，下面是对于不安全控制措施的一个针对Braking的例子：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ed8ffc461d812ddbdff7b6f1a89a1220_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic1.zhimg.com/v2-ed8ffc461d812ddbdff7b6f1a89a1220_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic1.zhimg.com/v2-ed8ffc461d812ddbdff7b6f1a89a1220_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ed8ffc461d812ddbdff7b6f1a89a1220_b.jpg\"/></figure><p>控制操作有四种不安全的方式（在上面的列中表示）：</p><p>1.不提供控制措施会导致危险。</p><p>2.提供控制措施会导致危险。</p><p>3.提供可能安全的控制措施，但过早，太晚或错误的顺序。</p><p>4.控制动作持续时间过长或过早停止（对于连续控制动作，而不是离散控制动作）。</p><p>对于UCA-2来说这种情况是不安全的，因为它可能导致H-4.3：在起飞时的V1点之后发生减速并且H-4.5：在起飞期间加速度不足。每个UCA都可以追溯到一个或多个危险（或子危害），优良作法是在每个UCA结束时记录括号中的可追溯性。</p><p>UCA应指定控制措施不安全的上下文。背景是至关重要的。假设您知道飞机上的BSCU可以提供制动命令。该命令可能不安全吗？如果不考虑背景，就无法评估。 UCA-2包含“在正常起飞期间”的上下文，这使得控制动作不安全。</p><p>如果控制动作始终不安全，那么工程师就不会将其包含在系统设计中。每个UCA必须在什么条件下（在什么情况下）指定控制措施是不安全的。然后我们可以从系统设计中消除这些实例或找到减轻它们的方法。可以在UCA中引用任何相关的上下文，包括环境条件，受控过程状态，控制器状态，先前动作和参数（例如，被编程的特定下降速率）。在UCA构造中使用诸如“when”，“while”或“during”之类的单词通常有助于开发上下文。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ad4eb3955fe4036f21f4c50eb8759bd9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"40\" class=\"origin_image zh-lightbox-thumb\" width=\"468\" data-original=\"https://pic2.zhimg.com/v2-ad4eb3955fe4036f21f4c50eb8759bd9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;468&#39; height=&#39;40&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"40\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"468\" data-original=\"https://pic2.zhimg.com/v2-ad4eb3955fe4036f21f4c50eb8759bd9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ad4eb3955fe4036f21f4c50eb8759bd9_b.png\"/></figure><p>一旦确定了UCA，就可以将它们转换为对每个控制器行为的约束。 例如，在分析控制动作时，我们确定在正常起飞期间提供制动控制动作的BSCU可能导致危险。 因此，BSCU不得在该上下文中提供制动控制动作。 通常，可以反转每个UCA以定义每个控制器的约束。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-60c23d74833a35e334bff558153b8ede_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb\" width=\"454\" data-original=\"https://pic3.zhimg.com/v2-60c23d74833a35e334bff558153b8ede_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;454&#39; height=&#39;132&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"454\" data-original=\"https://pic3.zhimg.com/v2-60c23d74833a35e334bff558153b8ede_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-60c23d74833a35e334bff558153b8ede_b.jpg\"/></figure><p>当所有的不安全控制措施已经被确定后，下一步就是确定Loss Scenario，对于Loss Scenario的官方定义为：描述可能导致不安全控制措施和危害的因果因素。当谈到因果因素时，有两点需要考虑，它们分别为：</p><p>为什么不安全控制措施会发生？</p><p>为什么安全的控制措施被错误的执行或者并未被执行？</p><p>用一张图来直观地感受下STAMP结构下对于两点原因的划分：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9491e180908b37763b613e4d6d6e47b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic2.zhimg.com/v2-9491e180908b37763b613e4d6d6e47b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;496&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"496\" data-original=\"https://pic2.zhimg.com/v2-9491e180908b37763b613e4d6d6e47b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9491e180908b37763b613e4d6d6e47b5_b.jpg\"/></figure><p>a）识别导致不安全控制措施的情景</p><p>可以通过从UCA开始并向后工作来解释可能导致控制器提供（或不提供）该控制操作的原因来创建这种类型的场景。通常，导致UCA的方案可能涉及：</p><p>- 与控制器相关的故障（用于物理控制器）</p><p>o控制器本身的物理故障</p><p>o电源故障</p><p>等等</p><p>- 控制算法不足</p><p>o指定控制算法的有缺陷的实现</p><p>o指定的控制算法存在缺陷</p><p>o由于更改或降级，指定的控制算法随着时间的推移变得不充分</p><p>- 不安全的控制输入</p><p>o UCA从另一个控制器接收（在考虑其他控制器的UCA时已经解决）</p><p>- 过程模型不足</p><p>o控制器收到错误的反馈/信息</p><p>o控制器接收正确的反馈/信息，但不正确地解释它或忽略它</p><p>o控制器在需要时（延迟或从未收到）不接收反馈/信息</p><p>o不存在必要的控制器反馈/信息</p><p>要创建涉及不安全控制操作的方案，我们必须从导致UCA的不安全控制器行为开始。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f616dc2590e2d5748ecee73763cb55f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"468\" data-original=\"https://pic4.zhimg.com/v2-f616dc2590e2d5748ecee73763cb55f3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;468&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"468\" data-original=\"https://pic4.zhimg.com/v2-f616dc2590e2d5748ecee73763cb55f3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f616dc2590e2d5748ecee73763cb55f3_b.jpg\"/></figure><p>1）不安全的控制器行为</p><p>控制器可能提供（或不提供）不安全的控制操作有四个一般原因：</p><p>- 涉及控制器的故障（用于物理控制器）</p><p>- 控制算法不足</p><p>- 安全控制输入（来自另一个控制器）</p><p>- 过程模型不足</p><p>通常，控制算法中的缺陷可能源于：</p><p>- 指定控制算法的有缺陷的实现</p><p>- 指定的控制算法存在缺陷</p><p>- 由于更改或降级，指定的控制算法随着时间的推移变得不充分</p><p>这些类型的缺陷中的每一种的具体原因可能取决于所研究的应用。</p><p>当控制算法假定先前的控制动作已被正确执行时，发生一种常见的控制算法缺陷。当没有反馈来指示控制动作是否成功时，这个缺陷尤其重要。例如，BSCU Autobrake可能不提供制动控制动作，因为它错误地假设先前的制动控制动作成功并且飞机已经制动。</p><p>为了包括与安全性相关的场景，需要考虑另外一种可能性：确定对手是否以及如何引入控制算法缺陷。</p><p>来自其他控制器的不安全控制输入也可能导致UCA。在为其他控制器识别不安全控制操作时，可以在上一步中找到这些内容。</p><p>最后，不适当的流程模型可能导致不安全控制操作。如上所述，过程模型表示控制器的内部信念，控制算法使用该内部信念来确定控制动作。当控制器的过程模型与现实不匹配时，会发生过程模型缺陷。可能会出现流程模型缺陷，原因是：</p><p>- 控制器收到错误的反馈/信息</p><p>- 控制器接收正确的反馈/信息，但不正确地解释或忽略它</p><p>- 控制器在需要时（延迟或从未收到）不接收反馈/信息</p><p>- 不存在必要的控制器反馈/信息</p><p>根据应用，这些问题可能以许多不同的方式出现。控制器可能收到错误的反馈/信息，包括无法解决的冲突信息或可能无法正确解决的冲突。可以接收正确的反馈/信息但忽略，因为控制器被禁用，关闭，忙于其他任务，缺少具有更新必要条件的过程模型或其他原因。如果过程模型更新不正确，错误的过程模型更新，反馈/信息被认为代表其他内容或其他错误，则可能会出现控制器解释问题。如果从未接收到反馈，则可能在需要时不接收反馈/信息 - 特别是如果控制器可以采用默认值代替反馈 - 或者如果反馈被延迟，则包括无序接收的信息。最后，控制结构或设计中可能不存在必要的反馈/信息，导致过程模型不充分。</p><p>要识别这些方案，需要从UCA开始，并确定可能导致UCA的控制器进程模型。考虑关于当前状态或模式，先前状态，能力，动态行为，先前行为或行为，未来状态或行为（预测）的信念，关于当前正在控制的过程的信念，其他受控过程，系统中的其他控制器用于协调，执行器，传感器或系统或环境的其他相关方面。</p><p>一旦确定了可能导致UCA的相关流程模型，就可以确定流程模型如何因收到的反馈或其他信息（或缺乏信息）而发生。对于Loss Scenario的分析来说，必须完成涉及反馈/信息不足的任何情景，以解释反馈/信息可能不充分的原因。如果不了解其原因，就无法避免反馈和信息不足。</p><p>2）反馈和信息不足的原因</p><p>每当场景识别出可能导致UCA的反馈或信息（或缺乏信息）时，我们需要检查反馈/信息的来源，以解释可能导致这些问题的原因。反馈来自受控过程（通常通过传感器），其他信息可能来自其他过程，其他控制器或系统或环境中的其他来源。</p><p>一般而言，与反馈和信息不足相关的情景可能涉及：</p><p>- 未收到反馈或信息</p><p>o传感器发送但未被控制器接收的反馈/信息</p><p>o传感器不发送反馈/信息，但接收或应用于传感器</p><p>o未接收或应用传感器的反馈/信息</p><p>o控制结构中不存在反馈/信息，或者传感器不存在</p><p>- 收到的反馈不足</p><p>o传感器响应充分，但控制器收到的反馈/信息不足</p><p>o传感器对接收或应用于传感器的反馈/信息的响应不充分</p><p>o传感器无法或不能设计为提供必要的反馈/信息</p><p>涉及发送但未被接收或接收不充分的反馈/信息的场景可能由传输错误，通信丢失，通信延迟（包括发送但以不同顺序接收的反馈/信息）和其他问题引起。传感器故障，传感器断电，传感器操作或测量不准确，传感器错误或误操作，传感器响应延迟，配置错误，传感器退化或变化等原因导致传感器响应不足或无响应的情况时间，传感器环境中的意外情况或其他问题。此外，由于设计错误，规格缺陷，关于受控过程的错误假设，测量错误条件的传感器，报告正确但误导性信息的传感器（例如车轮处于零轮速时），传感器可能无法提供必要的反馈。锁定，但飞机正在移动），或其他问题。</p><p>我们可以通过识别为什么在给定系统的实际真实状态（在UCA上下文中指定）可以接收反馈/信息来完成涉及反馈/信息的场景。</p><p>b）识别控制动作未正确执行或未执行的场景</p><p>UCA可能导致危害，但如果控制操作执行不当或未执行，也可能在没有UCA的情况下导致。 要创建这些场景，我们必须考虑影响控制路径的因素以及影响受控过程的因素。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7b2321166538ba6e92600a9c5c35d45c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-7b2321166538ba6e92600a9c5c35d45c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;498&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-7b2321166538ba6e92600a9c5c35d45c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7b2321166538ba6e92600a9c5c35d45c_b.jpg\"/></figure><p>1）涉及控制路径的场景</p><p>控制路径将控制动作转移到受控过程。控制路径可以包括简单的致动器，可以包括一系列致动器，或者它可以通过具有开关，路由器，卫星或其他设备的复杂网络传输控制动作。无论如何实现，我们必须确定此路径上的问题如何导致控制操作不正确地执行或不执行。</p><p>通常，涉及控制路径的方案可能包括：</p><p>- 未执行控制操作</p><p>o控制器发出控制动作但执行器未接收到控制动作</p><p>o执行器接收控制动作，但执行器不响应</p><p>o执行器响应但控制过程未应用或接收控制动作</p><p>- 控制动作未正确执行</p><p>o控制器发送控制动作但执行器未正确接收</p><p>o执行器正确接收控制动作，但执行器响应不充分</p><p>o执行器响应充分，但控制过程中控制动作的应用或接收不当</p><p>o控制器不发送控制动作，但执行器或其他元件响应就像发送一样</p><p>2）与受控过程相关的场景</p><p>即使控制动作被转移或应用于受控过程，它们也可能无效或者可能被其他控制器覆盖。</p><p>通常，与受控流程相关的方案可能包括：</p><p>- 未执行控制操作</p><p>o受控过程应用或接收控制动作，但受控过程不响应</p><p>- 控制动作未正确执行</p><p>o受控过程应用或接收控制动作，但受控过程响应不正确</p><p>o受控过程不应用或接收控制动作，但过程响应就像控制动作已被应用或接收一样</p><p>这些情况可能是由缺少或不充分的过程输入（例如液压不足等），外部或环境干扰，组件故障，过程响应延迟，过程中的错误或错误行为，可能发生的冲突命令引起的。 其他控制器，接收或应用于受控过程的先前控制操作，过程使用的错误优先级方案，错误配置，过程或环境随时间的降级或变化，过程环境中未预料到或未处理的条件，或其他 问题。</p><p>最常见的错误是识别个体因果因素而不是情景。 例如，您可能想要创建诸如“车轮速度传感器故障”，“车轮速度反馈延迟”，“功率损失”等因素列表。在场景的上下文之外列出个别因素的问题是 很容易忽略几个因素如何相互作用，你可以忽略间接导致UCA和危害的非平凡和非显而易见的因素，你可能不会考虑因素的组合如何导致危害。 考虑单个因素基本上减少到只考虑单个组件故障的FMEA。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-17215e6709ac46331a5fb0a0adbd3fac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb\" width=\"424\" data-original=\"https://pic1.zhimg.com/v2-17215e6709ac46331a5fb0a0adbd3fac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;424&#39; height=&#39;144&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"424\" data-original=\"https://pic1.zhimg.com/v2-17215e6709ac46331a5fb0a0adbd3fac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-17215e6709ac46331a5fb0a0adbd3fac_b.jpg\"/></figure>", 
            "topic": [
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }, 
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "系统工程", 
                    "tagLink": "https://api.zhihu.com/topics/19816304"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/62779372", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 1, 
            "title": "Pilot Roadmap - System STPA Analysis(3)", 
            "content": "<p>本篇介绍STPA实例中的第二步，Modeling the control structure，搬运自STPA Handbook</p><p>分层控制结构建模</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d1c088019ba43a4c25197b179598a455_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"503\" class=\"origin_image zh-lightbox-thumb\" width=\"606\" data-original=\"https://pic2.zhimg.com/v2-d1c088019ba43a4c25197b179598a455_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;606&#39; height=&#39;503&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"503\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"606\" data-original=\"https://pic2.zhimg.com/v2-d1c088019ba43a4c25197b179598a455_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d1c088019ba43a4c25197b179598a455_b.jpg\"/></figure><p>什么是控制结构？</p><p>定义：分层控制结构是由反馈控制循环组成的系统模型。 有效的控制结构将强制限制整个系统的行为。</p><p>分层控制结构由所示的控制回路组成。通常，控制器可以提供控制动作以控制某些过程并对受控过程的行为实施约束。 控制算法代表控制器的决策过程 - 它确定要提供的控制动作。 控制器还具有表示控制器用于做出决策的内部信念的过程模型。关于被控制的过程或系统或环境的其他相关方面，过程模型可以部分地通过用于观察受控过程的反馈来更新。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae565b69c88b5d595951fc490453aba5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"224\" data-rawheight=\"278\" class=\"content_image\" width=\"224\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;224&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"224\" data-rawheight=\"278\" class=\"content_image lazy\" width=\"224\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae565b69c88b5d595951fc490453aba5_b.jpg\"/></figure><p>例如，过程模型可能与现实不一致（例如，控制器认为当飞机真正上升时认为飞机正在下降，或者当飞机真正处于倒车状态时相信汽车在停车时，机场跑道是空的，等等）导致控制不安全的行为。传感器故障可能导致错误的反馈并导致不安全的行为。设计可能缺少必要的反馈，或者可能提供延迟反馈，从而导致过程模型缺陷和不安全行为。STPA提供了一种系统地识别可能导致丢失的这些和其他场景的方法。</p><p>通用控制循环可用于解释和预测可能导致损失的复杂软件和人工交互 - 这是现代工程中的两大挑战。对于人类而言，过程模型通常称为心理模型，控制算法可称为操作过程或决策规则，但基本概念是相同的。</p><p>当然，大多数系统通常具有多个重叠和交互的控制回路。多个交互控制循环可以在分层控制结构中建模。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-afdc36eabfc3c66e005a0b74b8743f32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb\" width=\"452\" data-original=\"https://pic3.zhimg.com/v2-afdc36eabfc3c66e005a0b74b8743f32_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;452&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"452\" data-original=\"https://pic3.zhimg.com/v2-afdc36eabfc3c66e005a0b74b8743f32_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-afdc36eabfc3c66e005a0b74b8743f32_b.jpg\"/></figure><p>通常，分层控制结构包含至少五种类型的元素：</p><p> - 控制器</p><p> - 控制措施</p><p> - 反馈</p><p> - 组件的其他输入和输出（既不是控制也不是反馈）</p><p> - 受控流程</p><p>分层控制结构中的垂直轴是有意义的：它表示系统内的控制和权限。垂直放置表示从顶部的高级控制器到底部的最低级别实体的控制层次结构。每个实体对其下方的实体拥有控制权和权力，每个实体同样受上述实体的控制和授权。例如飞机自动化可以通过向物理飞机系统发送控制动作并监视反馈来充当控制器。同时，飞机自动化也是受控过程，其接收并执行来自机组人员的控制动作并将反馈发送给机组人员。</p><p>换句话说，所有向下箭头表示控制动作（命令），而向上箭头表示反馈。这些约定有助于管理复杂性并使控制关系和反馈循环更容易识别，在某些情况下，简单地绘制控制结构图可以使以前未发现的缺陷显而易见。例如，控制动作可以由没有必要反馈来选择安全控制动作的实体提供，反馈可以提供给没有能力对其做任何事情的实体，多个控制器可能能够向其提供冲突命令。相同的组件无法检测或解决冲突等。</p><p>控制结构建模从抽象控制结构开始，并迭代地添加细节。 在许多情况下，系统内的控制结构和控制回路可能是显而易见的，或者可以从先前的应用中重复使用。 </p><p>一种方法是确定实施约束所需的基本子系统，并防止先前发现的危害。 例如，我们得出了与减速不足有关的危险和约束。 这些约束可以通过使用车轮制动子系统，反向推力和其他子系统来实施。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7263ece4b8a04a88474f4e6c5651ebcc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic1.zhimg.com/v2-7263ece4b8a04a88474f4e6c5651ebcc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;462&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic1.zhimg.com/v2-7263ece4b8a04a88474f4e6c5651ebcc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7263ece4b8a04a88474f4e6c5651ebcc_b.jpg\"/></figure><p>一旦确定了子系统，我们就可以通过定义它们的控制方式来优化控制结构。 出于本示例的目的，让我们改进车轮制动子系统。 车轮制动子系统是否仅由机组人员直接和手动控制？ 是否存在可控制制动器的控制单元，自动控制器或其他人？ 如果在后期开发阶段应用STPA，这些答案可能是已知且明显的。 如果在早期概念开发过程中应用STPA，则可以使用上述危害和约束来指导这些决策。 例如，我们可以在车轮制动子系统中包括一个自动制动控制器，以便在着陆或拒绝起飞时自动制动。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-259eb2e77c4c1d2a409405a8f3ff9d57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-259eb2e77c4c1d2a409405a8f3ff9d57_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;461&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-259eb2e77c4c1d2a409405a8f3ff9d57_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-259eb2e77c4c1d2a409405a8f3ff9d57_b.jpg\"/></figure><p>一旦识别出控制器，系统工程师就可以分配责任。这些责任是对安全限制的改进 - 每个实体需要做什么才能共同实施安全约束？例如，BSCU可能负责在制动引起滑行（防滑功能）时自动脉冲制动，而机组人员可能负责决定何时需要制动。</p><p>与车轮制动相关的示例责任：</p><p>物理车轮制动器</p><p>o R-1：BSCU或飞行机组指挥时减速车轮[SC-6.1]</p><p>BSCU</p><p>o R-2：机组人员要求时执行制动[SC-6.1]</p><p>o R-3：打滑时的脉冲制动器（防滑）[SC-6.2]</p><p>o R-4：着陆或拒绝起飞时自动接合制动器（Autobrake）[SC-6.1]</p><p>机组人员</p><p>o R-5：决定何时需要制动[SC-6.1，SC-6.3]</p><p>o R-6：确定如何进行制动：自动制动，正常制动或手动制动[SC-6.1]</p><p>o R-7：配置BSCU和Autobrake以准备制动[SC-6.1]</p><p>o R-8：监控制动并禁用BSCU，发生故障时手动制动[SC-6.1，SC-6.2]</p><p>接下来，可以基于这些职责来定义每个控制器的控制动作。例如，飞行机组人员需要能够发送手动制动控制动作以满足R-5和R-6。他们需要一种方法来武装和设置BSCU以满足R-6和R-7。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fcc842be8eb27539e27a5c1a620e3fb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb\" width=\"581\" data-original=\"https://pic1.zhimg.com/v2-fcc842be8eb27539e27a5c1a620e3fb0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;581&#39; height=&#39;447&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"581\" data-original=\"https://pic1.zhimg.com/v2-fcc842be8eb27539e27a5c1a620e3fb0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fcc842be8eb27539e27a5c1a620e3fb0_b.jpg\"/></figure><p>此时，已经识别并标记了控制器和控制动作，但反馈如何呢？通过首先确定控制器需要做出决策的过程模型，可以从控制动作和责任中获得反馈。然后，可以识别形成精确过程模型所需的反馈和其他信息。例如，R-3规定BSCU在打滑时需要脉冲制动。为此，BSCU将需要知道正在发生滑动（应包括在BSCU的过程模型中的信息）。检测防滑需要什么反馈？可以使用车轮速度反馈。同样，R-8规定机组人员可能需要在发生故障时禁用BSCU。为此，机组人员需要知道BSCU发生故障（同样，应该在过程模型中的信息）。飞行机组可以使用哪些反馈来检测故障？可以提供有关BSCU故障的反馈。为了在着陆或RTO（R-4）时自动接合制动器，BSCU将需要知道飞机何时着陆或何时发生RTO（应该在过程模型中）。车轮开关和其他输入的重量可用于检测着陆和RTO条件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-05bb41723d0b79ccc2a38840303997e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic2.zhimg.com/v2-05bb41723d0b79ccc2a38840303997e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;193&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic2.zhimg.com/v2-05bb41723d0b79ccc2a38840303997e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-05bb41723d0b79ccc2a38840303997e1_b.jpg\"/></figure><p>通过使用“再放大”的职责并添加其他细节，可以进一步细化控制结构。 例如，物理车轮制动器负责根据命令（R-1）减速车轮。 这可以通过液压来完成。 R-6表示BSCU需要执行正常和自动制动（Autobrake）。 BSCU中的两个控制器可用于控制这两种行为：自动制动控制器和液压控制器。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-db73fecd8b272680a3b3665afefa4719_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb\" width=\"697\" data-original=\"https://pic2.zhimg.com/v2-db73fecd8b272680a3b3665afefa4719_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;697&#39; height=&#39;504&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"697\" data-original=\"https://pic2.zhimg.com/v2-db73fecd8b272680a3b3665afefa4719_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-db73fecd8b272680a3b3665afefa4719_b.jpg\"/></figure><p>上图即为完整的控制模型。</p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "系统架构", 
                    "tagLink": "https://api.zhihu.com/topics/19578413"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/62776895", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 1, 
            "title": "Pilot Roadmap - System STPA Analysis(2)", 
            "content": "<p>本篇介绍STPA实例中的第一步，Define Purpose of the Analysis，搬运自STPA Handbook</p><p>基于STPA方法概述：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9a9faf56f6ddeb3185f99caf5d5ac679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic2.zhimg.com/v2-9a9faf56f6ddeb3185f99caf5d5ac679_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;727&#39; height=&#39;336&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"727\" data-original=\"https://pic2.zhimg.com/v2-9a9faf56f6ddeb3185f99caf5d5ac679_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9a9faf56f6ddeb3185f99caf5d5ac679_b.jpg\"/></figure><p><b>定义分析的目的</b>是使用任何分析方法的第一步。分析旨在防止哪些损失？ STPA是否仅适用于传统安全目标，如防止人命损失，还是更广泛地应用于安全，隐私，性能和其他系统属性？什么是要分析的系统以及系统边界是什么？在此步骤中解决了这些和其他基本问题。</p><p>第二步是构建一个称为<b>控制结构的系统模型</b>。控制结构通过将系统建模为一组反馈控制回路来捕获功能关系和交互。控制结构通常从非常抽象的层面开始，并且经过迭代细化以捕获有关系统的更多细节。无论STPA是否适用于安全，安全，隐私或其他属性，此步骤都不会更改。</p><p>第三步是<b>分析控制结构中的控制动作</b>，以检查它们如何导致第一步中定义的损失。这些不安全的控制操作用于为系统创建功能要求和约束。无论STPA是否适用于安全，安全，隐私或其他属性，此步骤也不会更改。</p><p>第四步<b>确定了系统中可能发生不安全控制的原​​因</b>：<br/>1.不正确的反馈，不充分的要求，设计错误，组件故障和其他因素如何导致不安全的控制措施并最终导致损失。<br/>2.如何提供安全控制措施但未遵循或正确执行，导致损失。</p><p>确定方案后，可以使用它们来创建其他要求，识别缓解措施，推动架构，制定设计建议和新设计决策（如果在开发期间使用STPA），评估/重新审视现有设计决策并确定差距（如果STPA是 在设计完成后使用），定义测试用例并创建测试计划，制定风险指标。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-15e38e95c8f94d5521b4fb8086320fde_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-15e38e95c8f94d5521b4fb8086320fde_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;708&#39; height=&#39;487&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-15e38e95c8f94d5521b4fb8086320fde_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-15e38e95c8f94d5521b4fb8086320fde_b.jpg\"/></figure><p>应用STPA的第一步是确定分析的目的。 定义分析的目的有四个部分：</p><ol><li>确定损失</li></ol><p>2. 识别系统级危险</p><p>3. 确定系统级安全约束</p><p>4. 精炼危害（可选）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f8624a10fd3f06ffc61b5dab42fe0b03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"301\" class=\"origin_image zh-lightbox-thumb\" width=\"569\" data-original=\"https://pic4.zhimg.com/v2-f8624a10fd3f06ffc61b5dab42fe0b03_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;569&#39; height=&#39;301&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"301\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"569\" data-original=\"https://pic4.zhimg.com/v2-f8624a10fd3f06ffc61b5dab42fe0b03_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f8624a10fd3f06ffc61b5dab42fe0b03_b.jpg\"/></figure><p><b>确定损失</b></p><p>定义：损失涉及利益相关者的某些价值。损失可能包括人命损失或人身伤害，财产损失，环境污染，任务丧失，声誉损失，敏感信息丢失或泄漏，或利益相关者无法接受的任何其他损失。</p><p>不同的词语用于识别不同行业的危害分析目标，例如，防止事故，事故或不良事件。为了消除各行业从业人员使用的多个术语的混淆，“损失”将是本章中使用的术语，STPA的目标是防止损失。</p><p>STPA可用于针对利益相关者无法接受的任何损失。如果包含多个损失，则可以对它们进行排序和优先排序。由于每个STPA结果都可追溯到一个或多个损失，因此可以根据它们所涉及的损失轻松地对分析结果进行排序和优先排序。</p><p>在任何分析开始之前，利益相关者必须确定他们希望分析所关注的损失。要考虑的损失可以由管理层，政府法规或客户来定义。确定损失的一般方法可能涉及：</p><ol><li>确定利益相关者，例如用户，生产者，客户，运营商等</li></ol><p>2. 利益相关者确定他们在系统中的“利害关系”。他们有什么价值？例如，人的生命，可用飞机的机队，发电，运输等。他们的目标是什么？例如，维持一队可用的飞机，提供运输，提供医疗，提供发电等。</p><p>3. 将每个价值或目标转化为损失，例如丧生，飞机损失，发电损失，运输损失等</p><p>以下列表提供了分析用户经常要避免的一些损失示例：</p><p>L-1: Loss of life or injury to people </p><p>L-2: Loss of or damage to vehicle </p><p>L-3: Loss of or damage to objects outside the vehicle </p><p>L-4: Loss of mission (e.g. transportation mission, surveillance mission, scientific mission,defense mission, etc.) </p><p>L-5: Loss of customer satisfaction</p><p>L-6: Loss of sensitive information </p><p>L-7: Environmental loss </p><p>L-8: Loss of power generation</p><p>在识别损失时防止常见错误的一些提示：</p><p>1.损失可包括任何利益相关者无法接受的损失</p><p>2.损失不应参考单个组件或特定原因，如“人为错误”和“刹车失灵”</p><p>3.损失可能涉及不受系统设计者直接控制的环境方面</p><p>4.记录所做的任何特殊考虑或假设，例如明确排除的损失</p><p>在确定分析中的关注损失后，下一步是确定与这些损失相关的危害。</p><p><b>识别系统级危险</b></p><p>定义：危险是一种系统状态或一组条件，它们与一组特定的最坏情况环境条件一起将导致损失。</p><p>定义：系统是一组组件，它们作为一个整体共同作用，以实现一些共同的目标，目标或结束。系统可以包含子系统，也可以是更大系统的一部分。</p><p>要识别系统级危险，首先需要确定要分析的系统和系统边界。系统是分析师设想的抽象。必须决定系统中包含的内容以及系统边界。在工程方面，为分析目的定义系统边界的最有用方法是包括系统设计人员可以控制的系统部分。这是区分危险和损失的主要原因 - 损失可能涉及系统设计者或操作者仅对其进行部分控制或根本无法控制的环境方面。安全工程的目标是消除或减轻被分析系统中危害的影响，因此需要一定程度的控制。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1f7f4c274d8fd175c06c66ce89d82dd2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb\" width=\"421\" data-original=\"https://pic3.zhimg.com/v2-1f7f4c274d8fd175c06c66ce89d82dd2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;421&#39; height=&#39;279&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"421\" data-original=\"https://pic3.zhimg.com/v2-1f7f4c274d8fd175c06c66ce89d82dd2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1f7f4c274d8fd175c06c66ce89d82dd2_b.jpg\"/></figure><p>例如，考虑一个核电站。放射性物质的释放，附近人口或城市的接近以及风的方向都可能是导致潜在生命损失的重要因素。然而，作为工程师，我们无法控制风，我们可能无法控制城市位置，但我们可以控制工厂内外放射性物质的释放（系统级危险）。</p><p>一旦确定了系统和系统边界，下一步就是通过识别将导致最坏情况环境条件损失的系统状态或条件来定义系统级危险。以下列表提供了系统级危险的一些示例：</p><p>H-1：飞机违反飞行中的最低分离标准[L-1，L-2，L-4，L-5]</p><p>H-2：失去航空器机身完整性[L-1，L-2，L-4，L-5]</p><p>H-3：飞机在地面上划出指定的滑行道，跑道或停机坪[L-1，L-2，L-5]</p><p>H-4：飞机太靠近地面上的其他物体[L-1，L-2，L-5]</p><p>H-5：卫星无法收集科学数据[L-4]</p><p>H-6：车辆与地形和其他障碍物保持安全距离[L-1，L-2，L-3，L-4]</p><p>H-7：无人机未完成监视任务[L-4]</p><p>H-8：核电站释放危险物质[L-1，L-4，L-7，L-8]</p><p>一般而言，危险可能导致一次或多次损失，并且每种危险都应追溯到由此产生的损失。在危险描述之后，这种可追溯性通常记录在括号中。上面的示例显示了上一页中损失示例的可追溯性。</p><p>定义系统级危险有三个基本标准：</p><p> - 危害是系统状态或条件（不是组件级别原因或环境状态）</p><p> - 在某些最恶劣的环境中，危害会导致损失</p><p> - 危害必须描述要防止的状态或条件</p><p>首先，系统级危险是系统状态或条件，而不是设计者无法控制的外部环境状态。此外，系统级危险不应描述详细的组件级原因，如物理组件故障（例如液压泄漏，制动液不足等）。在此步骤中引用组件级别原因将过度限制分析，从而在后续步骤中很容易忽略其他不太明显的原因。相反，确定要防止的系统级状态或条件（危害），并允许后来的STPA步骤系统地识别危险的组件级别原因。</p><p>其次，必须存在危害将导致损失的最坏情况环境。该要求不一定能保证危险总是导致损失。例如，化学工厂可能会释放有毒物质，但风和天气条件会阻止有毒物质撞击附近的人员和人口稠密地区。但是，在最坏的情况下，有毒物质可能被运送到人口稠密地区并导致损失。</p><p>最后，危害是要防止的状态或条件。“飞行中的飞机”是一种系统状态，可能会导致在最坏情况下导致损失，但它不是被消除或阻止的条件（否则我们不会建造飞机）。危险应该是要防止的状态，并指出我们从不希望系统进入 - 而不是系统通常必须实现其目标的状态。</p><p><b>定义系统级约束</b></p><p>定义：系统级约束指定需要满足的系统条件或行为以防止危险（并最终防止损失）</p><p>一旦识别出系统级危险，就可以直接识别必须强制执行的系统级约束：简单地反转条件。</p><p>&lt;危险&gt; = &lt;系统&gt;＆&lt;不安全条件&gt;＆&lt;损失链接&gt; &lt;安全约束&gt; = &lt;系统&gt;＆&lt;强制执行条件&gt;＆&lt;危害链接&gt;</p><p>H-1：飞机违反最低分离标准[L-1，L-2，L-4，L-5]</p><p>SC-1：飞机必须满足其他飞机和物体的最低分离标准[H-1]</p><p>H-2：失去航空器机身完整性[L-1，L-2，L-4，L-5] SC-2：在最坏情况下必须保持航空器机身完整性[H-2]</p><p>每个约束可以追溯到一个或多个危险，并且每个危险可追溯到一个或多个损失。一般来说，可追溯性不一定是一对一的;单一约束可用于防止一种以上的危害，多种约束可能与单一危害有关，每种危害都可能导致一种或多种损失。</p><p>约束还可以定义在发生危险时系统必须如何最小化损失。例如，如果飞机确实违反最小间隔，则必须检测违规并且必须采取措施以防止飞机发生碰撞。如果化学工厂确实释放有毒化学物质，则必须检测有毒环境并采取适当措施。这些约束通常可以写成：</p><p>&lt;安全约束&gt; =如果发生&lt;危险&gt;，则&lt;需要采取哪些措施来防止或减少损失&gt;</p><p>SC-3：如果飞机违反最小间隔，则必须检测违规并采取措施防止碰撞</p><p>安全约束不应指定特定的解决方案或实现。例如，SC-3不是指定安装防撞系统等解决方案，而是简单地说明了</p><p>识别危险时防止常见错误的提示</p><p> - 危害不应涉及系统的各个组件</p><p> - 所有危险应参考整个系统和系统状态</p><p> - 危害应指系统设计人员和操作人员可以控制或管理的因素</p><p> - 所有危险应描述要防止的系统级条件</p><p> - 危害的数量应该相对较小，通常不超过7到10</p><p> - 危害不应包括模糊或递归的词语，如“不安全”，“无意”，“意外”等。</p><p>必须检测违规并且必须有某种方法来防止碰撞。在这个早期阶段指定一个特定的解决方案通常是不成熟的，并且可能导致忽视替代的和可能更好的解决方案。STPA分析的其余部分将系统地识别可能违反这些约束的情景，从而导致系统级危险和损失。</p><p>改善系统级危险（可选）</p><p>一旦确定并审查了系统级危害清单，如果适当，可将这些危害细化为次级危害。许多STPA应用不需要次级危害，但它们可用于大型分析工作和复杂应用，因为它们可以指导未来的步骤，如控制结构的建模。改进系统级危害的第一步是确定需要控制的基本系统过程或活动，以防止系统危害。例如，考虑商业航空确定的系统级危险：</p><p>H-4：飞机太靠近地面上的其他物体[L-1，L-2，L-5]</p><p>导致子危害的一种方法是问：我们需要控制什么才能防止这种危害？为了控制飞机在地面上，我们需要一些方法来控制飞机的减速度，加速度和转向。如果不能充分控制这些（例如减速度不足），则可能导致系统级危险。</p><p>可以为H-4导出以下亚危害：</p><p>H-4：飞机太靠近地面上的其他物体[L-1，L-2，L-5]</p><p>    减速度</p><p>    H-4.1：降落时起飞不足或起飞时减速不足</p><p>    H-4.2：不对称减速机将飞机转向其他物体</p><p>    H-4.3：起飞时V1点后发生减速加速</p><p>    H-4.4：滑行时提供过大的加速度</p><p>    H -4.5：非对称加速度将飞机转向其他物体</p><p>    H-4.6：起飞时加速度不足</p><p>    H-4.7：着陆期间或停放时提供加速度</p><p>    H-4.8：在拒绝起飞期间继续加速转向</p><p>    H-4.9：转向不足转向滑行道，跑道或停机坪路径</p><p>    H-4.10：转向机动飞机离开滑行道，跑道或停机坪路径</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7136c3b226cff2537d7ab36dd3a1f16a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic3.zhimg.com/v2-7136c3b226cff2537d7ab36dd3a1f16a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic3.zhimg.com/v2-7136c3b226cff2537d7ab36dd3a1f16a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7136c3b226cff2537d7ab36dd3a1f16a_b.png\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "系统架构", 
                    "tagLink": "https://api.zhihu.com/topics/19578413"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/52156492", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 15, 
            "title": "Pilot Roadmap - ASIL Allocation", 
            "content": "<blockquote>本文1337字<br/>阅读需要十分钟</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p>“为什么现在有挺多厂都宣称自己的产品是ASIL D呢，L3的功能安全有这么简单？”</p><p>专家若有所思，</p><p>“只要有一个功能可以达到ASIL D我们也可以说是ASIL D的产品。”</p><p><b>这个回答在我心里埋下了一颗种子，让我学会了辩证的看待问题的描述方法和本质。</b></p><p>ISO26262标准根据安全风险程度对系统某组成部分确定划分由A到D的安全需求等级（Automotive Safety Integrity Level汽车安全完整性等级ASIL），其中D为最高等级，需要最苛刻的安全需求。伴随着ASIL等级的增加，针对系统硬件和软件开发流程的需求也随之增强。对系统供应商而言除了需要满足现有的高质量需求外还必须满足这些因为安全等级增加而提出的更高的需求。</p><p>出差的路上心情十分轻松，加上这是一次专家一对一教学的好机会（开心），遂问道为什么很多预警类的功能被定义为ASIL D呢？比如Blind Space Detection这个功能从Severity, Exposure, Controllability三个角度分析完全不可能达到ASIL D的重要程度，D从何而来？其原因在于BSD这类警示功能组成的复杂功能需要达到ASIL D因而出现了如此称呼，而BSD本身往往只需要被做成QM或者ASIL B。</p><p><b>这里涉及到了功能安全等级的裁剪概念。</b></p><p>ISO26262-9面向汽车安全完整性等级（ASIL）和安全的分析5.4.10中提到，一个ASIL D要求应当被分解为以下的一种：</p><p>一个ASIL C(D)要求和一个ASIL A(D)要求；或者<br/>一个ASIL B(D)要求和一个ASIL B(D)要求；或者<br/>一个ASIL D(D)要求和一个QM(D)要求；</p><p>ASIL分解是一种ASIL裁剪方法，这种方法可以应用在一个条款或要素的功能，技术，硬件，软件安全要素。</p><p><b>古有“三个臭皮匠顶个诸葛亮”，现有“俩B顶个D”。举个例子来说一个软件功能由两个模块组成，这个软件功能是D等级的，那是不是两个软件模块达到B等级就可以了呢？</b></p><p>答案是否定的，首先被裁剪的ASIL要求需要架构要素的独立，若非架构要素的独立，那么冗余的要求和架构要素要继承初始化的ASIL。<br/>问题就在于独立的定义，什么样的架构元素之间可以算作独立呢？<br/>独立性要求冗余要素之间不发生从属失效Dependent Failure，从属失效分为共因失效Common Cause Failure和级联失效Cascading Failure，共因失效覆盖相同软件模块冗余的情况，若同一个Bug会导致两个软件模块同时失效。级联失效指一个元素的失效影响了另外的元素，比如内存的保护没有做好，问题发生时其他的进程无法访问内存。</p><p><b>那么当架构要素足够独立时，两个ASIL B的模块能否代替一个ASIL D的模块呢？</b></p><p>答案依然是否定的，这里的ASIL B应该为ASIL B(D)+ASIL B(D)+ASIL D(D)。括号的意思是继承ASIL D目标的组件，这里对应ISO 26262-9 5.4.2中ASIL分解在执行过程中应当单独考虑每一个初始安全要求和5.4.4中每一个分解的安全要求应当遵守它自己的初始安全要求。当然这里可以继续分解ASIL B的部分即ASIL A(D)+ASIL B(D)+ASIL B(D)+ASIL D(D)。但总体来说，安全等级裁剪的意义在于尽量减少高安全等级的组件以降本增效，无意义地增加组件无异于违背了设计的初心。</p><p><b>对于自动驾驶系统来说，安全等级的裁剪是必要的。</b></p><p>以自适应巡航为例，当车速大于30KM/H时功能激活，转弯半径不超90m，当小于30KM/H的车速激活或者超过90m的转弯半径时会对驾驶员造成危险，假定这两条信息的安全等级都为ASIL D，那么当我们很清晰地知道这两个阈值的时候，我们可以加入第三条信息用以监控前两条信息的状态，并保证第三条信息的独立性，使用独立的硬件资源、电源和时钟。那么前两条信息与第三条信息之间的关系就可以变成QM（D）+QM(D)+ASIL D(D)。经过分解后即达成了降本增效的效果，避免ISO26262-5中的冗长需求，对于自动驾驶汽车接近一亿行的代码量来说是非常重要的。</p><p><b>综上，</b></p><p>if(三个臭皮匠==一个诸葛亮){</p><p>printf(&#34;Error Choice&#34;);</p><p>}</p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "👍，ASIL分解的前提本来就是要先做DFA的～", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "阿猫在途", 
                    "userLink": "https://www.zhihu.com/people/8da7594c818360e47d19d3a7f7ee4592", 
                    "content": "“以自适应巡航为例，当车速大于30KM/H时功能激活，转弯半径不超90m，当小于30KM/H的车速激活或者超过90m的转弯半径时会对驾驶员造成危险”这个举例不是很好理解，后半句描述的场景为何对驾驶员有危险呢？另外，26262-9 中说ASIL D不是也可以分解为ASIL B(D)+ASIL B(D)？“那么当架构要素足够独立时，两个ASIL B的模块能否代替一个ASIL D的模块呢？<br>答案依然是否定的”这里的ASIL B应该为ASIL B(D)+ASIL B(D)+ASIL D(D)，这里的ASIL D(D)指的是？", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "问题一：这是一个假设，没有实际的意义<br>问题二：不能，要考虑B实际的失效概率大于D<br>问题三：这里的D(D)是由D拆解下来的安全需求，抽象地说，原来的D是100，那么这个D(D)可能是30，这样就明显降低了成本", 
                            "likes": 0, 
                            "replyToAuthor": "阿猫在途"
                        }, 
                        {
                            "userName": "Trac Yu", 
                            "userLink": "https://www.zhihu.com/people/6dd0863cfda44cdd67e340436ef3a1d3", 
                            "content": "我认为功能分解是系统级分解，ASILD分解ASILB(D)+ASILB(D)两个独立的ASILB(D)系统是没有问题的，系统包含软件和硬件。已经满足ASILD独立CPU和独立memory要求。无非以损失失效性来降成本。但是GOAL是一样的。", 
                            "likes": 1, 
                            "replyToAuthor": "阿猫在途"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/51387085", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 8, 
            "title": "Pilot Roadmap - Simulation Status and Development", 
            "content": "<p>本文以自动驾驶系统供应商的角度来谈自动驾驶仿真，本文许多观点来自同事和项目管理培训的老师，感谢这些好的指导和建议。</p><p class=\"ztext-empty-paragraph\"><br/></p><blockquote>本文3631字<br/>阅读需要10分钟</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Category</b></p><ul><li><b>Why Simulation Been Called Accelerator In A VUCA Situation</b></li><li><b>PESTEL Analysis For Simulation Market</b></li><li><b>Main Simulator Provider In The Market And Comparison</b></li><li><b>What Does Simulator Do In Tier 1&amp;2 ADAS Simulation</b></li><li><b>ADAS Simulation Variance In Dev Phase And Val Phase</b></li><li><b>How To Build Scenario In Your Simulator</b></li><li><b>How To Execute The Simulation Efficiently</b></li><li><b>What Is The Philosophy Of Designing Database </b></li><li><b>Improvement That Will Be Made By Simulation Approach</b></li><li><b>Challenges And Opportunities</b></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Contents</b></p><ul><li><b>Why Simulation Been Called Accelerator In A VUCA Situation</b></li></ul><p>自动驾驶产品由于其易变性，不确定性，复杂性和模糊性的市场环境在其产品的落地过程中步履蹒跚。从三月份Uber在美国亚利桑那州的测试事故开始，许多人心里开始为自动驾驶技术的落地打上了问号，甚至开始质疑其存在的意义。就像1943年，IBM公司董事长沃森的名言：”全世界对计算机的需求量总共可能只有5台。“ - 虽然仅仅几十年后，PC就出现在了千家万户。</p><p>历史的车轮总是朝向前方，在列强纷纷进入存量经济之时，资本往往会选择新的增长机会，企盼风雪中叩开春天的大门。自动驾驶要做，利用仿真做。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>PESTEL Analysis For Simulation Market</b></li></ul><blockquote>仿真作为一种再现现实的方法，广泛地受到学术界和工业界的认可，而自动驾驶仿真更是作为一剂良药完美治愈了当下自动驾驶行业的痛点。</blockquote><p>地缘政治的存在让许多国家无法在本土进行大规模的路测开发，Mobileye是一家来自以色列的明星企业，其产品占全球自动驾驶细分领域市场的“百分之七十”，是名副其实的独角兽。但由于政治因素，大部分的产品投放只能流向海外，国内自动驾驶行业发展被迫受阻。与此同时，经济因素同样严重影响着自动驾驶的落地速度，硅谷高管中有52.7%来自海外，其中25.8%来自印度，可谓人才济济。但印度本土路测却因基础建设难以满足自动驾驶初步的落地计划而举步维艰。</p><p><b><i>在政治经济无法满足需求的情况下如何去增加产品更新迭代的速度？</i></b></p><p>在计算能力高速发展的今天，图像处理能力在PC上大幅度增强，随着GTA5等游戏大作的出现和人工智能的火热，高性能计算成为了一片蓝海，半导体英伟达等大厂的1080TI和P4000等显卡由于其强大的性能和低廉的价格成就了自动驾驶仿真的发展。从业者不需要考虑环境和相关法规等社会因素，在电脑上就可以完成产品大部分的开发，这极大地加大了产品的安全性和开发地敏捷性，减小了落地成本。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>Main Simulator Provider In The Market And Comparison</b></li></ul><p>市场上主流的仿真平台一般来自于欧洲或者亚太，并分为开源和商业两种运营模式，从研究的角度上说开源软件基于研究人员极大的灵活性和包容性，其社区化的特征也让更多开发者可以参与到平台的建设中。</p><p><i>开源：</i></p><p>知名的开源平台有Gazebo, Eurotruck, Carla等，其分别利用不同物理引擎打造而成。出于笔者个人兴趣这里着重介绍Carla: Carla是一款基于Unreal Engine 4由Intel视觉团队和丰田团队等打造的仿真平台，它完全开源，提供了Python API，内置多个RGB信道可调节地图并且支持摄像头和激光雷达的配置，同时提供了车辆控制的接口，可用于算法的训练和测试，是目前使用最受欢迎的自动驾驶开源仿真平台之一。</p><p>Camera：</p><div class=\"highlight\"><pre><code class=\"language-text\">camera = carla.sensor.Camera(&#39;MyCamera&#39;, PostProcessing=&#39;SemanticSegmentation&#39;) camera.set(FOV=90.0) \ncamera.set_image_size(800, 600) \ncamera.set_position(x=0.30, y=0, z=1.30) \ncamera.set_rotation(pitch=0, yaw=0, roll=0) \ncarla_settings.add_sensor(camera)</code></pre></div><p>Lidar：</p><div class=\"highlight\"><pre><code class=\"language-text\">lidar = carla.sensor.Lidar(&#39;MyLidar&#39;) \nlidar.set( Channels=32, Range=50, PointsPerSecond=100000, RotationFrequency=10, UpperFovLimit=10, LowerFovLimit=-30) \nlidar.set_position(x=0, y=0, z=1.40) \nlidar.set_rotation(pitch=0, yaw=0, roll=0) carla_settings.add_sensor(lidar)</code></pre></div><p>完整的API List：</p><a href=\"https://link.zhihu.com/?target=https%3A//carla.readthedocs.io/en/latest/python_api/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python API - CARLA Simulator</a><p>更多的信息可以在Carla的主页查阅，在此感谢Intel、丰田等团队和开发者做出的巨大贡献，希望日后可以增加更多关于传感器仿真（如毫米波雷达，鱼眼镜头，超声波雷达）和车辆动力学仿真的内容：</p><a href=\"https://link.zhihu.com/?target=http%3A//carla.org/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-55af62b90d20649818453685d12a1242_180x120.jpg\" data-image-width=\"512\" data-image-height=\"384\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CARLA</a><p>同类型开源平台Airsim from Microsoft：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Microsoft/AirSim\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-75d552f374cb3a61d23c05921e49840b_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Microsoft/AirSim</a><p><i>商业：</i></p><p>商业仿真平台产品可以大致分为两类：以欧洲团队为主导开发和以亚太团队为主导开发。欧洲团队的产品一般符合汽车行业的定位，稳定可靠，与其他汽车电子开发平台粘合度高；而亚太团队的产品目前并不多见，敏捷、低成本，本土化是亚太产品的长处，虽然短期上欧洲产品占据了几乎所有汽车电子市场的份额，但随着亚太区域经济和政策的放开，本土化开发会成为自动驾驶仿真平台巨大的优势。</p><p>在招聘网站搜索自动驾驶仿真的关键词，可以清晰地看出目前各家公司所使用的车辆仿真平台基本为Carsim, Prescan, dSPACE, 算法仿真平台Matlab等等，这类仿真平台为大多数人所知。面世时间长，成熟稳定是这些软件的最大的优势。同时这些软件更容易通过ISO26262的工具链审核，对于定位ASIL D的产品更是不二之选。</p><p>由于其商业性的缘故此处不做细节分析，详细信息可以到产品官网或联系各地经销商获取。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b> What Does Simulator Do In Tier 1&amp;2 ADAS Simulation </b></li></ul><p>仿真平台在自动驾驶系统一级供应商和二级供应商的眼里往往有着不一样的意义，对待仿真的态度根据公司定位的差异截然不同。</p><p><i>Tier 2：</i></p><p>此处的Tier2指互联网科技公司和软件服务供应商。互联网科技公司往往会使用仿真平台做算法的端对端训练和验证，对应汽车电子AUTOSAR架构中的Application Layer开发，其RTE和BSW部分由芯片供应商提供。而一部分软件服务供应商如IPG则通过从0到1的开发销售其仿真平台实现盈利。</p><p><i>Tier 1：</i></p><p>自动驾驶系统供应商一般不会参与仿真平台从0到1的开发，多数情况会采用Tier 2现有的平台搭配科技公司的算法和自家算法和硬件使用，用以实现系统级别的仿真。</p><blockquote>“这里可以体现出各公司定位在各自细分领域的优势，Tier 2的软件能力Tier 1无法企及，但Tier 1却可以利用出色的开发管理流程和资源整合能力将产品交付整车厂”</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>ADAS Simulation Variance In Dev Phase And Val Phase</b></li></ul><p><b>自动驾驶仿真工作流程上主要分为开发验证两个阶段：</b></p><p>系统开发阶段的工程师的仿真任务重点在于确定项目上所需要的仿真工具链。工程师会大量查看系统需求，分析每个功能对应怎样的系统需求对应的仿真效果和硬件支持，并开始搭建Model in loop, Software in loop, Hardware in loop, Driver in loop的动力学模型，仿真环境，传感器模型，软件接口等。软件开发阶段仿真的任务增加，在Agile的框架下仿真工作要跟随软件的Release进行同步迭代，减少算法模型和生成的二进制代码Bug，开始自动化工具的研发。</p><blockquote>Tips：由于大多数工作站GPU的解决方案都来自Nvidia，CUDA和Driver是两个无法避开的问题，使用Nvidia driver渲染加速的过程中Linux x服务经常会挂掉导致操作系统无法登陆，这里我推荐更新最新Kernel和稳定版本的CUDA, Driver使用</blockquote><p>查看Kernel版本：</p><div class=\"highlight\"><pre><code class=\"language-text\">uname -a</code></pre></div><p>查看Driver版本：</p><div class=\"highlight\"><pre><code class=\"language-text\">nvidia-smi</code></pre></div><p>进入V-cycle右侧验证阶段后，大量的测试活动将会发生，在自动驾驶的产品开发过程中，对于Level 3以上的功能由于预期功能安全的存在，Software in loop, Hardware in loop, Driver in loop要用来做Requirement based test和Experience based test，这时自动化工具的存在将极大程度降本增效。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>How To Build Scenario In Your Simulator</b></li></ul><p>这里我建议从三个维度去考虑：</p><ol><li><i>Requirement based</i></li><li><i>Experience based</i></li><li><i>Safety based</i></li></ol><p>实现Safety based的方法源于各厂商对产品ASIL等级的定义，在预期功能安全中有相关的描述，而关于Scenario的配置，我在另一篇文章中有详细的解释：</p><a href=\"https://www.zhihu.com/question/291745181/answer/540217938\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-56d0d9b8b24bac0cf51edb0850dd47c4_ipico.jpg\" data-image-width=\"644\" data-image-height=\"643\" class=\"internal\">如何理解预期功能安全SOTIF?</a><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>How To Execute The Simulation Efficiently</b></li></ul><ol><li>手动配置车辆模型，算法模型，传感器模型，场景模型</li><li>人生苦短，我用____</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>What Is The Philosophy Of Designing Database</b></li></ul><p>车辆模型和算法模型在汽车电子领域有着成熟的开发管理方式，而传感器模型往往来自于仿真平台提供商。随着2020年以后自动驾驶产品的批量落地，场景数据库问题将成为新的议题。Waymo，Uber，Ford纷纷在自家的Safety Report里面重点提到了几百万公里的虚拟路测以增加产品置信度，但美国凤凰城的开车的市民却依然怨声载道:</p><p>“凤凰城的东锦绣大街，双向双车道，但是没有施划车道标记。每次白色的Waymo无人车出现时，总是顶着黑色的传感器，行驶在这条马路的正中间。这让路上行驶的其他车辆非常不舒服。- Waymo:我的内心毫无波动，甚至有点想笑。”</p><p>段子的背后除了有算法的进步空间外还有面对驾驶场景的陌生，若能增加此类场景的端对端训练，东锦绣大街的司机们也不会有这样的吐槽。对于场景数据库的设计我建议从两个方向入手：</p><p><i>1.Improve the database</i></p><ul><li><i> Time saving</i></li></ul><p>记录数据库中应用每个场景的次数，在数据累加的过程中不断删除无用的数据，它们可能代表极少数情况或太过平常的工况，以此途径减少场景的遍历时间</p><ul><li><i>Portable</i></li></ul><p>对数据库进行场景分类，对于高频词场景根据不同的功能进行移植，保证高频次场景的功能安全</p><p><i>2. Improve the scenario</i></p><ul><li><i>Define the scenario by product behavior measurement</i></li></ul><p>在产品开发的过程中，随着我们对产品理解的加深，我们可以从产品的性能表现预计不同场景对于车辆表现的影响，基于产品的系统需求和安全等级需求设计仿真环境以提高仿真置信度。</p><ul><li><i>Define the scenario by common sense</i></li></ul><p>从公开的数据集获取或故障库中获取不失为另一种提高场景有效性的方式，对于故障库运用关键元素穷尽的方式可以加速系统故障的发掘，加快产品迭代。</p><ul><li><i>Define the weight of the method by product experience</i></li></ul><p>预期功能安全中提到了已知和未知的概念，已知的场景可以通过众多渠道获取并建立，但对于未知的场景我的建议是增加故障数据元素在新场景库中的权重，以量化已知元素的方式控制未知场景带来的的风险。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>Improvement That Will Be Made By Simulation Approach</b></li></ul><blockquote>“在2017年的英伟达GPU开发者大会欧洲站的主题演讲环节中，英伟达CEO黄仁勋介绍称，使用NVIDIA DGX和Tensor RT 3进行仿真，工程师可以在5个小时内，完成约48万公里的道路测试。按照这个速度，仅仅两天之内，可完成全美所有道路的测试。”</blockquote><p>虽然并不是所有的道路场景都有意义，但其在广义上讲仿真的确解决了大规模路试的痛点。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>Challenges And Opportunities</b></li></ul><ol><li><i>高精度地图</i></li></ol><p>对于Level 3以上的功能来说高精度地图是必须品，但目前的仿真平台中可以集成高精度地图的产品寥寥无几。在技术需求复杂，面临地理信息采集限制的同时，也是国内仿真平台软件供应商取代欧美巨头的重大机会。</p><p>2. <i>多算法集成仿真</i></p><p>多数仿真平台自带的POV(Principle of vehicle)的表现太过单调守规矩，使用这种模型做训练和测试与培育温室花朵无异，如果能将开源算法和自家算法同时集成到同一个仿真平台内，势必会带来惊喜。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Conclusion</b></p><p>自动驾驶仿真已经成为了真实路测的重要伙伴，随着机器学习技术的在业内的不断推进，自动驾驶仿真将在研发方面发挥越来越重要的作用，推动自动驾驶技术早日实现商业化。</p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "无人驾驶车", 
                    "tagLink": "https://api.zhihu.com/topics/19653871"
                }
            ], 
            "comments": [
                {
                    "userName": "Trac Yu", 
                    "userLink": "https://www.zhihu.com/people/6dd0863cfda44cdd67e340436ef3a1d3", 
                    "content": "大神", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "<p>Vielen Danke</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Trac Yu"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "好文章", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "<p>谢谢！</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "该评论已删除", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "<p>谢谢补充，个人对51VR很感兴趣，在他们官网上看到过上海这边的仿真效果，相当不错，就是不知道能不能符合ISO26262标准的工具审核</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "车之佳人", 
                    "userLink": "https://www.zhihu.com/people/9f74ba02567df0481f42e73b41c213be", 
                    "content": "看好自动驾驶～", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "谢谢赞同～", 
                            "likes": 0, 
                            "replyToAuthor": "车之佳人"
                        }
                    ]
                }, 
                {
                    "userName": "莉莉", 
                    "userLink": "https://www.zhihu.com/people/a6bddafd1437672869d87afc53ff28fd", 
                    "content": "谢谢大神！本人研究生小白一枚，最近苦于寻找论文开题，来找找无人驾驶方面的文章。敢问大佬仿真实验如何做，一头雾水，🙄有没有资料可以提供，万分感谢～", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "可以用开源的Carla做实验，Carla的官网上详细地给出了各种Python车辆信息接口", 
                            "likes": 0, 
                            "replyToAuthor": "莉莉"
                        }
                    ]
                }, 
                {
                    "userName": "夏木的鱼尾纹", 
                    "userLink": "https://www.zhihu.com/people/76225d0f016fa14b91969e4cab0e0964", 
                    "content": "carmaker使用多吗？和其他软件比，前景怎么样？感觉这个软件貌似用的不是很多", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "Carmaker使用很多，IPG的软件前景都不错的，符合工具链质量标准", 
                            "likes": 0, 
                            "replyToAuthor": "夏木的鱼尾纹"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60197356", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 5, 
            "title": "Pilot Roadmap - System STPA Analysis(1)", 
            "content": "<blockquote>本文章结合MIT教授Nancy Leveson的系统工程理论和个人理解进行整理。</blockquote><p>目前在自动驾驶系统供应商（除Bosch和AVL外）的开发流程中很少由见到STPA应用的痕迹，但对于自动驾驶系统来说，STPA对于三级自动化以上系统级工程的帮助是巨大的，这种源自于航天工程的系统分析工具将在很大程度上帮助完成Cost down的工作。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e6ba682aea0b5f4666b6f27c250c7c9e_b.jpg\" data-size=\"small\" data-rawwidth=\"1236\" data-rawheight=\"870\" class=\"origin_image zh-lightbox-thumb\" width=\"1236\" data-original=\"https://pic3.zhimg.com/v2-e6ba682aea0b5f4666b6f27c250c7c9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1236&#39; height=&#39;870&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"1236\" data-rawheight=\"870\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1236\" data-original=\"https://pic3.zhimg.com/v2-e6ba682aea0b5f4666b6f27c250c7c9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e6ba682aea0b5f4666b6f27c250c7c9e_b.jpg\"/><figcaption>Cost during development</figcaption></figure><p>本文依据Nancy教授的系统安全分析逻辑分为以下五个部分：</p><ol><li><b>Why do we need something else?</b></li><li><b>What is STAMP and how does it differ from what people do now?</b></li><li><b>What kinds of tools are available?</b></li><li><b>How is it being used?</b></li><li><b>Does it work?</b></li></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><li><b>Why do we need something else?</b></li></ol><p>在系统安全的领域，产品开发现有的安全措施已经存在了近70年，相关思想和工具并没有太多的改变，但相关系统中的软件比例却开始大幅提升，如下图：</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-4643798193c259603c1e5d000d5bdb7a_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"870\" data-rawheight=\"564\" class=\"origin_image zh-lightbox-thumb\" width=\"870\" data-original=\"https://pic3.zhimg.com/v2-4643798193c259603c1e5d000d5bdb7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;870&#39; height=&#39;564&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"870\" data-rawheight=\"564\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"870\" data-original=\"https://pic3.zhimg.com/v2-4643798193c259603c1e5d000d5bdb7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4643798193c259603c1e5d000d5bdb7a_b.jpg\"/></figure><p>从1970年开始，人们开始使用计算机设备用于控制系统，增加了系统复杂性和新技术的冗杂度，也改变了人们控制系统的方式，人们开始扩展原有的工具应用于新的系统安全领域，但收效甚微，其原因在于原有老旧的安全工具著重于传统控制模型下失效事件的发生原因，而新的控制模型已经到来。对于马车的分析方法很难应用于对导弹的分析中来。</p><p>对于现代的系统工程而言，计算机软件对于系统的影响分为四个方面：</p><ol><li>由于系统的控制模型随着计算机控制系统的到来而发生的变化，其本质原因在于软件带给系统的变化，但这里并不意味着软件的失效，大部分的软件本身是不会失效的，软件只是在一个目标平台上实现功能的工具。Software is pure design and design do not &#34;fail&#34;. 所以在系统工程的定义中，软件并不会出现如硬件一般的Random Failure.</li></ol><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-1d4c6c6934363972a0ff33dd445c1927_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"852\" data-rawheight=\"562\" class=\"origin_image zh-lightbox-thumb\" width=\"852\" data-original=\"https://pic4.zhimg.com/v2-1d4c6c6934363972a0ff33dd445c1927_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;852&#39; height=&#39;562&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"852\" data-rawheight=\"562\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"852\" data-original=\"https://pic4.zhimg.com/v2-1d4c6c6934363972a0ff33dd445c1927_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1d4c6c6934363972a0ff33dd445c1927_b.jpg\"/></figure><p>2. 在足够成熟的但出现问题的系统中，软件的问题最后总会映射到系统设计的不足，在系统设计中可能会出现的两个问题为：</p><ul><li>对于被控系统或计算机错误或不完整的需求</li><li>不能被解决的系统状态和环境因素</li></ul><p>对于自动驾驶系统来说，系统工程由系统架构师发起，确定系统需求，由软件工程师理解系统需求后设计软件系统，人们的眼光往往更多的聚焦于软件工程师的Coding的实施，而忽视了系统工程中重要的系统需求的过程，而往往软件工程的质量并不能完全覆盖系统工程的质量。</p><p>3. 软件几乎允许无限制的系统复杂度,这意味着：</p><ul><li>无法计划、理解、预测和对抗不期的系统行为，传统的纯硬件行为意味着可预测的控制，但软件带来的控制的新方式带来了新的风险。</li><li>需要使用足够详尽的测试以解决所有的系统设计错误。</li></ul><p><b>波音747的软件在其平台上是安全的，但并不意味着在波音737的平台上同样安全</b>，也就是说独立的软件安全并不会决定系统的安全，人们可以说系统在某目标平台上在某种情况下是安全的，但无法认为系统是安全的。辅助驾驶系统往往要求驾驶员的双手放在方向盘上，但如果在方向盘上用其他的方式施加同样的力矩辅助驾驶系统便无法检测，导致系统错误的感知到人的决策，极易导致交通风险。而这一切的本质就在于软件带来的控制思维的变化。</p><p>事故的发生存在于以下方面：</p><ul><li>模块失效事故</li><ul><li>单点或多点模块失效</li><li>随机失效</li></ul></ul><p><i>以上的失效事件均可以通过同质或异质冗余的方式解决。</i></p><ul><li>模块交互失效</li><ul><li>模块间的复杂交互失效</li></ul></ul><p>模块间的交互失效往往不但关系到接口的失效，还关系到系统设计框架的缺陷，这些问题是最难以发现并解决的。</p><p>4. 软件的存在改变了人们在系统中的定义</p><p>系统的使用者或者交互人员往往难以做到对于系统的全面了解，可以使用以下的方式解决这个问题：</p><ul><li>训练系统的操作者等措施使系统操作者更加了解系统。</li><li>提高系统的自动化以代替操作者，或对于系统操作者提出操作的限制。</li></ul><p>从系统设计自身的角度上看，操作者的错误是一种症结，而不是一种病因，在高复杂度的系统工作中操作者的角色与传统系统存在不一致的情况，与此同时系统的设计本身也存在着允许操作者进行误操作的接口，这就要求在系统设计的过程中注意设备的设计以及无意义操作的减少。</p><p><i>That is why we need something new!</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. What is STAMP and how does it differ from what people do now?</b></p><p>STAMP (System-Theoretic Accident Model and Processes) 是一种用来描述事故是如何发生的模型，它将安全定义为一个控制问题，用于巨型复杂的系统，包含软件，硬件，人类，运行，管理等多个方面。STAMP认为危害来自于对于系统设计和运行缺少安全限制的原因，STAMP的目的是控制系统的行为以限制系统的安全。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d5ad313eda603ffd40625bdf925d9f98_b.jpg\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic1.zhimg.com/v2-d5ad313eda603ffd40625bdf925d9f98_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;594&#39; height=&#39;196&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"594\" data-original=\"https://pic1.zhimg.com/v2-d5ad313eda603ffd40625bdf925d9f98_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d5ad313eda603ffd40625bdf925d9f98_b.jpg\"/><figcaption>并不使用预防危害的方式保证系统的安全，而使用安全限制的方式来控制系统表现</figcaption></figure><p>系统安全的工作过程践行了STAMP的核心思想，Ways to Cope with complexity：</p><ul><li>Analytic reduction</li><li>System theory and system engineering</li></ul><p>什么是Analytic reduction？</p><p>一般情况下，若需要设计一个高复杂度的系统，第一件事情就是把高复杂度的系统分为小的部分，我们可以将系统认为物理层面和功能层面的存在，那么就可以将系统进行物理划分和功能划分后进行独立的分析和设计。这一切的工作建立在子系统间足够独立、子系统间不会出现非线性的交互，和子系统均能在母系统中协同工作的基础上。</p><p>在当下的自动驾驶系统中这些情况显然难以满足，只进行FMEA，FTA 此类工作工具对于系统安全显然已经无法满足需要，在当下的复杂系统的系统安全设计思想中，冗余和隔离，高集成度，Fail-safe的系统策略需要被考虑，对于操作者来说，操作空间、操作流程、Checklist，培训的方法也同样被列为重要的手段。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-0374b58af39e6f49251a5322f92b3ffa_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"708\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-0374b58af39e6f49251a5322f92b3ffa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;708&#39; height=&#39;460&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"708\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-0374b58af39e6f49251a5322f92b3ffa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0374b58af39e6f49251a5322f92b3ffa_b.jpg\"/></figure><p>什么是System theory and system engineering?</p><p>系统工程作用在复杂系统的完整分析上，专注于完整的系统而非独立的子系统，包括所有的社会因素以及技术因素</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-26cfc911c8ad6fce7030f1f1d5138c83_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"514\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb\" width=\"514\" data-original=\"https://pic4.zhimg.com/v2-26cfc911c8ad6fce7030f1f1d5138c83_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;514&#39; height=&#39;508&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"514\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"514\" data-original=\"https://pic4.zhimg.com/v2-26cfc911c8ad6fce7030f1f1d5138c83_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-26cfc911c8ad6fce7030f1f1d5138c83_b.jpg\"/></figure><p>STAMP架构下的系统模型就是下图中大环套小环的存在，假设最底层的控制逻辑是辅助驾驶功能ACC最基本的逻辑，包括感知决策和执行三个层面，那么还会由最底层的功能系统延伸到上层的操作域，到公司管理、相关法律法规以及国会：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bf6b9b7e6a7f243dd0dff25a5b53ee3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb\" width=\"668\" data-original=\"https://pic3.zhimg.com/v2-bf6b9b7e6a7f243dd0dff25a5b53ee3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;668&#39; height=&#39;524&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"668\" data-original=\"https://pic3.zhimg.com/v2-bf6b9b7e6a7f243dd0dff25a5b53ee3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bf6b9b7e6a7f243dd0dff25a5b53ee3e_b.jpg\"/></figure><p>在模型开发的基础上，控制模型对于系统工作Process的控制理论上可以在早期更好地控制被控对象的风险。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. What kinds of tools are available？</b></p><p>STAMP只是一种理论，理论中包含许多过程与工具：</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-c14c31d9610f0cedf4c6f5276eee2181_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"694\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"694\" data-original=\"https://pic2.zhimg.com/v2-c14c31d9610f0cedf4c6f5276eee2181_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;694&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"694\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"694\" data-original=\"https://pic2.zhimg.com/v2-c14c31d9610f0cedf4c6f5276eee2181_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c14c31d9610f0cedf4c6f5276eee2181_b.jpg\"/></figure><p>STPA是一种从上至下的系统分析工具，它可以用来分析系统中任何因素的安全限制，用于生成安全需求，它可以用来分析违反相关安全限制的场景用来提高系统的稳健性，它可以用来做技术的设计以及组织的设计，它可以帮助早期的设计工作和中后期的设计迭代和进化。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4. How the tools being used?</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bffe9ba7eaf8d8c8d579cbec3b08aa73_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic4.zhimg.com/v2-bffe9ba7eaf8d8c8d579cbec3b08aa73_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic4.zhimg.com/v2-bffe9ba7eaf8d8c8d579cbec3b08aa73_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bffe9ba7eaf8d8c8d579cbec3b08aa73_b.jpg\"/></figure><p>上图是在工业界的一个经典的控制回路，计算机控制CATALYST和COOLING WATER的阀门，软件工程师收到的需求往往是当有任何的错误发生时，停止控制链中的任何工作并发出警报提醒操作者。看上去毫无问题的一条需求却有着致命的缺陷，但当GEARBOX中的油位很低时，计算机停止工作，一切停止，操作工加满GEARBOX的油量后重启的时候计算机先打开了CATALYST的阀门，后打开了COOLING WATER的阀门，导致REACTOR过热出现危险。在完整的控制链中软件按照需求没有出现任何问题，其问题源于早期系统设计的不足。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b2667720282801414bc113e6a3fedd6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"358\" data-rawheight=\"452\" class=\"content_image\" width=\"358\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;358&#39; height=&#39;452&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"358\" data-rawheight=\"452\" class=\"content_image lazy\" width=\"358\" data-actualsrc=\"https://pic2.zhimg.com/v2-b2667720282801414bc113e6a3fedd6d_b.jpg\"/></figure><p>我们通常会使用物理模型的方式作为软件需求的输入，但当功能模型被生成时，其中往往会出现未形成闭环的情况，导致系统控制策略的缺失。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-ff4723064b6c4287f04f98471a3da8ec_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"708\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic1.zhimg.com/v2-ff4723064b6c4287f04f98471a3da8ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;708&#39; height=&#39;392&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"708\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"708\" data-original=\"https://pic1.zhimg.com/v2-ff4723064b6c4287f04f98471a3da8ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ff4723064b6c4287f04f98471a3da8ec_b.jpg\"/></figure><p>可以使用表格的方式，对于Process做出定性的控制，以分析在不同的情况下，CATALYST与COOL WATER对于系统的影响，通过这种方式，可以得到早期的High Level Requirement：</p><ul><li>Water valve shall always be fully open before catalyst valve is opened</li><ul><li>Water valve shall not be opened more than X seconds after catalyst valve open</li></ul><li>Catalyst valve shall always be fully closed before water valve is closed</li><ul><li>Catalyst valve shall not be closed more than X seconds after water valve has fully closed </li></ul></ul><p>当我们得到了High Level Requirement的时候我们需要分析不安全的控制行为并避免或减弱其影响，如：</p><ul><li>分析若CATALYST打开而COOLING WATER没有打开的原因</li><li>打开COOLING      WATER的指令被发出，但没有执行的原因</li><li>Etc...</li></ul><p>通过在系统工程中对于Process的定性安全分析来确定安全危害的来源并添加新的需求：</p><ul><li>Software shall check for feedback after issuing an Open/Close command. If not received in a specified time period, then assume valve not opened or closed</li><li>There must be feedback to controller to determine that water is actually flowing through pipe before issuing an Open Catalyst command</li></ul><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-095a71234b1e2044520aea9db049aa3d_b.jpg\" data-size=\"small\" data-rawwidth=\"854\" data-rawheight=\"860\" class=\"origin_image zh-lightbox-thumb\" width=\"854\" data-original=\"https://pic2.zhimg.com/v2-095a71234b1e2044520aea9db049aa3d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;854&#39; height=&#39;860&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"854\" data-rawheight=\"860\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"854\" data-original=\"https://pic2.zhimg.com/v2-095a71234b1e2044520aea9db049aa3d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-095a71234b1e2044520aea9db049aa3d_b.jpg\"/><figcaption>Full control loop example</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5. Does it work?</b></p><p>STPA已经被用于太空、国防、汽车、核电等重要领域，相比FTA，HAZOP，FMEA，ETA来说，STPA同样分析危险的来源，并可以更好的发现与软件和人类相关的危害原因。正是因为STPA可以在早期确认风险的存在，在Top-Down系统开发的流程中相比于使用传统安全分析工具的系统开发的成本将被进一步的降低。</p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "航空安全", 
                    "tagLink": "https://api.zhihu.com/topics/19572877"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59756636", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 3, 
            "title": "Pilot Roadmap - ADAS Simulation Hierarchy Analysis", 
            "content": "<blockquote>提要：本文提到的思想作者已经放弃，仅可作为参考</blockquote><p>近日德国汽车技术公司大陆集团CEO ElmarDegenhart博士在接受记者采访时表示， L4级别的自动驾驶市场商业化发展需要时间，“到2030年前，预计自动驾驶市场的发展仍然主要依靠辅助系统驱动，人们将借助各种辅助的传感器，来提高驾驶的安全。对辅助驾驶方面的需求会促进细分市场的发展。”</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f462bf199c13be485b65578b88901334_b.jpg\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"625\" data-original=\"https://pic1.zhimg.com/v2-f462bf199c13be485b65578b88901334_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;625&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"625\" data-original=\"https://pic1.zhimg.com/v2-f462bf199c13be485b65578b88901334_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f462bf199c13be485b65578b88901334_b.jpg\"/><figcaption>The Future in Motion by 老东家</figcaption></figure><p>谷歌母公司Alphabet旗下自动驾驶部门Waymo开始销售激光雷达等硬件的消息也印证了自动驾驶还远未商业化的事实。据数据统计，L4级别自动驾驶的准入门槛预计为10亿美元加上至少1000人的软件团队。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-be14587f92e74776fdb1c2afe3667c80_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb\" width=\"483\" data-original=\"https://pic1.zhimg.com/v2-be14587f92e74776fdb1c2afe3667c80_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;483&#39; height=&#39;349&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"483\" data-original=\"https://pic1.zhimg.com/v2-be14587f92e74776fdb1c2afe3667c80_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-be14587f92e74776fdb1c2afe3667c80_b.jpg\"/></figure><p>企业净增长的需求要依靠开源节流来实现，2018、2019年是自动驾驶产业的洗牌年，在2020年量产L4的底牌已经无法打出的时候，许多创业公司已经由原来的自动驾驶平台服务商转向了定制的单一的功能软件开发服务商，转向细分领域的应用。</p><p>在大部分L3-L4自动驾驶厂商无法快速盈利时，更好的进行成本控制就成为了重中之重，据市场上进行候选人交易的从业者介绍，许多小厂商已经开始在传统零部件部门上挤压成本来哺乳智能网联的业务部门。事实上，除了产品开发中高昂的人力成本，产品开发技术和基础设施成本也占据了重要的位置。</p><p>对于一个完整的自动驾驶系统来说，分为系统开发、软件开发和硬件开发三个部分，良好的系统开发对于软件和硬件都具有良好的辅助作用，系统仿真对于成本的降低更是发挥了重要的作用。</p><p>在某一线城市的自动驾驶试验场中，单一车辆每天使用场地加相关道具的金额已经达到了100000人民币，对于动辄几十万公里的路测里程数来说，单独每年的实验费用就将达到几亿人民币的规模，系统仿真在很大程度上让路测的成本变成了显卡的成本，每家厂商也都在积极推进这一进程，尽管如此，在许多现有的开发方案中依然存在不必要发生的成本问题。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2dd5525387ea3ead21c21edc4df23b21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb\" width=\"482\" data-original=\"https://pic2.zhimg.com/v2-2dd5525387ea3ead21c21edc4df23b21_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;482&#39; height=&#39;312&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"482\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"482\" data-original=\"https://pic2.zhimg.com/v2-2dd5525387ea3ead21c21edc4df23b21_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2dd5525387ea3ead21c21edc4df23b21_b.jpg\"/></figure><p>在最新版本的预期功能安全中提到了仿真对于复杂系统开发的意义，但美中不足的是法规中建议的方法可以称为局部最优解，但全局最优解依然需要各家厂商依靠自家产品进行摸索，基于场景的仿真方法在泛化未知路况用例的条件下几乎是唯一的选择，但随之而来的问题也让人十分头痛。</p><p>对于自动驾驶系统仿真来说，当下最大的挑战在于：</p><ol><li><b>缺乏Critical仿真泛化</b></li><li><b>存在过多无效的仿真</b></li></ol><p>两个问题都可以使用后验数据分析的方式得到解决，但使用后验方式进行经验积累的方式往往带来了时间和成本的大量消耗。目前国际上在仿真场景方面目前基本上使用了OpenDrive、OpenScenario两种数据格式，方便部分厂商使用服务外包的形式获取场景数据库。</p><p>试想一下，一个中国工程师的成本大约是一个印度工程师的三倍，即1中 = 3印。</p><p>基于这种考虑，印度成为了首当其冲的场景库工厂，成本被成倍的降低，看上去皆大欢喜。但事实并没有那么乐观，每个印度工程师的工作产出大概为一天4-5个场景，即10000公里左右的里程数，相对于几亿公里数的要求，九牛一毛的工作量对应上巨额的工作时间，又输出的巨额的成本，当然，其中还包括大量的无效数据。</p><p>为了解决这一问题，我们需要一种基于先验逻辑的方式，用来更好地泛化场景，解决成本控制的问题。也就是说，我们需要一个基于先验逻辑的框架，增加仿真效能。</p><p>在预期功能安全的规范中，对于场景相关的定义存在几个概念，从大到小分别为Use case, Scenario, Situation, Scene。事实上，仅仅在最小单元的Scene的概念中，就存在着Dynamic Elements, Scenery, Self-representations of actors and observers等第二层级的影响因子，在第三层级更是存在这8种不同的影响因子，对于不同影响因子的实施都会导致全局的变化，如何确定影响因子的权重来选择相关场景的泛化就成为了采购相关场景服务的重要输入。</p><p>在查阅了许多相关资料后选择了一种基于数学模型的方式进行了场景的系统架构进行实验，使其符合ODD系统设计的前提下增加相关重要影响因子的权重：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7cd44ed8cefdda027470411236ee65ca_b.jpg\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"221\" class=\"content_image\" width=\"356\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;356&#39; height=&#39;221&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"221\" class=\"content_image lazy\" width=\"356\" data-actualsrc=\"https://pic3.zhimg.com/v2-7cd44ed8cefdda027470411236ee65ca_b.jpg\"/><figcaption>基于结对比较的权重结果</figcaption></figure><p>以及相关影响因子的特征矩阵：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6ea020999279f1432f6cbeeb5a4fb550_b.jpg\" data-size=\"normal\" data-rawwidth=\"221\" data-rawheight=\"209\" class=\"content_image\" width=\"221\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;221&#39; height=&#39;209&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"221\" data-rawheight=\"209\" class=\"content_image lazy\" width=\"221\" data-actualsrc=\"https://pic1.zhimg.com/v2-6ea020999279f1432f6cbeeb5a4fb550_b.jpg\"/><figcaption>特征值为5.714</figcaption></figure><p>在进行数学模型的场景泛化中，我并没有加入预期功能安全中对应的Trigger的概念，以此提升结构的清晰性。通过实验的结果可以看出仅仅在Scene的最小概念下，在第二层系统中已经得出了相对精确的结果，相对于均值场景泛化每个影响因子都会较最大影响因子减少大量的泛化需求，<b>节约了约50%的有效场景需求量</b>。</p><p><b>若放置在10000个场景的条件下，即可解决5000个冗余场景问题，相当于3个印度工程师3年的工作量，约等于60万人民币，那么如果场景库变为更大的数量级，相关场景的影响因子更加复杂，相关的成本将会出现更明显的下降。</b></p><p>尽管此方法可以很大程度上降低成本的消耗，但也有其致命的缺陷，先验逻辑往往伴随着主观的判断，在自动驾驶系统存在神经网络不确定因素的前提下工程师的经验就成为了先验工作法的重要影响因子，解决这种问题的唯一方式就是借鉴资深工程师的经验，搭配后验的数据分析，完成Fine Tuning。</p><p>最终，在与同事长时间的讨论后我最终还是放弃了这种方法，选择了更加笨重的影响因子等权重的分配方式，放弃的原因在于经验的不足，在ODD和ODER的系统设计思想下更趋近于确认目标的产品开发，如果过早在系统中加入人为经验的因素，很有可能造成安全的设计隐患，遂放弃。</p><p>用成本换安全！</p><p><b>Drive Safe</b></p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56125483", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 10, 
            "title": "Pilot Roadmap - Safety Of The Intended Function", 
            "content": "<p>2019年1月，ISO/PAS 21448:2019 Road vehicles -- Safety of the intended functionality发布了第一版公开版本的文件，对于ADAS系统来说这份文件具有指导性的地位，下面搬运+分析一些源自ISO官网的信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>General Infomation Introduction：</b></p><p>Status: Published - <b>Ted: 经过了Approval的版本，当前版本置信度更高</b></p><p>Publication date: 2019-01 - Ted: New Year Gift for Automotive!</p><p>Edition: 1</p><p>Number of pages: 54 - <b>Ted: 笔者的上一Approval版本为56页，相差不大</b></p><p>Technical Committee: ISO/TC 22/SC 32 Electrical and electronic components and general system aspects</p><p>ICS : 43.040.10 Electrical and electronic equipment</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>General Doc Introduction：</b></p><p><i>以下信息搬运自ISO官网，原为英文，由笔者协谷歌翻译进行翻译。</i></p><p>由于预期功能的功能不足或者可合理预见的人员滥用导致的危险而导致的不合理风险被称为预期功能的安全性（SOTIF）。本文档提供了实现SOTIF所需的适用设计，验证和验证措施的指导。本文档不适用于ISO 26262系列所涵盖的故障或由系统技术直接引起的危险（例如激光传感器造成的眼睛损伤）。</p><p>本文件旨在应用于预期的功能，功能作用过程总适当的情景感知对安全至关重要，并且情境意识来自复杂的传感器和处理算法;尤其是在OICA / SAE标准J3016上具有1级和2级的紧急干预系统（例如紧急制动系统）和高级驾驶员辅助系统（ADAS）。可以考虑将此版本的文档用于更高级别的自动化，但可能需要采取其他措施。本文件不适用于现有存在公认的和值得信赖的设计系统的功能，验证和验证（V＆V）措施（例如动态稳定性控制（DSC）系统，安全气囊等）。如果源自复杂传感器和处理算法的情景感知是创新的一部分，则本文档中描述的一些度量适用于此类系统的创新功能。</p><p><i>Ted：这里需要注意的是，当前版本的SOTIF适用于L1-L2级别的ADAS，但不一定适用于L3以上的Autonomous Driving。原有的一级自动化功能如ESP，ABS等也不一定适用（此处的“不一定”是因为原文应用了“This document is not intended for”）</i></p><p><b>Intended use and reasonably foreseeable misuse are considered in combination with potentially hazardous system behaviour when identifying hazardous events.</b></p><p><i>Ted：这句话是SOTIF的精华，故抛出原文。在识别危险事件时，应将预期功能和合理可预见的误用与潜在危险系统行为相结合。</i></p><p>可合理预见的误用可能直接导致潜在危险的系统行为，也被认为是可能直接触发与SOTIF相关的危险事件的可能事件。</p><p>故意更改系统操作被视为功能滥用。功能滥用不在本文档的范围内。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Overview of Contents：</b></p><p>道路车辆在运营阶段的安全性是道路车辆行业的首要考虑因素。近年来，车辆中包含的先进功能的数量大幅增加。它们依赖于电气和/或电子（E / E）系统实现的传感，复杂算法处理和驱动。</p><p>公路车辆的可接受的安全水平要求避免由与预期功能及其实施相关的每种危险引起的不合理风险，尤其是那些不是由于故障引起的危险，例如，由于性能限制。 ISO 26262-1将车辆安全定义为不存在由E / E系统故障引起的不合理风险。 ISO 26262-3规定了危害分析和风险评估，以确定车辆级别的危险。这评估了由于物品的故障行为而导致的潜在风险，并且能够定义降低风险所必需的顶级安全要求，即安全目标。 ISO 26262系列的其他部分提供了避免和控制可能违反安全目标的随机硬件故障和系统故障的要求和建议。</p><p>对于某些依赖于感测外部或内部环境的系统，可能存在由系统的预期功能或性能限制引起的潜在危险行为，该系统没有ISO 26262系列中解决的故障。此类限制的示例包括：</p><p><b>- 功能无法正确理解情况并安全运行;这还包括使用机器学习算法的功能;</b></p><p><b>- 功能无法正确理解情况并安全运行;这还包括使用机器学习算法的功能;</b></p><p>由于与这些限制相关的这些潜在危险行为而没有不合理的风险被定义为预期功能的安全性（SOTIF）。功能安全（由ISO 26262系列解决）和SOTIF是安全的独特和互补方面。<b>- Ted：在上一版本中这段文字没有提到与ISO26262的对比，笔者认为这段文字的改变将对产品开发流程产生巨大的改变，ISO26262与ASPICE3两兄弟以后不会孤单。</b></p><p>为了贯彻SOTIF，活动在以下阶段实施：</p><p><b>- 设计阶段的措施; 例 对传感器性能的要求。 </b></p><p><b>- 核查阶段的措施; 例 技术评论，具有高覆盖率的相关场景的测试案例，注入潜在的触发事件，在所选SOTIF的循环测试（例如SIL / HIL / MIL）中是相关的用例。 </b></p><p><b>- 验证阶段的措施。 例 长期车辆测试，仿真。</b></p><p>用户对其功能的正确理解，其行为及其局限性（包括人机界面）是确保安全的关键。 <b>在许多情况下，触发事件是必要的，以引起潜在的危险行为</b>（<b>Ted：本版本新加入的一句话</b>）; 因此，在特定用例的背景下分析危害的重要性。 在本文件中，由于触发事件引起的潜在危险系统行为所造成的危险，既适用于正确使用车辆的使用情况，也适用于以合理可预见的方式错误使用的使用情况（不包括故意更改）对系统的操作做了）。</p><p>例子说明：</p><p>使用2级驾驶自动化时缺乏驾驶员注意力。 </p><p>此外，可合理预见的误用可能直接导致潜在的危险系统行为，也被视为可能的触发事件。 利用车辆安全漏洞的成功攻击也可能产生非常严重的后果（即数据或身份盗用，隐私侵犯等）。虽然安全风险也可能导致需要解决的潜在危险行为，但本文档未涉及安全性。 假设使用ISO 26262系列解决E/E系统的E/E随机硬件故障和系统故障。本文档中提到的活动与ISO 26262系列中的活动互补。<b>- Ted：再次互补。这段个人理解为信息安全导致的危险并未在SOTIF中Cover，信息安全应参考ISO21434。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Table Comparison：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9205ef0e4db1e3e31e61415b294619f1_b.jpg\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic2.zhimg.com/v2-9205ef0e4db1e3e31e61415b294619f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;903&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"903\" data-original=\"https://pic2.zhimg.com/v2-9205ef0e4db1e3e31e61415b294619f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9205ef0e4db1e3e31e61415b294619f1_b.jpg\"/><figcaption>Table 1 for Published Version</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-04167278ada531e4061d325247dd3c2c_b.jpg\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb\" width=\"795\" data-original=\"https://pic1.zhimg.com/v2-04167278ada531e4061d325247dd3c2c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;795&#39; height=&#39;461&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"795\" data-original=\"https://pic1.zhimg.com/v2-04167278ada531e4061d325247dd3c2c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-04167278ada531e4061d325247dd3c2c_b.jpg\"/><figcaption>Table 2 for Draft Version</figcaption></figure><p>两张新老SOTIF的图拿出来可以很直观的看到<b>SOTIF和26262的关系更加紧密</b>，此外值得注意的两点是：</p><ol><li>Table 1中新增的Hazards caused by the system technology，这点在某种程度上说明了目前的SOTIF还不能覆盖所有先进技术的使用，HAD方面依然需要各家企业进行经验的摸索。</li><li>ISO26262参与到了许多模块的规范中，这代表着除了E/E系统失效外现有的符合功能安全标准的系统开发内容可能发生巨大的变化，建议留点Buffer。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Conclusion：</b></p><p>当前版本的SOTIF由于其涵盖内容、关联文件的变化，其重要程度已经不言而喻了，ADAS和HAD厂商会受到很大的影响，成本增加，产品周期明显增长。但对于用户来说智能汽车的置信度也会提高，总体来说，期待变革。</p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }
            ], 
            "comments": [
                {
                    "userName": "阿猫在途", 
                    "userLink": "https://www.zhihu.com/people/8da7594c818360e47d19d3a7f7ee4592", 
                    "content": "<p>谢谢分享啊，不过谷歌翻译的部分内容会导致misunderstanding：并且情境意识来自复杂的传感器和处理算法;尤其是在OICA / SAE标准J3016上具有1级和2级的紧急干预系统（例如紧急制动系统）和高级驾驶员辅助系统（ADAS）。——原文emergency intervention systems和ADAS level1/2是并列的，另外This edition of the document can be considered for higher levels of automation指的是J3016定义的driving automation (Level 3-5)，不是指自动化。</p>", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "阿猫在途", 
                    "userLink": "https://www.zhihu.com/people/8da7594c818360e47d19d3a7f7ee4592", 
                    "content": "<p>另外，供参考啊，J3016里建议In this sense, also, “autonomous” is a misnomer as applied to automated driving technology, because even the most advanced ADSs are not “self-governing.” Rather, ADSs operate based on algorithms and otherwise obey the commands of users. For these reasons, this document does not use the popular term “autonomous” to describe driving automation.</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "<p>1、2级不可以用Autonomous来修饰挺合理的..3级以上用用感觉挺合理的吧</p>", 
                            "likes": 0, 
                            "replyToAuthor": "阿猫在途"
                        }, 
                        {
                            "userName": "阿猫在途", 
                            "userLink": "https://www.zhihu.com/people/8da7594c818360e47d19d3a7f7ee4592", 
                            "content": "<p>嗯嗯，发现SOTIF标准里还是继续沿用autonomous driving的表达。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "Ted Zhang"
                        }
                    ]
                }, 
                {
                    "userName": "阿猫在途", 
                    "userLink": "https://www.zhihu.com/people/8da7594c818360e47d19d3a7f7ee4592", 
                    "content": "<p>Cybersecurity确实未在SOTIF全文涉及到，而是在ISO26262 part2,part6 reference的，依据ISO 21434a or SAE J3061，这个是相当繁琐，系统的工作，目前我们每个module owner负责各自模块的security deep dive,然后在整车架构freeze之前去align。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Ted Zhang", 
                            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
                            "content": "<p>还是整车厂的功底深厚啊</p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-878d130f7db8314bf8eac78484d68fb3.gif\" data-width=\"\" data-height=\"\">[机智]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "阿猫在途"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55820876", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 18, 
            "title": "Pilot Roadmap - Software Arch and Safety Analysis", 
            "content": "<p><b>Overview of Software Development Acc. ISO26262：</b></p><p>汽车电子领域的ISO26262源于工业领域的IEC61508，第一版ISO26262发布于2011年，那时对于汽车电子功能安全的实践取决于各家的Know How，时至今日越来越多的汽车电子企业融入了ISO26262的生态，着力于产品开发流程和质量的提升。</p><p>当人们谈起ISO26262时通常第一个想到的就是系统失效，系统失效作为汽车电子系统最大的危害来源，每一次潜在的失效都可能导致将对人的伤害。系统失效可能由随机硬件失效和软件失效导致，对于ASIL D的产品，随机硬件失效的FIT值应符合10 FIT的标准，而软件作为功能安全开发的子阶段，也有其相对应的开发流程和测试规范，在电子电器架构日趋复杂、代码量指数级上升的今天，ISO26262 2018版对软件提出了更高更细致的要求。</p><p>对于一个成熟项目的软件开发来说，软件生命周期，方法，语言和工具等，应与整个软件生命周期的所有子阶段一致，并与系统和硬件开发阶段兼容，使所有的所需的开发输入可以正确的利用。生命周期一般“基于不同的项目进行不同的设定”，而在编程语言方面，汽车电子庞大的嵌入式控制系统群让C语言稳坐产品开发头牌。当软件生命周期和语言都已经确定，方法和工具(ISO26262第二版去掉了软件工具资质认可报告的Review)就是两个重中之重。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5feec7e6db7dde47b78fef5db58bb087_b.jpg\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb\" width=\"766\" data-original=\"https://pic4.zhimg.com/v2-5feec7e6db7dde47b78fef5db58bb087_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;766&#39; height=&#39;518&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"766\" data-original=\"https://pic4.zhimg.com/v2-5feec7e6db7dde47b78fef5db58bb087_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5feec7e6db7dde47b78fef5db58bb087_b.jpg\"/><figcaption>软件相关的开发阶段</figcaption></figure><p><b>Software Architecture Design Acc. ISO26262:</b></p><p>维基百科中对软件架构的定义如下：</p><p>软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p><p>软件问题是导致系统失效的直接原因。为了避免软件失效的结果，软件开发的输入就显得尤为重要。系统性失效主要是通过流程、体系加以控制和避免。项目开发过程中面临的一个重要的挑战是需要事先评估尽可能多的潜在危害和风险(HARA)，并采取相关的定义策略(ISO26262 - 9 , 2011)来确定相关功能的安全等级(ASIL)和安全目标(Safety Goal)，在ADAS ECU以及许多Safety Critical的零部件上体现尤为明显的一点是随着功能安全等级的提高，对于系统的硬件指标(FIT、测试覆盖度等)，以及软件开发过程(测试深度、需求跟踪、文档评审)的要求也在提高。这些标准提高的意义在于降低系统失效的概率从而减小潜在危害和风险概率。</p><p>对于流程控制的高要求推进了标准化的进程，ASPICE3与ISO26262的兼容性使得其越来越多的被厂商所使用，ASPICE对于系统、硬件、软件项目的方法论皆为需求-设计-测试。许多软件服务供应商由于成本或项目时间等原因并不注重需求的管理，使用Bottom Up的开发流程，这导致了软件的设计混乱和问题难以追溯。</p><p>在融合了ASPICE3与ISO26262的标准之后，软件开发的输入被标准化地定义为软件需求和软件安全需求。软件需求源于系统需求，在现有系统架构地基础上用以确定软件的功能和特性，在软件需求规范中，功能性需求和非功能性需求将被指出并结构化。软件安全地需求则来自于技术安全需求和系统设计规范，其中功能需求，开发流程和环境、测试标准将作为需求的输入，软件安全需求应考虑软件故障容忍度、软件接口安全、软件鲁棒性等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7f9275489b3663eef37973ef6917289f_b.jpg\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb\" width=\"823\" data-original=\"https://pic4.zhimg.com/v2-7f9275489b3663eef37973ef6917289f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;823&#39; height=&#39;452&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"823\" data-original=\"https://pic4.zhimg.com/v2-7f9275489b3663eef37973ef6917289f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7f9275489b3663eef37973ef6917289f_b.jpg\"/><figcaption>Principles for software architectural design</figcaption></figure><p>当得到软件功能性需求和非功能性需求以及安全需求后，下一步就是软件架构设计，在软件架构设计地过程中，软件的元素(Component)、元素接口、元素动态行为(控制流、数据流)、和资源消耗均被定义。软件架构根据功能需求和非功能需求分解为多层次的元素，在这一步骤中，模块化、封装性、简单化是设计的根本原则，高内聚低耦合(ASIL B above)是重要的目标。在软件静态设计方面，软件的结构、数据结构、元素内数据流、元素间接口和软件接口需要被考虑；在软件动态设计方面，软件的功能和行为、流程并发、元素间数据流，外部接口数据流、时间限制等需要被考虑。动态行为由操作模式确定，如启动、关闭、正常模式、校准、诊断等；进程和进程内部通信、任务、线程、时间片、中断等。另外，在评估动态行为时，目标平台和潜在载荷应被考虑。在软件架构设计的适当层级，为相关元素定义并记录所有软件组件的资源消耗目标。（资源消耗通常被明确为资源，诸如内存ROM、RAM、外部/内部EEPROM或Flash数据，CPU负载等） （- ISO26262-7.2011）。</p><p>软件静态设计：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-384a831c7e268376f142929c14dc96fa_b.jpg\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-384a831c7e268376f142929c14dc96fa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;634&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"634\" data-original=\"https://pic3.zhimg.com/v2-384a831c7e268376f142929c14dc96fa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-384a831c7e268376f142929c14dc96fa_b.jpg\"/><figcaption>定义软件结构、资源使用、元素间接口、外部接口 - 图片源自网络</figcaption></figure><p>软件动态设计：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6854a27121f54e856275788151e5b8d8_b.jpg\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"277\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic1.zhimg.com/v2-6854a27121f54e856275788151e5b8d8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;526&#39; height=&#39;277&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"277\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"526\" data-original=\"https://pic1.zhimg.com/v2-6854a27121f54e856275788151e5b8d8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6854a27121f54e856275788151e5b8d8_b.jpg\"/><figcaption>定义的模块之间的数据的流向和传递方式、安全机制 - 图片源自网络</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2365ba8661d39ad4738a382465f12d3c_b.jpg\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-2365ba8661d39ad4738a382465f12d3c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-2365ba8661d39ad4738a382465f12d3c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2365ba8661d39ad4738a382465f12d3c_b.jpg\"/><figcaption>定义控制逻辑、方法（轮询、事件）信息（返回值、时间、中断）和关系 - 图片源自网络</figcaption></figure><p>在遵循ISO 26262开发的ECU中，经常出现安全相关的软件和与非安全相关的软件并行使用的情况。传统上采用分区措施来避免相互干扰，但是这种分区通常会导致运行时间的开销和复杂化。完全遵循ISO 26262开发的AUTOSAR基础软件，可以最大限度地减少分区数量。</p><p>对于不同安全等级软件的共存资源的现象来说，对于共享内存需要注意限制内存访问；对于共享时间和处理器需要设置严格的(截止时间、顺序、频率)监控和独立时钟的看门狗；对于数据的交换则可以用RTE作为数据完整性的保证。</p><p><b>Software Safety Analysis Acc. ISO26262:</b></p><p>软件安全分析提供了带有安全机制功能的依据，并且支持了技术安全需求的有效性。更多的时候软件安全分析发生在软件架构的阶段，目的是为了降低软件单元设计的安全问题，并作为软件单元设计的重要输入。</p><p>对于成熟的软件架构来说，错误探测和处理机制是必要的，99%的硬件诊断机制由软件完成，所以无论是硬件和软件，都需要有完整的检测和处理机制以保证安全。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cbfe090d993c56a733ea639942cae854_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic1.zhimg.com/v2-cbfe090d993c56a733ea639942cae854_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;831&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"831\" data-original=\"https://pic1.zhimg.com/v2-cbfe090d993c56a733ea639942cae854_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cbfe090d993c56a733ea639942cae854_b.jpg\"/><figcaption>Error Detection Mechanisms</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-67ad38ceaebadb33363fd532c28f11ab_b.jpg\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"807\" data-original=\"https://pic4.zhimg.com/v2-67ad38ceaebadb33363fd532c28f11ab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;807&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"807\" data-original=\"https://pic4.zhimg.com/v2-67ad38ceaebadb33363fd532c28f11ab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-67ad38ceaebadb33363fd532c28f11ab_b.jpg\"/><figcaption>Error Handling Mechanisms</figcaption></figure><p>HAZOP作为软件安全分析的重要工具，由于其失效描述关键字的存在相比FMEA更可以量化软件的风险。对于单一软件元素进行安全分析时应注意其处理逻辑、时序、接口数据。</p><p>安全分析的方向：采用失效关键字的分析。通常的失效关键字包括：</p><ul><li>NO OR NOT: 软件功能没有实现</li><li>PART OF：软件功能只实现了一部分，不完整</li><li>MORE： 软件产生的值过大</li><li>LESS： 软件产生的值过小</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>除了对单一软件元素进行分析外，对于ASIL C以上的软件还应该进行控制流、数据流的独立性分析(Table 6)，找出软件架构层面的独立性失效。独立失效的原因分为共因/共模失效、级联失效。</p><p>共因/共模失效：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-77a4f1d46bc4a74b7a9c9f11ebdfc826_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb\" width=\"424\" data-original=\"https://pic3.zhimg.com/v2-77a4f1d46bc4a74b7a9c9f11ebdfc826_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;424&#39; height=&#39;223&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"223\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"424\" data-original=\"https://pic3.zhimg.com/v2-77a4f1d46bc4a74b7a9c9f11ebdfc826_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-77a4f1d46bc4a74b7a9c9f11ebdfc826_b.jpg\"/></figure><p>级联失效：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-883281f6691b2e59dbe26a8ea59007a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"412\" data-rawheight=\"192\" class=\"content_image\" width=\"412\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;412&#39; height=&#39;192&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"412\" data-rawheight=\"192\" class=\"content_image lazy\" width=\"412\" data-actualsrc=\"https://pic1.zhimg.com/v2-883281f6691b2e59dbe26a8ea59007a0_b.jpg\"/></figure><p>共因/共模失效的原因为同一种错误输入，级联失效的原因为元素间的互相影响。这些问题的根本原因有但不限于以下几点：</p><ol><li>共享内存</li><li>全局宏定义</li><li>函数错误调用</li><li>输入同一个全局变量</li><li>公用堆栈</li><li>系统性耦合</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f4ba6df88e5df4d9532b148735e719d4_b.jpg\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb\" width=\"559\" data-original=\"https://pic1.zhimg.com/v2-f4ba6df88e5df4d9532b148735e719d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;559&#39; height=&#39;431&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"559\" data-original=\"https://pic1.zhimg.com/v2-f4ba6df88e5df4d9532b148735e719d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f4ba6df88e5df4d9532b148735e719d4_b.jpg\"/><figcaption>图片源自网络</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>预防这些问题的一个好的方法就是使用FTA，在预测系统失效故障的前提下导出所有可能出现的软件失效，在软件设计的过程中遵守ISO26262-8.2011对于不同ASIL等级软件的设计需求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-147c84607d180480655da676e42f8a57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb\" width=\"910\" data-original=\"https://pic4.zhimg.com/v2-147c84607d180480655da676e42f8a57_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;910&#39; height=&#39;492&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"910\" data-original=\"https://pic4.zhimg.com/v2-147c84607d180480655da676e42f8a57_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-147c84607d180480655da676e42f8a57_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>In General:</b></p><p>软件架构和安全分析是一项十分复杂的工作，在当前高性能ECU需求不断膨胀的前提下，传统的AUTOSAR架构已经无法满足日益增长的需求。期待Adaptive AUTOSAR的大规模标准化实现。</p>", 
            "topic": [
                {
                    "tag": "功能安全", 
                    "tagLink": "https://api.zhihu.com/topics/20051431"
                }, 
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "软件", 
                    "tagLink": "https://api.zhihu.com/topics/19551718"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53793375", 
            "userName": "Ted Zhang", 
            "userLink": "https://www.zhihu.com/people/4373129a37d856d04992b7c20cb6f042", 
            "upvote": 1, 
            "title": "Pilot Roadmap - ARM MCU & Adaptive AUTOSAR System", 
            "content": "<p>/* </p><p>Ref: ARM MCU &amp; Embedded System - Ming Zeng(From Tsinghua)&#39;s Course </p><p>Ref: ARM System-on-Chip Architecture (2nd Edition) - Steve Furber</p><p>先整理一下ARM中断服务</p><p>TODO：</p><p>1. Arch design</p><p>2. ARM arch &amp; operation mode</p><p>3. Detailed analysis - IO, UART, Interrupt, PWM, SPI, I2C, ADC</p><p>4. Pilot Adaptive AUTOSAR analysis </p><p>*/</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Interrupt</p><p>中断是与轮询相对应的一种工作模式。</p><p>轮询：检查一个按键是否按下，隔一段时间查一下寄存器是否按键</p><p>中断：中断是一个需要CPU立刻处理的内部/外部事件</p><ul><li>内部事件：</li><ul><li>定时器定时时间到</li><li>AD变换结束</li></ul><li>外部事件：</li><ul><li>按键动作</li><li>发生外部通信(UART)</li></ul></ul><p>当这些事情发生时，中断会打断CPU当前任务的进行跳转到中断事件处进行任务的处理</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在任务执行完成之后又回到程序的流程继续执行，在这个过程当中，从正常程序切换到约定好的服务程序需要使用到堆栈来保存正常程序的寄存器环境（上下文寄存器）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这段程序实现了按键控制点灯的基本逻辑，有打开时钟，配置IO，设置IO模块以设置引脚方向来控制灯的亮和灭</p><p>在无限循环中有一个delay()模块延时，后面的if语句检查了GPIOA上的PDIR寄存器的后两位有没有变0，也就是键有没有按下，在else语句中给出了分支覆盖另一种可能的结果。在if语句结束后进行翻转。</p><p>这个程序的问题在于每次delay过程中无法检测按键是否按下，所以若在delay的过程中按下消息就会丢失。若通过改短delay延时来减小消息丢失的可能性那么灯的闪烁频率会加大，error</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在现在的电路板上可以看到八个引脚都接到了Port A上</p><p>使用中断服务的步骤：</p><ol><li>配置好中断开关</li><li>配置好中断源</li><li>写好中断服务子程序</li><li>把中断子程序写进中断向量表</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>配置终端开关</li></ol><p>对于一个CPU来说中断服务除了配置标志位外还需要打开一个中断总开关，还要打开一个专用的中断开关</p><p>在PRIMASK中最后一个bit（PM Bit）负责全局中断总开关</p><p>CPSIE i 全局中断允许</p><p>SPSID i 全局中断禁用</p><p>对于特定中断，在NVIC模块中，前16个中断向量由ARM公司预留负责时钟复位等操作，为内核中断源。剩下的32个为外设中断源，这32个外设中断源中断向量编号为0-32号，由最终芯片设计厂商指定中断的使用，比如AD模块，定时器模块等。</p><p>NVIC地址段在Private Peri地址段，使用了5个寄存器，把PORT A的中端子开关打开。</p><p>NVIC_ISER这个寄存器是一个32位的寄存器，0-31位表示32个外部中断源的子开关，所以需要在中断向量表里某一个中断服务的子程序打开，就在这个ISER寄存器里对该服务对应的Bit置1。如果想关闭中断服务子程序中断开关则需要在NVIC_ICER中将对应的位置1，优先级设置同理。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>配置中断源</li></ol><p>在步骤一中配置了中断开关并打开了终端总开关</p><p>asm(&#34;CPSIE i&#34;);</p><p>打开了PORT A的中断子开关</p><p>NVIC_ISER | = 0x400000000;</p><p>配置PORTA_PCR1,设置其为下降沿触发，配置成IO用，设置终端电阻</p><ol><li>写中断服务子程序</li></ol><p>中断服务子程序可由C语言完成，使用汇编进行返回，堆栈弹出由NVIC自动完成。</p><p>中断服务子程序是由CPU硬件自动调用的，在中断服务子程序执行前后CPU自动进行了堆栈出入</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>示例中断服务子程序</p><ol><li>把中断服务写入中断向量表</li></ol><p>中断向量表是一段连续的存储空间，是一个由指针构成的表，每一个指针都指向函数的入口地址，每当中断发生时PC指针就会跳到相应的中断函数处，开始执行中断操作</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "自动驾驶", 
                    "tagLink": "https://api.zhihu.com/topics/19635352"
                }, 
                {
                    "tag": "汽车", 
                    "tagLink": "https://api.zhihu.com/topics/19551915"
                }, 
                {
                    "tag": "ARM", 
                    "tagLink": "https://api.zhihu.com/topics/19553303"
                }
            ], 
            "comments": [
                {
                    "userName": "列兵一号", 
                    "userLink": "https://www.zhihu.com/people/c5849f8798a2a1f4fee3a8e5e727562d", 
                    "content": "楼主那些图片都无法显示出来啊", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1058754631085129728"
}
