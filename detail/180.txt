{
    "title": "java笔记之 数据结构与算法篇", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/bu-ling-bu-ling-39-90", 
        "https://www.zhihu.com/people/mo-zhe-97-64", 
        "https://www.zhihu.com/people/tian-yu-13-12-47", 
        "https://www.zhihu.com/people/he-zheng-e", 
        "https://www.zhihu.com/people/caffrey-neo", 
        "https://www.zhihu.com/people/ye-xiao-1-61", 
        "https://www.zhihu.com/people/zhang-jia-kai-60-34"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/83467837", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "Java面试之 口述基数排序", 
            "content": "<h2><b>我的面试</b></h2><p>面试官：<b>说下基数排序 还有时间复杂度 使用场景</b></p><h3>我：</h3><p>适应于有大量（元素需要）排序（的场景）【括号里是我没说出来的】</p><p>首先创建一个桶的二维数组，（这时候面试官打断我，再三问我你确定是二维数组？你确定？你好好说？，把我给说蒙了，我就给他分析了一下），为什么是二维数组呢？首先要有N个桶，这已经是一个数组了，N是要排序的数组中 <b>最大值的</b> <b>数的 位数</b>，每个桶中还要有0到9个位置来存储个十百千位上的数【这里我说错了 其实不是的，被否定了一波脑子懵了】。。。然后越说越乱 时间复杂度也没说</p><h2>总结：</h2><p>面试官：<b>说下基数排序 还有时间复杂度 使用场景</b></p><h3>我：</h3><ol><li>首先创建一个int类型的二维数组int[10][N]，N是最大值的位数。</li><ol><li>时间复杂度是 <b>log以N为底的10的对数</b></li></ol><li>然后经过N次排序<b>，每次排序根据个位、十位、排位以此类推...依次将目标数组中的值放入桶中</b>(这个时候直接说桶，不要说二维数组，也别说怎么放，很麻烦)，<b>再从左往右，从下到上的取出放入原来的数组中，这个过程循环N次，就是升序排序</b>。反之就是降序(虽然我并没有做过基数排序的降序排序)。</li></ol><h3>意外：</h3><p>他要是让详细描述，那就说：我脑子没那么好使，不上机得话，说着说着就乱了！</p><p><b>实际上是怎么放进去的：</b></p><ol><li>第一遍，按照个位数字G  放到 桶[G][0++]这个位置。（然后取出）</li><li>第二遍，按照十位数字S  放到 桶[S][0++] 这个位置。（然后取出）</li><li>... ...</li></ol>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83460200", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其十·弗洛伊德算法【日后详细补充】", 
            "content": "<h2>介绍</h2><ol><li>和Dijkstra算法一样，弗洛伊德(Floyd)算法也是一种用于寻找给定的加权图中顶点间最短路径的算法。该算法名称以创始人之一、1978年图灵奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德命名</li><li>弗洛伊德算法(Floyd)计算图中各个顶点之间的最短路径</li><li>迪杰斯特拉算法用于计算图中某一个顶点到其他顶点的最短路径。</li><li>弗洛伊德算法 VS 迪杰斯特拉算法：迪杰斯特拉算法通过选定的被访问顶点，求出从出发访问顶点到其他顶点的最短路径；弗洛伊德算法中每一个顶点都是出发访问点，所以需要将每一个顶点看做被访问顶点，求出从每一个顶点到其他顶点的最短路径。</li></ol><h2>算法分析</h2><ol><li>设置顶点vi到顶点vk的最短路径已知为Lik，顶点vk到vj的最短路径已知为Lkj，顶点vi到vj的路径为Lij，则vi到vj的最短路径为：min((Lik+Lkj),Lij)，vk的取值为图中所有顶点，则可获得vi到vj的最短路径</li><li>至于vi到vk的最短路径Lik或者vk到vj的最短路径Lkj，是以同样的方式获得</li><li>弗洛伊德(Floyd)算法图解分析-举例说明</li></ol><h2>应用-最短路径</h2><ol><li>胜利乡有7个村庄(A, B, C, D, E, F, G)</li><li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li><li>问：如何计算出各村庄到 其它各村庄的最短距离? </li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-18f5a864bf62ed37ef979078c7298e00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"177\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"177\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic1.zhimg.com/v2-18f5a864bf62ed37ef979078c7298e00_b.jpg\"/></figure><p>代码实现</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FloydAlgorithm</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 测试看看图是否创建成功\n</span><span class=\"c1\"></span>        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span> <span class=\"o\">=</span> <span class=\"o\">{</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;D&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;E&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;F&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;G&#39;</span> <span class=\"o\">};</span>\n        <span class=\"c1\">//创建邻接矩阵\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">65535</span><span class=\"o\">;</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">2</span> <span class=\"o\">};</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">3</span> <span class=\"o\">};</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">};</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">3</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">};</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">4</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">4</span> <span class=\"o\">};</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">5</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">6</span> <span class=\"o\">};</span>\n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">6</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">0</span> <span class=\"o\">};</span>\n\n        <span class=\"c1\">//创建 Graph 对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Graph</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Graph</span><span class=\"o\">(</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"o\">,</span> <span class=\"n\">vertex</span><span class=\"o\">);</span>\n        <span class=\"c1\">//调用弗洛伊德算法\n</span><span class=\"c1\"></span>        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">floyd</span><span class=\"o\">();</span>\n        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">show</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 创建图\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Graph</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span><span class=\"o\">;</span> <span class=\"c1\">// 存放顶点的数组\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dis</span><span class=\"o\">;</span> <span class=\"c1\">// 保存，从各个顶点出发到其它顶点的距离，最后的结果，也是保留在该数组\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">pre</span><span class=\"o\">;</span><span class=\"c1\">// 保存到达目标顶点的前驱顶点\n</span><span class=\"c1\"></span>\n    <span class=\"c1\">// 构造器\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * \n</span><span class=\"cm\">     * @param length\n</span><span class=\"cm\">     *            大小\n</span><span class=\"cm\">     * @param matrix\n</span><span class=\"cm\">     *            邻接矩阵\n</span><span class=\"cm\">     * @param vertex\n</span><span class=\"cm\">     *            顶点数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">Graph</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">,</span> <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vertex</span> <span class=\"o\">=</span> <span class=\"n\">vertex</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">dis</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">pre</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">][</span><span class=\"n\">length</span><span class=\"o\">];</span>\n        <span class=\"c1\">// 对pre数组初始化, 注意存放的是前驱顶点的下标\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 显示pre数组和dis数组\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">show</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//为了显示便于阅读，我们优化一下输出\n</span><span class=\"c1\"></span>        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span> <span class=\"o\">=</span> <span class=\"o\">{</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;D&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;E&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;F&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;G&#39;</span> <span class=\"o\">};</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 先将pre数组输出的一行\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">vertex</span><span class=\"o\">[</span><span class=\"n\">pre</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n            <span class=\"c1\">// 输出dis数组的一行数据\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"s\">&#34;(&#34;</span><span class=\"o\">+</span><span class=\"n\">vertex</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]+</span><span class=\"s\">&#34;到&#34;</span><span class=\"o\">+</span><span class=\"n\">vertex</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"s\">&#34;的最短路径是&#34;</span> <span class=\"o\">+</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34;) &#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//弗洛伊德算法, 比较容易理解，而且容易实现\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">floyd</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"c1\">//变量保存距离\n</span><span class=\"c1\"></span>        <span class=\"c1\">//对中间顶点遍历， k 就是中间顶点的下标 [A, B, C, D, E, F, G] \n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span> <span class=\"c1\">// \n</span><span class=\"c1\"></span>            <span class=\"c1\">//从i顶点开始出发 [A, B, C, D, E, F, G]\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//到达j顶点 // [A, B, C, D, E, F, G]\n</span><span class=\"c1\"></span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span><span class=\"c1\">// =&gt; 求出从i 顶点出发，经过 k中间顶点，到达 j 顶点距离\n</span><span class=\"c1\"></span>                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">len</span> <span class=\"o\">&lt;</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"c1\">//如果len小于 dis[i][j]\n</span><span class=\"c1\"></span>                        <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">len</span><span class=\"o\">;</span><span class=\"c1\">//更新距离\n</span><span class=\"c1\"></span>                        <span class=\"n\">pre</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span><span class=\"c1\">//更新前驱顶点\n</span><span class=\"c1\"></span>                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "弗洛伊德", 
                    "tagLink": "https://api.zhihu.com/topics/19572590"
                }, 
                {
                    "tag": "遗传算法", 
                    "tagLink": "https://api.zhihu.com/topics/19555677"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83459113", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 2, 
            "title": "常用十大算法之 其九·迪杰斯特拉算法【日后详细补充】", 
            "content": "<h2>介绍</h2><p>迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。</p><h2>问题-最短路径</h2><ol><li>战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</li><li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li><li>问：如何计算出G村庄到 其它各个村庄的最短距离? </li><li>如果从其它点出发到各个点的最短距离又是多少?</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-18f5a864bf62ed37ef979078c7298e00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"177\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"177\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic1.zhimg.com/v2-18f5a864bf62ed37ef979078c7298e00_b.jpg\"/></figure><p>迪杰斯特拉-算法过程</p><blockquote> 设置出发顶点为v，顶点集合V{v1,v2,vi...}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di...}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)<br/> </blockquote><ol><li>从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径</li><li>更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)</li><li>重复执行两步骤，直到最短路径顶点为目标顶点即可结束</li></ol><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DijkstraAlgorithm</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span> <span class=\"o\">=</span> <span class=\"o\">{</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;D&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;E&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;F&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;G&#39;</span> <span class=\"o\">};</span>\n        <span class=\"c1\">//邻接矩阵\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">65535</span><span class=\"o\">;</span><span class=\"c1\">// 表示不可以连接\n</span><span class=\"c1\"></span>        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">7</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">2</span><span class=\"o\">};</span>  \n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">9</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">};</span>  \n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">7</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">8</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">};</span>  \n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">3</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">9</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">};</span>  \n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">4</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">8</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">};</span>  \n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">5</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">6</span><span class=\"o\">};</span>  \n        <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">6</span><span class=\"o\">]=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">6</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">};</span>\n        <span class=\"c1\">//创建 Graph对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Graph</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Graph</span><span class=\"o\">(</span><span class=\"n\">vertex</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"o\">);</span>\n        <span class=\"c1\">//测试, 看看图的邻接矩阵是否ok\n</span><span class=\"c1\"></span>        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">showGraph</span><span class=\"o\">();</span>\n        <span class=\"c1\">//测试迪杰斯特拉算法\n</span><span class=\"c1\"></span>        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">dsj</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">);</span><span class=\"c1\">//C\n</span><span class=\"c1\"></span>        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">showDijkstra</span><span class=\"o\">();</span>\n\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Graph</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span><span class=\"o\">;</span> <span class=\"c1\">// 顶点数组\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">;</span> <span class=\"c1\">// 邻接矩阵\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"n\">VisitedVertex</span> <span class=\"n\">vv</span><span class=\"o\">;</span> <span class=\"c1\">//已经访问的顶点的集合\n</span><span class=\"c1\"></span>\n    <span class=\"c1\">// 构造器\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"nf\">Graph</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vertex</span> <span class=\"o\">=</span> <span class=\"n\">vertex</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//显示结果\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">showDijkstra</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">show</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 显示图\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">showGraph</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">link</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">link</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//迪杰斯特拉算法实现\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * \n</span><span class=\"cm\">     * @param index 表示出发顶点对应的下标\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">dsj</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">vv</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">VisitedVertex</span><span class=\"o\">(</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">);</span>\n        <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">);</span><span class=\"c1\">//更新index顶点到周围顶点的距离和前驱顶点\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">updateArr</span><span class=\"o\">();</span><span class=\"c1\">// 选择并返回新的访问顶点\n</span><span class=\"c1\"></span>            <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">);</span> <span class=\"c1\">// 更新index顶点到周围顶点的距离和前驱顶点\n</span><span class=\"c1\"></span>        <span class=\"o\">}</span> \n    <span class=\"o\">}</span>\n\n\n\n    <span class=\"c1\">//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//根据遍历我们的邻接矩阵的  matrix[index]行\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和 \n</span><span class=\"c1\"></span>            <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">getDis</span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"c1\">// 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">len</span> <span class=\"o\">&lt;</span> <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">getDis</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">updatePre</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">);</span> <span class=\"c1\">//更新j顶点的前驱为index顶点\n</span><span class=\"c1\"></span>                <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"na\">updateDis</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">len</span><span class=\"o\">);</span> <span class=\"c1\">//更新出发顶点到j顶点的距离\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 已访问顶点集合\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">VisitedVertex</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">already_arr</span><span class=\"o\">;</span>\n    <span class=\"c1\">// 每个下标对应的值为前一个顶点下标, 会动态更新\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">pre_visited</span><span class=\"o\">;</span>\n    <span class=\"c1\">// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dis</span><span class=\"o\">;</span>\n\n    <span class=\"c1\">//构造器\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * \n</span><span class=\"cm\">     * @param length :表示顶点的个数 \n</span><span class=\"cm\">     * @param index: 出发顶点对应的下标, 比如G顶点，下标就是6\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">VisitedVertex</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">already_arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">pre_visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">dis</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">];</span>\n        <span class=\"c1\">//初始化 dis数组\n</span><span class=\"c1\"></span>        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">dis</span><span class=\"o\">,</span> <span class=\"n\">65535</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">already_arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"c1\">//设置出发顶点被访问过\n</span><span class=\"c1\"></span>        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">dis</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span><span class=\"c1\">//设置出发顶点的访问距离为0\n</span><span class=\"c1\"></span>\n    <span class=\"o\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能: 判断index顶点是否被访问过\n</span><span class=\"cm\">     * @param index\n</span><span class=\"cm\">     * @return 如果访问过，就返回true, 否则访问false\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">in</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">already_arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能: 更新出发顶点到index顶点的距离\n</span><span class=\"cm\">     * @param index\n</span><span class=\"cm\">     * @param len\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">updateDis</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能: 更新pre这个顶点的前驱顶点为index顶点\n</span><span class=\"cm\">     * @param pre\n</span><span class=\"cm\">     * @param index\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">updatePre</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">pre</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">pre_visited</span><span class=\"o\">[</span><span class=\"n\">pre</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能:返回出发顶点到index顶点的距离\n</span><span class=\"cm\">     * @param index\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getDis</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点)\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">updateArr</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">65535</span><span class=\"o\">,</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">already_arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">already_arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">dis</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//更新 index 顶点被访问过\n</span><span class=\"c1\"></span>        <span class=\"n\">already_arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">index</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//显示最后的结果\n</span><span class=\"c1\"></span>    <span class=\"c1\">//即将三个数组的情况输出\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">show</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;==========================&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//输出already_arr\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">already_arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n        <span class=\"c1\">//输出pre_visited\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">pre_visited</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n        <span class=\"c1\">//输出dis\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">dis</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n        <span class=\"c1\">//为了好看最后的最短距离，我们处理\n</span><span class=\"c1\"></span>        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertex</span> <span class=\"o\">=</span> <span class=\"o\">{</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;D&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;E&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;F&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;G&#39;</span> <span class=\"o\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">dis</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">65535</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">vertex</span><span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34;(&#34;</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"s\">&#34;) &#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;N &#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "图算法", 
                    "tagLink": "https://api.zhihu.com/topics/19617681"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83044971", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其八·克鲁斯卡尔算法", 
            "content": "<h2>介绍</h2><ol><li>克鲁斯卡尔(Kruskal)算法，<b>是用来求加权连通图的最小生成树的算法。</b></li><li>基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路</li><li>具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止</li></ol><h2>最佳应用-还是修路问题</h2><h2>问题</h2><p>有北京有新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通，各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里，问：<b>如何修路保证各个站点都能连通，并且总的修建公路总里程最短?</b> </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-898ca22881f619c6e99b349279524775_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"186\" class=\"content_image\" width=\"258\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;258&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"186\" class=\"content_image lazy\" width=\"258\" data-actualsrc=\"https://pic2.zhimg.com/v2-898ca22881f619c6e99b349279524775_b.jpg\"/></figure><h2><b>代码实现</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">KruskalCaseDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertexs</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;D&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;E&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;F&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;G&#39;</span><span class=\"o\">};</span>\n        <span class=\"c1\">//克鲁斯卡尔算法的邻接矩阵\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">matrix</span><span class=\"o\">[][]</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n                <span class=\"cm\">/*A*//*B*//*C*//*D*//*E*//*F*//*G*/</span>\n                <span class=\"cm\">/*A*/</span> <span class=\"o\">{</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">12</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">16</span><span class=\"o\">,</span> <span class=\"n\">14</span><span class=\"o\">},</span>\n                <span class=\"cm\">/*B*/</span> <span class=\"o\">{</span><span class=\"n\">12</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">},</span>\n                <span class=\"cm\">/*C*/</span> <span class=\"o\">{</span><span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">},</span>\n                <span class=\"cm\">/*D*/</span> <span class=\"o\">{</span><span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">},</span>\n                <span class=\"cm\">/*E*/</span> <span class=\"o\">{</span><span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">},</span>\n                <span class=\"cm\">/*F*/</span> <span class=\"o\">{</span><span class=\"n\">16</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">},</span>\n                <span class=\"cm\">/*G*/</span> <span class=\"o\">{</span><span class=\"n\">14</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">INF</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">}};</span>\n        <span class=\"c1\">//大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.\n</span><span class=\"c1\"></span>\n        <span class=\"c1\">//创建KruskalCase 对象实例\n</span><span class=\"c1\"></span>        <span class=\"n\">KruskalCase</span> <span class=\"n\">kruskalCase</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">KruskalCase</span><span class=\"o\">(</span><span class=\"n\">vertexs</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"o\">);</span>\n        <span class=\"c1\">//输出构建的\n</span><span class=\"c1\"></span>        <span class=\"n\">kruskalCase</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">();</span>\n        <span class=\"n\">kruskalCase</span><span class=\"o\">.</span><span class=\"na\">kruskal</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">KruskalCase</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 边的个数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">edgeNum</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 顶点数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertexs</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 邻接矩阵\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 使用 INF 表示两个顶点不能连通\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 初始化各项\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">KruskalCase</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">vertexs</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//初始化顶点数和边的个数\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">vlen</span> <span class=\"o\">=</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">//初始化顶点, 复制拷贝的方式\n</span><span class=\"c1\"></span>        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vertexs</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[</span><span class=\"n\">vlen</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vertexs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">vertexs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//初始化边, 使用的是复制拷贝的方式\n</span><span class=\"c1\"></span>        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">vlen</span><span class=\"o\">][</span><span class=\"n\">vlen</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vlen</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">vlen</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//统计边的条数\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vlen</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">vlen</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">INF</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">edgeNum</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">kruskal</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//表示最后结果数组的索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//用于保存&#34;已有最小生成树&#34; 中的每个顶点在最小生成树中的终点\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ends</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">edgeNum</span><span class=\"o\">];</span>\n        <span class=\"c1\">//创建结果数组, 保存最后的最小生成树\n</span><span class=\"c1\"></span>        <span class=\"n\">EData</span><span class=\"o\">[]</span> <span class=\"n\">rets</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">EData</span><span class=\"o\">[</span><span class=\"n\">edgeNum</span><span class=\"o\">];</span>\n\n        <span class=\"c1\">//获取图中 所有的边的集合 ， 一共有12边\n</span><span class=\"c1\"></span>        <span class=\"n\">EData</span><span class=\"o\">[]</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">getEdges</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;图的边的集合=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&#34; 共&#34;</span> <span class=\"o\">+</span> <span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//按照边的权值大小进行排序(从小到大)\n</span><span class=\"c1\"></span>        <span class=\"n\">sortEdges</span><span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">edgeNum</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//获取到第i条边的第一个顶点(起点)\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">getPosition</span><span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">start</span><span class=\"o\">);</span>\n            <span class=\"c1\">//获取到第i条边的第2个顶点\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">getPosition</span><span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">end</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">//获取p1这个顶点在已有最小生成树中的终点\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">getEnd</span><span class=\"o\">(</span><span class=\"n\">ends</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">);</span>\n            <span class=\"c1\">//获取p2这个顶点在已有最小生成树中的终点\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">getEnd</span><span class=\"o\">(</span><span class=\"n\">ends</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">//没有构成回路\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 设置m 在&#34;已有最小生成树&#34;中的终点 &lt;E,F&gt; [0,0,0,0,5,0,0,0,0,0,0,0]\n</span><span class=\"c1\"></span>                <span class=\"n\">ends</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n                <span class=\"c1\">//有一条边加入到rets数组\n</span><span class=\"c1\"></span>                <span class=\"n\">rets</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。\n</span><span class=\"c1\"></span>        <span class=\"c1\">//统计并打印 &#34;最小生成树&#34;, 输出  rets\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;最小生成树为&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">index</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">rets</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 打印邻接矩阵\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;邻接矩阵为: \\n&#34;</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">&#34;%12d&#34;</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能：对边进行排序处理, 冒泡排序\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param edges 边的集合\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">sortEdges</span><span class=\"o\">(</span><span class=\"n\">EData</span><span class=\"o\">[]</span> <span class=\"n\">edges</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">].</span><span class=\"na\">weight</span> <span class=\"o\">&gt;</span> <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">].</span><span class=\"na\">weight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">EData</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n                    <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param ch 顶点的值，比如&#39;A&#39;,&#39;B&#39;\n</span><span class=\"cm\">     * @return 返回ch顶点对应的下标，如果找不到，返回-1\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getPosition</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">vertexs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//找不到,返回-1\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组\n</span><span class=\"cm\">     * 是通过matrix 邻接矩阵来获取\n</span><span class=\"cm\">     * EData[] 形式 [[&#39;A&#39;,&#39;B&#39;, 12], [&#39;B&#39;,&#39;F&#39;,7], .....]\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">EData</span><span class=\"o\">[]</span> <span class=\"nf\">getEdges</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">EData</span><span class=\"o\">[]</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">EData</span><span class=\"o\">[</span><span class=\"n\">edgeNum</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">vertexs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">INF</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">edges</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">EData</span><span class=\"o\">(</span><span class=\"n\">vertexs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">vertexs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">edges</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成\n</span><span class=\"cm\">     * @param i    : 表示传入的顶点对应的下标\n</span><span class=\"cm\">     * @return 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getEnd</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ends</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">ends</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ends</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 创建一个类EData ，它的对象实例就表示一条边\n</span><span class=\"cm\"> * 边类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">EData</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 边的一个点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">char</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 边的另外一个点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">char</span> <span class=\"n\">end</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 边的权值\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"nf\">EData</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">char</span> <span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">start</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">end</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;EData [&lt;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"s\">&#34;, &#34;</span> <span class=\"o\">+</span> <span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"s\">&#34;&gt;= &#34;</span> <span class=\"o\">+</span> <span class=\"n\">weight</span> <span class=\"o\">+</span> <span class=\"s\">&#34;]&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "ACM 竞赛", 
                    "tagLink": "https://api.zhihu.com/topics/19644215"
                }, 
                {
                    "tag": "图论", 
                    "tagLink": "https://api.zhihu.com/topics/19582618"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82981415", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其七·普利姆算法【感觉和贪心算法差不多】", 
            "content": "<h2>介绍</h2><p>普利姆(Prim)算法求最小生成树，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的<b>极小连通子图</b> </p><h2>最佳应用-修路</h2><h2>问题</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1cbaffb6ba3c1ed5c69b22fadb398d6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"178\" class=\"content_image\" width=\"280\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;280&#39; height=&#39;178&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"178\" class=\"content_image lazy\" width=\"280\" data-actualsrc=\"https://pic4.zhimg.com/v2-1cbaffb6ba3c1ed5c69b22fadb398d6f_b.jpg\"/></figure><p>有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通，各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里，<b>如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</b></p><h2>思路</h2><ol><li>并标记A点，获取<b>A点</b>与其他直接<b>连接点</b>的距离，取最小的一个，并标记<b>连接点。</b></li><li>获取<b>连接点</b>与其他直接<b>连接连接点</b>的距离，取最小的一个，并标记<b>连接连接点</b>。</li><li><b>直到直接连接点数量为0</b>&amp;&amp;<b>所有点都被标记</b></li></ol><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> *普利姆算法 看起来和贪心算法差不多\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">普利姆算法</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//测试看看图是否创建ok\n</span><span class=\"c1\"></span>        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[]{</span><span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span><span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span><span class=\"sc\">&#39;C&#39;</span><span class=\"o\">,</span><span class=\"sc\">&#39;D&#39;</span><span class=\"o\">,</span><span class=\"sc\">&#39;E&#39;</span><span class=\"o\">,</span><span class=\"sc\">&#39;F&#39;</span><span class=\"o\">,</span><span class=\"sc\">&#39;G&#39;</span><span class=\"o\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">verxs</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"c1\">//邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"o\">[][]</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[][]{</span>\n                <span class=\"o\">{</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">7</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">2</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">9</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span><span class=\"n\">7</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">8</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">9</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">8</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">6</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">6</span><span class=\"o\">,</span><span class=\"n\">10000</span><span class=\"o\">},};</span>\n\n        <span class=\"c1\">//创建MGraph对象\n</span><span class=\"c1\"></span>        <span class=\"n\">MGraph</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MGraph</span><span class=\"o\">(</span><span class=\"n\">verxs</span><span class=\"o\">);</span>\n        <span class=\"c1\">//创建一个MinTree对象\n</span><span class=\"c1\"></span>        <span class=\"n\">MinTree</span> <span class=\"n\">minTree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MinTree</span><span class=\"o\">();</span>\n        <span class=\"n\">minTree</span><span class=\"o\">.</span><span class=\"na\">createGraph</span><span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"n\">verxs</span><span class=\"o\">,</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">weight</span><span class=\"o\">);</span>\n        <span class=\"c1\">//输出\n</span><span class=\"c1\"></span>        <span class=\"n\">minTree</span><span class=\"o\">.</span><span class=\"na\">showGraph</span><span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"o\">);</span>\n        <span class=\"c1\">//测试普利姆算法\n</span><span class=\"c1\"></span>        <span class=\"n\">minTree</span><span class=\"o\">.</span><span class=\"na\">prim</span><span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 创建最小生成树-&gt;村庄的图\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">MinTree</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 创建图的邻接矩阵\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param graph  图对象\n</span><span class=\"cm\">     * @param verxs  图对应的顶点个数\n</span><span class=\"cm\">     * @param data   图的各个顶点的值\n</span><span class=\"cm\">     * @param weight 图的邻接矩阵\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">createGraph</span><span class=\"o\">(</span><span class=\"n\">MGraph</span> <span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">verxs</span><span class=\"o\">,</span> <span class=\"kt\">char</span> <span class=\"n\">data</span><span class=\"o\">[],</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">weight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n        <span class=\"c1\">//创建图\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">verxs</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">verxs</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">weight</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 显示图的邻接矩阵\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">showGraph</span><span class=\"o\">(</span><span class=\"n\">MGraph</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">link</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">link</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 得到最小生成树\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param graph 图\n</span><span class=\"cm\">     * @param v     表示从图的第几个顶点开始生成&#39;A&#39;-&gt;0 &#39;B&#39;-&gt;1...\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">prim</span><span class=\"o\">(</span><span class=\"n\">MGraph</span> <span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//visited[] 标记结点(顶点)是否被访问过\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">verxs</span><span class=\"o\">];</span>\n\n        <span class=\"c1\">//把当前这个结点标记为1表示已访问，默认为0表示没有访问过\n</span><span class=\"c1\"></span>        <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//h1 和 h2 记录两个顶点的下标\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">h1</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">h2</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//将 minWeight 初始成一个大数，后面在遍历过程中，会被替换\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">minWeight</span> <span class=\"o\">=</span> <span class=\"n\">10000</span><span class=\"o\">;</span>\n        <span class=\"c1\">//因为有 graph.verxs顶点，普利姆算法结束后，有 graph.verxs-1边\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">verxs</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//这个是确定每一次生成的子图 ，和哪个结点的距离最近\n</span><span class=\"c1\"></span>            <span class=\"c1\">// i结点表示被访问过的结点\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">verxs</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//j结点表示还没有访问过的结点\n</span><span class=\"c1\"></span>                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">verxs</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">minWeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">//替换minWeight(寻找已经访问过的结点和未访问过的结点间的权值最小的边)\n</span><span class=\"c1\"></span>                        <span class=\"n\">minWeight</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                        <span class=\"n\">h1</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                        <span class=\"n\">h2</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//找到一条边是最小\n</span><span class=\"c1\"></span>            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;边&lt;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34;,&#34;</span> <span class=\"o\">+</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34;&gt; 权值:&#34;</span> <span class=\"o\">+</span> <span class=\"n\">minWeight</span><span class=\"o\">);</span>\n            <span class=\"c1\">//将当前这个结点标记为已经访问\n</span><span class=\"c1\"></span>            <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"c1\">//minWeight 重新设置为最大值 10000\n</span><span class=\"c1\"></span>            <span class=\"n\">minWeight</span> <span class=\"o\">=</span> <span class=\"n\">10000</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">MGraph</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 表示图的节点个数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">verxs</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存放结点数据\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存放边，就是我们的邻接矩阵\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">MGraph</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">verxs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">verxs</span> <span class=\"o\">=</span> <span class=\"n\">verxs</span><span class=\"o\">;</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[</span><span class=\"n\">verxs</span><span class=\"o\">];</span>\n        <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">verxs</span><span class=\"o\">][</span><span class=\"n\">verxs</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "算法导论（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/19580938"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82886899", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其六·马踏棋盘算法", 
            "content": "<h2>介绍</h2><ol><li>马踏棋盘算法也被称为骑士周游问题实际上是图的深度优先搜索(DFS)的应用 </li><li>将马随机放在国际象棋的8×8棋盘Board[0～7][0～7]的某个方格中，马按走棋规则(马走日字)进行移动。要求每个方格只进入一次，走遍棋盘上全部64个方格</li><li>游戏演示: <a href=\"https://link.zhihu.com/?target=http%3A//www.4399.com/flash/146267_2.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://</a><a href=\"https://link.zhihu.com/?target=http%3A//www.4399.com/flash/146267_2.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">www.4399.com/flash/146267_2.htm</a> </li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e46b5f0f8fbe634160858daf662ff737_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"340\" data-rawheight=\"341\" class=\"content_image\" width=\"340\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;340&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"340\" data-rawheight=\"341\" class=\"content_image lazy\" width=\"340\" data-actualsrc=\"https://pic4.zhimg.com/v2-e46b5f0f8fbe634160858daf662ff737_b.jpg\"/></figure><h2>代码实现</h2><h2>利用贪心算法优化版</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.awt.Point</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.ArrayList</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HorseChessboard</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;骑士周游算法，开始运行~~&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//测试骑士周游算法是否正确\n</span><span class=\"c1\"></span>        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">8</span><span class=\"o\">;</span>\n        <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">8</span><span class=\"o\">;</span>\n        <span class=\"c1\">//马儿初始位置的行，从1开始编号\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//马儿初始位置的列，从1开始编号\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//创建棋盘\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">chessboard</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">Y</span><span class=\"o\">];</span>\n        <span class=\"c1\">//初始值都是false\n</span><span class=\"c1\"></span>        <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"o\">];</span>\n        <span class=\"c1\">//测试一下耗时\n</span><span class=\"c1\"></span>        <span class=\"kt\">long</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">();</span>\n        <span class=\"n\">traversalChessboard</span><span class=\"o\">(</span><span class=\"n\">chessboard</span><span class=\"o\">,</span> <span class=\"n\">row</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">column</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"kt\">long</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;共耗时: &#34;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&#34; 毫秒&#34;</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//输出棋盘的最后情况\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">chessboard</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">+</span> <span class=\"s\">&#34;\\t&#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 棋盘的列数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">X</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 棋盘的行数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">Y</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 创建一个数组，标记棋盘的各个位置是否被访问过\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"o\">[]</span> <span class=\"n\">visited</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**使用一个属性，标记是否棋盘的所有位置都被访问*/</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 如果为true,表示成功\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"n\">finished</span><span class=\"o\">;</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 完成骑士周游问题的算法\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param chessboard 棋盘\n</span><span class=\"cm\">     * @param row        马儿当前的位置的行 从0开始\n</span><span class=\"cm\">     * @param column     马儿当前的位置的列  从0开始\n</span><span class=\"cm\">     * @param step       是第几步 ,初始位置就是第1步\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">traversalChessboard</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">chessboard</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">column</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">chessboard</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">][</span><span class=\"n\">column</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">step</span><span class=\"o\">;</span>\n        <span class=\"c1\">//row = 4 X = 8 column = 4 = 4 * 8 + 4 = 36\n</span><span class=\"c1\"></span>        <span class=\"c1\">//标记该位置已经访问\n</span><span class=\"c1\"></span>        <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">row</span> <span class=\"o\">*</span> <span class=\"n\">X</span> <span class=\"o\">+</span> <span class=\"n\">column</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"c1\">//获取当前位置可以走的下一个位置的集合\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;</span> <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">column</span><span class=\"o\">,</span> <span class=\"n\">row</span><span class=\"o\">));</span>\n        <span class=\"c1\">//对ps进行排序,排序的规则就是对ps的所有的Point对象的下一步的位置的数目，进行非递减排序\n</span><span class=\"c1\"></span>        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">ps</span><span class=\"o\">);</span>\n        <span class=\"c1\">//遍历 ps\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//取出下一个可以走的位置\n</span><span class=\"c1\"></span>            <span class=\"n\">Point</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n            <span class=\"c1\">//判断该点是否已经访问过还没有访问过\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">*</span> <span class=\"n\">X</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">traversalChessboard</span><span class=\"o\">(</span><span class=\"n\">chessboard</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿是否完成了任务，使用   step 和应该走的步数比较 ，\n</span><span class=\"c1\"></span>        <span class=\"c1\">//如果没有达到数量，则表示没有完成任务，将整个棋盘置0\n</span><span class=\"c1\"></span>        <span class=\"c1\">//说明: step &lt; X * Y  成立的情况有两种\n</span><span class=\"c1\"></span>        <span class=\"c1\">//1. 棋盘到目前位置,仍然没有走完\n</span><span class=\"c1\"></span>        <span class=\"c1\">//2. 棋盘处于一个回溯过程\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span> <span class=\"o\">*</span> <span class=\"n\">Y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">finished</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">chessboard</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">][</span><span class=\"n\">column</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">row</span> <span class=\"o\">*</span> <span class=\"n\">X</span> <span class=\"o\">+</span> <span class=\"n\">column</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能： 根据当前位置(Point对象)，计算马儿还能走哪些位置(Point)，并放入到一个集合中(ArrayList), 最多有8个位置\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param curPoint\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;</span> <span class=\"nf\">next</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">curPoint</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//创建一个ArrayList\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;</span> <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;();</span>\n        <span class=\"c1\">//创建一个Point\n</span><span class=\"c1\"></span>        <span class=\"n\">Point</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">();</span>\n        <span class=\"c1\">//表示马儿可以走5这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走6这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走7这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走0这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走1这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走2这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走3这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//判断马儿可以走4这个位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">=</span> <span class=\"n\">curPoint</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Point</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ps</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 根据当前这个一步的所有的下一步的选择位置，进行非递减排序, 减少回溯的次数\n</span><span class=\"cm\">     */</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">((</span><span class=\"n\">o1</span><span class=\"o\">,</span> <span class=\"n\">o2</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//获取到o1的下一步的所有位置个数\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">count1</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">(</span><span class=\"n\">o1</span><span class=\"o\">).</span><span class=\"na\">size</span><span class=\"o\">();</span>\n            <span class=\"c1\">//获取到o2的下一步的所有位置个数\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">count2</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">(</span><span class=\"n\">o2</span><span class=\"o\">).</span><span class=\"na\">size</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count1</span> <span class=\"o\">&lt;</span> <span class=\"n\">count2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count1</span> <span class=\"o\">==</span> <span class=\"n\">count2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "算法设计", 
                    "tagLink": "https://api.zhihu.com/topics/19615875"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82674251", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其五·贪心算法（电台选择）", 
            "content": "<h2>介绍</h2><p>1)贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</p><p>2)贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</p><h2>最佳应用-集合覆盖</h2><h2>要求</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3db6d3730ac4e75a30ae3a435e63f599_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1290\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"1290\" data-original=\"https://pic2.zhimg.com/v2-3db6d3730ac4e75a30ae3a435e63f599_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1290&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1290\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1290\" data-original=\"https://pic2.zhimg.com/v2-3db6d3730ac4e75a30ae3a435e63f599_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3db6d3730ac4e75a30ae3a435e63f599_b.jpg\"/></figure><h2>思路分析</h2><p>目前并没有算法可以快速计算得到准备的值， 使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:</p><p>1)遍历所有的广播电台, 找到一个覆盖了最多未覆盖的地区的电台(此电台可能包含一些已覆盖的地区，但没有关系） </p><p>2)将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。</p><p>3)重复第1步直到覆盖了全部的地区</p><h2>注意事项</h2><p>(1)贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</p><p>(2)比如上题的算法选出的是K1, K2, K3, K5，符合覆盖了全部的地区</p><p>(3)但是我们发现 K2, K3,K4,K5 也可以覆盖全部地区，如果K2 的使用成本低于K1,那么我们上题的 K1, K2, K3, K5 虽然是满足条件，但是并不是最优的.</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.*</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">贪心算法</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">InterruptedException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//创建广播电台,放入到Map\n</span><span class=\"c1\"></span>        <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">broadcasts</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;&gt;();</span>\n        <span class=\"c1\">//将各个电台放入到broadcasts\n</span><span class=\"c1\"></span>        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">hashSet1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">hashSet1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;北京&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;上海&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;天津&#34;</span><span class=\"o\">);</span>\n\n        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">hashSet2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">hashSet2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;广州&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;北京&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;深圳&#34;</span><span class=\"o\">);</span>\n\n        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">hashSet3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">hashSet3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;成都&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;上海&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet3</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;杭州&#34;</span><span class=\"o\">);</span>\n\n\n        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">hashSet4</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">hashSet4</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;上海&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet4</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;天津&#34;</span><span class=\"o\">);</span>\n\n        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">hashSet5</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">hashSet5</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;杭州&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">hashSet5</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;大连&#34;</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//加入到map\n</span><span class=\"c1\"></span>        <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;K1&#34;</span><span class=\"o\">,</span> <span class=\"n\">hashSet1</span><span class=\"o\">);</span>\n        <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;K2&#34;</span><span class=\"o\">,</span> <span class=\"n\">hashSet2</span><span class=\"o\">);</span>\n        <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;K3&#34;</span><span class=\"o\">,</span> <span class=\"n\">hashSet3</span><span class=\"o\">);</span>\n        <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;K4&#34;</span><span class=\"o\">,</span> <span class=\"n\">hashSet4</span><span class=\"o\">);</span>\n        <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;K5&#34;</span><span class=\"o\">,</span> <span class=\"n\">hashSet5</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//allAreas 存放所有的地区\n</span><span class=\"c1\"></span>        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;北京&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;上海&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;天津&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;广州&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;深圳&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;成都&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;杭州&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;大连&#34;</span><span class=\"o\">);</span>\n<span class=\"c1\">//-------------------------------------👇👇👇 是 正 文 👇👇👇------------------------------------\n</span><span class=\"c1\"></span>\n        <span class=\"c1\">//创建ArrayList, 存放选择的电台集合\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">selects</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n\n        <span class=\"c1\">//定义一个临时的集合， 在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集\n</span><span class=\"c1\"></span>        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">tempSet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"n\">tempSet</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//遍历出每一个广播台以及地址\n</span><span class=\"c1\"></span>                <span class=\"n\">String</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">();</span>\n                <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">();</span>\n\n                <span class=\"c1\">//求出vale和地区Set的最大的交集，把最大值的交集取出来[&lt;---这句话是贪心的核心思想]\n</span><span class=\"c1\"></span>                <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">intersection</span> <span class=\"o\">=</span> <span class=\"n\">求交集</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">address</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">intersection</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">tempSet</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"o\">;</span>\n                    <span class=\"n\">tempSet</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">intersection</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">tempSet</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">element</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//for循环结束 将广播的名字添加到集合中。\n</span><span class=\"c1\"></span>            <span class=\"n\">selects</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n            <span class=\"c1\">//循环删除 并移除地区Set中包含的元素\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">tempSet</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">boolean</span> <span class=\"n\">remove</span> <span class=\"o\">=</span> <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">element</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//以及电台Map的元素\n</span><span class=\"c1\"></span>            <span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//得到结果\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">selects</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 两个集合求交集 遍历元素少的集合\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">求交集</span><span class=\"o\">(</span><span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">set_1</span><span class=\"o\">,</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">set_2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">set_new</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n        <span class=\"c1\">//假设list_2.size()&lt;list_1.size()\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">elt</span> <span class=\"o\">:</span> <span class=\"n\">set_2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set_1</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">elt</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">set_new</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">elt</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">set_new</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82657950", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其四·KMP算法（字符串查找）", 
            "content": "<h2>介绍</h2><blockquote>1)KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法 <br/>2)Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法. <br/>3)KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间<br/> 4)参考资料：<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/ZuoAndFutur</span><span class=\"invisible\">eGirl/p/9028287.html</span><span class=\"ellipsis\"></span></a></blockquote><h2>最佳应用-字符串匹配问题</h2><h2>问题</h2><p>有一个字符串 str1= &#34;BBC ABCDAB ABCDABCDABDE&#34;，和一个子串 str2=&#34;ABCDABD&#34; 现在要判断 str1 是否含有 str2, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1</p><h2>要求</h2><p>使用KMP算法完成判断，不能使用简单的暴力匹配算法.</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">KMP算法</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"s\">&#34;BBC ABCDAB ABCDABCDABDE&#34;</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">str2</span> <span class=\"o\">=</span> <span class=\"s\">&#34;ABCDABD&#34;</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">kmpNext</span><span class=\"o\">(</span><span class=\"s\">&#34;ABCDABD&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;next=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">kmpSearch</span><span class=\"o\">(</span><span class=\"n\">str1</span><span class=\"o\">,</span> <span class=\"n\">str2</span><span class=\"o\">,</span> <span class=\"n\">next</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 获取部分匹配值表\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param target 目标子串\n</span><span class=\"cm\">     * @return 部分匹配值表\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">kmpNext</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"n\">target</span> <span class=\"o\">||</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//创建匹配值表\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n        <span class=\"c1\">//target&gt;=1，第一个位置肯定是0\n</span><span class=\"c1\"></span>        <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">next</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">//这里 不符合条件就重置J\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//直到J负荷条件 j++\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * KMP搜索算法\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param str1 源字符串\n</span><span class=\"cm\">     * @param str2 子串\n</span><span class=\"cm\">     * @param next 部分匹配表, 是子串对应的部分匹配表\n</span><span class=\"cm\">     * @return 如果是-1就是没有匹配到，否则返回第一个匹配的位置\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">kmpSearch</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">str2</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">str2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">str2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//找到了 // j = 3 i\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "kmp算法", 
                    "tagLink": "https://api.zhihu.com/topics/20659714"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82558120", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其三·动态规划（背包案例）", 
            "content": "<h2>介绍</h2><p>1)动态规划(Dynamic Programming)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法 2)动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。 3)与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。 ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 ) 4)动态规划可以通过填表的方式来逐步推进，得到最优解.</p><h2>最佳实践-背包问题</h2><h2>问题</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d09d197a12948b3bb5d91251157ff3c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"932\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"932\" data-original=\"https://pic1.zhimg.com/v2-d09d197a12948b3bb5d91251157ff3c8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;932&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"932\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"932\" data-original=\"https://pic1.zhimg.com/v2-d09d197a12948b3bb5d91251157ff3c8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d09d197a12948b3bb5d91251157ff3c8_b.jpg\"/></figure><h2>思路分析</h2><p>1.先根据容量判断是否加入背包 2.判断是否有剩余空间，有则添加其他，没有则返回价值【用二维数组可以解决】 3.根据最高价值来遍历组合，得到所有可能的组合</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">动态规划</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//物品的重量\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">};</span>\n        <span class=\"c1\">//物品的价值 这里val[i] 就是前面讲的v[i]\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">1500</span><span class=\"o\">,</span> <span class=\"n\">3000</span><span class=\"o\">,</span> <span class=\"n\">2000</span><span class=\"o\">};</span>\n        <span class=\"c1\">//背包的容量\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">4</span><span class=\"o\">;</span>\n        <span class=\"c1\">//物品的个数\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n\n\n        <span class=\"c1\">//创建二维数组，\n</span><span class=\"c1\"></span>        <span class=\"c1\">//v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n        <span class=\"c1\">//为了记录放入商品的情况，我们定一个二维数组\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">m</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">];</span>\n<span class=\"c1\">//---------------------------------------------------------------------\n</span><span class=\"c1\"></span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//公式\n</span><span class=\"c1\">//                if(w[i-1]&gt;j){\n</span><span class=\"c1\">//                    v[i][j]=v[i-1][j];\n</span><span class=\"c1\">//                }else {\n</span><span class=\"c1\">//                    v[i][j]= Math.max(v[i-1][j],val[i-1]+v[i-1][j-w[i-1]]);\n</span><span class=\"c1\">//                }\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">]&gt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]=</span><span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">val</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]])</span> <span class=\"o\">{</span>\n                        <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]];</span>\n                        <span class=\"c1\">//把当前的情况记录到path\n</span><span class=\"c1\"></span>                        <span class=\"n\">path</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n<span class=\"c1\">//---------------------------------------------------------------------\n</span><span class=\"c1\"></span>        <span class=\"c1\">//输出一下v 看看目前的情况\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//行的最大下标\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//列的最大下标\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//从path的最后开始找\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">&#34;第%d个商品放入到背包\\n&#34;</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"n\">j</span> <span class=\"o\">-=</span> <span class=\"n\">w</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "动态规划", 
                    "tagLink": "https://api.zhihu.com/topics/19660018"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82370112", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其二·分治算法（汉诺塔案例）", 
            "content": "<h2>介绍</h2><blockquote> 1) 分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)…… 2) 分治算法可以求解的一些经典问题<br/> •二分搜索 <br/>•大整数乘法<br/> •棋盘覆盖 <br/>•合并排序<br/> •快速排序<br/> •线性时间选择 <br/>•最接近点对问题 <br/>•循环赛日程表 <br/><b>•汉诺塔</b></blockquote><h2>基本步骤</h2><blockquote><b>分治法在每一层递归上都有三个步骤：</b> 1) 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题 2) 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题 3) 合并：将各个子问题的解合并为原问题的解。<br/> </blockquote><h2>算法设计模式</h2><blockquote> if |P|≤n0    then return(ADHOC(P)) //将P分解为较小的子问题 P1 ,P2 ,…,Pk for i←1 to k do yi ← Divide-and-Conquer(Pi)   递归解决Pi T ← MERGE(y1,y2,…,yk)   合并子问题 return(T)<br/> </blockquote><p>其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1 ,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p><h2>分治算法最佳实践-汉诺塔</h2><blockquote><b>汉诺塔的传说</b> 汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。<br/> </blockquote><h2>思路分析</h2><p>如果是有一个盘 n = 1， A-&gt;C 如果我们有 n &gt;= 2 情况，我们总是可以看做是两个盘 1.最下边的盘 2. 上面的盘 先把 最上面的盘 A-&gt;B 把最下边的盘 A-&gt;C 把B塔的所有盘 从 B-&gt;C</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">分治算法</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">hanoiTower</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"o\">,</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">hanoiTower</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kt\">char</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">char</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//如果只移动一个\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">==</span><span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"c1\">//A移动到C\n</span><span class=\"c1\"></span>            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;第&#34;</span> <span class=\"o\">+</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"s\">&#34;个盘从 &#34;</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"s\">&#34;-&gt;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果移动多个\n</span><span class=\"c1\"></span>            <span class=\"c1\">//a先移动到b\n</span><span class=\"c1\"></span>            <span class=\"n\">hanoiTower</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;第&#34;</span> <span class=\"o\">+</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"s\">&#34;个盘从 &#34;</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"s\">&#34;-&gt;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">);</span>\n            <span class=\"c1\">//然后移动到c\n</span><span class=\"c1\"></span>            <span class=\"n\">hanoiTower</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82311413", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "常用十大算法之 其一·二分查找（非递归）", 
            "content": "<h2>介绍</h2><blockquote> 1）二分查找法只适用于从有序的数列中进行查找(比如数字和字母等)，将数列排序后再进行查找 2）二分查找法的运行时间为对数时间O(㏒₂n) ，即查找到需要的目标位置最多只需要㏒₂n步，假设从[0,99]的队列(100个数，即n=100)中寻到目标数30，则需要查找步数为㏒₂100 , 即最多需要查找7次( 2^6 &lt; 100 &lt; 2^7)<br/> </blockquote><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.algorithm</span><span class=\"o\">;</span>\n\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">二分查找算法</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"n\">11</span><span class=\"o\">,</span> <span class=\"n\">67</span><span class=\"o\">,</span> <span class=\"n\">100</span><span class=\"o\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">100</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;index=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 二分查找算法 非递归算法\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr    查询数组\n</span><span class=\"cm\">     * @param target 目标数值\n</span><span class=\"cm\">     * @return 目标数值的下标(若有)\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">binarySearch</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//定义左右边界\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//mid是中间的数会变化，所以定义在循环体\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">+</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n            <span class=\"c1\">//目标在左边 右边界左移\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span>      <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span>  <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n            <span class=\"c1\">//找到目标\n</span><span class=\"c1\"></span>            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n            <span class=\"c1\">//目标在右边 左边界右移\n</span><span class=\"c1\"></span>            <span class=\"k\">else</span>                         <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81695315", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 多路树(介绍)", 
            "content": "<h2>概念解释</h2><p><b>多叉树：</b></p><p>1)在二叉树中，每个节点有数据项，最多有两个子节点。如果允许每个节点可以有更多的数据项和更多的子节点，就是多叉树（multiway tree） </p><p>2)后面我们讲解的2-3树，2-3-4树就是多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化。 </p><p>3)举例说明(下面2-3树就是一颗多叉树)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1137405a7239c49bf886f2212b2c4ef4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic1.zhimg.com/v2-1137405a7239c49bf886f2212b2c4ef4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;777&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"777\" data-original=\"https://pic1.zhimg.com/v2-1137405a7239c49bf886f2212b2c4ef4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1137405a7239c49bf886f2212b2c4ef4_b.jpg\"/></figure><p><b>B树:</b></p><p>B即Balanced，平衡的意思 ,B树通过重新组织节点，降低树的高度，并且减少i/o读写次数来提升效率。【写作b-tree、b树、b-树和b+树两码事】</p><p>1)如图B树通过重新组织节点， 降低了树的高度. </p><p>2)文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页(页得大小通常为4k)，这样每个节点只需要一次I/O就可以完全载入 </p><p>3)将树的度M设置为1024，在600亿个元素中最多只需要4次I/O操作就可以读取到想要的元素, B树(B+)广泛应用于文件存储系统以及数据库系统中</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-edd6d1276c2c22232250f7040dda7c5d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic2.zhimg.com/v2-edd6d1276c2c22232250f7040dda7c5d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;830&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"830\" data-original=\"https://pic2.zhimg.com/v2-edd6d1276c2c22232250f7040dda7c5d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-edd6d1276c2c22232250f7040dda7c5d_b.jpg\"/></figure><p><b>2-3树：</b></p><p>1)2-3树的所有叶子节点都在同一层.(只要是B树都满足这个条件) </p><p>2)有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点. </p><p>3)有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点.</p><p>4)2-3树是由二节点和三节点构成的树。</p><p><b>除了23树，还有234树等，概念和23树类似，也是一种B树。 如图:</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ce8ed2e3c7a8ba985c4df13b1db016e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"229\" class=\"origin_image zh-lightbox-thumb\" width=\"648\" data-original=\"https://pic4.zhimg.com/v2-ce8ed2e3c7a8ba985c4df13b1db016e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;648&#39; height=&#39;229&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"229\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"648\" data-original=\"https://pic4.zhimg.com/v2-ce8ed2e3c7a8ba985c4df13b1db016e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ce8ed2e3c7a8ba985c4df13b1db016e7_b.jpg\"/></figure><h2><b>B树</b></h2><p><b>1)B树的阶：</b>节点的最多子节点个数。比如2-3树的阶是3，2-3-4树的阶是4 </p><p><b>2)B-树的搜索</b>，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点。 </p><p><b>3)关键字</b>集合分布在整颗树中, 即叶子节点和非叶子节点都存放数据。 </p><p><b>4)搜索</b>有可能在非叶子结点结束。 </p><p><b>5)其搜索性能</b>等价于在关键字全集内做一次二分查找</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3ed9f4da6d200e29f66456951ed5aa5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"632\" data-original=\"https://pic1.zhimg.com/v2-3ed9f4da6d200e29f66456951ed5aa5c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;632&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"632\" data-original=\"https://pic1.zhimg.com/v2-3ed9f4da6d200e29f66456951ed5aa5c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3ed9f4da6d200e29f66456951ed5aa5c_b.jpg\"/></figure><h2>B+树</h2><p><b>1)</b>B+树的<b>搜索</b>与B树也基本相同，区别是B+树只有达到叶子结点才命中（B树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找。</p><p><b>2)</b>所有<b>关键字</b>都出现在叶子结点的链表中（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字(数据)恰好是有序的。 </p><p><b>3)</b>不可能在非叶子结点<b>命中</b>。</p><p><b>4)<i>*非叶子结点</i>*相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层。 </b></p><p><b>5)</b>更<b>适合文件索引系统</b>。 </p><p><b>6)</b>B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-167a846e2211c22fb5078071704d0500_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"474\" data-original=\"https://pic1.zhimg.com/v2-167a846e2211c22fb5078071704d0500_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;474&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"474\" data-original=\"https://pic1.zhimg.com/v2-167a846e2211c22fb5078071704d0500_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-167a846e2211c22fb5078071704d0500_b.jpg\"/></figure><h2>B*树</h2><p>1)B*树定义了非叶子结点关键字个数至少为(2÷3)×M，即块的最低使用率为2/3，而B+树的块的最低使用率为B+树的1÷2。</p><p>2)从第1个特点我们可以看出，B*树分配新结点的概率比B+树要低，空间使用率更高</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-81230ca914a687936edb10bb89e3d8ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic2.zhimg.com/v2-81230ca914a687936edb10bb89e3d8ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic2.zhimg.com/v2-81230ca914a687936edb10bb89e3d8ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-81230ca914a687936edb10bb89e3d8ed_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "B/B+树", 
                    "tagLink": "https://api.zhihu.com/topics/20091609"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81560727", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 二叉树-平衡二叉树(VAL树)", 
            "content": "<h2>简介</h2><blockquote> 1)平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以保证查询效率较高。<br/> 2)具有以下特点：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25BA%25A2%25E9%25BB%2591%25E6%25A0%2591/2413209\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">红黑树</a>、<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/AVL/7543015\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AVL</a>、<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259B%25BF%25E7%25BD%25AA%25E7%25BE%258A%25E6%25A0%2591/13859070\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">替罪羊树</a>、<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/Treap\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Treap</a>、<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E4%25BC%25B8%25E5%25B1%2595%25E6%25A0%2591/7003945\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">伸展树</a>等。<br/> <b>3)AVL树(二叉平衡术)是BST树(二叉排序树)的升级版，增加了节点的旋转动能</b><br/> </blockquote><h2>难点</h2><blockquote> 添加之后，平衡时的判断，逻辑很复杂，考虑的情况很多。<br/> 删除时，如何删除，逻辑很复杂，需要考虑很多情况。【这点和平衡二叉树一样，没变化】<br/>至于图和旋转：<b>画图理解</b>，很简单，<b>代码中有文字顺序</b><br/> </blockquote><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.tree.avl</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AVLTreeDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"n\">11</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"c1\">//创建一个 AVLTree对象\n</span><span class=\"c1\"></span>        <span class=\"n\">AVLTree</span> <span class=\"n\">avlTree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">AVLTree</span><span class=\"o\">();</span>\n        <span class=\"c1\">//添加结点\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Node</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"n\">avlTree</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//遍历\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;中序遍历&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">avlTree</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;在平衡处理~~&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;树的高度=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">avlTree</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">());</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;树的左子树高度=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">avlTree</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">getLeftHight</span><span class=\"o\">());</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;树的右子树高度=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">avlTree</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">getRightHight</span><span class=\"o\">());</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;当前的根结点=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">avlTree</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">AVLTree</span> <span class=\"o\">{</span>\n    <span class=\"n\">Node</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 添加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;node参数不合法&#34;</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">infixOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;[ null ]&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找node节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找node的父节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">searchParent</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 删除node节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">deleteNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果没有找到 直接return\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//如果我们发现当前这颗二叉排序树只有一个结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//去找到targetNode的父结点\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"c1\">//如果要删除的结点是叶子结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//判断targetNode 是父结点的左子结点，还是右子结点\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//是左子结点\n</span><span class=\"c1\"></span>                    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//是右子结点\n</span><span class=\"c1\"></span>                    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//删除有两颗子树的节点\n</span><span class=\"c1\"></span>                <span class=\"kt\">int</span> <span class=\"n\">minVal</span> <span class=\"o\">=</span> <span class=\"n\">delRightTreeMin</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n                <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">minVal</span><span class=\"o\">;</span>\n\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">// 删除只有一颗子树的结点\n</span><span class=\"c1\"></span>                <span class=\"c1\">//如果要删除的结点有左子结点\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">//如果 targetNode 是 parent 的左子结点\n</span><span class=\"c1\"></span>                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//  targetNode 是 parent 的右子结点\n</span><span class=\"c1\"></span>                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//如果要删除的结点有右子结点\n</span><span class=\"c1\"></span>                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">//如果 targetNode 是 parent 的左子结点\n</span><span class=\"c1\"></span>                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                            <span class=\"c1\">//如果 targetNode 是 parent 的右子结点\n</span><span class=\"c1\"></span>                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param node 传入的结点(当做二叉排序树的根结点)\n</span><span class=\"cm\">     * @return 返回的 以node 为根结点的二叉排序树的最小结点的值\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">delRightTreeMin</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Node</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"c1\">//循环的查找左子节点，就会找到最小值\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//这时 target就指向了最小结点\n</span><span class=\"c1\"></span>        <span class=\"c1\">//删除最小结点\n</span><span class=\"c1\"></span>        <span class=\"n\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 节点值\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 左子树\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">Node</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 右子树\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">Node</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Node</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 获取左边节点高度\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getLeftHight</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 获取右边节点高度\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getRightHight</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @return 当前节点的高度\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">0</span> <span class=\"o\">:</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">(),</span> <span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">0</span> <span class=\"o\">:</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">())</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 左旋转方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">leftRotate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//创建新的结点，以当前节点为新节点的根结点\n</span><span class=\"c1\"></span>        <span class=\"n\">Node</span> <span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"c1\">//把新的结点的左子树设置成当前结点的左子树\n</span><span class=\"c1\"></span>        <span class=\"n\">newNode</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把新的结点的右子树设置成当前结点的右子树的左子树\n</span><span class=\"c1\"></span>        <span class=\"n\">newNode</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把当前结点的值替换成右子结点的值\n</span><span class=\"c1\"></span>        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把当前结点的右子树设置成当前结点右子树的右子树\n</span><span class=\"c1\"></span>        <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把当前结点的左子树(左子结点)设置成新的结点\n</span><span class=\"c1\"></span>        <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 右旋转方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">rightRotate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//创建新的结点，以当前节点为新节点的根结点\n</span><span class=\"c1\"></span>        <span class=\"n\">Node</span> <span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"c1\">//把新的结点的右子树设置成当前结点的右子树\n</span><span class=\"c1\"></span>        <span class=\"n\">newNode</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把新的结点的右子树设置成当前结点的左子树的右子树\n</span><span class=\"c1\"></span>        <span class=\"n\">newNode</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把当前结点的值替换成左子结点的值\n</span><span class=\"c1\"></span>        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把当前结点的左子树设置成当前结点左子树的左子树\n</span><span class=\"c1\"></span>        <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"c1\">//把当前结点的右子树(右子结点)设置成新的结点\n</span><span class=\"c1\"></span>        <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 添加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node 要添加的节点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果传来的节点值&lt;原来的节点值就往左边放\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//如果原节点的左边为空就填值\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//否则继续比较\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//否则就往右边放\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//如果原节点的右边为空就填值\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//否则继续比较\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//添加结束之后，开始进进行平衡判断\n</span><span class=\"c1\"></span>        <span class=\"c1\">//如果: (右子树的高度-左子树的高度) &gt; 1 , 左旋转\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">getRightHight</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">getLeftHight</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果它的右子树的左子树的高度大于它的右子树的右子树的高度【双旋转】\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">getLeftHight</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">getRightHight</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//先对右子结点进行右旋转\n</span><span class=\"c1\"></span>                <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">rightRotate</span><span class=\"o\">();</span>\n                <span class=\"c1\">//然后在对当前结点进行左旋转\n</span><span class=\"c1\"></span>                <span class=\"n\">leftRotate</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//直接进行左旋转即可\n</span><span class=\"c1\"></span>                <span class=\"n\">leftRotate</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//如果: (左子树的高度-右子树的高度) &gt; 1 , 右旋转\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">getLeftHight</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">getRightHight</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果它的左子树的右子树的高度大于它的左子树的左子树的高度【双旋转】\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">getRightHight</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">getLeftHight</span><span class=\"o\">()</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//先对左子结点进行左旋转\n</span><span class=\"c1\"></span>                <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">leftRotate</span><span class=\"o\">();</span>\n                <span class=\"c1\">//然后在对当前结点进行右旋转\n</span><span class=\"c1\"></span>                <span class=\"n\">rightRotate</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//直接进行右旋转即可\n</span><span class=\"c1\"></span>                <span class=\"n\">rightRotate</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">infixOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找有无该节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找当node的父节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">searchParent</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//如果当前结点就是要删除的结点的父结点，就返回\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//向左子树递归查找\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&gt;=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//向右子树递归查找\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 没有找到父结点\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序查找Node\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Node</span> <span class=\"nf\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Node</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;Node{&#34;</span> <span class=\"o\">+</span>\n                <span class=\"s\">&#34;value=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">value</span> <span class=\"o\">+</span>\n                <span class=\"sc\">&#39;}&#39;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81414666", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 二叉树-二叉排序树", 
            "content": "<h2>为何使用二叉排序树</h2><p>因为排序快，增删快，优于数组链表</p><h2>代码实现</h2><p><b>功能：</b>添加 遍历 查找 <b>删除</b>【删除很复杂】</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.tree.bst</span><span class=\"o\">;</span>\n\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BinarySortTreeDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"n\">12</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">};</span>\n        <span class=\"n\">BinarySortTree</span> <span class=\"n\">binarySortTree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BinarySortTree</span><span class=\"o\">();</span>\n        <span class=\"c1\">//循环的添加结点到二叉排序树\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]));</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//中序遍历二叉排序树\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;中序遍历二叉排序树~&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span> <span class=\"c1\">// 1, 3, 5, 7, 9, 10, 12\n</span><span class=\"c1\"></span>\n        <span class=\"c1\">//测试一下删除叶子结点\n</span><span class=\"c1\"></span>\n\n        <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">12</span><span class=\"o\">);</span>\n\n\n        <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"o\">);</span>\n        <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">9</span><span class=\"o\">);</span>\n\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;root=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">);</span>\n\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;删除结点后&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;root=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">binarySortTree</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 二叉排序书\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">BinarySortTree</span> <span class=\"o\">{</span>\n    <span class=\"n\">Node</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 添加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;node参数不合法&#34;</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">infixOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;[ null ]&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找node节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找node的父节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">searchParent</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 删除node节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">deleteNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果没有找到 直接return\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//如果我们发现当前这颗二叉排序树只有一个结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//去找到targetNode的父结点\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"c1\">//如果要删除的结点是叶子结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//判断targetNode 是父结点的左子结点，还是右子结点\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//是左子结点\n</span><span class=\"c1\"></span>                    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//是右子结点\n</span><span class=\"c1\"></span>                    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//删除有两颗子树的节点\n</span><span class=\"c1\"></span>                <span class=\"kt\">int</span> <span class=\"n\">minVal</span> <span class=\"o\">=</span> <span class=\"n\">delRightTreeMin</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n                <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">minVal</span><span class=\"o\">;</span>\n\n\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">// 删除只有一颗子树的结点\n</span><span class=\"c1\"></span>                <span class=\"c1\">//如果要删除的结点有左子结点\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">//如果 targetNode 是 parent 的左子结点\n</span><span class=\"c1\"></span>                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//  targetNode 是 parent 的右子结点\n</span><span class=\"c1\"></span>                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//如果要删除的结点有右子结点\n</span><span class=\"c1\"></span>                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">//如果 targetNode 是 parent 的左子结点\n</span><span class=\"c1\"></span>                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//如果 targetNode 是 parent 的右子结点\n</span><span class=\"c1\"></span>                            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param node 传入的结点(当做二叉排序树的根结点)\n</span><span class=\"cm\">     * @return 返回的 以node 为根结点的二叉排序树的最小结点的值\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">delRightTreeMin</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Node</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"c1\">//循环的查找左子节点，就会找到最小值\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//这时 target就指向了最小结点\n</span><span class=\"c1\"></span>        <span class=\"c1\">//删除最小结点\n</span><span class=\"c1\"></span>        <span class=\"n\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Node</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 添加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node 要添加的节点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果传来的节点值&lt;原来的节点值就往左边放\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//如果原节点的左边为空就填值\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//否则继续比较\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//否则就往右边放\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//如果原节点的右边为空就填值\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//否则继续比较\n</span><span class=\"c1\"></span>                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">infixOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找有无该节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 查找当node的父节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param value\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">searchParent</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//如果当前结点就是要删除的结点的父结点，就返回\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//向左子树递归查找\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">&gt;=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//向右子树递归查找\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">searchParent</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 没有找到父结点\n</span><span class=\"c1\"></span>                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序查找Node\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Node</span> <span class=\"nf\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Node</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;Node{&#34;</span> <span class=\"o\">+</span>\n                <span class=\"s\">&#34;value=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">value</span> <span class=\"o\">+</span>\n                <span class=\"sc\">&#39;}&#39;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81287610", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构与算法之 赫夫曼树-赫夫曼编码之 最佳实践", 
            "content": "<h2>代码实现-压缩文件</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.huffman</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.*</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.*</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HuffmanCodeDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"n\">HuffmanCode</span> <span class=\"n\">hfm</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HuffmanCode</span><span class=\"o\">();</span>\n\n<span class=\"c1\">//        //测试压缩文件\n</span><span class=\"c1\">//      String srcFile = &#34;C:\\\\Users\\\\ASUS\\\\Desktop\\\\SKL改eyes.jpg&#34;;\n</span><span class=\"c1\">//      String dstFile1 = &#34;C:\\\\Users\\\\ASUS\\\\Desktop\\\\SKL改eyes.zip&#34;;\n</span><span class=\"c1\">//\n</span><span class=\"c1\">//        hfm.zipFile(srcFile, dstFile1);\n</span><span class=\"c1\">//      System.out.println(&#34;压缩文件ok~~&#34;);\n</span><span class=\"c1\"></span>\n        <span class=\"c1\">//测试解压文件\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">zipFile</span> <span class=\"o\">=</span> <span class=\"s\">&#34;C:\\\\Users\\\\ASUS\\\\Desktop\\\\SKL改eyes.zip&#34;</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">dstFile2</span> <span class=\"o\">=</span> <span class=\"s\">&#34;C:\\\\Users\\\\ASUS\\\\Desktop\\\\SKL改eyes2.jpg&#34;</span><span class=\"o\">;</span>\n        <span class=\"n\">hfm</span><span class=\"o\">.</span><span class=\"na\">unZipFile</span><span class=\"o\">(</span><span class=\"n\">zipFile</span><span class=\"o\">,</span> <span class=\"n\">dstFile2</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;解压成功!&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">HuffmanCode</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 1. 将赫夫曼编码表存放在 Map&lt;Byte,String&gt; 形式\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">huffmanCodes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">1024</span><span class=\"o\">);</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 2. 在生成赫夫曼编码表示，需要去拼接路径, 定义一个StringBuilder 存储某个叶子结点的路径\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n\n\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 完成对压缩文件的解压\n</span><span class=\"cm\">     * @param zipFile 准备解压的文件\n</span><span class=\"cm\">     * @param dstFile 将文件解压到哪个路径\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">unZipFile</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">zipFile</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">dstFile</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">(</span>\n                <span class=\"c1\">//创建文件输入流\n</span><span class=\"c1\"></span>                <span class=\"n\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileInputStream</span><span class=\"o\">(</span><span class=\"n\">zipFile</span><span class=\"o\">);</span>\n                <span class=\"c1\">//将bytes 数组写入到目标文件\n</span><span class=\"c1\"></span>                <span class=\"n\">OutputStream</span> <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileOutputStream</span><span class=\"o\">(</span><span class=\"n\">dstFile</span><span class=\"o\">);</span>\n                <span class=\"c1\">//创建一个和  is关联的对象输入流\n</span><span class=\"c1\"></span>                <span class=\"n\">ObjectInputStream</span> <span class=\"n\">ois</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ObjectInputStream</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">);</span>\n        <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//读取byte数组  huffmanBytes\n</span><span class=\"c1\"></span>            <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">huffmanBytes</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[])</span> <span class=\"n\">ois</span><span class=\"o\">.</span><span class=\"na\">readObject</span><span class=\"o\">();</span>\n            <span class=\"c1\">//读取赫夫曼编码表\n</span><span class=\"c1\"></span>            <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">huffmanCodes</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;)</span> <span class=\"n\">ois</span><span class=\"o\">.</span><span class=\"na\">readObject</span><span class=\"o\">();</span>\n\n            <span class=\"c1\">//解码\n</span><span class=\"c1\"></span>            <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"o\">(</span><span class=\"n\">huffmanCodes</span><span class=\"o\">,</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">//写数据到 dstFile 文件\n</span><span class=\"c1\"></span>            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">bytes</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// TODO: handle exception\n</span><span class=\"c1\"></span>            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将给定的字符串压缩成byte数组并返回\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param bytes  要压缩的字符串\n</span><span class=\"cm\">     * @param root 赫夫曼树\n</span><span class=\"cm\">     * @return 压缩好的byte数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"nf\">zip</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span><span class=\"o\">,</span> <span class=\"n\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//2.将字节数组中赫夫曼集合包含的值都取出拼接成一个字符串\n</span><span class=\"c1\"></span>        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"c1\">//遍历bytes 数组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//关键步骤\n</span><span class=\"c1\"></span>            <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">).</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"c1\">//3.创建 存储压缩后的 byte数组\n</span><span class=\"c1\"></span>        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">huffmanCodeBytes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[(</span><span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">7</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">8</span><span class=\"o\">];</span>\n\n        <span class=\"c1\">//记录是第几个byte\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//4.将 字符串 每八个一位 填充到huffmanCodeBytes数组当中\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">8</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//因为是每8位对应一个byte,所以步长 +8\n</span><span class=\"c1\"></span>            <span class=\"n\">String</span> <span class=\"n\">strByte</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">8</span> <span class=\"o\">&gt;</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//不够8位\n</span><span class=\"c1\"></span>                <span class=\"n\">strByte</span> <span class=\"o\">=</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">strByte</span> <span class=\"o\">=</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">8</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//将strByte 转成一个byte,放入到 huffmanCodeBytes\n</span><span class=\"c1\"></span>            <span class=\"n\">huffmanCodeBytes</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">)</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">strByte</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">huffmanCodeBytes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">getNodes</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//统计 buye数组中 编码出现的次数 装进Map集合中\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeeMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Integer</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">codeeMap</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 对文件进行压缩\n</span><span class=\"cm\">     * @param b\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"nf\">huffmanZip</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">getNodes</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Node</span> <span class=\"n\">huffmanTreeRoot</span> <span class=\"o\">=</span> <span class=\"n\">createHuffmanTree</span><span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">);</span>\n        <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">huffmanTreeRoot</span><span class=\"o\">);</span>\n        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">zip</span> <span class=\"o\">=</span> <span class=\"n\">zip</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">huffmanTreeRoot</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">zip</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">huffmanCodes</span><span class=\"o\">,</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//1. 先得到 huffmanBytes 对应的 二进制的字符串 ， 形式 1010100010111...\n</span><span class=\"c1\"></span>        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"c1\">//将byte数组转成二进制的字符串\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"c1\">//判断是不是最后一个字节\n</span><span class=\"c1\"></span>            <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">byteToBitString</span><span class=\"o\">(!</span><span class=\"n\">flag</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//把字符串安装指定的赫夫曼编码进行解码\n</span><span class=\"c1\"></span>        <span class=\"c1\">//把赫夫曼编码表进行调换，因为反向查询 a-&gt;100 100-&gt;a\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Byte</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">huffmanCodes</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">(),</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//创建要给集合，存放byte\n</span><span class=\"c1\"></span>        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"c1\">//i 可以理解成就是索引,扫描 stringBuilder\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 小的计数器\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">Byte</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//递增的取出 key 1\n</span><span class=\"c1\"></span>                <span class=\"c1\">//i 不动，让count移动，指定匹配到一个字符\n</span><span class=\"c1\"></span>                <span class=\"n\">String</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n                <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n                <span class=\"c1\">//说明没有匹配到\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//匹配到\n</span><span class=\"c1\"></span>                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//当for循环结束后，我们list中就存放了所有的字符  &#34;i like like like java do you like a java&#34;\n</span><span class=\"c1\"></span>        <span class=\"c1\">//把list 中的数据放入到byte[] 并返回\n</span><span class=\"c1\"></span>        <span class=\"kt\">byte</span> <span class=\"n\">b</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将一个byte 转成一个二进制的字符串\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param b    传入的 byte\n</span><span class=\"cm\">     * @param flag 标志是否需要补高位如果是true ，表示需要补高位，如果是false表示不补, 如果是最后一个字节，无需补高位\n</span><span class=\"cm\">     * @return 是该b 对应的二进制的字符串，（注意是按补码返回）\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">byteToBitString</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">flag</span><span class=\"o\">,</span> <span class=\"kt\">byte</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//使用变量保存 b //将 b 转成 int\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n        <span class=\"c1\">//如果是正数我们还存在补高位\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//按位与 256  1 0000 0000  | 0000 0001 =&gt; 1 0000 0001\n</span><span class=\"c1\"></span>            <span class=\"n\">temp</span> <span class=\"o\">|=</span> <span class=\"n\">256</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//返回的是temp对应的二进制的补码\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">toBinaryString</span><span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">8</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 为了调用方便，我们重载 getCodes\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getCodes</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//处理root的左子树\n</span><span class=\"c1\"></span>        <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"s\">&#34;0&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder</span><span class=\"o\">);</span>\n        <span class=\"c1\">//处理root的右子树\n</span><span class=\"c1\"></span>        <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">huffmanCodes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能：将传入的node结点的所有叶子结点的赫夫曼编码得到，并放入到huffmanCodes集合\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node          传入结点\n</span><span class=\"cm\">     * @param code          路径： 左子结点是 0, 右子结点 1\n</span><span class=\"cm\">     * @param stringBuilder 用于拼接路径\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">getCodes</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">stringBuilder</span><span class=\"o\">);</span>\n        <span class=\"c1\">//将code 加入到 stringBuilder2\n</span><span class=\"c1\"></span>        <span class=\"n\">stringBuilder2</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">);</span>\n        <span class=\"c1\">//如果node == null不处理\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//判断当前node 是叶子结点还是非叶子结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//非叶子结点递归处理\n</span><span class=\"c1\"></span>\n                <span class=\"c1\">//向左递归\n</span><span class=\"c1\"></span>                <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"s\">&#34;0&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder2</span><span class=\"o\">);</span>\n                <span class=\"c1\">//向右递归\n</span><span class=\"c1\"></span>                <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder2</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//说明是一个叶子结点\n</span><span class=\"c1\"></span>                <span class=\"c1\">//就表示找到某个叶子结点的最后\n</span><span class=\"c1\"></span>                <span class=\"n\">huffmanCodes</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder2</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将赫夫曼树转换成 byte字节+出现次数 的Map 并加入到List集合中\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param str 接收转码字符串\n</span><span class=\"cm\">     * @return 返回的就是 List 形式\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">getNodes</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">();</span>\n        <span class=\"c1\">//统计 buye数组中 编码出现的次数 装进Map集合中\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeeMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Integer</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">codeeMap</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将节点集合转化成赫夫曼树\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param codeeMap\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">createHuffmanTree</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeeMap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//遍历map集合每个值 转换成节点对象并放到List集合中\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeEntry</span> <span class=\"o\">:</span> <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">codeEntry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">(),</span> <span class=\"n\">codeEntry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//排序, 从小到大\n</span><span class=\"c1\"></span>            <span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">);</span>\n            <span class=\"c1\">//取出第一颗最小的二叉树\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n            <span class=\"c1\">//取出第二颗最小的二叉树\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"c1\">//创建一颗新的二叉树,它的根节点 没有data, 只有权值\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">);</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n            <span class=\"c1\">//将已经处理的两颗二叉树从nodes删除\n</span><span class=\"c1\"></span>            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">);</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">right</span><span class=\"o\">);</span>\n            <span class=\"c1\">//将新的二叉树，加入到nodes\n</span><span class=\"c1\"></span>            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//nodes 最后的结点，就是赫夫曼树的根结点\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"kd\">implements</span> <span class=\"n\">Comparable</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存放数据(字符)本身，比如&#39;a&#39; =&gt; 97 &#39; &#39; =&gt; 32\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">Byte</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 权值, 表示字符出现的次数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Node</span><span class=\"o\">(</span><span class=\"n\">Byte</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compareTo</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 从小到大排序\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">-</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;Node [data = &#34;</span> <span class=\"o\">+</span> <span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"s\">&#34; weight=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">weight</span> <span class=\"o\">+</span> <span class=\"s\">&#34;]&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "压缩算法", 
                    "tagLink": "https://api.zhihu.com/topics/20075300"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81287238", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构与算法之 赫夫曼树-赫夫曼编码", 
            "content": "<h2>简介</h2><p>1)赫夫曼编码也翻译为  <a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2593%2588%25E5%25A4%25AB%25E6%259B%25BC\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">  哈</a><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%2593%2588%25E5%25A4%25AB%25E6%259B%25BC\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">夫曼</a>编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式, 属于一种程序算法</p><p>2)赫夫曼编码是赫哈夫曼树在电讯通信中的经典的应用之一。</p><p>3)赫夫曼编码广泛地用于数据文件压缩。其压缩率通常在20%～90%之间</p><p>4)赫夫曼码是可变<a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25AD%2597%25E9%2595%25BF/97660\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">字长</a>编码(VLC)的一种。Huffman于1952年提出一种编码方法，称之为最佳编码</p><h2>思路</h2><p>1.将字符串转化成 【byte字节，出现次数】的map集合</p><p>2.转化成赫夫曼树</p><p>3.赫夫曼树生成赫夫曼编码</p><p>4.压缩赫夫曼编码</p><p>5.逆向解压</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.huffman</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.*</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HuffmanCodeDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s\">&#34;i like like like java do you like a java&#34;</span><span class=\"o\">;</span>\n        <span class=\"n\">HuffmanCode</span> <span class=\"n\">hc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HuffmanCode</span><span class=\"o\">();</span>\n<span class=\"c1\">//        1.将字符串转化成 【byte字节，出现次数】的map集合\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">hc</span><span class=\"o\">.</span><span class=\"na\">getNodes</span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;nodes = &#34;</span> <span class=\"o\">+</span> <span class=\"n\">nodes</span><span class=\"o\">);</span>\n<span class=\"c1\">//        2.转化成赫夫曼树\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;赫夫曼树&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Node</span> <span class=\"n\">huffmanTreeRoot</span> <span class=\"o\">=</span> <span class=\"n\">hc</span><span class=\"o\">.</span><span class=\"na\">createHuffmanTree</span><span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">);</span>\n<span class=\"c1\">//        3.赫夫曼树生成赫夫曼编码\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;前序遍历&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">hc</span><span class=\"o\">.</span><span class=\"na\">getCodes</span><span class=\"o\">(</span><span class=\"n\">huffmanTreeRoot</span><span class=\"o\">);</span>\n<span class=\"c1\">//        4.压缩赫夫曼编码\n</span><span class=\"c1\"></span>        <span class=\"kd\">final</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">zip</span> <span class=\"o\">=</span> <span class=\"n\">hc</span><span class=\"o\">.</span><span class=\"na\">zip</span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"o\">,</span> <span class=\"n\">huffmanTreeRoot</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zip</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"s\">&#34;\\t&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n<span class=\"c1\">//        5.逆向解压\n</span><span class=\"c1\"></span>        <span class=\"kd\">final</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">decode</span> <span class=\"o\">=</span> <span class=\"n\">hc</span><span class=\"o\">.</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">.</span><span class=\"na\">huffmanCodes</span><span class=\"o\">,</span><span class=\"n\">zip</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">decode</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">HuffmanCode</span> <span class=\"o\">{</span>\n    <span class=\"c1\">//生成赫夫曼树对应的赫夫曼编码\n</span><span class=\"c1\"></span>    <span class=\"c1\">//思路:\n</span><span class=\"c1\"></span>    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 1. 将赫夫曼编码表存放在 Map&lt;Byte,String&gt; 形式\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">huffmanCodes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">1024</span><span class=\"o\">);</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 2. 在生成赫夫曼编码表示，需要去拼接路径, 定义一个StringBuilder 存储某个叶子结点的路径\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">huffmanCodes</span><span class=\"o\">,</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//1. 先得到 huffmanBytes 对应的 二进制的字符串 ， 形式 1010100010111...\n</span><span class=\"c1\"></span>        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"c1\">//将byte数组转成二进制的字符串\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"c1\">//判断是不是最后一个字节\n</span><span class=\"c1\"></span>            <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">huffmanBytes</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">byteToBitString</span><span class=\"o\">(!</span><span class=\"n\">flag</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//把字符串安装指定的赫夫曼编码进行解码\n</span><span class=\"c1\"></span>        <span class=\"c1\">//把赫夫曼编码表进行调换，因为反向查询 a-&gt;100 100-&gt;a\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Byte</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">huffmanCodes</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">(),</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//创建要给集合，存放byte\n</span><span class=\"c1\"></span>        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"c1\">//i 可以理解成就是索引,扫描 stringBuilder\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 小的计数器\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">Byte</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//递增的取出 key 1\n</span><span class=\"c1\"></span>                <span class=\"c1\">//i 不动，让count移动，指定匹配到一个字符\n</span><span class=\"c1\"></span>                <span class=\"n\">String</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n                <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n                <span class=\"c1\">//说明没有匹配到\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//匹配到\n</span><span class=\"c1\"></span>                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//当for循环结束后，我们list中就存放了所有的字符  &#34;i like like like java do you like a java&#34;\n</span><span class=\"c1\"></span>        <span class=\"c1\">//把list 中的数据放入到byte[] 并返回\n</span><span class=\"c1\"></span>        <span class=\"kt\">byte</span> <span class=\"n\">b</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将一个byte 转成一个二进制的字符串\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param b    传入的 byte\n</span><span class=\"cm\">     * @param flag 标志是否需要补高位如果是true ，表示需要补高位，如果是false表示不补, 如果是最后一个字节，无需补高位\n</span><span class=\"cm\">     * @return 是该b 对应的二进制的字符串，（注意是按补码返回）\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">byteToBitString</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">flag</span><span class=\"o\">,</span> <span class=\"kt\">byte</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//使用变量保存 b //将 b 转成 int\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n        <span class=\"c1\">//如果是正数我们还存在补高位\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//按位与 256  1 0000 0000  | 0000 0001 =&gt; 1 0000 0001\n</span><span class=\"c1\"></span>            <span class=\"n\">temp</span> <span class=\"o\">|=</span> <span class=\"n\">256</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//返回的是temp对应的二进制的补码\n</span><span class=\"c1\"></span>        <span class=\"n\">String</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">toBinaryString</span><span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">8</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将给定的字符串压缩成byte数组并返回\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param str  要压缩的字符串\n</span><span class=\"cm\">     * @param root 赫夫曼树\n</span><span class=\"cm\">     * @return 压缩好的byte数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"nf\">zip</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//1.利用 huffmanCodes 将  bytes 转成  赫夫曼编码对应的字符串\n</span><span class=\"c1\"></span>        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">//2.将字节数组中赫夫曼集合包含的值都取出拼接成一个字符串\n</span><span class=\"c1\"></span>        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"c1\">//遍历bytes 数组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//关键步骤\n</span><span class=\"c1\"></span>            <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">).</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"c1\">//3.创建 存储压缩后的 byte数组\n</span><span class=\"c1\"></span>        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">huffmanCodeBytes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[(</span><span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">7</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">8</span><span class=\"o\">];</span>\n\n        <span class=\"c1\">//记录是第几个byte\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//4.将 字符串 每八个一位 填充到huffmanCodeBytes数组当中\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">8</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//因为是每8位对应一个byte,所以步长 +8\n</span><span class=\"c1\"></span>            <span class=\"n\">String</span> <span class=\"n\">strByte</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">8</span> <span class=\"o\">&gt;</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//不够8位\n</span><span class=\"c1\"></span>                <span class=\"n\">strByte</span> <span class=\"o\">=</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">strByte</span> <span class=\"o\">=</span> <span class=\"n\">stringBuilder</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">8</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//将strByte 转成一个byte,放入到 huffmanCodeBytes\n</span><span class=\"c1\"></span>            <span class=\"n\">huffmanCodeBytes</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">)</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">strByte</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">huffmanCodeBytes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 为了调用方便，我们重载 getCodes\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getCodes</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//处理root的左子树\n</span><span class=\"c1\"></span>        <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"s\">&#34;0&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder</span><span class=\"o\">);</span>\n        <span class=\"c1\">//处理root的右子树\n</span><span class=\"c1\"></span>        <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">huffmanCodes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能：将传入的node结点的所有叶子结点的赫夫曼编码得到，并放入到huffmanCodes集合\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node          传入结点\n</span><span class=\"cm\">     * @param code          路径： 左子结点是 0, 右子结点 1\n</span><span class=\"cm\">     * @param stringBuilder 用于拼接路径\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">getCodes</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">stringBuilder2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">stringBuilder</span><span class=\"o\">);</span>\n        <span class=\"c1\">//将code 加入到 stringBuilder2\n</span><span class=\"c1\"></span>        <span class=\"n\">stringBuilder2</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">);</span>\n        <span class=\"c1\">//如果node == null不处理\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//判断当前node 是叶子结点还是非叶子结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//非叶子结点递归处理\n</span><span class=\"c1\"></span>\n                <span class=\"c1\">//向左递归\n</span><span class=\"c1\"></span>                <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"s\">&#34;0&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder2</span><span class=\"o\">);</span>\n                <span class=\"c1\">//向右递归\n</span><span class=\"c1\"></span>                <span class=\"n\">getCodes</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"s\">&#34;1&#34;</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder2</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//说明是一个叶子结点\n</span><span class=\"c1\"></span>                <span class=\"c1\">//就表示找到某个叶子结点的最后\n</span><span class=\"c1\"></span>                <span class=\"n\">huffmanCodes</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">,</span> <span class=\"n\">stringBuilder2</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将赫夫曼树转换成 byte字节+出现次数 的Map 并加入到List集合中\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param str 接收转码字符串\n</span><span class=\"cm\">     * @return 返回的就是 List 形式\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">getNodes</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">();</span>\n        <span class=\"c1\">//统计 buye数组中 编码出现的次数 装进Map集合中\n</span><span class=\"c1\"></span>        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeeMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Integer</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">codeeMap</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将节点集合转化成赫夫曼树\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param codeeMap\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Node</span> <span class=\"nf\">createHuffmanTree</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeeMap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//遍历map集合每个值 转换成节点对象并放到List集合中\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">Byte</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">codeEntry</span> <span class=\"o\">:</span> <span class=\"n\">codeeMap</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">codeEntry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">(),</span> <span class=\"n\">codeEntry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//排序, 从小到大\n</span><span class=\"c1\"></span>            <span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">);</span>\n            <span class=\"c1\">//取出第一颗最小的二叉树\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n            <span class=\"c1\">//取出第二颗最小的二叉树\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"c1\">//创建一颗新的二叉树,它的根节点 没有data, 只有权值\n</span><span class=\"c1\"></span>            <span class=\"n\">Node</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">);</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n            <span class=\"c1\">//将已经处理的两颗二叉树从nodes删除\n</span><span class=\"c1\"></span>            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">);</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">right</span><span class=\"o\">);</span>\n            <span class=\"c1\">//将新的二叉树，加入到nodes\n</span><span class=\"c1\"></span>            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//nodes 最后的结点，就是赫夫曼树的根结点\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"kd\">implements</span> <span class=\"n\">Comparable</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存放数据(字符)本身，比如&#39;a&#39; =&gt; 97 &#39; &#39; =&gt; 32\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">Byte</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 权值, 表示字符出现的次数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Node</span><span class=\"o\">(</span><span class=\"n\">Byte</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compareTo</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 从小到大排序\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">weight</span> <span class=\"o\">-</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"na\">weight</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;Node [data = &#34;</span> <span class=\"o\">+</span> <span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"s\">&#34; weight=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">weight</span> <span class=\"o\">+</span> <span class=\"s\">&#34;]&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//前序遍历\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "二叉树", 
                    "tagLink": "https://api.zhihu.com/topics/19698867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81140563", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 选择排序", 
            "content": "<h2>简介</h2><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p><h2>实现步骤</h2><p>插入排序（Insertion Sorting）的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">InsertionSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">insertAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//左边的数组序数是arr[0-i) 每次遍历完扩容为 [0-i]\n</span><span class=\"c1\"></span>            <span class=\"c1\">//遍历有序数组\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//说明这个数小那就插在arr[j]前面\n</span><span class=\"c1\"></span>                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"c1\">//将要插入有序数组一边的数插进去\n</span><span class=\"c1\"></span>                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">selectDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//左边的数组序数是arr[0-i) 每次遍历完扩容为 [0-i]\n</span><span class=\"c1\"></span>            <span class=\"c1\">//遍历有序数组\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//说明这个数小那就插在arr[j]前面\n</span><span class=\"c1\"></span>                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"c1\">//将要插入有序数组一边的数插进去\n</span><span class=\"c1\"></span>                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">insertAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n         <span class=\"n\">selectDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81140281", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "查找算法之 线性查找算法", 
            "content": "<h2>简述</h2><p>其实也挺不错的，看起来慢一些，但是偶尔会给人惊喜</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.search</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 线性查找\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SequenceSearch</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">};</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">seqSearch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span><span class=\"n\">1</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 找到一个满足条件的值，就返回下标,没找到返回-1\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr 目标数组\n</span><span class=\"cm\">     * @param target 查找目标\n</span><span class=\"cm\">     * @return 查找目标的下标\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">seqSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "搜索算法", 
                    "tagLink": "https://api.zhihu.com/topics/19589362"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81140082", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构与算法之 算法复杂度-简介", 
            "content": "<h2>算法的时间复杂度</h2><p>度量一个程序(算法)执行时间的两种方法</p><ol><li>事后统计的方法</li></ol><p>这种方法可行, 但是有两个问题：</p><p>​    一、要想对设计的算法的运行性能进行评测，需要实际运行该程序；     二、所得时间的统计量依赖于计算机的硬件、软件等环境因素, 这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。</p><ol><li>事前估算的方法</li></ol><p>​    通过分析某个算法的时间复杂度来判断哪个算法更优.</p><h2>时间复杂度说明</h2><p>​   一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。<b>一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)</b>。</p><p>​   一般情况下，算法中的基本操作语句的重复执行次数是<b>问题规模n</b>的某个函数，<b>用T(n)表示</b>，若有某个<b>辅助函数f(n)</b>，使得当<b>n趋近于无穷大</b>时，<b>T(n) / f(n) 的极限值为不等于零的常数</b>，则称<b>f(n)是T(n)的同数量级函数</b>。记作 <b>T(n)=Ｏ( f(n) )</b>，称<b>Ｏ( f(n) )  为</b>算法的渐进时间复杂度，简称<b>时间复杂度</b>。</p><p>​   <b>T(n) 不同，但时间复杂度可能相同</b>。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。</p><h2><b>计算时间复杂度的方法</b></h2><ol><li>用常数1代替运行时间中的所有加法常数  T(n)=n²+7n+6  =&gt; T(n)=n²+7n+1</li><li>修改后的运行次数函数中，只保留最高阶项  T(n)=n²+7n+1 =&gt; T(n) = n²</li><li>去除最高阶项的系数 T(n) = n² =&gt; T(n) = n² =&gt; O(n²)</li></ol><h2>空间复杂度简介</h2><ol><li>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</li><li>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li><li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.</li></ol><h2>常用排序算法对比</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-49bf4c68c4c9ccdc38a9183019cbcb72_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic3.zhimg.com/v2-49bf4c68c4c9ccdc38a9183019cbcb72_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;531&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"531\" data-original=\"https://pic3.zhimg.com/v2-49bf4c68c4c9ccdc38a9183019cbcb72_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-49bf4c68c4c9ccdc38a9183019cbcb72_b.jpg\"/></figure><p><b>相关术语解释：</b></p><p><b>稳定</b>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</p><p><b>不稳定</b>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p><p><b>内排序</b>：所有排序操作都在内存中完成；</p><p><b>外排序</b>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p><p><b>时间复杂度</b>： 一个算法执行所耗费的时间。</p><p><b>空间复杂度</b>：运行完一个程序所需内存的大小。</p><p><b>n</b>: 数据规模</p><p><b>k</b>: “桶”的个数</p><p><b>In-place</b>:    不占用额外内存</p><p><b>Out-place</b>: 占用额外内存</p><h2>结论</h2><p>​   常数阶O(1)     对数阶O(log2n)     线性阶O(n)     线性对数阶O(nlog2n)     平方阶O(n^2)     立方阶O(n^3)     k次方阶O(n^k)     指数阶O(2^n)</p><p>​   常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜Ο(2n) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低 从图中可见，我们应该尽可能避免使用指数阶的算法</p>", 
            "topic": [
                {
                    "tag": "算法复杂度", 
                    "tagLink": "https://api.zhihu.com/topics/19616786"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81139449", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 稀疏数组", 
            "content": "<h2>作用</h2><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><h2>实现思路</h2><p>1)记录数组一共有几行几列，有多少个不同的值</p><p>2)把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p><h2>实现代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.io.*</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Scanner</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan_9826\n</span><span class=\"cm\"> * 这是一个稀疏数组工具类\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * 稀疏数组介绍\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SparseArrayUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 将二维数组转为稀疏数组 数组 [行][列]\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arrs   传入的二维数组\n</span><span class=\"cm\">     * @param row    行\n</span><span class=\"cm\">     * @param column 列\n</span><span class=\"cm\">     * @return 转换之后的稀疏数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">ArraytoSparse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">arrs</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">column</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"c1\">//        1.拿到这个数组的非0数据的个数 count\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">effectiveCount</span><span class=\"o\">(</span><span class=\"n\">arrs</span><span class=\"o\">);</span>\n<span class=\"c1\">//        2.创建稀疏数组:二维数组[count+1][3]，\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">sparseArray</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">][</span><span class=\"n\">3</span><span class=\"o\">];</span>\n<span class=\"c1\">//        3.赋值\n</span><span class=\"c1\"></span>        <span class=\"n\">sparseArray</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">][</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">;</span>\n        <span class=\"n\">sparseArray</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">][</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">column</span><span class=\"o\">;</span>\n        <span class=\"n\">sparseArray</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">][</span><span class=\"n\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">effective</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arrs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arrs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arrs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">sparseArray</span><span class=\"o\">[</span><span class=\"n\">effective</span><span class=\"o\">][</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                    <span class=\"n\">sparseArray</span><span class=\"o\">[</span><span class=\"n\">effective</span><span class=\"o\">][</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                    <span class=\"n\">sparseArray</span><span class=\"o\">[</span><span class=\"n\">effective</span><span class=\"o\">][</span><span class=\"n\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arrs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"n\">effective</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sparseArray</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @return 二维数组的有效值个数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">effectiveCount</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">arrs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">arrs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param sparse 稀疏数组\n</span><span class=\"cm\">     * @param name   文件名\n</span><span class=\"cm\">     * @param url    保存路径\n</span><span class=\"cm\">     *               将稀疏数组写到本地临时保存\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">writeArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">sparse</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">FileWriter</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileWriter</span><span class=\"o\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">3</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"s\">&#34;\\r\\n&#34;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 读取本地文件并创建稀疏数组返回,如果返回null表示读取失败\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param url  读取路径\n</span><span class=\"cm\">     * @param name 文件名\n</span><span class=\"cm\">     * @return 返回一个稀疏数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">returnArray</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">initRow</span> <span class=\"o\">=</span> <span class=\"n\">readLine</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">initRow</span> <span class=\"o\">==</span> <span class=\"n\">0</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">sparse</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">initRow</span><span class=\"o\">][</span><span class=\"n\">3</span><span class=\"o\">];</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">BufferedReader</span> <span class=\"n\">in</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BufferedReader</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">FileReader</span><span class=\"o\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"o\">));</span>\n            <span class=\"n\">String</span> <span class=\"n\">line</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">rowNumber</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">.</span><span class=\"na\">readLine</span><span class=\"o\">())</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strLIne</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n                <span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">rowNumber</span><span class=\"o\">][</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">strLIne</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]);</span>\n                <span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">rowNumber</span><span class=\"o\">][</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">strLIne</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]);</span>\n                <span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">rowNumber</span><span class=\"o\">][</span><span class=\"n\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">strLIne</span><span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">]);</span>\n                <span class=\"n\">rowNumber</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sparse</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 读取文件行数\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param name 文件位置\n</span><span class=\"cm\">     * @return 文件行数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">readLine</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"o\">).</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&lt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">FileInputStream</span> <span class=\"n\">fis</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileInputStream</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"o\">));</span>\n            <span class=\"n\">Scanner</span> <span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Scanner</span><span class=\"o\">(</span><span class=\"n\">fis</span><span class=\"o\">);</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"na\">hasNextLine</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">String</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"na\">nextLine</span><span class=\"o\">();</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 利用稀疏数组转为原来的数组\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param sparse 稀疏数组\n</span><span class=\"cm\">     * @return 原来的数组11X11\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">sparseToArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">sparse</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">][</span><span class=\"n\">0</span><span class=\"o\">]][</span><span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">][</span><span class=\"n\">1</span><span class=\"o\">]];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">0</span><span class=\"o\">]][</span><span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">1</span><span class=\"o\">]]</span> <span class=\"o\">=</span> <span class=\"n\">sparse</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81139195", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 环形队列", 
            "content": "<h2>简述</h2><p>队列是一个有序列表，可以用数组或是链表来实现。</p><p>遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出 </p><h2>实现思路</h2><p>1)既然是环形队列，那就一定有头有尾，有容量</p><p>2)既然是数组实现，那一定有个算法保证可以让数组循环起来</p><h2>实现代码</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 这是一个重复可用的环形链表 但是 数字下标为maxSize的位置没有使用\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ArrayQueue</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 最大总量\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 队列头\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">front</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 队列尾\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">rear</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存放数据用的数组队列\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">queueArray</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 初始化一个maxSize长度的数组队列。\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param maxSize\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">ArrayQueue</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">maxSize</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">maxSize</span> <span class=\"o\">=</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">queueArray</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">maxSize</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 判断队列是否满\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isFull</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">rear</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">maxSize</span> <span class=\"o\">==</span> <span class=\"n\">front</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 判断队列是否为空\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">rear</span> <span class=\"o\">==</span> <span class=\"n\">front</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 往队列中添加一个元素\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param element\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">addQueue</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">element</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isFull</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//队尾后移一位\n</span><span class=\"c1\"></span>        <span class=\"n\">queueArray</span><span class=\"o\">[</span><span class=\"n\">rear</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">element</span><span class=\"o\">;</span>\n        <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">rear</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @return 弹出&amp;获取当前队首任务\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">takeQueue</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">&#34;队列为空&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//队首后移一位\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">queueArray</span><span class=\"o\">[</span><span class=\"n\">front</span><span class=\"o\">];</span>\n        <span class=\"n\">queueArray</span><span class=\"o\">[</span><span class=\"n\">front</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">front</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 显示队列里的数据\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">showQueue</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;队列里没有数据&#34;</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">front</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">front</span> <span class=\"o\">+</span> <span class=\"n\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;当前数据顺序位数 = &#34;</span> <span class=\"o\">+</span> <span class=\"n\">queueArray</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @return 队列中有效数据个数\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">size</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">rear</span> <span class=\"o\">+</span> <span class=\"n\">maxSize</span> <span class=\"o\">-</span> <span class=\"n\">front</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81139030", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "查找算法之 斐波那契查找算法", 
            "content": "<h2>简述</h2><p>晚些补充</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.search</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 斐波那契查找\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FibonacciSearch</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">maxSize</span> <span class=\"o\">=</span> <span class=\"n\">20</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">10</span><span class=\"o\">,</span> <span class=\"n\">89</span><span class=\"o\">,</span> <span class=\"n\">1000</span><span class=\"o\">,</span> <span class=\"n\">1234</span><span class=\"o\">};</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;index=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">fibSearch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">189</span><span class=\"o\">));</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">fib</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">maxSize</span><span class=\"o\">];</span>\n        <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//编写斐波那契查找算法\n</span><span class=\"c1\"></span>    <span class=\"c1\">//使用非递归的方式编写算法\n</span><span class=\"c1\"></span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param arr 数组\n</span><span class=\"cm\">     * @param key 我们需要查找的关键码(值)\n</span><span class=\"cm\">     * @return 返回对应的下标，如果没有-1\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">fibSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//表示斐波那契分割数值的下标\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//存放mid值\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">//获取到斐波那契数列\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">f</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"n\">fib</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">//得到最大的斐波那契值的下标k\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">k</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//因为 f[k] 值 可能大于 arr 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]\n</span><span class=\"c1\"></span>        <span class=\"c1\">//不足的部分会使用0填充\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]);</span>\n        <span class=\"c1\">//实际上需求使用arr数组最后的数填充 temp\n</span><span class=\"c1\"></span>        <span class=\"c1\">//举例:\n</span><span class=\"c1\"></span>        <span class=\"c1\">//temp = {1,8, 10, 89, 1000, 1234, 0, 0}  =&gt; {1,8, 10, 89, 1000, 1234, 1234, 1234,}\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 使用while来循环处理，找到我们的数 key\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 只要这个条件满足，就可以找\n</span><span class=\"c1\"></span>            <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">&lt;</span> <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//我们应该继续向数组的前面查找(左边)\n</span><span class=\"c1\"></span>                <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n                <span class=\"c1\">//为什么是 k--\n</span><span class=\"c1\"></span>                <span class=\"c1\">//说明\n</span><span class=\"c1\"></span>                <span class=\"c1\">//1. 全部元素 = 前面的元素 + 后边元素\n</span><span class=\"c1\"></span>                <span class=\"c1\">//2. f[k] = f[k-1] + f[k-2]\n</span><span class=\"c1\"></span>                <span class=\"c1\">//因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]\n</span><span class=\"c1\"></span>                <span class=\"c1\">//即 在 f[k-1] 的前面继续查找 k--\n</span><span class=\"c1\"></span>                <span class=\"c1\">//即下次循环 mid = f[k-1-1]-1\n</span><span class=\"c1\"></span>                <span class=\"n\">k</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 我们应该继续向数组的后面查找(右边)\n</span><span class=\"c1\"></span>                <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n                <span class=\"c1\">//为什么是k -=2\n</span><span class=\"c1\"></span>                <span class=\"c1\">//说明\n</span><span class=\"c1\"></span>                <span class=\"c1\">//1. 全部元素 = 前面的元素 + 后边元素\n</span><span class=\"c1\"></span>                <span class=\"c1\">//2. f[k] = f[k-1] + f[k-2]\n</span><span class=\"c1\"></span>                <span class=\"c1\">//3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]\n</span><span class=\"c1\"></span>                <span class=\"c1\">//4. 即在f[k-2] 的前面进行查找 k -=2\n</span><span class=\"c1\"></span>                <span class=\"c1\">//5. 即下次循环 mid = f[k - 1 - 2] - 1\n</span><span class=\"c1\"></span>                <span class=\"n\">k</span> <span class=\"o\">-=</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"c1\">//找到\n</span><span class=\"c1\"></span>                <span class=\"c1\">//需要确定，返回的是哪个下标\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81138228", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 插入排序", 
            "content": "<h2>简介</h2><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p><h2>思想</h2><p>插入排序（Insertion Sorting）的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 插入排序\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">InsertionSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">insertAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//左边的数组序数是arr[0-i) 每次遍历完扩容为 [0-i]\n</span><span class=\"c1\"></span>            <span class=\"c1\">//遍历有序数组\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//说明这个数小那就插在arr[j]前面\n</span><span class=\"c1\"></span>                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"c1\">//将要插入有序数组一边的数插进去\n</span><span class=\"c1\"></span>                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">selectDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//左边的数组序数是arr[0-i) 每次遍历完扩容为 [0-i]\n</span><span class=\"c1\"></span>            <span class=\"c1\">//遍历有序数组\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//说明这个数小那就插在arr[j]前面\n</span><span class=\"c1\"></span>                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"c1\">//将要插入有序数组一边的数插进去\n</span><span class=\"c1\"></span>                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">insertAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n         <span class=\"n\">selectDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81137770", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "查找算法之 插值查找", 
            "content": "<h2>简述</h2><p>就是二酚查找的增强版，只是核心mid算法变了</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.search</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 插值查找\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">InsertValueSearch</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">100</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">100</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">insertValueSearch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">],</span> <span class=\"n\">7</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;i = &#34;</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param arr    目标数组\n</span><span class=\"cm\">     * @param left   最左值\n</span><span class=\"cm\">     * @param right  最右值\n</span><span class=\"cm\">     * @param target 查找目标\n</span><span class=\"cm\">     * @return 查找目标的下标\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">insertValueSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//保证得到的mid不会引发数组下标越界\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;</span> <span class=\"n\">right</span> <span class=\"o\">||</span> <span class=\"n\">target</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">||</span> <span class=\"n\">target</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 求出mid, 自适应\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">-</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">])</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">midVal</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">];</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">&gt;</span> <span class=\"n\">midVal</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">insertValueSearch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">&lt;</span> <span class=\"n\">midVal</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">insertValueSearch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81127347", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 快速排序", 
            "content": "<h2>简述</h2><p>快速排序（Quicksort）是对冒泡排序的一种改进。</p><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">QuickSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n<span class=\"c1\">//        int[] arr = {0,0,0,0,0,0,0};\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">quickAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 快速排序 升序 递归冒泡\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     * @param left\n</span><span class=\"cm\">     * @param right\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">quickAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">pivot</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;中值是&#34;</span> <span class=\"o\">+</span> <span class=\"n\">pivot</span> <span class=\"o\">+</span> <span class=\"s\">&#34;下标是&#34;</span> <span class=\"o\">+</span> <span class=\"o\">((</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">));</span>\n        <span class=\"c1\">//l &gt;= r 时代表操作完成\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//得到一个应该在右区的数\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//得到一个应该在左区的数\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//如果这两个数下标一致就不用掉换\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n<span class=\"c1\">//            到此为止,得到一大一小两个数【相对于pivote来说】使其交换\n</span><span class=\"c1\"></span>            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n\n<span class=\"c1\">//            如果交换完之后发现与pivot相等,那么前移一位l或者r\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//避免死循环\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//向左递归\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">quickAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//向右递归\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">quickAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 快速排序 降序 递归冒泡\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     * @param left\n</span><span class=\"cm\">     * @param right\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">quickDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">pivot</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">];</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;中值是&#34;</span> <span class=\"o\">+</span> <span class=\"n\">pivot</span> <span class=\"o\">+</span> <span class=\"s\">&#34;下标是&#34;</span> <span class=\"o\">+</span> <span class=\"o\">((</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">));</span>\n        <span class=\"c1\">//l &gt;= r 时代表操作完成\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//得到一个应该在右区的数【👈区找小数】\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//得到一个应该在左区的数【👉区找大数】\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//如果这两个数下标一致就不用掉换\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&gt;=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n<span class=\"c1\">//            到此为止,得到一大一小两个数【相对于pivote来说】使其交换\n</span><span class=\"c1\"></span>            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n\n<span class=\"c1\">//            如果交换完之后发现与pivot相等,那么前移一位l或者r\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//避免死循环\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//向左递归\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">quickAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">//向右递归\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">quickAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81122477", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 归并排序", 
            "content": "<h2>简介</h2><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案&#34;修补&#34;在一起，即分而治之)。</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 归并排序\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MergeSort</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">mergeAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">mergeDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">temp2</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 递归分解数组 升序\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     * @param left\n</span><span class=\"cm\">     * @param right\n</span><span class=\"cm\">     * @param temp\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">mergeAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n            <span class=\"c1\">//左递归分解\n</span><span class=\"c1\"></span>            <span class=\"n\">mergeAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n            <span class=\"c1\">//右递归分解\n</span><span class=\"c1\"></span>            <span class=\"n\">mergeAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n            <span class=\"c1\">//合并数组\n</span><span class=\"c1\"></span>            <span class=\"n\">mergeAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 合并数组 升序\n</span><span class=\"cm\">     * @param arr   要改变的数组\n</span><span class=\"cm\">     * @param left  左边有序数组的初始索引\n</span><span class=\"cm\">     * @param mid   中间索引\n</span><span class=\"cm\">     * @param right 右边有序数组的索引\n</span><span class=\"cm\">     * @param temp  辅助数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">mergeAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//第一步 准备条件\n</span><span class=\"c1\"></span>        <span class=\"c1\">//初始化i 左边有序序列的初始索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"c1\">//初始化j 右边有序序列的初始索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//指向temp数组的索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">//第二步 把temp数组的前半段，由小到大的有序虚填充(按照归并排序的规则)\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果左边有序序列的当前元素小于右边有序序列的当前元素就将左边的元素填充到temp中【反正就将小的元素填充到temp中】\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n                <span class=\"n\">t</span><span class=\"o\">++;</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n                <span class=\"n\">t</span><span class=\"o\">++;</span>\n                <span class=\"n\">r</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//第三步 将剩余部分填充到一股脑填充到temp的后半段\n</span><span class=\"c1\"></span>        <span class=\"c1\">//将左边有剩余的部分填充到temp\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">++;</span>\n            <span class=\"n\">l</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//将右边有剩余的部分填充到temp\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">++;</span>\n            <span class=\"n\">r</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//第四步 将temp数组中排序过的部分复制到arr数组中\n</span><span class=\"c1\"></span>        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmpLft</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">tmpLft</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">tmpLft</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">];</span>\n            <span class=\"n\">tmpLft</span><span class=\"o\">++;</span>\n            <span class=\"n\">t</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 递归分解数组 降序\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     * @param left\n</span><span class=\"cm\">     * @param right\n</span><span class=\"cm\">     * @param temp\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">mergeDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n            <span class=\"c1\">//左递归分解\n</span><span class=\"c1\"></span>            <span class=\"n\">mergeDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n            <span class=\"c1\">//右递归分解\n</span><span class=\"c1\"></span>            <span class=\"n\">mergeDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n            <span class=\"c1\">//合并数组\n</span><span class=\"c1\"></span>            <span class=\"n\">mergeDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">temp</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 合并数组 降序\n</span><span class=\"cm\">     * @param arr   要改变的数组\n</span><span class=\"cm\">     * @param left  左边有序数组的初始索引\n</span><span class=\"cm\">     * @param mid   中间索引\n</span><span class=\"cm\">     * @param right 右边有序数组的索引\n</span><span class=\"cm\">     * @param temp  辅助数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">mergeDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//第一步 准备条件\n</span><span class=\"c1\"></span>        <span class=\"c1\">//初始化i 左边有序序列的初始索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"c1\">//初始化j 右边有序序列的初始索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">//指向temp数组的索引\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">//第二步 把temp数组的前半段，由大到小的有序虚填充(按照归并排序的规则)\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果左边有序序列的当前元素大于右边有序序列的当前元素就将左边的元素填充到temp中【反正就将大的元素填充到temp中】\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n                <span class=\"n\">t</span><span class=\"o\">++;</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n                <span class=\"n\">t</span><span class=\"o\">++;</span>\n                <span class=\"n\">r</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//第三步 将剩余部分填充到一股脑填充到temp的后半段\n</span><span class=\"c1\"></span>        <span class=\"c1\">//将左边有剩余的部分填充到temp\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">++;</span>\n            <span class=\"n\">l</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//将右边有剩余的部分填充到temp\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">++;</span>\n            <span class=\"n\">r</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//第四步 将temp数组中排序过的部分复制到arr数组中\n</span><span class=\"c1\"></span>        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmpLft</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">tmpLft</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">tmpLft</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">];</span>\n            <span class=\"n\">tmpLft</span><span class=\"o\">++;</span>\n            <span class=\"n\">t</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81122299", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 希尔排序", 
            "content": "<h2>简述</h2><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。</p><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SellSort</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"c1\">//      shellAsc(arr);\n</span><span class=\"c1\"></span>        <span class=\"n\">shellEXAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//       shellDesc(arr);\n</span><span class=\"c1\"></span>               <span class=\"n\">shellEXDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 希尔换位升序排序\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">shellAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//第一层 分组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">grp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">/=</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//第二层 遍历最后一组元素\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">grp</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//根据上一层 遍历当前每组元素\n</span><span class=\"c1\"></span>                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">grp</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">-=</span> <span class=\"n\">grp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//如果前面的元素&gt;后面的元素就交换\n</span><span class=\"c1\"></span>                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">];</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">];</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 希尔换位降序排序\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">shellDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//第一层 分组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">grp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">/=</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//第二层 遍历最后一组元素\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">grp</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//根据上一层 遍历当前每组元素\n</span><span class=\"c1\"></span>                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">grp</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">-=</span> <span class=\"n\">grp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">//如果前面的元素&gt;后面的元素就交换\n</span><span class=\"c1\"></span>                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">];</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">];</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">grp</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 希尔插入升序排序\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">shellEXAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//第一层 分组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">grp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">/=</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//第二层 从最后一组开始遍历\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">grp</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">grp</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">grp</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">grp</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">grp</span><span class=\"o\">];</span>\n                        <span class=\"n\">j</span> <span class=\"o\">-=</span> <span class=\"n\">grp</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 希尔插入降序排序\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">shellEXDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//第一层 分组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">grp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">grp</span> <span class=\"o\">/=</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//第二层 从最后一组开始遍历\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">grp</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">grp</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">grp</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">grp</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">grp</span><span class=\"o\">];</span>\n                        <span class=\"n\">j</span> <span class=\"o\">-=</span> <span class=\"n\">grp</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81122110", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 基数排序", 
            "content": "<h2>简介</h2><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用</p><p>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</p><p>基数排序(Radix Sort)是桶排序的扩展</p><p>基数排序是1887年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。 </p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 基数排序\n</span><span class=\"cm\"> * 降序排序搞不出来QAQ  关键应该在第二步第三步  不过就是没搞出来\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RadixSort</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">53</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">542</span><span class=\"o\">,</span> <span class=\"n\">748</span><span class=\"o\">,</span> <span class=\"n\">14</span><span class=\"o\">,</span> <span class=\"n\">214</span><span class=\"o\">};</span>\n        <span class=\"n\">radixAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">radixAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//创建桶数组\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">10</span><span class=\"o\">][</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"c1\">//这个数组存储每个桶中的元素的数量\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">countArr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">10</span><span class=\"o\">];</span>\n        <span class=\"c1\">//最大数字的位数，也是循环次数\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"c1\">//第一步 确定循环次数\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++,</span> <span class=\"n\">n</span> <span class=\"o\">*=</span> <span class=\"n\">10</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">//第二步 将数据按照排序规律放到桶中\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//每次参考的位置上的数\n</span><span class=\"c1\"></span>                <span class=\"kt\">int</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">/</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">10</span><span class=\"o\">;</span>\n                <span class=\"c1\">//放到对应的桶中的对应的位置\n</span><span class=\"c1\"></span>                <span class=\"n\">bucket</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">][</span><span class=\"n\">countArr</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">]]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"c1\">//指针下移一位\n</span><span class=\"c1\"></span>                <span class=\"n\">countArr</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">]++;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//第三步 取出桶里的元素放到原来的数组\n</span><span class=\"c1\"></span>            <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">x</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">countArr</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">countArr</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span> <span class=\"n\">y</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">bucket</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">][</span><span class=\"n\">y</span><span class=\"o\">];</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">//取出之后清空记录\n</span><span class=\"c1\"></span>                <span class=\"n\">countArr</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 获取数组中位数最多的数字的位数\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">length</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">length</span><span class=\"o\">).</span><span class=\"na\">length</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81121737", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 哈希表", 
            "content": "<h2>google公司的一个上机题</h2><p>有一个公司,当有新的员工来报道时,要求将该员工的信息加入  (id,名字...),当输入该员工的id时,要求查找到该员工的所有信息</p><p><b>要求:</b> </p><p>不使用数据库,,速度越快越好=&gt;哈希表(散列)添加时，保证按照id从低到高插入</p><h2>代码实现</h2><p><b>ps1:既然没有要求保证ID排列顺序 add方法就可以简单一些</b></p><p><b>ps2:哈希表就是一个链表数组，CRUD方法主要是靠链表类的方法。</b></p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.hashtab</span><span class=\"o\">;</span>\n\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HashTabDemo</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashTable</span> <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashTable</span><span class=\"o\">();</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"s\">&#34;qqq&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"s\">&#34;www&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"s\">&#34;eee&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_4</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"s\">&#34;rrr&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_5</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">112</span><span class=\"o\">,</span> <span class=\"s\">&#34;qqq&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_6</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">223</span><span class=\"o\">,</span> <span class=\"s\">&#34;www&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_7</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">334</span><span class=\"o\">,</span> <span class=\"s\">&#34;eee&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Emp</span> <span class=\"n\">emp_8</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Emp</span><span class=\"o\">(</span><span class=\"n\">445</span><span class=\"o\">,</span> <span class=\"s\">&#34;rrr&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_1</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_2</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_3</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_4</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_5</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_6</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_7</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp_8</span><span class=\"o\">);</span>\n        <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"na\">show</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 员工类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Emp</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * id\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 名字\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 节点信息\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Emp</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Emp</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 员工节点类【单向链表】\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">EmpLinkedList</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Emp</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 添加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param emp\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">Emp</span> <span class=\"n\">emp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//如果的添加第一个成员\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">emp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//否则\n</span><span class=\"c1\"></span>            <span class=\"n\">Emp</span> <span class=\"n\">currentEmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">currentEmp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">currentEmp</span> <span class=\"o\">=</span> <span class=\"n\">currentEmp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">currentEmp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">emp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 展示链表上的所有节点信息\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">show</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;没有数据&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">Emp</span> <span class=\"n\">curEmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">curEmp</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">curEmp</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&#34;\\t\\t&#34;</span> <span class=\"o\">+</span> <span class=\"n\">curEmp</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n                <span class=\"n\">curEmp</span> <span class=\"o\">=</span> <span class=\"n\">curEmp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 获取链表中有几个节点\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">size</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n            <span class=\"n\">Emp</span> <span class=\"n\">curEmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">curEmp</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"n\">curEmp</span> <span class=\"o\">=</span> <span class=\"n\">curEmp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 员工哈希表\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">HashTable</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 假设有5个链表最合理\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"n\">5</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">EmpLinkedList</span><span class=\"o\">[]</span> <span class=\"n\">empLinkedArray</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">EmpLinkedList</span><span class=\"o\">[</span><span class=\"n\">SIZE</span><span class=\"o\">];</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 初始化要记得初始化数组，不然默认为null\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">HashTable</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">SIZE</span><span class=\"o\">;</span> <span class=\"n\">x</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">empLinkedArray</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">EmpLinkedList</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 添加一个节点 调用的是链表方法\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param emp\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">Emp</span> <span class=\"n\">emp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">linkedNo</span> <span class=\"o\">=</span> <span class=\"n\">getLinkedNo</span><span class=\"o\">(</span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">());</span>\n        <span class=\"n\">empLinkedArray</span><span class=\"o\">[</span><span class=\"n\">linkedNo</span><span class=\"o\">].</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">emp</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * id从零开始，一共5条单向链表\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param id\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getLinkedNo</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">id</span> <span class=\"o\">%</span> <span class=\"n\">SIZE</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">show</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">empLinkedArray</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">empLinkedArray</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">empLinkedArray</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">show</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81120036", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 单向链表", 
            "content": "<h2>描述</h2><p>链表是有序的列表，但是它在内存中是存储如下 </p><p>1)链表是以节点的方式来存储,是链式存储</p><p>2)每个节点包含 data 域， next 域：指向下一个节点.</p><p>3)如图：发现链表的各个节点不一定是连续存储.</p><p>4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.queue</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SingleLinkedList</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">HeroNode</span> <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HeroNode</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">);</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 按照添加顺序增加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">HeroNode</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//头结点不能动\n</span><span class=\"c1\"></span>        <span class=\"n\">HeroNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"c1\">//一直循环直到找到尾部节点做接下来的操作\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//找到尾部节点时 赋值\n</span><span class=\"c1\"></span>        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 按照头编号顺序增加一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param node\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addByHead</span><span class=\"o\">(</span><span class=\"n\">HeroNode</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">==</span> <span class=\"n\">0</span> <span class=\"o\">||</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">&lt;=</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">&#34;数据不合法&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">HeroNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"c1\">//头结点不能动\n</span><span class=\"c1\"></span>        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//说明已经在最后面了\n</span><span class=\"c1\"></span>                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//位置找到就在temp后面插入\n</span><span class=\"c1\"></span>                <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">==</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 展示所有节点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">show</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//头结点不能动\n</span><span class=\"c1\"></span>        <span class=\"n\">HeroNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"c1\">//一直循环直到找到尾部节点\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//打印出下一个指向的节点\n</span><span class=\"c1\"></span>            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">);</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 更新或增加一个节点(如果该节点存在)\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param newNode\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"o\">(</span><span class=\"n\">HeroNode</span> <span class=\"n\">newNode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HeroNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">newNode</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">==</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">;</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">addByHead</span><span class=\"o\">(</span><span class=\"n\">newNode</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 删除一个节点\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param nodeHead 节点编号\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">delete</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nodeHead</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HeroNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">temp</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">&amp;&amp;</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">==</span> <span class=\"n\">nodeHead</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">HeroNode</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"n\">HeroNode</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">HeroNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">head</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;[&#34;</span> <span class=\"o\">+</span> <span class=\"s\">&#34;head=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">head</span> <span class=\"o\">+</span> <span class=\"s\">&#34;, data=&#39;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"sc\">&#39;]&#39;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81119855", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之  冒泡排序", 
            "content": "<h2>简述</h2><blockquote> 冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。<br/> </blockquote><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 冒泡排序\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BubbleSort</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 冒泡排序 正序\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleAsc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 冒泡排序 逆序\n</span><span class=\"cm\">     * @param arr\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">bubbleDesc</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">^</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">bubbleAsc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;-----------------------&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">bubbleDesc</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "排序算法", 
                    "tagLink": "https://api.zhihu.com/topics/19622354"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81119021", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 二叉树-顺序存储二叉树", 
            "content": "<h2>顺序存储二叉树</h2><h2>基本说明</h2><p><b>要求：</b></p><p>1)下图的二叉树的结点，要求以数组的方式来存放 arr : [1, 2, 3, 4, 5, 6, 6]。</p><p>2)要求在遍历数组 arr时，仍然可以以前序遍历的方式完成结点的遍历。</p><p><b>特点:</b></p><p>1)顺序二叉树通常只考虑完全二叉树</p><p>2)第n个元素的左子节点为  2 * n + 1 </p><p>3)第n个元素的右子节点为  2 * n + 2</p><p>4)第n个元素的父节点为  (n-1) / 2</p><p>5)n : 表示二叉树中的第几个元素(按0开始编号如图所示)</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-15ce5c337bb24257c761ed3b204207bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"455\" class=\"content_image\" width=\"418\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;418&#39; height=&#39;455&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"455\" class=\"content_image lazy\" width=\"418\" data-actualsrc=\"https://pic1.zhimg.com/v2-15ce5c337bb24257c761ed3b204207bc_b.jpg\"/></figure><h3>代码实现以二叉树前序遍历的方式进行遍历</h3><p><b>前序遍历:</b> 先输出父节点，再遍历左子树和右子树</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.tree</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ArrBinaryTreeDemo</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">};</span>\n        <span class=\"c1\">//创建一个 ArrBinaryTree\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrBinaryTree</span> <span class=\"n\">arrBinaryTree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrBinaryTree</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">arrBinaryTree</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span> <span class=\"c1\">//结果：1,2,4,5,3,6,7\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">ArrBinaryTree</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存储数据结点的数组\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ArrBinaryTree</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">arr</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 重载preOrder方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//从0开始遍历\n</span><span class=\"c1\"></span>        <span class=\"n\">preOrder</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 完成前序存储二叉树的前序遍历\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param index 数组的下标\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//如果数组为空，或者 arr.length = 0\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;数组为空，不能按照二叉树的前序遍历&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">//输出当前这个元素\n</span><span class=\"c1\"></span>        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&#34;\\t&#34;</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">//向左递归遍历\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"n\">2</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">preOrder</span><span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"n\">2</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//向右递归遍历\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"n\">2</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">preOrder</span><span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"n\">2</span> <span class=\"o\">+</span> <span class=\"n\">2</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19591797"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81118598", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "排序算法之 堆排序-二叉树", 
            "content": "<h2>简介</h2><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为<b>大顶堆</b>,每个结点的值都小于或等于其左右孩子结点的值，称为<b>小顶堆</b></p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.sort</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 利用二叉树进行堆排序Demo\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HeapSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n\n\n        <span class=\"n\">heapSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 编写一个堆排序的方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">heapSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">//从下层往上层循环排序\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"n\">2</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"n\">adjustHeap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//循环将arr[0]放到最后升序排序\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//第一个数和最后一个数交换：最大的数去了最后arr[length-1],\n</span><span class=\"c1\"></span>            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">];</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"c1\">//将arr[0]到arr[length-2]区间筛选到arr[0]\n</span><span class=\"c1\"></span>            <span class=\"n\">adjustHeap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 功能： 完成 将 以 i 对应的非叶子结点的树调整成大顶堆\n</span><span class=\"cm\">     * 举例  int arr[] = {4, 6, 8, 5, 9}; =&gt; i = 1 =&gt; adjustHeap =&gt; 得到 {4, 9, 8, 5, 6}\n</span><span class=\"cm\">     * 如果我们再次调用  adjustHeap 传入的是 i = 0 =&gt; 得到 {4, 9, 8, 5, 6} =&gt; {9,6,8,5, 4}\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param arr    待调整的数组\n</span><span class=\"cm\">     * @param i      表示非叶子结点在数组中索引\n</span><span class=\"cm\">     * @param lenght 表示对多少个元素继续调整， length 是在逐渐的减少\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">adjustHeap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">lenght</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//temp 临时变量 赋值当前节点 【父节点】\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n\n        <span class=\"c1\">//K当前节点的左子节点的下标  i = 0 就是从0开始\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">2</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">lenght</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">2</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//右子节点存在 并且 左子节点小于右子节点---------k++\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"n\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">lenght</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">k</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">//如果左子节点&gt;父节点---------左子节点替换父节点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//循环结束后父节点替换左子节点\n</span><span class=\"c1\"></span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81118365", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 二叉树简介", 
            "content": "<h2>简述</h2><p><b>优点：</b>能提高数据存储，读取的效率,  比如利用 二叉排序树(Binary Sort Tree)，既可以保证数据的检索速度，同时也可以保证数据的插入，删除，修改的速度。 </p><p><b>术语：</b></p><p>根节点【root节点】</p><p>父节点【直连的上一个节点】</p><p>子节点【直连的下一个节点】</p><p>叶子节点 【没有子节点的节点】</p><p>节点的权【节点值】</p><p>路径【从root节点找到该节点的路线】</p><p>层【由上往下层数递增1开始】</p><p>子树【在root为根节点的树结构中，X为根节点的子树】</p><p>树的高度【最大层数】</p><p>森林 【多颗子树构成森林】</p><p><b>概念：</b>树有很多种，每个节点最多只能有两个子节点的一种形式称为二叉树，二叉树的子节点分为左节点和右节点。如果该二叉树的所有叶子节点都在最后一层，并且结点总数= 2^n -1 , n 为层数，则我们称为满二叉树 。如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树 。</p><p><b>遍历：</b></p><p>前序遍历: 先输出父节点，再遍历左子树和右子树</p><p>中序遍历: 先遍历左子树，再输出父节点，再遍历右子树</p><p>后序遍历: 先遍历左子树，再遍历右子树，最后输出父节点</p><p><b>删除：</b>如果删除的是父节点 那么子节点也会消失</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.tree</span><span class=\"o\">;</span>\n\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BinaryTreeDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">BinaryTree</span> <span class=\"n\">bt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BinaryTree</span><span class=\"o\">();</span>\n        <span class=\"n\">DataNode</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DataNode</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"s\">&#34;root-根节点&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">DataNode</span> <span class=\"n\">left_1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DataNode</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"s\">&#34;left-左子节点1&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">DataNode</span> <span class=\"n\">right_1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DataNode</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"s\">&#34;right-右节点1&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">DataNode</span> <span class=\"n\">left_2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DataNode</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"s\">&#34;left-左子节点2&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">DataNode</span> <span class=\"n\">right_2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DataNode</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"s\">&#34;right-右节点2&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">setLeft</span><span class=\"o\">(</span><span class=\"n\">left_1</span><span class=\"o\">);</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">setRight</span><span class=\"o\">(</span><span class=\"n\">right_1</span><span class=\"o\">);</span>\n        <span class=\"n\">left_1</span><span class=\"o\">.</span><span class=\"na\">setLeft</span><span class=\"o\">(</span><span class=\"n\">left_2</span><span class=\"o\">);</span>\n        <span class=\"n\">left_1</span><span class=\"o\">.</span><span class=\"na\">setRight</span><span class=\"o\">(</span><span class=\"n\">right_2</span><span class=\"o\">);</span>\n        <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"na\">setRoot</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 二叉树类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">BinaryTree</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 根节点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">DataNode</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 前序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;当前节点为null&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">infixOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;当前节点为null&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 后序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">postOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">postOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;当前节点为null&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 前序遍历查找 根据编号\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param no\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">preOrderSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">preOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历查找 根据编号\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param no\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 后序查找 根据编号\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">postOrderSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">postOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//删除结点\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">delNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getNo</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">//递归删除\n</span><span class=\"c1\"></span>                <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">delNode</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;空树，不能删除~&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">getRoot</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setRoot</span><span class=\"o\">(</span><span class=\"n\">DataNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">root</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 数据节点类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">DataNode</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 编号\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 存放的数据\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 左子节点 默认null\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">DataNode</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 右子节点 默认null\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"n\">DataNode</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 前序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">infixOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">infixOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 后序遍历\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">postOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">postOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">postOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 前序遍历查找 根据编号\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">preOrderSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;进入前序遍历&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//比较当前结点是不是\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">==</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找\n</span><span class=\"c1\"></span>        <span class=\"c1\">//2.如果左递归前序查找，找到结点，则返回\n</span><span class=\"c1\"></span>        <span class=\"n\">DataNode</span> <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">preOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//说明我们左子树找到\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resNode</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">preOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 中序遍历查找 根据编号\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找\n</span><span class=\"c1\"></span>        <span class=\"n\">DataNode</span> <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resNode</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;进入中序查找&#34;</span><span class=\"o\">);</span>\n        <span class=\"c1\">//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">==</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//否则继续进行右递归的中序查找\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">infixOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 后序遍历查找 根据编号\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @return\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">postOrderSearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找\n</span><span class=\"c1\"></span>        <span class=\"n\">DataNode</span> <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"n\">postOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//说明在左子树找到\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resNode</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//如果左子树没有找到，则向右子树递归进行后序遍历查找\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">resNode</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">postOrderSearch</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//在右子树找到\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resNode</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span><span class=\"c1\">//如果左右子树都没有找到，就比较当前结点是不是\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">==</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">resNode</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 递归删除结点\n</span><span class=\"cm\">     * 1.如果删除的节点是叶子节点，则删除该节点\n</span><span class=\"cm\">     * 2.如果删除的节点是非叶子节点，则删除该子树\n</span><span class=\"cm\">     *\n</span><span class=\"cm\">     * @param no\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">delNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"c1\">//如果是头结点是目标 就在树结构中删除\n</span><span class=\"c1\">// 1. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">==</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n<span class=\"c1\">// 2. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">==</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n<span class=\"c1\">// 3. 如果第1和第2步没有删除结点，那么我们就需要向左子树进行递归删除\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">delNode</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n<span class=\"c1\">// 4.  如果第3步也没有删除结点，则向右子树进行递归删除.\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">delNode</span><span class=\"o\">(</span><span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"nf\">DataNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">=</span> <span class=\"n\">no</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getNo</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">no</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setNo</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">no</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">no</span> <span class=\"o\">=</span> <span class=\"n\">no</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getData</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setData</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">getLeft</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setLeft</span><span class=\"o\">(</span><span class=\"n\">DataNode</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">DataNode</span> <span class=\"nf\">getRight</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setRight</span><span class=\"o\">(</span><span class=\"n\">DataNode</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">StringBuffer</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuffer</span><span class=\"o\">(</span><span class=\"s\">&#34;DataNode{&#34;</span> <span class=\"o\">+</span> <span class=\"s\">&#34;no=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">no</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&#34;, data=&#39;&#34;</span> <span class=\"o\">+</span> <span class=\"n\">data</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&#34;, left=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">left</span><span class=\"o\">);</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&#34;, right=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81118009", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "数据结构之 二叉树-赫夫曼树", 
            "content": "<h2>简介</h2><p>给定n个权值作为n个叶子结点，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree), 还有的书翻译为霍夫曼树。 <b>赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近</b> <b>路径和路径长度</b>：在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。 <b>通路中分支的数目称为路径长度</b>：若规定根结点的层数为1，则从根结点到第L层结点的路径长度为L-1 <b>结点的权及带权路径长度</b>：若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。 <b>结点的带权路径长度为</b>：从根结点到该结点之间的路径长度与该结点的权的乘积</p><h2>构成赫夫曼树的步骤</h2><blockquote> 1)从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树 2)取出根节点权值最小的两颗二叉树  3)组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和<br/> 4)再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复  1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树<br/> </blockquote><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.huffman</span><span class=\"o\">;</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.ArrayList</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Collections</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HuffmanTreeDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">13</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">29</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">};</span>\n        <span class=\"n\">HuffmanTree</span> <span class=\"n\">huffmanTree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HuffmanTree</span><span class=\"o\">();</span>\n        <span class=\"c1\">//将数组转化为赫夫曼树\n</span><span class=\"c1\"></span>        <span class=\"n\">HuffmanNode</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">huffmanTree</span><span class=\"o\">.</span><span class=\"na\">currentHuffmanTree</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">);</span>\n        <span class=\"c1\">//前序遍历\n</span><span class=\"c1\"></span>        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">HuffmanTree</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 编写一个前序遍历的方法\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">(</span><span class=\"n\">HuffmanNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;是空树，不能遍历~~&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param arr 需要创建成哈夫曼树的数组\n</span><span class=\"cm\">     * @return 创建好后的赫夫曼树的root结点\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">HuffmanNode</span> <span class=\"nf\">currentHuffmanTree</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//创建节点集合，并将数组遍历每个值都添加到这个集合中\n</span><span class=\"c1\"></span>        <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">HuffmanNode</span><span class=\"o\">&gt;</span> <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">HuffmanNode</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//循环将集合升序排序，用最小两个权值形成二叉树\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//1.将集合升序排序\n</span><span class=\"c1\"></span>            <span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nodes</span><span class=\"o\">);</span>\n            <span class=\"c1\">//2.用最小两个权值形成二叉树\n</span><span class=\"c1\"></span>            <span class=\"n\">HuffmanNode</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n            <span class=\"n\">HuffmanNode</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">HuffmanNode</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HuffmanNode</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">);</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n            <span class=\"c1\">//3.移除前两个值让后面的移动两位\n</span><span class=\"c1\"></span>            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">);</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">right</span><span class=\"o\">);</span>\n            <span class=\"c1\">//4.将新值插入集合\n</span><span class=\"c1\"></span>            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">HuffmanNode</span> <span class=\"kd\">implements</span> <span class=\"n\">Comparable</span><span class=\"o\">&lt;</span><span class=\"n\">HuffmanNode</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 权值\n</span><span class=\"cm\">     */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 左子节点\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">HuffmanNode</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * 右子节点\n</span><span class=\"cm\">     */</span>\n    <span class=\"n\">HuffmanNode</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">HuffmanNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;Node [value=&#34;</span> <span class=\"o\">+</span> <span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"s\">&#34;]&#34;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compareTo</span><span class=\"o\">(</span><span class=\"n\">HuffmanNode</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//升序排序\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">-</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">preOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">preOrder</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81117545", 
            "userName": "兴趣使然的程序员", 
            "userLink": "https://www.zhihu.com/people/baa6d60be4172aedcbea7e5ca9ba9797", 
            "upvote": 0, 
            "title": "查找算法之 二分查找算法", 
            "content": "<h2>简述</h2><p>越来越靠近真实值的查找方法，没什么好讲的。</p><h2>代码实现</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.yuan.common.search</span><span class=\"o\">;</span>\n\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 二分查找\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author Yuan-9826\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BinarySearch</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">4</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">,</span> <span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">7</span><span class=\"o\">,</span> <span class=\"n\">8</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">6</span><span class=\"o\">;</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">binarySerch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">target</span><span class=\"o\">)]==</span><span class=\"n\">target</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param arr 目标数组\n</span><span class=\"cm\">     * @param left 最左值\n</span><span class=\"cm\">     * @param right 最右值\n</span><span class=\"cm\">     * @param target 查找目标\n</span><span class=\"cm\">     * @return 查找目标的下标\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">binarySerch</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//防止内存溢出\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">//中 下标\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">+</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">2</span><span class=\"o\">;</span>\n        <span class=\"c1\">//中 值\n</span><span class=\"c1\"></span>        <span class=\"kt\">int</span> <span class=\"n\">middleValue</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">middle</span><span class=\"o\">];</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">&gt;</span> <span class=\"n\">middleValue</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//右递归\n</span><span class=\"c1\"></span>            <span class=\"k\">return</span> <span class=\"n\">binarySerch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">middle</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">&lt;</span> <span class=\"n\">middleValue</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//左递归\n</span><span class=\"c1\"></span>            <span class=\"k\">return</span> <span class=\"n\">binarySerch</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">middle</span><span class=\"o\">,</span> <span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//返回下标\n</span><span class=\"c1\"></span>            <span class=\"k\">return</span> <span class=\"n\">middle</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"o\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/javaNote-DataStructuresAndAlgorithm"
}
